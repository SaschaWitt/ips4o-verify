\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Mon Aug 22 00:51:50 CEST 2022
[Labels]UseOriginLabels=true
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_OFF
[SMTSettings]invariantForall=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[Choice]DefaultChoices=JavaCard-JavaCard\\:off , Strings-Strings\\:on , assertions-assertions\\:safe , bigint-bigint\\:on , finalFields-finalFields\\:immutable , floatRules-floatRules\\:strictfpOnly , initialisation-initialisation\\:disableStaticInitialisation , intRules-intRules\\:arithmeticSemanticsCheckingOF , integerSimplificationRules-integerSimplificationRules\\:full , javaLoopTreatment-javaLoopTreatment\\:efficient , mergeGenerateIsWeakeningGoal-mergeGenerateIsWeakeningGoal\\:off , methodExpansion-methodExpansion\\:modularOnly , modelFields-modelFields\\:treatAsAxiom , moreSeqRules-moreSeqRules\\:off , permissions-permissions\\:off , programRules-programRules\\:Java , reach-reach\\:on , runtimeExceptions-runtimeExceptions\\:ban , sequences-sequences\\:on , wdChecks-wdChecks\\:off , wdOperator-wdOperator\\:L
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_INVARIANT
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_COMPLETION
[SMTSettings]SelectedTaclets=
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[Strategy]MaximumNumberOfAutomaticApplications=10000
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_DELAYED
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]MPS_OPTIONS_KEY=MPS_MERGE
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[Strategy]Timeout=-1
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_RESTRICTED
[SMTSettings]useUninterpretedMultiplication=true
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT_INTERNAL
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[SMTSettings]maxGenericSorts=2
[StrategyProperty]OSS_OPTIONS_KEY=OSS_ON
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
[SMTSettings]integersMinimum=-2147483645
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]integersMaximum=2147483645
"
}

\javaSource "../../src";

\proofObligation "#Proof Obligation Settings
#Mon Aug 22 00:51:50 CEST 2022
contract=de.wiesler.Tree[de.wiesler.Tree\\:\\:treeSearchInvariantLemma(int,int,int,int,int)].JML model_behavior operation contract.0
name=de.wiesler.Tree[de.wiesler.Tree\\:\\:treeSearchInvariantLemma(int,int,int,int,int)].JML model_behavior operation contract.0
class=de.uka.ilkd.key.proof.init.FunctionalOperationContractPO
";

\proof {
(keyLog "0" (keyUser "Julian" ) (keyVersion "e1a85b31e7"))
(keyLog "1" (keyUser "Julian" ) (keyVersion "e1a85b31e7"))
(keyLog "2" (keyUser "Julian" ) (keyVersion "e1a85b31e7"))
(keyLog "3" (keyUser "Julian" ) (keyVersion "e1a85b31e7"))

(autoModeTime "4688")

(branch "dummy ID"
 (builtin "One Step Simplification" (formula "1") (newnames "heapAtPre,heapBefore,o,f"))
(rule "impRight" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "3"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "4"))
(rule "andLeft" (formula "2"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "7"))
(rule "andLeft" (formula "3"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "10"))
(rule "andLeft" (formula "4"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "13"))
(rule "andLeft" (formula "12"))
(rule "andLeft" (formula "5"))
(rule "notLeft" (formula "2"))
(rule "andRight" (formula "18") (userinteraction))
(branch "Case 1"
   (rule "impRight" (formula "18") (userinteraction))
    (builtin "Evaluate Query" (formula "1") (term "0") (newnames "b_0,l_0,b_bin_0,d_bin_0,value_0,callee,queryResult,res_treeSearchInvariantLemmaImpl") (userinteraction))
   (rule "replaceKnownQuery0_0" (formula "2") (term "0"))
   (rule "expand_inInt" (formula "9"))
   (rule "expand_inInt" (formula "7"))
   (rule "expand_inInt" (formula "6"))
   (rule "expand_inInt" (formula "8"))
   (rule "expand_inInt" (formula "10"))
   (rule "replace_int_MIN" (formula "9") (term "0,1"))
   (rule "replace_int_MAX" (formula "9") (term "1,0"))
   (rule "replace_int_MAX" (formula "7") (term "1,0"))
   (rule "replace_int_MIN" (formula "7") (term "0,1"))
   (rule "replace_int_MIN" (formula "6") (term "0,1"))
   (rule "replace_int_MAX" (formula "6") (term "1,0"))
   (rule "replace_int_MIN" (formula "8") (term "0,1"))
   (rule "replace_int_MAX" (formula "8") (term "1,0"))
   (rule "replace_int_MAX" (formula "10") (term "1,0"))
   (rule "replace_int_MIN" (formula "10") (term "0,1"))
   (rule "andLeft" (formula "17"))
   (rule "notLeft" (formula "1"))
   (rule "andLeft" (formula "8"))
   (rule "andLeft" (formula "6"))
   (rule "andLeft" (formula "5"))
   (rule "andLeft" (formula "9"))
   (rule "andLeft" (formula "13"))
   (rule "eqSymm" (formula "20"))
   (rule "translateJavaAddInt" (formula "26") (term "1,0"))
   (rule "translateJavaAddInt" (formula "26") (term "2,0"))
   (rule "translateJavaSubInt" (formula "26") (term "0,2,0,0,3,0"))
   (rule "translateJavaSubInt" (formula "26") (term "2,3,0"))
   (rule "translateJavaDivInt" (formula "26") (term "4,0"))
   (rule "eqSymm" (formula "24") (term "0,0,1"))
   (rule "translateJavaSubInt" (formula "20") (term "1,0"))
   (rule "translateJavaMulInt" (formula "26") (term "0,1,0"))
   (rule "translateJavaDivInt" (formula "26") (term "1,0,2,0,0,3,0"))
   (rule "translateJavaDivInt" (formula "26") (term "1,2,3,0"))
   (rule "polySimp_elimSub" (formula "20") (term "1,0"))
   (rule "polySimp_elimSub" (formula "26") (term "0,2,0,0,3,0"))
   (rule "polySimp_elimSub" (formula "26") (term "2,3,0"))
   (rule "polySimp_mulComm0" (formula "26") (term "0,1,0"))
   (rule "polySimp_addComm0" (formula "26") (term "2,0"))
   (rule "polySimp_addComm0" (formula "20") (term "1,0"))
   (rule "inEqSimp_commuteLeq" (formula "18"))
   (rule "inEqSimp_commuteLeq" (formula "12"))
   (rule "inEqSimp_commuteLeq" (formula "8"))
   (rule "inEqSimp_commuteLeq" (formula "6"))
   (rule "inEqSimp_commuteLeq" (formula "10"))
   (rule "inEqSimp_commuteLeq" (formula "14"))
   (rule "variableDeclaration" (formula "24") (term "1") (newnames "queryResult"))
   (rule "applyEqRigid" (formula "24") (term "0,0,0,1") (ifseqformula "1"))
   (rule "eqSymm" (formula "24") (term "0,0,1"))
    (builtin "Use Operation Contract" (formula "24") (newnames "heapBefore_treeSearchInvariantLemmaImpl,result_0,exc") (contract "de.wiesler.Tree[de.wiesler.Tree::treeSearchInvariantLemmaImpl(int,int,int,int,int)].JML normal_behavior operation contract.0"))
   (branch "Post (treeSearchInvariantLemmaImpl)"
       (builtin "One Step Simplification" (formula "25"))
       (builtin "One Step Simplification" (formula "24") (ifInst ""  (formula "23")) (ifInst ""  (formula "22")))
      (rule "andLeft" (formula "24"))
      (rule "andLeft" (formula "25"))
      (rule "andLeft" (formula "25"))
      (rule "translateJavaAddInt" (formula "25") (term "1,0"))
      (rule "translateJavaAddInt" (formula "25") (term "2,0"))
      (rule "translateJavaSubInt" (formula "25") (term "0,2,0,0,3,0"))
      (rule "translateJavaSubInt" (formula "25") (term "2,3,0"))
      (rule "translateJavaDivInt" (formula "25") (term "4,0"))
      (rule "translateJavaMulInt" (formula "25") (term "0,1,0"))
      (rule "translateJavaDivInt" (formula "25") (term "1,0,2,0,0,3,0"))
      (rule "translateJavaDivInt" (formula "25") (term "1,2,3,0"))
      (rule "polySimp_elimSub" (formula "25") (term "0,2,0,0,3,0"))
      (rule "polySimp_elimSub" (formula "25") (term "2,3,0"))
      (rule "polySimp_mulComm0" (formula "25") (term "0,1,0"))
      (rule "polySimp_addComm0" (formula "25") (term "2,0"))
      (rule "close" (formula "29") (ifseqformula "25"))
   )
   (branch "Exceptional Post (treeSearchInvariantLemmaImpl)"
       (builtin "One Step Simplification" (formula "24") (ifInst ""  (formula "22")))
       (builtin "One Step Simplification" (formula "25"))
      (rule "andLeft" (formula "24"))
      (rule "andLeft" (formula "25"))
      (rule "andLeft" (formula "24"))
      (rule "andLeft" (formula "26"))
      (rule "notLeft" (formula "24"))
      (rule "close" (formula "28") (ifseqformula "27"))
   )
   (branch "Pre (treeSearchInvariantLemmaImpl)"
       (builtin "One Step Simplification" (formula "24") (ifInst ""  (formula "16")) (ifInst ""  (formula "17")) (ifInst ""  (formula "19")) (ifInst ""  (formula "21")) (ifInst ""  (formula "22")) (ifInst ""  (formula "2")) (ifInst ""  (formula "3")))
      (rule "expand_inInt" (formula "24") (term "1,0,0,1"))
      (rule "expand_inInt" (formula "24") (term "1,0,0,0,1"))
      (rule "expand_inInt" (formula "24") (term "1,1"))
      (rule "expand_inInt" (formula "24") (term "1,0,1"))
      (rule "expand_inInt" (formula "24") (term "0,0,0,0,1"))
      (rule "replace_int_MIN" (formula "24") (term "0,1,1,0,0,1"))
      (rule "replace_int_MAX" (formula "24") (term "1,0,1,0,0,1"))
      (rule "replace_int_MIN" (formula "24") (term "0,1,1,0,0,0,1"))
      (rule "replace_int_MAX" (formula "24") (term "1,0,1,0,0,0,1"))
      (rule "replace_int_MIN" (formula "24") (term "0,1,1,1"))
      (rule "replace_int_MAX" (formula "24") (term "1,0,1,1"))
      (rule "replace_int_MAX" (formula "24") (term "1,0,1,0,1"))
      (rule "replace_int_MIN" (formula "24") (term "0,1,1,0,1"))
      (rule "replace_int_MAX" (formula "24") (term "1,0,0,0,0,0,1"))
      (rule "replace_int_MIN" (formula "24") (term "0,1,0,0,0,0,1"))
      (rule "translateJavaSubInt" (formula "24") (term "1,1,1,0"))
      (rule "eqSymm" (formula "24") (term "1,0"))
      (rule "replace_known_left" (formula "24") (term "0,1,0,0,0,1") (ifseqformula "7"))
       (builtin "One Step Simplification" (formula "24") (ifInst ""  (formula "5")) (ifInst ""  (formula "9")) (ifInst ""  (formula "11")) (ifInst ""  (formula "13")))
      (rule "polySimp_elimSub" (formula "24") (term "1,0,1,0"))
      (rule "polySimp_addComm0" (formula "24") (term "1,0,1,0"))
      (rule "replace_known_left" (formula "24") (term "1,0") (ifseqformula "20"))
       (builtin "One Step Simplification" (formula "24"))
      (rule "inEqSimp_ltToLeq" (formula "19"))
      (rule "polySimp_mulComm0" (formula "19") (term "1,0,0"))
      (rule "polySimp_addComm1" (formula "19") (term "0"))
      (rule "inEqSimp_ltToLeq" (formula "26") (term "0,1,1,0"))
      (rule "polySimp_mulComm0" (formula "26") (term "1,0,0,0,1,1,0"))
      (rule "inEqSimp_ltToLeq" (formula "26") (term "0,3,0"))
      (rule "polySimp_mulComm0" (formula "26") (term "1,0,0,0,3,0"))
      (rule "inEqSimp_commuteLeq" (formula "24") (term "1,1"))
      (rule "replace_known_left" (formula "24") (term "1,1") (ifseqformula "14"))
       (builtin "One Step Simplification" (formula "24"))
      (rule "inEqSimp_commuteLeq" (formula "24") (term "1,0,0,1"))
      (rule "replace_known_left" (formula "24") (term "1,0,0,1") (ifseqformula "8"))
       (builtin "One Step Simplification" (formula "24"))
      (rule "inEqSimp_commuteLeq" (formula "24") (term "0,0,1"))
      (rule "replace_known_left" (formula "24") (term "0,0,1") (ifseqformula "6"))
       (builtin "One Step Simplification" (formula "24"))
      (rule "inEqSimp_commuteLeq" (formula "24") (term "1,1"))
      (rule "replace_known_left" (formula "24") (term "1,1") (ifseqformula "12"))
       (builtin "One Step Simplification" (formula "24"))
      (rule "inEqSimp_commuteLeq" (formula "24") (term "0"))
      (rule "replace_known_left" (formula "24") (term "0") (ifseqformula "18"))
       (builtin "One Step Simplification" (formula "24"))
      (rule "inEqSimp_leqRight" (formula "24"))
      (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
      (rule "polySimp_addComm1" (formula "1") (term "0"))
      (rule "add_literals" (formula "1") (term "0,0"))
      (rule "inEqSimp_sepNegMonomial0" (formula "20"))
      (rule "polySimp_mulLiterals" (formula "20") (term "0"))
      (rule "polySimp_elimOne" (formula "20") (term "0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "0,1,1,0"))
      (rule "polySimp_mulComm0" (formula "26") (term "1,0,1,1,0"))
      (rule "polySimp_rightDist" (formula "26") (term "1,0,1,1,0"))
      (rule "polySimp_mulLiterals" (formula "26") (term "1,1,0,1,1,0"))
      (rule "mul_literals" (formula "26") (term "0,1,0,1,1,0"))
      (rule "polySimp_elimOne" (formula "26") (term "1,1,0,1,1,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "0,3,0"))
      (rule "polySimp_mulComm0" (formula "26") (term "1,0,3,0"))
      (rule "polySimp_rightDist" (formula "26") (term "1,0,3,0"))
      (rule "mul_literals" (formula "26") (term "0,1,0,3,0"))
      (rule "polySimp_mulLiterals" (formula "26") (term "1,1,0,3,0"))
      (rule "polySimp_elimOne" (formula "26") (term "1,1,0,3,0"))
      (rule "inEqSimp_sepNegMonomial1" (formula "1"))
      (rule "polySimp_mulLiterals" (formula "1") (term "0"))
      (rule "polySimp_elimOne" (formula "1") (term "0"))
      (rule "inEqSimp_contradInEq0" (formula "11") (ifseqformula "1"))
      (rule "qeq_literals" (formula "11") (term "0"))
       (builtin "One Step Simplification" (formula "11"))
      (rule "closeFalse" (formula "11"))
   )
   (branch "Null reference (callee = null)"
       (builtin "One Step Simplification" (formula "24") (ifInst ""  (formula "25")))
      (rule "closeTrue" (formula "24"))
   )
)
(branch "Case 2"
   (rule "andRight" (formula "18") (userinteraction))
   (branch "Case 1"
       (builtin "Evaluate Query" (formula "18") (term "0") (newnames "b_0,l_0,b_bin_0,d_bin_0,value_0,callee,queryResult,res_treeSearchInvariantLemmaImpl") (userinteraction))
      (rule "replaceKnownQuery01_0" (formula "19") (term "0"))
      (rule "expand_inInt" (formula "5"))
      (rule "expand_inInt" (formula "7"))
      (rule "expand_inInt" (formula "9"))
      (rule "expand_inInt" (formula "8"))
      (rule "expand_inInt" (formula "6"))
      (rule "replace_int_MIN" (formula "5") (term "0,1"))
      (rule "replace_int_MAX" (formula "5") (term "1,0"))
      (rule "replace_int_MAX" (formula "7") (term "1,0"))
      (rule "replace_int_MIN" (formula "7") (term "0,1"))
      (rule "replace_int_MAX" (formula "9") (term "1,0"))
      (rule "replace_int_MIN" (formula "9") (term "0,1"))
      (rule "replace_int_MIN" (formula "8") (term "0,1"))
      (rule "replace_int_MAX" (formula "8") (term "1,0"))
      (rule "replace_int_MAX" (formula "6") (term "1,0"))
      (rule "replace_int_MIN" (formula "6") (term "0,1"))
      (rule "notLeft" (formula "1"))
      (rule "andLeft" (formula "4"))
      (rule "andLeft" (formula "7"))
      (rule "andLeft" (formula "10"))
      (rule "andLeft" (formula "9"))
      (rule "andLeft" (formula "6"))
      (rule "eqSymm" (formula "19"))
      (rule "eqSymm" (formula "22") (term "0,0,1"))
      (rule "translateJavaSubInt" (formula "19") (term "1,0"))
      (rule "polySimp_elimSub" (formula "19") (term "1,0"))
      (rule "polySimp_addComm0" (formula "19") (term "1,0"))
      (rule "inEqSimp_commuteLeq" (formula "17"))
      (rule "inEqSimp_commuteLeq" (formula "5"))
      (rule "inEqSimp_commuteLeq" (formula "9"))
      (rule "inEqSimp_commuteLeq" (formula "13"))
      (rule "inEqSimp_commuteLeq" (formula "11"))
      (rule "inEqSimp_commuteLeq" (formula "7"))
      (rule "variableDeclaration" (formula "22") (term "1") (newnames "queryResult"))
      (rule "apply_eq_boolean_rigid" (formula "22") (term "0,0,0,1") (ifseqformula "24"))
      (rule "eqSymm" (formula "22") (term "0,0,1"))
       (builtin "One Step Simplification" (formula "22"))
       (builtin "Use Operation Contract" (formula "22") (newnames "heapBefore_treeSearchInvariantLemmaImpl,result_0,exc") (contract "de.wiesler.Tree[de.wiesler.Tree::treeSearchInvariantLemmaImpl(int,int,int,int,int)].JML normal_behavior operation contract.0"))
      (branch "Post (treeSearchInvariantLemmaImpl)"
          (builtin "One Step Simplification" (formula "22") (ifInst ""  (formula "21")))
          (builtin "One Step Simplification" (formula "23"))
         (rule "andLeft" (formula "22"))
         (rule "andLeft" (formula "23"))
         (rule "andLeft" (formula "23"))
         (rule "translateJavaAddInt" (formula "23") (term "1,0"))
         (rule "translateJavaSubInt" (formula "23") (term "0,2,0,0,3,0"))
         (rule "translateJavaAddInt" (formula "23") (term "2,0"))
         (rule "translateJavaSubInt" (formula "23") (term "2,3,0"))
         (rule "translateJavaDivInt" (formula "23") (term "4,0"))
         (rule "translateJavaMulInt" (formula "23") (term "0,1,0"))
         (rule "translateJavaDivInt" (formula "23") (term "1,0,2,0,0,3,0"))
         (rule "translateJavaDivInt" (formula "23") (term "1,2,3,0"))
         (rule "polySimp_elimSub" (formula "23") (term "0,2,0,0,3,0"))
         (rule "polySimp_elimSub" (formula "23") (term "2,3,0"))
         (rule "polySimp_mulComm0" (formula "23") (term "0,1,0"))
         (rule "polySimp_addComm0" (formula "23") (term "2,0"))
         (rule "assignment" (formula "25") (term "1"))
          (builtin "One Step Simplification" (formula "25"))
         (rule "andLeft" (formula "24"))
         (rule "andLeft" (formula "20"))
         (rule "inEqSimp_ltToLeq" (formula "18"))
         (rule "polySimp_mulComm0" (formula "18") (term "1,0,0"))
         (rule "polySimp_addComm1" (formula "18") (term "0"))
         (rule "inEqSimp_ltToLeq" (formula "23") (term "0,1,1,0"))
         (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,0,1,1,0"))
         (rule "inEqSimp_ltToLeq" (formula "23") (term "0,3,0"))
         (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,0,3,0"))
         (rule "applyEq" (formula "26") (term "0,1,0") (ifseqformula "24"))
         (rule "inEqSimp_sepNegMonomial0" (formula "18"))
         (rule "polySimp_mulLiterals" (formula "18") (term "0"))
         (rule "polySimp_elimOne" (formula "18") (term "0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "0,1,1,0"))
         (rule "polySimp_mulComm0" (formula "23") (term "1,0,1,1,0"))
         (rule "polySimp_rightDist" (formula "23") (term "1,0,1,1,0"))
         (rule "polySimp_mulLiterals" (formula "23") (term "1,1,0,1,1,0"))
         (rule "mul_literals" (formula "23") (term "0,1,0,1,1,0"))
         (rule "polySimp_elimOne" (formula "23") (term "1,1,0,1,1,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "0,3,0"))
         (rule "polySimp_mulComm0" (formula "23") (term "1,0,3,0"))
         (rule "polySimp_rightDist" (formula "23") (term "1,0,3,0"))
         (rule "mul_literals" (formula "23") (term "0,1,0,3,0"))
         (rule "polySimp_mulLiterals" (formula "23") (term "1,1,0,3,0"))
         (rule "polySimp_elimOne" (formula "23") (term "1,1,0,3,0"))
         (rule "inEqSimp_subsumption1" (formula "7") (ifseqformula "17"))
         (rule "leq_literals" (formula "7") (term "0"))
          (builtin "One Step Simplification" (formula "7"))
         (rule "true_left" (formula "7"))
         (rule "methodCallEmpty" (formula "25") (term "1"))
          (builtin "One Step Simplification" (formula "25"))
         (rule "emptyModality" (formula "25") (term "1"))
          (builtin "One Step Simplification" (formula "25"))
         (rule "closeTrue" (formula "25"))
      )
      (branch "Exceptional Post (treeSearchInvariantLemmaImpl)"
          (builtin "One Step Simplification" (formula "23"))
          (builtin "One Step Simplification" (formula "22"))
         (rule "andLeft" (formula "22"))
         (rule "andLeft" (formula "23"))
         (rule "andLeft" (formula "22"))
         (rule "andLeft" (formula "24"))
         (rule "notLeft" (formula "22"))
         (rule "close" (formula "26") (ifseqformula "25"))
      )
      (branch "Pre (treeSearchInvariantLemmaImpl)"
          (builtin "One Step Simplification" (formula "22") (ifInst ""  (formula "15")) (ifInst ""  (formula "16")) (ifInst ""  (formula "18")) (ifInst ""  (formula "20")) (ifInst ""  (formula "1")) (ifInst ""  (formula "2")))
         (rule "andRight" (formula "22"))
         (branch "Case 1"
            (rule "andRight" (formula "22"))
            (branch
               (rule "inEqSimp_leqRight" (formula "22"))
               (rule "add_zero_right" (formula "1") (term "0"))
               (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
               (rule "inEqSimp_ltToLeq" (formula "19"))
               (rule "polySimp_mulComm0" (formula "19") (term "1,0,0"))
               (rule "polySimp_addComm1" (formula "19") (term "0"))
               (rule "inEqSimp_sepNegMonomial1" (formula "1"))
               (rule "polySimp_mulLiterals" (formula "1") (term "0"))
               (rule "polySimp_elimOne" (formula "1") (term "0"))
               (rule "inEqSimp_sepNegMonomial0" (formula "19"))
               (rule "polySimp_mulLiterals" (formula "19") (term "0"))
               (rule "polySimp_elimOne" (formula "19") (term "0"))
               (rule "inEqSimp_contradInEq0" (formula "18") (ifseqformula "1"))
               (rule "qeq_literals" (formula "18") (term "0"))
                (builtin "One Step Simplification" (formula "18"))
               (rule "closeFalse" (formula "18"))
            )
            (branch "Case 2"
               (rule "andLeft" (formula "20"))
               (rule "translateJavaSubInt" (formula "23") (term "1,1"))
               (rule "eqSymm" (formula "23"))
               (rule "polySimp_elimSub" (formula "23") (term "1,0"))
               (rule "polySimp_addComm0" (formula "23") (term "1,0"))
               (rule "close" (formula "23") (ifseqformula "19"))
            )
         )
         (branch
            (rule "andRight" (formula "22"))
            (branch
               (rule "andRight" (formula "22"))
               (branch
                  (rule "andRight" (formula "22"))
                  (branch
                     (rule "andRight" (formula "22"))
                     (branch
                        (rule "expand_inInt" (formula "22"))
                        (rule "replace_int_MAX" (formula "22") (term "1,0"))
                        (rule "replace_int_MIN" (formula "22") (term "0,1"))
                        (rule "replace_known_left" (formula "22") (term "0") (ifseqformula "4"))
                         (builtin "One Step Simplification" (formula "22"))
                        (rule "inEqSimp_leqRight" (formula "22"))
                        (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                        (rule "polySimp_addComm1" (formula "1") (term "0"))
                        (rule "add_literals" (formula "1") (term "0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "19"))
                        (rule "polySimp_mulComm0" (formula "19") (term "1,0,0"))
                        (rule "polySimp_addComm1" (formula "19") (term "0"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "1"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                        (rule "polySimp_elimOne" (formula "1") (term "0"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "19"))
                        (rule "polySimp_mulLiterals" (formula "19") (term "0"))
                        (rule "polySimp_elimOne" (formula "19") (term "0"))
                        (rule "inEqSimp_contradInEq0" (formula "6") (ifseqformula "1"))
                        (rule "qeq_literals" (formula "6") (term "0"))
                         (builtin "One Step Simplification" (formula "6"))
                        (rule "closeFalse" (formula "6"))
                     )
                     (branch
                        (rule "expand_inInt" (formula "22"))
                        (rule "replace_int_MIN" (formula "22") (term "0,1"))
                        (rule "replace_int_MAX" (formula "22") (term "1,0"))
                        (rule "replace_known_left" (formula "22") (term "0") (ifseqformula "6"))
                         (builtin "One Step Simplification" (formula "22"))
                        (rule "inEqSimp_leqRight" (formula "22"))
                        (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                        (rule "polySimp_addComm1" (formula "1") (term "0"))
                        (rule "add_literals" (formula "1") (term "0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "19"))
                        (rule "polySimp_mulComm0" (formula "19") (term "1,0,0"))
                        (rule "polySimp_addComm1" (formula "19") (term "0"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "1"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                        (rule "polySimp_elimOne" (formula "1") (term "0"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "19"))
                        (rule "polySimp_mulLiterals" (formula "19") (term "0"))
                        (rule "polySimp_elimOne" (formula "19") (term "0"))
                        (rule "inEqSimp_contradInEq0" (formula "18") (ifseqformula "1"))
                        (rule "qeq_literals" (formula "18") (term "0"))
                         (builtin "One Step Simplification" (formula "18"))
                        (rule "closeFalse" (formula "18"))
                     )
                  )
                  (branch
                     (rule "expand_inInt" (formula "22"))
                     (rule "replace_int_MAX" (formula "22") (term "1,0"))
                     (rule "replace_int_MIN" (formula "22") (term "0,1"))
                     (rule "replace_known_left" (formula "22") (term "0") (ifseqformula "8"))
                      (builtin "One Step Simplification" (formula "22"))
                     (rule "inEqSimp_leqRight" (formula "22"))
                     (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                     (rule "polySimp_addComm1" (formula "1") (term "0"))
                     (rule "add_literals" (formula "1") (term "0,0"))
                     (rule "inEqSimp_ltToLeq" (formula "19"))
                     (rule "polySimp_mulComm0" (formula "19") (term "1,0,0"))
                     (rule "polySimp_addComm1" (formula "19") (term "0"))
                     (rule "inEqSimp_sepNegMonomial1" (formula "1"))
                     (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                     (rule "polySimp_elimOne" (formula "1") (term "0"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "19"))
                     (rule "polySimp_mulLiterals" (formula "19") (term "0"))
                     (rule "polySimp_elimOne" (formula "19") (term "0"))
                     (rule "inEqSimp_subsumption0" (formula "9") (ifseqformula "1"))
                     (rule "leq_literals" (formula "9") (term "0"))
                      (builtin "One Step Simplification" (formula "9"))
                     (rule "true_left" (formula "9"))
                     (rule "inEqSimp_subsumption1" (formula "8") (ifseqformula "17"))
                     (rule "leq_literals" (formula "8") (term "0"))
                      (builtin "One Step Simplification" (formula "8"))
                     (rule "true_left" (formula "8"))
                     (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "8"))
                     (rule "qeq_literals" (formula "1") (term "0"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "closeFalse" (formula "1"))
                  )
               )
               (branch
                  (rule "expand_inInt" (formula "22"))
                  (rule "replace_int_MAX" (formula "22") (term "1,0"))
                  (rule "replace_int_MIN" (formula "22") (term "0,1"))
                  (rule "replace_known_left" (formula "22") (term "0") (ifseqformula "10"))
                   (builtin "One Step Simplification" (formula "22"))
                  (rule "inEqSimp_leqRight" (formula "22"))
                  (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                  (rule "polySimp_addComm1" (formula "1") (term "0"))
                  (rule "add_literals" (formula "1") (term "0,0"))
                  (rule "inEqSimp_ltToLeq" (formula "19"))
                  (rule "polySimp_mulComm0" (formula "19") (term "1,0,0"))
                  (rule "polySimp_addComm1" (formula "19") (term "0"))
                  (rule "inEqSimp_sepNegMonomial1" (formula "1"))
                  (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                  (rule "polySimp_elimOne" (formula "1") (term "0"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "19"))
                  (rule "polySimp_mulLiterals" (formula "19") (term "0"))
                  (rule "polySimp_elimOne" (formula "19") (term "0"))
                  (rule "inEqSimp_contradInEq0" (formula "12") (ifseqformula "1"))
                  (rule "qeq_literals" (formula "12") (term "0"))
                   (builtin "One Step Simplification" (formula "12"))
                  (rule "closeFalse" (formula "12"))
               )
            )
            (branch
               (rule "expand_inInt" (formula "22"))
               (rule "replace_int_MIN" (formula "22") (term "0,1"))
               (rule "replace_int_MAX" (formula "22") (term "1,0"))
               (rule "replace_known_left" (formula "22") (term "0") (ifseqformula "12"))
                (builtin "One Step Simplification" (formula "22"))
               (rule "inEqSimp_leqRight" (formula "22"))
               (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
               (rule "polySimp_addComm1" (formula "1") (term "0"))
               (rule "add_literals" (formula "1") (term "0,0"))
               (rule "inEqSimp_ltToLeq" (formula "19"))
               (rule "polySimp_mulComm0" (formula "19") (term "1,0,0"))
               (rule "polySimp_addComm1" (formula "19") (term "0"))
               (rule "inEqSimp_sepNegMonomial1" (formula "1"))
               (rule "polySimp_mulLiterals" (formula "1") (term "0"))
               (rule "polySimp_elimOne" (formula "1") (term "0"))
               (rule "inEqSimp_sepNegMonomial0" (formula "19"))
               (rule "polySimp_mulLiterals" (formula "19") (term "0"))
               (rule "polySimp_elimOne" (formula "19") (term "0"))
               (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "14"))
               (rule "qeq_literals" (formula "1") (term "0"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "closeFalse" (formula "1"))
            )
         )
      )
      (branch "Null reference (callee = null)"
          (builtin "One Step Simplification" (formula "22") (ifInst ""  (formula "23")))
         (rule "closeTrue" (formula "22"))
      )
   )
   (branch "Case 2"
      (rule "expand_inInt" (formula "7"))
      (rule "expand_inInt" (formula "5"))
      (rule "expand_inInt" (formula "8"))
      (rule "expand_inInt" (formula "6"))
      (rule "expand_inInt" (formula "4"))
      (rule "replace_int_MIN" (formula "7") (term "0,1"))
      (rule "replace_int_MAX" (formula "7") (term "1,0"))
      (rule "replace_int_MAX" (formula "5") (term "1,0"))
      (rule "replace_int_MIN" (formula "5") (term "0,1"))
      (rule "replace_int_MAX" (formula "8") (term "1,0"))
      (rule "replace_int_MIN" (formula "8") (term "0,1"))
      (rule "replace_int_MIN" (formula "6") (term "0,1"))
      (rule "replace_int_MAX" (formula "6") (term "1,0"))
      (rule "replace_int_MIN" (formula "4") (term "0,1"))
      (rule "replace_int_MAX" (formula "4") (term "1,0"))
      (rule "andLeft" (formula "15"))
      (rule "close" (formula "19") (ifseqformula "16"))
   )
)
)
}
