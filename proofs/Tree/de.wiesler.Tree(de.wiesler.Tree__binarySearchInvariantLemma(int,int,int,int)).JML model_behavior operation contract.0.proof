\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Sun Aug 21 23:56:03 CEST 2022
[Labels]UseOriginLabels=true
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_OFF
[SMTSettings]invariantForall=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[Choice]DefaultChoices=JavaCard-JavaCard\\:off , Strings-Strings\\:on , assertions-assertions\\:safe , bigint-bigint\\:on , finalFields-finalFields\\:immutable , floatRules-floatRules\\:strictfpOnly , initialisation-initialisation\\:disableStaticInitialisation , intRules-intRules\\:arithmeticSemanticsCheckingOF , integerSimplificationRules-integerSimplificationRules\\:full , javaLoopTreatment-javaLoopTreatment\\:efficient , mergeGenerateIsWeakeningGoal-mergeGenerateIsWeakeningGoal\\:off , methodExpansion-methodExpansion\\:modularOnly , modelFields-modelFields\\:treatAsAxiom , moreSeqRules-moreSeqRules\\:off , permissions-permissions\\:off , programRules-programRules\\:Java , reach-reach\\:on , runtimeExceptions-runtimeExceptions\\:ban , sequences-sequences\\:on , wdChecks-wdChecks\\:off , wdOperator-wdOperator\\:L
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_INVARIANT
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_DEF_OPS
[SMTSettings]SelectedTaclets=
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[Strategy]MaximumNumberOfAutomaticApplications=10000
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_DELAYED
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]MPS_OPTIONS_KEY=MPS_MERGE
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[Strategy]Timeout=-1
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_RESTRICTED
[SMTSettings]useUninterpretedMultiplication=true
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT_INTERNAL
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[SMTSettings]maxGenericSorts=2
[StrategyProperty]OSS_OPTIONS_KEY=OSS_ON
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
[SMTSettings]integersMinimum=-2147483645
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]integersMaximum=2147483645
"
}

\javaSource "../../src";

\proofObligation "#Proof Obligation Settings
#Sun Aug 21 23:56:03 CEST 2022
contract=de.wiesler.Tree[de.wiesler.Tree\\:\\:binarySearchInvariantLemma(int,int,int,int)].JML model_behavior operation contract.0
name=de.wiesler.Tree[de.wiesler.Tree\\:\\:binarySearchInvariantLemma(int,int,int,int)].JML model_behavior operation contract.0
class=de.uka.ilkd.key.proof.init.FunctionalOperationContractPO
";

\proof {
(keyLog "0" (keyUser "Julian" ) (keyVersion "e1a85b31e7"))
(keyLog "1" (keyUser "Julian" ) (keyVersion "e1a85b31e7"))

(autoModeTime "43563")

(branch "dummy ID"
 (builtin "One Step Simplification" (formula "1") (newnames "heapAtPre,heapBefore,o,f"))
(rule "impRight" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "3"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "4"))
(rule "andLeft" (formula "2"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "7"))
(rule "andLeft" (formula "3"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "10"))
(rule "andLeft" (formula "9"))
(rule "andLeft" (formula "4"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "2"))
(rule "Definition_axiom_for_binarySearchInvariant_in_de_wiesler_Tree" (formula "9") (term "0") (userinteraction))
(rule "andRight" (formula "16") (userinteraction))
(branch "Case 1"
   (rule "Definition_axiom_for_binarySearchInvariant_in_de_wiesler_Tree" (formula "16") (term "0") (userinteraction))
    (builtin "One Step Simplification" (formula "9"))
    (builtin "One Step Simplification" (formula "16"))
   (rule "andLeft" (formula "9"))
   (rule "andLeft" (formula "9"))
   (rule "andLeft" (formula "9"))
   (rule "andRight" (formula "19"))
   (branch "Case 1"
      (rule "andRight" (formula "19"))
      (branch "Case 1"
         (rule "andRight" (formula "19"))
         (branch "Case 1"
            (rule "ifthenelse_split" (formula "19") (term "1") (userinteraction))
            (branch " self.sorted_splitters[javaSubInt(b, javaDivInt(d, 2))] < value TRUE"
               (rule "powPositive" (formula "16") (term "1") (userinteraction))
               (rule "expand_inInt" (formula "5"))
               (rule "expand_inInt" (formula "6"))
               (rule "expand_inInt" (formula "7"))
               (rule "expand_inInt" (formula "8"))
               (rule "greater_literals" (formula "16") (term "1,0"))
                (builtin "One Step Simplification" (formula "16"))
               (rule "replace_int_MIN" (formula "5") (term "0,1"))
               (rule "replace_int_MAX" (formula "5") (term "1,0"))
               (rule "replace_int_MIN" (formula "6") (term "0,1"))
               (rule "replace_int_MAX" (formula "6") (term "1,0"))
               (rule "replace_int_MAX" (formula "7") (term "1,0"))
               (rule "replace_int_MIN" (formula "7") (term "0,1"))
               (rule "replace_int_MAX" (formula "8") (term "1,0"))
               (rule "replace_int_MIN" (formula "8") (term "0,1"))
               (rule "andLeft" (formula "5"))
               (rule "andLeft" (formula "7"))
               (rule "andLeft" (formula "9"))
               (rule "andLeft" (formula "11"))
               (rule "translateJavaSubInt" (formula "14") (term "0"))
               (rule "translateJavaSubInt" (formula "15") (term "1"))
               (rule "translateJavaSubInt" (formula "16") (term "0,0"))
               (rule "translateJavaSubInt" (formula "16") (term "0,2,0,1"))
               (rule "translateJavaSubInt" (formula "25") (term "0"))
               (rule "eqSymm" (formula "17") (term "0"))
               (rule "eqSymm" (formula "21"))
               (rule "translateJavaSubInt" (formula "1") (term "0,2,0"))
               (rule "translateJavaSubInt" (formula "20") (term "0,0"))
               (rule "translateJavaSubInt" (formula "20") (term "1,0,1"))
               (rule "translateJavaDivInt" (formula "25") (term "0,0"))
               (rule "translateJavaSubInt" (formula "17") (term "0,0"))
               (rule "translateJavaSubInt" (formula "21") (term "1,0"))
               (rule "translateJavaDivInt" (formula "1") (term "1,0,2,0"))
               (rule "polySimp_elimSub" (formula "14") (term "0"))
               (rule "mul_literals" (formula "14") (term "1,0"))
               (rule "polySimp_elimSub" (formula "15") (term "1"))
               (rule "mul_literals" (formula "15") (term "1,1"))
               (rule "polySimp_elimSub" (formula "16") (term "0,0"))
               (rule "polySimp_elimSub" (formula "16") (term "0,2,0,1"))
               (rule "polySimp_elimSub" (formula "20") (term "0,0"))
               (rule "polySimp_elimSub" (formula "20") (term "1,0,1"))
               (rule "polySimp_elimSub" (formula "25") (term "0"))
               (rule "mul_literals" (formula "25") (term "1,0"))
               (rule "polySimp_elimSub" (formula "17") (term "0,0"))
               (rule "mul_literals" (formula "17") (term "1,0,0"))
               (rule "polySimp_elimSub" (formula "21") (term "1,0"))
               (rule "polySimp_elimSub" (formula "1") (term "0,2,0"))
               (rule "polySimp_homoEq" (formula "16") (term "0"))
               (rule "polySimp_homoEq" (formula "17") (term "0"))
               (rule "polySimp_mulComm0" (formula "16") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "17") (term "1,0,0"))
               (rule "polySimp_addComm0" (formula "14") (term "0"))
               (rule "polySimp_addComm0" (formula "15") (term "1"))
               (rule "polySimp_addComm0" (formula "20") (term "0,0"))
               (rule "polySimp_addComm0" (formula "20") (term "1,0,1"))
               (rule "polySimp_addComm0" (formula "25") (term "0"))
               (rule "polySimp_addComm0" (formula "21") (term "1,0"))
               (rule "polySimp_addComm0" (formula "17") (term "1,1,0,0"))
               (rule "polySimp_rightDist" (formula "16") (term "1,0,0"))
               (rule "polySimp_mulLiterals" (formula "16") (term "1,1,0,0"))
               (rule "polySimp_elimOne" (formula "16") (term "1,1,0,0"))
               (rule "polySimp_mulComm0" (formula "16") (term "0,1,0,0"))
               (rule "polySimp_rightDist" (formula "17") (term "1,0,0"))
               (rule "mul_literals" (formula "17") (term "0,1,0,0"))
               (rule "inEqSimp_ltToLeq" (formula "19"))
               (rule "polySimp_mulComm0" (formula "19") (term "1,0,0"))
               (rule "polySimp_addComm1" (formula "19") (term "0"))
               (rule "polySimp_addAssoc" (formula "16") (term "0,0"))
               (rule "polySimp_addAssoc" (formula "17") (term "0,0"))
               (rule "polySimp_addComm0" (formula "17") (term "0,0,0"))
               (rule "inEqSimp_ltToLeq" (formula "16") (term "1"))
               (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,1"))
               (rule "inEqSimp_commuteLeq" (formula "17") (term "1"))
               (rule "inEqSimp_commuteLeq" (formula "18"))
               (rule "inEqSimp_leqRight" (formula "25"))
               (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
               (rule "polySimp_addAssoc" (formula "1") (term "0"))
               (rule "polySimp_addComm1" (formula "1") (term "0,0"))
               (rule "add_literals" (formula "1") (term "0,0,0"))
               (rule "inEqSimp_ltToLeq" (formula "2"))
               (rule "polySimp_mulComm0" (formula "2") (term "1,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "7"))
               (rule "inEqSimp_commuteLeq" (formula "9"))
               (rule "inEqSimp_commuteLeq" (formula "11"))
               (rule "inEqSimp_commuteLeq" (formula "13"))
               (rule "inEqSimp_homoInEq0" (formula "15"))
               (rule "polySimp_mulComm0" (formula "15") (term "1,0"))
               (rule "polySimp_rightDist" (formula "15") (term "1,0"))
               (rule "mul_literals" (formula "15") (term "0,1,0"))
               (rule "polySimp_addAssoc" (formula "15") (term "0"))
               (rule "polySimp_addComm0" (formula "15") (term "0,0"))
               (rule "inEqSimp_homoInEq0" (formula "16"))
               (rule "polySimp_addComm1" (formula "16") (term "0"))
               (rule "applyEq" (formula "21") (term "0,1") (ifseqformula "22"))
               (rule "polySimp_sepPosMonomial" (formula "17") (term "0"))
               (rule "polySimp_mulComm0" (formula "17") (term "1,0"))
               (rule "polySimp_rightDist" (formula "17") (term "1,0"))
               (rule "polySimp_mulLiterals" (formula "17") (term "1,1,0"))
               (rule "mul_literals" (formula "17") (term "0,1,0"))
               (rule "polySimp_elimOne" (formula "17") (term "1,1,0"))
               (rule "polySimp_sepNegMonomial" (formula "18") (term "0"))
               (rule "polySimp_mulLiterals" (formula "18") (term "0,0"))
               (rule "polySimp_elimOne" (formula "18") (term "0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "21") (term "0"))
               (rule "polySimp_mulLiterals" (formula "21") (term "1,0"))
               (rule "polySimp_elimOne" (formula "21") (term "1,0"))
               (rule "inEqSimp_sepNegMonomial0" (formula "20"))
               (rule "polySimp_mulLiterals" (formula "20") (term "0"))
               (rule "polySimp_elimOne" (formula "20") (term "0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "1"))
               (rule "polySimp_mulComm0" (formula "17") (term "1,1"))
               (rule "polySimp_rightDist" (formula "17") (term "1,1"))
               (rule "polySimp_mulLiterals" (formula "17") (term "1,1,1"))
               (rule "mul_literals" (formula "17") (term "0,1,1"))
               (rule "polySimp_elimOne" (formula "17") (term "1,1,1"))
               (rule "inEqSimp_sepPosMonomial1" (formula "1"))
               (rule "polySimp_mulComm0" (formula "1") (term "1"))
               (rule "polySimp_rightDist" (formula "1") (term "1"))
               (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
               (rule "mul_literals" (formula "1") (term "0,1"))
               (rule "polySimp_elimOne" (formula "1") (term "1,1"))
               (rule "inEqSimp_sepPosMonomial0" (formula "2"))
               (rule "polySimp_mulComm0" (formula "2") (term "1"))
               (rule "polySimp_rightDist" (formula "2") (term "1"))
               (rule "mul_literals" (formula "2") (term "0,1"))
               (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
               (rule "polySimp_elimOne" (formula "2") (term "1,1"))
               (rule "inEqSimp_sepNegMonomial1" (formula "15"))
               (rule "polySimp_mulLiterals" (formula "15") (term "0"))
               (rule "polySimp_elimOne" (formula "15") (term "0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "16"))
               (rule "polySimp_mulComm0" (formula "16") (term "1"))
               (rule "polySimp_rightDist" (formula "16") (term "1"))
               (rule "polySimp_mulLiterals" (formula "16") (term "1,1"))
               (rule "mul_literals" (formula "16") (term "0,1"))
               (rule "polySimp_elimOne" (formula "16") (term "1,1"))
               (rule "inEqSimp_subsumption1" (formula "21") (term "0") (ifseqformula "20"))
               (rule "inEqSimp_homoInEq0" (formula "21") (term "0,0"))
               (rule "polySimp_pullOutFactor1b" (formula "21") (term "0,0,0"))
               (rule "add_literals" (formula "21") (term "1,1,0,0,0"))
               (rule "times_zero_1" (formula "21") (term "1,0,0,0"))
               (rule "add_zero_right" (formula "21") (term "0,0,0"))
               (rule "qeq_literals" (formula "21") (term "0,0"))
                (builtin "One Step Simplification" (formula "21"))
               (rule "inEqSimp_subsumption1" (formula "13") (ifseqformula "19"))
               (rule "leq_literals" (formula "13") (term "0"))
                (builtin "One Step Simplification" (formula "13"))
               (rule "true_left" (formula "13"))
               (rule "inEqSimp_subsumption1" (formula "9") (ifseqformula "20"))
               (rule "leq_literals" (formula "9") (term "0"))
                (builtin "One Step Simplification" (formula "9"))
               (rule "true_left" (formula "9"))
               (rule "inEqSimp_exactShadow3" (formula "19") (ifseqformula "13"))
               (rule "mul_literals" (formula "19") (term "0,0"))
               (rule "polySimp_addAssoc" (formula "19") (term "0"))
               (rule "add_literals" (formula "19") (term "0,0"))
               (rule "add_zero_left" (formula "19") (term "0"))
               (rule "inEqSimp_subsumption1" (formula "7") (ifseqformula "19"))
               (rule "leq_literals" (formula "7") (term "0"))
                (builtin "One Step Simplification" (formula "7"))
               (rule "true_left" (formula "7"))
               (rule "Free_class_invariant_axiom_for_de_wiesler_Tree" (formula "22"))
               (rule "true_left" (formula "22"))
               (rule "Class_invariant_axiom_for_de_wiesler_Tree" (formula "21") (inst "i=i") (inst "i_0=i_0"))
                (builtin "One Step Simplification" (formula "21"))
               (rule "expand_inInt" (formula "21") (term "1,0,0,1"))
               (rule "expand_inInt" (formula "21") (term "1,0,0,1,0"))
               (rule "replace_int_MAX" (formula "21") (term "1,0,1,0,0,1"))
               (rule "replace_int_MIN" (formula "21") (term "0,1,1,0,0,1"))
               (rule "replace_int_MIN" (formula "21") (term "0,1,1,0,0,1,0"))
               (rule "replace_int_MAX" (formula "21") (term "1,0,1,0,0,1,0"))
               (rule "andLeft" (formula "21"))
               (rule "andLeft" (formula "21"))
               (rule "andLeft" (formula "21"))
               (rule "andLeft" (formula "21"))
               (rule "andLeft" (formula "21"))
               (rule "andLeft" (formula "22"))
               (rule "andLeft" (formula "21"))
               (rule "andLeft" (formula "21"))
               (rule "andLeft" (formula "21"))
               (rule "andLeft" (formula "23"))
               (rule "notLeft" (formula "22"))
               (rule "notLeft" (formula "21"))
               (rule "translateJavaSubInt" (formula "29") (term "0,2,1,1,0"))
               (rule "translateJavaSubInt" (formula "27") (term "3,0"))
               (rule "translateJavaShiftLeftInt" (formula "23") (term "1"))
               (rule "eqSymm" (formula "29") (term "1,0"))
               (rule "polySimp_elimSub" (formula "27") (term "3,0"))
               (rule "mul_literals" (formula "27") (term "1,3,0"))
               (rule "polySimp_elimSub" (formula "29") (term "0,2,0,1,0"))
               (rule "mul_literals" (formula "29") (term "1,0,2,0,1,0"))
               (rule "polySimp_addComm0" (formula "27") (term "3,0"))
               (rule "polySimp_addComm0" (formula "29") (term "0,2,0,1,0"))
               (rule "inEqSimp_ltToLeq" (formula "29") (term "1,0,0,0"))
               (rule "polySimp_mulComm0" (formula "29") (term "1,0,0,1,0,0,0"))
               (rule "inEqSimp_ltToLeq" (formula "28") (term "1,0,0,0"))
               (rule "polySimp_mulComm0" (formula "28") (term "1,0,0,1,0,0,0"))
               (rule "inEqSimp_ltToLeq" (formula "28") (term "1,1,0"))
               (rule "polySimp_mulComm0" (formula "28") (term "1,0,0,1,1,0"))
               (rule "inEqSimp_commuteLeq" (formula "29") (term "1,1,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "29") (term "0,0,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "28") (term "0,0,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "28") (term "0,1,0"))
               (rule "inEqSimp_commuteLeq" (formula "28") (term "1,1,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "26"))
               (rule "inEqSimp_commuteLeq" (formula "25"))
               (rule "inEqSimp_commuteLeq" (formula "24"))
               (rule "inEqSimp_commuteLeq" (formula "21"))
               (rule "applyEq" (formula "24") (term "0") (ifseqformula "23"))
               (rule "applyEq" (formula "27") (term "1,3,0") (ifseqformula "23"))
               (rule "applyEq" (formula "25") (term "1") (ifseqformula "23"))
               (rule "applyEq" (formula "26") (term "1") (ifseqformula "23"))
               (rule "applyEq" (formula "13") (term "0") (ifseqformula "23"))
               (rule "applyEq" (formula "15") (term "0,0") (ifseqformula "23"))
               (rule "applyEq" (formula "29") (term "0,1,0,0,1,0,0,0") (ifseqformula "23"))
               (rule "applyEq" (formula "28") (term "0,1,0,0,1,1,0") (ifseqformula "23"))
               (rule "applyEq" (formula "28") (term "0,1,0,0,1,0,0,0") (ifseqformula "23"))
               (rule "inEqSimp_sepPosMonomial0" (formula "29") (term "1,0,0,0"))
               (rule "polySimp_mulComm0" (formula "29") (term "1,1,0,0,0"))
               (rule "polySimp_rightDist" (formula "29") (term "1,1,0,0,0"))
               (rule "mul_literals" (formula "29") (term "0,1,1,0,0,0"))
               (rule "polySimp_mulLiterals" (formula "29") (term "1,1,1,0,0,0"))
               (rule "polySimp_elimOne" (formula "29") (term "1,1,1,0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "28") (term "1,1,0"))
               (rule "polySimp_mulComm0" (formula "28") (term "1,1,1,0"))
               (rule "polySimp_rightDist" (formula "28") (term "1,1,1,0"))
               (rule "mul_literals" (formula "28") (term "0,1,1,1,0"))
               (rule "polySimp_mulLiterals" (formula "28") (term "1,1,1,1,0"))
               (rule "polySimp_elimOne" (formula "28") (term "1,1,1,1,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "28") (term "1,0,0,0"))
               (rule "polySimp_mulComm0" (formula "28") (term "1,1,0,0,0"))
               (rule "polySimp_rightDist" (formula "28") (term "1,1,0,0,0"))
               (rule "polySimp_mulLiterals" (formula "28") (term "1,1,1,0,0,0"))
               (rule "mul_literals" (formula "28") (term "0,1,1,0,0,0"))
               (rule "polySimp_elimOne" (formula "28") (term "1,1,1,0,0,0"))
               (rule "javaShiftLeftIntDef" (formula "23") (term "1"))
               (rule "mod_axiom" (formula "23") (term "1,0,1"))
               (rule "polySimp_mulLiterals" (formula "23") (term "1,1,0,1"))
               (rule "javaShiftLeftIntDef" (formula "24") (term "0"))
               (rule "mod_axiom" (formula "24") (term "1,0,0"))
               (rule "polySimp_mulLiterals" (formula "24") (term "1,1,0,0"))
               (rule "javaShiftLeftIntDef" (formula "27") (term "1,3,0"))
               (rule "mod_axiom" (formula "27") (term "1,0,1,3,0"))
               (rule "polySimp_mulLiterals" (formula "27") (term "1,1,0,1,3,0"))
               (rule "javaShiftLeftIntDef" (formula "25") (term "1"))
               (rule "mod_axiom" (formula "25") (term "1,0,1"))
               (rule "polySimp_mulLiterals" (formula "25") (term "1,1,0,1"))
               (rule "javaShiftLeftIntDef" (formula "26") (term "1"))
               (rule "mod_axiom" (formula "26") (term "1,0,1"))
               (rule "polySimp_mulLiterals" (formula "26") (term "1,1,0,1"))
               (rule "javaShiftLeftIntDef" (formula "13") (term "0"))
               (rule "mod_axiom" (formula "13") (term "1,0,0"))
               (rule "polySimp_mulLiterals" (formula "13") (term "1,1,0,0"))
               (rule "javaShiftLeftIntDef" (formula "15") (term "0,0"))
               (rule "mod_axiom" (formula "15") (term "1,0,0,0"))
               (rule "polySimp_mulLiterals" (formula "15") (term "1,1,0,0,0"))
               (rule "javaShiftLeftIntDef" (formula "29") (term "1,1,1,0,0,0"))
               (rule "mod_axiom" (formula "29") (term "1,0,1,1,1,0,0,0"))
               (rule "polySimp_mulLiterals" (formula "29") (term "1,1,0,1,1,1,0,0,0"))
               (rule "javaShiftLeftIntDef" (formula "28") (term "1,1,1,1,0"))
               (rule "mod_axiom" (formula "28") (term "1,0,1,1,1,1,0"))
               (rule "polySimp_mulLiterals" (formula "28") (term "1,1,0,1,1,1,1,0"))
               (rule "javaShiftLeftIntDef" (formula "28") (term "1,1,1,0,0,0"))
               (rule "mod_axiom" (formula "28") (term "1,0,1,1,1,0,0,0"))
               (rule "polySimp_mulLiterals" (formula "28") (term "1,1,0,1,1,1,0,0,0"))
               (rule "shiftLeftDef" (formula "23") (term "0,1"))
               (rule "eqSymm" (formula "23"))
               (rule "polySimp_elimNeg" (formula "23") (term "1,1,0,0"))
               (rule "polySimp_mulComm0" (formula "23") (term "1,1,0,0"))
               (rule "polySimp_rightDist" (formula "23") (term "1,1,0,0"))
               (rule "polySimp_mulLiterals" (formula "23") (term "1,1,1,0,0"))
               (rule "polySimp_mulComm0" (formula "23") (term "0,1,1,0,0"))
               (rule "shiftLeftPositiveShiftDef" (formula "23") (term "2,0,0"))
               (rule "polySimp_elimOneLeft0" (formula "23") (term "2,0,0"))
               (rule "shiftRightPositiveShiftDef" (formula "23") (term "1,0,0"))
               (rule "inEqSimp_ltToLeq" (formula "23") (term "0,0,0"))
               (rule "times_zero_1" (formula "23") (term "1,0,0,0,0,0"))
               (rule "add_zero_right" (formula "23") (term "0,0,0,0,0"))
               (rule "polySimp_addAssoc" (formula "23") (term "0,0,0,0"))
               (rule "inEqSimp_sepNegMonomial0" (formula "23") (term "0,0,0"))
               (rule "polySimp_mulLiterals" (formula "23") (term "0,0,0,0"))
               (rule "shiftLeftDef" (formula "24") (term "0,0"))
               (rule "polySimp_elimNeg" (formula "24") (term "1,1,0,0"))
               (rule "polySimp_mulComm0" (formula "24") (term "1,1,0,0"))
               (rule "polySimp_rightDist" (formula "24") (term "1,1,0,0"))
               (rule "polySimp_mulLiterals" (formula "24") (term "1,1,1,0,0"))
               (rule "polySimp_mulComm0" (formula "24") (term "0,1,1,0,0"))
               (rule "shiftLeftPositiveShiftDef" (formula "24") (term "2,0,0"))
               (rule "polySimp_elimOneLeft0" (formula "24") (term "2,0,0"))
               (rule "shiftRightPositiveShiftDef" (formula "24") (term "1,0,0"))
               (rule "inEqSimp_ltToLeq" (formula "24") (term "0,0,0"))
               (rule "times_zero_1" (formula "24") (term "1,0,0,0,0,0"))
               (rule "add_zero_right" (formula "24") (term "0,0,0,0,0"))
               (rule "polySimp_addAssoc" (formula "24") (term "0,0,0,0"))
               (rule "inEqSimp_sepNegMonomial0" (formula "24") (term "0,0,0"))
               (rule "polySimp_mulLiterals" (formula "24") (term "0,0,0,0"))
               (rule "applyEq" (formula "24") (term "0") (ifseqformula "23"))
               (rule "shiftLeftDef" (formula "27") (term "0,1,3,0"))
               (rule "polySimp_elimNeg" (formula "27") (term "1,1,0,1,3,0"))
               (rule "polySimp_mulComm0" (formula "27") (term "1,1,0,1,3,0"))
               (rule "polySimp_rightDist" (formula "27") (term "1,1,0,1,3,0"))
               (rule "polySimp_mulLiterals" (formula "27") (term "1,1,1,0,1,3,0"))
               (rule "polySimp_mulComm0" (formula "27") (term "0,1,1,0,1,3,0"))
               (rule "shiftLeftPositiveShiftDef" (formula "27") (term "2,0,1,3,0"))
               (rule "polySimp_elimOneLeft0" (formula "27") (term "2,0,1,3,0"))
               (rule "shiftRightPositiveShiftDef" (formula "27") (term "1,0,1,3,0"))
               (rule "inEqSimp_ltToLeq" (formula "27") (term "0,0,1,3,0"))
               (rule "times_zero_1" (formula "27") (term "1,0,0,0,0,1,3,0"))
               (rule "add_zero_right" (formula "27") (term "0,0,0,0,1,3,0"))
               (rule "polySimp_addAssoc" (formula "27") (term "0,0,0,1,3,0"))
               (rule "inEqSimp_sepNegMonomial0" (formula "27") (term "0,0,1,3,0"))
               (rule "polySimp_mulLiterals" (formula "27") (term "0,0,0,1,3,0"))
               (rule "applyEq" (formula "27") (term "1,3,0") (ifseqformula "23"))
               (rule "shiftLeftDef" (formula "25") (term "0,1"))
               (rule "polySimp_elimNeg" (formula "25") (term "1,1,0,1"))
               (rule "polySimp_mulComm0" (formula "25") (term "1,1,0,1"))
               (rule "polySimp_rightDist" (formula "25") (term "1,1,0,1"))
               (rule "polySimp_mulLiterals" (formula "25") (term "1,1,1,0,1"))
               (rule "polySimp_mulComm0" (formula "25") (term "0,1,1,0,1"))
               (rule "shiftLeftPositiveShiftDef" (formula "25") (term "2,0,1"))
               (rule "polySimp_elimOneLeft0" (formula "25") (term "2,0,1"))
               (rule "shiftRightPositiveShiftDef" (formula "25") (term "1,0,1"))
               (rule "inEqSimp_ltToLeq" (formula "25") (term "0,0,1"))
               (rule "times_zero_1" (formula "25") (term "1,0,0,0,0,1"))
               (rule "add_zero_right" (formula "25") (term "0,0,0,0,1"))
               (rule "polySimp_addAssoc" (formula "25") (term "0,0,0,1"))
               (rule "inEqSimp_commuteGeq" (formula "25"))
               (rule "inEqSimp_sepNegMonomial0" (formula "25") (term "0,0,0"))
               (rule "polySimp_mulLiterals" (formula "25") (term "0,0,0,0"))
               (rule "applyEq" (formula "25") (term "0") (ifseqformula "23"))
               (rule "inEqSimp_commuteLeq" (formula "25"))
               (rule "shiftLeftDef" (formula "26") (term "0,1"))
               (rule "polySimp_elimNeg" (formula "26") (term "1,1,0,1"))
               (rule "polySimp_mulComm0" (formula "26") (term "1,1,0,1"))
               (rule "polySimp_rightDist" (formula "26") (term "1,1,0,1"))
               (rule "polySimp_mulLiterals" (formula "26") (term "1,1,1,0,1"))
               (rule "polySimp_mulComm0" (formula "26") (term "0,1,1,0,1"))
               (rule "shiftLeftPositiveShiftDef" (formula "26") (term "2,0,1"))
               (rule "polySimp_elimOneLeft0" (formula "26") (term "2,0,1"))
               (rule "shiftRightPositiveShiftDef" (formula "26") (term "1,0,1"))
               (rule "inEqSimp_ltToLeq" (formula "26") (term "0,0,1"))
               (rule "times_zero_1" (formula "26") (term "1,0,0,0,0,1"))
               (rule "add_zero_right" (formula "26") (term "0,0,0,0,1"))
               (rule "polySimp_addAssoc" (formula "26") (term "0,0,0,1"))
               (rule "inEqSimp_commuteGeq" (formula "26"))
               (rule "inEqSimp_sepNegMonomial0" (formula "26") (term "0,0,0"))
               (rule "polySimp_mulLiterals" (formula "26") (term "0,0,0,0"))
               (rule "applyEq" (formula "26") (term "0") (ifseqformula "23"))
               (rule "inEqSimp_commuteLeq" (formula "26"))
               (rule "shiftLeftDef" (formula "13") (term "0,0"))
               (rule "polySimp_elimNeg" (formula "13") (term "1,1,0,0"))
               (rule "polySimp_mulComm0" (formula "13") (term "1,1,0,0"))
               (rule "polySimp_rightDist" (formula "13") (term "1,1,0,0"))
               (rule "polySimp_mulLiterals" (formula "13") (term "1,1,1,0,0"))
               (rule "polySimp_mulComm0" (formula "13") (term "0,1,1,0,0"))
               (rule "shiftLeftPositiveShiftDef" (formula "13") (term "2,0,0"))
               (rule "polySimp_elimOneLeft0" (formula "13") (term "2,0,0"))
               (rule "shiftRightPositiveShiftDef" (formula "13") (term "1,0,0"))
               (rule "inEqSimp_ltToLeq" (formula "13") (term "0,0,0"))
               (rule "times_zero_1" (formula "13") (term "1,0,0,0,0,0"))
               (rule "add_zero_right" (formula "13") (term "0,0,0,0,0"))
               (rule "polySimp_addAssoc" (formula "13") (term "0,0,0,0"))
               (rule "inEqSimp_sepNegMonomial0" (formula "13") (term "0,0,0"))
               (rule "polySimp_mulLiterals" (formula "13") (term "0,0,0,0"))
               (rule "applyEq" (formula "13") (term "0") (ifseqformula "23"))
               (rule "shiftLeftDef" (formula "15") (term "0,0,0"))
               (rule "polySimp_elimNeg" (formula "15") (term "1,1,0,0,0"))
               (rule "polySimp_mulComm0" (formula "15") (term "1,1,0,0,0"))
               (rule "polySimp_rightDist" (formula "15") (term "1,1,0,0,0"))
               (rule "polySimp_mulLiterals" (formula "15") (term "1,1,1,0,0,0"))
               (rule "polySimp_mulComm0" (formula "15") (term "0,1,1,0,0,0"))
               (rule "shiftLeftPositiveShiftDef" (formula "15") (term "2,0,0,0"))
               (rule "polySimp_elimOneLeft0" (formula "15") (term "2,0,0,0"))
               (rule "shiftRightPositiveShiftDef" (formula "15") (term "1,0,0,0"))
               (rule "inEqSimp_ltToLeq" (formula "15") (term "0,0,0,0"))
               (rule "times_zero_1" (formula "15") (term "1,0,0,0,0,0,0"))
               (rule "add_zero_right" (formula "15") (term "0,0,0,0,0,0"))
               (rule "polySimp_addAssoc" (formula "15") (term "0,0,0,0,0"))
               (rule "inEqSimp_sepNegMonomial0" (formula "15") (term "0,0,0,0"))
               (rule "polySimp_mulLiterals" (formula "15") (term "0,0,0,0,0"))
               (rule "applyEq" (formula "15") (term "0,0") (ifseqformula "23"))
               (rule "shiftLeftDef" (formula "29") (term "0,1,1,1,0,0,0"))
               (rule "polySimp_elimNeg" (formula "29") (term "1,1,0,1,1,1,0,0,0"))
               (rule "polySimp_mulComm0" (formula "29") (term "1,1,0,1,1,1,0,0,0"))
               (rule "polySimp_rightDist" (formula "29") (term "1,1,0,1,1,1,0,0,0"))
               (rule "polySimp_mulLiterals" (formula "29") (term "1,1,1,0,1,1,1,0,0,0"))
               (rule "polySimp_mulComm0" (formula "29") (term "0,1,1,0,1,1,1,0,0,0"))
               (rule "shiftLeftPositiveShiftDef" (formula "29") (term "2,0,1,1,1,0,0,0"))
               (rule "polySimp_elimOneLeft0" (formula "29") (term "2,0,1,1,1,0,0,0"))
               (rule "shiftRightPositiveShiftDef" (formula "29") (term "1,0,1,1,1,0,0,0"))
               (rule "inEqSimp_ltToLeq" (formula "29") (term "0,0,1,1,1,0,0,0"))
               (rule "times_zero_1" (formula "29") (term "1,0,0,0,0,1,1,1,0,0,0"))
               (rule "add_zero_right" (formula "29") (term "0,0,0,0,1,1,1,0,0,0"))
               (rule "polySimp_addAssoc" (formula "29") (term "0,0,0,1,1,1,0,0,0"))
               (rule "inEqSimp_sepNegMonomial0" (formula "29") (term "0,0,1,1,1,0,0,0"))
               (rule "polySimp_mulLiterals" (formula "29") (term "0,0,0,1,1,1,0,0,0"))
               (rule "applyEq" (formula "29") (term "1,1,1,0,0,0") (ifseqformula "23"))
               (rule "shiftLeftDef" (formula "28") (term "0,1,1,1,1,0"))
               (rule "polySimp_elimNeg" (formula "28") (term "1,1,0,1,1,1,1,0"))
               (rule "polySimp_mulComm0" (formula "28") (term "1,1,0,1,1,1,1,0"))
               (rule "polySimp_rightDist" (formula "28") (term "1,1,0,1,1,1,1,0"))
               (rule "polySimp_mulLiterals" (formula "28") (term "1,1,1,0,1,1,1,1,0"))
               (rule "polySimp_mulComm0" (formula "28") (term "0,1,1,0,1,1,1,1,0"))
               (rule "shiftLeftPositiveShiftDef" (formula "28") (term "2,0,1,1,1,1,0"))
               (rule "polySimp_elimOneLeft0" (formula "28") (term "2,0,1,1,1,1,0"))
               (rule "shiftRightPositiveShiftDef" (formula "28") (term "1,0,1,1,1,1,0"))
               (rule "inEqSimp_ltToLeq" (formula "28") (term "0,0,1,1,1,1,0"))
               (rule "times_zero_1" (formula "28") (term "1,0,0,0,0,1,1,1,1,0"))
               (rule "add_zero_right" (formula "28") (term "0,0,0,0,1,1,1,1,0"))
               (rule "polySimp_addAssoc" (formula "28") (term "0,0,0,1,1,1,1,0"))
               (rule "inEqSimp_sepNegMonomial0" (formula "28") (term "0,0,1,1,1,1,0"))
               (rule "polySimp_mulLiterals" (formula "28") (term "0,0,0,1,1,1,1,0"))
               (rule "applyEq" (formula "28") (term "1,1,1,1,0") (ifseqformula "23"))
               (rule "shiftLeftDef" (formula "28") (term "0,1,1,1,0,0,0"))
               (rule "polySimp_elimNeg" (formula "28") (term "1,1,0,1,1,1,0,0,0"))
               (rule "polySimp_mulComm0" (formula "28") (term "1,1,0,1,1,1,0,0,0"))
               (rule "polySimp_rightDist" (formula "28") (term "1,1,0,1,1,1,0,0,0"))
               (rule "polySimp_mulLiterals" (formula "28") (term "1,1,1,0,1,1,1,0,0,0"))
               (rule "polySimp_mulComm0" (formula "28") (term "0,1,1,0,1,1,1,0,0,0"))
               (rule "shiftLeftPositiveShiftDef" (formula "28") (term "2,0,1,1,1,0,0,0"))
               (rule "polySimp_elimOneLeft0" (formula "28") (term "2,0,1,1,1,0,0,0"))
               (rule "shiftRightPositiveShiftDef" (formula "28") (term "1,0,1,1,1,0,0,0"))
               (rule "inEqSimp_ltToLeq" (formula "28") (term "0,0,1,1,1,0,0,0"))
               (rule "times_zero_1" (formula "28") (term "1,0,0,0,0,1,1,1,0,0,0"))
               (rule "add_zero_right" (formula "28") (term "0,0,0,0,1,1,1,0,0,0"))
               (rule "polySimp_addAssoc" (formula "28") (term "0,0,0,1,1,1,0,0,0"))
               (rule "inEqSimp_sepNegMonomial0" (formula "28") (term "0,0,1,1,1,0,0,0"))
               (rule "polySimp_mulLiterals" (formula "28") (term "0,0,0,1,1,1,0,0,0"))
               (rule "applyEq" (formula "28") (term "1,1,1,0,0,0") (ifseqformula "23"))
               (rule "inEqSimp_exactShadow3" (formula "17") (ifseqformula "22"))
               (rule "polySimp_rightDist" (formula "17") (term "0,0"))
               (rule "mul_literals" (formula "17") (term "0,0,0"))
               (rule "polySimp_addComm1" (formula "17") (term "0"))
               (rule "add_literals" (formula "17") (term "0,0"))
               (rule "inEqSimp_sepNegMonomial1" (formula "17"))
               (rule "polySimp_mulLiterals" (formula "17") (term "0"))
               (rule "polySimp_elimOne" (formula "17") (term "0"))
               (rule "inEqSimp_subsumption0" (formula "10") (ifseqformula "17"))
               (rule "leq_literals" (formula "10") (term "0"))
                (builtin "One Step Simplification" (formula "10"))
               (rule "true_left" (formula "10"))
               (rule "expand_moduloInteger" (formula "23") (term "0"))
               (rule "replace_int_RANGE" (formula "23") (term "1,1,0"))
               (rule "replace_int_HALFRANGE" (formula "23") (term "0,0,1,0"))
               (rule "replace_int_MIN" (formula "23") (term "0,0"))
               (rule "polySimp_homoEq" (formula "23"))
               (rule "polySimp_mulComm0" (formula "23") (term "1,0"))
               (rule "polySimp_rightDist" (formula "23") (term "1,0"))
               (rule "mul_literals" (formula "23") (term "0,1,0"))
               (rule "polySimp_addAssoc" (formula "23") (term "0"))
               (rule "polySimp_addComm0" (formula "23") (term "0,0"))
               (rule "polySimp_sepNegMonomial" (formula "23"))
               (rule "polySimp_mulLiterals" (formula "23") (term "0"))
               (rule "polySimp_elimOne" (formula "23") (term "0"))
               (rule "nnf_imp2or" (formula "29") (term "0"))
               (rule "nnf_imp2or" (formula "28") (term "0"))
               (rule "nnf_notAnd" (formula "29") (term "0,0"))
               (rule "nnf_notAnd" (formula "28") (term "0,0"))
               (rule "nnf_notAnd" (formula "29") (term "0,0,0"))
               (rule "inEqSimp_notGeq" (formula "29") (term "0,0,0,0"))
               (rule "mul_literals" (formula "29") (term "1,0,0,0,0,0,0"))
               (rule "add_literals" (formula "29") (term "0,0,0,0,0,0"))
               (rule "add_zero_left" (formula "29") (term "0,0,0,0,0"))
               (rule "inEqSimp_notLeq" (formula "29") (term "1,0,0,0"))
               (rule "polySimp_rightDist" (formula "29") (term "1,0,0,1,0,0,0"))
               (rule "mul_literals" (formula "29") (term "0,1,0,0,1,0,0,0"))
               (rule "polySimp_addAssoc" (formula "29") (term "0,0,1,0,0,0"))
               (rule "add_literals" (formula "29") (term "0,0,0,1,0,0,0"))
               (rule "add_zero_left" (formula "29") (term "0,0,1,0,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "29") (term "1,0,0,0"))
               (rule "polySimp_mulLiterals" (formula "29") (term "1,1,0,0,0"))
               (rule "polySimp_elimOne" (formula "29") (term "1,1,0,0,0"))
               (rule "nnf_notAnd" (formula "29") (term "1,0,0"))
               (rule "inEqSimp_notLeq" (formula "29") (term "0,1,0,0"))
               (rule "mul_literals" (formula "29") (term "1,0,0,0,1,0,0"))
               (rule "add_literals" (formula "29") (term "0,0,0,1,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "29") (term "0,1,0,0"))
               (rule "mul_literals" (formula "29") (term "1,0,1,0,0"))
               (rule "inEqSimp_notGeq" (formula "29") (term "1,1,0,0"))
               (rule "mul_literals" (formula "29") (term "1,0,0,1,1,0,0"))
               (rule "add_literals" (formula "29") (term "0,0,1,1,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "29") (term "1,1,0,0"))
               (rule "mul_literals" (formula "29") (term "1,1,1,0,0"))
               (rule "nnf_notAnd" (formula "28") (term "0,0,0"))
               (rule "inEqSimp_notGeq" (formula "28") (term "0,0,0,0"))
               (rule "mul_literals" (formula "28") (term "1,0,0,0,0,0,0"))
               (rule "add_literals" (formula "28") (term "0,0,0,0,0,0"))
               (rule "add_zero_left" (formula "28") (term "0,0,0,0,0"))
               (rule "inEqSimp_notLeq" (formula "28") (term "1,0,0,0"))
               (rule "polySimp_rightDist" (formula "28") (term "1,0,0,1,0,0,0"))
               (rule "mul_literals" (formula "28") (term "0,1,0,0,1,0,0,0"))
               (rule "polySimp_addAssoc" (formula "28") (term "0,0,1,0,0,0"))
               (rule "add_literals" (formula "28") (term "0,0,0,1,0,0,0"))
               (rule "add_zero_left" (formula "28") (term "0,0,1,0,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "28") (term "1,0,0,0"))
               (rule "polySimp_mulLiterals" (formula "28") (term "1,1,0,0,0"))
               (rule "polySimp_elimOne" (formula "28") (term "1,1,0,0,0"))
               (rule "nnf_notAnd" (formula "28") (term "1,0,0"))
               (rule "inEqSimp_notGeq" (formula "28") (term "1,1,0,0"))
               (rule "mul_literals" (formula "28") (term "1,0,0,1,1,0,0"))
               (rule "add_literals" (formula "28") (term "0,0,1,1,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "28") (term "1,1,0,0"))
               (rule "mul_literals" (formula "28") (term "1,1,1,0,0"))
               (rule "inEqSimp_notLeq" (formula "28") (term "0,1,0,0"))
               (rule "mul_literals" (formula "28") (term "1,0,0,0,1,0,0"))
               (rule "add_literals" (formula "28") (term "0,0,0,1,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "28") (term "0,1,0,0"))
               (rule "mul_literals" (formula "28") (term "1,0,1,0,0"))
               (rule "Definition_axiom_for_isSortedSliceTransitive_in_de_wiesler_Functions" (formula "27") (term "0") (inst "i=i") (inst "j=j"))
                (builtin "One Step Simplification" (formula "27"))
               (rule "expand_inInt" (formula "27") (term "1,0,0,1,0"))
               (rule "expand_inInt" (formula "27") (term "1,0,0"))
               (rule "replace_int_MAX" (formula "27") (term "1,0,1,0,0,1,0"))
               (rule "replace_int_MIN" (formula "27") (term "0,1,1,0,0,1,0"))
               (rule "replace_int_MAX" (formula "27") (term "1,0,1,0,0"))
               (rule "replace_int_MIN" (formula "27") (term "0,1,1,0,0"))
               (rule "inEqSimp_ltToLeq" (formula "27") (term "1,0,0,0"))
               (rule "polySimp_rightDist" (formula "27") (term "1,0,0,1,0,0,0"))
               (rule "mul_literals" (formula "27") (term "0,1,0,0,1,0,0,0"))
               (rule "polySimp_addAssoc" (formula "27") (term "0,0,1,0,0,0"))
               (rule "add_literals" (formula "27") (term "0,0,0,1,0,0,0"))
               (rule "inEqSimp_ltToLeq" (formula "27") (term "1,0,0,0,1,0"))
               (rule "polySimp_rightDist" (formula "27") (term "1,0,0,1,0,0,0,1,0"))
               (rule "mul_literals" (formula "27") (term "0,1,0,0,1,0,0,0,1,0"))
               (rule "polySimp_addAssoc" (formula "27") (term "0,0,1,0,0,0,1,0"))
               (rule "add_literals" (formula "27") (term "0,0,0,1,0,0,0,1,0"))
               (rule "inEqSimp_commuteLeq" (formula "27") (term "0,0,0,0,1,0"))
               (rule "inEqSimp_commuteLeq" (formula "27") (term "0,0,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "27") (term "1,0,1,0"))
               (rule "inEqSimp_commuteLeq" (formula "27") (term "1,1,0,0,1,0"))
               (rule "inEqSimp_commuteLeq" (formula "27") (term "1,1,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "27") (term "1,0,0,0"))
               (rule "polySimp_mulComm0" (formula "27") (term "1,1,0,0,0"))
               (rule "polySimp_rightDist" (formula "27") (term "1,1,0,0,0"))
               (rule "mul_literals" (formula "27") (term "0,1,1,0,0,0"))
               (rule "polySimp_mulLiterals" (formula "27") (term "1,1,1,0,0,0"))
               (rule "polySimp_elimOne" (formula "27") (term "1,1,1,0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "27") (term "1,0,0,0,1,0"))
               (rule "polySimp_mulComm0" (formula "27") (term "1,1,0,0,0,1,0"))
               (rule "polySimp_rightDist" (formula "27") (term "1,1,0,0,0,1,0"))
               (rule "polySimp_mulLiterals" (formula "27") (term "1,1,1,0,0,0,1,0"))
               (rule "mul_literals" (formula "27") (term "0,1,1,0,0,0,1,0"))
               (rule "polySimp_elimOne" (formula "27") (term "1,1,1,0,0,0,1,0"))
               (rule "nnf_imp2or" (formula "27") (term "0"))
               (rule "nnf_notAnd" (formula "27") (term "0,0"))
               (rule "nnf_imp2or" (formula "27") (term "0,1,0"))
               (rule "nnf_notAnd" (formula "27") (term "0,0,0"))
               (rule "inEqSimp_notLeq" (formula "27") (term "1,0,0,0"))
               (rule "polySimp_rightDist" (formula "27") (term "1,0,0,1,0,0,0"))
               (rule "mul_literals" (formula "27") (term "0,1,0,0,1,0,0,0"))
               (rule "polySimp_addAssoc" (formula "27") (term "0,0,1,0,0,0"))
               (rule "add_literals" (formula "27") (term "0,0,0,1,0,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "27") (term "1,0,0,0"))
               (rule "polySimp_mulComm0" (formula "27") (term "1,1,0,0,0"))
               (rule "polySimp_rightDist" (formula "27") (term "1,1,0,0,0"))
               (rule "polySimp_mulLiterals" (formula "27") (term "1,1,1,0,0,0"))
               (rule "mul_literals" (formula "27") (term "0,1,1,0,0,0"))
               (rule "polySimp_elimOne" (formula "27") (term "1,1,1,0,0,0"))
               (rule "inEqSimp_notGeq" (formula "27") (term "0,0,0,0"))
               (rule "times_zero_1" (formula "27") (term "1,0,0,0,0,0,0"))
               (rule "add_zero_right" (formula "27") (term "0,0,0,0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "27") (term "0,0,0,0"))
               (rule "mul_literals" (formula "27") (term "1,0,0,0,0"))
               (rule "nnf_notAnd" (formula "27") (term "1,0,0"))
               (rule "inEqSimp_notLeq" (formula "27") (term "0,1,0,0"))
               (rule "mul_literals" (formula "27") (term "1,0,0,0,1,0,0"))
               (rule "add_literals" (formula "27") (term "0,0,0,1,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "27") (term "0,1,0,0"))
               (rule "mul_literals" (formula "27") (term "1,0,1,0,0"))
               (rule "inEqSimp_notGeq" (formula "27") (term "1,1,0,0"))
               (rule "mul_literals" (formula "27") (term "1,0,0,1,1,0,0"))
               (rule "add_literals" (formula "27") (term "0,0,1,1,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "27") (term "1,1,0,0"))
               (rule "mul_literals" (formula "27") (term "1,1,1,0,0"))
               (rule "nnf_notAnd" (formula "27") (term "0,0,1,0"))
               (rule "jdiv_axiom" (formula "1") (term "0"))
               (rule "eqSymm" (formula "1"))
               (rule "inEqSimp_subsumption1" (formula "1") (term "0,0") (ifseqformula "20"))
               (rule "leq_literals" (formula "1") (term "0,0,0"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "eqSymm" (formula "1"))
               (rule "applyEq" (formula "3") (term "0,1,0,2,0") (ifseqformula "1"))
               (rule "applyEq" (formula "2") (term "0") (ifseqformula "1"))
               (rule "nnf_notAnd" (formula "28") (term "1,0,0,1,0"))
               (rule "inEqSimp_notLeq" (formula "28") (term "0,1,0,0,1,0"))
               (rule "mul_literals" (formula "28") (term "1,0,0,0,1,0,0,1,0"))
               (rule "add_literals" (formula "28") (term "0,0,0,1,0,0,1,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "28") (term "0,1,0,0,1,0"))
               (rule "mul_literals" (formula "28") (term "1,0,1,0,0,1,0"))
               (rule "inEqSimp_notGeq" (formula "28") (term "1,1,0,0,1,0"))
               (rule "mul_literals" (formula "28") (term "1,0,0,1,1,0,0,1,0"))
               (rule "add_literals" (formula "28") (term "0,0,1,1,0,0,1,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "28") (term "1,1,0,0,1,0"))
               (rule "mul_literals" (formula "28") (term "1,1,1,0,0,1,0"))
               (rule "nnf_notAnd" (formula "28") (term "0,0,0,1,0"))
               (rule "inEqSimp_notLeq" (formula "28") (term "1,0,0,0,1,0"))
               (rule "polySimp_rightDist" (formula "28") (term "1,0,0,1,0,0,0,1,0"))
               (rule "mul_literals" (formula "28") (term "0,1,0,0,1,0,0,0,1,0"))
               (rule "polySimp_addAssoc" (formula "28") (term "0,0,1,0,0,0,1,0"))
               (rule "add_literals" (formula "28") (term "0,0,0,1,0,0,0,1,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "28") (term "1,0,0,0,1,0"))
               (rule "polySimp_mulComm0" (formula "28") (term "1,1,0,0,0,1,0"))
               (rule "polySimp_rightDist" (formula "28") (term "1,1,0,0,0,1,0"))
               (rule "polySimp_mulLiterals" (formula "28") (term "1,1,1,0,0,0,1,0"))
               (rule "mul_literals" (formula "28") (term "0,1,1,0,0,0,1,0"))
               (rule "polySimp_elimOne" (formula "28") (term "1,1,1,0,0,0,1,0"))
               (rule "inEqSimp_notGeq" (formula "28") (term "0,0,0,0,1,0"))
               (rule "polySimp_mulComm0" (formula "28") (term "1,0,0,0,0,0,0,1,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "28") (term "0,0,0,0,1,0"))
               (rule "polySimp_mulComm0" (formula "28") (term "1,0,0,0,0,1,0"))
               (rule "polySimp_rightDist" (formula "28") (term "1,0,0,0,0,1,0"))
               (rule "mul_literals" (formula "28") (term "0,1,0,0,0,0,1,0"))
               (rule "polySimp_mulLiterals" (formula "28") (term "1,1,0,0,0,0,1,0"))
               (rule "polySimp_elimOne" (formula "28") (term "1,1,0,0,0,0,1,0"))
               (rule "cut_direct" (formula "15") (term "1"))
               (branch "CUT: self.sorted_splitters[b] >= value TRUE"
                   (builtin "One Step Simplification" (formula "16"))
                  (rule "true_left" (formula "16"))
                  (rule "Definition_axiom_for_pi_in_de_wiesler_Tree" (formula "30") (term "1,0,2,0,1,0"))
                  (rule "translateJavaSubInt" (formula "30") (term "0,1,1,1,0,2,0,1,0"))
                  (rule "polySimp_elimSub" (formula "30") (term "1,0,0,1,0,2,0,1,0"))
                  (rule "polySimp_elimSub" (formula "30") (term "1,1,1,0,2,0,1,0"))
                  (rule "polySimp_elimSub" (formula "30") (term "0,1,1,1,0,2,0,1,0"))
                  (rule "mul_literals" (formula "30") (term "1,0,1,1,1,0,2,0,1,0"))
                  (rule "polySimp_mulComm0" (formula "30") (term "1,0,2,0,1,0"))
                  (rule "polySimp_addComm0" (formula "30") (term "0,1,0,1,0,2,0,1,0"))
                  (rule "polySimp_rightDist" (formula "30") (term "0,1,1,0,2,0,1,0"))
                  (rule "polySimp_mulLiterals" (formula "30") (term "1,0,1,1,0,2,0,1,0"))
                  (rule "polySimp_mulComm0" (formula "30") (term "0,0,1,1,0,2,0,1,0"))
                  (rule "polySimp_addComm1" (formula "30") (term "1,1,0,2,0,1,0"))
                  (rule "polySimp_addComm0" (formula "30") (term "0,1,1,0,2,0,1,0"))
                  (rule "polySimp_rightDist" (formula "30") (term "1,0,2,0,1,0"))
                  (rule "polySimp_mulComm1" (formula "30") (term "1,1,0,2,0,1,0"))
                  (rule "polySimp_mulComm0" (formula "30") (term "0,1,1,0,2,0,1,0"))
                  (rule "polySimp_rightDist" (formula "30") (term "0,1,0,2,0,1,0"))
                  (rule "polySimp_elimOne" (formula "30") (term "0,0,1,0,2,0,1,0"))
                  (rule "polySimp_mulComm1" (formula "30") (term "1,0,1,0,2,0,1,0"))
                  (rule "polySimp_mulComm0" (formula "30") (term "0,1,0,1,0,2,0,1,0"))
                  (rule "polySimp_addAssoc" (formula "30") (term "0,2,0,1,0"))
                  (rule "polySimp_addAssoc" (formula "30") (term "0,0,2,0,1,0"))
                  (rule "Definition_axiom_for_pi_in_de_wiesler_Tree" (formula "29") (term "0,1,1,0"))
                  (rule "translateJavaSubInt" (formula "29") (term "0,1,1,0,1,1,0"))
                  (rule "polySimp_elimSub" (formula "29") (term "1,0,0,0,1,1,0"))
                  (rule "polySimp_elimSub" (formula "29") (term "1,1,0,1,1,0"))
                  (rule "polySimp_elimSub" (formula "29") (term "0,1,1,0,1,1,0"))
                  (rule "mul_literals" (formula "29") (term "1,0,1,1,0,1,1,0"))
                  (rule "polySimp_mulComm0" (formula "29") (term "0,1,1,0"))
                  (rule "polySimp_addComm0" (formula "29") (term "0,1,0,0,1,1,0"))
                  (rule "polySimp_rightDist" (formula "29") (term "0,1,0,1,1,0"))
                  (rule "polySimp_mulLiterals" (formula "29") (term "1,0,1,0,1,1,0"))
                  (rule "polySimp_mulComm0" (formula "29") (term "0,0,1,0,1,1,0"))
                  (rule "polySimp_addComm1" (formula "29") (term "1,0,1,1,0"))
                  (rule "polySimp_addComm0" (formula "29") (term "0,1,0,1,1,0"))
                  (rule "polySimp_rightDist" (formula "29") (term "0,1,1,0"))
                  (rule "polySimp_mulComm1" (formula "29") (term "1,0,1,1,0"))
                  (rule "polySimp_mulComm0" (formula "29") (term "0,1,0,1,1,0"))
                  (rule "polySimp_rightDist" (formula "29") (term "0,0,1,1,0"))
                  (rule "polySimp_elimOne" (formula "29") (term "0,0,0,1,1,0"))
                  (rule "polySimp_mulComm1" (formula "29") (term "1,0,0,1,1,0"))
                  (rule "polySimp_mulComm0" (formula "29") (term "0,1,0,0,1,1,0"))
                  (rule "inEqSimp_homoInEq0" (formula "29") (term "1,1,0"))
                  (rule "polySimp_mulComm0" (formula "29") (term "1,0,1,1,0"))
                  (rule "polySimp_rightDist" (formula "29") (term "1,0,1,1,0"))
                  (rule "polySimp_mulLiterals" (formula "29") (term "1,1,0,1,1,0"))
                  (rule "polySimp_rightDist" (formula "29") (term "0,1,0,1,1,0"))
                  (rule "polySimp_mulLiterals" (formula "29") (term "1,0,1,0,1,1,0"))
                  (rule "polySimp_mulComm0" (formula "29") (term "0,0,1,0,1,1,0"))
                  (rule "polySimp_addAssoc" (formula "29") (term "0,1,1,0"))
                  (rule "polySimp_addAssoc" (formula "29") (term "0,0,1,1,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "29") (term "1,1,0"))
                  (rule "polySimp_mulComm0" (formula "29") (term "1,1,1,0"))
                  (rule "polySimp_rightDist" (formula "29") (term "1,1,1,0"))
                  (rule "polySimp_mulLiterals" (formula "29") (term "1,1,1,1,0"))
                  (rule "polySimp_rightDist" (formula "29") (term "0,1,1,1,0"))
                  (rule "polySimp_mulLiterals" (formula "29") (term "1,0,1,1,1,0"))
                  (rule "polySimp_elimOne" (formula "29") (term "1,0,1,1,1,0"))
                  (rule "polySimp_rightDist" (formula "29") (term "0,0,1,1,1,0"))
                  (rule "mul_literals" (formula "29") (term "0,0,0,1,1,1,0"))
                  (rule "Definition_axiom_for_pi_in_de_wiesler_Tree" (formula "29") (term "0,0,1,0"))
                  (rule "translateJavaSubInt" (formula "29") (term "0,1,1,0,0,1,0"))
                  (rule "polySimp_elimSub" (formula "29") (term "1,0,0,0,0,1,0"))
                  (rule "polySimp_elimSub" (formula "29") (term "1,1,0,0,1,0"))
                  (rule "polySimp_elimSub" (formula "29") (term "0,1,1,0,0,1,0"))
                  (rule "mul_literals" (formula "29") (term "1,0,1,1,0,0,1,0"))
                  (rule "polySimp_mulComm0" (formula "29") (term "0,0,1,0"))
                  (rule "polySimp_addComm0" (formula "29") (term "0,1,0,0,0,1,0"))
                  (rule "polySimp_rightDist" (formula "29") (term "0,1,0,0,1,0"))
                  (rule "polySimp_mulLiterals" (formula "29") (term "1,0,1,0,0,1,0"))
                  (rule "polySimp_mulComm0" (formula "29") (term "0,0,1,0,0,1,0"))
                  (rule "polySimp_addComm1" (formula "29") (term "1,0,0,1,0"))
                  (rule "polySimp_addComm0" (formula "29") (term "0,1,0,0,1,0"))
                  (rule "polySimp_rightDist" (formula "29") (term "0,0,1,0"))
                  (rule "polySimp_mulComm1" (formula "29") (term "1,0,0,1,0"))
                  (rule "polySimp_mulComm0" (formula "29") (term "0,1,0,0,1,0"))
                  (rule "polySimp_rightDist" (formula "29") (term "0,0,0,1,0"))
                  (rule "polySimp_elimOne" (formula "29") (term "0,0,0,0,1,0"))
                  (rule "polySimp_mulComm1" (formula "29") (term "1,0,0,0,1,0"))
                  (rule "polySimp_mulComm0" (formula "29") (term "0,1,0,0,0,1,0"))
                  (rule "inEqSimp_homoInEq1" (formula "29") (term "0,1,0"))
                  (rule "polySimp_mulComm0" (formula "29") (term "1,0,0,1,0"))
                  (rule "polySimp_rightDist" (formula "29") (term "1,0,0,1,0"))
                  (rule "polySimp_mulLiterals" (formula "29") (term "1,1,0,0,1,0"))
                  (rule "polySimp_rightDist" (formula "29") (term "0,1,0,0,1,0"))
                  (rule "polySimp_mulLiterals" (formula "29") (term "1,0,1,0,0,1,0"))
                  (rule "polySimp_mulComm0" (formula "29") (term "0,0,1,0,0,1,0"))
                  (rule "polySimp_addAssoc" (formula "29") (term "0,0,1,0"))
                  (rule "polySimp_addAssoc" (formula "29") (term "0,0,0,1,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "29") (term "0,1,0"))
                  (rule "polySimp_mulComm0" (formula "29") (term "1,0,1,0"))
                  (rule "polySimp_rightDist" (formula "29") (term "1,0,1,0"))
                  (rule "polySimp_mulLiterals" (formula "29") (term "1,1,0,1,0"))
                  (rule "polySimp_rightDist" (formula "29") (term "0,1,0,1,0"))
                  (rule "mul_literals" (formula "29") (term "0,0,1,0,1,0"))
                  (rule "polySimp_mulLiterals" (formula "29") (term "1,0,1,0,1,0"))
                  (rule "polySimp_elimOne" (formula "29") (term "1,0,1,0,1,0"))
                  (rule "cut_direct" (formula "14") (term "1"))
                  (branch "CUT: self.sorted_splitters[b + d * -1] <= -1 + value TRUE"
                      (builtin "One Step Simplification" (formula "15"))
                     (rule "true_left" (formula "15"))
                     (rule "commute_or_2" (formula "30") (term "0,0"))
                     (rule "commute_or_2" (formula "29") (term "0,0"))
                     (rule "commute_or_2" (formula "28") (term "0,0"))
                     (rule "arrayLengthNotNegative" (formula "26") (term "0"))
                     (rule "arrayLengthIsAnInt" (formula "27") (term "0"))
                     (rule "expand_inInt" (formula "27"))
                     (rule "replace_int_MIN" (formula "27") (term "0,1"))
                     (rule "replace_int_MAX" (formula "27") (term "1,0"))
                     (rule "andLeft" (formula "27"))
                     (rule "inEqSimp_commuteLeq" (formula "28"))
                     (rule "inEqSimp_subsumption1" (formula "28") (ifseqformula "26"))
                     (rule "leq_literals" (formula "28") (term "0"))
                      (builtin "One Step Simplification" (formula "28"))
                     (rule "true_left" (formula "28"))
                     (rule "inEqSimp_exactShadow3" (formula "28") (ifseqformula "27"))
                     (rule "polySimp_mulComm0" (formula "28") (term "0,0"))
                     (rule "polySimp_addComm0" (formula "28") (term "0"))
                     (rule "inEqSimp_sepNegMonomial1" (formula "28"))
                     (rule "polySimp_mulLiterals" (formula "28") (term "0"))
                     (rule "polySimp_elimOne" (formula "28") (term "0"))
                     (rule "inEqSimp_exactShadow3" (formula "13") (ifseqformula "28"))
                     (rule "polySimp_rightDist" (formula "13") (term "0,0"))
                     (rule "mul_literals" (formula "13") (term "0,0,0"))
                     (rule "polySimp_addComm1" (formula "13") (term "0"))
                     (rule "add_literals" (formula "13") (term "0,0"))
                     (rule "inEqSimp_sepNegMonomial1" (formula "13"))
                     (rule "polySimp_mulLiterals" (formula "13") (term "0"))
                     (rule "polySimp_elimOne" (formula "13") (term "0"))
                     (rule "inEqSimp_subsumption0" (formula "7") (ifseqformula "13"))
                     (rule "leq_literals" (formula "7") (term "0"))
                      (builtin "One Step Simplification" (formula "7"))
                     (rule "true_left" (formula "7"))
                     (rule "commute_or_2" (formula "31") (term "0,0,1,0"))
                     (rule "arrayLengthIsAnInt" (formula "30") (term "0"))
                     (rule "expand_inInt" (formula "30"))
                     (rule "replace_int_MIN" (formula "30") (term "0,1"))
                     (rule "replace_int_MAX" (formula "30") (term "1,0"))
                     (rule "andLeft" (formula "30"))
                     (rule "inEqSimp_commuteLeq" (formula "31"))
                     (rule "inEqSimp_exactShadow3" (formula "32") (ifseqformula "30"))
                     (rule "polySimp_mulComm0" (formula "32") (term "0,0"))
                     (rule "polySimp_addComm0" (formula "32") (term "0"))
                     (rule "inEqSimp_sepNegMonomial1" (formula "32"))
                     (rule "polySimp_mulLiterals" (formula "32") (term "0"))
                     (rule "polySimp_elimOne" (formula "32") (term "0"))
                     (rule "arrayLengthNotNegative" (formula "32") (term "0"))
                     (rule "inEqSimp_subsumption1" (formula "31") (ifseqformula "32"))
                     (rule "leq_literals" (formula "31") (term "0"))
                      (builtin "One Step Simplification" (formula "31"))
                     (rule "true_left" (formula "31"))
                     (rule "div_axiom" (formula "24") (term "0,1,1,1,1,1,0,0") (inst "quotient=quotient_0"))
                     (rule "equal_literals" (formula "24") (term "0"))
                      (builtin "One Step Simplification" (formula "24"))
                     (rule "qeq_literals" (formula "24") (term "0,1"))
                      (builtin "One Step Simplification" (formula "24"))
                     (rule "mul_literals" (formula "24") (term "1,1,1"))
                     (rule "andLeft" (formula "24"))
                     (rule "andLeft" (formula "24"))
                     (rule "polySimp_addComm1" (formula "26") (term "1"))
                     (rule "add_literals" (formula "26") (term "0,1"))
                     (rule "inEqSimp_commuteLeq" (formula "25"))
                     (rule "inEqSimp_homoInEq1" (formula "26"))
                     (rule "polySimp_mulLiterals" (formula "26") (term "1,0"))
                     (rule "polySimp_addComm1" (formula "26") (term "0"))
                     (rule "applyEq" (formula "27") (term "0,1,1,2,1,0,0") (ifseqformula "24"))
                     (rule "polySimp_addComm0" (formula "27") (term "1,2,1,0,0"))
                     (rule "applyEq" (formula "27") (term "0,0,0,1,0,0") (ifseqformula "24"))
                     (rule "inEqSimp_homoInEq1" (formula "27") (term "0,1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "27") (term "1,0,0,1,0,0"))
                     (rule "polySimp_addComm1" (formula "27") (term "0,0,1,0,0"))
                     (rule "applyEq" (formula "27") (term "0,1,1,1,1,1,0,0") (ifseqformula "24"))
                     (rule "polySimp_addComm0" (formula "27") (term "1,1,1,1,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "26"))
                     (rule "polySimp_mulComm0" (formula "26") (term "1"))
                     (rule "polySimp_rightDist" (formula "26") (term "1"))
                     (rule "polySimp_mulLiterals" (formula "26") (term "1,1"))
                     (rule "mul_literals" (formula "26") (term "0,1"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "27") (term "0,1,0,0"))
                     (rule "polySimp_mulComm0" (formula "27") (term "1,0,1,0,0"))
                     (rule "polySimp_rightDist" (formula "27") (term "1,0,1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "27") (term "1,1,0,1,0,0"))
                     (rule "mul_literals" (formula "27") (term "0,1,0,1,0,0"))
                     (rule "inEqSimp_contradInEq1" (formula "27") (term "0,1,0,0") (ifseqformula "25"))
                     (rule "inEqSimp_homoInEq1" (formula "27") (term "0,0,1,0,0"))
                     (rule "polySimp_mulComm0" (formula "27") (term "1,0,0,0,1,0,0"))
                     (rule "polySimp_rightDist" (formula "27") (term "1,0,0,0,1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "27") (term "1,1,0,0,0,1,0,0"))
                     (rule "mul_literals" (formula "27") (term "0,1,0,0,0,1,0,0"))
                     (rule "polySimp_addAssoc" (formula "27") (term "0,0,0,1,0,0"))
                     (rule "polySimp_addComm0" (formula "27") (term "0,0,0,0,1,0,0"))
                     (rule "polySimp_pullOutFactor0b" (formula "27") (term "0,0,0,1,0,0"))
                     (rule "add_literals" (formula "27") (term "1,1,0,0,0,1,0,0"))
                     (rule "times_zero_1" (formula "27") (term "1,0,0,0,1,0,0"))
                     (rule "add_zero_right" (formula "27") (term "0,0,0,1,0,0"))
                     (rule "leq_literals" (formula "27") (term "0,0,1,0,0"))
                      (builtin "One Step Simplification" (formula "27"))
                     (rule "polySimp_homoEq" (formula "27"))
                     (rule "polySimp_addComm1" (formula "27") (term "0"))
                     (rule "mod_axiom" (formula "27") (term "0,1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "27") (term "1,0,1,0,0"))
                     (rule "polySimp_mulComm0" (formula "27") (term "1,0,0"))
                     (rule "polySimp_rightDist" (formula "27") (term "1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "27") (term "1,1,0,0"))
                     (rule "polySimp_rightDist" (formula "27") (term "0,1,0,0"))
                     (rule "mul_literals" (formula "27") (term "0,0,1,0,0"))
                     (rule "polySimp_addAssoc" (formula "27") (term "0,0"))
                     (rule "polySimp_addAssoc" (formula "27") (term "0,0,0"))
                     (rule "add_literals" (formula "27") (term "0,0,0,0"))
                     (rule "add_zero_left" (formula "27") (term "0,0,0"))
                     (rule "polySimp_sepPosMonomial" (formula "27"))
                     (rule "polySimp_mulComm0" (formula "27") (term "1"))
                     (rule "polySimp_rightDist" (formula "27") (term "1"))
                     (rule "polySimp_mulLiterals" (formula "27") (term "1,1"))
                     (rule "polySimp_mulAssoc" (formula "27") (term "0,1"))
                     (rule "polySimp_mulComm0" (formula "27") (term "0,0,1"))
                     (rule "polySimp_mulLiterals" (formula "27") (term "0,1"))
                     (rule "polySimp_elimOne" (formula "27") (term "0,1"))
                     (rule "applyEq" (formula "32") (term "1") (ifseqformula "27"))
                     (rule "applyEq" (formula "36") (term "1,1,1,0,0,1,0") (ifseqformula "27"))
                     (rule "polySimp_addAssoc" (formula "36") (term "1,1,0,0,1,0"))
                     (rule "applyEq" (formula "13") (term "0") (ifseqformula "27"))
                     (rule "inEqSimp_homoInEq1" (formula "13"))
                     (rule "polySimp_mulComm0" (formula "13") (term "1,0"))
                     (rule "polySimp_rightDist" (formula "13") (term "1,0"))
                     (rule "polySimp_mulLiterals" (formula "13") (term "1,1,0"))
                     (rule "polySimp_mulComm0" (formula "13") (term "0,1,0"))
                     (rule "polySimp_addAssoc" (formula "13") (term "0"))
                     (rule "applyEq" (formula "36") (term "1,1,1,0,0") (ifseqformula "27"))
                     (rule "polySimp_addAssoc" (formula "36") (term "1,1,0,0"))
                     (rule "applyEq" (formula "37") (term "1,1,0,0") (ifseqformula "27"))
                     (rule "applyEq" (formula "35") (term "1") (ifseqformula "27"))
                     (rule "applyEq" (formula "38") (term "1,1,0,0") (ifseqformula "27"))
                     (rule "applyEq" (formula "28") (term "0") (ifseqformula "27"))
                     (rule "inEqSimp_homoInEq1" (formula "28"))
                     (rule "polySimp_mulComm0" (formula "28") (term "1,0"))
                     (rule "polySimp_rightDist" (formula "28") (term "1,0"))
                     (rule "polySimp_mulLiterals" (formula "28") (term "1,1,0"))
                     (rule "polySimp_mulComm0" (formula "28") (term "0,1,0"))
                     (rule "polySimp_addAssoc" (formula "28") (term "0"))
                     (rule "applyEq" (formula "31") (term "0") (ifseqformula "27"))
                     (rule "inEqSimp_homoInEq0" (formula "31"))
                     (rule "polySimp_mulComm0" (formula "31") (term "1,0"))
                     (rule "polySimp_rightDist" (formula "31") (term "1,0"))
                     (rule "polySimp_mulLiterals" (formula "31") (term "1,1,0"))
                     (rule "polySimp_mulComm0" (formula "31") (term "0,1,0"))
                     (rule "polySimp_addAssoc" (formula "31") (term "0"))
                     (rule "applyEq" (formula "37") (term "0,1,0,0,1,1,1,0") (ifseqformula "27"))
                     (rule "polySimp_mulComm0" (formula "37") (term "1,0,0,1,1,1,0"))
                     (rule "polySimp_rightDist" (formula "37") (term "1,0,0,1,1,1,0"))
                     (rule "polySimp_mulLiterals" (formula "37") (term "1,1,0,0,1,1,1,0"))
                     (rule "polySimp_mulComm0" (formula "37") (term "0,1,0,0,1,1,1,0"))
                     (rule "polySimp_addAssoc" (formula "37") (term "0,0,1,1,1,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "13"))
                     (rule "polySimp_mulComm0" (formula "13") (term "1"))
                     (rule "polySimp_rightDist" (formula "13") (term "1"))
                     (rule "polySimp_mulLiterals" (formula "13") (term "1,1"))
                     (rule "polySimp_elimOne" (formula "13") (term "1,1"))
                     (rule "polySimp_rightDist" (formula "13") (term "0,1"))
                     (rule "mul_literals" (formula "13") (term "0,0,1"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "28"))
                     (rule "polySimp_mulComm0" (formula "28") (term "1"))
                     (rule "polySimp_rightDist" (formula "28") (term "1"))
                     (rule "mul_literals" (formula "28") (term "0,1"))
                     (rule "polySimp_mulLiterals" (formula "28") (term "1,1"))
                     (rule "polySimp_elimOne" (formula "28") (term "1,1"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "31"))
                     (rule "polySimp_mulComm0" (formula "31") (term "1"))
                     (rule "polySimp_rightDist" (formula "31") (term "1"))
                     (rule "mul_literals" (formula "31") (term "0,1"))
                     (rule "polySimp_mulLiterals" (formula "31") (term "1,1"))
                     (rule "polySimp_elimOne" (formula "31") (term "1,1"))
                     (rule "inEqSimp_exactShadow0" (formula "31") (ifseqformula "13"))
                      (builtin "One Step Simplification" (formula "31"))
                     (rule "greater_literals" (formula "31") (term "0"))
                      (builtin "One Step Simplification" (formula "31"))
                     (rule "polySimp_rightDist" (formula "31") (term "1,0"))
                     (rule "polySimp_rightDist" (formula "31") (term "1,0,0"))
                     (rule "mul_literals" (formula "31") (term "0,1,0,0"))
                     (rule "polySimp_rightDist" (formula "31") (term "0,1,0"))
                     (rule "mul_literals" (formula "31") (term "0,0,1,0"))
                     (rule "polySimp_mulLiterals" (formula "31") (term "1,0,1,0"))
                     (rule "polySimp_rightDist" (formula "31") (term "0,0"))
                     (rule "polySimp_mulLiterals" (formula "31") (term "1,0,0"))
                     (rule "mul_literals" (formula "31") (term "0,0,0"))
                     (rule "polySimp_addAssoc" (formula "31") (term "0"))
                     (rule "polySimp_addComm1" (formula "31") (term "0,0"))
                     (rule "polySimp_pullOutFactor0b" (formula "31") (term "0"))
                     (rule "add_literals" (formula "31") (term "1,1,0"))
                     (rule "times_zero_1" (formula "31") (term "1,0"))
                     (rule "add_zero_right" (formula "31") (term "0"))
                     (rule "polySimp_addAssoc" (formula "31") (term "0"))
                     (rule "add_literals" (formula "31") (term "0,0"))
                     (rule "inEqSimp_sepNegMonomial1" (formula "31"))
                     (rule "polySimp_mulLiterals" (formula "31") (term "0"))
                     (rule "inEqSimp_subsumption4" (formula "31") (ifseqformula "12"))
                     (rule "mul_literals" (formula "31") (term "0,1,0"))
                     (rule "greater_literals" (formula "31") (term "0,0"))
                      (builtin "One Step Simplification" (formula "31"))
                     (rule "leq_literals" (formula "31") (term "0"))
                      (builtin "One Step Simplification" (formula "31"))
                     (rule "true_left" (formula "31"))
                     (rule "inEqSimp_exactShadow3" (formula "32") (ifseqformula "30"))
                     (rule "polySimp_rightDist" (formula "32") (term "0,0"))
                     (rule "polySimp_mulLiterals" (formula "32") (term "1,0,0"))
                     (rule "polySimp_mulComm0" (formula "32") (term "0,0,0"))
                     (rule "polySimp_addComm1" (formula "32") (term "0"))
                     (rule "polySimp_addComm0" (formula "32") (term "0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "32"))
                     (rule "polySimp_mulComm0" (formula "32") (term "1"))
                     (rule "polySimp_rightDist" (formula "32") (term "1"))
                     (rule "mul_literals" (formula "32") (term "0,1"))
                     (rule "polySimp_mulLiterals" (formula "32") (term "1,1"))
                     (rule "polySimp_elimOne" (formula "32") (term "1,1"))
                     (rule "inEqSimp_exactShadow3" (formula "18") (ifseqformula "26"))
                     (rule "polySimp_rightDist" (formula "18") (term "0,0"))
                     (rule "mul_literals" (formula "18") (term "0,0,0"))
                     (rule "polySimp_addComm1" (formula "18") (term "0"))
                     (rule "polySimp_addAssoc" (formula "18") (term "0,0"))
                     (rule "add_literals" (formula "18") (term "0,0,0"))
                     (rule "inEqSimp_sepNegMonomial1" (formula "18"))
                     (rule "polySimp_mulLiterals" (formula "18") (term "0"))
                     (rule "polySimp_elimOne" (formula "18") (term "0"))
                     (rule "inEqSimp_exactShadow3" (formula "23") (ifseqformula "27"))
                     (rule "mul_literals" (formula "23") (term "0,0"))
                     (rule "polySimp_addAssoc" (formula "23") (term "0"))
                     (rule "add_literals" (formula "23") (term "0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "23"))
                     (rule "mul_literals" (formula "23") (term "1"))
                     (rule "elimGcdGeq_antec" (formula "23") (inst "elimGcdRightDiv=Z(0(#))") (inst "elimGcdLeftDiv=quotient_0") (inst "elimGcd=Z(2(3(#)))"))
                     (rule "times_zero_1" (formula "23") (term "1,0,0,0,0,1,0"))
                     (rule "polySimp_mulLiterals" (formula "23") (term "1,0,1,0"))
                     (rule "leq_literals" (formula "23") (term "0,0"))
                      (builtin "One Step Simplification" (formula "23"))
                     (rule "polySimp_addLiterals" (formula "23") (term "0,0,0,0"))
                     (rule "add_literals" (formula "23") (term "0,0,0,0"))
                     (rule "polySimp_pullOutFactor0b" (formula "23") (term "0,0"))
                     (rule "add_literals" (formula "23") (term "1,1,0,0"))
                     (rule "times_zero_1" (formula "23") (term "1,0,0"))
                     (rule "add_zero_right" (formula "23") (term "0,0"))
                     (rule "leq_literals" (formula "23") (term "0"))
                      (builtin "One Step Simplification" (formula "23"))
                     (rule "inEqSimp_exactShadow3" (formula "37") (ifseqformula "35"))
                     (rule "polySimp_rightDist" (formula "37") (term "0,0"))
                     (rule "polySimp_mulLiterals" (formula "37") (term "1,0,0"))
                     (rule "polySimp_mulComm0" (formula "37") (term "0,0,0"))
                     (rule "polySimp_addComm1" (formula "37") (term "0"))
                     (rule "polySimp_addComm0" (formula "37") (term "0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "37"))
                     (rule "polySimp_mulComm0" (formula "37") (term "1"))
                     (rule "polySimp_rightDist" (formula "37") (term "1"))
                     (rule "polySimp_mulLiterals" (formula "37") (term "1,1"))
                     (rule "mul_literals" (formula "37") (term "0,1"))
                     (rule "polySimp_elimOne" (formula "37") (term "1,1"))
                     (rule "inEqSimp_exactShadow3" (formula "27") (ifseqformula "25"))
                     (rule "polySimp_mulAssoc" (formula "27") (term "0,0"))
                     (rule "polySimp_mulComm0" (formula "27") (term "0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "27") (term "0,0"))
                     (rule "polySimp_addComm0" (formula "27") (term "0"))
                     (rule "inEqSimp_sepNegMonomial1" (formula "27"))
                     (rule "polySimp_mulLiterals" (formula "27") (term "0"))
                     (rule "elimGcdLeq_antec" (formula "27") (inst "elimGcdRightDiv=Z(0(#))") (inst "elimGcdLeftDiv=quotient_0") (inst "elimGcd=Z(2(3(#)))"))
                     (rule "neg_literal" (formula "27") (term "0,0,0,0,0,1,0"))
                     (rule "polySimp_mulLiterals" (formula "27") (term "1,0,1,0"))
                     (rule "times_zero_1" (formula "27") (term "1,0,0,0,0,1,0"))
                     (rule "leq_literals" (formula "27") (term "0,0"))
                      (builtin "One Step Simplification" (formula "27"))
                     (rule "polySimp_addLiterals" (formula "27") (term "0,0,0,0"))
                     (rule "add_literals" (formula "27") (term "0,0,0,0"))
                     (rule "polySimp_pullOutFactor0b" (formula "27") (term "0,0"))
                     (rule "add_literals" (formula "27") (term "1,1,0,0"))
                     (rule "times_zero_1" (formula "27") (term "1,0,0"))
                     (rule "add_zero_right" (formula "27") (term "0,0"))
                     (rule "qeq_literals" (formula "27") (term "0"))
                      (builtin "One Step Simplification" (formula "27"))
                     (rule "inEqSimp_antiSymm" (formula "23") (ifseqformula "27"))
                     (rule "applyEq" (formula "24") (term "0") (ifseqformula "23"))
                     (rule "qeq_literals" (formula "24"))
                     (rule "true_left" (formula "24"))
                     (rule "applyEq" (formula "28") (term "0,1") (ifseqformula "23"))
                     (rule "times_zero_2" (formula "28") (term "1"))
                     (rule "applyEq" (formula "18") (term "0,1,1") (ifseqformula "23"))
                     (rule "times_zero_2" (formula "18") (term "1,1"))
                     (rule "add_zero_right" (formula "18") (term "1"))
                     (rule "applyEq" (formula "27") (term "0") (ifseqformula "23"))
                     (rule "leq_literals" (formula "27"))
                     (rule "true_left" (formula "27"))
                     (rule "applyEqRigid" (formula "28") (term "0,1,1") (ifseqformula "23"))
                     (rule "times_zero_2" (formula "28") (term "1,1"))
                     (rule "add_zero_right" (formula "28") (term "1"))
                     (rule "applyEq" (formula "37") (term "0,0,1,1,0,0,1,1") (ifseqformula "23"))
                     (rule "times_zero_2" (formula "37") (term "0,1,1,0,0,1,1"))
                     (rule "add_zero_left" (formula "37") (term "1,1,0,0,1,1"))
                     (rule "polySimp_addComm0" (formula "37") (term "1"))
                     (rule "applyEq" (formula "33") (term "0,0,1,1,1") (ifseqformula "23"))
                     (rule "times_zero_2" (formula "33") (term "0,1,1,1"))
                     (rule "add_zero_left" (formula "33") (term "1,1,1"))
                     (rule "applyEq" (formula "40") (term "0,0,1,1,0,0,1,1,1,0,0") (ifseqformula "23"))
                     (rule "times_zero_2" (formula "40") (term "0,1,1,0,0,1,1,1,0,0"))
                     (rule "add_zero_left" (formula "40") (term "1,1,0,0,1,1,1,0,0"))
                     (rule "polySimp_addComm0" (formula "40") (term "1,1,0,0"))
                     (rule "applyEqRigid" (formula "30") (term "0,0,1,1,1") (ifseqformula "23"))
                     (rule "times_zero_2" (formula "30") (term "0,1,1,1"))
                     (rule "add_zero_left" (formula "30") (term "1,1,1"))
                     (rule "applyEq" (formula "38") (term "0,0,1,1,0,0,1,1,1,0,0") (ifseqformula "23"))
                     (rule "times_zero_2" (formula "38") (term "0,1,1,0,0,1,1,1,0,0"))
                     (rule "add_zero_left" (formula "38") (term "1,1,0,0,1,1,1,0,0"))
                     (rule "polySimp_addComm1" (formula "38") (term "1,1,0,0"))
                     (rule "applyEq" (formula "33") (term "0,0,1,1,0,0,0") (ifseqformula "23"))
                     (rule "times_zero_2" (formula "33") (term "0,1,1,0,0,0"))
                     (rule "add_zero_left" (formula "33") (term "1,1,0,0,0"))
                     (rule "applyEq" (formula "30") (term "0,0,1,1,0,0,0") (ifseqformula "23"))
                     (rule "times_zero_2" (formula "30") (term "0,1,1,0,0,0"))
                     (rule "add_zero_left" (formula "30") (term "1,1,0,0,0"))
                     (rule "applyEq" (formula "39") (term "0,0,1,1,0,0,1,1,1,0,0") (ifseqformula "23"))
                     (rule "times_zero_2" (formula "39") (term "0,1,1,0,0,1,1,1,0,0"))
                     (rule "add_zero_left" (formula "39") (term "1,1,0,0,1,1,1,0,0"))
                     (rule "polySimp_addComm0" (formula "39") (term "1,1,0,0"))
                     (rule "applyEqRigid" (formula "13") (term "0,0,1,1,0,0,0") (ifseqformula "23"))
                     (rule "times_zero_2" (formula "13") (term "0,1,1,0,0,0"))
                     (rule "add_zero_left" (formula "13") (term "1,1,0,0,0"))
                     (rule "inEqSimp_homoInEq0" (formula "13"))
                     (rule "polySimp_mulLiterals" (formula "13") (term "1,0"))
                     (rule "polySimp_addComm1" (formula "13") (term "0"))
                     (rule "applyEqRigid" (formula "26") (term "1") (ifseqformula "23"))
                     (rule "applyEq" (formula "38") (term "0,0,1,1,0,0,1,1,1,0,0,1,0") (ifseqformula "23"))
                     (rule "times_zero_2" (formula "38") (term "0,1,1,0,0,1,1,1,0,0,1,0"))
                     (rule "add_zero_left" (formula "38") (term "1,1,0,0,1,1,1,0,0,1,0"))
                     (rule "polySimp_addComm1" (formula "38") (term "1,1,0,0,1,0"))
                     (rule "applyEqRigid" (formula "34") (term "0,0,1,1,0,0,1,1") (ifseqformula "23"))
                     (rule "times_zero_2" (formula "34") (term "0,1,1,0,0,1,1"))
                     (rule "add_zero_left" (formula "34") (term "1,1,0,0,1,1"))
                     (rule "polySimp_addComm0" (formula "34") (term "1"))
                     (rule "applyEq" (formula "29") (term "0,0,1,1,0,0,1,1") (ifseqformula "23"))
                     (rule "times_zero_2" (formula "29") (term "0,1,1,0,0,1,1"))
                     (rule "add_zero_left" (formula "29") (term "1,1,0,0,1,1"))
                     (rule "polySimp_addComm0" (formula "29") (term "1"))
                     (rule "applyEqRigid" (formula "39") (term "0,0,1,1,0,0,1,0,0,1,1,1,0") (ifseqformula "23"))
                     (rule "times_zero_2" (formula "39") (term "0,1,1,0,0,1,0,0,1,1,1,0"))
                     (rule "add_zero_left" (formula "39") (term "1,1,0,0,1,0,0,1,1,1,0"))
                     (rule "polySimp_addComm1" (formula "39") (term "0,0,1,1,1,0"))
                     (rule "applyEqRigid" (formula "37") (term "0,0,1,1,1") (ifseqformula "23"))
                     (rule "times_zero_2" (formula "37") (term "0,1,1,1"))
                     (rule "add_zero_left" (formula "37") (term "1,1,1"))
                     (rule "polySimp_addComm0" (formula "37") (term "1"))
                     (rule "applyEq" (formula "38") (term "0,0,1,1,1,1,0,0,1,0") (ifseqformula "23"))
                     (rule "times_zero_2" (formula "38") (term "0,1,1,1,1,0,0,1,0"))
                     (rule "add_zero_left" (formula "38") (term "1,1,1,1,0,0,1,0"))
                     (rule "polySimp_addComm1" (formula "38") (term "1,1,0,0,1,0"))
                     (rule "applyEqRigid" (formula "39") (term "0,0,1,1,1,1,0,0") (ifseqformula "23"))
                     (rule "times_zero_2" (formula "39") (term "0,1,1,1,1,0,0"))
                     (rule "add_zero_left" (formula "39") (term "1,1,1,1,0,0"))
                     (rule "polySimp_addComm0" (formula "39") (term "1,1,0,0"))
                     (rule "applyEqRigid" (formula "40") (term "0,0,1,1,1,1,0,0") (ifseqformula "23"))
                     (rule "times_zero_2" (formula "40") (term "0,1,1,1,1,0,0"))
                     (rule "add_zero_left" (formula "40") (term "1,1,1,1,0,0"))
                     (rule "polySimp_addComm0" (formula "40") (term "1,1,0,0"))
                     (rule "applyEq" (formula "38") (term "0,0,1,1,1,1,0,0") (ifseqformula "23"))
                     (rule "times_zero_2" (formula "38") (term "0,1,1,1,1,0,0"))
                     (rule "add_zero_left" (formula "38") (term "1,1,1,1,0,0"))
                     (rule "polySimp_addComm1" (formula "38") (term "1,1,0,0"))
                     (rule "applyEq" (formula "13") (term "0,0,1,1,0") (ifseqformula "23"))
                     (rule "times_zero_2" (formula "13") (term "0,1,1,0"))
                     (rule "add_zero_left" (formula "13") (term "1,1,0"))
                     (rule "polySimp_addComm1" (formula "13") (term "0"))
                     (rule "applyEqRigid" (formula "34") (term "0,0,1,1,1") (ifseqformula "23"))
                     (rule "times_zero_2" (formula "34") (term "0,1,1,1"))
                     (rule "add_zero_left" (formula "34") (term "1,1,1"))
                     (rule "polySimp_addComm0" (formula "34") (term "1"))
                     (rule "applyEq" (formula "29") (term "0,0,1,1,1") (ifseqformula "23"))
                     (rule "times_zero_2" (formula "29") (term "0,1,1,1"))
                     (rule "add_zero_left" (formula "29") (term "1,1,1"))
                     (rule "polySimp_addComm0" (formula "29") (term "1"))
                     (rule "applyEqRigid" (formula "39") (term "0,0,1,0,1,0,0,1,1,1,0") (ifseqformula "23"))
                     (rule "times_zero_2" (formula "39") (term "0,1,0,1,0,0,1,1,1,0"))
                     (rule "add_zero_left" (formula "39") (term "1,0,1,0,0,1,1,1,0"))
                     (rule "polySimp_addComm1" (formula "39") (term "0,0,1,1,1,0"))
                     (rule "inEqSimp_sepNegMonomial1" (formula "13"))
                     (rule "polySimp_mulLiterals" (formula "13") (term "0"))
                     (rule "inEqSimp_subsumption0" (formula "18") (ifseqformula "17"))
                     (rule "leq_literals" (formula "18") (term "0"))
                      (builtin "One Step Simplification" (formula "18"))
                     (rule "true_left" (formula "18"))
                     (rule "inEqSimp_subsumption1" (formula "26") (ifseqformula "23"))
                     (rule "leq_literals" (formula "26") (term "0"))
                      (builtin "One Step Simplification" (formula "26"))
                     (rule "true_left" (formula "26"))
                     (rule "inEqSimp_subsumption0" (formula "26") (ifseqformula "24"))
                     (rule "leq_literals" (formula "26") (term "0"))
                      (builtin "One Step Simplification" (formula "26"))
                     (rule "true_left" (formula "26"))
                     (rule "inEqSimp_exactShadow3" (formula "31") (ifseqformula "29"))
                     (rule "polySimp_rightDist" (formula "31") (term "0,0"))
                     (rule "polySimp_mulLiterals" (formula "31") (term "1,0,0"))
                     (rule "polySimp_mulComm0" (formula "31") (term "0,0,0"))
                     (rule "polySimp_addComm1" (formula "31") (term "0"))
                     (rule "polySimp_addComm0" (formula "31") (term "0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "31"))
                     (rule "polySimp_mulComm0" (formula "31") (term "1"))
                     (rule "polySimp_rightDist" (formula "31") (term "1"))
                     (rule "polySimp_mulLiterals" (formula "31") (term "1,1"))
                     (rule "mul_literals" (formula "31") (term "0,1"))
                     (rule "polySimp_elimOne" (formula "31") (term "1,1"))
                     (rule "inEqSimp_exactShadow0" (formula "30") (ifseqformula "13"))
                      (builtin "One Step Simplification" (formula "30"))
                     (rule "greater_literals" (formula "30") (term "0"))
                      (builtin "One Step Simplification" (formula "30"))
                     (rule "polySimp_rightDist" (formula "30") (term "1,0,0"))
                     (rule "mul_literals" (formula "30") (term "0,1,0,0"))
                     (rule "polySimp_rightDist" (formula "30") (term "1,0"))
                     (rule "polySimp_rightDist" (formula "30") (term "0,0"))
                     (rule "mul_literals" (formula "30") (term "0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "30") (term "1,0,0"))
                     (rule "polySimp_rightDist" (formula "30") (term "0,1,0"))
                     (rule "mul_literals" (formula "30") (term "0,0,1,0"))
                     (rule "polySimp_mulLiterals" (formula "30") (term "1,0,1,0"))
                     (rule "polySimp_addAssoc" (formula "30") (term "0"))
                     (rule "polySimp_addComm1" (formula "30") (term "0,0"))
                     (rule "polySimp_pullOutFactor0b" (formula "30") (term "0"))
                     (rule "add_literals" (formula "30") (term "1,1,0"))
                     (rule "times_zero_1" (formula "30") (term "1,0"))
                     (rule "add_zero_right" (formula "30") (term "0"))
                     (rule "polySimp_addAssoc" (formula "30") (term "0"))
                     (rule "add_literals" (formula "30") (term "0,0"))
                     (rule "inEqSimp_sepNegMonomial1" (formula "30"))
                     (rule "polySimp_mulLiterals" (formula "30") (term "0"))
                     (rule "inEqSimp_subsumption4" (formula "30") (ifseqformula "12"))
                     (rule "greater_literals" (formula "30") (term "0,0"))
                      (builtin "One Step Simplification" (formula "30"))
                     (rule "mul_literals" (formula "30") (term "0,0"))
                     (rule "leq_literals" (formula "30") (term "0"))
                      (builtin "One Step Simplification" (formula "30"))
                     (rule "true_left" (formula "30"))
                     (rule "inEqSimp_exactShadow3" (formula "34") (ifseqformula "32"))
                     (rule "polySimp_rightDist" (formula "34") (term "0,0"))
                     (rule "polySimp_mulLiterals" (formula "34") (term "1,0,0"))
                     (rule "polySimp_mulComm0" (formula "34") (term "0,0,0"))
                     (rule "polySimp_addComm1" (formula "34") (term "0"))
                     (rule "polySimp_addComm0" (formula "34") (term "0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "34"))
                     (rule "polySimp_mulComm0" (formula "34") (term "1"))
                     (rule "polySimp_rightDist" (formula "34") (term "1"))
                     (rule "polySimp_mulLiterals" (formula "34") (term "1,1"))
                     (rule "mul_literals" (formula "34") (term "0,1"))
                     (rule "polySimp_elimOne" (formula "34") (term "1,1"))
                     (rule "shift_paren_or" (formula "37") (term "0,0,0"))
                     (rule "shift_paren_or" (formula "36") (term "0,0,0"))
                     (rule "shift_paren_or" (formula "35") (term "0,0,0"))
                     (rule "div_axiom" (formula "1") (term "1") (inst "quotient=quotient_1"))
                     (rule "equal_literals" (formula "1") (term "0"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "mul_literals" (formula "1") (term "1,1,1,1"))
                     (rule "qeq_literals" (formula "1") (term "0,1"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "andLeft" (formula "1"))
                     (rule "andLeft" (formula "1"))
                     (rule "polySimp_addComm1" (formula "3") (term "1"))
                     (rule "add_literals" (formula "3") (term "0,1"))
                     (rule "inEqSimp_commuteLeq" (formula "2"))
                     (rule "inEqSimp_homoInEq1" (formula "3"))
                     (rule "polySimp_mulLiterals" (formula "3") (term "1,0"))
                     (rule "polySimp_addComm1" (formula "3") (term "0"))
                     (rule "applyEq" (formula "5") (term "0") (ifseqformula "1"))
                     (rule "inEqSimp_homoInEq1" (formula "5"))
                     (rule "polySimp_addComm1" (formula "5") (term "0"))
                     (rule "applyEq" (formula "6") (term "0,1,0,2,0") (ifseqformula "1"))
                     (rule "polySimp_addComm0" (formula "6") (term "0,2,0"))
                     (rule "applyEq" (formula "4") (term "1") (ifseqformula "1"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "3"))
                     (rule "polySimp_mulComm0" (formula "3") (term "1"))
                     (rule "polySimp_rightDist" (formula "3") (term "1"))
                     (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
                     (rule "mul_literals" (formula "3") (term "0,1"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "5"))
                     (rule "polySimp_mulComm0" (formula "5") (term "1"))
                     (rule "polySimp_rightDist" (formula "5") (term "1"))
                     (rule "polySimp_mulLiterals" (formula "5") (term "1,1"))
                     (rule "mul_literals" (formula "5") (term "0,1"))
                     (rule "polySimp_elimOne" (formula "5") (term "1,1"))
                     (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "10"))
                     (rule "polySimp_mulAssoc" (formula "2") (term "0,0"))
                     (rule "polySimp_mulComm0" (formula "2") (term "0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "2") (term "0,0"))
                     (rule "polySimp_addComm0" (formula "2") (term "0"))
                     (rule "inEqSimp_sepNegMonomial1" (formula "2"))
                     (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                     (rule "elimGcdLeq_antec" (formula "2") (inst "elimGcdRightDiv=Z(3(2(8(1(4(7(3(7(0(1(#)))))))))))") (inst "elimGcdLeftDiv=quotient_1") (inst "elimGcd=Z(2(#))"))
                     (rule "neg_literal" (formula "2") (term "0,0,0,0,0,1,0"))
                     (rule "polySimp_mulLiterals" (formula "2") (term "1,0,0,0,0,1,0"))
                     (rule "polySimp_mulLiterals" (formula "2") (term "1,0,1,0"))
                     (rule "leq_literals" (formula "2") (term "0,0"))
                      (builtin "One Step Simplification" (formula "2"))
                     (rule "mul_literals" (formula "2") (term "1,0,0,0,0,0"))
                     (rule "polySimp_addLiterals" (formula "2") (term "0,0,0,0"))
                     (rule "add_literals" (formula "2") (term "0,0,0,0"))
                     (rule "polySimp_pullOutFactor0b" (formula "2") (term "0,0"))
                     (rule "add_literals" (formula "2") (term "1,1,0,0"))
                     (rule "times_zero_1" (formula "2") (term "1,0,0"))
                     (rule "add_zero_right" (formula "2") (term "0,0"))
                     (rule "qeq_literals" (formula "2") (term "0"))
                      (builtin "One Step Simplification" (formula "2"))
                     (rule "inEqSimp_exactShadow3" (formula "3") (ifseqformula "15"))
                     (rule "polySimp_mulAssoc" (formula "3") (term "0,0"))
                     (rule "polySimp_mulComm0" (formula "3") (term "0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "3") (term "0,0"))
                     (rule "polySimp_addAssoc" (formula "3") (term "0"))
                     (rule "polySimp_addComm0" (formula "3") (term "0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "3"))
                     (rule "polySimp_mulComm0" (formula "3") (term "1"))
                     (rule "polySimp_rightDist" (formula "3") (term "1"))
                     (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
                     (rule "mul_literals" (formula "3") (term "0,1"))
                     (rule "inEqSimp_exactShadow3" (formula "25") (ifseqformula "5"))
                     (rule "mul_literals" (formula "25") (term "0,0"))
                     (rule "polySimp_addAssoc" (formula "25") (term "0"))
                     (rule "add_literals" (formula "25") (term "0,0"))
                     (rule "add_zero_left" (formula "25") (term "0"))
                     (rule "elimGcdGeq_antec" (formula "25") (inst "elimGcdRightDiv=Z(0(#))") (inst "elimGcdLeftDiv=quotient_1") (inst "elimGcd=Z(2(#))"))
                     (rule "polySimp_mulLiterals" (formula "25") (term "1,0,1,0"))
                     (rule "mul_literals" (formula "25") (term "0,1,0,0,0,0,1,0"))
                     (rule "leq_literals" (formula "25") (term "0,0"))
                      (builtin "One Step Simplification" (formula "25"))
                     (rule "add_zero_right" (formula "25") (term "0,0,0,0"))
                     (rule "mul_literals" (formula "25") (term "1,0,0,0,0"))
                     (rule "add_zero_right" (formula "25") (term "0,0,0,0"))
                     (rule "polySimp_pullOutFactor0b" (formula "25") (term "0,0"))
                     (rule "add_literals" (formula "25") (term "1,1,0,0"))
                     (rule "times_zero_1" (formula "25") (term "1,0,0"))
                     (rule "add_zero_right" (formula "25") (term "0,0"))
                     (rule "leq_literals" (formula "25") (term "0"))
                      (builtin "One Step Simplification" (formula "25"))
                     (rule "inEqSimp_exactShadow3" (formula "24") (ifseqformula "7"))
                     (rule "times_zero_1" (formula "24") (term "0,0"))
                     (rule "add_zero_left" (formula "24") (term "0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "24"))
                     (rule "mul_literals" (formula "24") (term "1"))
                     (rule "inEqSimp_subsumption1" (formula "26") (ifseqformula "24"))
                     (rule "leq_literals" (formula "26") (term "0"))
                      (builtin "One Step Simplification" (formula "26"))
                     (rule "true_left" (formula "26"))
                     (rule "inEqSimp_exactShadow3" (formula "3") (ifseqformula "7"))
                     (rule "polySimp_rightDist" (formula "3") (term "0,0"))
                     (rule "mul_literals" (formula "3") (term "0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "3") (term "1,0,0"))
                     (rule "polySimp_addAssoc" (formula "3") (term "0"))
                     (rule "polySimp_addComm1" (formula "3") (term "0,0"))
                     (rule "add_literals" (formula "3") (term "0,0,0"))
                     (rule "polySimp_pullOutFactor2b" (formula "3") (term "0"))
                     (rule "add_literals" (formula "3") (term "1,1,0"))
                     (rule "inEqSimp_sepNegMonomial1" (formula "3"))
                     (rule "polySimp_mulLiterals" (formula "3") (term "0"))
                     (rule "polySimp_elimOne" (formula "3") (term "0"))
                     (rule "inEqSimp_contradInEq1" (formula "3") (ifseqformula "25"))
                     (rule "qeq_literals" (formula "3") (term "0"))
                      (builtin "One Step Simplification" (formula "3"))
                     (rule "closeFalse" (formula "3"))
                  )
                  (branch "CUT: self.sorted_splitters[b + d * -1] <= -1 + value FALSE"
                      (builtin "One Step Simplification" (formula "14"))
                     (rule "inEqSimp_leqRight" (formula "31"))
                     (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                     (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                     (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                     (rule "add_literals" (formula "1") (term "0,0,0"))
                     (rule "add_zero_left" (formula "1") (term "0,0"))
                     (rule "applyEq" (formula "1") (term "0,1,0,2,1,0") (ifseqformula "15"))
                     (rule "polySimp_mulComm0" (formula "1") (term "1,0,2,1,0"))
                     (rule "polySimp_rightDist" (formula "1") (term "1,0,2,1,0"))
                     (rule "mul_literals" (formula "1") (term "0,1,0,2,1,0"))
                     (rule "polySimp_addAssoc" (formula "1") (term "0,2,1,0"))
                     (rule "polySimp_addComm0" (formula "1") (term "0,0,2,1,0"))
                     (rule "polySimp_pullOutFactor1b" (formula "1") (term "0,2,1,0"))
                     (rule "add_literals" (formula "1") (term "1,1,0,2,1,0"))
                     (rule "times_zero_1" (formula "1") (term "1,0,2,1,0"))
                     (rule "add_zero_right" (formula "1") (term "0,2,1,0"))
                     (rule "applyEq" (formula "2") (term "0,0") (ifseqformula "15"))
                     (rule "eqSymm" (formula "2"))
                     (rule "applyEq" (formula "21") (term "0") (ifseqformula "15"))
                     (rule "inEqSimp_homoInEq1" (formula "21"))
                     (rule "polySimp_mulComm0" (formula "21") (term "1,0"))
                     (rule "polySimp_rightDist" (formula "21") (term "1,0"))
                     (rule "mul_literals" (formula "21") (term "0,1,0"))
                     (rule "polySimp_addAssoc" (formula "21") (term "0"))
                     (rule "add_literals" (formula "21") (term "0,0"))
                     (rule "add_zero_left" (formula "21") (term "0"))
                     (rule "applyEq" (formula "9") (term "0") (ifseqformula "15"))
                     (rule "inEqSimp_homoInEq0" (formula "9"))
                     (rule "polySimp_mulComm0" (formula "9") (term "1,0"))
                     (rule "polySimp_rightDist" (formula "9") (term "1,0"))
                     (rule "mul_literals" (formula "9") (term "0,1,0"))
                     (rule "polySimp_addAssoc" (formula "9") (term "0"))
                     (rule "add_literals" (formula "9") (term "0,0"))
                     (rule "applyEq" (formula "3") (term "0,0") (ifseqformula "15"))
                     (rule "applyEq" (formula "13") (term "0") (ifseqformula "15"))
                     (rule "inEqSimp_homoInEq0" (formula "13"))
                     (rule "polySimp_pullOutFactor1" (formula "13") (term "0"))
                     (rule "add_literals" (formula "13") (term "1,0"))
                     (rule "times_zero_1" (formula "13") (term "0"))
                     (rule "qeq_literals" (formula "13"))
                     (rule "true_left" (formula "13"))
                     (rule "applyEq" (formula "4") (term "0,0,1,0,2,0") (ifseqformula "14"))
                     (rule "applyEq" (formula "21") (term "1") (ifseqformula "14"))
                     (rule "applyEq" (formula "2") (term "0,0") (ifseqformula "14"))
                     (rule "eqSymm" (formula "2"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                     (rule "polySimp_mulLiterals" (formula "1") (term "1"))
                     (rule "polySimp_elimOne" (formula "1") (term "1"))
                     (rule "inEqSimp_invertInEq0" (formula "20"))
                     (rule "polySimp_mulLiterals" (formula "20") (term "0"))
                     (rule "mul_literals" (formula "20") (term "1"))
                     (rule "polySimp_elimOne" (formula "20") (term "0"))
                     (rule "inEqSimp_sepNegMonomial1" (formula "9"))
                     (rule "polySimp_mulLiterals" (formula "9") (term "0"))
                     (rule "polySimp_elimOne" (formula "9") (term "0"))
                     (rule "inEqSimp_subsumption0" (formula "8") (ifseqformula "9"))
                     (rule "leq_literals" (formula "8") (term "0"))
                      (builtin "One Step Simplification" (formula "8"))
                     (rule "true_left" (formula "8"))
                     (rule "commute_or_2" (formula "28") (term "0,0"))
                     (rule "commute_or_2" (formula "27") (term "0,0"))
                     (rule "commute_or_2" (formula "26") (term "0,0"))
                     (rule "arrayLengthIsAnInt" (formula "24") (term "0"))
                     (rule "expand_inInt" (formula "24"))
                     (rule "replace_int_MIN" (formula "24") (term "0,1"))
                     (rule "replace_int_MAX" (formula "24") (term "1,0"))
                     (rule "andLeft" (formula "24"))
                     (rule "inEqSimp_commuteLeq" (formula "25"))
                     (rule "inEqSimp_exactShadow3" (formula "26") (ifseqformula "24"))
                     (rule "polySimp_mulComm0" (formula "26") (term "0,0"))
                     (rule "polySimp_addComm0" (formula "26") (term "0"))
                     (rule "inEqSimp_sepNegMonomial1" (formula "26"))
                     (rule "polySimp_mulLiterals" (formula "26") (term "0"))
                     (rule "polySimp_elimOne" (formula "26") (term "0"))
                     (rule "inEqSimp_exactShadow3" (formula "12") (ifseqformula "26"))
                     (rule "polySimp_rightDist" (formula "12") (term "0,0"))
                     (rule "mul_literals" (formula "12") (term "0,0,0"))
                     (rule "polySimp_addComm1" (formula "12") (term "0"))
                     (rule "add_literals" (formula "12") (term "0,0"))
                     (rule "inEqSimp_sepNegMonomial1" (formula "12"))
                     (rule "polySimp_mulLiterals" (formula "12") (term "0"))
                     (rule "polySimp_elimOne" (formula "12") (term "0"))
                     (rule "arrayLengthNotNegative" (formula "27") (term "0"))
                     (rule "inEqSimp_subsumption1" (formula "25") (ifseqformula "27"))
                     (rule "leq_literals" (formula "25") (term "0"))
                      (builtin "One Step Simplification" (formula "25"))
                     (rule "true_left" (formula "25"))
                     (rule "commute_or_2" (formula "29") (term "0,0,1,0"))
                     (rule "arrayLengthNotNegative" (formula "28") (term "0"))
                     (rule "arrayLengthIsAnInt" (formula "29") (term "0"))
                     (rule "expand_inInt" (formula "29"))
                     (rule "replace_int_MIN" (formula "29") (term "0,1"))
                     (rule "replace_int_MAX" (formula "29") (term "1,0"))
                     (rule "andLeft" (formula "29"))
                     (rule "inEqSimp_commuteLeq" (formula "30"))
                     (rule "inEqSimp_subsumption1" (formula "30") (ifseqformula "28"))
                     (rule "leq_literals" (formula "30") (term "0"))
                      (builtin "One Step Simplification" (formula "30"))
                     (rule "true_left" (formula "30"))
                     (rule "inEqSimp_exactShadow3" (formula "30") (ifseqformula "29"))
                     (rule "polySimp_mulComm0" (formula "30") (term "0,0"))
                     (rule "polySimp_addComm0" (formula "30") (term "0"))
                     (rule "inEqSimp_sepNegMonomial1" (formula "30"))
                     (rule "polySimp_mulLiterals" (formula "30") (term "0"))
                     (rule "polySimp_elimOne" (formula "30") (term "0"))
                     (rule "div_axiom" (formula "22") (term "0,1,1,1,1,1,0,0") (inst "quotient=quotient_0"))
                     (rule "mul_literals" (formula "22") (term "1,1,1,1,1"))
                     (rule "equal_literals" (formula "22") (term "0"))
                      (builtin "One Step Simplification" (formula "22"))
                     (rule "qeq_literals" (formula "22") (term "0,1"))
                      (builtin "One Step Simplification" (formula "22"))
                     (rule "andLeft" (formula "22"))
                     (rule "andLeft" (formula "22"))
                     (rule "polySimp_addComm1" (formula "24") (term "1"))
                     (rule "add_literals" (formula "24") (term "0,1"))
                     (rule "inEqSimp_commuteLeq" (formula "23"))
                     (rule "inEqSimp_homoInEq1" (formula "24"))
                     (rule "polySimp_mulLiterals" (formula "24") (term "1,0"))
                     (rule "polySimp_addComm1" (formula "24") (term "0"))
                     (rule "applyEq" (formula "25") (term "0,1,1,1,1,1,0,0") (ifseqformula "22"))
                     (rule "polySimp_addComm0" (formula "25") (term "1,1,1,1,0,0"))
                     (rule "applyEq" (formula "25") (term "0,1,1,2,1,0,0") (ifseqformula "22"))
                     (rule "polySimp_addComm0" (formula "25") (term "1,2,1,0,0"))
                     (rule "applyEq" (formula "25") (term "0,0,0,1,0,0") (ifseqformula "22"))
                     (rule "inEqSimp_homoInEq1" (formula "25") (term "0,1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "25") (term "1,0,0,1,0,0"))
                     (rule "polySimp_addComm1" (formula "25") (term "0,0,1,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "24"))
                     (rule "polySimp_mulComm0" (formula "24") (term "1"))
                     (rule "polySimp_rightDist" (formula "24") (term "1"))
                     (rule "mul_literals" (formula "24") (term "0,1"))
                     (rule "polySimp_mulLiterals" (formula "24") (term "1,1"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "0,1,0,0"))
                     (rule "polySimp_mulComm0" (formula "25") (term "1,0,1,0,0"))
                     (rule "polySimp_rightDist" (formula "25") (term "1,0,1,0,0"))
                     (rule "mul_literals" (formula "25") (term "0,1,0,1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "25") (term "1,1,0,1,0,0"))
                     (rule "inEqSimp_contradInEq1" (formula "25") (term "0,1,0,0") (ifseqformula "23"))
                     (rule "inEqSimp_homoInEq1" (formula "25") (term "0,0,1,0,0"))
                     (rule "polySimp_mulComm0" (formula "25") (term "1,0,0,0,1,0,0"))
                     (rule "polySimp_rightDist" (formula "25") (term "1,0,0,0,1,0,0"))
                     (rule "mul_literals" (formula "25") (term "0,1,0,0,0,1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "25") (term "1,1,0,0,0,1,0,0"))
                     (rule "polySimp_addAssoc" (formula "25") (term "0,0,0,1,0,0"))
                     (rule "polySimp_addComm0" (formula "25") (term "0,0,0,0,1,0,0"))
                     (rule "polySimp_pullOutFactor0b" (formula "25") (term "0,0,0,1,0,0"))
                     (rule "add_literals" (formula "25") (term "1,1,0,0,0,1,0,0"))
                     (rule "times_zero_1" (formula "25") (term "1,0,0,0,1,0,0"))
                     (rule "add_zero_right" (formula "25") (term "0,0,0,1,0,0"))
                     (rule "leq_literals" (formula "25") (term "0,0,1,0,0"))
                      (builtin "One Step Simplification" (formula "25"))
                     (rule "polySimp_homoEq" (formula "25"))
                     (rule "polySimp_addComm1" (formula "25") (term "0"))
                     (rule "mod_axiom" (formula "25") (term "0,1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "25") (term "1,0,1,0,0"))
                     (rule "polySimp_mulComm0" (formula "25") (term "1,0,0"))
                     (rule "polySimp_rightDist" (formula "25") (term "1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "25") (term "1,1,0,0"))
                     (rule "polySimp_rightDist" (formula "25") (term "0,1,0,0"))
                     (rule "mul_literals" (formula "25") (term "0,0,1,0,0"))
                     (rule "polySimp_addAssoc" (formula "25") (term "0,0"))
                     (rule "polySimp_addAssoc" (formula "25") (term "0,0,0"))
                     (rule "add_literals" (formula "25") (term "0,0,0,0"))
                     (rule "add_zero_left" (formula "25") (term "0,0,0"))
                     (rule "polySimp_sepPosMonomial" (formula "25"))
                     (rule "polySimp_mulComm0" (formula "25") (term "1"))
                     (rule "polySimp_rightDist" (formula "25") (term "1"))
                     (rule "polySimp_mulLiterals" (formula "25") (term "1,1"))
                     (rule "polySimp_mulAssoc" (formula "25") (term "0,1"))
                     (rule "polySimp_mulComm0" (formula "25") (term "0,0,1"))
                     (rule "polySimp_mulLiterals" (formula "25") (term "0,1"))
                     (rule "polySimp_elimOne" (formula "25") (term "0,1"))
                     (rule "applyEq" (formula "34") (term "1,1,1,0,0,1,0") (ifseqformula "25"))
                     (rule "polySimp_addAssoc" (formula "34") (term "1,1,0,0,1,0"))
                     (rule "applyEq" (formula "36") (term "1,1,0,0") (ifseqformula "25"))
                     (rule "applyEq" (formula "30") (term "1") (ifseqformula "25"))
                     (rule "applyEq" (formula "33") (term "1") (ifseqformula "25"))
                     (rule "applyEq" (formula "28") (term "0") (ifseqformula "25"))
                     (rule "inEqSimp_homoInEq0" (formula "28"))
                     (rule "polySimp_mulComm0" (formula "28") (term "1,0"))
                     (rule "polySimp_rightDist" (formula "28") (term "1,0"))
                     (rule "polySimp_mulLiterals" (formula "28") (term "1,1,0"))
                     (rule "polySimp_mulComm0" (formula "28") (term "0,1,0"))
                     (rule "polySimp_addAssoc" (formula "28") (term "0"))
                     (rule "applyEq" (formula "26") (term "0") (ifseqformula "25"))
                     (rule "inEqSimp_homoInEq1" (formula "26"))
                     (rule "polySimp_mulComm0" (formula "26") (term "1,0"))
                     (rule "polySimp_rightDist" (formula "26") (term "1,0"))
                     (rule "polySimp_mulLiterals" (formula "26") (term "1,1,0"))
                     (rule "polySimp_mulComm0" (formula "26") (term "0,1,0"))
                     (rule "polySimp_addAssoc" (formula "26") (term "0"))
                     (rule "applyEq" (formula "12") (term "0") (ifseqformula "25"))
                     (rule "inEqSimp_homoInEq1" (formula "12"))
                     (rule "polySimp_mulComm0" (formula "12") (term "1,0"))
                     (rule "polySimp_rightDist" (formula "12") (term "1,0"))
                     (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0"))
                     (rule "polySimp_mulComm0" (formula "12") (term "0,1,0"))
                     (rule "polySimp_addAssoc" (formula "12") (term "0"))
                     (rule "applyEq" (formula "35") (term "1,1,0,0") (ifseqformula "25"))
                     (rule "applyEq" (formula "34") (term "1,1,1,0,0") (ifseqformula "25"))
                     (rule "polySimp_addAssoc" (formula "34") (term "1,1,0,0"))
                     (rule "applyEq" (formula "35") (term "0,1,0,0,1,1,1,0") (ifseqformula "25"))
                     (rule "polySimp_mulComm0" (formula "35") (term "1,0,0,1,1,1,0"))
                     (rule "polySimp_rightDist" (formula "35") (term "1,0,0,1,1,1,0"))
                     (rule "polySimp_mulLiterals" (formula "35") (term "1,1,0,0,1,1,1,0"))
                     (rule "polySimp_mulComm0" (formula "35") (term "0,1,0,0,1,1,1,0"))
                     (rule "polySimp_addAssoc" (formula "35") (term "0,0,1,1,1,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "28"))
                     (rule "polySimp_mulComm0" (formula "28") (term "1"))
                     (rule "polySimp_rightDist" (formula "28") (term "1"))
                     (rule "polySimp_mulLiterals" (formula "28") (term "1,1"))
                     (rule "mul_literals" (formula "28") (term "0,1"))
                     (rule "polySimp_elimOne" (formula "28") (term "1,1"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "26"))
                     (rule "polySimp_mulComm0" (formula "26") (term "1"))
                     (rule "polySimp_rightDist" (formula "26") (term "1"))
                     (rule "mul_literals" (formula "26") (term "0,1"))
                     (rule "polySimp_mulLiterals" (formula "26") (term "1,1"))
                     (rule "polySimp_elimOne" (formula "26") (term "1,1"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "12"))
                     (rule "polySimp_mulComm0" (formula "12") (term "1"))
                     (rule "polySimp_rightDist" (formula "12") (term "1"))
                     (rule "polySimp_mulLiterals" (formula "12") (term "1,1"))
                     (rule "polySimp_elimOne" (formula "12") (term "1,1"))
                     (rule "polySimp_rightDist" (formula "12") (term "0,1"))
                     (rule "mul_literals" (formula "12") (term "0,0,1"))
                     (rule "inEqSimp_exactShadow3" (formula "17") (ifseqformula "24"))
                     (rule "polySimp_rightDist" (formula "17") (term "0,0"))
                     (rule "mul_literals" (formula "17") (term "0,0,0"))
                     (rule "polySimp_addComm1" (formula "17") (term "0"))
                     (rule "polySimp_addAssoc" (formula "17") (term "0,0"))
                     (rule "add_literals" (formula "17") (term "0,0,0"))
                     (rule "inEqSimp_sepNegMonomial1" (formula "17"))
                     (rule "polySimp_mulLiterals" (formula "17") (term "0"))
                     (rule "polySimp_elimOne" (formula "17") (term "0"))
                     (rule "inEqSimp_exactShadow3" (formula "21") (ifseqformula "25"))
                     (rule "mul_literals" (formula "21") (term "0,0"))
                     (rule "polySimp_addAssoc" (formula "21") (term "0"))
                     (rule "add_literals" (formula "21") (term "0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "21"))
                     (rule "mul_literals" (formula "21") (term "1"))
                     (rule "elimGcdGeq_antec" (formula "21") (inst "elimGcdRightDiv=Z(0(#))") (inst "elimGcdLeftDiv=quotient_0") (inst "elimGcd=Z(2(3(#)))"))
                     (rule "leq_literals" (formula "21") (term "0,0"))
                      (builtin "One Step Simplification" (formula "21"))
                     (rule "polySimp_mulLiterals" (formula "21") (term "1,0,0"))
                     (rule "times_zero_1" (formula "21") (term "1,0,0,0,0,0"))
                     (rule "polySimp_addLiterals" (formula "21") (term "0,0,0,0"))
                     (rule "add_literals" (formula "21") (term "0,0,0,0"))
                     (rule "polySimp_pullOutFactor0b" (formula "21") (term "0,0"))
                     (rule "add_literals" (formula "21") (term "1,1,0,0"))
                     (rule "times_zero_1" (formula "21") (term "1,0,0"))
                     (rule "add_zero_right" (formula "21") (term "0,0"))
                     (rule "leq_literals" (formula "21") (term "0"))
                      (builtin "One Step Simplification" (formula "21"))
                     (rule "inEqSimp_exactShadow0" (formula "30") (ifseqformula "12"))
                      (builtin "One Step Simplification" (formula "30"))
                     (rule "greater_literals" (formula "30") (term "0"))
                      (builtin "One Step Simplification" (formula "30"))
                     (rule "polySimp_rightDist" (formula "30") (term "1,0,0"))
                     (rule "mul_literals" (formula "30") (term "0,1,0,0"))
                     (rule "polySimp_rightDist" (formula "30") (term "1,0"))
                     (rule "polySimp_rightDist" (formula "30") (term "0,0"))
                     (rule "polySimp_mulLiterals" (formula "30") (term "1,0,0"))
                     (rule "mul_literals" (formula "30") (term "0,0,0"))
                     (rule "polySimp_rightDist" (formula "30") (term "0,1,0"))
                     (rule "polySimp_mulLiterals" (formula "30") (term "1,0,1,0"))
                     (rule "mul_literals" (formula "30") (term "0,0,1,0"))
                     (rule "polySimp_addAssoc" (formula "30") (term "0"))
                     (rule "polySimp_addComm1" (formula "30") (term "0,0"))
                     (rule "polySimp_pullOutFactor0b" (formula "30") (term "0"))
                     (rule "add_literals" (formula "30") (term "1,1,0"))
                     (rule "times_zero_1" (formula "30") (term "1,0"))
                     (rule "add_zero_right" (formula "30") (term "0"))
                     (rule "polySimp_addAssoc" (formula "30") (term "0"))
                     (rule "add_literals" (formula "30") (term "0,0"))
                     (rule "inEqSimp_sepNegMonomial1" (formula "30"))
                     (rule "polySimp_mulLiterals" (formula "30") (term "0"))
                     (rule "inEqSimp_subsumption4" (formula "30") (ifseqformula "8"))
                     (rule "mul_literals" (formula "30") (term "0,1,0"))
                     (rule "greater_literals" (formula "30") (term "0,0"))
                      (builtin "One Step Simplification" (formula "30"))
                     (rule "leq_literals" (formula "30") (term "0"))
                      (builtin "One Step Simplification" (formula "30"))
                     (rule "true_left" (formula "30"))
                     (rule "inEqSimp_exactShadow3" (formula "35") (ifseqformula "34"))
                     (rule "polySimp_rightDist" (formula "35") (term "0,0"))
                     (rule "polySimp_mulLiterals" (formula "35") (term "1,0,0"))
                     (rule "polySimp_mulComm0" (formula "35") (term "0,0,0"))
                     (rule "polySimp_addComm1" (formula "35") (term "0"))
                     (rule "polySimp_addComm0" (formula "35") (term "0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "35"))
                     (rule "polySimp_mulComm0" (formula "35") (term "1"))
                     (rule "polySimp_rightDist" (formula "35") (term "1"))
                     (rule "mul_literals" (formula "35") (term "0,1"))
                     (rule "polySimp_mulLiterals" (formula "35") (term "1,1"))
                     (rule "polySimp_elimOne" (formula "35") (term "1,1"))
                     (rule "inEqSimp_exactShadow3" (formula "25") (ifseqformula "23"))
                     (rule "polySimp_mulAssoc" (formula "25") (term "0,0"))
                     (rule "polySimp_mulComm0" (formula "25") (term "0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "25") (term "0,0"))
                     (rule "polySimp_addComm0" (formula "25") (term "0"))
                     (rule "inEqSimp_sepNegMonomial1" (formula "25"))
                     (rule "polySimp_mulLiterals" (formula "25") (term "0"))
                     (rule "elimGcdLeq_antec" (formula "25") (inst "elimGcdRightDiv=Z(0(#))") (inst "elimGcdLeftDiv=quotient_0") (inst "elimGcd=Z(2(3(#)))"))
                     (rule "polySimp_mulLiterals" (formula "25") (term "1,0,1,0"))
                     (rule "neg_literal" (formula "25") (term "0,0,0,0,0,1,0"))
                     (rule "times_zero_1" (formula "25") (term "1,0,0,0,0,1,0"))
                     (rule "leq_literals" (formula "25") (term "0,0"))
                      (builtin "One Step Simplification" (formula "25"))
                     (rule "polySimp_addLiterals" (formula "25") (term "0,0,0,0"))
                     (rule "add_literals" (formula "25") (term "0,0,0,0"))
                     (rule "polySimp_pullOutFactor0b" (formula "25") (term "0,0"))
                     (rule "add_literals" (formula "25") (term "1,1,0,0"))
                     (rule "times_zero_1" (formula "25") (term "1,0,0"))
                     (rule "add_zero_right" (formula "25") (term "0,0"))
                     (rule "qeq_literals" (formula "25") (term "0"))
                      (builtin "One Step Simplification" (formula "25"))
                     (rule "inEqSimp_exactShadow3" (formula "33") (ifseqformula "30"))
                     (rule "polySimp_rightDist" (formula "33") (term "0,0"))
                     (rule "polySimp_mulLiterals" (formula "33") (term "1,0,0"))
                     (rule "polySimp_mulComm0" (formula "33") (term "0,0,0"))
                     (rule "polySimp_addComm1" (formula "33") (term "0"))
                     (rule "polySimp_addComm0" (formula "33") (term "0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "33"))
                     (rule "polySimp_mulComm0" (formula "33") (term "1"))
                     (rule "polySimp_rightDist" (formula "33") (term "1"))
                     (rule "polySimp_mulLiterals" (formula "33") (term "1,1"))
                     (rule "mul_literals" (formula "33") (term "0,1"))
                     (rule "polySimp_elimOne" (formula "33") (term "1,1"))
                     (rule "inEqSimp_exactShadow3" (formula "15") (ifseqformula "17"))
                     (rule "times_zero_1" (formula "15") (term "0,0"))
                     (rule "add_zero_left" (formula "15") (term "0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "15"))
                     (rule "mul_literals" (formula "15") (term "1"))
                     (rule "inEqSimp_subsumption6" (formula "15") (ifseqformula "22"))
                     (rule "greater_literals" (formula "15") (term "0,0"))
                      (builtin "One Step Simplification" (formula "15"))
                     (rule "times_zero_1" (formula "15") (term "1,0"))
                     (rule "leq_literals" (formula "15") (term "0"))
                      (builtin "One Step Simplification" (formula "15"))
                     (rule "true_left" (formula "15"))
                     (rule "inEqSimp_antiSymm" (formula "21") (ifseqformula "25"))
                     (rule "applyEqRigid" (formula "27") (term "0,1") (ifseqformula "21"))
                     (rule "times_zero_2" (formula "27") (term "1"))
                     (rule "applyEq" (formula "22") (term "0") (ifseqformula "21"))
                     (rule "qeq_literals" (formula "22"))
                     (rule "true_left" (formula "22"))
                     (rule "applyEqRigid" (formula "27") (term "0,1,1") (ifseqformula "21"))
                     (rule "times_zero_2" (formula "27") (term "1,1"))
                     (rule "add_zero_right" (formula "27") (term "1"))
                     (rule "applyEq" (formula "25") (term "0") (ifseqformula "21"))
                     (rule "leq_literals" (formula "25"))
                     (rule "true_left" (formula "25"))
                     (rule "applyEqRigid" (formula "17") (term "0,1,1") (ifseqformula "21"))
                     (rule "times_zero_2" (formula "17") (term "1,1"))
                     (rule "add_zero_right" (formula "17") (term "1"))
                     (rule "applyEq" (formula "32") (term "0,0,1,1,0,0,1,1") (ifseqformula "21"))
                     (rule "times_zero_2" (formula "32") (term "0,1,1,0,0,1,1"))
                     (rule "add_zero_left" (formula "32") (term "1,1,0,0,1,1"))
                     (rule "polySimp_addComm0" (formula "32") (term "1"))
                     (rule "applyEq" (formula "37") (term "0,0,1,1,0,0,1,1,1,0,0") (ifseqformula "21"))
                     (rule "times_zero_2" (formula "37") (term "0,1,1,0,0,1,1,1,0,0"))
                     (rule "add_zero_left" (formula "37") (term "1,1,0,0,1,1,1,0,0"))
                     (rule "polySimp_addComm0" (formula "37") (term "1,1,0,0"))
                     (rule "applyEq" (formula "28") (term "0,0,1,1,1") (ifseqformula "21"))
                     (rule "times_zero_2" (formula "28") (term "0,1,1,1"))
                     (rule "add_zero_left" (formula "28") (term "1,1,1"))
                     (rule "applyEqRigid" (formula "28") (term "0,0,1,1,0,0,0") (ifseqformula "21"))
                     (rule "times_zero_2" (formula "28") (term "0,1,1,0,0,0"))
                     (rule "add_zero_left" (formula "28") (term "1,1,0,0,0"))
                     (rule "applyEqRigid" (formula "12") (term "0,0,1,1,1") (ifseqformula "21"))
                     (rule "mul_literals" (formula "12") (term "0,1,1,1"))
                     (rule "add_zero_left" (formula "12") (term "1,1,1"))
                     (rule "applyEq" (formula "24") (term "1") (ifseqformula "21"))
                     (rule "applyEq" (formula "30") (term "0,0,1,1,1") (ifseqformula "21"))
                     (rule "mul_literals" (formula "30") (term "0,1,1,1"))
                     (rule "add_zero_left" (formula "30") (term "1,1,1"))
                     (rule "applyEq" (formula "35") (term "0,0,1,1,0,0,1,1") (ifseqformula "21"))
                     (rule "times_zero_2" (formula "35") (term "0,1,1,0,0,1,1"))
                     (rule "add_zero_left" (formula "35") (term "1,1,0,0,1,1"))
                     (rule "polySimp_addComm0" (formula "35") (term "1"))
                     (rule "applyEq" (formula "36") (term "0,0,1,1,0,0,1,1,1,0,0,1,0") (ifseqformula "21"))
                     (rule "times_zero_2" (formula "36") (term "0,1,1,0,0,1,1,1,0,0,1,0"))
                     (rule "add_zero_left" (formula "36") (term "1,1,0,0,1,1,1,0,0,1,0"))
                     (rule "polySimp_addComm1" (formula "36") (term "1,1,0,0,1,0"))
                     (rule "applyEqRigid" (formula "30") (term "0,0,1,1,0,0,0") (ifseqformula "21"))
                     (rule "times_zero_2" (formula "30") (term "0,1,1,0,0,0"))
                     (rule "add_zero_left" (formula "30") (term "1,1,0,0,0"))
                     (rule "applyEqRigid" (formula "12") (term "0,0,1,1,0,0,0") (ifseqformula "21"))
                     (rule "times_zero_2" (formula "12") (term "0,1,1,0,0,0"))
                     (rule "add_zero_left" (formula "12") (term "1,1,0,0,0"))
                     (rule "applyEq" (formula "36") (term "0,0,1,1,0,0,1,1,1,0,0") (ifseqformula "21"))
                     (rule "times_zero_2" (formula "36") (term "0,1,1,0,0,1,1,1,0,0"))
                     (rule "add_zero_left" (formula "36") (term "1,1,0,0,1,1,1,0,0"))
                     (rule "polySimp_addComm1" (formula "36") (term "1,1,0,0"))
                     (rule "applyEq" (formula "38") (term "0,0,1,1,0,0,1,1,1,0,0") (ifseqformula "21"))
                     (rule "mul_literals" (formula "38") (term "0,1,1,0,0,1,1,1,0,0"))
                     (rule "add_zero_left" (formula "38") (term "1,1,0,0,1,1,1,0,0"))
                     (rule "polySimp_addComm0" (formula "38") (term "1,1,0,0"))
                     (rule "applyEq" (formula "27") (term "0,0,1,1,0,0,1,1") (ifseqformula "21"))
                     (rule "times_zero_2" (formula "27") (term "0,1,1,0,0,1,1"))
                     (rule "add_zero_left" (formula "27") (term "1,1,0,0,1,1"))
                     (rule "polySimp_addComm0" (formula "27") (term "1"))
                     (rule "applyEq" (formula "37") (term "0,0,1,1,0,0,1,0,0,1,1,1,0") (ifseqformula "21"))
                     (rule "times_zero_2" (formula "37") (term "0,1,1,0,0,1,0,0,1,1,1,0"))
                     (rule "add_zero_left" (formula "37") (term "1,1,0,0,1,0,0,1,1,1,0"))
                     (rule "polySimp_addComm1" (formula "37") (term "0,0,1,1,1,0"))
                     (rule "applyEqRigid" (formula "32") (term "0,0,1,1,1") (ifseqformula "21"))
                     (rule "times_zero_2" (formula "32") (term "0,1,1,1"))
                     (rule "add_zero_left" (formula "32") (term "1,1,1"))
                     (rule "polySimp_addComm0" (formula "32") (term "1"))
                     (rule "applyEqRigid" (formula "37") (term "0,0,1,1,1,1,0,0") (ifseqformula "21"))
                     (rule "times_zero_2" (formula "37") (term "0,1,1,1,1,0,0"))
                     (rule "add_zero_left" (formula "37") (term "1,1,1,1,0,0"))
                     (rule "polySimp_addComm0" (formula "37") (term "1,1,0,0"))
                     (rule "applyEq" (formula "36") (term "0,0,1,1,1,1,0,0,1,0") (ifseqformula "21"))
                     (rule "times_zero_2" (formula "36") (term "0,1,1,1,1,0,0,1,0"))
                     (rule "add_zero_left" (formula "36") (term "1,1,1,1,0,0,1,0"))
                     (rule "polySimp_addComm1" (formula "36") (term "1,1,0,0,1,0"))
                     (rule "applyEqRigid" (formula "35") (term "0,0,1,1,1") (ifseqformula "21"))
                     (rule "times_zero_2" (formula "35") (term "0,1,1,1"))
                     (rule "add_zero_left" (formula "35") (term "1,1,1"))
                     (rule "polySimp_addComm0" (formula "35") (term "1"))
                     (rule "applyEq" (formula "36") (term "0,0,1,1,1,1,0,0") (ifseqformula "21"))
                     (rule "mul_literals" (formula "36") (term "0,1,1,1,1,0,0"))
                     (rule "add_zero_left" (formula "36") (term "1,1,1,1,0,0"))
                     (rule "polySimp_addComm1" (formula "36") (term "1,1,0,0"))
                     (rule "applyEqRigid" (formula "38") (term "0,0,1,1,1,1,0,0") (ifseqformula "21"))
                     (rule "times_zero_2" (formula "38") (term "0,1,1,1,1,0,0"))
                     (rule "add_zero_left" (formula "38") (term "1,1,1,1,0,0"))
                     (rule "polySimp_addComm0" (formula "38") (term "1,1,0,0"))
                     (rule "applyEq" (formula "27") (term "0,0,1,1,1") (ifseqformula "21"))
                     (rule "times_zero_2" (formula "27") (term "0,1,1,1"))
                     (rule "add_zero_left" (formula "27") (term "1,1,1"))
                     (rule "polySimp_addComm0" (formula "27") (term "1"))
                     (rule "applyEqRigid" (formula "37") (term "0,0,1,0,1,0,0,1,1,1,0") (ifseqformula "21"))
                     (rule "times_zero_2" (formula "37") (term "0,1,0,1,0,0,1,1,1,0"))
                     (rule "add_zero_left" (formula "37") (term "1,0,1,0,0,1,1,1,0"))
                     (rule "polySimp_addComm1" (formula "37") (term "0,0,1,1,1,0"))
                     (rule "inEqSimp_subsumption0" (formula "26") (ifseqformula "23"))
                     (rule "leq_literals" (formula "26") (term "0"))
                      (builtin "One Step Simplification" (formula "26"))
                     (rule "true_left" (formula "26"))
                     (rule "inEqSimp_subsumption1" (formula "25") (ifseqformula "22"))
                     (rule "leq_literals" (formula "25") (term "0"))
                      (builtin "One Step Simplification" (formula "25"))
                     (rule "true_left" (formula "25"))
                     (rule "inEqSimp_subsumption0" (formula "17") (ifseqformula "16"))
                     (rule "leq_literals" (formula "17") (term "0"))
                      (builtin "One Step Simplification" (formula "17"))
                     (rule "true_left" (formula "17"))
                     (rule "inEqSimp_exactShadow3" (formula "32") (ifseqformula "31"))
                     (rule "polySimp_rightDist" (formula "32") (term "0,0"))
                     (rule "polySimp_mulLiterals" (formula "32") (term "1,0,0"))
                     (rule "polySimp_mulComm0" (formula "32") (term "0,0,0"))
                     (rule "polySimp_addComm1" (formula "32") (term "0"))
                     (rule "polySimp_addComm0" (formula "32") (term "0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "32"))
                     (rule "polySimp_mulComm0" (formula "32") (term "1"))
                     (rule "polySimp_rightDist" (formula "32") (term "1"))
                     (rule "polySimp_mulLiterals" (formula "32") (term "1,1"))
                     (rule "mul_literals" (formula "32") (term "0,1"))
                     (rule "polySimp_elimOne" (formula "32") (term "1,1"))
                     (rule "inEqSimp_exactShadow0" (formula "27") (ifseqformula "12"))
                      (builtin "One Step Simplification" (formula "27"))
                     (rule "greater_literals" (formula "27") (term "0"))
                      (builtin "One Step Simplification" (formula "27"))
                     (rule "polySimp_rightDist" (formula "27") (term "1,0,0"))
                     (rule "mul_literals" (formula "27") (term "0,1,0,0"))
                     (rule "polySimp_rightDist" (formula "27") (term "1,0"))
                     (rule "polySimp_rightDist" (formula "27") (term "0,0"))
                     (rule "mul_literals" (formula "27") (term "0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "27") (term "1,0,0"))
                     (rule "polySimp_rightDist" (formula "27") (term "0,1,0"))
                     (rule "mul_literals" (formula "27") (term "0,0,1,0"))
                     (rule "polySimp_mulLiterals" (formula "27") (term "1,0,1,0"))
                     (rule "polySimp_addAssoc" (formula "27") (term "0"))
                     (rule "polySimp_addComm1" (formula "27") (term "0,0"))
                     (rule "polySimp_pullOutFactor0b" (formula "27") (term "0"))
                     (rule "add_literals" (formula "27") (term "1,1,0"))
                     (rule "times_zero_1" (formula "27") (term "1,0"))
                     (rule "add_zero_right" (formula "27") (term "0"))
                     (rule "polySimp_addAssoc" (formula "27") (term "0"))
                     (rule "add_literals" (formula "27") (term "0,0"))
                     (rule "inEqSimp_sepNegMonomial1" (formula "27"))
                     (rule "polySimp_mulLiterals" (formula "27") (term "0"))
                     (rule "inEqSimp_subsumption4" (formula "27") (ifseqformula "8"))
                     (rule "greater_literals" (formula "27") (term "0,0"))
                      (builtin "One Step Simplification" (formula "27"))
                     (rule "mul_literals" (formula "27") (term "0,0"))
                     (rule "leq_literals" (formula "27") (term "0"))
                      (builtin "One Step Simplification" (formula "27"))
                     (rule "true_left" (formula "27"))
                     (rule "inEqSimp_exactShadow3" (formula "29") (ifseqformula "26"))
                     (rule "polySimp_rightDist" (formula "29") (term "0,0"))
                     (rule "polySimp_mulLiterals" (formula "29") (term "1,0,0"))
                     (rule "polySimp_mulComm0" (formula "29") (term "0,0,0"))
                     (rule "polySimp_addComm1" (formula "29") (term "0"))
                     (rule "polySimp_addComm0" (formula "29") (term "0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "29"))
                     (rule "polySimp_mulComm0" (formula "29") (term "1"))
                     (rule "polySimp_rightDist" (formula "29") (term "1"))
                     (rule "mul_literals" (formula "29") (term "0,1"))
                     (rule "polySimp_mulLiterals" (formula "29") (term "1,1"))
                     (rule "polySimp_elimOne" (formula "29") (term "1,1"))
                     (rule "shift_paren_or" (formula "35") (term "0,0,0"))
                     (rule "shift_paren_or" (formula "34") (term "0,0,0"))
                     (rule "shift_paren_or" (formula "33") (term "0,0,0"))
                     (rule "commute_or" (formula "33") (term "0,0,0,1,0"))
                     (rule "div_axiom" (formula "3") (term "0") (inst "quotient=quotient_1"))
                     (rule "qeq_literals" (formula "3") (term "0,1,1"))
                      (builtin "One Step Simplification" (formula "3"))
                     (rule "mul_literals" (formula "3") (term "1,1,1,1"))
                     (rule "equal_literals" (formula "3") (term "0"))
                      (builtin "One Step Simplification" (formula "3"))
                     (rule "andLeft" (formula "3"))
                     (rule "andLeft" (formula "3"))
                     (rule "polySimp_addAssoc" (formula "5") (term "0,1"))
                     (rule "add_literals" (formula "5") (term "0,0,1"))
                     (rule "polySimp_addComm1" (formula "5") (term "1"))
                     (rule "add_literals" (formula "5") (term "0,1"))
                     (rule "add_zero_left" (formula "5") (term "1"))
                     (rule "inEqSimp_commuteGeq" (formula "5"))
                     (rule "inEqSimp_homoInEq0" (formula "4"))
                     (rule "polySimp_mulLiterals" (formula "4") (term "1,0"))
                     (rule "polySimp_addComm1" (formula "4") (term "0"))
                     (rule "applyEq" (formula "7") (term "0,1,0,2,0") (ifseqformula "3"))
                     (rule "polySimp_addComm0" (formula "7") (term "0,2,0"))
                     (rule "applyEq" (formula "6") (term "0") (ifseqformula "3"))
                     (rule "inEqSimp_homoInEq1" (formula "6"))
                     (rule "polySimp_addComm1" (formula "6") (term "0"))
                     (rule "applyEq" (formula "2") (term "1") (ifseqformula "3"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "4"))
                     (rule "polySimp_mulComm0" (formula "4") (term "1"))
                     (rule "polySimp_rightDist" (formula "4") (term "1"))
                     (rule "polySimp_mulLiterals" (formula "4") (term "1,1"))
                     (rule "mul_literals" (formula "4") (term "0,1"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "6"))
                     (rule "polySimp_mulComm0" (formula "6") (term "1"))
                     (rule "polySimp_rightDist" (formula "6") (term "1"))
                     (rule "polySimp_mulLiterals" (formula "6") (term "1,1"))
                     (rule "mul_literals" (formula "6") (term "0,1"))
                     (rule "polySimp_elimOne" (formula "6") (term "1,1"))
                     (rule "inEqSimp_exactShadow3" (formula "21") (ifseqformula "6"))
                     (rule "times_zero_1" (formula "21") (term "0,0"))
                     (rule "add_zero_left" (formula "21") (term "0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "21"))
                     (rule "mul_literals" (formula "21") (term "1"))
                     (rule "inEqSimp_exactShadow3" (formula "22") (ifseqformula "5"))
                     (rule "times_zero_1" (formula "22") (term "0,0"))
                     (rule "add_zero_left" (formula "22") (term "0"))
                     (rule "inEqSimp_subsumption6" (formula "22") (ifseqformula "21"))
                     (rule "greater_literals" (formula "22") (term "0,0"))
                      (builtin "One Step Simplification" (formula "22"))
                     (rule "mul_literals" (formula "22") (term "1,0"))
                     (rule "leq_literals" (formula "22") (term "0"))
                      (builtin "One Step Simplification" (formula "22"))
                     (rule "true_left" (formula "22"))
                     (rule "inEqSimp_exactShadow3" (formula "4") (ifseqformula "11"))
                     (rule "polySimp_rightDist" (formula "4") (term "0,0"))
                     (rule "mul_literals" (formula "4") (term "0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "4") (term "1,0,0"))
                     (rule "polySimp_addComm1" (formula "4") (term "0"))
                     (rule "add_literals" (formula "4") (term "0,0"))
                     (rule "inEqSimp_sepNegMonomial1" (formula "4"))
                     (rule "polySimp_mulLiterals" (formula "4") (term "0"))
                     (rule "elimGcdLeq_antec" (formula "4") (inst "elimGcdRightDiv=Z(3(2(8(1(4(7(3(7(0(1(#)))))))))))") (inst "elimGcdLeftDiv=quotient_1") (inst "elimGcd=Z(2(#))"))
                     (rule "leq_literals" (formula "4") (term "0,0"))
                      (builtin "One Step Simplification" (formula "4"))
                     (rule "polySimp_mulLiterals" (formula "4") (term "1,0,0"))
                     (rule "neg_literal" (formula "4") (term "0,0,0,0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "4") (term "1,0,0,0,0,0"))
                     (rule "mul_literals" (formula "4") (term "1,0,0,0,0,0"))
                     (rule "polySimp_addLiterals" (formula "4") (term "0,0,0,0"))
                     (rule "add_literals" (formula "4") (term "0,0,0,0"))
                     (rule "polySimp_pullOutFactor0b" (formula "4") (term "0,0"))
                     (rule "add_literals" (formula "4") (term "1,1,0,0"))
                     (rule "times_zero_1" (formula "4") (term "1,0,0"))
                     (rule "add_zero_right" (formula "4") (term "0,0"))
                     (rule "qeq_literals" (formula "4") (term "0"))
                      (builtin "One Step Simplification" (formula "4"))
                     (rule "inEqSimp_exactShadow3" (formula "5") (ifseqformula "7"))
                     (rule "polySimp_rightDist" (formula "5") (term "0,0"))
                     (rule "mul_literals" (formula "5") (term "0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "5") (term "1,0,0"))
                     (rule "polySimp_addAssoc" (formula "5") (term "0"))
                     (rule "polySimp_addComm1" (formula "5") (term "0,0"))
                     (rule "add_literals" (formula "5") (term "0,0,0"))
                     (rule "polySimp_pullOutFactor2b" (formula "5") (term "0"))
                     (rule "add_literals" (formula "5") (term "1,1,0"))
                     (rule "inEqSimp_sepNegMonomial1" (formula "5"))
                     (rule "polySimp_mulLiterals" (formula "5") (term "0"))
                     (rule "polySimp_elimOne" (formula "5") (term "0"))
                     (rule "inEqSimp_contradInEq0" (formula "23") (ifseqformula "5"))
                     (rule "qeq_literals" (formula "23") (term "0"))
                      (builtin "One Step Simplification" (formula "23"))
                     (rule "closeFalse" (formula "23"))
                  )
               )
               (branch "CUT: self.sorted_splitters[b] >= value FALSE"
                   (builtin "One Step Simplification" (formula "15"))
                  (rule "inEqSimp_geqRight" (formula "31"))
                  (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                  (rule "applyEq" (formula "26") (term "0") (ifseqformula "16"))
                  (rule "inEqSimp_homoInEq1" (formula "26"))
                  (rule "polySimp_mulComm0" (formula "26") (term "1,0"))
                  (rule "polySimp_rightDist" (formula "26") (term "1,0"))
                  (rule "mul_literals" (formula "26") (term "0,1,0"))
                  (rule "polySimp_addAssoc" (formula "26") (term "0"))
                  (rule "add_literals" (formula "26") (term "0,0"))
                  (rule "applyEq" (formula "14") (term "0") (ifseqformula "16"))
                  (rule "inEqSimp_homoInEq1" (formula "14"))
                  (rule "polySimp_pullOutFactor1" (formula "14") (term "0"))
                  (rule "add_literals" (formula "14") (term "1,0"))
                  (rule "times_zero_1" (formula "14") (term "0"))
                  (rule "leq_literals" (formula "14"))
                  (rule "true_left" (formula "14"))
                  (rule "applyEq" (formula "29") (term "1,1,1,1,0") (ifseqformula "15"))
                  (rule "polySimp_addAssoc" (formula "29") (term "1,1,1,0"))
                  (rule "add_literals" (formula "29") (term "0,1,1,1,0"))
                  (rule "add_zero_left" (formula "29") (term "1,1,1,0"))
                  (rule "applyEq" (formula "29") (term "1,1,0,0,0") (ifseqformula "15"))
                  (rule "applyEq" (formula "30") (term "1,1,0,0,0") (ifseqformula "15"))
                  (rule "applyEq" (formula "28") (term "1,1,1,0,0,0,1,0") (ifseqformula "15"))
                  (rule "polySimp_addAssoc" (formula "28") (term "1,1,0,0,0,1,0"))
                  (rule "add_literals" (formula "28") (term "0,1,1,0,0,0,1,0"))
                  (rule "add_zero_left" (formula "28") (term "1,1,0,0,0,1,0"))
                  (rule "applyEq" (formula "26") (term "1") (ifseqformula "15"))
                  (rule "applyEq" (formula "27") (term "1") (ifseqformula "15"))
                  (rule "applyEq" (formula "28") (term "1,1,1,0,0,0") (ifseqformula "15"))
                  (rule "polySimp_addAssoc" (formula "28") (term "1,1,0,0,0"))
                  (rule "add_literals" (formula "28") (term "0,1,1,0,0,0"))
                  (rule "add_zero_left" (formula "28") (term "1,1,0,0,0"))
                  (rule "applyEq" (formula "24") (term "1,1") (ifseqformula "15"))
                  (rule "polySimp_addAssoc" (formula "24") (term "1"))
                  (rule "add_literals" (formula "24") (term "0,1"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                  (rule "polySimp_mulComm0" (formula "1") (term "1"))
                  (rule "polySimp_rightDist" (formula "1") (term "1"))
                  (rule "mul_literals" (formula "1") (term "0,1"))
                  (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                  (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "25"))
                  (rule "polySimp_mulLiterals" (formula "25") (term "0"))
                  (rule "polySimp_elimOne" (formula "25") (term "0"))
                  (rule "inEqSimp_subsumption1" (formula "19") (ifseqformula "25"))
                  (rule "leq_literals" (formula "19") (term "0"))
                   (builtin "One Step Simplification" (formula "19"))
                  (rule "true_left" (formula "19"))
                  (rule "Definition_axiom_for_pi_in_de_wiesler_Tree" (formula "29") (term "1,0,2,0,1,0"))
                  (rule "translateJavaSubInt" (formula "29") (term "0,1,1,1,0,2,0,1,0"))
                  (rule "polySimp_elimSub" (formula "29") (term "1,0,0,1,0,2,0,1,0"))
                  (rule "polySimp_elimSub" (formula "29") (term "1,1,1,0,2,0,1,0"))
                  (rule "polySimp_elimSub" (formula "29") (term "0,1,1,1,0,2,0,1,0"))
                  (rule "mul_literals" (formula "29") (term "1,0,1,1,1,0,2,0,1,0"))
                  (rule "polySimp_mulComm0" (formula "29") (term "1,0,2,0,1,0"))
                  (rule "polySimp_addComm0" (formula "29") (term "0,1,0,1,0,2,0,1,0"))
                  (rule "polySimp_rightDist" (formula "29") (term "0,1,1,0,2,0,1,0"))
                  (rule "polySimp_mulLiterals" (formula "29") (term "1,0,1,1,0,2,0,1,0"))
                  (rule "polySimp_mulComm0" (formula "29") (term "0,0,1,1,0,2,0,1,0"))
                  (rule "polySimp_addComm1" (formula "29") (term "1,1,0,2,0,1,0"))
                  (rule "polySimp_addComm0" (formula "29") (term "0,1,1,0,2,0,1,0"))
                  (rule "polySimp_rightDist" (formula "29") (term "1,0,2,0,1,0"))
                  (rule "polySimp_mulComm1" (formula "29") (term "1,1,0,2,0,1,0"))
                  (rule "polySimp_mulComm0" (formula "29") (term "0,1,1,0,2,0,1,0"))
                  (rule "polySimp_rightDist" (formula "29") (term "0,1,0,2,0,1,0"))
                  (rule "polySimp_elimOne" (formula "29") (term "0,0,1,0,2,0,1,0"))
                  (rule "polySimp_mulComm1" (formula "29") (term "1,0,1,0,2,0,1,0"))
                  (rule "polySimp_mulComm0" (formula "29") (term "0,1,0,1,0,2,0,1,0"))
                  (rule "polySimp_addAssoc" (formula "29") (term "0,2,0,1,0"))
                  (rule "polySimp_addAssoc" (formula "29") (term "0,0,2,0,1,0"))
                  (rule "Definition_axiom_for_pi_in_de_wiesler_Tree" (formula "28") (term "0,1,1,0"))
                  (rule "translateJavaSubInt" (formula "28") (term "0,1,1,0,1,1,0"))
                  (rule "polySimp_elimSub" (formula "28") (term "1,0,0,0,1,1,0"))
                  (rule "polySimp_elimSub" (formula "28") (term "1,1,0,1,1,0"))
                  (rule "polySimp_elimSub" (formula "28") (term "0,1,1,0,1,1,0"))
                  (rule "mul_literals" (formula "28") (term "1,0,1,1,0,1,1,0"))
                  (rule "polySimp_mulComm0" (formula "28") (term "0,1,1,0"))
                  (rule "polySimp_addComm0" (formula "28") (term "0,1,0,0,1,1,0"))
                  (rule "polySimp_rightDist" (formula "28") (term "0,1,0,1,1,0"))
                  (rule "polySimp_mulLiterals" (formula "28") (term "1,0,1,0,1,1,0"))
                  (rule "polySimp_mulComm0" (formula "28") (term "0,0,1,0,1,1,0"))
                  (rule "polySimp_addComm1" (formula "28") (term "1,0,1,1,0"))
                  (rule "polySimp_addComm0" (formula "28") (term "0,1,0,1,1,0"))
                  (rule "polySimp_rightDist" (formula "28") (term "0,1,1,0"))
                  (rule "polySimp_mulComm1" (formula "28") (term "1,0,1,1,0"))
                  (rule "polySimp_mulComm0" (formula "28") (term "0,1,0,1,1,0"))
                  (rule "polySimp_rightDist" (formula "28") (term "0,0,1,1,0"))
                  (rule "polySimp_elimOne" (formula "28") (term "0,0,0,1,1,0"))
                  (rule "polySimp_mulComm1" (formula "28") (term "1,0,0,1,1,0"))
                  (rule "polySimp_mulComm0" (formula "28") (term "0,1,0,0,1,1,0"))
                  (rule "inEqSimp_homoInEq0" (formula "28") (term "1,1,0"))
                  (rule "polySimp_mulComm0" (formula "28") (term "1,0,1,1,0"))
                  (rule "polySimp_rightDist" (formula "28") (term "1,0,1,1,0"))
                  (rule "polySimp_mulLiterals" (formula "28") (term "1,1,0,1,1,0"))
                  (rule "polySimp_rightDist" (formula "28") (term "0,1,0,1,1,0"))
                  (rule "polySimp_mulLiterals" (formula "28") (term "1,0,1,0,1,1,0"))
                  (rule "polySimp_mulComm0" (formula "28") (term "0,0,1,0,1,1,0"))
                  (rule "polySimp_addAssoc" (formula "28") (term "0,1,1,0"))
                  (rule "polySimp_addAssoc" (formula "28") (term "0,0,1,1,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "28") (term "1,1,0"))
                  (rule "polySimp_mulComm0" (formula "28") (term "1,1,1,0"))
                  (rule "polySimp_rightDist" (formula "28") (term "1,1,1,0"))
                  (rule "polySimp_mulLiterals" (formula "28") (term "1,1,1,1,0"))
                  (rule "polySimp_rightDist" (formula "28") (term "0,1,1,1,0"))
                  (rule "polySimp_mulLiterals" (formula "28") (term "1,0,1,1,1,0"))
                  (rule "polySimp_elimOne" (formula "28") (term "1,0,1,1,1,0"))
                  (rule "polySimp_mulComm0" (formula "28") (term "0,0,1,1,1,0"))
                  (rule "Definition_axiom_for_pi_in_de_wiesler_Tree" (formula "28") (term "0,0,1,0"))
                  (rule "translateJavaSubInt" (formula "28") (term "0,1,1,0,0,1,0"))
                  (rule "polySimp_elimSub" (formula "28") (term "1,0,0,0,0,1,0"))
                  (rule "polySimp_elimSub" (formula "28") (term "1,1,0,0,1,0"))
                  (rule "polySimp_elimSub" (formula "28") (term "0,1,1,0,0,1,0"))
                  (rule "mul_literals" (formula "28") (term "1,0,1,1,0,0,1,0"))
                  (rule "polySimp_mulComm0" (formula "28") (term "0,0,1,0"))
                  (rule "polySimp_addComm0" (formula "28") (term "0,1,0,0,0,1,0"))
                  (rule "polySimp_rightDist" (formula "28") (term "0,1,0,0,1,0"))
                  (rule "polySimp_mulLiterals" (formula "28") (term "1,0,1,0,0,1,0"))
                  (rule "polySimp_mulComm0" (formula "28") (term "0,0,1,0,0,1,0"))
                  (rule "polySimp_addComm1" (formula "28") (term "1,0,0,1,0"))
                  (rule "polySimp_addComm0" (formula "28") (term "0,1,0,0,1,0"))
                  (rule "polySimp_rightDist" (formula "28") (term "0,0,1,0"))
                  (rule "polySimp_mulComm1" (formula "28") (term "1,0,0,1,0"))
                  (rule "polySimp_mulComm0" (formula "28") (term "0,1,0,0,1,0"))
                  (rule "polySimp_rightDist" (formula "28") (term "0,0,0,1,0"))
                  (rule "polySimp_elimOne" (formula "28") (term "0,0,0,0,1,0"))
                  (rule "polySimp_mulComm1" (formula "28") (term "1,0,0,0,1,0"))
                  (rule "polySimp_mulComm0" (formula "28") (term "0,1,0,0,0,1,0"))
                  (rule "inEqSimp_homoInEq1" (formula "28") (term "0,1,0"))
                  (rule "polySimp_mulComm0" (formula "28") (term "1,0,0,1,0"))
                  (rule "polySimp_rightDist" (formula "28") (term "1,0,0,1,0"))
                  (rule "polySimp_mulLiterals" (formula "28") (term "1,1,0,0,1,0"))
                  (rule "polySimp_rightDist" (formula "28") (term "0,1,0,0,1,0"))
                  (rule "polySimp_mulLiterals" (formula "28") (term "1,0,1,0,0,1,0"))
                  (rule "polySimp_mulComm0" (formula "28") (term "0,0,1,0,0,1,0"))
                  (rule "polySimp_addAssoc" (formula "28") (term "0,0,1,0"))
                  (rule "polySimp_addAssoc" (formula "28") (term "0,0,0,1,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "28") (term "0,1,0"))
                  (rule "polySimp_mulComm0" (formula "28") (term "1,0,1,0"))
                  (rule "polySimp_rightDist" (formula "28") (term "1,0,1,0"))
                  (rule "polySimp_mulLiterals" (formula "28") (term "1,1,0,1,0"))
                  (rule "polySimp_rightDist" (formula "28") (term "0,1,0,1,0"))
                  (rule "mul_literals" (formula "28") (term "0,0,1,0,1,0"))
                  (rule "polySimp_mulLiterals" (formula "28") (term "1,0,1,0,1,0"))
                  (rule "polySimp_elimOne" (formula "28") (term "1,0,1,0,1,0"))
                  (rule "cut_direct" (formula "14") (term "1"))
                  (branch "CUT: self.sorted_splitters[b + d * -1] <= -1 + value TRUE"
                      (builtin "One Step Simplification" (formula "15"))
                     (rule "true_left" (formula "15"))
                     (rule "commute_or" (formula "29") (term "1,0,0"))
                     (rule "commute_or" (formula "28") (term "1,0,0"))
                     (rule "commute_or" (formula "27") (term "1,0,0"))
                     (rule "arrayLengthIsAnInt" (formula "25") (term "0"))
                     (rule "expand_inInt" (formula "25"))
                     (rule "replace_int_MAX" (formula "25") (term "1,0"))
                     (rule "replace_int_MIN" (formula "25") (term "0,1"))
                     (rule "andLeft" (formula "25"))
                     (rule "inEqSimp_commuteLeq" (formula "26"))
                     (rule "inEqSimp_exactShadow3" (formula "27") (ifseqformula "25"))
                     (rule "polySimp_rightDist" (formula "27") (term "0,0"))
                     (rule "mul_literals" (formula "27") (term "0,0,0"))
                     (rule "polySimp_addComm1" (formula "27") (term "0"))
                     (rule "add_literals" (formula "27") (term "0,0"))
                     (rule "inEqSimp_sepNegMonomial1" (formula "27"))
                     (rule "polySimp_mulLiterals" (formula "27") (term "0"))
                     (rule "polySimp_elimOne" (formula "27") (term "0"))
                     (rule "inEqSimp_subsumption0" (formula "8") (ifseqformula "27"))
                     (rule "leq_literals" (formula "8") (term "0"))
                      (builtin "One Step Simplification" (formula "8"))
                     (rule "true_left" (formula "8"))
                     (rule "arrayLengthNotNegative" (formula "27") (term "0"))
                     (rule "inEqSimp_subsumption1" (formula "25") (ifseqformula "27"))
                     (rule "leq_literals" (formula "25") (term "0"))
                      (builtin "One Step Simplification" (formula "25"))
                     (rule "true_left" (formula "25"))
                     (rule "commute_or" (formula "29") (term "1,0,0,1,0"))
                     (rule "arrayLengthNotNegative" (formula "28") (term "0"))
                     (rule "arrayLengthIsAnInt" (formula "29") (term "0"))
                     (rule "expand_inInt" (formula "29"))
                     (rule "replace_int_MAX" (formula "29") (term "1,0"))
                     (rule "replace_int_MIN" (formula "29") (term "0,1"))
                     (rule "andLeft" (formula "29"))
                     (rule "inEqSimp_commuteLeq" (formula "30"))
                     (rule "inEqSimp_subsumption1" (formula "30") (ifseqformula "28"))
                     (rule "leq_literals" (formula "30") (term "0"))
                      (builtin "One Step Simplification" (formula "30"))
                     (rule "true_left" (formula "30"))
                     (rule "inEqSimp_exactShadow3" (formula "30") (ifseqformula "29"))
                     (rule "polySimp_rightDist" (formula "30") (term "0,0"))
                     (rule "mul_literals" (formula "30") (term "0,0,0"))
                     (rule "polySimp_addComm1" (formula "30") (term "0"))
                     (rule "add_literals" (formula "30") (term "0,0"))
                     (rule "inEqSimp_sepNegMonomial1" (formula "30"))
                     (rule "polySimp_mulLiterals" (formula "30") (term "0"))
                     (rule "polySimp_elimOne" (formula "30") (term "0"))
                     (rule "div_axiom" (formula "22") (term "0,0,0,1,0,0") (inst "quotient=quotient_0"))
                     (rule "equal_literals" (formula "22") (term "0"))
                      (builtin "One Step Simplification" (formula "22"))
                     (rule "mul_literals" (formula "22") (term "1,1,1,1"))
                     (rule "qeq_literals" (formula "22") (term "0,1"))
                      (builtin "One Step Simplification" (formula "22"))
                     (rule "andLeft" (formula "22"))
                     (rule "andLeft" (formula "22"))
                     (rule "polySimp_addComm1" (formula "24") (term "1"))
                     (rule "add_literals" (formula "24") (term "0,1"))
                     (rule "inEqSimp_commuteLeq" (formula "23"))
                     (rule "inEqSimp_homoInEq1" (formula "24"))
                     (rule "polySimp_mulLiterals" (formula "24") (term "1,0"))
                     (rule "polySimp_addComm1" (formula "24") (term "0"))
                     (rule "applyEq" (formula "25") (term "0,1,1,2,1,0,0") (ifseqformula "22"))
                     (rule "polySimp_addComm0" (formula "25") (term "1,2,1,0,0"))
                     (rule "applyEq" (formula "25") (term "0,0,0,1,0,0") (ifseqformula "22"))
                     (rule "inEqSimp_homoInEq1" (formula "25") (term "0,1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "25") (term "1,0,0,1,0,0"))
                     (rule "polySimp_addComm1" (formula "25") (term "0,0,1,0,0"))
                     (rule "applyEq" (formula "25") (term "0,1,1,1,1,1,0,0") (ifseqformula "22"))
                     (rule "polySimp_addComm0" (formula "25") (term "1,1,1,1,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "24"))
                     (rule "polySimp_mulComm0" (formula "24") (term "1"))
                     (rule "polySimp_rightDist" (formula "24") (term "1"))
                     (rule "polySimp_mulLiterals" (formula "24") (term "1,1"))
                     (rule "mul_literals" (formula "24") (term "0,1"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "0,1,0,0"))
                     (rule "polySimp_mulComm0" (formula "25") (term "1,0,1,0,0"))
                     (rule "polySimp_rightDist" (formula "25") (term "1,0,1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "25") (term "1,1,0,1,0,0"))
                     (rule "mul_literals" (formula "25") (term "0,1,0,1,0,0"))
                     (rule "inEqSimp_contradInEq1" (formula "25") (term "0,1,0,0") (ifseqformula "23"))
                     (rule "inEqSimp_homoInEq1" (formula "25") (term "0,0,1,0,0"))
                     (rule "polySimp_mulComm0" (formula "25") (term "1,0,0,0,1,0,0"))
                     (rule "polySimp_rightDist" (formula "25") (term "1,0,0,0,1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "25") (term "1,1,0,0,0,1,0,0"))
                     (rule "mul_literals" (formula "25") (term "0,1,0,0,0,1,0,0"))
                     (rule "polySimp_addAssoc" (formula "25") (term "0,0,0,1,0,0"))
                     (rule "polySimp_addComm0" (formula "25") (term "0,0,0,0,1,0,0"))
                     (rule "polySimp_pullOutFactor0b" (formula "25") (term "0,0,0,1,0,0"))
                     (rule "add_literals" (formula "25") (term "1,1,0,0,0,1,0,0"))
                     (rule "times_zero_1" (formula "25") (term "1,0,0,0,1,0,0"))
                     (rule "add_zero_right" (formula "25") (term "0,0,0,1,0,0"))
                     (rule "leq_literals" (formula "25") (term "0,0,1,0,0"))
                      (builtin "One Step Simplification" (formula "25"))
                     (rule "mod_axiom" (formula "25") (term "0"))
                     (rule "polySimp_mulLiterals" (formula "25") (term "1,0"))
                     (rule "polySimp_homoEq" (formula "25"))
                     (rule "polySimp_mulComm0" (formula "25") (term "1,0"))
                     (rule "polySimp_rightDist" (formula "25") (term "1,0"))
                     (rule "polySimp_mulLiterals" (formula "25") (term "1,1,0"))
                     (rule "polySimp_rightDist" (formula "25") (term "0,1,0"))
                     (rule "mul_literals" (formula "25") (term "0,0,1,0"))
                     (rule "polySimp_addAssoc" (formula "25") (term "0"))
                     (rule "polySimp_addAssoc" (formula "25") (term "0,0"))
                     (rule "polySimp_addComm1" (formula "25") (term "0,0,0"))
                     (rule "add_literals" (formula "25") (term "0,0,0,0"))
                     (rule "polySimp_sepPosMonomial" (formula "25"))
                     (rule "polySimp_mulComm0" (formula "25") (term "1"))
                     (rule "polySimp_rightDist" (formula "25") (term "1"))
                     (rule "polySimp_mulLiterals" (formula "25") (term "1,1"))
                     (rule "polySimp_elimOne" (formula "25") (term "1,1"))
                     (rule "polySimp_rightDist" (formula "25") (term "0,1"))
                     (rule "mul_literals" (formula "25") (term "0,0,1"))
                     (rule "newSym_eq" (formula "25") (inst "l=l_0") (inst "newSymDef=add(add(Z(0(#)), mul(b, Z(0(#)))),
    mul(pow(Z(2(#)),
            add(mul(quotient_0, Z(neglit(2(3(#))))),
                int::final(self,
                           de.wiesler.Tree::$log_buckets))),
        Z(0(#))))"))
                     (rule "times_zero_1" (formula "25") (term "1,1,1"))
                     (rule "add_zero_left" (formula "25") (term "0,1,1"))
                     (rule "add_zero_right" (formula "25") (term "1,1"))
                     (rule "times_zero_1" (formula "25") (term "1,1"))
                     (rule "add_zero_right" (formula "25") (term "1"))
                     (rule "applyEq" (formula "26") (term "0,0") (ifseqformula "25"))
                     (rule "polySimp_homoEq" (formula "26"))
                     (rule "polySimp_mulLiterals" (formula "26") (term "1,0"))
                     (rule "polySimp_addComm1" (formula "26") (term "0"))
                     (rule "polySimp_addComm1" (formula "26") (term "0,0"))
                     (rule "polySimp_sepPosMonomial" (formula "26"))
                     (rule "polySimp_mulComm0" (formula "26") (term "1"))
                     (rule "polySimp_rightDist" (formula "26") (term "1"))
                     (rule "polySimp_mulLiterals" (formula "26") (term "1,1"))
                     (rule "polySimp_elimOne" (formula "26") (term "1,1"))
                     (rule "polySimp_rightDist" (formula "26") (term "0,1"))
                     (rule "polySimp_mulLiterals" (formula "26") (term "1,0,1"))
                     (rule "mul_literals" (formula "26") (term "0,0,1"))
                     (rule "applyEq" (formula "25") (term "1,0,0") (ifseqformula "26"))
                     (rule "polySimp_addAssoc" (formula "25") (term "0,0"))
                     (rule "polySimp_addAssoc" (formula "25") (term "0,0,0"))
                     (rule "add_literals" (formula "25") (term "0,0,0,0"))
                     (rule "polyDiv_pullOut" (formula "25") (term "0") (inst "polyDivCoeff=l_0"))
                     (rule "polySimp_mulLiterals" (formula "25") (term "1,0,0,2,0"))
                     (rule "equal_literals" (formula "25") (term "0,0"))
                      (builtin "One Step Simplification" (formula "25"))
                     (rule "polySimp_homoEq" (formula "25"))
                     (rule "polySimp_mulComm0" (formula "25") (term "1,0"))
                     (rule "polySimp_addComm0" (formula "25") (term "1,1,0"))
                     (rule "polySimp_addComm1" (formula "25") (term "0,1,1,1,0"))
                     (rule "polySimp_pullOutFactor0b" (formula "25") (term "0,0,1,1,1,0"))
                     (rule "add_literals" (formula "25") (term "1,1,0,0,1,1,1,0"))
                     (rule "times_zero_1" (formula "25") (term "1,0,0,1,1,1,0"))
                     (rule "add_literals" (formula "25") (term "0,0,1,1,1,0"))
                     (rule "polySimp_rightDist" (formula "25") (term "1,0"))
                     (rule "polySimp_mulComm0" (formula "25") (term "0,1,0"))
                     (rule "polySimp_addAssoc" (formula "25") (term "0"))
                     (rule "polySimp_pullOutFactor1" (formula "25") (term "0,0"))
                     (rule "add_literals" (formula "25") (term "1,0,0"))
                     (rule "times_zero_1" (formula "25") (term "0,0"))
                     (rule "add_zero_left" (formula "25") (term "0"))
                     (rule "polySimp_invertEq" (formula "25"))
                     (rule "polySimp_mulLiterals" (formula "25") (term "0"))
                     (rule "times_zero_2" (formula "25") (term "1"))
                     (rule "polySimp_elimOne" (formula "25") (term "0"))
                     (rule "polyDiv_pullOut" (formula "25") (term "0") (inst "polyDivCoeff=Z(1(#))"))
                     (rule "polySimp_mulLiterals" (formula "25") (term "1,0,0,2,0"))
                     (rule "equal_literals" (formula "25") (term "0,0"))
                      (builtin "One Step Simplification" (formula "25"))
                     (rule "mul_literals" (formula "25") (term "1,0,0,0"))
                     (rule "polySimp_addComm1" (formula "25") (term "0,0,0"))
                     (rule "add_literals" (formula "25") (term "0,0,0,0"))
                     (rule "polySimp_addComm0" (formula "25") (term "0"))
                     (rule "polySimp_sepPosMonomial" (formula "25"))
                     (rule "mul_literals" (formula "25") (term "1"))
                     (rule "inEqSimp_exactShadow3" (formula "23") (ifseqformula "21"))
                     (rule "polySimp_mulAssoc" (formula "23") (term "0,0"))
                     (rule "polySimp_mulComm0" (formula "23") (term "0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "23") (term "0,0"))
                     (rule "polySimp_addComm0" (formula "23") (term "0"))
                     (rule "inEqSimp_sepNegMonomial1" (formula "23"))
                     (rule "polySimp_mulLiterals" (formula "23") (term "0"))
                     (rule "elimGcdLeq_antec" (formula "23") (inst "elimGcdRightDiv=Z(0(#))") (inst "elimGcdLeftDiv=quotient_0") (inst "elimGcd=Z(2(3(#)))"))
                     (rule "polySimp_mulLiterals" (formula "23") (term "1,0,1,0"))
                     (rule "neg_literal" (formula "23") (term "0,0,0,0,0,1,0"))
                     (rule "leq_literals" (formula "23") (term "0,0"))
                      (builtin "One Step Simplification" (formula "23"))
                     (rule "times_zero_1" (formula "23") (term "1,0,0,0,0,0"))
                     (rule "polySimp_addLiterals" (formula "23") (term "0,0,0,0"))
                     (rule "add_literals" (formula "23") (term "0,0,0,0"))
                     (rule "polySimp_pullOutFactor0b" (formula "23") (term "0,0"))
                     (rule "add_literals" (formula "23") (term "1,1,0,0"))
                     (rule "times_zero_1" (formula "23") (term "1,0,0"))
                     (rule "add_zero_right" (formula "23") (term "0,0"))
                     (rule "qeq_literals" (formula "23") (term "0"))
                      (builtin "One Step Simplification" (formula "23"))
                     (rule "inEqSimp_exactShadow3" (formula "20") (ifseqformula "25"))
                     (rule "mul_literals" (formula "20") (term "0,0"))
                     (rule "polySimp_addAssoc" (formula "20") (term "0"))
                     (rule "add_literals" (formula "20") (term "0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "20"))
                     (rule "mul_literals" (formula "20") (term "1"))
                     (rule "elimGcdGeq_antec" (formula "20") (inst "elimGcdRightDiv=Z(0(#))") (inst "elimGcdLeftDiv=quotient_0") (inst "elimGcd=Z(2(3(#)))"))
                     (rule "times_zero_1" (formula "20") (term "1,0,0,0,0,1,0"))
                     (rule "polySimp_mulLiterals" (formula "20") (term "1,0,1,0"))
                     (rule "leq_literals" (formula "20") (term "0,0"))
                      (builtin "One Step Simplification" (formula "20"))
                     (rule "polySimp_addLiterals" (formula "20") (term "0,0,0,0"))
                     (rule "add_literals" (formula "20") (term "0,0,0,0"))
                     (rule "polySimp_pullOutFactor0b" (formula "20") (term "0,0"))
                     (rule "add_literals" (formula "20") (term "1,1,0,0"))
                     (rule "times_zero_1" (formula "20") (term "1,0,0"))
                     (rule "add_zero_right" (formula "20") (term "0,0"))
                     (rule "leq_literals" (formula "20") (term "0"))
                      (builtin "One Step Simplification" (formula "20"))
                     (rule "inEqSimp_exactShadow3" (formula "17") (ifseqformula "26"))
                     (rule "polySimp_rightDist" (formula "17") (term "0,0"))
                     (rule "mul_literals" (formula "17") (term "0,0,0"))
                     (rule "polySimp_addComm1" (formula "17") (term "0"))
                     (rule "polySimp_addAssoc" (formula "17") (term "0,0"))
                     (rule "add_literals" (formula "17") (term "0,0,0"))
                     (rule "inEqSimp_sepNegMonomial1" (formula "17"))
                     (rule "polySimp_mulLiterals" (formula "17") (term "0"))
                     (rule "polySimp_elimOne" (formula "17") (term "0"))
                     (rule "inEqSimp_antiSymm" (formula "21") (ifseqformula "25"))
                     (rule "applyEqRigid" (formula "22") (term "0") (ifseqformula "21"))
                     (rule "qeq_literals" (formula "22"))
                     (rule "true_left" (formula "22"))
                     (rule "applyEqRigid" (formula "27") (term "0,1,1") (ifseqformula "21"))
                     (rule "times_zero_2" (formula "27") (term "1,1"))
                     (rule "add_literals" (formula "27") (term "1"))
                     (rule "applyEq" (formula "17") (term "0,1,1") (ifseqformula "21"))
                     (rule "mul_literals" (formula "17") (term "1,1"))
                     (rule "add_literals" (formula "17") (term "1"))
                     (rule "applyEq" (formula "26") (term "0,1") (ifseqformula "21"))
                     (rule "times_zero_2" (formula "26") (term "1"))
                     (rule "applyEqRigid" (formula "25") (term "0") (ifseqformula "21"))
                     (rule "leq_literals" (formula "25"))
                     (rule "true_left" (formula "25"))
                     (rule "applyEqRigid" (formula "24") (term "1") (ifseqformula "21"))
                     (rule "applyEqRigid" (formula "28") (term "0,0,1,0") (ifseqformula "21"))
                     (rule "times_zero_2" (formula "28") (term "0,1,0"))
                     (rule "add_zero_left" (formula "28") (term "1,0"))
                     (rule "inEqSimp_subsumption0" (formula "26") (ifseqformula "23"))
                     (rule "leq_literals" (formula "26") (term "0"))
                      (builtin "One Step Simplification" (formula "26"))
                     (rule "true_left" (formula "26"))
                     (rule "inEqSimp_subsumption0" (formula "17") (ifseqformula "16"))
                     (rule "leq_literals" (formula "17") (term "0"))
                      (builtin "One Step Simplification" (formula "17"))
                     (rule "true_left" (formula "17"))
                     (rule "inEqSimp_subsumption1" (formula "24") (ifseqformula "21"))
                     (rule "leq_literals" (formula "24") (term "0"))
                      (builtin "One Step Simplification" (formula "24"))
                     (rule "true_left" (formula "24"))
                     (rule "commute_or" (formula "34") (term "0,0,0,1,0"))
                     (rule "commute_or_2" (formula "36") (term "0,0"))
                     (rule "commute_or_2" (formula "35") (term "0,0"))
                     (rule "commute_or_2" (formula "34") (term "0,0"))
                     (rule "div_axiom" (formula "2") (term "1") (inst "quotient=quotient_1"))
                     (rule "mul_literals" (formula "2") (term "1,1,1,1,1"))
                     (rule "qeq_literals" (formula "2") (term "0,1,1"))
                      (builtin "One Step Simplification" (formula "2"))
                     (rule "equal_literals" (formula "2") (term "0"))
                      (builtin "One Step Simplification" (formula "2"))
                     (rule "andLeft" (formula "2"))
                     (rule "andLeft" (formula "2"))
                     (rule "polySimp_addComm1" (formula "4") (term "1"))
                     (rule "add_literals" (formula "4") (term "0,1"))
                     (rule "inEqSimp_commuteLeq" (formula "3"))
                     (rule "inEqSimp_homoInEq1" (formula "4"))
                     (rule "polySimp_mulLiterals" (formula "4") (term "1,0"))
                     (rule "polySimp_addComm1" (formula "4") (term "0"))
                     (rule "applyEq" (formula "6") (term "0") (ifseqformula "2"))
                     (rule "inEqSimp_homoInEq1" (formula "6"))
                     (rule "polySimp_addComm1" (formula "6") (term "0"))
                     (rule "applyEq" (formula "7") (term "0,1,0,2,0") (ifseqformula "2"))
                     (rule "polySimp_addComm0" (formula "7") (term "0,2,0"))
                     (rule "applyEq" (formula "5") (term "1") (ifseqformula "2"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "4"))
                     (rule "polySimp_mulComm0" (formula "4") (term "1"))
                     (rule "polySimp_rightDist" (formula "4") (term "1"))
                     (rule "polySimp_mulLiterals" (formula "4") (term "1,1"))
                     (rule "mul_literals" (formula "4") (term "0,1"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "6"))
                     (rule "polySimp_mulComm0" (formula "6") (term "1"))
                     (rule "polySimp_rightDist" (formula "6") (term "1"))
                     (rule "mul_literals" (formula "6") (term "0,1"))
                     (rule "polySimp_mulLiterals" (formula "6") (term "1,1"))
                     (rule "polySimp_elimOne" (formula "6") (term "1,1"))
                     (rule "inEqSimp_exactShadow3" (formula "29") (ifseqformula "6"))
                     (rule "mul_literals" (formula "29") (term "0,0"))
                     (rule "polySimp_addAssoc" (formula "29") (term "0"))
                     (rule "add_literals" (formula "29") (term "0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "29"))
                     (rule "mul_literals" (formula "29") (term "1"))
                     (rule "inEqSimp_exactShadow3" (formula "21") (ifseqformula "4"))
                     (rule "mul_literals" (formula "21") (term "0,0"))
                     (rule "polySimp_addAssoc" (formula "21") (term "0"))
                     (rule "add_literals" (formula "21") (term "0,0"))
                     (rule "add_zero_left" (formula "21") (term "0"))
                     (rule "inEqSimp_subsumption6" (formula "21") (ifseqformula "30"))
                     (rule "mul_literals" (formula "21") (term "1,1,0"))
                     (rule "greater_literals" (formula "21") (term "0,0"))
                      (builtin "One Step Simplification" (formula "21"))
                     (rule "leq_literals" (formula "21") (term "0"))
                      (builtin "One Step Simplification" (formula "21"))
                     (rule "true_left" (formula "21"))
                     (rule "inEqSimp_exactShadow3" (formula "3") (ifseqformula "11"))
                     (rule "polySimp_mulAssoc" (formula "3") (term "0,0"))
                     (rule "polySimp_mulComm0" (formula "3") (term "0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "3") (term "0,0"))
                     (rule "polySimp_addComm0" (formula "3") (term "0"))
                     (rule "inEqSimp_sepNegMonomial1" (formula "3"))
                     (rule "polySimp_mulLiterals" (formula "3") (term "0"))
                     (rule "elimGcdLeq_antec" (formula "3") (inst "elimGcdRightDiv=Z(3(2(8(1(4(7(3(7(0(1(#)))))))))))") (inst "elimGcdLeftDiv=quotient_1") (inst "elimGcd=Z(2(#))"))
                     (rule "polySimp_mulLiterals" (formula "3") (term "1,0,1,0"))
                     (rule "polySimp_mulLiterals" (formula "3") (term "1,0,0,0,0,1,0"))
                     (rule "neg_literal" (formula "3") (term "0,0,0,0,0,1,0"))
                     (rule "leq_literals" (formula "3") (term "0,0"))
                      (builtin "One Step Simplification" (formula "3"))
                     (rule "mul_literals" (formula "3") (term "1,0,0,0,0,0"))
                     (rule "polySimp_addLiterals" (formula "3") (term "0,0,0,0"))
                     (rule "add_literals" (formula "3") (term "0,0,0,0"))
                     (rule "polySimp_pullOutFactor0b" (formula "3") (term "0,0"))
                     (rule "add_literals" (formula "3") (term "1,1,0,0"))
                     (rule "times_zero_1" (formula "3") (term "1,0,0"))
                     (rule "add_zero_right" (formula "3") (term "0,0"))
                     (rule "qeq_literals" (formula "3") (term "0"))
                      (builtin "One Step Simplification" (formula "3"))
                     (rule "inEqSimp_exactShadow3" (formula "4") (ifseqformula "16"))
                     (rule "polySimp_mulAssoc" (formula "4") (term "0,0"))
                     (rule "polySimp_mulComm0" (formula "4") (term "0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "4") (term "0,0"))
                     (rule "polySimp_addAssoc" (formula "4") (term "0"))
                     (rule "polySimp_addComm0" (formula "4") (term "0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "4"))
                     (rule "polySimp_mulComm0" (formula "4") (term "1"))
                     (rule "polySimp_rightDist" (formula "4") (term "1"))
                     (rule "polySimp_mulLiterals" (formula "4") (term "1,1"))
                     (rule "mul_literals" (formula "4") (term "0,1"))
                     (rule "inEqSimp_exactShadow3" (formula "4") (ifseqformula "8"))
                     (rule "polySimp_rightDist" (formula "4") (term "0,0"))
                     (rule "polySimp_mulLiterals" (formula "4") (term "1,0,0"))
                     (rule "mul_literals" (formula "4") (term "0,0,0"))
                     (rule "polySimp_addAssoc" (formula "4") (term "0"))
                     (rule "polySimp_addComm1" (formula "4") (term "0,0"))
                     (rule "add_literals" (formula "4") (term "0,0,0"))
                     (rule "polySimp_pullOutFactor2b" (formula "4") (term "0"))
                     (rule "add_literals" (formula "4") (term "1,1,0"))
                     (rule "inEqSimp_sepNegMonomial1" (formula "4"))
                     (rule "polySimp_mulLiterals" (formula "4") (term "0"))
                     (rule "polySimp_elimOne" (formula "4") (term "0"))
                     (rule "inEqSimp_contradInEq0" (formula "32") (ifseqformula "4"))
                     (rule "qeq_literals" (formula "32") (term "0"))
                      (builtin "One Step Simplification" (formula "32"))
                     (rule "closeFalse" (formula "32"))
                  )
                  (branch "CUT: self.sorted_splitters[b + d * -1] <= -1 + value FALSE"
                      (builtin "One Step Simplification" (formula "14"))
                     (rule "inEqSimp_leqRight" (formula "30"))
                     (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                     (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                     (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                     (rule "add_literals" (formula "1") (term "0,0,0"))
                     (rule "add_zero_left" (formula "1") (term "0,0"))
                     (rule "applyEq" (formula "1") (term "0,1,0,2,1,0") (ifseqformula "15"))
                     (rule "polySimp_mulComm0" (formula "1") (term "1,0,2,1,0"))
                     (rule "polySimp_rightDist" (formula "1") (term "1,0,2,1,0"))
                     (rule "mul_literals" (formula "1") (term "0,1,0,2,1,0"))
                     (rule "polySimp_addAssoc" (formula "1") (term "0,2,1,0"))
                     (rule "polySimp_addComm0" (formula "1") (term "0,0,2,1,0"))
                     (rule "polySimp_pullOutFactor1b" (formula "1") (term "0,2,1,0"))
                     (rule "add_literals" (formula "1") (term "1,1,0,2,1,0"))
                     (rule "times_zero_1" (formula "1") (term "1,0,2,1,0"))
                     (rule "add_zero_right" (formula "1") (term "0,2,1,0"))
                     (rule "applyEq" (formula "10") (term "0") (ifseqformula "15"))
                     (rule "inEqSimp_homoInEq0" (formula "10"))
                     (rule "polySimp_mulComm0" (formula "10") (term "1,0"))
                     (rule "polySimp_rightDist" (formula "10") (term "1,0"))
                     (rule "mul_literals" (formula "10") (term "0,1,0"))
                     (rule "polySimp_addAssoc" (formula "10") (term "0"))
                     (rule "add_literals" (formula "10") (term "0,0"))
                     (rule "applyEq" (formula "4") (term "0,0") (ifseqformula "15"))
                     (rule "applyEq" (formula "5") (term "0,0,1,0,2,0") (ifseqformula "15"))
                     (rule "applyEq" (formula "3") (term "0,0") (ifseqformula "15"))
                     (rule "eqSymm" (formula "3"))
                     (rule "applyEq" (formula "14") (term "0") (ifseqformula "15"))
                     (rule "inEqSimp_homoInEq0" (formula "14"))
                     (rule "polySimp_pullOutFactor1" (formula "14") (term "0"))
                     (rule "add_literals" (formula "14") (term "1,0"))
                     (rule "times_zero_1" (formula "14") (term "0"))
                     (rule "qeq_literals" (formula "14"))
                     (rule "true_left" (formula "14"))
                     (rule "applyEq" (formula "19") (term "0") (ifseqformula "14"))
                     (rule "inEqSimp_homoInEq1" (formula "19"))
                     (rule "polySimp_mulComm0" (formula "19") (term "1,0"))
                     (rule "polySimp_rightDist" (formula "19") (term "1,0"))
                     (rule "mul_literals" (formula "19") (term "0,1,0"))
                     (rule "polySimp_addAssoc" (formula "19") (term "0"))
                     (rule "add_literals" (formula "19") (term "0,0"))
                     (rule "add_zero_left" (formula "19") (term "0"))
                     (rule "applyEq" (formula "20") (term "1") (ifseqformula "14"))
                     (rule "applyEq" (formula "3") (term "0,0") (ifseqformula "14"))
                     (rule "eqSymm" (formula "3"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                     (rule "polySimp_mulLiterals" (formula "1") (term "1"))
                     (rule "polySimp_elimOne" (formula "1") (term "1"))
                     (rule "inEqSimp_sepNegMonomial1" (formula "10"))
                     (rule "polySimp_mulLiterals" (formula "10") (term "0"))
                     (rule "polySimp_elimOne" (formula "10") (term "0"))
                     (rule "inEqSimp_invertInEq0" (formula "19"))
                     (rule "times_zero_2" (formula "19") (term "1"))
                     (rule "polySimp_mulLiterals" (formula "19") (term "0"))
                     (rule "polySimp_elimOne" (formula "19") (term "0"))
                     (rule "inEqSimp_subsumption0" (formula "9") (ifseqformula "10"))
                     (rule "leq_literals" (formula "9") (term "0"))
                      (builtin "One Step Simplification" (formula "9"))
                     (rule "true_left" (formula "9"))
                     (rule "inEqSimp_subsumption1" (formula "18") (ifseqformula "23"))
                     (rule "leq_literals" (formula "18") (term "0"))
                      (builtin "One Step Simplification" (formula "18"))
                     (rule "true_left" (formula "18"))
                     (rule "commute_or" (formula "27") (term "1,0,0"))
                     (rule "commute_or" (formula "26") (term "1,0,0"))
                     (rule "commute_or" (formula "25") (term "1,0,0"))
                     (rule "arrayLengthIsAnInt" (formula "23") (term "0"))
                     (rule "expand_inInt" (formula "23"))
                     (rule "replace_int_MIN" (formula "23") (term "0,1"))
                     (rule "replace_int_MAX" (formula "23") (term "1,0"))
                     (rule "andLeft" (formula "23"))
                     (rule "inEqSimp_commuteLeq" (formula "24"))
                     (rule "inEqSimp_exactShadow3" (formula "25") (ifseqformula "23"))
                     (rule "polySimp_rightDist" (formula "25") (term "0,0"))
                     (rule "mul_literals" (formula "25") (term "0,0,0"))
                     (rule "polySimp_addComm1" (formula "25") (term "0"))
                     (rule "add_literals" (formula "25") (term "0,0"))
                     (rule "inEqSimp_sepNegMonomial1" (formula "25"))
                     (rule "polySimp_mulLiterals" (formula "25") (term "0"))
                     (rule "polySimp_elimOne" (formula "25") (term "0"))
                     (rule "arrayLengthNotNegative" (formula "25") (term "0"))
                     (rule "inEqSimp_subsumption1" (formula "24") (ifseqformula "25"))
                     (rule "leq_literals" (formula "24") (term "0"))
                      (builtin "One Step Simplification" (formula "24"))
                     (rule "true_left" (formula "24"))
                     (rule "commute_or" (formula "27") (term "1,0,0,1,0"))
                     (rule "arrayLengthIsAnInt" (formula "26") (term "0"))
                     (rule "expand_inInt" (formula "26"))
                     (rule "replace_int_MAX" (formula "26") (term "1,0"))
                     (rule "replace_int_MIN" (formula "26") (term "0,1"))
                     (rule "andLeft" (formula "26"))
                     (rule "inEqSimp_commuteLeq" (formula "27"))
                     (rule "inEqSimp_exactShadow3" (formula "28") (ifseqformula "26"))
                     (rule "polySimp_rightDist" (formula "28") (term "0,0"))
                     (rule "mul_literals" (formula "28") (term "0,0,0"))
                     (rule "polySimp_addComm1" (formula "28") (term "0"))
                     (rule "add_literals" (formula "28") (term "0,0"))
                     (rule "inEqSimp_sepNegMonomial1" (formula "28"))
                     (rule "polySimp_mulLiterals" (formula "28") (term "0"))
                     (rule "polySimp_elimOne" (formula "28") (term "0"))
                     (rule "arrayLengthNotNegative" (formula "28") (term "0"))
                     (rule "inEqSimp_subsumption1" (formula "27") (ifseqformula "28"))
                     (rule "leq_literals" (formula "27") (term "0"))
                      (builtin "One Step Simplification" (formula "27"))
                     (rule "true_left" (formula "27"))
                     (rule "div_axiom" (formula "21") (term "0,0,0,1,0,0") (inst "quotient=quotient_0"))
                     (rule "mul_literals" (formula "21") (term "1,1,1,1,1"))
                     (rule "qeq_literals" (formula "21") (term "0,1,1"))
                      (builtin "One Step Simplification" (formula "21"))
                     (rule "equal_literals" (formula "21") (term "0"))
                      (builtin "One Step Simplification" (formula "21"))
                     (rule "andLeft" (formula "21"))
                     (rule "andLeft" (formula "21"))
                     (rule "polySimp_addComm1" (formula "23") (term "1"))
                     (rule "add_literals" (formula "23") (term "0,1"))
                     (rule "inEqSimp_commuteLeq" (formula "22"))
                     (rule "inEqSimp_homoInEq1" (formula "23"))
                     (rule "polySimp_mulLiterals" (formula "23") (term "1,0"))
                     (rule "polySimp_addComm1" (formula "23") (term "0"))
                     (rule "applyEq" (formula "24") (term "0,0,0,1,0,0") (ifseqformula "21"))
                     (rule "inEqSimp_homoInEq1" (formula "24") (term "0,1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "24") (term "1,0,0,1,0,0"))
                     (rule "polySimp_addComm1" (formula "24") (term "0,0,1,0,0"))
                     (rule "applyEq" (formula "24") (term "0,1,1,2,1,0,0") (ifseqformula "21"))
                     (rule "polySimp_addComm0" (formula "24") (term "1,2,1,0,0"))
                     (rule "applyEq" (formula "24") (term "0,1,1,1,1,1,0,0") (ifseqformula "21"))
                     (rule "polySimp_addComm0" (formula "24") (term "1,1,1,1,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "23"))
                     (rule "polySimp_mulComm0" (formula "23") (term "1"))
                     (rule "polySimp_rightDist" (formula "23") (term "1"))
                     (rule "polySimp_mulLiterals" (formula "23") (term "1,1"))
                     (rule "mul_literals" (formula "23") (term "0,1"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "0,1,0,0"))
                     (rule "polySimp_mulComm0" (formula "24") (term "1,0,1,0,0"))
                     (rule "polySimp_rightDist" (formula "24") (term "1,0,1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "24") (term "1,1,0,1,0,0"))
                     (rule "mul_literals" (formula "24") (term "0,1,0,1,0,0"))
                     (rule "inEqSimp_contradInEq1" (formula "24") (term "0,1,0,0") (ifseqformula "22"))
                     (rule "inEqSimp_homoInEq1" (formula "24") (term "0,0,1,0,0"))
                     (rule "polySimp_mulComm0" (formula "24") (term "1,0,0,0,1,0,0"))
                     (rule "polySimp_rightDist" (formula "24") (term "1,0,0,0,1,0,0"))
                     (rule "mul_literals" (formula "24") (term "0,1,0,0,0,1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "24") (term "1,1,0,0,0,1,0,0"))
                     (rule "polySimp_addAssoc" (formula "24") (term "0,0,0,1,0,0"))
                     (rule "polySimp_addComm0" (formula "24") (term "0,0,0,0,1,0,0"))
                     (rule "polySimp_pullOutFactor0b" (formula "24") (term "0,0,0,1,0,0"))
                     (rule "add_literals" (formula "24") (term "1,1,0,0,0,1,0,0"))
                     (rule "times_zero_1" (formula "24") (term "1,0,0,0,1,0,0"))
                     (rule "add_zero_right" (formula "24") (term "0,0,0,1,0,0"))
                     (rule "leq_literals" (formula "24") (term "0,0,1,0,0"))
                      (builtin "One Step Simplification" (formula "24"))
                     (rule "mod_axiom" (formula "24") (term "0"))
                     (rule "polySimp_mulLiterals" (formula "24") (term "1,0"))
                     (rule "polySimp_homoEq" (formula "24"))
                     (rule "polySimp_mulComm0" (formula "24") (term "1,0"))
                     (rule "polySimp_rightDist" (formula "24") (term "1,0"))
                     (rule "polySimp_mulLiterals" (formula "24") (term "1,1,0"))
                     (rule "polySimp_rightDist" (formula "24") (term "0,1,0"))
                     (rule "mul_literals" (formula "24") (term "0,0,1,0"))
                     (rule "polySimp_addAssoc" (formula "24") (term "0"))
                     (rule "polySimp_addAssoc" (formula "24") (term "0,0"))
                     (rule "polySimp_addComm1" (formula "24") (term "0,0,0"))
                     (rule "add_literals" (formula "24") (term "0,0,0,0"))
                     (rule "polySimp_sepPosMonomial" (formula "24"))
                     (rule "polySimp_mulComm0" (formula "24") (term "1"))
                     (rule "polySimp_rightDist" (formula "24") (term "1"))
                     (rule "polySimp_mulLiterals" (formula "24") (term "1,1"))
                     (rule "polySimp_elimOne" (formula "24") (term "1,1"))
                     (rule "polySimp_rightDist" (formula "24") (term "0,1"))
                     (rule "mul_literals" (formula "24") (term "0,0,1"))
                     (rule "newSym_eq" (formula "24") (inst "l=l_0") (inst "newSymDef=add(add(Z(0(#)), mul(b, Z(0(#)))),
    mul(pow(Z(2(#)),
            add(mul(quotient_0, Z(neglit(2(3(#))))),
                int::final(self,
                           de.wiesler.Tree::$log_buckets))),
        Z(0(#))))"))
                     (rule "times_zero_1" (formula "24") (term "1,1,1"))
                     (rule "add_zero_left" (formula "24") (term "0,1,1"))
                     (rule "add_zero_right" (formula "24") (term "1,1"))
                     (rule "times_zero_1" (formula "24") (term "1,1"))
                     (rule "add_zero_right" (formula "24") (term "1"))
                     (rule "applyEq" (formula "25") (term "0,0") (ifseqformula "24"))
                     (rule "polySimp_homoEq" (formula "25"))
                     (rule "polySimp_mulLiterals" (formula "25") (term "1,0"))
                     (rule "polySimp_addComm1" (formula "25") (term "0"))
                     (rule "polySimp_addComm1" (formula "25") (term "0,0"))
                     (rule "polySimp_sepPosMonomial" (formula "25"))
                     (rule "polySimp_mulComm0" (formula "25") (term "1"))
                     (rule "polySimp_rightDist" (formula "25") (term "1"))
                     (rule "polySimp_mulLiterals" (formula "25") (term "1,1"))
                     (rule "polySimp_elimOne" (formula "25") (term "1,1"))
                     (rule "polySimp_rightDist" (formula "25") (term "0,1"))
                     (rule "polySimp_mulLiterals" (formula "25") (term "1,0,1"))
                     (rule "mul_literals" (formula "25") (term "0,0,1"))
                     (rule "applyEq" (formula "24") (term "1,0,0") (ifseqformula "25"))
                     (rule "polySimp_addAssoc" (formula "24") (term "0,0"))
                     (rule "polySimp_addAssoc" (formula "24") (term "0,0,0"))
                     (rule "add_literals" (formula "24") (term "0,0,0,0"))
                     (rule "polyDiv_pullOut" (formula "24") (term "0") (inst "polyDivCoeff=l_0"))
                     (rule "polySimp_mulLiterals" (formula "24") (term "1,0,0,2,0"))
                     (rule "equal_literals" (formula "24") (term "0,0"))
                      (builtin "One Step Simplification" (formula "24"))
                     (rule "polySimp_homoEq" (formula "24"))
                     (rule "polySimp_mulComm0" (formula "24") (term "1,0"))
                     (rule "polySimp_addComm1" (formula "24") (term "0,0,1,1,0"))
                     (rule "polySimp_pullOutFactor0b" (formula "24") (term "0,0,0,1,1,0"))
                     (rule "add_literals" (formula "24") (term "1,1,0,0,0,1,1,0"))
                     (rule "times_zero_1" (formula "24") (term "1,0,0,0,1,1,0"))
                     (rule "add_literals" (formula "24") (term "0,0,0,1,1,0"))
                     (rule "polySimp_addComm0" (formula "24") (term "1,1,0"))
                     (rule "polySimp_rightDist" (formula "24") (term "1,0"))
                     (rule "polySimp_mulComm0" (formula "24") (term "0,1,0"))
                     (rule "polySimp_addAssoc" (formula "24") (term "0"))
                     (rule "polySimp_pullOutFactor1" (formula "24") (term "0,0"))
                     (rule "add_literals" (formula "24") (term "1,0,0"))
                     (rule "times_zero_1" (formula "24") (term "0,0"))
                     (rule "add_zero_left" (formula "24") (term "0"))
                     (rule "polySimp_invertEq" (formula "24"))
                     (rule "times_zero_2" (formula "24") (term "1"))
                     (rule "polySimp_mulLiterals" (formula "24") (term "0"))
                     (rule "polySimp_elimOne" (formula "24") (term "0"))
                     (rule "polyDiv_pullOut" (formula "24") (term "0") (inst "polyDivCoeff=Z(1(#))"))
                     (rule "polySimp_mulLiterals" (formula "24") (term "1,0,0,2,0"))
                     (rule "equal_literals" (formula "24") (term "0,0"))
                      (builtin "One Step Simplification" (formula "24"))
                     (rule "mul_literals" (formula "24") (term "1,0,0,0"))
                     (rule "polySimp_addComm0" (formula "24") (term "0"))
                     (rule "polySimp_addComm1" (formula "24") (term "0,1,0"))
                     (rule "add_literals" (formula "24") (term "0,0,1,0"))
                     (rule "polySimp_sepPosMonomial" (formula "24"))
                     (rule "mul_literals" (formula "24") (term "1"))
                     (rule "inEqSimp_exactShadow3" (formula "17") (ifseqformula "23"))
                     (rule "polySimp_rightDist" (formula "17") (term "0,0"))
                     (rule "mul_literals" (formula "17") (term "0,0,0"))
                     (rule "polySimp_addComm1" (formula "17") (term "0"))
                     (rule "polySimp_addAssoc" (formula "17") (term "0,0"))
                     (rule "add_literals" (formula "17") (term "0,0,0"))
                     (rule "inEqSimp_sepNegMonomial1" (formula "17"))
                     (rule "polySimp_mulLiterals" (formula "17") (term "0"))
                     (rule "polySimp_elimOne" (formula "17") (term "0"))
                     (rule "inEqSimp_exactShadow3" (formula "23") (ifseqformula "21"))
                     (rule "polySimp_mulAssoc" (formula "23") (term "0,0"))
                     (rule "polySimp_mulComm0" (formula "23") (term "0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "23") (term "0,0"))
                     (rule "polySimp_addComm0" (formula "23") (term "0"))
                     (rule "inEqSimp_sepNegMonomial1" (formula "23"))
                     (rule "polySimp_mulLiterals" (formula "23") (term "0"))
                     (rule "elimGcdLeq_antec" (formula "23") (inst "elimGcdRightDiv=Z(0(#))") (inst "elimGcdLeftDiv=quotient_0") (inst "elimGcd=Z(2(3(#)))"))
                     (rule "neg_literal" (formula "23") (term "0,0,0,0,0,1,0"))
                     (rule "leq_literals" (formula "23") (term "0,0"))
                      (builtin "One Step Simplification" (formula "23"))
                     (rule "times_zero_1" (formula "23") (term "1,0,0,0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "23") (term "1,0,0"))
                     (rule "add_literals" (formula "23") (term "0,0,0,0,0"))
                     (rule "add_literals" (formula "23") (term "0,0,0,0"))
                     (rule "polySimp_pullOutFactor0b" (formula "23") (term "0,0"))
                     (rule "add_literals" (formula "23") (term "1,1,0,0"))
                     (rule "times_zero_1" (formula "23") (term "1,0,0"))
                     (rule "add_zero_right" (formula "23") (term "0,0"))
                     (rule "qeq_literals" (formula "23") (term "0"))
                      (builtin "One Step Simplification" (formula "23"))
                     (rule "inEqSimp_exactShadow3" (formula "20") (ifseqformula "25"))
                     (rule "mul_literals" (formula "20") (term "0,0"))
                     (rule "polySimp_addAssoc" (formula "20") (term "0"))
                     (rule "add_literals" (formula "20") (term "0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "20"))
                     (rule "mul_literals" (formula "20") (term "1"))
                     (rule "elimGcdGeq_antec" (formula "20") (inst "elimGcdRightDiv=Z(0(#))") (inst "elimGcdLeftDiv=quotient_0") (inst "elimGcd=Z(2(3(#)))"))
                     (rule "polySimp_mulLiterals" (formula "20") (term "1,0,1,0"))
                     (rule "times_zero_1" (formula "20") (term "1,0,0,0,0,1,0"))
                     (rule "leq_literals" (formula "20") (term "0,0"))
                      (builtin "One Step Simplification" (formula "20"))
                     (rule "polySimp_addLiterals" (formula "20") (term "0,0,0,0"))
                     (rule "add_literals" (formula "20") (term "0,0,0,0"))
                     (rule "polySimp_pullOutFactor0b" (formula "20") (term "0,0"))
                     (rule "add_literals" (formula "20") (term "1,1,0,0"))
                     (rule "times_zero_1" (formula "20") (term "1,0,0"))
                     (rule "add_zero_right" (formula "20") (term "0,0"))
                     (rule "leq_literals" (formula "20") (term "0"))
                      (builtin "One Step Simplification" (formula "20"))
                     (rule "inEqSimp_exactShadow3" (formula "15") (ifseqformula "17"))
                     (rule "times_zero_1" (formula "15") (term "0,0"))
                     (rule "add_zero_left" (formula "15") (term "0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "15"))
                     (rule "mul_literals" (formula "15") (term "1"))
                     (rule "inEqSimp_subsumption6" (formula "15") (ifseqformula "21"))
                     (rule "times_zero_1" (formula "15") (term "1,1,0"))
                     (rule "greater_literals" (formula "15") (term "0,0"))
                      (builtin "One Step Simplification" (formula "15"))
                     (rule "leq_literals" (formula "15") (term "0"))
                      (builtin "One Step Simplification" (formula "15"))
                     (rule "true_left" (formula "15"))
                     (rule "inEqSimp_antiSymm" (formula "20") (ifseqformula "24"))
                     (rule "applyEqRigid" (formula "17") (term "0,1,1") (ifseqformula "20"))
                     (rule "mul_literals" (formula "17") (term "1,1"))
                     (rule "add_literals" (formula "17") (term "1"))
                     (rule "applyEqRigid" (formula "25") (term "0") (ifseqformula "20"))
                     (rule "leq_literals" (formula "25"))
                     (rule "true_left" (formula "25"))
                     (rule "applyEqRigid" (formula "26") (term "0,1,1") (ifseqformula "20"))
                     (rule "times_zero_2" (formula "26") (term "1,1"))
                     (rule "add_zero_right" (formula "26") (term "1"))
                     (rule "applyEq" (formula "21") (term "0") (ifseqformula "20"))
                     (rule "qeq_literals" (formula "21"))
                     (rule "true_left" (formula "21"))
                     (rule "applyEqRigid" (formula "24") (term "0,1") (ifseqformula "20"))
                     (rule "times_zero_2" (formula "24") (term "1"))
                     (rule "applyEq" (formula "27") (term "0,0,1,0") (ifseqformula "20"))
                     (rule "times_zero_2" (formula "27") (term "0,1,0"))
                     (rule "add_zero_left" (formula "27") (term "1,0"))
                     (rule "applyEqRigid" (formula "23") (term "1") (ifseqformula "20"))
                     (rule "inEqSimp_subsumption1" (formula "24") (ifseqformula "21"))
                     (rule "leq_literals" (formula "24") (term "0"))
                      (builtin "One Step Simplification" (formula "24"))
                     (rule "true_left" (formula "24"))
                     (rule "inEqSimp_subsumption0" (formula "17") (ifseqformula "16"))
                     (rule "leq_literals" (formula "17") (term "0"))
                      (builtin "One Step Simplification" (formula "17"))
                     (rule "true_left" (formula "17"))
                     (rule "inEqSimp_subsumption0" (formula "23") (ifseqformula "21"))
                     (rule "leq_literals" (formula "23") (term "0"))
                      (builtin "One Step Simplification" (formula "23"))
                     (rule "true_left" (formula "23"))
                     (rule "commute_or" (formula "32") (term "0,0,0,1,0"))
                     (rule "commute_or_2" (formula "34") (term "0,0"))
                     (rule "commute_or_2" (formula "33") (term "0,0"))
                     (rule "commute_or_2" (formula "32") (term "0,0"))
                     (rule "div_axiom" (formula "4") (term "0") (inst "quotient=quotient_1"))
                     (rule "mul_literals" (formula "4") (term "1,1,1,1,1"))
                     (rule "qeq_literals" (formula "4") (term "0,1,1"))
                      (builtin "One Step Simplification" (formula "4"))
                     (rule "equal_literals" (formula "4") (term "0"))
                      (builtin "One Step Simplification" (formula "4"))
                     (rule "andLeft" (formula "4"))
                     (rule "andLeft" (formula "4"))
                     (rule "polySimp_addAssoc" (formula "6") (term "0,1"))
                     (rule "add_literals" (formula "6") (term "0,0,1"))
                     (rule "polySimp_addComm1" (formula "6") (term "1"))
                     (rule "add_literals" (formula "6") (term "0,1"))
                     (rule "add_zero_left" (formula "6") (term "1"))
                     (rule "inEqSimp_commuteGeq" (formula "6"))
                     (rule "inEqSimp_homoInEq0" (formula "5"))
                     (rule "polySimp_mulLiterals" (formula "5") (term "1,0"))
                     (rule "polySimp_addComm1" (formula "5") (term "0"))
                     (rule "applyEq" (formula "7") (term "0") (ifseqformula "4"))
                     (rule "inEqSimp_homoInEq1" (formula "7"))
                     (rule "polySimp_addComm1" (formula "7") (term "0"))
                     (rule "applyEq" (formula "8") (term "0,1,0,2,0") (ifseqformula "4"))
                     (rule "polySimp_addComm0" (formula "8") (term "0,2,0"))
                     (rule "applyEq" (formula "3") (term "1") (ifseqformula "4"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "5"))
                     (rule "polySimp_mulComm0" (formula "5") (term "1"))
                     (rule "polySimp_rightDist" (formula "5") (term "1"))
                     (rule "polySimp_mulLiterals" (formula "5") (term "1,1"))
                     (rule "mul_literals" (formula "5") (term "0,1"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "7"))
                     (rule "polySimp_mulComm0" (formula "7") (term "1"))
                     (rule "polySimp_rightDist" (formula "7") (term "1"))
                     (rule "polySimp_mulLiterals" (formula "7") (term "1,1"))
                     (rule "mul_literals" (formula "7") (term "0,1"))
                     (rule "polySimp_elimOne" (formula "7") (term "1,1"))
                     (rule "inEqSimp_exactShadow3" (formula "5") (ifseqformula "7"))
                     (rule "polySimp_rightDist" (formula "5") (term "0,0"))
                     (rule "polySimp_mulLiterals" (formula "5") (term "1,0,0"))
                     (rule "mul_literals" (formula "5") (term "0,0,0"))
                     (rule "polySimp_addAssoc" (formula "5") (term "0"))
                     (rule "polySimp_addComm1" (formula "5") (term "0,0"))
                     (rule "add_literals" (formula "5") (term "0,0,0"))
                     (rule "polySimp_pullOutFactor2b" (formula "5") (term "0"))
                     (rule "add_literals" (formula "5") (term "1,1,0"))
                     (rule "inEqSimp_sepNegMonomial1" (formula "5"))
                     (rule "polySimp_mulLiterals" (formula "5") (term "0"))
                     (rule "polySimp_elimOne" (formula "5") (term "0"))
                     (rule "inEqSimp_exactShadow3" (formula "29") (ifseqformula "7"))
                     (rule "mul_literals" (formula "29") (term "0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "29"))
                     (rule "mul_literals" (formula "29") (term "1"))
                     (rule "inEqSimp_contradInEq3" (formula "29") (ifseqformula "5"))
                     (rule "mul_literals" (formula "29") (term "0,1,0"))
                     (rule "greater_literals" (formula "29") (term "0,0"))
                      (builtin "One Step Simplification" (formula "29"))
                     (rule "qeq_literals" (formula "29") (term "0"))
                      (builtin "One Step Simplification" (formula "29"))
                     (rule "closeFalse" (formula "29"))
                  )
               )
            )
            (branch " self.sorted_splitters[javaSubInt(b, javaDivInt(d, 2))] < value FALSE"
               (rule "powSplitFactor" (formula "15") (term "1") (userinteraction))
               (rule "expand_inInt" (formula "4"))
               (rule "expand_inInt" (formula "5"))
               (rule "expand_inInt" (formula "6"))
               (rule "expand_inInt" (formula "7"))
               (rule "greater_literals" (formula "15") (term "1,0"))
                (builtin "One Step Simplification" (formula "15"))
               (rule "replace_int_MIN" (formula "4") (term "0,1"))
               (rule "replace_int_MAX" (formula "4") (term "1,0"))
               (rule "replace_int_MIN" (formula "5") (term "0,1"))
               (rule "replace_int_MAX" (formula "5") (term "1,0"))
               (rule "replace_int_MIN" (formula "6") (term "0,1"))
               (rule "replace_int_MAX" (formula "6") (term "1,0"))
               (rule "replace_int_MAX" (formula "7") (term "1,0"))
               (rule "replace_int_MIN" (formula "7") (term "0,1"))
               (rule "andLeft" (formula "4"))
               (rule "andLeft" (formula "6"))
               (rule "andLeft" (formula "8"))
               (rule "andLeft" (formula "10"))
               (rule "eqSymm" (formula "20"))
               (rule "translateJavaSubInt" (formula "13") (term "0"))
               (rule "translateJavaSubInt" (formula "24") (term "0,2,0"))
               (rule "translateJavaSubInt" (formula "14") (term "1"))
               (rule "translateJavaSubInt" (formula "15") (term "0,0"))
               (rule "translateJavaSubInt" (formula "15") (term "0,2,0,1"))
               (rule "eqSymm" (formula "16") (term "0"))
               (rule "translateJavaSubInt" (formula "25") (term "0"))
               (rule "translateJavaSubInt" (formula "25") (term "1"))
               (rule "translateJavaSubInt" (formula "19") (term "0,1,1,1,1"))
               (rule "translateJavaSubInt" (formula "19") (term "1,0,1"))
               (rule "translateJavaSubInt" (formula "19") (term "0,0"))
               (rule "translateJavaSubInt" (formula "20") (term "1,0"))
               (rule "translateJavaDivInt" (formula "24") (term "1,0,2,0"))
               (rule "translateJavaSubInt" (formula "16") (term "0,0"))
               (rule "translateJavaDivInt" (formula "25") (term "0,0"))
               (rule "translateJavaDivInt" (formula "25") (term "1,1"))
               (rule "polySimp_elimSub" (formula "13") (term "0"))
               (rule "mul_literals" (formula "13") (term "1,0"))
               (rule "polySimp_elimSub" (formula "14") (term "1"))
               (rule "mul_literals" (formula "14") (term "1,1"))
               (rule "polySimp_elimSub" (formula "15") (term "0,0"))
               (rule "polySimp_elimSub" (formula "15") (term "0,2,0,1"))
               (rule "polySimp_elimSub" (formula "19") (term "1,1,1,1"))
               (rule "mul_literals" (formula "19") (term "1,1,1,1,1"))
               (rule "polySimp_elimSub" (formula "19") (term "1,0,1"))
               (rule "polySimp_elimSub" (formula "19") (term "0,0"))
               (rule "polySimp_elimSub" (formula "20") (term "1,0"))
               (rule "polySimp_elimSub" (formula "24") (term "0,2,0"))
               (rule "polySimp_elimSub" (formula "16") (term "0,0"))
               (rule "mul_literals" (formula "16") (term "1,0,0"))
               (rule "polySimp_elimSub" (formula "25") (term "0"))
               (rule "mul_literals" (formula "25") (term "1,0"))
               (rule "polySimp_elimSub" (formula "25") (term "1"))
               (rule "polySimp_homoEq" (formula "15") (term "0"))
               (rule "polySimp_elimSub" (formula "19") (term "0,1,1,1,1"))
               (rule "polySimp_homoEq" (formula "16") (term "0"))
               (rule "polySimp_mulComm0" (formula "15") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "19") (term "1,1"))
               (rule "eqSymm" (formula "19") (term "1"))
               (rule "polySimp_mulComm0" (formula "16") (term "1,0,0"))
               (rule "polySimp_addComm0" (formula "13") (term "0"))
               (rule "polySimp_addComm0" (formula "14") (term "1"))
               (rule "polySimp_addComm0" (formula "19") (term "0,0"))
               (rule "polySimp_addComm0" (formula "20") (term "1,0"))
               (rule "polySimp_addComm0" (formula "25") (term "0"))
               (rule "polySimp_addComm1" (formula "19") (term "1,0,0,1"))
               (rule "polySimp_addComm0" (formula "19") (term "1,1,1"))
               (rule "polySimp_addComm0" (formula "16") (term "1,1,0,0"))
               (rule "polySimp_addComm0" (formula "19") (term "0,1,0,0,1"))
               (rule "polySimp_rightDist" (formula "15") (term "1,0,0"))
               (rule "polySimp_mulLiterals" (formula "15") (term "1,1,0,0"))
               (rule "polySimp_elimOne" (formula "15") (term "1,1,0,0"))
               (rule "polySimp_mulComm0" (formula "15") (term "0,1,0,0"))
               (rule "polySimp_addComm1" (formula "19") (term "1,0,0,1"))
               (rule "polySimp_rightDist" (formula "16") (term "1,0,0"))
               (rule "mul_literals" (formula "16") (term "0,1,0,0"))
               (rule "inEqSimp_ltToLeq" (formula "18"))
               (rule "polySimp_mulComm0" (formula "18") (term "1,0,0"))
               (rule "polySimp_addComm1" (formula "18") (term "0"))
               (rule "inEqSimp_ltRight" (formula "24"))
               (rule "polySimp_mulComm0" (formula "1") (term "0,0"))
               (rule "inEqSimp_commuteLeq" (formula "18"))
               (rule "inEqSimp_commuteLeq" (formula "17") (term "1"))
               (rule "inEqSimp_ltToLeq" (formula "16") (term "1"))
               (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,1"))
               (rule "polySimp_addAssoc" (formula "16") (term "0,0"))
               (rule "polySimp_addAssoc" (formula "17") (term "0,0"))
               (rule "polySimp_addComm0" (formula "17") (term "0,0,0"))
               (rule "inEqSimp_leqRight" (formula "25"))
               (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
               (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0"))
               (rule "polySimp_elimOne" (formula "1") (term "1,1,0,0"))
               (rule "polySimp_mulComm0" (formula "1") (term "0,1,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "7"))
               (rule "inEqSimp_commuteLeq" (formula "9"))
               (rule "inEqSimp_commuteLeq" (formula "11"))
               (rule "inEqSimp_commuteLeq" (formula "13"))
               (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
               (rule "polySimp_addAssoc" (formula "1") (term "0"))
               (rule "polySimp_addComm1" (formula "1") (term "0,0"))
               (rule "polySimp_pullOutFactor3b" (formula "1") (term "0"))
               (rule "polySimp_addComm1" (formula "1") (term "0,0"))
               (rule "add_literals" (formula "1") (term "0,0,0"))
               (rule "inEqSimp_homoInEq0" (formula "15"))
               (rule "polySimp_mulComm0" (formula "15") (term "1,0"))
               (rule "polySimp_rightDist" (formula "15") (term "1,0"))
               (rule "mul_literals" (formula "15") (term "0,1,0"))
               (rule "polySimp_addAssoc" (formula "15") (term "0"))
               (rule "polySimp_addComm0" (formula "15") (term "0,0"))
               (rule "inEqSimp_homoInEq0" (formula "16"))
               (rule "polySimp_addComm1" (formula "16") (term "0"))
               (rule "inEqSimp_homoInEq1" (formula "21") (term "0"))
               (rule "polySimp_mulComm0" (formula "21") (term "1,0,0"))
               (rule "polySimp_rightDist" (formula "21") (term "1,0,0"))
               (rule "polySimp_mulAssoc" (formula "21") (term "0,1,0,0"))
               (rule "polySimp_mulComm0" (formula "21") (term "0,0,1,0,0"))
               (rule "polySimp_mulLiterals" (formula "21") (term "0,1,0,0"))
               (rule "polySimp_elimOne" (formula "21") (term "0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "21") (term "0,0"))
               (rule "replace_known_left" (formula "21") (term "0") (ifseqformula "20"))
                (builtin "One Step Simplification" (formula "21"))
               (rule "applyEq" (formula "21") (term "1") (ifseqformula "22"))
               (rule "polySimp_sepPosMonomial" (formula "17") (term "0"))
               (rule "polySimp_mulComm0" (formula "17") (term "1,0"))
               (rule "polySimp_rightDist" (formula "17") (term "1,0"))
               (rule "polySimp_mulLiterals" (formula "17") (term "1,1,0"))
               (rule "mul_literals" (formula "17") (term "0,1,0"))
               (rule "polySimp_elimOne" (formula "17") (term "1,1,0"))
               (rule "polySimp_sepNegMonomial" (formula "18") (term "0"))
               (rule "polySimp_mulLiterals" (formula "18") (term "0,0"))
               (rule "polySimp_elimOne" (formula "18") (term "0,0"))
               (rule "inEqSimp_sepNegMonomial0" (formula "20"))
               (rule "polySimp_mulLiterals" (formula "20") (term "0"))
               (rule "polySimp_elimOne" (formula "20") (term "0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "2"))
               (rule "polySimp_mulLiterals" (formula "2") (term "1"))
               (rule "polySimp_elimOne" (formula "2") (term "1"))
               (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "1"))
               (rule "polySimp_mulComm0" (formula "17") (term "1,1"))
               (rule "polySimp_rightDist" (formula "17") (term "1,1"))
               (rule "polySimp_mulLiterals" (formula "17") (term "1,1,1"))
               (rule "mul_literals" (formula "17") (term "0,1,1"))
               (rule "polySimp_elimOne" (formula "17") (term "1,1,1"))
               (rule "inEqSimp_sepPosMonomial1" (formula "1"))
               (rule "polySimp_mulComm0" (formula "1") (term "1"))
               (rule "polySimp_rightDist" (formula "1") (term "1"))
               (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
               (rule "mul_literals" (formula "1") (term "0,1"))
               (rule "polySimp_elimOne" (formula "1") (term "1,1"))
               (rule "inEqSimp_sepNegMonomial1" (formula "15"))
               (rule "polySimp_mulLiterals" (formula "15") (term "0"))
               (rule "polySimp_elimOne" (formula "15") (term "0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "16"))
               (rule "polySimp_mulComm0" (formula "16") (term "1"))
               (rule "polySimp_rightDist" (formula "16") (term "1"))
               (rule "polySimp_mulLiterals" (formula "16") (term "1,1"))
               (rule "mul_literals" (formula "16") (term "0,1"))
               (rule "polySimp_elimOne" (formula "16") (term "1,1"))
               (rule "inEqSimp_subsumption1" (formula "13") (ifseqformula "19"))
               (rule "leq_literals" (formula "13") (term "0"))
                (builtin "One Step Simplification" (formula "13"))
               (rule "true_left" (formula "13"))
               (rule "newSym_eq" (formula "20") (inst "l=l_0") (inst "newSymDef=mul(d, Z(0(#)))"))
               (rule "times_zero_1" (formula "20") (term "1,1"))
               (rule "add_zero_right" (formula "20") (term "1"))
               (rule "applyEq" (formula "21") (term "0,0") (ifseqformula "20"))
               (rule "eqSymm" (formula "21"))
               (rule "applyEq" (formula "8") (term "0") (ifseqformula "21"))
               (rule "applyEq" (formula "9") (term "0") (ifseqformula "21"))
               (rule "applyEq" (formula "16") (term "0,0") (ifseqformula "21"))
               (rule "polySimp_homoEq" (formula "16") (term "0"))
               (rule "polySimp_mulLiterals" (formula "16") (term "1,0,0"))
               (rule "polySimp_addComm1" (formula "16") (term "0,0"))
               (rule "applyEq" (formula "14") (term "0") (ifseqformula "21"))
               (rule "inEqSimp_homoInEq0" (formula "14"))
               (rule "polySimp_mulLiterals" (formula "14") (term "1,0"))
               (rule "polySimp_addComm1" (formula "14") (term "0"))
               (rule "applyEq" (formula "1") (term "0,0,0") (ifseqformula "21"))
               (rule "applyEq" (formula "16") (term "0,1,0,2,0,1") (ifseqformula "21"))
               (rule "polySimp_mulLiterals" (formula "16") (term "1,0,2,0,1"))
               (rule "polySimp_addComm0" (formula "16") (term "0,2,0,1"))
               (rule "applyEq" (formula "2") (term "0,0,1,0,2,0") (ifseqformula "21"))
               (rule "applyEq" (formula "22") (term "1") (ifseqformula "21"))
               (rule "polySimp_sepPosMonomial" (formula "16") (term "0"))
               (rule "polySimp_mulComm0" (formula "16") (term "1,0"))
               (rule "polySimp_rightDist" (formula "16") (term "1,0"))
               (rule "polySimp_mulLiterals" (formula "16") (term "1,1,0"))
               (rule "mul_literals" (formula "16") (term "0,1,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "14"))
               (rule "polySimp_mulComm0" (formula "14") (term "1"))
               (rule "polySimp_rightDist" (formula "14") (term "1"))
               (rule "mul_literals" (formula "14") (term "0,1"))
               (rule "polySimp_mulLiterals" (formula "14") (term "1,1"))
               (rule "elimGcdGeq_antec" (formula "9") (inst "elimGcdRightDiv=Z(neglit(4(2(8(1(4(7(3(7(0(1(#))))))))))))") (inst "elimGcdLeftDiv=l_0") (inst "elimGcd=Z(2(#))"))
               (rule "polySimp_mulLiterals" (formula "9") (term "1,0,1,0"))
               (rule "polySimp_mulLiterals" (formula "9") (term "1,0,0,0,0,1,0"))
               (rule "leq_literals" (formula "9") (term "0,0"))
                (builtin "One Step Simplification" (formula "9"))
               (rule "mul_literals" (formula "9") (term "1,0,0,0,0,0"))
               (rule "polySimp_addLiterals" (formula "9") (term "0,0,0,0"))
               (rule "add_zero_right" (formula "9") (term "0,0,0,0"))
               (rule "polySimp_pullOutFactor0b" (formula "9") (term "0,0"))
               (rule "add_literals" (formula "9") (term "1,1,0,0"))
               (rule "times_zero_1" (formula "9") (term "1,0,0"))
               (rule "add_zero_right" (formula "9") (term "0,0"))
               (rule "leq_literals" (formula "9") (term "0"))
                (builtin "One Step Simplification" (formula "9"))
               (rule "elimGcdLeq_antec" (formula "8") (inst "elimGcdRightDiv=Z(3(2(8(1(4(7(3(7(0(1(#)))))))))))") (inst "elimGcdLeftDiv=l_0") (inst "elimGcd=Z(2(#))"))
               (rule "neg_literal" (formula "8") (term "0,0,0,0,0,1,0"))
               (rule "polySimp_mulLiterals" (formula "8") (term "1,0,0,0,0,1,0"))
               (rule "leq_literals" (formula "8") (term "0,0"))
                (builtin "One Step Simplification" (formula "8"))
               (rule "mul_literals" (formula "8") (term "1,0,0,0,0,0"))
               (rule "polySimp_mulLiterals" (formula "8") (term "1,0,0"))
               (rule "polySimp_addLiterals" (formula "8") (term "0,0,0,0"))
               (rule "add_literals" (formula "8") (term "0,0,0,0"))
               (rule "polySimp_pullOutFactor0b" (formula "8") (term "0,0"))
               (rule "add_literals" (formula "8") (term "1,1,0,0"))
               (rule "times_zero_1" (formula "8") (term "1,0,0"))
               (rule "add_zero_right" (formula "8") (term "0,0"))
               (rule "qeq_literals" (formula "8") (term "0"))
                (builtin "One Step Simplification" (formula "8"))
               (rule "inEqSimp_exactShadow3" (formula "14") (ifseqformula "6"))
               (rule "polySimp_rightDist" (formula "14") (term "0,0"))
               (rule "polySimp_mulLiterals" (formula "14") (term "1,0,0"))
               (rule "mul_literals" (formula "14") (term "0,0,0"))
               (rule "polySimp_addComm1" (formula "14") (term "0"))
               (rule "add_literals" (formula "14") (term "0,0"))
               (rule "inEqSimp_sepNegMonomial1" (formula "14"))
               (rule "polySimp_mulLiterals" (formula "14") (term "0"))
               (rule "inEqSimp_subsumption4" (formula "14") (ifseqformula "8"))
               (rule "mul_literals" (formula "14") (term "0,1,0"))
               (rule "greater_literals" (formula "14") (term "0,0"))
                (builtin "One Step Simplification" (formula "14"))
               (rule "leq_literals" (formula "14") (term "0"))
                (builtin "One Step Simplification" (formula "14"))
               (rule "true_left" (formula "14"))
               (rule "Free_class_invariant_axiom_for_de_wiesler_Tree" (formula "24"))
               (rule "true_left" (formula "24"))
               (rule "Class_invariant_axiom_for_de_wiesler_Tree" (formula "23") (inst "i=i") (inst "i_0=i_0"))
                (builtin "One Step Simplification" (formula "23"))
               (rule "expand_inInt" (formula "23") (term "1,0,0,1"))
               (rule "expand_inInt" (formula "23") (term "1,0,0,1,0"))
               (rule "replace_int_MAX" (formula "23") (term "1,0,1,0,0,1"))
               (rule "replace_int_MIN" (formula "23") (term "0,1,1,0,0,1"))
               (rule "replace_int_MIN" (formula "23") (term "0,1,1,0,0,1,0"))
               (rule "replace_int_MAX" (formula "23") (term "1,0,1,0,0,1,0"))
               (rule "andLeft" (formula "23"))
               (rule "andLeft" (formula "23"))
               (rule "andLeft" (formula "23"))
               (rule "andLeft" (formula "23"))
               (rule "andLeft" (formula "23"))
               (rule "andLeft" (formula "24"))
               (rule "andLeft" (formula "23"))
               (rule "andLeft" (formula "23"))
               (rule "andLeft" (formula "23"))
               (rule "andLeft" (formula "25"))
               (rule "notLeft" (formula "24"))
               (rule "notLeft" (formula "23"))
               (rule "eqSymm" (formula "31") (term "1,0"))
               (rule "translateJavaSubInt" (formula "29") (term "3,0"))
               (rule "translateJavaShiftLeftInt" (formula "25") (term "1"))
               (rule "translateJavaSubInt" (formula "31") (term "0,2,0,1,0"))
               (rule "polySimp_elimSub" (formula "29") (term "3,0"))
               (rule "mul_literals" (formula "29") (term "1,3,0"))
               (rule "polySimp_elimSub" (formula "31") (term "0,2,0,1,0"))
               (rule "mul_literals" (formula "31") (term "1,0,2,0,1,0"))
               (rule "polySimp_addComm0" (formula "29") (term "3,0"))
               (rule "polySimp_addComm0" (formula "31") (term "0,2,0,1,0"))
               (rule "inEqSimp_ltToLeq" (formula "31") (term "1,0,0,0"))
               (rule "polySimp_mulComm0" (formula "31") (term "1,0,0,1,0,0,0"))
               (rule "inEqSimp_ltToLeq" (formula "30") (term "1,0,0,0"))
               (rule "polySimp_mulComm0" (formula "30") (term "1,0,0,1,0,0,0"))
               (rule "inEqSimp_ltToLeq" (formula "30") (term "1,1,0"))
               (rule "polySimp_mulComm0" (formula "30") (term "1,0,0,1,1,0"))
               (rule "inEqSimp_commuteLeq" (formula "31") (term "0,0,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "31") (term "1,1,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "30") (term "0,1,0"))
               (rule "inEqSimp_commuteLeq" (formula "30") (term "1,1,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "30") (term "0,0,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "28"))
               (rule "inEqSimp_commuteLeq" (formula "27"))
               (rule "inEqSimp_commuteLeq" (formula "26"))
               (rule "inEqSimp_commuteLeq" (formula "23"))
               (rule "applyEq" (formula "26") (term "0") (ifseqformula "25"))
               (rule "applyEq" (formula "17") (term "0,0") (ifseqformula "25"))
               (rule "applyEq" (formula "28") (term "1") (ifseqformula "25"))
               (rule "applyEq" (formula "29") (term "1,3,0") (ifseqformula "25"))
               (rule "applyEq" (formula "27") (term "1") (ifseqformula "25"))
               (rule "applyEq" (formula "15") (term "0") (ifseqformula "25"))
               (rule "applyEq" (formula "30") (term "0,1,0,0,1,0,0,0") (ifseqformula "25"))
               (rule "applyEq" (formula "30") (term "0,1,0,0,1,1,0") (ifseqformula "25"))
               (rule "applyEq" (formula "31") (term "0,1,0,0,1,0,0,0") (ifseqformula "25"))
               (rule "inEqSimp_sepPosMonomial0" (formula "30") (term "1,0,0,0"))
               (rule "polySimp_mulComm0" (formula "30") (term "1,1,0,0,0"))
               (rule "polySimp_rightDist" (formula "30") (term "1,1,0,0,0"))
               (rule "polySimp_mulLiterals" (formula "30") (term "1,1,1,0,0,0"))
               (rule "mul_literals" (formula "30") (term "0,1,1,0,0,0"))
               (rule "polySimp_elimOne" (formula "30") (term "1,1,1,0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "30") (term "1,1,0"))
               (rule "polySimp_mulComm0" (formula "30") (term "1,1,1,0"))
               (rule "polySimp_rightDist" (formula "30") (term "1,1,1,0"))
               (rule "mul_literals" (formula "30") (term "0,1,1,1,0"))
               (rule "polySimp_mulLiterals" (formula "30") (term "1,1,1,1,0"))
               (rule "polySimp_elimOne" (formula "30") (term "1,1,1,1,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "31") (term "1,0,0,0"))
               (rule "polySimp_mulComm0" (formula "31") (term "1,1,0,0,0"))
               (rule "polySimp_rightDist" (formula "31") (term "1,1,0,0,0"))
               (rule "polySimp_mulLiterals" (formula "31") (term "1,1,1,0,0,0"))
               (rule "mul_literals" (formula "31") (term "0,1,1,0,0,0"))
               (rule "polySimp_elimOne" (formula "31") (term "1,1,1,0,0,0"))
               (rule "javaShiftLeftIntDef" (formula "25") (term "1"))
               (rule "mod_axiom" (formula "25") (term "1,0,1"))
               (rule "polySimp_mulLiterals" (formula "25") (term "1,1,0,1"))
               (rule "javaShiftLeftIntDef" (formula "26") (term "0"))
               (rule "mod_axiom" (formula "26") (term "1,0,0"))
               (rule "polySimp_mulLiterals" (formula "26") (term "1,1,0,0"))
               (rule "javaShiftLeftIntDef" (formula "17") (term "0,0"))
               (rule "mod_axiom" (formula "17") (term "1,0,0,0"))
               (rule "polySimp_mulLiterals" (formula "17") (term "1,1,0,0,0"))
               (rule "javaShiftLeftIntDef" (formula "28") (term "1"))
               (rule "mod_axiom" (formula "28") (term "1,0,1"))
               (rule "polySimp_mulLiterals" (formula "28") (term "1,1,0,1"))
               (rule "javaShiftLeftIntDef" (formula "29") (term "1,3,0"))
               (rule "mod_axiom" (formula "29") (term "1,0,1,3,0"))
               (rule "polySimp_mulLiterals" (formula "29") (term "1,1,0,1,3,0"))
               (rule "javaShiftLeftIntDef" (formula "27") (term "1"))
               (rule "mod_axiom" (formula "27") (term "1,0,1"))
               (rule "polySimp_mulLiterals" (formula "27") (term "1,1,0,1"))
               (rule "javaShiftLeftIntDef" (formula "15") (term "0"))
               (rule "mod_axiom" (formula "15") (term "1,0,0"))
               (rule "polySimp_mulLiterals" (formula "15") (term "1,1,0,0"))
               (rule "javaShiftLeftIntDef" (formula "30") (term "1,1,1,0,0,0"))
               (rule "mod_axiom" (formula "30") (term "1,0,1,1,1,0,0,0"))
               (rule "polySimp_mulLiterals" (formula "30") (term "1,1,0,1,1,1,0,0,0"))
               (rule "javaShiftLeftIntDef" (formula "30") (term "1,1,1,1,0"))
               (rule "mod_axiom" (formula "30") (term "1,0,1,1,1,1,0"))
               (rule "polySimp_mulLiterals" (formula "30") (term "1,1,0,1,1,1,1,0"))
               (rule "javaShiftLeftIntDef" (formula "31") (term "1,1,1,0,0,0"))
               (rule "mod_axiom" (formula "31") (term "1,0,1,1,1,0,0,0"))
               (rule "polySimp_mulLiterals" (formula "31") (term "1,1,0,1,1,1,0,0,0"))
               (rule "shiftLeftDef" (formula "25") (term "0,1"))
               (rule "eqSymm" (formula "25"))
               (rule "polySimp_elimNeg" (formula "25") (term "1,1,0,0"))
               (rule "polySimp_mulComm0" (formula "25") (term "1,1,0,0"))
               (rule "polySimp_rightDist" (formula "25") (term "1,1,0,0"))
               (rule "polySimp_mulLiterals" (formula "25") (term "1,1,1,0,0"))
               (rule "polySimp_mulComm0" (formula "25") (term "0,1,1,0,0"))
               (rule "shiftLeftPositiveShiftDef" (formula "25") (term "2,0,0"))
               (rule "polySimp_elimOneLeft0" (formula "25") (term "2,0,0"))
               (rule "shiftRightPositiveShiftDef" (formula "25") (term "1,0,0"))
               (rule "inEqSimp_ltToLeq" (formula "25") (term "0,0,0"))
               (rule "times_zero_1" (formula "25") (term "1,0,0,0,0,0"))
               (rule "add_zero_right" (formula "25") (term "0,0,0,0,0"))
               (rule "polySimp_addAssoc" (formula "25") (term "0,0,0,0"))
               (rule "inEqSimp_sepNegMonomial0" (formula "25") (term "0,0,0"))
               (rule "polySimp_mulLiterals" (formula "25") (term "0,0,0,0"))
               (rule "shiftLeftDef" (formula "26") (term "0,0"))
               (rule "polySimp_elimNeg" (formula "26") (term "1,1,0,0"))
               (rule "polySimp_mulComm0" (formula "26") (term "1,1,0,0"))
               (rule "polySimp_rightDist" (formula "26") (term "1,1,0,0"))
               (rule "polySimp_mulLiterals" (formula "26") (term "1,1,1,0,0"))
               (rule "polySimp_mulComm0" (formula "26") (term "0,1,1,0,0"))
               (rule "shiftLeftPositiveShiftDef" (formula "26") (term "2,0,0"))
               (rule "polySimp_elimOneLeft0" (formula "26") (term "2,0,0"))
               (rule "shiftRightPositiveShiftDef" (formula "26") (term "1,0,0"))
               (rule "inEqSimp_ltToLeq" (formula "26") (term "0,0,0"))
               (rule "times_zero_1" (formula "26") (term "1,0,0,0,0,0"))
               (rule "add_zero_right" (formula "26") (term "0,0,0,0,0"))
               (rule "polySimp_addAssoc" (formula "26") (term "0,0,0,0"))
               (rule "inEqSimp_sepNegMonomial0" (formula "26") (term "0,0,0"))
               (rule "polySimp_mulLiterals" (formula "26") (term "0,0,0,0"))
               (rule "applyEq" (formula "26") (term "0") (ifseqformula "25"))
               (rule "shiftLeftDef" (formula "17") (term "0,0,0"))
               (rule "polySimp_elimNeg" (formula "17") (term "1,1,0,0,0"))
               (rule "polySimp_mulComm0" (formula "17") (term "1,1,0,0,0"))
               (rule "polySimp_rightDist" (formula "17") (term "1,1,0,0,0"))
               (rule "polySimp_mulLiterals" (formula "17") (term "1,1,1,0,0,0"))
               (rule "polySimp_mulComm0" (formula "17") (term "0,1,1,0,0,0"))
               (rule "shiftLeftPositiveShiftDef" (formula "17") (term "2,0,0,0"))
               (rule "polySimp_elimOneLeft0" (formula "17") (term "2,0,0,0"))
               (rule "shiftRightPositiveShiftDef" (formula "17") (term "1,0,0,0"))
               (rule "inEqSimp_ltToLeq" (formula "17") (term "0,0,0,0"))
               (rule "times_zero_1" (formula "17") (term "1,0,0,0,0,0,0"))
               (rule "add_zero_right" (formula "17") (term "0,0,0,0,0,0"))
               (rule "polySimp_addAssoc" (formula "17") (term "0,0,0,0,0"))
               (rule "inEqSimp_sepNegMonomial0" (formula "17") (term "0,0,0,0"))
               (rule "polySimp_mulLiterals" (formula "17") (term "0,0,0,0,0"))
               (rule "applyEq" (formula "17") (term "0,0") (ifseqformula "25"))
               (rule "shiftLeftDef" (formula "28") (term "0,1"))
               (rule "polySimp_elimNeg" (formula "28") (term "1,1,0,1"))
               (rule "polySimp_mulComm0" (formula "28") (term "1,1,0,1"))
               (rule "polySimp_rightDist" (formula "28") (term "1,1,0,1"))
               (rule "polySimp_mulLiterals" (formula "28") (term "1,1,1,0,1"))
               (rule "polySimp_mulComm0" (formula "28") (term "0,1,1,0,1"))
               (rule "shiftLeftPositiveShiftDef" (formula "28") (term "2,0,1"))
               (rule "polySimp_elimOneLeft0" (formula "28") (term "2,0,1"))
               (rule "shiftRightPositiveShiftDef" (formula "28") (term "1,0,1"))
               (rule "inEqSimp_ltToLeq" (formula "28") (term "0,0,1"))
               (rule "times_zero_1" (formula "28") (term "1,0,0,0,0,1"))
               (rule "add_zero_right" (formula "28") (term "0,0,0,0,1"))
               (rule "polySimp_addAssoc" (formula "28") (term "0,0,0,1"))
               (rule "inEqSimp_commuteGeq" (formula "28"))
               (rule "inEqSimp_sepNegMonomial0" (formula "28") (term "0,0,0"))
               (rule "polySimp_mulLiterals" (formula "28") (term "0,0,0,0"))
               (rule "applyEq" (formula "28") (term "0") (ifseqformula "25"))
               (rule "inEqSimp_commuteLeq" (formula "28"))
               (rule "shiftLeftDef" (formula "29") (term "0,1,3,0"))
               (rule "polySimp_elimNeg" (formula "29") (term "1,1,0,1,3,0"))
               (rule "polySimp_mulComm0" (formula "29") (term "1,1,0,1,3,0"))
               (rule "polySimp_rightDist" (formula "29") (term "1,1,0,1,3,0"))
               (rule "polySimp_mulLiterals" (formula "29") (term "1,1,1,0,1,3,0"))
               (rule "polySimp_mulComm0" (formula "29") (term "0,1,1,0,1,3,0"))
               (rule "shiftLeftPositiveShiftDef" (formula "29") (term "2,0,1,3,0"))
               (rule "polySimp_elimOneLeft0" (formula "29") (term "2,0,1,3,0"))
               (rule "shiftRightPositiveShiftDef" (formula "29") (term "1,0,1,3,0"))
               (rule "inEqSimp_ltToLeq" (formula "29") (term "0,0,1,3,0"))
               (rule "times_zero_1" (formula "29") (term "1,0,0,0,0,1,3,0"))
               (rule "add_zero_right" (formula "29") (term "0,0,0,0,1,3,0"))
               (rule "polySimp_addAssoc" (formula "29") (term "0,0,0,1,3,0"))
               (rule "inEqSimp_sepNegMonomial0" (formula "29") (term "0,0,1,3,0"))
               (rule "polySimp_mulLiterals" (formula "29") (term "0,0,0,1,3,0"))
               (rule "applyEq" (formula "29") (term "1,3,0") (ifseqformula "25"))
               (rule "shiftLeftDef" (formula "27") (term "0,1"))
               (rule "polySimp_elimNeg" (formula "27") (term "1,1,0,1"))
               (rule "polySimp_mulComm0" (formula "27") (term "1,1,0,1"))
               (rule "polySimp_rightDist" (formula "27") (term "1,1,0,1"))
               (rule "polySimp_mulLiterals" (formula "27") (term "1,1,1,0,1"))
               (rule "polySimp_mulComm0" (formula "27") (term "0,1,1,0,1"))
               (rule "shiftLeftPositiveShiftDef" (formula "27") (term "2,0,1"))
               (rule "polySimp_elimOneLeft0" (formula "27") (term "2,0,1"))
               (rule "shiftRightPositiveShiftDef" (formula "27") (term "1,0,1"))
               (rule "inEqSimp_ltToLeq" (formula "27") (term "0,0,1"))
               (rule "times_zero_1" (formula "27") (term "1,0,0,0,0,1"))
               (rule "add_zero_right" (formula "27") (term "0,0,0,0,1"))
               (rule "polySimp_addAssoc" (formula "27") (term "0,0,0,1"))
               (rule "inEqSimp_commuteGeq" (formula "27"))
               (rule "inEqSimp_sepNegMonomial0" (formula "27") (term "0,0,0"))
               (rule "polySimp_mulLiterals" (formula "27") (term "0,0,0,0"))
               (rule "applyEq" (formula "27") (term "0") (ifseqformula "25"))
               (rule "inEqSimp_commuteLeq" (formula "27"))
               (rule "shiftLeftDef" (formula "15") (term "0,0"))
               (rule "polySimp_elimNeg" (formula "15") (term "1,1,0,0"))
               (rule "polySimp_mulComm0" (formula "15") (term "1,1,0,0"))
               (rule "polySimp_rightDist" (formula "15") (term "1,1,0,0"))
               (rule "polySimp_mulLiterals" (formula "15") (term "1,1,1,0,0"))
               (rule "polySimp_mulComm0" (formula "15") (term "0,1,1,0,0"))
               (rule "shiftLeftPositiveShiftDef" (formula "15") (term "2,0,0"))
               (rule "polySimp_elimOneLeft0" (formula "15") (term "2,0,0"))
               (rule "shiftRightPositiveShiftDef" (formula "15") (term "1,0,0"))
               (rule "inEqSimp_ltToLeq" (formula "15") (term "0,0,0"))
               (rule "times_zero_1" (formula "15") (term "1,0,0,0,0,0"))
               (rule "add_zero_right" (formula "15") (term "0,0,0,0,0"))
               (rule "polySimp_addAssoc" (formula "15") (term "0,0,0,0"))
               (rule "inEqSimp_sepNegMonomial0" (formula "15") (term "0,0,0"))
               (rule "polySimp_mulLiterals" (formula "15") (term "0,0,0,0"))
               (rule "applyEq" (formula "15") (term "0") (ifseqformula "25"))
               (rule "shiftLeftDef" (formula "30") (term "0,1,1,1,0,0,0"))
               (rule "polySimp_elimNeg" (formula "30") (term "1,1,0,1,1,1,0,0,0"))
               (rule "polySimp_mulComm0" (formula "30") (term "1,1,0,1,1,1,0,0,0"))
               (rule "polySimp_rightDist" (formula "30") (term "1,1,0,1,1,1,0,0,0"))
               (rule "polySimp_mulLiterals" (formula "30") (term "1,1,1,0,1,1,1,0,0,0"))
               (rule "polySimp_mulComm0" (formula "30") (term "0,1,1,0,1,1,1,0,0,0"))
               (rule "shiftLeftPositiveShiftDef" (formula "30") (term "2,0,1,1,1,0,0,0"))
               (rule "polySimp_elimOneLeft0" (formula "30") (term "2,0,1,1,1,0,0,0"))
               (rule "shiftRightPositiveShiftDef" (formula "30") (term "1,0,1,1,1,0,0,0"))
               (rule "inEqSimp_ltToLeq" (formula "30") (term "0,0,1,1,1,0,0,0"))
               (rule "times_zero_1" (formula "30") (term "1,0,0,0,0,1,1,1,0,0,0"))
               (rule "add_zero_right" (formula "30") (term "0,0,0,0,1,1,1,0,0,0"))
               (rule "polySimp_addAssoc" (formula "30") (term "0,0,0,1,1,1,0,0,0"))
               (rule "inEqSimp_sepNegMonomial0" (formula "30") (term "0,0,1,1,1,0,0,0"))
               (rule "polySimp_mulLiterals" (formula "30") (term "0,0,0,1,1,1,0,0,0"))
               (rule "applyEq" (formula "30") (term "1,1,1,0,0,0") (ifseqformula "25"))
               (rule "shiftLeftDef" (formula "30") (term "0,1,1,1,1,0"))
               (rule "polySimp_elimNeg" (formula "30") (term "1,1,0,1,1,1,1,0"))
               (rule "polySimp_mulComm0" (formula "30") (term "1,1,0,1,1,1,1,0"))
               (rule "polySimp_rightDist" (formula "30") (term "1,1,0,1,1,1,1,0"))
               (rule "polySimp_mulLiterals" (formula "30") (term "1,1,1,0,1,1,1,1,0"))
               (rule "polySimp_mulComm0" (formula "30") (term "0,1,1,0,1,1,1,1,0"))
               (rule "shiftLeftPositiveShiftDef" (formula "30") (term "2,0,1,1,1,1,0"))
               (rule "polySimp_elimOneLeft0" (formula "30") (term "2,0,1,1,1,1,0"))
               (rule "shiftRightPositiveShiftDef" (formula "30") (term "1,0,1,1,1,1,0"))
               (rule "inEqSimp_ltToLeq" (formula "30") (term "0,0,1,1,1,1,0"))
               (rule "times_zero_1" (formula "30") (term "1,0,0,0,0,1,1,1,1,0"))
               (rule "add_zero_right" (formula "30") (term "0,0,0,0,1,1,1,1,0"))
               (rule "polySimp_addAssoc" (formula "30") (term "0,0,0,1,1,1,1,0"))
               (rule "inEqSimp_sepNegMonomial0" (formula "30") (term "0,0,1,1,1,1,0"))
               (rule "polySimp_mulLiterals" (formula "30") (term "0,0,0,1,1,1,1,0"))
               (rule "applyEq" (formula "30") (term "1,1,1,1,0") (ifseqformula "25"))
               (rule "shiftLeftDef" (formula "31") (term "0,1,1,1,0,0,0"))
               (rule "polySimp_elimNeg" (formula "31") (term "1,1,0,1,1,1,0,0,0"))
               (rule "polySimp_mulComm0" (formula "31") (term "1,1,0,1,1,1,0,0,0"))
               (rule "polySimp_rightDist" (formula "31") (term "1,1,0,1,1,1,0,0,0"))
               (rule "polySimp_mulLiterals" (formula "31") (term "1,1,1,0,1,1,1,0,0,0"))
               (rule "polySimp_mulComm0" (formula "31") (term "0,1,1,0,1,1,1,0,0,0"))
               (rule "shiftLeftPositiveShiftDef" (formula "31") (term "2,0,1,1,1,0,0,0"))
               (rule "polySimp_elimOneLeft0" (formula "31") (term "2,0,1,1,1,0,0,0"))
               (rule "shiftRightPositiveShiftDef" (formula "31") (term "1,0,1,1,1,0,0,0"))
               (rule "inEqSimp_ltToLeq" (formula "31") (term "0,0,1,1,1,0,0,0"))
               (rule "times_zero_1" (formula "31") (term "1,0,0,0,0,1,1,1,0,0,0"))
               (rule "add_zero_right" (formula "31") (term "0,0,0,0,1,1,1,0,0,0"))
               (rule "polySimp_addAssoc" (formula "31") (term "0,0,0,1,1,1,0,0,0"))
               (rule "inEqSimp_sepNegMonomial0" (formula "31") (term "0,0,1,1,1,0,0,0"))
               (rule "polySimp_mulLiterals" (formula "31") (term "0,0,0,1,1,1,0,0,0"))
               (rule "applyEq" (formula "31") (term "1,1,1,0,0,0") (ifseqformula "25"))
               (rule "inEqSimp_exactShadow3" (formula "19") (ifseqformula "24"))
               (rule "polySimp_rightDist" (formula "19") (term "0,0"))
               (rule "mul_literals" (formula "19") (term "0,0,0"))
               (rule "polySimp_addComm1" (formula "19") (term "0"))
               (rule "add_literals" (formula "19") (term "0,0"))
               (rule "inEqSimp_sepNegMonomial1" (formula "19"))
               (rule "polySimp_mulLiterals" (formula "19") (term "0"))
               (rule "polySimp_elimOne" (formula "19") (term "0"))
               (rule "inEqSimp_subsumption0" (formula "12") (ifseqformula "19"))
               (rule "leq_literals" (formula "12") (term "0"))
                (builtin "One Step Simplification" (formula "12"))
               (rule "true_left" (formula "12"))
               (rule "expand_moduloInteger" (formula "25") (term "0"))
               (rule "replace_int_RANGE" (formula "25") (term "1,1,0"))
               (rule "replace_int_HALFRANGE" (formula "25") (term "0,0,1,0"))
               (rule "replace_int_MIN" (formula "25") (term "0,0"))
               (rule "polySimp_homoEq" (formula "25"))
               (rule "polySimp_mulComm0" (formula "25") (term "1,0"))
               (rule "polySimp_rightDist" (formula "25") (term "1,0"))
               (rule "mul_literals" (formula "25") (term "0,1,0"))
               (rule "polySimp_addAssoc" (formula "25") (term "0"))
               (rule "polySimp_addComm0" (formula "25") (term "0,0"))
               (rule "polySimp_sepNegMonomial" (formula "25"))
               (rule "polySimp_mulLiterals" (formula "25") (term "0"))
               (rule "polySimp_elimOne" (formula "25") (term "0"))
               (rule "nnf_imp2or" (formula "30") (term "0"))
               (rule "nnf_imp2or" (formula "31") (term "0"))
               (rule "nnf_notAnd" (formula "30") (term "0,0"))
               (rule "nnf_notAnd" (formula "31") (term "0,0"))
               (rule "nnf_notAnd" (formula "30") (term "1,0,0"))
               (rule "inEqSimp_notGeq" (formula "30") (term "1,1,0,0"))
               (rule "mul_literals" (formula "30") (term "1,0,0,1,1,0,0"))
               (rule "add_literals" (formula "30") (term "0,0,1,1,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "30") (term "1,1,0,0"))
               (rule "mul_literals" (formula "30") (term "1,1,1,0,0"))
               (rule "inEqSimp_notLeq" (formula "30") (term "0,1,0,0"))
               (rule "mul_literals" (formula "30") (term "1,0,0,0,1,0,0"))
               (rule "add_literals" (formula "30") (term "0,0,0,1,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "30") (term "0,1,0,0"))
               (rule "mul_literals" (formula "30") (term "1,0,1,0,0"))
               (rule "nnf_notAnd" (formula "30") (term "0,0,0"))
               (rule "inEqSimp_notLeq" (formula "30") (term "1,0,0,0"))
               (rule "polySimp_rightDist" (formula "30") (term "1,0,0,1,0,0,0"))
               (rule "mul_literals" (formula "30") (term "0,1,0,0,1,0,0,0"))
               (rule "polySimp_addAssoc" (formula "30") (term "0,0,1,0,0,0"))
               (rule "add_literals" (formula "30") (term "0,0,0,1,0,0,0"))
               (rule "add_zero_left" (formula "30") (term "0,0,1,0,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "30") (term "1,0,0,0"))
               (rule "polySimp_mulLiterals" (formula "30") (term "1,1,0,0,0"))
               (rule "polySimp_elimOne" (formula "30") (term "1,1,0,0,0"))
               (rule "inEqSimp_notGeq" (formula "30") (term "0,0,0,0"))
               (rule "mul_literals" (formula "30") (term "1,0,0,0,0,0,0"))
               (rule "add_literals" (formula "30") (term "0,0,0,0,0,0"))
               (rule "add_zero_left" (formula "30") (term "0,0,0,0,0"))
               (rule "nnf_notAnd" (formula "31") (term "1,0,0"))
               (rule "inEqSimp_notGeq" (formula "31") (term "1,1,0,0"))
               (rule "mul_literals" (formula "31") (term "1,0,0,1,1,0,0"))
               (rule "add_literals" (formula "31") (term "0,0,1,1,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "31") (term "1,1,0,0"))
               (rule "mul_literals" (formula "31") (term "1,1,1,0,0"))
               (rule "inEqSimp_notLeq" (formula "31") (term "0,1,0,0"))
               (rule "mul_literals" (formula "31") (term "1,0,0,0,1,0,0"))
               (rule "add_literals" (formula "31") (term "0,0,0,1,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "31") (term "0,1,0,0"))
               (rule "mul_literals" (formula "31") (term "1,0,1,0,0"))
               (rule "nnf_notAnd" (formula "31") (term "0,0,0"))
               (rule "inEqSimp_notGeq" (formula "31") (term "0,0,0,0"))
               (rule "mul_literals" (formula "31") (term "1,0,0,0,0,0,0"))
               (rule "add_literals" (formula "31") (term "0,0,0,0,0,0"))
               (rule "add_zero_left" (formula "31") (term "0,0,0,0,0"))
               (rule "inEqSimp_notLeq" (formula "31") (term "1,0,0,0"))
               (rule "polySimp_rightDist" (formula "31") (term "1,0,0,1,0,0,0"))
               (rule "mul_literals" (formula "31") (term "0,1,0,0,1,0,0,0"))
               (rule "polySimp_addAssoc" (formula "31") (term "0,0,1,0,0,0"))
               (rule "add_literals" (formula "31") (term "0,0,0,1,0,0,0"))
               (rule "add_zero_left" (formula "31") (term "0,0,1,0,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "31") (term "1,0,0,0"))
               (rule "polySimp_mulLiterals" (formula "31") (term "1,1,0,0,0"))
               (rule "polySimp_elimOne" (formula "31") (term "1,1,0,0,0"))
               (rule "Definition_axiom_for_isSortedSliceTransitive_in_de_wiesler_Functions" (formula "29") (term "0") (inst "i=i") (inst "j=j"))
                (builtin "One Step Simplification" (formula "29"))
               (rule "expand_inInt" (formula "29") (term "1,0,0,1,0"))
               (rule "expand_inInt" (formula "29") (term "1,0,0"))
               (rule "replace_int_MAX" (formula "29") (term "1,0,1,0,0,1,0"))
               (rule "replace_int_MIN" (formula "29") (term "0,1,1,0,0,1,0"))
               (rule "replace_int_MAX" (formula "29") (term "1,0,1,0,0"))
               (rule "replace_int_MIN" (formula "29") (term "0,1,1,0,0"))
               (rule "inEqSimp_ltToLeq" (formula "29") (term "1,0,0,0,1,0"))
               (rule "polySimp_rightDist" (formula "29") (term "1,0,0,1,0,0,0,1,0"))
               (rule "mul_literals" (formula "29") (term "0,1,0,0,1,0,0,0,1,0"))
               (rule "polySimp_addAssoc" (formula "29") (term "0,0,1,0,0,0,1,0"))
               (rule "add_literals" (formula "29") (term "0,0,0,1,0,0,0,1,0"))
               (rule "inEqSimp_ltToLeq" (formula "29") (term "1,0,0,0"))
               (rule "polySimp_rightDist" (formula "29") (term "1,0,0,1,0,0,0"))
               (rule "mul_literals" (formula "29") (term "0,1,0,0,1,0,0,0"))
               (rule "polySimp_addAssoc" (formula "29") (term "0,0,1,0,0,0"))
               (rule "add_literals" (formula "29") (term "0,0,0,1,0,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "29") (term "1,0,1,0"))
               (rule "inEqSimp_commuteLeq" (formula "29") (term "0,0,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "29") (term "0,0,0,0,1,0"))
               (rule "inEqSimp_commuteLeq" (formula "29") (term "1,1,0,0,1,0"))
               (rule "inEqSimp_commuteLeq" (formula "29") (term "1,1,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "29") (term "1,0,0,0,1,0"))
               (rule "polySimp_mulComm0" (formula "29") (term "1,1,0,0,0,1,0"))
               (rule "polySimp_rightDist" (formula "29") (term "1,1,0,0,0,1,0"))
               (rule "polySimp_mulLiterals" (formula "29") (term "1,1,1,0,0,0,1,0"))
               (rule "mul_literals" (formula "29") (term "0,1,1,0,0,0,1,0"))
               (rule "polySimp_elimOne" (formula "29") (term "1,1,1,0,0,0,1,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "29") (term "1,0,0,0"))
               (rule "polySimp_mulComm0" (formula "29") (term "1,1,0,0,0"))
               (rule "polySimp_rightDist" (formula "29") (term "1,1,0,0,0"))
               (rule "mul_literals" (formula "29") (term "0,1,1,0,0,0"))
               (rule "polySimp_mulLiterals" (formula "29") (term "1,1,1,0,0,0"))
               (rule "polySimp_elimOne" (formula "29") (term "1,1,1,0,0,0"))
               (rule "nnf_imp2or" (formula "29") (term "0"))
               (rule "nnf_notAnd" (formula "29") (term "0,0"))
               (rule "nnf_imp2or" (formula "29") (term "0,1,0"))
               (rule "nnf_notAnd" (formula "29") (term "0,0,0"))
               (rule "inEqSimp_notLeq" (formula "29") (term "1,0,0,0"))
               (rule "polySimp_rightDist" (formula "29") (term "1,0,0,1,0,0,0"))
               (rule "mul_literals" (formula "29") (term "0,1,0,0,1,0,0,0"))
               (rule "polySimp_addAssoc" (formula "29") (term "0,0,1,0,0,0"))
               (rule "add_literals" (formula "29") (term "0,0,0,1,0,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "29") (term "1,0,0,0"))
               (rule "polySimp_mulComm0" (formula "29") (term "1,1,0,0,0"))
               (rule "polySimp_rightDist" (formula "29") (term "1,1,0,0,0"))
               (rule "polySimp_mulLiterals" (formula "29") (term "1,1,1,0,0,0"))
               (rule "mul_literals" (formula "29") (term "0,1,1,0,0,0"))
               (rule "polySimp_elimOne" (formula "29") (term "1,1,1,0,0,0"))
               (rule "inEqSimp_notGeq" (formula "29") (term "0,0,0,0"))
               (rule "times_zero_1" (formula "29") (term "1,0,0,0,0,0,0"))
               (rule "add_zero_right" (formula "29") (term "0,0,0,0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "29") (term "0,0,0,0"))
               (rule "mul_literals" (formula "29") (term "1,0,0,0,0"))
               (rule "nnf_notAnd" (formula "29") (term "1,0,0"))
               (rule "inEqSimp_notLeq" (formula "29") (term "0,1,0,0"))
               (rule "mul_literals" (formula "29") (term "1,0,0,0,1,0,0"))
               (rule "add_literals" (formula "29") (term "0,0,0,1,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "29") (term "0,1,0,0"))
               (rule "mul_literals" (formula "29") (term "1,0,1,0,0"))
               (rule "inEqSimp_notGeq" (formula "29") (term "1,1,0,0"))
               (rule "mul_literals" (formula "29") (term "1,0,0,1,1,0,0"))
               (rule "add_literals" (formula "29") (term "0,0,1,1,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "29") (term "1,1,0,0"))
               (rule "mul_literals" (formula "29") (term "1,1,1,0,0"))
               (rule "nnf_notAnd" (formula "29") (term "0,0,1,0"))
               (rule "jdiv_axiom" (formula "1") (term "0,0"))
               (rule "polySimp_mulLiterals" (formula "1") (term "0,0,2,1"))
               (rule "eqSymm" (formula "1"))
               (rule "polyDiv_pullOut" (formula "1") (term "1,0") (inst "polyDivCoeff=l_0"))
               (rule "equal_literals" (formula "1") (term "0,1,0"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "polySimp_mulLiterals" (formula "1") (term "1,0,0,1,0"))
               (rule "polySimp_pullOutFactor0" (formula "1") (term "0,0,1,0"))
               (rule "add_literals" (formula "1") (term "1,0,0,1,0"))
               (rule "times_zero_1" (formula "1") (term "0,0,1,0"))
               (rule "div_literals" (formula "1") (term "0,1,0"))
               (rule "add_zero_left" (formula "1") (term "1,0"))
               (rule "elimGcdGeq" (formula "1") (term "0,0") (inst "elimGcdRightDiv=Z(0(#))") (inst "elimGcdLeftDiv=l_0") (inst "elimGcd=Z(2(#))"))
               (rule "polySimp_mulLiterals" (formula "1") (term "1,0,0,0,0,0"))
               (rule "add_zero_right" (formula "1") (term "0,0,0,1,0,0,0"))
               (rule "add_zero_right" (formula "1") (term "0,0,0,0,0,0,0"))
               (rule "polySimp_mulLiterals" (formula "1") (term "1,0,1,0,0,0"))
               (rule "times_zero_1" (formula "1") (term "0,0,0,1,0,0,0"))
               (rule "sub_literals" (formula "1") (term "0,0,0,0,0,0,0,0"))
               (rule "times_zero_1" (formula "1") (term "1,0,0,0,0,0,0,0"))
               (rule "add_zero_left" (formula "1") (term "0,0,1,0,0,0"))
               (rule "add_literals" (formula "1") (term "0,0,0,0,0,0,0"))
               (rule "polySimp_pullOutFactor0" (formula "1") (term "0,1,0,0,0"))
               (rule "add_literals" (formula "1") (term "1,0,1,0,0,0"))
               (rule "times_zero_1" (formula "1") (term "0,1,0,0,0"))
               (rule "leq_literals" (formula "1") (term "1,0,0,0"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "polySimp_pullOutFactor0b" (formula "1") (term "0,0,0,0"))
               (rule "add_literals" (formula "1") (term "1,1,0,0,0,0"))
               (rule "times_zero_1" (formula "1") (term "1,0,0,0,0"))
               (rule "add_zero_right" (formula "1") (term "0,0,0,0"))
               (rule "qeq_literals" (formula "1") (term "0,0,0"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "polyDiv_pullOut" (formula "1") (term "0,2,0") (inst "polyDivCoeff=mul(l_0, Z(neglit(1(#))))"))
               (rule "polySimp_mulLiterals" (formula "1") (term "1,0,0,2,0,2,0"))
               (rule "equal_literals" (formula "1") (term "0,0,2,0"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "polySimp_mulLiterals" (formula "1") (term "1,0,0,0,2,0"))
               (rule "polySimp_pullOutFactor0" (formula "1") (term "0,0,0,2,0"))
               (rule "add_literals" (formula "1") (term "1,0,0,0,2,0"))
               (rule "times_zero_1" (formula "1") (term "0,0,0,2,0"))
               (rule "div_literals" (formula "1") (term "0,0,2,0"))
               (rule "add_zero_left" (formula "1") (term "0,2,0"))
               (rule "polySimp_mulLiterals" (formula "1") (term "2,0"))
               (rule "polySimp_elimOne" (formula "1") (term "2,0"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "eqSymm" (formula "1"))
               (rule "applyEqRigid" (formula "3") (term "0,1,0,2,0") (ifseqformula "1"))
               (rule "polySimp_addComm0" (formula "3") (term "0,2,0"))
               (rule "applyEqRigid" (formula "2") (term "0,0") (ifseqformula "1"))
               (rule "inEqSimp_homoInEq1" (formula "2"))
               (rule "polySimp_mulLiterals" (formula "2") (term "1,0"))
               (rule "polySimp_addComm1" (formula "2") (term "0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "2"))
               (rule "polySimp_mulComm0" (formula "2") (term "1"))
               (rule "polySimp_rightDist" (formula "2") (term "1"))
               (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
               (rule "mul_literals" (formula "2") (term "0,1"))
               (rule "inEqSimp_contradEq3" (formula "16") (term "0") (ifseqformula "2"))
               (rule "polySimp_rightDist" (formula "16") (term "1,0,0,0"))
               (rule "polySimp_mulLiterals" (formula "16") (term "1,1,0,0,0"))
               (rule "mul_literals" (formula "16") (term "0,1,0,0,0"))
               (rule "polySimp_addAssoc" (formula "16") (term "0,0,0"))
               (rule "polySimp_addComm1" (formula "16") (term "0,0,0,0"))
               (rule "add_literals" (formula "16") (term "0,0,0,0,0"))
               (rule "polySimp_pullOutFactor0b" (formula "16") (term "0,0,0"))
               (rule "add_literals" (formula "16") (term "1,1,0,0,0"))
               (rule "times_zero_1" (formula "16") (term "1,0,0,0"))
               (rule "add_literals" (formula "16") (term "0,0,0"))
               (rule "qeq_literals" (formula "16") (term "0,0"))
                (builtin "One Step Simplification" (formula "16"))
               (rule "inEqSimp_contradInEq1" (formula "2") (ifseqformula "14"))
               (rule "andLeft" (formula "2"))
               (rule "inEqSimp_homoInEq1" (formula "2"))
               (rule "polySimp_mulComm0" (formula "2") (term "1,0"))
               (rule "polySimp_rightDist" (formula "2") (term "1,0"))
               (rule "mul_literals" (formula "2") (term "0,1,0"))
               (rule "polySimp_mulLiterals" (formula "2") (term "1,1,0"))
               (rule "polySimp_addAssoc" (formula "2") (term "0"))
               (rule "polySimp_addComm1" (formula "2") (term "0,0"))
               (rule "add_literals" (formula "2") (term "0,0,0"))
               (rule "polySimp_pullOutFactor0b" (formula "2") (term "0"))
               (rule "add_literals" (formula "2") (term "1,1,0"))
               (rule "times_zero_1" (formula "2") (term "1,0"))
               (rule "add_literals" (formula "2") (term "0"))
               (rule "leq_literals" (formula "2"))
               (rule "closeFalse" (formula "2"))
            )
         )
         (branch "Case 2"
            (rule "powSplitFactor" (formula "15") (term "1") (userinteraction))
            (rule "impLeft" (formula "15") (userinteraction))
            (branch "Case 1"
               (rule "expand_inInt" (formula "4"))
               (rule "expand_inInt" (formula "5"))
               (rule "expand_inInt" (formula "6"))
               (rule "greater_literals" (formula "18") (term "1"))
                (builtin "One Step Simplification" (formula "18"))
               (rule "expand_inInt" (formula "7"))
               (rule "replace_int_MAX" (formula "4") (term "1,0"))
               (rule "replace_int_MIN" (formula "4") (term "0,1"))
               (rule "replace_int_MAX" (formula "5") (term "1,0"))
               (rule "replace_int_MIN" (formula "5") (term "0,1"))
               (rule "replace_int_MIN" (formula "6") (term "0,1"))
               (rule "replace_int_MAX" (formula "6") (term "1,0"))
               (rule "replace_int_MIN" (formula "7") (term "0,1"))
               (rule "replace_int_MAX" (formula "7") (term "1,0"))
               (rule "andLeft" (formula "4"))
               (rule "andLeft" (formula "6"))
               (rule "andLeft" (formula "8"))
               (rule "andLeft" (formula "10"))
               (rule "translateJavaSubInt" (formula "13") (term "0"))
               (rule "translateJavaSubInt" (formula "14") (term "1"))
               (rule "translateJavaSubInt" (formula "24") (term "0,2,0,0,0"))
               (rule "translateJavaSubInt" (formula "24") (term "2,0"))
               (rule "translateJavaSubInt" (formula "15") (term "0,0"))
               (rule "translateJavaSubInt" (formula "24") (term "1"))
               (rule "translateJavaSubInt" (formula "15") (term "0,2,0,1"))
               (rule "eqSymm" (formula "16") (term "0"))
               (rule "eqSymm" (formula "19"))
               (rule "translateJavaSubInt" (formula "22") (term "0"))
               (rule "translateJavaDivInt" (formula "24") (term "1,0,2,0,0,0"))
               (rule "translateJavaDivInt" (formula "24") (term "1,2,0"))
               (rule "translateJavaSubInt" (formula "16") (term "0,0"))
               (rule "translateJavaSubInt" (formula "19") (term "1,0"))
               (rule "polySimp_elimSub" (formula "13") (term "0"))
               (rule "mul_literals" (formula "13") (term "1,0"))
               (rule "polySimp_elimSub" (formula "14") (term "1"))
               (rule "mul_literals" (formula "14") (term "1,1"))
               (rule "polySimp_elimSub" (formula "15") (term "0,0"))
               (rule "polySimp_elimSub" (formula "24") (term "1"))
               (rule "mul_literals" (formula "24") (term "1,1"))
               (rule "polySimp_elimSub" (formula "15") (term "0,2,0,1"))
               (rule "polySimp_elimSub" (formula "22") (term "0"))
               (rule "polySimp_elimSub" (formula "24") (term "0,2,0,0,0"))
               (rule "polySimp_elimSub" (formula "24") (term "2,0"))
               (rule "polySimp_elimSub" (formula "16") (term "0,0"))
               (rule "mul_literals" (formula "16") (term "1,0,0"))
               (rule "polySimp_elimSub" (formula "19") (term "1,0"))
               (rule "polySimp_homoEq" (formula "15") (term "0"))
               (rule "polySimp_homoEq" (formula "16") (term "0"))
               (rule "polySimp_mulComm0" (formula "15") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "16") (term "1,0,0"))
               (rule "polySimp_addComm0" (formula "13") (term "0"))
               (rule "polySimp_addComm0" (formula "14") (term "1"))
               (rule "polySimp_addComm0" (formula "24") (term "1"))
               (rule "polySimp_addComm0" (formula "22") (term "0"))
               (rule "polySimp_addComm0" (formula "19") (term "1,0"))
               (rule "polySimp_addComm0" (formula "16") (term "1,1,0,0"))
               (rule "polySimp_rightDist" (formula "15") (term "1,0,0"))
               (rule "polySimp_mulLiterals" (formula "15") (term "1,1,0,0"))
               (rule "polySimp_elimOne" (formula "15") (term "1,1,0,0"))
               (rule "polySimp_mulComm0" (formula "15") (term "0,1,0,0"))
               (rule "polySimp_rightDist" (formula "16") (term "1,0,0"))
               (rule "mul_literals" (formula "16") (term "0,1,0,0"))
               (rule "inEqSimp_ltToLeq" (formula "18"))
               (rule "polySimp_mulComm0" (formula "18") (term "1,0,0"))
               (rule "polySimp_addComm1" (formula "18") (term "0"))
               (rule "polySimp_addAssoc" (formula "15") (term "0,0"))
               (rule "polySimp_addAssoc" (formula "16") (term "0,0"))
               (rule "polySimp_addComm0" (formula "16") (term "0,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "17"))
               (rule "inEqSimp_commuteLeq" (formula "16") (term "1"))
               (rule "inEqSimp_ltToLeq" (formula "15") (term "1"))
               (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,1"))
               (rule "inEqSimp_ltToLeq" (formula "24") (term "0,0"))
               (rule "polySimp_mulComm0" (formula "24") (term "1,0,0,0,0"))
               (rule "inEqSimp_geqRight" (formula "22"))
               (rule "mul_literals" (formula "1") (term "1,0,0"))
               (rule "add_literals" (formula "1") (term "0,0"))
               (rule "add_zero_left" (formula "1") (term "0"))
               (rule "inEqSimp_commuteLeq" (formula "6"))
               (rule "inEqSimp_commuteLeq" (formula "8"))
               (rule "inEqSimp_commuteLeq" (formula "10"))
               (rule "inEqSimp_commuteLeq" (formula "12"))
               (rule "inEqSimp_leqRight" (formula "24"))
               (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
               (rule "mul_literals" (formula "1") (term "0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
               (rule "add_literals" (formula "1") (term "0,0,0"))
               (rule "add_zero_left" (formula "1") (term "0,0"))
               (rule "inEqSimp_homoInEq0" (formula "15"))
               (rule "polySimp_mulComm0" (formula "15") (term "1,0"))
               (rule "polySimp_rightDist" (formula "15") (term "1,0"))
               (rule "mul_literals" (formula "15") (term "0,1,0"))
               (rule "polySimp_addAssoc" (formula "15") (term "0"))
               (rule "polySimp_addComm0" (formula "15") (term "0,0"))
               (rule "inEqSimp_homoInEq0" (formula "16"))
               (rule "polySimp_addComm1" (formula "16") (term "0"))
               (rule "polySimp_sepPosMonomial" (formula "17") (term "0"))
               (rule "polySimp_mulComm0" (formula "17") (term "1,0"))
               (rule "polySimp_rightDist" (formula "17") (term "1,0"))
               (rule "polySimp_mulLiterals" (formula "17") (term "1,1,0"))
               (rule "mul_literals" (formula "17") (term "0,1,0"))
               (rule "polySimp_elimOne" (formula "17") (term "1,1,0"))
               (rule "polySimp_sepNegMonomial" (formula "18") (term "0"))
               (rule "polySimp_mulLiterals" (formula "18") (term "0,0"))
               (rule "polySimp_elimOne" (formula "18") (term "0,0"))
               (rule "inEqSimp_sepNegMonomial0" (formula "20"))
               (rule "polySimp_mulLiterals" (formula "20") (term "0"))
               (rule "polySimp_elimOne" (formula "20") (term "0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "1"))
               (rule "polySimp_mulComm0" (formula "17") (term "1,1"))
               (rule "polySimp_rightDist" (formula "17") (term "1,1"))
               (rule "polySimp_mulLiterals" (formula "17") (term "1,1,1"))
               (rule "mul_literals" (formula "17") (term "0,1,1"))
               (rule "polySimp_elimOne" (formula "17") (term "1,1,1"))
               (rule "inEqSimp_sepPosMonomial0" (formula "2"))
               (rule "polySimp_mulLiterals" (formula "2") (term "1"))
               (rule "polySimp_elimOne" (formula "2") (term "1"))
               (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "0,1,0"))
               (rule "polySimp_mulComm0" (formula "1") (term "1,0,1,0"))
               (rule "polySimp_rightDist" (formula "1") (term "1,0,1,0"))
               (rule "mul_literals" (formula "1") (term "0,1,0,1,0"))
               (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,1,0"))
               (rule "polySimp_elimOne" (formula "1") (term "1,1,0,1,0"))
               (rule "inEqSimp_sepNegMonomial1" (formula "15"))
               (rule "polySimp_mulLiterals" (formula "15") (term "0"))
               (rule "polySimp_elimOne" (formula "15") (term "0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "16"))
               (rule "polySimp_mulComm0" (formula "16") (term "1"))
               (rule "polySimp_rightDist" (formula "16") (term "1"))
               (rule "polySimp_mulLiterals" (formula "16") (term "1,1"))
               (rule "mul_literals" (formula "16") (term "0,1"))
               (rule "polySimp_elimOne" (formula "16") (term "1,1"))
               (rule "inEqSimp_sepPosMonomial1" (formula "1"))
               (rule "polySimp_mulLiterals" (formula "1") (term "1"))
               (rule "polySimp_elimOne" (formula "1") (term "1"))
               (rule "inEqSimp_subsumption1" (formula "13") (ifseqformula "19"))
               (rule "leq_literals" (formula "13") (term "0"))
                (builtin "One Step Simplification" (formula "13"))
               (rule "true_left" (formula "13"))
               (rule "inEqSimp_contradInEq0" (formula "19") (ifseqformula "2"))
               (rule "andLeft" (formula "19"))
               (rule "inEqSimp_homoInEq1" (formula "19"))
               (rule "polySimp_pullOutFactor1b" (formula "19") (term "0"))
               (rule "add_literals" (formula "19") (term "1,1,0"))
               (rule "times_zero_1" (formula "19") (term "1,0"))
               (rule "add_zero_right" (formula "19") (term "0"))
               (rule "leq_literals" (formula "19"))
               (rule "closeFalse" (formula "19"))
            )
            (branch "Case 2"
               (rule "ifthenelse_split" (formula "20") (term "0") (userinteraction))
               (branch " self.sorted_splitters[javaSubInt(b, javaDivInt(d, 2))] < value TRUE"
                  (rule "close" (formula "21") (ifseqformula "11"))
               )
               (branch " self.sorted_splitters[javaSubInt(b, javaDivInt(d, 2))] < value FALSE"
                  (rule "powPositive" (formula "15") (term "1,1") (userinteraction))
                  (rule "expand_inInt" (formula "4"))
                  (rule "expand_inInt" (formula "5"))
                  (rule "expand_inInt" (formula "6"))
                  (rule "expand_inInt" (formula "7"))
                  (rule "greater_literals" (formula "15") (term "1,0"))
                   (builtin "One Step Simplification" (formula "15"))
                  (rule "replace_int_MIN" (formula "4") (term "0,1"))
                  (rule "replace_int_MAX" (formula "4") (term "1,0"))
                  (rule "replace_int_MAX" (formula "5") (term "1,0"))
                  (rule "replace_int_MIN" (formula "5") (term "0,1"))
                  (rule "replace_int_MIN" (formula "6") (term "0,1"))
                  (rule "replace_int_MAX" (formula "6") (term "1,0"))
                  (rule "replace_int_MAX" (formula "7") (term "1,0"))
                  (rule "replace_int_MIN" (formula "7") (term "0,1"))
                  (rule "andLeft" (formula "4"))
                  (rule "andLeft" (formula "6"))
                  (rule "andLeft" (formula "8"))
                  (rule "andLeft" (formula "10"))
                  (rule "translateJavaSubInt" (formula "13") (term "0"))
                  (rule "translateJavaSubInt" (formula "14") (term "1"))
                  (rule "translateJavaSubInt" (formula "15") (term "0,0"))
                  (rule "translateJavaSubInt" (formula "15") (term "0,2,0,1"))
                  (rule "eqSymm" (formula "16") (term "0"))
                  (rule "translateJavaSubInt" (formula "25") (term "0,2,0"))
                  (rule "translateJavaSubInt" (formula "20") (term "1,0"))
                  (rule "translateJavaSubInt" (formula "20") (term "0,1,1,1"))
                  (rule "eqSymm" (formula "21"))
                  (rule "translateJavaSubInt" (formula "26") (term "0"))
                  (rule "translateJavaSubInt" (formula "26") (term "1"))
                  (rule "translateJavaSubInt" (formula "19") (term "0,1,0,1"))
                  (rule "translateJavaSubInt" (formula "19") (term "0,0,0"))
                  (rule "translateJavaSubInt" (formula "16") (term "0,0"))
                  (rule "translateJavaDivInt" (formula "25") (term "1,0,2,0"))
                  (rule "translateJavaSubInt" (formula "21") (term "1,0"))
                  (rule "translateJavaDivInt" (formula "26") (term "1,0"))
                  (rule "polySimp_elimSub" (formula "13") (term "0"))
                  (rule "mul_literals" (formula "13") (term "1,0"))
                  (rule "polySimp_elimSub" (formula "14") (term "1"))
                  (rule "mul_literals" (formula "14") (term "1,1"))
                  (rule "polySimp_elimSub" (formula "15") (term "0,0"))
                  (rule "polySimp_elimSub" (formula "15") (term "0,2,0,1"))
                  (rule "polySimp_elimSub" (formula "20") (term "1,0"))
                  (rule "polySimp_elimSub" (formula "20") (term "1,1,1"))
                  (rule "mul_literals" (formula "20") (term "1,1,1,1"))
                  (rule "polySimp_elimSub" (formula "26") (term "1"))
                  (rule "mul_literals" (formula "26") (term "1,1"))
                  (rule "polySimp_elimSub" (formula "19") (term "0,1,0,1"))
                  (rule "polySimp_elimSub" (formula "19") (term "0,0"))
                  (rule "mul_literals" (formula "19") (term "1,0,0"))
                  (rule "polySimp_elimSub" (formula "16") (term "0,0"))
                  (rule "mul_literals" (formula "16") (term "1,0,0"))
                  (rule "polySimp_elimSub" (formula "25") (term "0,2,0"))
                  (rule "polySimp_elimSub" (formula "21") (term "1,0"))
                  (rule "polySimp_elimSub" (formula "26") (term "0"))
                  (rule "polySimp_homoEq" (formula "15") (term "0"))
                  (rule "polySimp_elimSub" (formula "20") (term "0,1,1,1"))
                  (rule "polySimp_elimSub" (formula "19") (term "1,0,1"))
                  (rule "mul_literals" (formula "19") (term "1,1,0,1"))
                  (rule "polySimp_elimSub" (formula "19") (term "0,0,0"))
                  (rule "polySimp_homoEq" (formula "16") (term "0"))
                  (rule "polySimp_mulComm0" (formula "15") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "20") (term "1"))
                  (rule "eqSymm" (formula "20"))
                  (rule "polySimp_mulComm0" (formula "16") (term "1,0,0"))
                  (rule "polySimp_addComm0" (formula "13") (term "0"))
                  (rule "polySimp_addComm0" (formula "14") (term "1"))
                  (rule "polySimp_addComm0" (formula "26") (term "1"))
                  (rule "polySimp_addComm0" (formula "21") (term "1,0"))
                  (rule "polySimp_addComm0" (formula "19") (term "0,1,0,1"))
                  (rule "polySimp_addComm0" (formula "19") (term "0,0,0"))
                  (rule "polySimp_addComm0" (formula "20") (term "1,1"))
                  (rule "polySimp_addComm0" (formula "20") (term "0,1,0,0"))
                  (rule "polySimp_addComm0" (formula "16") (term "1,1,0,0"))
                  (rule "polySimp_addComm1" (formula "19") (term "1,0,1"))
                  (rule "polySimp_addComm1" (formula "19") (term "0,0"))
                  (rule "polySimp_rightDist" (formula "15") (term "1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "15") (term "1,1,0,0"))
                  (rule "polySimp_elimOne" (formula "15") (term "1,1,0,0"))
                  (rule "polySimp_mulComm0" (formula "15") (term "0,1,0,0"))
                  (rule "polySimp_addComm1" (formula "20") (term "1,0,0"))
                  (rule "polySimp_addComm0" (formula "19") (term "0,1,0,1"))
                  (rule "polySimp_addComm0" (formula "19") (term "0,0,0"))
                  (rule "inEqSimp_ltToLeq" (formula "18"))
                  (rule "polySimp_mulComm0" (formula "18") (term "1,0,0"))
                  (rule "polySimp_addComm0" (formula "20") (term "0,1,0,0"))
                  (rule "polySimp_rightDist" (formula "16") (term "1,0,0"))
                  (rule "mul_literals" (formula "16") (term "0,1,0,0"))
                  (rule "polySimp_addComm1" (formula "18") (term "0"))
                  (rule "inEqSimp_commuteLeq" (formula "17"))
                  (rule "inEqSimp_commuteLeq" (formula "16") (term "1"))
                  (rule "inEqSimp_ltToLeq" (formula "15") (term "1"))
                  (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,1"))
                  (rule "inEqSimp_ltRight" (formula "25"))
                  (rule "polySimp_mulComm0" (formula "1") (term "0,0"))
                  (rule "polySimp_addAssoc" (formula "16") (term "0,0"))
                  (rule "inEqSimp_commuteLeq" (formula "6"))
                  (rule "inEqSimp_commuteLeq" (formula "8"))
                  (rule "inEqSimp_commuteLeq" (formula "10"))
                  (rule "polySimp_addAssoc" (formula "17") (term "0,0"))
                  (rule "polySimp_addComm0" (formula "17") (term "0,0,0"))
                  (rule "inEqSimp_leqRight" (formula "26"))
                  (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                  (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                  (rule "inEqSimp_commuteLeq" (formula "13"))
                  (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                  (rule "add_literals" (formula "1") (term "0,0,0"))
                  (rule "add_zero_left" (formula "1") (term "0,0"))
                  (rule "polySimp_addComm0" (formula "1") (term "0"))
                  (rule "inEqSimp_homoInEq0" (formula "15"))
                  (rule "polySimp_mulComm0" (formula "15") (term "1,0"))
                  (rule "polySimp_rightDist" (formula "15") (term "1,0"))
                  (rule "mul_literals" (formula "15") (term "0,1,0"))
                  (rule "polySimp_addAssoc" (formula "15") (term "0"))
                  (rule "polySimp_addComm0" (formula "15") (term "0,0"))
                  (rule "inEqSimp_homoInEq0" (formula "16"))
                  (rule "polySimp_addComm1" (formula "16") (term "0"))
                  (rule "applyEq" (formula "22") (term "1") (ifseqformula "23"))
                  (rule "polySimp_sepPosMonomial" (formula "17") (term "0"))
                  (rule "polySimp_mulComm0" (formula "17") (term "1,0"))
                  (rule "polySimp_rightDist" (formula "17") (term "1,0"))
                  (rule "polySimp_mulLiterals" (formula "17") (term "1,1,0"))
                  (rule "mul_literals" (formula "17") (term "0,1,0"))
                  (rule "polySimp_elimOne" (formula "17") (term "1,1,0"))
                  (rule "polySimp_sepNegMonomial" (formula "18") (term "0"))
                  (rule "polySimp_mulLiterals" (formula "18") (term "0,0"))
                  (rule "polySimp_elimOne" (formula "18") (term "0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "21") (term "0"))
                  (rule "polySimp_mulComm0" (formula "21") (term "1,0"))
                  (rule "polySimp_rightDist" (formula "21") (term "1,0"))
                  (rule "polySimp_mulLiterals" (formula "21") (term "1,1,0"))
                  (rule "mul_literals" (formula "21") (term "0,1,0"))
                  (rule "polySimp_elimOne" (formula "21") (term "1,1,0"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "20"))
                  (rule "polySimp_mulLiterals" (formula "20") (term "0"))
                  (rule "polySimp_elimOne" (formula "20") (term "0"))
                  (rule "replace_known_left" (formula "21") (term "0") (ifseqformula "20"))
                   (builtin "One Step Simplification" (formula "21"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "1"))
                  (rule "polySimp_mulComm0" (formula "17") (term "1,1"))
                  (rule "polySimp_rightDist" (formula "17") (term "1,1"))
                  (rule "polySimp_mulLiterals" (formula "17") (term "1,1,1"))
                  (rule "mul_literals" (formula "17") (term "0,1,1"))
                  (rule "polySimp_elimOne" (formula "17") (term "1,1,1"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                  (rule "polySimp_mulLiterals" (formula "2") (term "1"))
                  (rule "polySimp_elimOne" (formula "2") (term "1"))
                  (rule "inEqSimp_sepNegMonomial1" (formula "1"))
                  (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                  (rule "polySimp_elimOne" (formula "1") (term "0"))
                  (rule "inEqSimp_sepNegMonomial1" (formula "15"))
                  (rule "polySimp_mulLiterals" (formula "15") (term "0"))
                  (rule "polySimp_elimOne" (formula "15") (term "0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "16"))
                  (rule "polySimp_mulComm0" (formula "16") (term "1"))
                  (rule "polySimp_rightDist" (formula "16") (term "1"))
                  (rule "polySimp_mulLiterals" (formula "16") (term "1,1"))
                  (rule "mul_literals" (formula "16") (term "0,1"))
                  (rule "polySimp_elimOne" (formula "16") (term "1,1"))
                  (rule "inEqSimp_subsumption1" (formula "13") (ifseqformula "19"))
                  (rule "leq_literals" (formula "13") (term "0"))
                   (builtin "One Step Simplification" (formula "13"))
                  (rule "true_left" (formula "13"))
                  (rule "newSym_eq" (formula "21") (inst "l=l_0") (inst "newSymDef=mul(d, Z(0(#)))"))
                  (rule "times_zero_1" (formula "21") (term "1,1"))
                  (rule "add_zero_right" (formula "21") (term "1"))
                  (rule "applyEq" (formula "20") (term "0") (ifseqformula "21"))
                  (rule "applyEq" (formula "22") (term "0,0") (ifseqformula "21"))
                  (rule "eqSymm" (formula "22"))
                  (rule "applyEq" (formula "16") (term "0,1,0,2,0,1") (ifseqformula "22"))
                  (rule "polySimp_mulLiterals" (formula "16") (term "1,0,2,0,1"))
                  (rule "polySimp_addComm0" (formula "16") (term "0,2,0,1"))
                  (rule "applyEq" (formula "16") (term "0,0") (ifseqformula "22"))
                  (rule "polySimp_homoEq" (formula "16") (term "0"))
                  (rule "polySimp_mulLiterals" (formula "16") (term "1,0,0"))
                  (rule "polySimp_addComm1" (formula "16") (term "0,0"))
                  (rule "applyEq" (formula "14") (term "0") (ifseqformula "22"))
                  (rule "inEqSimp_homoInEq0" (formula "14"))
                  (rule "polySimp_mulLiterals" (formula "14") (term "1,0"))
                  (rule "polySimp_addComm1" (formula "14") (term "0"))
                  (rule "applyEq" (formula "1") (term "0,0,1,1") (ifseqformula "22"))
                  (rule "applyEq" (formula "8") (term "0") (ifseqformula "22"))
                  (rule "applyEq" (formula "2") (term "0,0,1,0,2,0") (ifseqformula "22"))
                  (rule "applyEq" (formula "9") (term "0") (ifseqformula "22"))
                  (rule "applyEq" (formula "23") (term "1") (ifseqformula "22"))
                  (rule "polySimp_sepPosMonomial" (formula "16") (term "0"))
                  (rule "polySimp_mulComm0" (formula "16") (term "1,0"))
                  (rule "polySimp_rightDist" (formula "16") (term "1,0"))
                  (rule "polySimp_mulLiterals" (formula "16") (term "1,1,0"))
                  (rule "mul_literals" (formula "16") (term "0,1,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "14"))
                  (rule "polySimp_mulComm0" (formula "14") (term "1"))
                  (rule "polySimp_rightDist" (formula "14") (term "1"))
                  (rule "polySimp_mulLiterals" (formula "14") (term "1,1"))
                  (rule "mul_literals" (formula "14") (term "0,1"))
                  (rule "inEqSimp_subsumption6" (formula "9") (ifseqformula "20"))
                  (rule "mul_literals" (formula "9") (term "1,1,0"))
                  (rule "greater_literals" (formula "9") (term "0,0"))
                   (builtin "One Step Simplification" (formula "9"))
                  (rule "leq_literals" (formula "9") (term "0"))
                   (builtin "One Step Simplification" (formula "9"))
                  (rule "true_left" (formula "9"))
                  (rule "elimGcdLeq_antec" (formula "8") (inst "elimGcdRightDiv=Z(3(2(8(1(4(7(3(7(0(1(#)))))))))))") (inst "elimGcdLeftDiv=l_0") (inst "elimGcd=Z(2(#))"))
                  (rule "polySimp_mulLiterals" (formula "8") (term "1,0,1,0"))
                  (rule "polySimp_mulLiterals" (formula "8") (term "1,0,0,0,0,1,0"))
                  (rule "neg_literal" (formula "8") (term "0,0,0,0,0,1,0"))
                  (rule "leq_literals" (formula "8") (term "0,0"))
                   (builtin "One Step Simplification" (formula "8"))
                  (rule "mul_literals" (formula "8") (term "1,0,0,0,0,0"))
                  (rule "polySimp_addLiterals" (formula "8") (term "0,0,0,0"))
                  (rule "add_literals" (formula "8") (term "0,0,0,0"))
                  (rule "polySimp_pullOutFactor0b" (formula "8") (term "0,0"))
                  (rule "add_literals" (formula "8") (term "1,1,0,0"))
                  (rule "times_zero_1" (formula "8") (term "1,0,0"))
                  (rule "add_zero_right" (formula "8") (term "0,0"))
                  (rule "qeq_literals" (formula "8") (term "0"))
                   (builtin "One Step Simplification" (formula "8"))
                  (rule "inEqSimp_exactShadow3" (formula "14") (ifseqformula "1"))
                  (rule "polySimp_rightDist" (formula "14") (term "0,0"))
                  (rule "mul_literals" (formula "14") (term "0,0,0"))
                  (rule "polySimp_addAssoc" (formula "14") (term "0"))
                  (rule "polySimp_pullOutFactor2b" (formula "14") (term "0,0"))
                  (rule "add_literals" (formula "14") (term "1,1,0,0"))
                  (rule "times_zero_1" (formula "14") (term "1,0,0"))
                  (rule "add_zero_right" (formula "14") (term "0,0"))
                  (rule "inEqSimp_sepNegMonomial1" (formula "14"))
                  (rule "polySimp_mulLiterals" (formula "14") (term "0"))
                  (rule "polySimp_elimOne" (formula "14") (term "0"))
                  (rule "inEqSimp_exactShadow3" (formula "13") (ifseqformula "6"))
                  (rule "polySimp_rightDist" (formula "13") (term "0,0"))
                  (rule "polySimp_mulLiterals" (formula "13") (term "1,0,0"))
                  (rule "mul_literals" (formula "13") (term "0,0,0"))
                  (rule "polySimp_addComm1" (formula "13") (term "0"))
                  (rule "add_literals" (formula "13") (term "0,0"))
                  (rule "inEqSimp_sepNegMonomial1" (formula "13"))
                  (rule "polySimp_mulLiterals" (formula "13") (term "0"))
                  (rule "inEqSimp_subsumption4" (formula "13") (ifseqformula "8"))
                  (rule "mul_literals" (formula "13") (term "0,1,0"))
                  (rule "greater_literals" (formula "13") (term "0,0"))
                   (builtin "One Step Simplification" (formula "13"))
                  (rule "leq_literals" (formula "13") (term "0"))
                   (builtin "One Step Simplification" (formula "13"))
                  (rule "true_left" (formula "13"))
                  (rule "Free_class_invariant_axiom_for_de_wiesler_Tree" (formula "25"))
                  (rule "true_left" (formula "25"))
                  (rule "Class_invariant_axiom_for_de_wiesler_Tree" (formula "24") (inst "i=i") (inst "i_0=i_0"))
                   (builtin "One Step Simplification" (formula "24"))
                  (rule "expand_inInt" (formula "24") (term "1,0,0,1"))
                  (rule "expand_inInt" (formula "24") (term "1,0,0,1,0"))
                  (rule "replace_int_MAX" (formula "24") (term "1,0,1,0,0,1"))
                  (rule "replace_int_MIN" (formula "24") (term "0,1,1,0,0,1"))
                  (rule "replace_int_MAX" (formula "24") (term "1,0,1,0,0,1,0"))
                  (rule "replace_int_MIN" (formula "24") (term "0,1,1,0,0,1,0"))
                  (rule "andLeft" (formula "24"))
                  (rule "andLeft" (formula "24"))
                  (rule "andLeft" (formula "24"))
                  (rule "andLeft" (formula "24"))
                  (rule "andLeft" (formula "24"))
                  (rule "andLeft" (formula "25"))
                  (rule "andLeft" (formula "24"))
                  (rule "andLeft" (formula "24"))
                  (rule "andLeft" (formula "24"))
                  (rule "andLeft" (formula "26"))
                  (rule "notLeft" (formula "25"))
                  (rule "notLeft" (formula "24"))
                  (rule "translateJavaSubInt" (formula "32") (term "0,2,1,1,0"))
                  (rule "translateJavaSubInt" (formula "30") (term "3,0"))
                  (rule "translateJavaShiftLeftInt" (formula "26") (term "1"))
                  (rule "eqSymm" (formula "32") (term "1,0"))
                  (rule "polySimp_elimSub" (formula "30") (term "3,0"))
                  (rule "mul_literals" (formula "30") (term "1,3,0"))
                  (rule "polySimp_elimSub" (formula "32") (term "0,2,0,1,0"))
                  (rule "mul_literals" (formula "32") (term "1,0,2,0,1,0"))
                  (rule "polySimp_addComm0" (formula "30") (term "3,0"))
                  (rule "polySimp_addComm0" (formula "32") (term "0,2,0,1,0"))
                  (rule "inEqSimp_ltToLeq" (formula "32") (term "1,0,0,0"))
                  (rule "polySimp_mulComm0" (formula "32") (term "1,0,0,1,0,0,0"))
                  (rule "inEqSimp_ltToLeq" (formula "31") (term "1,0,0,0"))
                  (rule "polySimp_mulComm0" (formula "31") (term "1,0,0,1,0,0,0"))
                  (rule "inEqSimp_ltToLeq" (formula "31") (term "1,1,0"))
                  (rule "polySimp_mulComm0" (formula "31") (term "1,0,0,1,1,0"))
                  (rule "inEqSimp_commuteLeq" (formula "32") (term "0,0,0,0"))
                  (rule "inEqSimp_commuteLeq" (formula "32") (term "1,1,0,0"))
                  (rule "inEqSimp_commuteLeq" (formula "31") (term "0,0,0,0"))
                  (rule "inEqSimp_commuteLeq" (formula "31") (term "0,1,0"))
                  (rule "inEqSimp_commuteLeq" (formula "31") (term "1,1,0,0"))
                  (rule "inEqSimp_commuteLeq" (formula "29"))
                  (rule "inEqSimp_commuteLeq" (formula "28"))
                  (rule "inEqSimp_commuteLeq" (formula "27"))
                  (rule "inEqSimp_commuteLeq" (formula "24"))
                  (rule "applyEq" (formula "27") (term "0") (ifseqformula "26"))
                  (rule "applyEq" (formula "28") (term "1") (ifseqformula "26"))
                  (rule "applyEq" (formula "30") (term "1,3,0") (ifseqformula "26"))
                  (rule "applyEq" (formula "17") (term "0,0") (ifseqformula "26"))
                  (rule "applyEq" (formula "29") (term "1") (ifseqformula "26"))
                  (rule "applyEq" (formula "1") (term "0") (ifseqformula "26"))
                  (rule "applyEq" (formula "15") (term "0") (ifseqformula "26"))
                  (rule "applyEq" (formula "31") (term "0,1,0,0,1,0,0,0") (ifseqformula "26"))
                  (rule "applyEq" (formula "32") (term "0,1,0,0,1,0,0,0") (ifseqformula "26"))
                  (rule "applyEq" (formula "31") (term "0,1,0,0,1,1,0") (ifseqformula "26"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "31") (term "1,0,0,0"))
                  (rule "polySimp_mulComm0" (formula "31") (term "1,1,0,0,0"))
                  (rule "polySimp_rightDist" (formula "31") (term "1,1,0,0,0"))
                  (rule "mul_literals" (formula "31") (term "0,1,1,0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "31") (term "1,1,1,0,0,0"))
                  (rule "polySimp_elimOne" (formula "31") (term "1,1,1,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "32") (term "1,0,0,0"))
                  (rule "polySimp_mulComm0" (formula "32") (term "1,1,0,0,0"))
                  (rule "polySimp_rightDist" (formula "32") (term "1,1,0,0,0"))
                  (rule "mul_literals" (formula "32") (term "0,1,1,0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "32") (term "1,1,1,0,0,0"))
                  (rule "polySimp_elimOne" (formula "32") (term "1,1,1,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "31") (term "1,1,0"))
                  (rule "polySimp_mulComm0" (formula "31") (term "1,1,1,0"))
                  (rule "polySimp_rightDist" (formula "31") (term "1,1,1,0"))
                  (rule "mul_literals" (formula "31") (term "0,1,1,1,0"))
                  (rule "polySimp_mulLiterals" (formula "31") (term "1,1,1,1,0"))
                  (rule "polySimp_elimOne" (formula "31") (term "1,1,1,1,0"))
                  (rule "javaShiftLeftIntDef" (formula "26") (term "1"))
                  (rule "mod_axiom" (formula "26") (term "1,0,1"))
                  (rule "polySimp_mulLiterals" (formula "26") (term "1,1,0,1"))
                  (rule "javaShiftLeftIntDef" (formula "27") (term "0"))
                  (rule "mod_axiom" (formula "27") (term "1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "27") (term "1,1,0,0"))
                  (rule "javaShiftLeftIntDef" (formula "28") (term "1"))
                  (rule "mod_axiom" (formula "28") (term "1,0,1"))
                  (rule "polySimp_mulLiterals" (formula "28") (term "1,1,0,1"))
                  (rule "javaShiftLeftIntDef" (formula "30") (term "1,3,0"))
                  (rule "mod_axiom" (formula "30") (term "1,0,1,3,0"))
                  (rule "polySimp_mulLiterals" (formula "30") (term "1,1,0,1,3,0"))
                  (rule "javaShiftLeftIntDef" (formula "17") (term "0,0"))
                  (rule "mod_axiom" (formula "17") (term "1,0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "17") (term "1,1,0,0,0"))
                  (rule "javaShiftLeftIntDef" (formula "29") (term "1"))
                  (rule "mod_axiom" (formula "29") (term "1,0,1"))
                  (rule "polySimp_mulLiterals" (formula "29") (term "1,1,0,1"))
                  (rule "javaShiftLeftIntDef" (formula "1") (term "0"))
                  (rule "mod_axiom" (formula "1") (term "1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0"))
                  (rule "javaShiftLeftIntDef" (formula "15") (term "0"))
                  (rule "mod_axiom" (formula "15") (term "1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "15") (term "1,1,0,0"))
                  (rule "javaShiftLeftIntDef" (formula "31") (term "1,1,1,0,0,0"))
                  (rule "mod_axiom" (formula "31") (term "1,0,1,1,1,0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "31") (term "1,1,0,1,1,1,0,0,0"))
                  (rule "javaShiftLeftIntDef" (formula "32") (term "1,1,1,0,0,0"))
                  (rule "mod_axiom" (formula "32") (term "1,0,1,1,1,0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "32") (term "1,1,0,1,1,1,0,0,0"))
                  (rule "javaShiftLeftIntDef" (formula "31") (term "1,1,1,1,0"))
                  (rule "mod_axiom" (formula "31") (term "1,0,1,1,1,1,0"))
                  (rule "polySimp_mulLiterals" (formula "31") (term "1,1,0,1,1,1,1,0"))
                  (rule "shiftLeftDef" (formula "26") (term "0,1"))
                  (rule "eqSymm" (formula "26"))
                  (rule "polySimp_elimNeg" (formula "26") (term "1,1,0,0"))
                  (rule "polySimp_mulComm0" (formula "26") (term "1,1,0,0"))
                  (rule "polySimp_rightDist" (formula "26") (term "1,1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "26") (term "1,1,1,0,0"))
                  (rule "polySimp_mulComm0" (formula "26") (term "0,1,1,0,0"))
                  (rule "shiftLeftPositiveShiftDef" (formula "26") (term "2,0,0"))
                  (rule "polySimp_elimOneLeft0" (formula "26") (term "2,0,0"))
                  (rule "shiftRightPositiveShiftDef" (formula "26") (term "1,0,0"))
                  (rule "inEqSimp_ltToLeq" (formula "26") (term "0,0,0"))
                  (rule "times_zero_1" (formula "26") (term "1,0,0,0,0,0"))
                  (rule "add_zero_right" (formula "26") (term "0,0,0,0,0"))
                  (rule "polySimp_addAssoc" (formula "26") (term "0,0,0,0"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "26") (term "0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "26") (term "0,0,0,0"))
                  (rule "shiftLeftDef" (formula "27") (term "0,0"))
                  (rule "polySimp_elimNeg" (formula "27") (term "1,1,0,0"))
                  (rule "polySimp_mulComm0" (formula "27") (term "1,1,0,0"))
                  (rule "polySimp_rightDist" (formula "27") (term "1,1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "27") (term "1,1,1,0,0"))
                  (rule "polySimp_mulComm0" (formula "27") (term "0,1,1,0,0"))
                  (rule "shiftLeftPositiveShiftDef" (formula "27") (term "2,0,0"))
                  (rule "polySimp_elimOneLeft0" (formula "27") (term "2,0,0"))
                  (rule "shiftRightPositiveShiftDef" (formula "27") (term "1,0,0"))
                  (rule "inEqSimp_ltToLeq" (formula "27") (term "0,0,0"))
                  (rule "times_zero_1" (formula "27") (term "1,0,0,0,0,0"))
                  (rule "add_zero_right" (formula "27") (term "0,0,0,0,0"))
                  (rule "polySimp_addAssoc" (formula "27") (term "0,0,0,0"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "27") (term "0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "27") (term "0,0,0,0"))
                  (rule "applyEq" (formula "27") (term "0") (ifseqformula "26"))
                  (rule "shiftLeftDef" (formula "28") (term "0,1"))
                  (rule "polySimp_elimNeg" (formula "28") (term "1,1,0,1"))
                  (rule "polySimp_mulComm0" (formula "28") (term "1,1,0,1"))
                  (rule "polySimp_rightDist" (formula "28") (term "1,1,0,1"))
                  (rule "polySimp_mulLiterals" (formula "28") (term "1,1,1,0,1"))
                  (rule "polySimp_mulComm0" (formula "28") (term "0,1,1,0,1"))
                  (rule "shiftLeftPositiveShiftDef" (formula "28") (term "2,0,1"))
                  (rule "polySimp_elimOneLeft0" (formula "28") (term "2,0,1"))
                  (rule "shiftRightPositiveShiftDef" (formula "28") (term "1,0,1"))
                  (rule "inEqSimp_ltToLeq" (formula "28") (term "0,0,1"))
                  (rule "times_zero_1" (formula "28") (term "1,0,0,0,0,1"))
                  (rule "add_zero_right" (formula "28") (term "0,0,0,0,1"))
                  (rule "polySimp_addAssoc" (formula "28") (term "0,0,0,1"))
                  (rule "inEqSimp_commuteGeq" (formula "28"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "28") (term "0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "28") (term "0,0,0,0"))
                  (rule "applyEq" (formula "28") (term "0") (ifseqformula "26"))
                  (rule "inEqSimp_commuteLeq" (formula "28"))
                  (rule "shiftLeftDef" (formula "30") (term "0,1,3,0"))
                  (rule "polySimp_elimNeg" (formula "30") (term "1,1,0,1,3,0"))
                  (rule "polySimp_mulComm0" (formula "30") (term "1,1,0,1,3,0"))
                  (rule "polySimp_rightDist" (formula "30") (term "1,1,0,1,3,0"))
                  (rule "polySimp_mulLiterals" (formula "30") (term "1,1,1,0,1,3,0"))
                  (rule "polySimp_mulComm0" (formula "30") (term "0,1,1,0,1,3,0"))
                  (rule "shiftLeftPositiveShiftDef" (formula "30") (term "2,0,1,3,0"))
                  (rule "polySimp_elimOneLeft0" (formula "30") (term "2,0,1,3,0"))
                  (rule "shiftRightPositiveShiftDef" (formula "30") (term "1,0,1,3,0"))
                  (rule "inEqSimp_ltToLeq" (formula "30") (term "0,0,1,3,0"))
                  (rule "times_zero_1" (formula "30") (term "1,0,0,0,0,1,3,0"))
                  (rule "add_zero_right" (formula "30") (term "0,0,0,0,1,3,0"))
                  (rule "polySimp_addAssoc" (formula "30") (term "0,0,0,1,3,0"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "30") (term "0,0,1,3,0"))
                  (rule "polySimp_mulLiterals" (formula "30") (term "0,0,0,1,3,0"))
                  (rule "applyEq" (formula "30") (term "1,3,0") (ifseqformula "26"))
                  (rule "shiftLeftDef" (formula "17") (term "0,0,0"))
                  (rule "polySimp_elimNeg" (formula "17") (term "1,1,0,0,0"))
                  (rule "polySimp_mulComm0" (formula "17") (term "1,1,0,0,0"))
                  (rule "polySimp_rightDist" (formula "17") (term "1,1,0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "17") (term "1,1,1,0,0,0"))
                  (rule "polySimp_mulComm0" (formula "17") (term "0,1,1,0,0,0"))
                  (rule "shiftLeftPositiveShiftDef" (formula "17") (term "2,0,0,0"))
                  (rule "polySimp_elimOneLeft0" (formula "17") (term "2,0,0,0"))
                  (rule "shiftRightPositiveShiftDef" (formula "17") (term "1,0,0,0"))
                  (rule "inEqSimp_ltToLeq" (formula "17") (term "0,0,0,0"))
                  (rule "times_zero_1" (formula "17") (term "1,0,0,0,0,0,0"))
                  (rule "add_zero_right" (formula "17") (term "0,0,0,0,0,0"))
                  (rule "polySimp_addAssoc" (formula "17") (term "0,0,0,0,0"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "17") (term "0,0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "17") (term "0,0,0,0,0"))
                  (rule "applyEq" (formula "17") (term "0,0") (ifseqformula "26"))
                  (rule "shiftLeftDef" (formula "29") (term "0,1"))
                  (rule "polySimp_elimNeg" (formula "29") (term "1,1,0,1"))
                  (rule "polySimp_mulComm0" (formula "29") (term "1,1,0,1"))
                  (rule "polySimp_rightDist" (formula "29") (term "1,1,0,1"))
                  (rule "polySimp_mulLiterals" (formula "29") (term "1,1,1,0,1"))
                  (rule "polySimp_mulComm0" (formula "29") (term "0,1,1,0,1"))
                  (rule "shiftLeftPositiveShiftDef" (formula "29") (term "2,0,1"))
                  (rule "polySimp_elimOneLeft0" (formula "29") (term "2,0,1"))
                  (rule "shiftRightPositiveShiftDef" (formula "29") (term "1,0,1"))
                  (rule "inEqSimp_ltToLeq" (formula "29") (term "0,0,1"))
                  (rule "times_zero_1" (formula "29") (term "1,0,0,0,0,1"))
                  (rule "add_zero_right" (formula "29") (term "0,0,0,0,1"))
                  (rule "polySimp_addAssoc" (formula "29") (term "0,0,0,1"))
                  (rule "inEqSimp_commuteGeq" (formula "29"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "29") (term "0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "29") (term "0,0,0,0"))
                  (rule "applyEq" (formula "29") (term "0") (ifseqformula "26"))
                  (rule "inEqSimp_commuteLeq" (formula "29"))
                  (rule "shiftLeftDef" (formula "1") (term "0,0"))
                  (rule "polySimp_elimNeg" (formula "1") (term "1,1,0,0"))
                  (rule "polySimp_mulComm0" (formula "1") (term "1,1,0,0"))
                  (rule "polySimp_rightDist" (formula "1") (term "1,1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,0,0"))
                  (rule "polySimp_mulComm0" (formula "1") (term "0,1,1,0,0"))
                  (rule "shiftLeftPositiveShiftDef" (formula "1") (term "2,0,0"))
                  (rule "polySimp_elimOneLeft0" (formula "1") (term "2,0,0"))
                  (rule "shiftRightPositiveShiftDef" (formula "1") (term "1,0,0"))
                  (rule "inEqSimp_ltToLeq" (formula "1") (term "0,0,0"))
                  (rule "times_zero_1" (formula "1") (term "1,0,0,0,0,0"))
                  (rule "add_zero_right" (formula "1") (term "0,0,0,0,0"))
                  (rule "polySimp_addAssoc" (formula "1") (term "0,0,0,0"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "1") (term "0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "1") (term "0,0,0,0"))
                  (rule "applyEq" (formula "1") (term "0") (ifseqformula "26"))
                  (rule "shiftLeftDef" (formula "15") (term "0,0"))
                  (rule "polySimp_elimNeg" (formula "15") (term "1,1,0,0"))
                  (rule "polySimp_mulComm0" (formula "15") (term "1,1,0,0"))
                  (rule "polySimp_rightDist" (formula "15") (term "1,1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "15") (term "1,1,1,0,0"))
                  (rule "polySimp_mulComm0" (formula "15") (term "0,1,1,0,0"))
                  (rule "shiftLeftPositiveShiftDef" (formula "15") (term "2,0,0"))
                  (rule "polySimp_elimOneLeft0" (formula "15") (term "2,0,0"))
                  (rule "shiftRightPositiveShiftDef" (formula "15") (term "1,0,0"))
                  (rule "inEqSimp_ltToLeq" (formula "15") (term "0,0,0"))
                  (rule "times_zero_1" (formula "15") (term "1,0,0,0,0,0"))
                  (rule "add_zero_right" (formula "15") (term "0,0,0,0,0"))
                  (rule "polySimp_addAssoc" (formula "15") (term "0,0,0,0"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "15") (term "0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "15") (term "0,0,0,0"))
                  (rule "applyEq" (formula "15") (term "0") (ifseqformula "26"))
                  (rule "shiftLeftDef" (formula "31") (term "0,1,1,1,0,0,0"))
                  (rule "polySimp_elimNeg" (formula "31") (term "1,1,0,1,1,1,0,0,0"))
                  (rule "polySimp_mulComm0" (formula "31") (term "1,1,0,1,1,1,0,0,0"))
                  (rule "polySimp_rightDist" (formula "31") (term "1,1,0,1,1,1,0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "31") (term "1,1,1,0,1,1,1,0,0,0"))
                  (rule "polySimp_mulComm0" (formula "31") (term "0,1,1,0,1,1,1,0,0,0"))
                  (rule "shiftLeftPositiveShiftDef" (formula "31") (term "2,0,1,1,1,0,0,0"))
                  (rule "polySimp_elimOneLeft0" (formula "31") (term "2,0,1,1,1,0,0,0"))
                  (rule "shiftRightPositiveShiftDef" (formula "31") (term "1,0,1,1,1,0,0,0"))
                  (rule "inEqSimp_ltToLeq" (formula "31") (term "0,0,1,1,1,0,0,0"))
                  (rule "times_zero_1" (formula "31") (term "1,0,0,0,0,1,1,1,0,0,0"))
                  (rule "add_zero_right" (formula "31") (term "0,0,0,0,1,1,1,0,0,0"))
                  (rule "polySimp_addAssoc" (formula "31") (term "0,0,0,1,1,1,0,0,0"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "31") (term "0,0,1,1,1,0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "31") (term "0,0,0,1,1,1,0,0,0"))
                  (rule "applyEq" (formula "31") (term "1,1,1,0,0,0") (ifseqformula "26"))
                  (rule "shiftLeftDef" (formula "32") (term "0,1,1,1,0,0,0"))
                  (rule "polySimp_elimNeg" (formula "32") (term "1,1,0,1,1,1,0,0,0"))
                  (rule "polySimp_mulComm0" (formula "32") (term "1,1,0,1,1,1,0,0,0"))
                  (rule "polySimp_rightDist" (formula "32") (term "1,1,0,1,1,1,0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "32") (term "1,1,1,0,1,1,1,0,0,0"))
                  (rule "polySimp_mulComm0" (formula "32") (term "0,1,1,0,1,1,1,0,0,0"))
                  (rule "shiftLeftPositiveShiftDef" (formula "32") (term "2,0,1,1,1,0,0,0"))
                  (rule "polySimp_elimOneLeft0" (formula "32") (term "2,0,1,1,1,0,0,0"))
                  (rule "shiftRightPositiveShiftDef" (formula "32") (term "1,0,1,1,1,0,0,0"))
                  (rule "inEqSimp_ltToLeq" (formula "32") (term "0,0,1,1,1,0,0,0"))
                  (rule "times_zero_1" (formula "32") (term "1,0,0,0,0,1,1,1,0,0,0"))
                  (rule "add_zero_right" (formula "32") (term "0,0,0,0,1,1,1,0,0,0"))
                  (rule "polySimp_addAssoc" (formula "32") (term "0,0,0,1,1,1,0,0,0"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "32") (term "0,0,1,1,1,0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "32") (term "0,0,0,1,1,1,0,0,0"))
                  (rule "applyEq" (formula "32") (term "1,1,1,0,0,0") (ifseqformula "26"))
                  (rule "shiftLeftDef" (formula "31") (term "0,1,1,1,1,0"))
                  (rule "polySimp_elimNeg" (formula "31") (term "1,1,0,1,1,1,1,0"))
                  (rule "polySimp_mulComm0" (formula "31") (term "1,1,0,1,1,1,1,0"))
                  (rule "polySimp_rightDist" (formula "31") (term "1,1,0,1,1,1,1,0"))
                  (rule "polySimp_mulLiterals" (formula "31") (term "1,1,1,0,1,1,1,1,0"))
                  (rule "polySimp_mulComm0" (formula "31") (term "0,1,1,0,1,1,1,1,0"))
                  (rule "shiftLeftPositiveShiftDef" (formula "31") (term "2,0,1,1,1,1,0"))
                  (rule "polySimp_elimOneLeft0" (formula "31") (term "2,0,1,1,1,1,0"))
                  (rule "shiftRightPositiveShiftDef" (formula "31") (term "1,0,1,1,1,1,0"))
                  (rule "inEqSimp_ltToLeq" (formula "31") (term "0,0,1,1,1,1,0"))
                  (rule "times_zero_1" (formula "31") (term "1,0,0,0,0,1,1,1,1,0"))
                  (rule "add_zero_right" (formula "31") (term "0,0,0,0,1,1,1,1,0"))
                  (rule "polySimp_addAssoc" (formula "31") (term "0,0,0,1,1,1,1,0"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "31") (term "0,0,1,1,1,1,0"))
                  (rule "polySimp_mulLiterals" (formula "31") (term "0,0,0,1,1,1,1,0"))
                  (rule "applyEq" (formula "31") (term "1,1,1,1,0") (ifseqformula "26"))
                  (rule "inEqSimp_exactShadow3" (formula "19") (ifseqformula "25"))
                  (rule "polySimp_rightDist" (formula "19") (term "0,0"))
                  (rule "mul_literals" (formula "19") (term "0,0,0"))
                  (rule "polySimp_addComm1" (formula "19") (term "0"))
                  (rule "add_literals" (formula "19") (term "0,0"))
                  (rule "inEqSimp_sepNegMonomial1" (formula "19"))
                  (rule "polySimp_mulLiterals" (formula "19") (term "0"))
                  (rule "polySimp_elimOne" (formula "19") (term "0"))
                  (rule "inEqSimp_subsumption0" (formula "11") (ifseqformula "19"))
                  (rule "leq_literals" (formula "11") (term "0"))
                   (builtin "One Step Simplification" (formula "11"))
                  (rule "true_left" (formula "11"))
                  (rule "inEqSimp_exactShadow3" (formula "27") (ifseqformula "1"))
                  (rule "mul_literals" (formula "27") (term "0,0"))
                  (rule "polySimp_addAssoc" (formula "27") (term "0"))
                  (rule "inEqSimp_sepNegMonomial1" (formula "27"))
                  (rule "polySimp_mulLiterals" (formula "27") (term "0"))
                  (rule "polySimp_elimOne" (formula "27") (term "0"))
                  (rule "inEqSimp_exactShadow3" (formula "14") (ifseqformula "1"))
                  (rule "polySimp_rightDist" (formula "14") (term "0,0"))
                  (rule "mul_literals" (formula "14") (term "0,0,0"))
                  (rule "polySimp_addAssoc" (formula "14") (term "0"))
                  (rule "polySimp_pullOutFactor2b" (formula "14") (term "0,0"))
                  (rule "add_literals" (formula "14") (term "1,1,0,0"))
                  (rule "times_zero_1" (formula "14") (term "1,0,0"))
                  (rule "add_zero_right" (formula "14") (term "0,0"))
                  (rule "inEqSimp_sepNegMonomial1" (formula "14"))
                  (rule "polySimp_mulLiterals" (formula "14") (term "0"))
                  (rule "polySimp_elimOne" (formula "14") (term "0"))
                  (rule "expand_moduloInteger" (formula "26") (term "0"))
                  (rule "replace_int_HALFRANGE" (formula "26") (term "0,0,1,0"))
                  (rule "replace_int_MIN" (formula "26") (term "0,0"))
                  (rule "replace_int_RANGE" (formula "26") (term "1,1,0"))
                  (rule "polySimp_homoEq" (formula "26"))
                  (rule "polySimp_mulComm0" (formula "26") (term "1,0"))
                  (rule "polySimp_rightDist" (formula "26") (term "1,0"))
                  (rule "mul_literals" (formula "26") (term "0,1,0"))
                  (rule "polySimp_addAssoc" (formula "26") (term "0"))
                  (rule "polySimp_addComm0" (formula "26") (term "0,0"))
                  (rule "polySimp_sepNegMonomial" (formula "26"))
                  (rule "polySimp_mulLiterals" (formula "26") (term "0"))
                  (rule "polySimp_elimOne" (formula "26") (term "0"))
                  (rule "Definition_axiom_for_pi_in_de_wiesler_Tree" (formula "33") (term "1,0,2,0,1,0"))
                  (rule "translateJavaSubInt" (formula "33") (term "0,1,1,1,0,2,0,1,0"))
                  (rule "polySimp_elimSub" (formula "33") (term "1,0,0,1,0,2,0,1,0"))
                  (rule "polySimp_elimSub" (formula "33") (term "0,1,1,1,0,2,0,1,0"))
                  (rule "mul_literals" (formula "33") (term "1,0,1,1,1,0,2,0,1,0"))
                  (rule "polySimp_elimSub" (formula "33") (term "1,1,1,0,2,0,1,0"))
                  (rule "polySimp_mulComm0" (formula "33") (term "1,0,2,0,1,0"))
                  (rule "polySimp_addComm0" (formula "33") (term "0,1,0,1,0,2,0,1,0"))
                  (rule "polySimp_rightDist" (formula "33") (term "0,1,1,0,2,0,1,0"))
                  (rule "polySimp_mulLiterals" (formula "33") (term "1,0,1,1,0,2,0,1,0"))
                  (rule "polySimp_mulComm0" (formula "33") (term "0,0,1,1,0,2,0,1,0"))
                  (rule "polySimp_addComm1" (formula "33") (term "1,1,0,2,0,1,0"))
                  (rule "polySimp_addComm0" (formula "33") (term "0,1,1,0,2,0,1,0"))
                  (rule "polySimp_rightDist" (formula "33") (term "1,0,2,0,1,0"))
                  (rule "polySimp_mulComm1" (formula "33") (term "1,1,0,2,0,1,0"))
                  (rule "polySimp_mulComm0" (formula "33") (term "0,1,1,0,2,0,1,0"))
                  (rule "polySimp_rightDist" (formula "33") (term "0,1,0,2,0,1,0"))
                  (rule "polySimp_elimOne" (formula "33") (term "0,0,1,0,2,0,1,0"))
                  (rule "polySimp_mulComm1" (formula "33") (term "1,0,1,0,2,0,1,0"))
                  (rule "polySimp_mulComm0" (formula "33") (term "0,1,0,1,0,2,0,1,0"))
                  (rule "polySimp_addAssoc" (formula "33") (term "0,2,0,1,0"))
                  (rule "polySimp_addAssoc" (formula "33") (term "0,0,2,0,1,0"))
                  (rule "Definition_axiom_for_pi_in_de_wiesler_Tree" (formula "32") (term "0,0,1,0"))
                  (rule "translateJavaSubInt" (formula "32") (term "0,1,1,0,0,1,0"))
                  (rule "polySimp_elimSub" (formula "32") (term "1,0,0,0,0,1,0"))
                  (rule "polySimp_elimSub" (formula "32") (term "1,1,0,0,1,0"))
                  (rule "polySimp_elimSub" (formula "32") (term "0,1,1,0,0,1,0"))
                  (rule "mul_literals" (formula "32") (term "1,0,1,1,0,0,1,0"))
                  (rule "polySimp_mulComm0" (formula "32") (term "0,0,1,0"))
                  (rule "polySimp_addComm0" (formula "32") (term "0,1,0,0,0,1,0"))
                  (rule "polySimp_rightDist" (formula "32") (term "0,1,0,0,1,0"))
                  (rule "polySimp_mulLiterals" (formula "32") (term "1,0,1,0,0,1,0"))
                  (rule "polySimp_mulComm0" (formula "32") (term "0,0,1,0,0,1,0"))
                  (rule "polySimp_addComm1" (formula "32") (term "1,0,0,1,0"))
                  (rule "polySimp_addComm0" (formula "32") (term "0,1,0,0,1,0"))
                  (rule "polySimp_rightDist" (formula "32") (term "0,0,1,0"))
                  (rule "polySimp_mulComm1" (formula "32") (term "1,0,0,1,0"))
                  (rule "polySimp_mulComm0" (formula "32") (term "0,1,0,0,1,0"))
                  (rule "polySimp_rightDist" (formula "32") (term "0,0,0,1,0"))
                  (rule "polySimp_elimOne" (formula "32") (term "0,0,0,0,1,0"))
                  (rule "polySimp_mulComm1" (formula "32") (term "1,0,0,0,1,0"))
                  (rule "polySimp_mulComm0" (formula "32") (term "0,1,0,0,0,1,0"))
                  (rule "inEqSimp_homoInEq1" (formula "32") (term "0,1,0"))
                  (rule "polySimp_mulComm0" (formula "32") (term "1,0,0,1,0"))
                  (rule "polySimp_rightDist" (formula "32") (term "1,0,0,1,0"))
                  (rule "polySimp_mulLiterals" (formula "32") (term "1,1,0,0,1,0"))
                  (rule "polySimp_rightDist" (formula "32") (term "0,1,0,0,1,0"))
                  (rule "polySimp_mulLiterals" (formula "32") (term "1,0,1,0,0,1,0"))
                  (rule "polySimp_mulComm0" (formula "32") (term "0,0,1,0,0,1,0"))
                  (rule "polySimp_addAssoc" (formula "32") (term "0,0,1,0"))
                  (rule "polySimp_addAssoc" (formula "32") (term "0,0,0,1,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "32") (term "0,1,0"))
                  (rule "polySimp_mulComm0" (formula "32") (term "1,0,1,0"))
                  (rule "polySimp_rightDist" (formula "32") (term "1,0,1,0"))
                  (rule "polySimp_mulLiterals" (formula "32") (term "1,1,0,1,0"))
                  (rule "polySimp_rightDist" (formula "32") (term "0,1,0,1,0"))
                  (rule "polySimp_mulLiterals" (formula "32") (term "1,0,1,0,1,0"))
                  (rule "mul_literals" (formula "32") (term "0,0,1,0,1,0"))
                  (rule "polySimp_elimOne" (formula "32") (term "1,0,1,0,1,0"))
                  (rule "Definition_axiom_for_pi_in_de_wiesler_Tree" (formula "32") (term "0,1,1,0"))
                  (rule "translateJavaSubInt" (formula "32") (term "0,1,1,0,1,1,0"))
                  (rule "polySimp_elimSub" (formula "32") (term "1,0,0,0,1,1,0"))
                  (rule "polySimp_elimSub" (formula "32") (term "0,1,1,0,1,1,0"))
                  (rule "mul_literals" (formula "32") (term "1,0,1,1,0,1,1,0"))
                  (rule "polySimp_elimSub" (formula "32") (term "1,1,0,1,1,0"))
                  (rule "polySimp_mulComm0" (formula "32") (term "0,1,1,0"))
                  (rule "polySimp_addComm0" (formula "32") (term "0,1,0,0,1,1,0"))
                  (rule "polySimp_rightDist" (formula "32") (term "0,1,0,1,1,0"))
                  (rule "polySimp_mulLiterals" (formula "32") (term "1,0,1,0,1,1,0"))
                  (rule "polySimp_mulComm0" (formula "32") (term "0,0,1,0,1,1,0"))
                  (rule "polySimp_addComm1" (formula "32") (term "1,0,1,1,0"))
                  (rule "polySimp_addComm0" (formula "32") (term "0,1,0,1,1,0"))
                  (rule "polySimp_rightDist" (formula "32") (term "0,1,1,0"))
                  (rule "polySimp_mulComm1" (formula "32") (term "1,0,1,1,0"))
                  (rule "polySimp_mulComm0" (formula "32") (term "0,1,0,1,1,0"))
                  (rule "polySimp_rightDist" (formula "32") (term "0,0,1,1,0"))
                  (rule "polySimp_elimOne" (formula "32") (term "0,0,0,1,1,0"))
                  (rule "polySimp_mulComm1" (formula "32") (term "1,0,0,1,1,0"))
                  (rule "polySimp_mulComm0" (formula "32") (term "0,1,0,0,1,1,0"))
                  (rule "inEqSimp_homoInEq0" (formula "32") (term "1,1,0"))
                  (rule "polySimp_mulComm0" (formula "32") (term "1,0,1,1,0"))
                  (rule "polySimp_rightDist" (formula "32") (term "1,0,1,1,0"))
                  (rule "polySimp_mulLiterals" (formula "32") (term "1,1,0,1,1,0"))
                  (rule "polySimp_rightDist" (formula "32") (term "0,1,0,1,1,0"))
                  (rule "polySimp_mulLiterals" (formula "32") (term "1,0,1,0,1,1,0"))
                  (rule "polySimp_mulComm0" (formula "32") (term "0,0,1,0,1,1,0"))
                  (rule "polySimp_addAssoc" (formula "32") (term "0,1,1,0"))
                  (rule "polySimp_addAssoc" (formula "32") (term "0,0,1,1,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "32") (term "1,1,0"))
                  (rule "polySimp_mulComm0" (formula "32") (term "1,1,1,0"))
                  (rule "polySimp_rightDist" (formula "32") (term "1,1,1,0"))
                  (rule "polySimp_mulLiterals" (formula "32") (term "1,1,1,1,0"))
                  (rule "polySimp_rightDist" (formula "32") (term "0,1,1,1,0"))
                  (rule "polySimp_mulLiterals" (formula "32") (term "1,0,1,1,1,0"))
                  (rule "polySimp_elimOne" (formula "32") (term "1,0,1,1,1,0"))
                  (rule "polySimp_rightDist" (formula "32") (term "0,0,1,1,1,0"))
                  (rule "mul_literals" (formula "32") (term "0,0,0,1,1,1,0"))
                  (rule "nnf_imp2or" (formula "33") (term "0"))
                  (rule "commute_and" (formula "32") (term "1,0,0"))
                  (rule "Definition_axiom_for_isSortedSliceTransitive_in_de_wiesler_Functions" (formula "31") (term "0") (inst "i=i") (inst "j=j"))
                   (builtin "One Step Simplification" (formula "31"))
                  (rule "expand_inInt" (formula "31") (term "1,0,0"))
                  (rule "expand_inInt" (formula "31") (term "1,0,0,1,0"))
                  (rule "replace_int_MAX" (formula "31") (term "1,0,1,0,0"))
                  (rule "replace_int_MIN" (formula "31") (term "0,1,1,0,0"))
                  (rule "replace_int_MAX" (formula "31") (term "1,0,1,0,0,1,0"))
                  (rule "replace_int_MIN" (formula "31") (term "0,1,1,0,0,1,0"))
                  (rule "inEqSimp_ltToLeq" (formula "31") (term "1,0,0,0"))
                  (rule "polySimp_rightDist" (formula "31") (term "1,0,0,1,0,0,0"))
                  (rule "mul_literals" (formula "31") (term "0,1,0,0,1,0,0,0"))
                  (rule "polySimp_addAssoc" (formula "31") (term "0,0,1,0,0,0"))
                  (rule "add_literals" (formula "31") (term "0,0,0,1,0,0,0"))
                  (rule "inEqSimp_ltToLeq" (formula "31") (term "1,0,0,0,1,0"))
                  (rule "polySimp_rightDist" (formula "31") (term "1,0,0,1,0,0,0,1,0"))
                  (rule "mul_literals" (formula "31") (term "0,1,0,0,1,0,0,0,1,0"))
                  (rule "polySimp_addAssoc" (formula "31") (term "0,0,1,0,0,0,1,0"))
                  (rule "add_literals" (formula "31") (term "0,0,0,1,0,0,0,1,0"))
                  (rule "inEqSimp_commuteLeq" (formula "31") (term "0,0,0,0,1,0"))
                  (rule "inEqSimp_commuteLeq" (formula "31") (term "0,0,0,0"))
                  (rule "inEqSimp_commuteLeq" (formula "31") (term "1,0,1,0"))
                  (rule "inEqSimp_commuteLeq" (formula "31") (term "1,1,0,0"))
                  (rule "inEqSimp_commuteLeq" (formula "31") (term "1,1,0,0,1,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "31") (term "1,0,0,0"))
                  (rule "polySimp_mulComm0" (formula "31") (term "1,1,0,0,0"))
                  (rule "polySimp_rightDist" (formula "31") (term "1,1,0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "31") (term "1,1,1,0,0,0"))
                  (rule "mul_literals" (formula "31") (term "0,1,1,0,0,0"))
                  (rule "polySimp_elimOne" (formula "31") (term "1,1,1,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "31") (term "1,0,0,0,1,0"))
                  (rule "polySimp_mulComm0" (formula "31") (term "1,1,0,0,0,1,0"))
                  (rule "polySimp_rightDist" (formula "31") (term "1,1,0,0,0,1,0"))
                  (rule "polySimp_mulLiterals" (formula "31") (term "1,1,1,0,0,0,1,0"))
                  (rule "mul_literals" (formula "31") (term "0,1,1,0,0,0,1,0"))
                  (rule "polySimp_elimOne" (formula "31") (term "1,1,1,0,0,0,1,0"))
                  (rule "jdiv_axiom" (formula "1") (term "0,1,1"))
                  (rule "polySimp_mulLiterals" (formula "1") (term "0,0,2,1"))
                  (rule "eqSymm" (formula "1"))
                  (rule "inEqSimp_subsumption6" (formula "1") (term "0,0") (ifseqformula "21"))
                  (rule "mul_literals" (formula "1") (term "1,1,0,0,0"))
                  (rule "greater_literals" (formula "1") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "leq_literals" (formula "1") (term "0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "eqSymm" (formula "1"))
                  (rule "applyEqRigid" (formula "28") (term "0") (ifseqformula "1"))
                  (rule "applyEq" (formula "3") (term "0,1,0,2,0") (ifseqformula "1"))
                  (rule "applyEq" (formula "2") (term "0,1,1") (ifseqformula "1"))
                  (rule "applyEqRigid" (formula "14") (term "0") (ifseqformula "1"))
                  (rule "polyDiv_pullOut" (formula "14") (term "0") (inst "polyDivCoeff=l_0"))
                  (rule "polySimp_mulLiterals" (formula "14") (term "1,0,0,2,0"))
                  (rule "equal_literals" (formula "14") (term "0,0"))
                   (builtin "One Step Simplification" (formula "14"))
                  (rule "polySimp_pullOutFactor0" (formula "14") (term "0,0,0"))
                  (rule "add_literals" (formula "14") (term "1,0,0,0"))
                  (rule "times_zero_1" (formula "14") (term "0,0,0"))
                  (rule "div_literals" (formula "14") (term "0,0"))
                  (rule "add_zero_left" (formula "14") (term "0"))
                  (rule "inEqSimp_subsumption0" (formula "9") (ifseqformula "14"))
                  (rule "leq_literals" (formula "9") (term "0"))
                   (builtin "One Step Simplification" (formula "9"))
                  (rule "true_left" (formula "9"))
                  (rule "inEqSimp_contradInEq0" (formula "20") (ifseqformula "13"))
                  (rule "qeq_literals" (formula "20") (term "0"))
                   (builtin "One Step Simplification" (formula "20"))
                  (rule "closeFalse" (formula "20"))
               )
            )
         )
      )
      (branch "Case 2"
         (rule "orRight" (formula "19"))
         (rule "translateJavaSubInt" (formula "19") (term "0") (userinteraction))
         (rule "ifthenelse_split" (formula "19") (term "0,0") (userinteraction))
         (branch " self.sorted_splitters[javaSubInt(b, javaDivInt(d, 2))] < value TRUE"
            (rule "expand_inInt" (formula "8"))
            (rule "expand_inInt" (formula "7"))
            (rule "expand_inInt" (formula "6"))
            (rule "expand_inInt" (formula "5"))
            (rule "replace_int_MIN" (formula "8") (term "0,1"))
            (rule "replace_int_MAX" (formula "8") (term "1,0"))
            (rule "replace_int_MAX" (formula "7") (term "1,0"))
            (rule "replace_int_MIN" (formula "7") (term "0,1"))
            (rule "replace_int_MAX" (formula "6") (term "1,0"))
            (rule "replace_int_MIN" (formula "6") (term "0,1"))
            (rule "replace_int_MAX" (formula "5") (term "1,0"))
            (rule "replace_int_MIN" (formula "5") (term "0,1"))
            (rule "andLeft" (formula "8"))
            (rule "andLeft" (formula "7"))
            (rule "andLeft" (formula "6"))
            (rule "andLeft" (formula "5"))
            (rule "eqSymm" (formula "17") (term "0"))
            (rule "translateJavaSubInt" (formula "15") (term "1"))
            (rule "translateJavaSubInt" (formula "14") (term "0"))
            (rule "translateJavaSubInt" (formula "1") (term "0,2,0"))
            (rule "eqSymm" (formula "20"))
            (rule "translateJavaDivInt" (formula "24") (term "1,0"))
            (rule "translateJavaSubInt" (formula "25") (term "0,2,0"))
            (rule "translateJavaSubInt" (formula "16") (term "0,2,0,1"))
            (rule "translateJavaSubInt" (formula "16") (term "0,0"))
            (rule "translateJavaSubInt" (formula "17") (term "0,0"))
            (rule "translateJavaDivInt" (formula "1") (term "1,0,2,0"))
            (rule "translateJavaSubInt" (formula "20") (term "1,0"))
            (rule "translateJavaSubInt" (formula "25") (term "0,2,0,0,0,0,2,0"))
            (rule "translateJavaDivInt" (formula "25") (term "1,0,2,0"))
            (rule "translateJavaSubInt" (formula "25") (term "2,0,0,2,0"))
            (rule "translateJavaDivInt" (formula "25") (term "1,0,2,0,0,0,0,2,0"))
            (rule "translateJavaDivInt" (formula "25") (term "1,2,0,0,2,0"))
            (rule "replace_known_left" (formula "25") (term "0,0,0,2,0") (ifseqformula "1"))
             (builtin "One Step Simplification" (formula "25") (ifInst ""  (formula "1")))
            (rule "closeTrue" (formula "25"))
         )
         (branch " self.sorted_splitters[javaSubInt(b, javaDivInt(d, 2))] < value FALSE"
            (rule "replace_known_right" (formula "21") (term "0,0,0,2,0") (ifseqformula "19") (userinteraction))
             (builtin "One Step Simplification" (formula "21") (userinteraction))
            (rule "translateJavaSubInt" (formula "21") (term "0,0,2,0") (userinteraction))
            (rule "translateJavaSubInt" (formula "21") (term "0,2,0") (userinteraction))
            (rule "translateJavaSubInt" (formula "19") (term "0,2,0") (userinteraction))
            (rule "cut" (inst "cutFormula=(  d<<origin(\"User_Interaction @ node 4525 (cut)\", \"[]\")>>
 = javaDivInt(d, Z(2(#))))<<origin(\"User_Interaction @ node 4525 (cut)\",\"[]\")>>") (userinteraction))
            (branch "CUT: d = javaDivInt(d, 2) TRUE"
               (rule "expand_inInt" (formula "5"))
               (rule "expand_inInt" (formula "6"))
               (rule "expand_inInt" (formula "7"))
               (rule "expand_inInt" (formula "8"))
               (rule "replace_int_MIN" (formula "5") (term "0,1"))
               (rule "replace_int_MAX" (formula "5") (term "1,0"))
               (rule "replace_int_MIN" (formula "6") (term "0,1"))
               (rule "replace_int_MAX" (formula "6") (term "1,0"))
               (rule "replace_int_MAX" (formula "7") (term "1,0"))
               (rule "replace_int_MIN" (formula "7") (term "0,1"))
               (rule "replace_int_MAX" (formula "8") (term "1,0"))
               (rule "replace_int_MIN" (formula "8") (term "0,1"))
               (rule "andLeft" (formula "5"))
               (rule "andLeft" (formula "7"))
               (rule "andLeft" (formula "9"))
               (rule "andLeft" (formula "11"))
               (rule "translateJavaDivInt" (formula "26") (term "1,0,0,2,0"))
               (rule "translateJavaDivInt" (formula "26") (term "1,0,2,0"))
               (rule "translateJavaSubInt" (formula "14") (term "0"))
               (rule "translateJavaSubInt" (formula "25") (term "0,0"))
               (rule "translateJavaDivInt" (formula "24") (term "1,0,2,0"))
               (rule "translateJavaSubInt" (formula "15") (term "1"))
               (rule "translateJavaSubInt" (formula "16") (term "0,0"))
               (rule "translateJavaDivInt" (formula "25") (term "1,0"))
               (rule "translateJavaSubInt" (formula "16") (term "0,2,0,1"))
               (rule "eqSymm" (formula "17") (term "0"))
               (rule "eqSymm" (formula "20"))
               (rule "eqSymm" (formula "1"))
               (rule "translateJavaDivInt" (formula "25") (term "1,0,0"))
               (rule "translateJavaSubInt" (formula "17") (term "0,0"))
               (rule "translateJavaSubInt" (formula "20") (term "1,0"))
               (rule "translateJavaDivInt" (formula "1") (term "0"))
               (rule "polySimp_elimSub" (formula "26") (term "0,0,2,0"))
               (rule "polySimp_elimSub" (formula "14") (term "0"))
               (rule "mul_literals" (formula "14") (term "1,0"))
               (rule "polySimp_elimSub" (formula "24") (term "0,2,0"))
               (rule "polySimp_elimSub" (formula "15") (term "1"))
               (rule "mul_literals" (formula "15") (term "1,1"))
               (rule "polySimp_elimSub" (formula "16") (term "0,0"))
               (rule "polySimp_elimSub" (formula "16") (term "0,2,0,1"))
               (rule "polySimp_elimSub" (formula "25") (term "0"))
               (rule "polySimp_elimSub" (formula "17") (term "0,0"))
               (rule "mul_literals" (formula "17") (term "1,0,0"))
               (rule "polySimp_elimSub" (formula "20") (term "1,0"))
               (rule "polySimp_elimSub" (formula "26") (term "0,2,0"))
               (rule "polySimp_homoEq" (formula "16") (term "0"))
               (rule "polySimp_homoEq" (formula "25"))
               (rule "polySimp_homoEq" (formula "17") (term "0"))
               (rule "polySimp_pullOutFactor0b" (formula "26") (term "0,2,0"))
               (rule "add_literals" (formula "26") (term "1,1,0,2,0"))
               (rule "polySimp_elimSub" (formula "25") (term "0,0,1,0"))
               (rule "polySimp_pullOutFactor0b" (formula "25") (term "0,1,0"))
               (rule "add_literals" (formula "25") (term "1,1,0,1,0"))
               (rule "polySimp_mulComm0" (formula "16") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "17") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "25") (term "1,0"))
               (rule "polySimp_addComm0" (formula "14") (term "0"))
               (rule "polySimp_addComm0" (formula "15") (term "1"))
               (rule "polySimp_addComm0" (formula "20") (term "1,0"))
               (rule "polySimp_addComm0" (formula "17") (term "1,1,0,0"))
               (rule "polySimp_rightDist" (formula "16") (term "1,0,0"))
               (rule "polySimp_mulLiterals" (formula "16") (term "1,1,0,0"))
               (rule "polySimp_elimOne" (formula "16") (term "1,1,0,0"))
               (rule "polySimp_mulComm0" (formula "16") (term "0,1,0,0"))
               (rule "polySimp_rightDist" (formula "25") (term "1,0"))
               (rule "polySimp_mulLiterals" (formula "25") (term "1,1,0"))
               (rule "polySimp_mulComm0" (formula "25") (term "0,1,0"))
               (rule "polySimp_rightDist" (formula "17") (term "1,0,0"))
               (rule "mul_literals" (formula "17") (term "0,1,0,0"))
               (rule "inEqSimp_ltToLeq" (formula "19"))
               (rule "polySimp_mulComm0" (formula "19") (term "1,0,0"))
               (rule "polySimp_addComm1" (formula "19") (term "0"))
               (rule "inEqSimp_ltRight" (formula "24"))
               (rule "polySimp_mulComm0" (formula "1") (term "0,0"))
               (rule "polySimp_addAssoc" (formula "17") (term "0,0"))
               (rule "polySimp_addAssoc" (formula "25") (term "0"))
               (rule "polySimp_addAssoc" (formula "18") (term "0,0"))
               (rule "polySimp_addComm0" (formula "18") (term "0,0,0"))
               (rule "inEqSimp_ltRight" (formula "26"))
               (rule "polySimp_mulComm0" (formula "1") (term "0,0"))
               (rule "inEqSimp_ltToLeq" (formula "18") (term "1"))
               (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,1"))
               (rule "inEqSimp_commuteLeq" (formula "20"))
               (rule "inEqSimp_commuteLeq" (formula "19") (term "1"))
               (rule "inEqSimp_commuteLeq" (formula "8"))
               (rule "inEqSimp_commuteLeq" (formula "10"))
               (rule "inEqSimp_commuteLeq" (formula "12"))
               (rule "inEqSimp_commuteLeq" (formula "14"))
               (rule "inEqSimp_homoInEq0" (formula "16"))
               (rule "polySimp_mulComm0" (formula "16") (term "1,0"))
               (rule "polySimp_rightDist" (formula "16") (term "1,0"))
               (rule "mul_literals" (formula "16") (term "0,1,0"))
               (rule "polySimp_addAssoc" (formula "16") (term "0"))
               (rule "polySimp_addComm0" (formula "16") (term "0,0"))
               (rule "inEqSimp_homoInEq0" (formula "17"))
               (rule "polySimp_addComm1" (formula "17") (term "0"))
               (rule "applyEq" (formula "1") (term "0,1,0,2,1,0") (ifseqformula "3"))
               (rule "applyEq" (formula "2") (term "0,1,0,2,1,0") (ifseqformula "3"))
               (rule "applyEq" (formula "26") (term "0,1,0") (ifseqformula "3"))
               (rule "polySimp_sepPosMonomial" (formula "18") (term "0"))
               (rule "polySimp_mulComm0" (formula "18") (term "1,0"))
               (rule "polySimp_rightDist" (formula "18") (term "1,0"))
               (rule "polySimp_mulLiterals" (formula "18") (term "1,1,0"))
               (rule "mul_literals" (formula "18") (term "0,1,0"))
               (rule "polySimp_elimOne" (formula "18") (term "1,1,0"))
               (rule "polySimp_sepNegMonomial" (formula "19") (term "0"))
               (rule "polySimp_mulLiterals" (formula "19") (term "0,0"))
               (rule "polySimp_elimOne" (formula "19") (term "0,0"))
               (rule "polySimp_sepPosMonomial" (formula "26"))
               (rule "polySimp_mulComm0" (formula "26") (term "1"))
               (rule "polySimp_rightDist" (formula "26") (term "1"))
               (rule "mul_literals" (formula "26") (term "0,1"))
               (rule "polySimp_mulLiterals" (formula "26") (term "1,1"))
               (rule "polySimp_elimOne" (formula "26") (term "1,1"))
               (rule "inEqSimp_sepNegMonomial0" (formula "21"))
               (rule "polySimp_mulLiterals" (formula "21") (term "0"))
               (rule "polySimp_elimOne" (formula "21") (term "0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "1"))
               (rule "polySimp_mulComm0" (formula "18") (term "1,1"))
               (rule "polySimp_rightDist" (formula "18") (term "1,1"))
               (rule "mul_literals" (formula "18") (term "0,1,1"))
               (rule "polySimp_mulLiterals" (formula "18") (term "1,1,1"))
               (rule "polySimp_elimOne" (formula "18") (term "1,1,1"))
               (rule "inEqSimp_sepNegMonomial1" (formula "16"))
               (rule "polySimp_mulLiterals" (formula "16") (term "0"))
               (rule "polySimp_elimOne" (formula "16") (term "0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "17"))
               (rule "polySimp_mulComm0" (formula "17") (term "1"))
               (rule "polySimp_rightDist" (formula "17") (term "1"))
               (rule "polySimp_mulLiterals" (formula "17") (term "1,1"))
               (rule "mul_literals" (formula "17") (term "0,1"))
               (rule "polySimp_elimOne" (formula "17") (term "1,1"))
               (rule "inEqSimp_sepPosMonomial1" (formula "1"))
               (rule "polySimp_mulLiterals" (formula "1") (term "1"))
               (rule "polySimp_elimOne" (formula "1") (term "1"))
               (rule "inEqSimp_sepPosMonomial1" (formula "2"))
               (rule "polySimp_mulLiterals" (formula "2") (term "1"))
               (rule "polySimp_elimOne" (formula "2") (term "1"))
               (rule "inEqSimp_subsumption1" (formula "14") (ifseqformula "20"))
               (rule "leq_literals" (formula "14") (term "0"))
                (builtin "One Step Simplification" (formula "14"))
               (rule "true_left" (formula "14"))
               (rule "inEqSimp_contradInEq1" (formula "17") (term "1") (ifseqformula "2"))
               (rule "inEqSimp_homoInEq1" (formula "17") (term "0,1"))
               (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,1"))
               (rule "polySimp_rightDist" (formula "17") (term "1,0,0,1"))
               (rule "mul_literals" (formula "17") (term "0,1,0,0,1"))
               (rule "polySimp_addAssoc" (formula "17") (term "0,0,1"))
               (rule "polySimp_addComm0" (formula "17") (term "0,0,0,1"))
               (rule "polySimp_pullOutFactor1b" (formula "17") (term "0,0,1"))
               (rule "add_literals" (formula "17") (term "1,1,0,0,1"))
               (rule "times_zero_1" (formula "17") (term "1,0,0,1"))
               (rule "add_zero_right" (formula "17") (term "0,0,1"))
               (rule "leq_literals" (formula "17") (term "0,1"))
                (builtin "One Step Simplification" (formula "17"))
               (rule "applyEq" (formula "2") (term "0,1,0,2,0") (ifseqformula "17"))
               (rule "polySimp_mulComm0" (formula "2") (term "1,0,2,0"))
               (rule "polySimp_rightDist" (formula "2") (term "1,0,2,0"))
               (rule "mul_literals" (formula "2") (term "0,1,0,2,0"))
               (rule "polySimp_addAssoc" (formula "2") (term "0,2,0"))
               (rule "polySimp_addComm0" (formula "2") (term "0,0,2,0"))
               (rule "polySimp_pullOutFactor1b" (formula "2") (term "0,2,0"))
               (rule "add_literals" (formula "2") (term "1,1,0,2,0"))
               (rule "times_zero_1" (formula "2") (term "1,0,2,0"))
               (rule "add_zero_right" (formula "2") (term "0,2,0"))
               (rule "applyEq" (formula "1") (term "0,1,0,2,0") (ifseqformula "17"))
               (rule "polySimp_mulComm0" (formula "1") (term "1,0,2,0"))
               (rule "polySimp_rightDist" (formula "1") (term "1,0,2,0"))
               (rule "mul_literals" (formula "1") (term "0,1,0,2,0"))
               (rule "polySimp_addAssoc" (formula "1") (term "0,2,0"))
               (rule "polySimp_addComm0" (formula "1") (term "0,0,2,0"))
               (rule "polySimp_pullOutFactor1b" (formula "1") (term "0,2,0"))
               (rule "add_literals" (formula "1") (term "1,1,0,2,0"))
               (rule "applyEq" (formula "9") (term "0") (ifseqformula "17"))
               (rule "inEqSimp_homoInEq0" (formula "9"))
               (rule "polySimp_mulComm0" (formula "9") (term "1,0"))
               (rule "polySimp_rightDist" (formula "9") (term "1,0"))
               (rule "mul_literals" (formula "9") (term "0,1,0"))
               (rule "polySimp_addAssoc" (formula "9") (term "0"))
               (rule "add_literals" (formula "9") (term "0,0"))
               (rule "applyEq" (formula "25") (term "0,0") (ifseqformula "17"))
               (rule "polySimp_mulComm0" (formula "25") (term "0"))
               (rule "polySimp_rightDist" (formula "25") (term "0"))
               (rule "mul_literals" (formula "25") (term "0,0"))
               (rule "polySimp_homoEq" (formula "25"))
               (rule "polySimp_mulComm0" (formula "25") (term "1,0"))
               (rule "polySimp_rightDist" (formula "25") (term "1,0"))
               (rule "polySimp_mulLiterals" (formula "25") (term "1,1,0"))
               (rule "mul_literals" (formula "25") (term "0,1,0"))
               (rule "polySimp_addAssoc" (formula "25") (term "0"))
               (rule "polySimp_addComm1" (formula "25") (term "0,0"))
               (rule "add_literals" (formula "25") (term "0,0,0"))
               (rule "polySimp_pullOutFactor1b" (formula "25") (term "0"))
               (rule "add_literals" (formula "25") (term "1,1,0"))
               (rule "applyEq" (formula "10") (term "0") (ifseqformula "17"))
               (rule "inEqSimp_homoInEq1" (formula "10"))
               (rule "polySimp_mulComm0" (formula "10") (term "1,0"))
               (rule "polySimp_rightDist" (formula "10") (term "1,0"))
               (rule "mul_literals" (formula "10") (term "0,1,0"))
               (rule "polySimp_addAssoc" (formula "10") (term "0"))
               (rule "add_literals" (formula "10") (term "0,0"))
               (rule "applyEq" (formula "3") (term "0,0") (ifseqformula "17"))
               (rule "eqSymm" (formula "3"))
               (rule "applyEq" (formula "15") (term "0") (ifseqformula "17"))
               (rule "inEqSimp_homoInEq0" (formula "15"))
               (rule "polySimp_pullOutFactor1" (formula "15") (term "0"))
               (rule "add_literals" (formula "15") (term "1,0"))
               (rule "times_zero_1" (formula "15") (term "0"))
               (rule "qeq_literals" (formula "15"))
               (rule "true_left" (formula "15"))
               (rule "applyEq" (formula "20") (term "1") (ifseqformula "16"))
               (rule "applyEq" (formula "16") (term "0") (ifseqformula "3"))
               (rule "applyEq" (formula "3") (term "1") (ifseqformula "16"))
               (rule "polySimp_sepNegMonomial" (formula "24"))
               (rule "polySimp_mulLiterals" (formula "24") (term "0"))
               (rule "polySimp_elimOne" (formula "24") (term "0"))
               (rule "inEqSimp_sepNegMonomial1" (formula "9"))
               (rule "polySimp_mulLiterals" (formula "9") (term "0"))
               (rule "polySimp_elimOne" (formula "9") (term "0"))
               (rule "inEqSimp_sepNegMonomial0" (formula "10"))
               (rule "polySimp_mulLiterals" (formula "10") (term "0"))
               (rule "polySimp_elimOne" (formula "10") (term "0"))
               (rule "inEqSimp_subsumption0" (formula "7") (ifseqformula "9"))
               (rule "leq_literals" (formula "7") (term "0"))
                (builtin "One Step Simplification" (formula "7"))
               (rule "true_left" (formula "7"))
               (rule "inEqSimp_subsumption1" (formula "9") (ifseqformula "7"))
               (rule "leq_literals" (formula "9") (term "0"))
                (builtin "One Step Simplification" (formula "9"))
               (rule "true_left" (formula "9"))
               (rule "Free_class_invariant_axiom_for_de_wiesler_Tree" (formula "20"))
               (rule "true_left" (formula "20"))
               (rule "Class_invariant_axiom_for_de_wiesler_Tree" (formula "19") (inst "i=i") (inst "i_0=i_0"))
                (builtin "One Step Simplification" (formula "19"))
               (rule "expand_inInt" (formula "19") (term "1,0,0,1,0"))
               (rule "expand_inInt" (formula "19") (term "1,0,0,1"))
               (rule "replace_int_MAX" (formula "19") (term "1,0,1,0,0,1,0"))
               (rule "replace_int_MIN" (formula "19") (term "0,1,1,0,0,1,0"))
               (rule "replace_int_MAX" (formula "19") (term "1,0,1,0,0,1"))
               (rule "replace_int_MIN" (formula "19") (term "0,1,1,0,0,1"))
               (rule "andLeft" (formula "19"))
               (rule "andLeft" (formula "19"))
               (rule "andLeft" (formula "19"))
               (rule "andLeft" (formula "19"))
               (rule "andLeft" (formula "19"))
               (rule "andLeft" (formula "20"))
               (rule "andLeft" (formula "19"))
               (rule "andLeft" (formula "19"))
               (rule "andLeft" (formula "19"))
               (rule "andLeft" (formula "21"))
               (rule "notLeft" (formula "19"))
               (rule "notLeft" (formula "19"))
               (rule "translateJavaSubInt" (formula "27") (term "0,2,1,1,0"))
               (rule "translateJavaSubInt" (formula "25") (term "3,0"))
               (rule "translateJavaShiftLeftInt" (formula "21") (term "1"))
               (rule "eqSymm" (formula "27") (term "1,0"))
               (rule "polySimp_elimSub" (formula "25") (term "3,0"))
               (rule "mul_literals" (formula "25") (term "1,3,0"))
               (rule "polySimp_elimSub" (formula "27") (term "0,2,0,1,0"))
               (rule "mul_literals" (formula "27") (term "1,0,2,0,1,0"))
               (rule "polySimp_addComm0" (formula "25") (term "3,0"))
               (rule "polySimp_addComm0" (formula "27") (term "0,2,0,1,0"))
               (rule "inEqSimp_ltToLeq" (formula "27") (term "1,0,0,0"))
               (rule "polySimp_mulComm0" (formula "27") (term "1,0,0,1,0,0,0"))
               (rule "inEqSimp_ltToLeq" (formula "26") (term "1,0,0,0"))
               (rule "polySimp_mulComm0" (formula "26") (term "1,0,0,1,0,0,0"))
               (rule "inEqSimp_ltToLeq" (formula "26") (term "1,1,0"))
               (rule "polySimp_mulComm0" (formula "26") (term "1,0,0,1,1,0"))
               (rule "inEqSimp_commuteLeq" (formula "27") (term "0,0,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "27") (term "1,1,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "26") (term "0,0,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "26") (term "1,1,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "26") (term "0,1,0"))
               (rule "inEqSimp_commuteLeq" (formula "24"))
               (rule "inEqSimp_commuteLeq" (formula "22"))
               (rule "inEqSimp_commuteLeq" (formula "23"))
               (rule "inEqSimp_commuteLeq" (formula "19"))
               (rule "applyEq" (formula "23") (term "1") (ifseqformula "21"))
               (rule "applyEq" (formula "24") (term "1") (ifseqformula "21"))
               (rule "applyEq" (formula "15") (term "0,0") (ifseqformula "21"))
               (rule "applyEq" (formula "13") (term "0") (ifseqformula "21"))
               (rule "applyEq" (formula "25") (term "1,3,0") (ifseqformula "21"))
               (rule "applyEq" (formula "22") (term "0") (ifseqformula "21"))
               (rule "applyEq" (formula "27") (term "0,1,0,0,1,0,0,0") (ifseqformula "21"))
               (rule "applyEq" (formula "26") (term "0,1,0,0,1,1,0") (ifseqformula "21"))
               (rule "applyEq" (formula "26") (term "0,1,0,0,1,0,0,0") (ifseqformula "21"))
               (rule "inEqSimp_sepPosMonomial0" (formula "27") (term "1,0,0,0"))
               (rule "polySimp_mulComm0" (formula "27") (term "1,1,0,0,0"))
               (rule "polySimp_rightDist" (formula "27") (term "1,1,0,0,0"))
               (rule "polySimp_mulLiterals" (formula "27") (term "1,1,1,0,0,0"))
               (rule "mul_literals" (formula "27") (term "0,1,1,0,0,0"))
               (rule "polySimp_elimOne" (formula "27") (term "1,1,1,0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "1,1,0"))
               (rule "polySimp_mulComm0" (formula "26") (term "1,1,1,0"))
               (rule "polySimp_rightDist" (formula "26") (term "1,1,1,0"))
               (rule "polySimp_mulLiterals" (formula "26") (term "1,1,1,1,0"))
               (rule "mul_literals" (formula "26") (term "0,1,1,1,0"))
               (rule "polySimp_elimOne" (formula "26") (term "1,1,1,1,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "1,0,0,0"))
               (rule "polySimp_mulComm0" (formula "26") (term "1,1,0,0,0"))
               (rule "polySimp_rightDist" (formula "26") (term "1,1,0,0,0"))
               (rule "polySimp_mulLiterals" (formula "26") (term "1,1,1,0,0,0"))
               (rule "mul_literals" (formula "26") (term "0,1,1,0,0,0"))
               (rule "polySimp_elimOne" (formula "26") (term "1,1,1,0,0,0"))
               (rule "javaShiftLeftIntDef" (formula "21") (term "1"))
               (rule "mod_axiom" (formula "21") (term "1,0,1"))
               (rule "polySimp_mulLiterals" (formula "21") (term "1,1,0,1"))
               (rule "javaShiftLeftIntDef" (formula "23") (term "1"))
               (rule "mod_axiom" (formula "23") (term "1,0,1"))
               (rule "polySimp_mulLiterals" (formula "23") (term "1,1,0,1"))
               (rule "javaShiftLeftIntDef" (formula "24") (term "1"))
               (rule "mod_axiom" (formula "24") (term "1,0,1"))
               (rule "polySimp_mulLiterals" (formula "24") (term "1,1,0,1"))
               (rule "javaShiftLeftIntDef" (formula "15") (term "0,0"))
               (rule "mod_axiom" (formula "15") (term "1,0,0,0"))
               (rule "polySimp_mulLiterals" (formula "15") (term "1,1,0,0,0"))
               (rule "javaShiftLeftIntDef" (formula "13") (term "0"))
               (rule "mod_axiom" (formula "13") (term "1,0,0"))
               (rule "polySimp_mulLiterals" (formula "13") (term "1,1,0,0"))
               (rule "javaShiftLeftIntDef" (formula "25") (term "1,3,0"))
               (rule "mod_axiom" (formula "25") (term "1,0,1,3,0"))
               (rule "polySimp_mulLiterals" (formula "25") (term "1,1,0,1,3,0"))
               (rule "javaShiftLeftIntDef" (formula "22") (term "0"))
               (rule "mod_axiom" (formula "22") (term "1,0,0"))
               (rule "polySimp_mulLiterals" (formula "22") (term "1,1,0,0"))
               (rule "javaShiftLeftIntDef" (formula "27") (term "1,1,1,0,0,0"))
               (rule "mod_axiom" (formula "27") (term "1,0,1,1,1,0,0,0"))
               (rule "polySimp_mulLiterals" (formula "27") (term "1,1,0,1,1,1,0,0,0"))
               (rule "javaShiftLeftIntDef" (formula "26") (term "1,1,1,1,0"))
               (rule "mod_axiom" (formula "26") (term "1,0,1,1,1,1,0"))
               (rule "polySimp_mulLiterals" (formula "26") (term "1,1,0,1,1,1,1,0"))
               (rule "javaShiftLeftIntDef" (formula "26") (term "1,1,1,0,0,0"))
               (rule "mod_axiom" (formula "26") (term "1,0,1,1,1,0,0,0"))
               (rule "polySimp_mulLiterals" (formula "26") (term "1,1,0,1,1,1,0,0,0"))
               (rule "shiftLeftDef" (formula "21") (term "0,1"))
               (rule "eqSymm" (formula "21"))
               (rule "polySimp_elimNeg" (formula "21") (term "1,1,0,0"))
               (rule "polySimp_mulComm0" (formula "21") (term "1,1,0,0"))
               (rule "polySimp_rightDist" (formula "21") (term "1,1,0,0"))
               (rule "polySimp_mulLiterals" (formula "21") (term "1,1,1,0,0"))
               (rule "polySimp_mulComm0" (formula "21") (term "0,1,1,0,0"))
               (rule "shiftLeftPositiveShiftDef" (formula "21") (term "2,0,0"))
               (rule "polySimp_elimOneLeft0" (formula "21") (term "2,0,0"))
               (rule "shiftRightPositiveShiftDef" (formula "21") (term "1,0,0"))
               (rule "inEqSimp_ltToLeq" (formula "21") (term "0,0,0"))
               (rule "times_zero_1" (formula "21") (term "1,0,0,0,0,0"))
               (rule "add_zero_right" (formula "21") (term "0,0,0,0,0"))
               (rule "polySimp_addAssoc" (formula "21") (term "0,0,0,0"))
               (rule "inEqSimp_sepNegMonomial0" (formula "21") (term "0,0,0"))
               (rule "polySimp_mulLiterals" (formula "21") (term "0,0,0,0"))
               (rule "shiftLeftDef" (formula "23") (term "0,1"))
               (rule "polySimp_elimNeg" (formula "23") (term "1,1,0,1"))
               (rule "polySimp_mulComm0" (formula "23") (term "1,1,0,1"))
               (rule "polySimp_rightDist" (formula "23") (term "1,1,0,1"))
               (rule "polySimp_mulLiterals" (formula "23") (term "1,1,1,0,1"))
               (rule "polySimp_mulComm0" (formula "23") (term "0,1,1,0,1"))
               (rule "shiftLeftPositiveShiftDef" (formula "23") (term "2,0,1"))
               (rule "polySimp_elimOneLeft0" (formula "23") (term "2,0,1"))
               (rule "shiftRightPositiveShiftDef" (formula "23") (term "1,0,1"))
               (rule "inEqSimp_ltToLeq" (formula "23") (term "0,0,1"))
               (rule "times_zero_1" (formula "23") (term "1,0,0,0,0,1"))
               (rule "add_literals" (formula "23") (term "0,0,0,0,1"))
               (rule "polySimp_addAssoc" (formula "23") (term "0,0,0,1"))
               (rule "inEqSimp_commuteGeq" (formula "23"))
               (rule "inEqSimp_sepNegMonomial0" (formula "23") (term "0,0,0"))
               (rule "polySimp_mulLiterals" (formula "23") (term "0,0,0,0"))
               (rule "applyEq" (formula "23") (term "0") (ifseqformula "21"))
               (rule "inEqSimp_commuteLeq" (formula "23"))
               (rule "shiftLeftDef" (formula "24") (term "0,1"))
               (rule "polySimp_elimNeg" (formula "24") (term "1,1,0,1"))
               (rule "polySimp_mulComm0" (formula "24") (term "1,1,0,1"))
               (rule "polySimp_rightDist" (formula "24") (term "1,1,0,1"))
               (rule "polySimp_mulLiterals" (formula "24") (term "1,1,1,0,1"))
               (rule "polySimp_mulComm0" (formula "24") (term "0,1,1,0,1"))
               (rule "shiftLeftPositiveShiftDef" (formula "24") (term "2,0,1"))
               (rule "polySimp_elimOneLeft0" (formula "24") (term "2,0,1"))
               (rule "shiftRightPositiveShiftDef" (formula "24") (term "1,0,1"))
               (rule "inEqSimp_ltToLeq" (formula "24") (term "0,0,1"))
               (rule "times_zero_1" (formula "24") (term "1,0,0,0,0,1"))
               (rule "add_zero_right" (formula "24") (term "0,0,0,0,1"))
               (rule "polySimp_addAssoc" (formula "24") (term "0,0,0,1"))
               (rule "inEqSimp_commuteGeq" (formula "24"))
               (rule "inEqSimp_sepNegMonomial0" (formula "24") (term "0,0,0"))
               (rule "polySimp_mulLiterals" (formula "24") (term "0,0,0,0"))
               (rule "applyEq" (formula "24") (term "0") (ifseqformula "21"))
               (rule "inEqSimp_commuteLeq" (formula "24"))
               (rule "shiftLeftDef" (formula "15") (term "0,0,0"))
               (rule "polySimp_elimNeg" (formula "15") (term "1,1,0,0,0"))
               (rule "polySimp_mulComm0" (formula "15") (term "1,1,0,0,0"))
               (rule "polySimp_rightDist" (formula "15") (term "1,1,0,0,0"))
               (rule "polySimp_mulLiterals" (formula "15") (term "1,1,1,0,0,0"))
               (rule "polySimp_mulComm0" (formula "15") (term "0,1,1,0,0,0"))
               (rule "shiftLeftPositiveShiftDef" (formula "15") (term "2,0,0,0"))
               (rule "polySimp_elimOneLeft0" (formula "15") (term "2,0,0,0"))
               (rule "shiftRightPositiveShiftDef" (formula "15") (term "1,0,0,0"))
               (rule "inEqSimp_ltToLeq" (formula "15") (term "0,0,0,0"))
               (rule "times_zero_1" (formula "15") (term "1,0,0,0,0,0,0"))
               (rule "add_zero_right" (formula "15") (term "0,0,0,0,0,0"))
               (rule "polySimp_addAssoc" (formula "15") (term "0,0,0,0,0"))
               (rule "inEqSimp_sepNegMonomial0" (formula "15") (term "0,0,0,0"))
               (rule "polySimp_mulLiterals" (formula "15") (term "0,0,0,0,0"))
               (rule "applyEq" (formula "15") (term "0,0") (ifseqformula "21"))
               (rule "shiftLeftDef" (formula "13") (term "0,0"))
               (rule "polySimp_elimNeg" (formula "13") (term "1,1,0,0"))
               (rule "polySimp_mulComm0" (formula "13") (term "1,1,0,0"))
               (rule "polySimp_rightDist" (formula "13") (term "1,1,0,0"))
               (rule "polySimp_mulLiterals" (formula "13") (term "1,1,1,0,0"))
               (rule "polySimp_mulComm0" (formula "13") (term "0,1,1,0,0"))
               (rule "shiftLeftPositiveShiftDef" (formula "13") (term "2,0,0"))
               (rule "polySimp_elimOneLeft0" (formula "13") (term "2,0,0"))
               (rule "shiftRightPositiveShiftDef" (formula "13") (term "1,0,0"))
               (rule "inEqSimp_ltToLeq" (formula "13") (term "0,0,0"))
               (rule "times_zero_1" (formula "13") (term "1,0,0,0,0,0"))
               (rule "add_literals" (formula "13") (term "0,0,0,0,0"))
               (rule "polySimp_addAssoc" (formula "13") (term "0,0,0,0"))
               (rule "inEqSimp_sepNegMonomial0" (formula "13") (term "0,0,0"))
               (rule "polySimp_mulLiterals" (formula "13") (term "0,0,0,0"))
               (rule "applyEq" (formula "13") (term "0") (ifseqformula "21"))
               (rule "shiftLeftDef" (formula "25") (term "0,1,3,0"))
               (rule "polySimp_elimNeg" (formula "25") (term "1,1,0,1,3,0"))
               (rule "polySimp_mulComm0" (formula "25") (term "1,1,0,1,3,0"))
               (rule "polySimp_rightDist" (formula "25") (term "1,1,0,1,3,0"))
               (rule "polySimp_mulLiterals" (formula "25") (term "1,1,1,0,1,3,0"))
               (rule "polySimp_mulComm0" (formula "25") (term "0,1,1,0,1,3,0"))
               (rule "shiftLeftPositiveShiftDef" (formula "25") (term "2,0,1,3,0"))
               (rule "polySimp_elimOneLeft0" (formula "25") (term "2,0,1,3,0"))
               (rule "shiftRightPositiveShiftDef" (formula "25") (term "1,0,1,3,0"))
               (rule "inEqSimp_ltToLeq" (formula "25") (term "0,0,1,3,0"))
               (rule "times_zero_1" (formula "25") (term "1,0,0,0,0,1,3,0"))
               (rule "add_zero_right" (formula "25") (term "0,0,0,0,1,3,0"))
               (rule "polySimp_addAssoc" (formula "25") (term "0,0,0,1,3,0"))
               (rule "inEqSimp_sepNegMonomial0" (formula "25") (term "0,0,1,3,0"))
               (rule "polySimp_mulLiterals" (formula "25") (term "0,0,0,1,3,0"))
               (rule "applyEq" (formula "25") (term "1,3,0") (ifseqformula "21"))
               (rule "shiftLeftDef" (formula "22") (term "0,0"))
               (rule "polySimp_elimNeg" (formula "22") (term "1,1,0,0"))
               (rule "polySimp_mulComm0" (formula "22") (term "1,1,0,0"))
               (rule "polySimp_rightDist" (formula "22") (term "1,1,0,0"))
               (rule "polySimp_mulLiterals" (formula "22") (term "1,1,1,0,0"))
               (rule "polySimp_mulComm0" (formula "22") (term "0,1,1,0,0"))
               (rule "shiftLeftPositiveShiftDef" (formula "22") (term "2,0,0"))
               (rule "polySimp_elimOneLeft0" (formula "22") (term "2,0,0"))
               (rule "shiftRightPositiveShiftDef" (formula "22") (term "1,0,0"))
               (rule "inEqSimp_ltToLeq" (formula "22") (term "0,0,0"))
               (rule "times_zero_1" (formula "22") (term "1,0,0,0,0,0"))
               (rule "add_zero_right" (formula "22") (term "0,0,0,0,0"))
               (rule "polySimp_addAssoc" (formula "22") (term "0,0,0,0"))
               (rule "inEqSimp_sepNegMonomial0" (formula "22") (term "0,0,0"))
               (rule "polySimp_mulLiterals" (formula "22") (term "0,0,0,0"))
               (rule "applyEq" (formula "22") (term "0") (ifseqformula "21"))
               (rule "shiftLeftDef" (formula "27") (term "0,1,1,1,0,0,0"))
               (rule "polySimp_elimNeg" (formula "27") (term "1,1,0,1,1,1,0,0,0"))
               (rule "polySimp_mulComm0" (formula "27") (term "1,1,0,1,1,1,0,0,0"))
               (rule "polySimp_rightDist" (formula "27") (term "1,1,0,1,1,1,0,0,0"))
               (rule "polySimp_mulLiterals" (formula "27") (term "1,1,1,0,1,1,1,0,0,0"))
               (rule "polySimp_mulComm0" (formula "27") (term "0,1,1,0,1,1,1,0,0,0"))
               (rule "shiftLeftPositiveShiftDef" (formula "27") (term "2,0,1,1,1,0,0,0"))
               (rule "polySimp_elimOneLeft0" (formula "27") (term "2,0,1,1,1,0,0,0"))
               (rule "shiftRightPositiveShiftDef" (formula "27") (term "1,0,1,1,1,0,0,0"))
               (rule "inEqSimp_ltToLeq" (formula "27") (term "0,0,1,1,1,0,0,0"))
               (rule "times_zero_1" (formula "27") (term "1,0,0,0,0,1,1,1,0,0,0"))
               (rule "add_literals" (formula "27") (term "0,0,0,0,1,1,1,0,0,0"))
               (rule "polySimp_addAssoc" (formula "27") (term "0,0,0,1,1,1,0,0,0"))
               (rule "inEqSimp_sepNegMonomial0" (formula "27") (term "0,0,1,1,1,0,0,0"))
               (rule "polySimp_mulLiterals" (formula "27") (term "0,0,0,1,1,1,0,0,0"))
               (rule "applyEq" (formula "27") (term "1,1,1,0,0,0") (ifseqformula "21"))
               (rule "shiftLeftDef" (formula "26") (term "0,1,1,1,1,0"))
               (rule "polySimp_elimNeg" (formula "26") (term "1,1,0,1,1,1,1,0"))
               (rule "polySimp_mulComm0" (formula "26") (term "1,1,0,1,1,1,1,0"))
               (rule "polySimp_rightDist" (formula "26") (term "1,1,0,1,1,1,1,0"))
               (rule "polySimp_mulLiterals" (formula "26") (term "1,1,1,0,1,1,1,1,0"))
               (rule "polySimp_mulComm0" (formula "26") (term "0,1,1,0,1,1,1,1,0"))
               (rule "shiftLeftPositiveShiftDef" (formula "26") (term "2,0,1,1,1,1,0"))
               (rule "polySimp_elimOneLeft0" (formula "26") (term "2,0,1,1,1,1,0"))
               (rule "shiftRightPositiveShiftDef" (formula "26") (term "1,0,1,1,1,1,0"))
               (rule "inEqSimp_ltToLeq" (formula "26") (term "0,0,1,1,1,1,0"))
               (rule "times_zero_1" (formula "26") (term "1,0,0,0,0,1,1,1,1,0"))
               (rule "add_zero_right" (formula "26") (term "0,0,0,0,1,1,1,1,0"))
               (rule "polySimp_addAssoc" (formula "26") (term "0,0,0,1,1,1,1,0"))
               (rule "inEqSimp_sepNegMonomial0" (formula "26") (term "0,0,1,1,1,1,0"))
               (rule "polySimp_mulLiterals" (formula "26") (term "0,0,0,1,1,1,1,0"))
               (rule "applyEq" (formula "26") (term "1,1,1,1,0") (ifseqformula "21"))
               (rule "shiftLeftDef" (formula "26") (term "0,1,1,1,0,0,0"))
               (rule "polySimp_elimNeg" (formula "26") (term "1,1,0,1,1,1,0,0,0"))
               (rule "polySimp_mulComm0" (formula "26") (term "1,1,0,1,1,1,0,0,0"))
               (rule "polySimp_rightDist" (formula "26") (term "1,1,0,1,1,1,0,0,0"))
               (rule "polySimp_mulLiterals" (formula "26") (term "1,1,1,0,1,1,1,0,0,0"))
               (rule "polySimp_mulComm0" (formula "26") (term "0,1,1,0,1,1,1,0,0,0"))
               (rule "shiftLeftPositiveShiftDef" (formula "26") (term "2,0,1,1,1,0,0,0"))
               (rule "polySimp_elimOneLeft0" (formula "26") (term "2,0,1,1,1,0,0,0"))
               (rule "shiftRightPositiveShiftDef" (formula "26") (term "1,0,1,1,1,0,0,0"))
               (rule "inEqSimp_ltToLeq" (formula "26") (term "0,0,1,1,1,0,0,0"))
               (rule "times_zero_1" (formula "26") (term "1,0,0,0,0,1,1,1,0,0,0"))
               (rule "add_zero_right" (formula "26") (term "0,0,0,0,1,1,1,0,0,0"))
               (rule "polySimp_addAssoc" (formula "26") (term "0,0,0,1,1,1,0,0,0"))
               (rule "inEqSimp_sepNegMonomial0" (formula "26") (term "0,0,1,1,1,0,0,0"))
               (rule "polySimp_mulLiterals" (formula "26") (term "0,0,0,1,1,1,0,0,0"))
               (rule "applyEq" (formula "26") (term "1,1,1,0,0,0") (ifseqformula "21"))
               (rule "inEqSimp_exactShadow3" (formula "17") (ifseqformula "20"))
               (rule "polySimp_rightDist" (formula "17") (term "0,0"))
               (rule "mul_literals" (formula "17") (term "0,0,0"))
               (rule "polySimp_addComm1" (formula "17") (term "0"))
               (rule "add_literals" (formula "17") (term "0,0"))
               (rule "inEqSimp_sepNegMonomial1" (formula "17"))
               (rule "polySimp_mulLiterals" (formula "17") (term "0"))
               (rule "polySimp_elimOne" (formula "17") (term "0"))
               (rule "inEqSimp_subsumption0" (formula "11") (ifseqformula "17"))
               (rule "leq_literals" (formula "11") (term "0"))
                (builtin "One Step Simplification" (formula "11"))
               (rule "true_left" (formula "11"))
               (rule "expand_moduloInteger" (formula "21") (term "0"))
               (rule "replace_int_MIN" (formula "21") (term "0,0"))
               (rule "replace_int_RANGE" (formula "21") (term "1,1,0"))
               (rule "replace_int_HALFRANGE" (formula "21") (term "0,0,1,0"))
               (rule "polySimp_homoEq" (formula "21"))
               (rule "polySimp_mulComm0" (formula "21") (term "1,0"))
               (rule "polySimp_rightDist" (formula "21") (term "1,0"))
               (rule "mul_literals" (formula "21") (term "0,1,0"))
               (rule "polySimp_addAssoc" (formula "21") (term "0"))
               (rule "polySimp_addComm0" (formula "21") (term "0,0"))
               (rule "polySimp_sepNegMonomial" (formula "21"))
               (rule "polySimp_mulLiterals" (formula "21") (term "0"))
               (rule "polySimp_elimOne" (formula "21") (term "0"))
               (rule "nnf_imp2or" (formula "27") (term "0"))
               (rule "nnf_imp2or" (formula "26") (term "0"))
               (rule "nnf_notAnd" (formula "27") (term "0,0"))
               (rule "nnf_notAnd" (formula "26") (term "0,0"))
               (rule "nnf_notAnd" (formula "27") (term "0,0,0"))
               (rule "inEqSimp_notGeq" (formula "27") (term "0,0,0,0"))
               (rule "mul_literals" (formula "27") (term "1,0,0,0,0,0,0"))
               (rule "add_literals" (formula "27") (term "0,0,0,0,0,0"))
               (rule "add_zero_left" (formula "27") (term "0,0,0,0,0"))
               (rule "inEqSimp_notLeq" (formula "27") (term "1,0,0,0"))
               (rule "polySimp_rightDist" (formula "27") (term "1,0,0,1,0,0,0"))
               (rule "mul_literals" (formula "27") (term "0,1,0,0,1,0,0,0"))
               (rule "polySimp_addAssoc" (formula "27") (term "0,0,1,0,0,0"))
               (rule "add_literals" (formula "27") (term "0,0,0,1,0,0,0"))
               (rule "add_zero_left" (formula "27") (term "0,0,1,0,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "27") (term "1,0,0,0"))
               (rule "polySimp_mulLiterals" (formula "27") (term "1,1,0,0,0"))
               (rule "polySimp_elimOne" (formula "27") (term "1,1,0,0,0"))
               (rule "nnf_notAnd" (formula "27") (term "1,0,0"))
               (rule "inEqSimp_notLeq" (formula "27") (term "0,1,0,0"))
               (rule "mul_literals" (formula "27") (term "1,0,0,0,1,0,0"))
               (rule "add_literals" (formula "27") (term "0,0,0,1,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "27") (term "0,1,0,0"))
               (rule "mul_literals" (formula "27") (term "1,0,1,0,0"))
               (rule "inEqSimp_notGeq" (formula "27") (term "1,1,0,0"))
               (rule "mul_literals" (formula "27") (term "1,0,0,1,1,0,0"))
               (rule "add_literals" (formula "27") (term "0,0,1,1,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "27") (term "1,1,0,0"))
               (rule "mul_literals" (formula "27") (term "1,1,1,0,0"))
               (rule "nnf_notAnd" (formula "26") (term "0,0,0"))
               (rule "inEqSimp_notLeq" (formula "26") (term "1,0,0,0"))
               (rule "polySimp_rightDist" (formula "26") (term "1,0,0,1,0,0,0"))
               (rule "mul_literals" (formula "26") (term "0,1,0,0,1,0,0,0"))
               (rule "polySimp_addAssoc" (formula "26") (term "0,0,1,0,0,0"))
               (rule "add_literals" (formula "26") (term "0,0,0,1,0,0,0"))
               (rule "add_zero_left" (formula "26") (term "0,0,1,0,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "26") (term "1,0,0,0"))
               (rule "polySimp_mulLiterals" (formula "26") (term "1,1,0,0,0"))
               (rule "polySimp_elimOne" (formula "26") (term "1,1,0,0,0"))
               (rule "inEqSimp_notGeq" (formula "26") (term "0,0,0,0"))
               (rule "mul_literals" (formula "26") (term "1,0,0,0,0,0,0"))
               (rule "add_literals" (formula "26") (term "0,0,0,0,0,0"))
               (rule "add_zero_left" (formula "26") (term "0,0,0,0,0"))
               (rule "nnf_notAnd" (formula "26") (term "1,0,0"))
               (rule "inEqSimp_notGeq" (formula "26") (term "1,1,0,0"))
               (rule "mul_literals" (formula "26") (term "1,0,0,1,1,0,0"))
               (rule "add_literals" (formula "26") (term "0,0,1,1,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "1,1,0,0"))
               (rule "mul_literals" (formula "26") (term "1,1,1,0,0"))
               (rule "inEqSimp_notLeq" (formula "26") (term "0,1,0,0"))
               (rule "mul_literals" (formula "26") (term "1,0,0,0,1,0,0"))
               (rule "add_literals" (formula "26") (term "0,0,0,1,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "26") (term "0,1,0,0"))
               (rule "mul_literals" (formula "26") (term "1,0,1,0,0"))
               (rule "cut_direct" (formula "14") (term "1"))
               (branch "CUT: self.sorted_splitters[b] >= value TRUE"
                   (builtin "One Step Simplification" (formula "15"))
                  (rule "true_left" (formula "15"))
                  (rule "Contract_axiom_for_isSortedSliceTransitive_in_Functions" (formula "25") (term "0"))
                  (rule "replace_known_left" (formula "25") (term "0,1") (ifseqformula "26"))
                   (builtin "One Step Simplification" (formula "25") (ifInst ""  (formula "30")) (ifInst ""  (formula "4")))
                  (rule "Definition_axiom_for_isSortedSliceTransitive_in_de_wiesler_Functions" (formula "26") (term "0") (inst "i=i") (inst "j=j"))
                   (builtin "One Step Simplification" (formula "26"))
                  (rule "expand_inInt" (formula "26") (term "1,0,0,1,0"))
                  (rule "expand_inInt" (formula "26") (term "1,0,0"))
                  (rule "replace_int_MIN" (formula "26") (term "0,1,1,0,0,1,0"))
                  (rule "replace_int_MAX" (formula "26") (term "1,0,1,0,0,1,0"))
                  (rule "replace_int_MAX" (formula "26") (term "1,0,1,0,0"))
                  (rule "replace_int_MIN" (formula "26") (term "0,1,1,0,0"))
                  (rule "inEqSimp_ltToLeq" (formula "26") (term "1,0,0,0"))
                  (rule "polySimp_rightDist" (formula "26") (term "1,0,0,1,0,0,0"))
                  (rule "mul_literals" (formula "26") (term "0,1,0,0,1,0,0,0"))
                  (rule "polySimp_addAssoc" (formula "26") (term "0,0,1,0,0,0"))
                  (rule "add_literals" (formula "26") (term "0,0,0,1,0,0,0"))
                  (rule "inEqSimp_ltToLeq" (formula "26") (term "1,0,0,0,1,0"))
                  (rule "polySimp_rightDist" (formula "26") (term "1,0,0,1,0,0,0,1,0"))
                  (rule "mul_literals" (formula "26") (term "0,1,0,0,1,0,0,0,1,0"))
                  (rule "polySimp_addAssoc" (formula "26") (term "0,0,1,0,0,0,1,0"))
                  (rule "add_literals" (formula "26") (term "0,0,0,1,0,0,0,1,0"))
                  (rule "inEqSimp_commuteLeq" (formula "26") (term "0,0,0,0,1,0"))
                  (rule "inEqSimp_commuteLeq" (formula "26") (term "1,0,1,0"))
                  (rule "inEqSimp_commuteLeq" (formula "26") (term "0,0,0,0"))
                  (rule "inEqSimp_commuteLeq" (formula "26") (term "1,1,0,0,1,0"))
                  (rule "inEqSimp_commuteLeq" (formula "26") (term "1,1,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "1,0,0,0"))
                  (rule "polySimp_mulComm0" (formula "26") (term "1,1,0,0,0"))
                  (rule "polySimp_rightDist" (formula "26") (term "1,1,0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "26") (term "1,1,1,0,0,0"))
                  (rule "mul_literals" (formula "26") (term "0,1,1,0,0,0"))
                  (rule "polySimp_elimOne" (formula "26") (term "1,1,1,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "1,0,0,0,1,0"))
                  (rule "polySimp_mulComm0" (formula "26") (term "1,1,0,0,0,1,0"))
                  (rule "polySimp_rightDist" (formula "26") (term "1,1,0,0,0,1,0"))
                  (rule "polySimp_mulLiterals" (formula "26") (term "1,1,1,0,0,0,1,0"))
                  (rule "mul_literals" (formula "26") (term "0,1,1,0,0,0,1,0"))
                  (rule "polySimp_elimOne" (formula "26") (term "1,1,1,0,0,0,1,0"))
                  (rule "nnf_imp2or" (formula "26") (term "0"))
                  (rule "nnf_notAnd" (formula "26") (term "0,0"))
                  (rule "nnf_imp2or" (formula "26") (term "0,1,0"))
                  (rule "nnf_notAnd" (formula "26") (term "0,0,0"))
                  (rule "inEqSimp_notGeq" (formula "26") (term "0,0,0,0"))
                  (rule "times_zero_1" (formula "26") (term "1,0,0,0,0,0,0"))
                  (rule "add_literals" (formula "26") (term "0,0,0,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "0,0,0,0"))
                  (rule "mul_literals" (formula "26") (term "1,0,0,0,0"))
                  (rule "inEqSimp_notLeq" (formula "26") (term "1,0,0,0"))
                  (rule "polySimp_rightDist" (formula "26") (term "1,0,0,1,0,0,0"))
                  (rule "mul_literals" (formula "26") (term "0,1,0,0,1,0,0,0"))
                  (rule "polySimp_addAssoc" (formula "26") (term "0,0,1,0,0,0"))
                  (rule "add_literals" (formula "26") (term "0,0,0,1,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "26") (term "1,0,0,0"))
                  (rule "polySimp_mulComm0" (formula "26") (term "1,1,0,0,0"))
                  (rule "polySimp_rightDist" (formula "26") (term "1,1,0,0,0"))
                  (rule "mul_literals" (formula "26") (term "0,1,1,0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "26") (term "1,1,1,0,0,0"))
                  (rule "polySimp_elimOne" (formula "26") (term "1,1,1,0,0,0"))
                  (rule "nnf_notAnd" (formula "26") (term "1,0,0"))
                  (rule "inEqSimp_notLeq" (formula "26") (term "0,1,0,0"))
                  (rule "mul_literals" (formula "26") (term "1,0,0,0,1,0,0"))
                  (rule "add_literals" (formula "26") (term "0,0,0,1,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "26") (term "0,1,0,0"))
                  (rule "mul_literals" (formula "26") (term "1,0,1,0,0"))
                  (rule "inEqSimp_notGeq" (formula "26") (term "1,1,0,0"))
                  (rule "mul_literals" (formula "26") (term "1,0,0,1,1,0,0"))
                  (rule "add_literals" (formula "26") (term "0,0,1,1,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "1,1,0,0"))
                  (rule "mul_literals" (formula "26") (term "1,1,1,0,0"))
                  (rule "nnf_notAnd" (formula "26") (term "0,0,1,0"))
                  (rule "nnf_notAnd" (formula "26") (term "0,0,0,1,0"))
                  (rule "inEqSimp_notLeq" (formula "26") (term "1,0,0,0,1,0"))
                  (rule "polySimp_rightDist" (formula "26") (term "1,0,0,1,0,0,0,1,0"))
                  (rule "mul_literals" (formula "26") (term "0,1,0,0,1,0,0,0,1,0"))
                  (rule "polySimp_addAssoc" (formula "26") (term "0,0,1,0,0,0,1,0"))
                  (rule "add_literals" (formula "26") (term "0,0,0,1,0,0,0,1,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "26") (term "1,0,0,0,1,0"))
                  (rule "polySimp_mulComm0" (formula "26") (term "1,1,0,0,0,1,0"))
                  (rule "polySimp_rightDist" (formula "26") (term "1,1,0,0,0,1,0"))
                  (rule "mul_literals" (formula "26") (term "0,1,1,0,0,0,1,0"))
                  (rule "polySimp_mulLiterals" (formula "26") (term "1,1,1,0,0,0,1,0"))
                  (rule "polySimp_elimOne" (formula "26") (term "1,1,1,0,0,0,1,0"))
                  (rule "inEqSimp_notGeq" (formula "26") (term "0,0,0,0,1,0"))
                  (rule "polySimp_mulComm0" (formula "26") (term "1,0,0,0,0,0,0,1,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "0,0,0,0,1,0"))
                  (rule "polySimp_mulComm0" (formula "26") (term "1,0,0,0,0,1,0"))
                  (rule "polySimp_rightDist" (formula "26") (term "1,0,0,0,0,1,0"))
                  (rule "mul_literals" (formula "26") (term "0,1,0,0,0,0,1,0"))
                  (rule "polySimp_mulLiterals" (formula "26") (term "1,1,0,0,0,0,1,0"))
                  (rule "polySimp_elimOne" (formula "26") (term "1,1,0,0,0,0,1,0"))
                  (rule "nnf_notAnd" (formula "26") (term "1,0,0,1,0"))
                  (rule "inEqSimp_notLeq" (formula "26") (term "0,1,0,0,1,0"))
                  (rule "mul_literals" (formula "26") (term "1,0,0,0,1,0,0,1,0"))
                  (rule "add_literals" (formula "26") (term "0,0,0,1,0,0,1,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "26") (term "0,1,0,0,1,0"))
                  (rule "mul_literals" (formula "26") (term "1,0,1,0,0,1,0"))
                  (rule "inEqSimp_notGeq" (formula "26") (term "1,1,0,0,1,0"))
                  (rule "mul_literals" (formula "26") (term "1,0,0,1,1,0,0,1,0"))
                  (rule "add_literals" (formula "26") (term "0,0,1,1,0,0,1,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "1,1,0,0,1,0"))
                  (rule "mul_literals" (formula "26") (term "1,1,1,0,0,1,0"))
                  (rule "jdiv_axiom" (formula "13") (term "0"))
                  (rule "eqSymm" (formula "13"))
                  (rule "polySimp_mulComm0" (formula "13") (term "0,0,2,0"))
                  (rule "polySimp_rightDist" (formula "13") (term "0,0,2,0"))
                  (rule "mul_literals" (formula "13") (term "0,0,0,2,0"))
                  (rule "applyEq" (formula "13") (term "1") (ifseqformula "14"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "13") (term "0,0"))
                  (rule "mul_literals" (formula "13") (term "1,0,0"))
                  (rule "polyDiv_pullOut" (formula "13") (term "0,2,0") (inst "polyDivCoeff=mul(b, Z(neglit(1(#))))"))
                  (rule "polySimp_mulLiterals" (formula "13") (term "1,0,0,2,0,2,0"))
                  (rule "equal_literals" (formula "13") (term "0,0,2,0"))
                   (builtin "One Step Simplification" (formula "13"))
                  (rule "polySimp_mulLiterals" (formula "13") (term "1,0,0,0,2,0"))
                  (rule "polySimp_pullOutFactor0b" (formula "13") (term "0,0,0,2,0"))
                  (rule "add_literals" (formula "13") (term "1,1,0,0,0,2,0"))
                  (rule "polySimp_elimOne" (formula "13") (term "1,0,0,0,2,0"))
                  (rule "polySimp_mulComm0" (formula "13") (term "2,0"))
                  (rule "polySimp_addComm0" (formula "13") (term "1,2,0"))
                  (rule "polySimp_rightDist" (formula "13") (term "2,0"))
                  (rule "polySimp_mulAssoc" (formula "13") (term "0,2,0"))
                  (rule "polySimp_mulComm0" (formula "13") (term "0,0,2,0"))
                  (rule "polySimp_mulLiterals" (formula "13") (term "0,2,0"))
                  (rule "polySimp_elimOne" (formula "13") (term "0,2,0"))
                  (rule "polyDiv_pullOut" (formula "13") (term "0,1,2,0") (inst "polyDivCoeff=Z(neglit(1(#)))"))
                  (rule "polySimp_mulLiterals" (formula "13") (term "1,0,0,2,0,1,2,0"))
                  (rule "equal_literals" (formula "13") (term "0,0,1,2,0"))
                   (builtin "One Step Simplification" (formula "13"))
                  (rule "mul_literals" (formula "13") (term "1,0,0,0,1,2,0"))
                  (rule "polySimp_mulComm0" (formula "13") (term "1,2,0"))
                  (rule "polySimp_addComm0" (formula "13") (term "1,1,2,0"))
                  (rule "polySimp_addComm1" (formula "13") (term "0,1,1,1,2,0"))
                  (rule "add_literals" (formula "13") (term "0,0,1,1,1,2,0"))
                  (rule "polySimp_rightDist" (formula "13") (term "1,2,0"))
                  (rule "mul_literals" (formula "13") (term "0,1,2,0"))
                  (rule "polySimp_addAssoc" (formula "13") (term "2,0"))
                  (rule "polySimp_addComm0" (formula "13") (term "0,2,0"))
                  (rule "Definition_axiom_for_pi_in_de_wiesler_Tree" (formula "29") (term "1,0,2,0,1,0"))
                  (rule "translateJavaSubInt" (formula "29") (term "0,1,1,1,0,2,0,1,0"))
                  (rule "polySimp_elimSub" (formula "29") (term "1,0,0,1,0,2,0,1,0"))
                  (rule "polySimp_elimSub" (formula "29") (term "1,1,1,0,2,0,1,0"))
                  (rule "polySimp_elimSub" (formula "29") (term "0,1,1,1,0,2,0,1,0"))
                  (rule "mul_literals" (formula "29") (term "1,0,1,1,1,0,2,0,1,0"))
                  (rule "polySimp_mulComm0" (formula "29") (term "1,0,2,0,1,0"))
                  (rule "polySimp_addComm0" (formula "29") (term "0,1,0,1,0,2,0,1,0"))
                  (rule "polySimp_rightDist" (formula "29") (term "0,1,1,0,2,0,1,0"))
                  (rule "polySimp_mulLiterals" (formula "29") (term "1,0,1,1,0,2,0,1,0"))
                  (rule "polySimp_mulComm0" (formula "29") (term "0,0,1,1,0,2,0,1,0"))
                  (rule "polySimp_addComm1" (formula "29") (term "1,1,0,2,0,1,0"))
                  (rule "polySimp_addComm0" (formula "29") (term "0,1,1,0,2,0,1,0"))
                  (rule "polySimp_rightDist" (formula "29") (term "1,0,2,0,1,0"))
                  (rule "polySimp_mulComm1" (formula "29") (term "1,1,0,2,0,1,0"))
                  (rule "polySimp_mulComm0" (formula "29") (term "0,1,1,0,2,0,1,0"))
                  (rule "polySimp_rightDist" (formula "29") (term "0,1,0,2,0,1,0"))
                  (rule "polySimp_elimOne" (formula "29") (term "0,0,1,0,2,0,1,0"))
                  (rule "polySimp_mulComm1" (formula "29") (term "1,0,1,0,2,0,1,0"))
                  (rule "polySimp_mulComm0" (formula "29") (term "0,1,0,1,0,2,0,1,0"))
                  (rule "polySimp_addAssoc" (formula "29") (term "0,2,0,1,0"))
                  (rule "polySimp_addAssoc" (formula "29") (term "0,0,2,0,1,0"))
                  (rule "Definition_axiom_for_pi_in_de_wiesler_Tree" (formula "28") (term "0,1,1,0"))
                  (rule "translateJavaSubInt" (formula "28") (term "0,1,1,0,1,1,0"))
                  (rule "polySimp_elimSub" (formula "28") (term "1,0,0,0,1,1,0"))
                  (rule "polySimp_elimSub" (formula "28") (term "1,1,0,1,1,0"))
                  (rule "polySimp_elimSub" (formula "28") (term "0,1,1,0,1,1,0"))
                  (rule "mul_literals" (formula "28") (term "1,0,1,1,0,1,1,0"))
                  (rule "polySimp_mulComm0" (formula "28") (term "0,1,1,0"))
                  (rule "polySimp_addComm0" (formula "28") (term "0,1,0,0,1,1,0"))
                  (rule "polySimp_rightDist" (formula "28") (term "0,1,0,1,1,0"))
                  (rule "polySimp_mulLiterals" (formula "28") (term "1,0,1,0,1,1,0"))
                  (rule "polySimp_mulComm0" (formula "28") (term "0,0,1,0,1,1,0"))
                  (rule "polySimp_addComm1" (formula "28") (term "1,0,1,1,0"))
                  (rule "polySimp_addComm0" (formula "28") (term "0,1,0,1,1,0"))
                  (rule "polySimp_rightDist" (formula "28") (term "0,1,1,0"))
                  (rule "polySimp_mulComm1" (formula "28") (term "1,0,1,1,0"))
                  (rule "polySimp_mulComm0" (formula "28") (term "0,1,0,1,1,0"))
                  (rule "polySimp_rightDist" (formula "28") (term "0,0,1,1,0"))
                  (rule "polySimp_elimOne" (formula "28") (term "0,0,0,1,1,0"))
                  (rule "polySimp_mulComm1" (formula "28") (term "1,0,0,1,1,0"))
                  (rule "polySimp_mulComm0" (formula "28") (term "0,1,0,0,1,1,0"))
                  (rule "inEqSimp_homoInEq0" (formula "28") (term "1,1,0"))
                  (rule "polySimp_mulComm0" (formula "28") (term "1,0,1,1,0"))
                  (rule "polySimp_rightDist" (formula "28") (term "1,0,1,1,0"))
                  (rule "polySimp_mulLiterals" (formula "28") (term "1,1,0,1,1,0"))
                  (rule "polySimp_rightDist" (formula "28") (term "0,1,0,1,1,0"))
                  (rule "polySimp_mulLiterals" (formula "28") (term "1,0,1,0,1,1,0"))
                  (rule "polySimp_mulComm0" (formula "28") (term "0,0,1,0,1,1,0"))
                  (rule "polySimp_addAssoc" (formula "28") (term "0,1,1,0"))
                  (rule "polySimp_addAssoc" (formula "28") (term "0,0,1,1,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "28") (term "1,1,0"))
                  (rule "polySimp_mulComm0" (formula "28") (term "1,1,1,0"))
                  (rule "polySimp_rightDist" (formula "28") (term "1,1,1,0"))
                  (rule "polySimp_mulLiterals" (formula "28") (term "1,1,1,1,0"))
                  (rule "polySimp_rightDist" (formula "28") (term "0,1,1,1,0"))
                  (rule "polySimp_mulLiterals" (formula "28") (term "1,0,1,1,1,0"))
                  (rule "polySimp_elimOne" (formula "28") (term "1,0,1,1,1,0"))
                  (rule "polySimp_rightDist" (formula "28") (term "0,0,1,1,1,0"))
                  (rule "mul_literals" (formula "28") (term "0,0,0,1,1,1,0"))
                  (rule "Definition_axiom_for_pi_in_de_wiesler_Tree" (formula "28") (term "0,0,1,0"))
                  (rule "translateJavaSubInt" (formula "28") (term "0,1,1,0,0,1,0"))
                  (rule "polySimp_elimSub" (formula "28") (term "1,0,0,0,0,1,0"))
                  (rule "polySimp_elimSub" (formula "28") (term "1,1,0,0,1,0"))
                  (rule "polySimp_elimSub" (formula "28") (term "0,1,1,0,0,1,0"))
                  (rule "mul_literals" (formula "28") (term "1,0,1,1,0,0,1,0"))
                  (rule "polySimp_mulComm0" (formula "28") (term "0,0,1,0"))
                  (rule "polySimp_addComm0" (formula "28") (term "0,1,0,0,0,1,0"))
                  (rule "polySimp_rightDist" (formula "28") (term "0,1,0,0,1,0"))
                  (rule "polySimp_mulLiterals" (formula "28") (term "1,0,1,0,0,1,0"))
                  (rule "polySimp_mulComm0" (formula "28") (term "0,0,1,0,0,1,0"))
                  (rule "polySimp_addComm1" (formula "28") (term "1,0,0,1,0"))
                  (rule "polySimp_addComm0" (formula "28") (term "0,1,0,0,1,0"))
                  (rule "polySimp_rightDist" (formula "28") (term "0,0,1,0"))
                  (rule "polySimp_mulComm1" (formula "28") (term "1,0,0,1,0"))
                  (rule "polySimp_mulComm0" (formula "28") (term "0,1,0,0,1,0"))
                  (rule "polySimp_rightDist" (formula "28") (term "0,0,0,1,0"))
                  (rule "polySimp_elimOne" (formula "28") (term "0,0,0,0,1,0"))
                  (rule "polySimp_mulComm1" (formula "28") (term "1,0,0,0,1,0"))
                  (rule "polySimp_mulComm0" (formula "28") (term "0,1,0,0,0,1,0"))
                  (rule "inEqSimp_homoInEq1" (formula "28") (term "0,1,0"))
                  (rule "polySimp_mulComm0" (formula "28") (term "1,0,0,1,0"))
                  (rule "polySimp_rightDist" (formula "28") (term "1,0,0,1,0"))
                  (rule "polySimp_mulLiterals" (formula "28") (term "1,1,0,0,1,0"))
                  (rule "polySimp_rightDist" (formula "28") (term "0,1,0,0,1,0"))
                  (rule "polySimp_mulLiterals" (formula "28") (term "1,0,1,0,0,1,0"))
                  (rule "polySimp_mulComm0" (formula "28") (term "0,0,1,0,0,1,0"))
                  (rule "polySimp_addAssoc" (formula "28") (term "0,0,1,0"))
                  (rule "polySimp_addAssoc" (formula "28") (term "0,0,0,1,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "28") (term "0,1,0"))
                  (rule "polySimp_mulComm0" (formula "28") (term "1,0,1,0"))
                  (rule "polySimp_rightDist" (formula "28") (term "1,0,1,0"))
                  (rule "polySimp_mulLiterals" (formula "28") (term "1,1,0,1,0"))
                  (rule "polySimp_rightDist" (formula "28") (term "0,1,0,1,0"))
                  (rule "polySimp_mulLiterals" (formula "28") (term "1,0,1,0,1,0"))
                  (rule "mul_literals" (formula "28") (term "0,0,1,0,1,0"))
                  (rule "polySimp_elimOne" (formula "28") (term "1,0,1,0,1,0"))
                  (rule "Contract_axiom_for_isSortedSlice_in_Functions" (formula "26") (term "0"))
                  (rule "replace_known_left" (formula "26") (term "1,0") (ifseqformula "4"))
                   (builtin "One Step Simplification" (formula "26") (ifInst ""  (formula "32")) (ifInst ""  (formula "27")))
                  (rule "Definition_axiom_for_isSortedSlice_in_de_wiesler_Functions" (formula "27") (term "0") (inst "i=i"))
                   (builtin "One Step Simplification" (formula "27"))
                  (rule "expand_inInt" (formula "27") (term "1,0,0"))
                  (rule "replace_int_MIN" (formula "27") (term "0,1,1,0,0"))
                  (rule "replace_int_MAX" (formula "27") (term "1,0,1,0,0"))
                  (rule "translateJavaSubInt" (formula "27") (term "1,1,0,0,0"))
                  (rule "translateJavaAddInt" (formula "27") (term "0,2,1,1,0"))
                  (rule "polySimp_elimSub" (formula "27") (term "1,1,0,0,0"))
                  (rule "mul_literals" (formula "27") (term "1,1,1,0,0,0"))
                  (rule "polySimp_addComm0" (formula "27") (term "0,2,1,1,0"))
                  (rule "polySimp_addComm1" (formula "27") (term "1,1,0,0,0"))
                  (rule "add_literals" (formula "27") (term "0,1,1,0,0,0"))
                  (rule "inEqSimp_ltToLeq" (formula "27") (term "1,0,0,0"))
                  (rule "polySimp_rightDist" (formula "27") (term "1,0,0,1,0,0,0"))
                  (rule "mul_literals" (formula "27") (term "0,1,0,0,1,0,0,0"))
                  (rule "polySimp_addAssoc" (formula "27") (term "0,0,1,0,0,0"))
                  (rule "add_literals" (formula "27") (term "0,0,0,1,0,0,0"))
                  (rule "inEqSimp_commuteLeq" (formula "27") (term "0,0,0,0"))
                  (rule "inEqSimp_commuteLeq" (formula "27") (term "1,1,0,0"))
                  (rule "inEqSimp_commuteLeq" (formula "27") (term "1,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "27") (term "1,0,0,0"))
                  (rule "polySimp_mulComm0" (formula "27") (term "1,1,0,0,0"))
                  (rule "polySimp_rightDist" (formula "27") (term "1,1,0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "27") (term "1,1,1,0,0,0"))
                  (rule "mul_literals" (formula "27") (term "0,1,1,0,0,0"))
                  (rule "polySimp_elimOne" (formula "27") (term "1,1,1,0,0,0"))
                  (rule "commute_or_2" (formula "30") (term "0,0"))
                  (rule "nnf_imp2or" (formula "27") (term "0"))
                  (rule "nnf_notAnd" (formula "27") (term "0,0"))
                  (rule "commute_or_2" (formula "29") (term "0,0"))
                  (rule "nnf_notAnd" (formula "27") (term "1,0,0"))
                  (rule "inEqSimp_notGeq" (formula "27") (term "1,1,0,0"))
                  (rule "mul_literals" (formula "27") (term "1,0,0,1,1,0,0"))
                  (rule "add_literals" (formula "27") (term "0,0,1,1,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "27") (term "1,1,0,0"))
                  (rule "mul_literals" (formula "27") (term "1,1,1,0,0"))
                  (rule "inEqSimp_notLeq" (formula "27") (term "0,1,0,0"))
                  (rule "mul_literals" (formula "27") (term "1,0,0,0,1,0,0"))
                  (rule "add_literals" (formula "27") (term "0,0,0,1,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "27") (term "0,1,0,0"))
                  (rule "mul_literals" (formula "27") (term "1,0,1,0,0"))
                  (rule "nnf_notAnd" (formula "27") (term "0,0,0"))
                  (rule "inEqSimp_notLeq" (formula "27") (term "1,0,0,0"))
                  (rule "polySimp_rightDist" (formula "27") (term "1,0,0,1,0,0,0"))
                  (rule "mul_literals" (formula "27") (term "0,1,0,0,1,0,0,0"))
                  (rule "polySimp_addAssoc" (formula "27") (term "0,0,1,0,0,0"))
                  (rule "add_literals" (formula "27") (term "0,0,0,1,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "27") (term "1,0,0,0"))
                  (rule "polySimp_mulComm0" (formula "27") (term "1,1,0,0,0"))
                  (rule "polySimp_rightDist" (formula "27") (term "1,1,0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "27") (term "1,1,1,0,0,0"))
                  (rule "mul_literals" (formula "27") (term "0,1,1,0,0,0"))
                  (rule "polySimp_elimOne" (formula "27") (term "1,1,1,0,0,0"))
                  (rule "inEqSimp_notGeq" (formula "27") (term "0,0,0,0"))
                  (rule "times_zero_1" (formula "27") (term "1,0,0,0,0,0,0"))
                  (rule "add_zero_right" (formula "27") (term "0,0,0,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "27") (term "0,0,0,0"))
                  (rule "mul_literals" (formula "27") (term "1,0,0,0,0"))
                  (rule "commute_or_2" (formula "28") (term "0,0"))
                  (rule "arrayLengthIsAnInt" (formula "24") (term "0"))
                  (rule "expand_inInt" (formula "24"))
                  (rule "replace_int_MIN" (formula "24") (term "0,1"))
                  (rule "replace_int_MAX" (formula "24") (term "1,0"))
                  (rule "andLeft" (formula "24"))
                  (rule "inEqSimp_commuteLeq" (formula "25"))
                  (rule "inEqSimp_exactShadow3" (formula "26") (ifseqformula "24"))
                  (rule "polySimp_mulComm0" (formula "26") (term "0,0"))
                  (rule "polySimp_addComm0" (formula "26") (term "0"))
                  (rule "inEqSimp_sepNegMonomial1" (formula "26"))
                  (rule "polySimp_mulLiterals" (formula "26") (term "0"))
                  (rule "polySimp_elimOne" (formula "26") (term "0"))
                  (rule "inEqSimp_exactShadow3" (formula "12") (ifseqformula "26"))
                  (rule "polySimp_rightDist" (formula "12") (term "0,0"))
                  (rule "mul_literals" (formula "12") (term "0,0,0"))
                  (rule "polySimp_addComm1" (formula "12") (term "0"))
                  (rule "add_literals" (formula "12") (term "0,0"))
                  (rule "inEqSimp_sepNegMonomial1" (formula "12"))
                  (rule "polySimp_mulLiterals" (formula "12") (term "0"))
                  (rule "polySimp_elimOne" (formula "12") (term "0"))
                  (rule "arrayLengthNotNegative" (formula "27") (term "0"))
                  (rule "inEqSimp_subsumption1" (formula "25") (ifseqformula "27"))
                  (rule "leq_literals" (formula "25") (term "0"))
                   (builtin "One Step Simplification" (formula "25"))
                  (rule "true_left" (formula "25"))
                  (rule "arrayLengthIsAnInt" (formula "28") (term "0"))
                  (rule "expand_inInt" (formula "28"))
                  (rule "replace_int_MIN" (formula "28") (term "0,1"))
                  (rule "replace_int_MAX" (formula "28") (term "1,0"))
                  (rule "andLeft" (formula "28"))
                  (rule "inEqSimp_commuteLeq" (formula "29"))
                  (rule "inEqSimp_exactShadow3" (formula "30") (ifseqformula "28"))
                  (rule "polySimp_mulComm0" (formula "30") (term "0,0"))
                  (rule "polySimp_addComm0" (formula "30") (term "0"))
                  (rule "inEqSimp_sepNegMonomial1" (formula "30"))
                  (rule "polySimp_mulLiterals" (formula "30") (term "0"))
                  (rule "polySimp_elimOne" (formula "30") (term "0"))
                  (rule "arrayLengthNotNegative" (formula "30") (term "0"))
                  (rule "inEqSimp_subsumption1" (formula "29") (ifseqformula "30"))
                  (rule "leq_literals" (formula "29") (term "0"))
                   (builtin "One Step Simplification" (formula "29"))
                  (rule "true_left" (formula "29"))
                  (rule "commute_or_2" (formula "33") (term "0,0,1,0"))
                  (rule "div_axiom" (formula "22") (term "0,1,1,1,1,1,0,0") (inst "quotient=quotient_0"))
                  (rule "equal_literals" (formula "22") (term "0"))
                   (builtin "One Step Simplification" (formula "22"))
                  (rule "mul_literals" (formula "22") (term "1,1,1,1"))
                  (rule "qeq_literals" (formula "22") (term "0,1"))
                   (builtin "One Step Simplification" (formula "22"))
                  (rule "andLeft" (formula "22"))
                  (rule "andLeft" (formula "22"))
                  (rule "polySimp_addComm1" (formula "24") (term "1"))
                  (rule "add_literals" (formula "24") (term "0,1"))
                  (rule "inEqSimp_commuteLeq" (formula "23"))
                  (rule "inEqSimp_homoInEq1" (formula "24"))
                  (rule "polySimp_mulLiterals" (formula "24") (term "1,0"))
                  (rule "polySimp_addComm1" (formula "24") (term "0"))
                  (rule "applyEq" (formula "25") (term "0,1,1,1,1,1,0,0") (ifseqformula "22"))
                  (rule "polySimp_addComm0" (formula "25") (term "1,1,1,1,0,0"))
                  (rule "applyEq" (formula "25") (term "0,0,0,1,0,0") (ifseqformula "22"))
                  (rule "inEqSimp_homoInEq1" (formula "25") (term "0,1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "25") (term "1,0,0,1,0,0"))
                  (rule "polySimp_addComm1" (formula "25") (term "0,0,1,0,0"))
                  (rule "applyEq" (formula "25") (term "0,1,1,2,1,0,0") (ifseqformula "22"))
                  (rule "polySimp_addComm0" (formula "25") (term "1,2,1,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "24"))
                  (rule "polySimp_mulComm0" (formula "24") (term "1"))
                  (rule "polySimp_rightDist" (formula "24") (term "1"))
                  (rule "mul_literals" (formula "24") (term "0,1"))
                  (rule "polySimp_mulLiterals" (formula "24") (term "1,1"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "0,1,0,0"))
                  (rule "polySimp_mulComm0" (formula "25") (term "1,0,1,0,0"))
                  (rule "polySimp_rightDist" (formula "25") (term "1,0,1,0,0"))
                  (rule "mul_literals" (formula "25") (term "0,1,0,1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "25") (term "1,1,0,1,0,0"))
                  (rule "inEqSimp_contradInEq1" (formula "25") (term "0,1,0,0") (ifseqformula "23"))
                  (rule "inEqSimp_homoInEq1" (formula "25") (term "0,0,1,0,0"))
                  (rule "polySimp_mulComm0" (formula "25") (term "1,0,0,0,1,0,0"))
                  (rule "polySimp_rightDist" (formula "25") (term "1,0,0,0,1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "25") (term "1,1,0,0,0,1,0,0"))
                  (rule "mul_literals" (formula "25") (term "0,1,0,0,0,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "25") (term "0,0,0,1,0,0"))
                  (rule "polySimp_addComm0" (formula "25") (term "0,0,0,0,1,0,0"))
                  (rule "polySimp_pullOutFactor0b" (formula "25") (term "0,0,0,1,0,0"))
                  (rule "add_literals" (formula "25") (term "1,1,0,0,0,1,0,0"))
                  (rule "times_zero_1" (formula "25") (term "1,0,0,0,1,0,0"))
                  (rule "add_zero_right" (formula "25") (term "0,0,0,1,0,0"))
                  (rule "leq_literals" (formula "25") (term "0,0,1,0,0"))
                   (builtin "One Step Simplification" (formula "25"))
                  (rule "polySimp_homoEq" (formula "25"))
                  (rule "polySimp_addComm1" (formula "25") (term "0"))
                  (rule "mod_axiom" (formula "25") (term "0,1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "25") (term "1,0,1,0,0"))
                  (rule "polySimp_mulComm0" (formula "25") (term "1,0,0"))
                  (rule "polySimp_rightDist" (formula "25") (term "1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "25") (term "1,1,0,0"))
                  (rule "polySimp_rightDist" (formula "25") (term "0,1,0,0"))
                  (rule "mul_literals" (formula "25") (term "0,0,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "25") (term "0,0"))
                  (rule "polySimp_addAssoc" (formula "25") (term "0,0,0"))
                  (rule "add_literals" (formula "25") (term "0,0,0,0"))
                  (rule "add_zero_left" (formula "25") (term "0,0,0"))
                  (rule "polySimp_sepPosMonomial" (formula "25"))
                  (rule "polySimp_mulComm0" (formula "25") (term "1"))
                  (rule "polySimp_rightDist" (formula "25") (term "1"))
                  (rule "polySimp_mulLiterals" (formula "25") (term "1,1"))
                  (rule "polySimp_mulAssoc" (formula "25") (term "0,1"))
                  (rule "polySimp_mulComm0" (formula "25") (term "0,0,1"))
                  (rule "polySimp_mulLiterals" (formula "25") (term "0,1"))
                  (rule "polySimp_elimOne" (formula "25") (term "0,1"))
                  (rule "applyEq" (formula "28") (term "0") (ifseqformula "25"))
                  (rule "inEqSimp_homoInEq0" (formula "28"))
                  (rule "polySimp_mulComm0" (formula "28") (term "1,0"))
                  (rule "polySimp_rightDist" (formula "28") (term "1,0"))
                  (rule "polySimp_mulLiterals" (formula "28") (term "1,1,0"))
                  (rule "polySimp_mulComm0" (formula "28") (term "0,1,0"))
                  (rule "polySimp_addAssoc" (formula "28") (term "0"))
                  (rule "applyEq" (formula "36") (term "1,1,1,0,0,1,0") (ifseqformula "25"))
                  (rule "polySimp_addAssoc" (formula "36") (term "1,1,0,0,1,0"))
                  (rule "applyEq" (formula "26") (term "0") (ifseqformula "25"))
                  (rule "inEqSimp_homoInEq1" (formula "26"))
                  (rule "polySimp_mulComm0" (formula "26") (term "1,0"))
                  (rule "polySimp_rightDist" (formula "26") (term "1,0"))
                  (rule "polySimp_mulLiterals" (formula "26") (term "1,1,0"))
                  (rule "polySimp_mulComm0" (formula "26") (term "0,1,0"))
                  (rule "polySimp_addAssoc" (formula "26") (term "0"))
                  (rule "applyEq" (formula "12") (term "0") (ifseqformula "25"))
                  (rule "inEqSimp_homoInEq1" (formula "12"))
                  (rule "polySimp_mulComm0" (formula "12") (term "1,0"))
                  (rule "polySimp_rightDist" (formula "12") (term "1,0"))
                  (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0"))
                  (rule "polySimp_mulComm0" (formula "12") (term "0,1,0"))
                  (rule "polySimp_addAssoc" (formula "12") (term "0"))
                  (rule "applyEq" (formula "34") (term "1,3,0") (ifseqformula "25"))
                  (rule "polySimp_addAssoc" (formula "34") (term "3,0"))
                  (rule "applyEq" (formula "30") (term "1") (ifseqformula "25"))
                  (rule "applyEq" (formula "37") (term "1,1,0,0") (ifseqformula "25"))
                  (rule "applyEq" (formula "35") (term "1,1,1,0,0,0") (ifseqformula "25"))
                  (rule "polySimp_addAssoc" (formula "35") (term "1,1,0,0,0"))
                  (rule "applyEq" (formula "38") (term "1,1,0,0") (ifseqformula "25"))
                  (rule "applyEq" (formula "33") (term "1") (ifseqformula "25"))
                  (rule "applyEq" (formula "36") (term "1,1,1,0,0") (ifseqformula "25"))
                  (rule "polySimp_addAssoc" (formula "36") (term "1,1,0,0"))
                  (rule "applyEq" (formula "37") (term "0,1,0,0,1,1,1,0") (ifseqformula "25"))
                  (rule "polySimp_mulComm0" (formula "37") (term "1,0,0,1,1,1,0"))
                  (rule "polySimp_rightDist" (formula "37") (term "1,0,0,1,1,1,0"))
                  (rule "polySimp_mulLiterals" (formula "37") (term "1,1,0,0,1,1,1,0"))
                  (rule "polySimp_mulComm0" (formula "37") (term "0,1,0,0,1,1,1,0"))
                  (rule "polySimp_addAssoc" (formula "37") (term "0,0,1,1,1,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "28"))
                  (rule "polySimp_mulComm0" (formula "28") (term "1"))
                  (rule "polySimp_rightDist" (formula "28") (term "1"))
                  (rule "polySimp_mulLiterals" (formula "28") (term "1,1"))
                  (rule "mul_literals" (formula "28") (term "0,1"))
                  (rule "polySimp_elimOne" (formula "28") (term "1,1"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "26"))
                  (rule "polySimp_mulComm0" (formula "26") (term "1"))
                  (rule "polySimp_rightDist" (formula "26") (term "1"))
                  (rule "mul_literals" (formula "26") (term "0,1"))
                  (rule "polySimp_mulLiterals" (formula "26") (term "1,1"))
                  (rule "polySimp_elimOne" (formula "26") (term "1,1"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "12"))
                  (rule "polySimp_mulComm0" (formula "12") (term "1"))
                  (rule "polySimp_rightDist" (formula "12") (term "1"))
                  (rule "polySimp_mulLiterals" (formula "12") (term "1,1"))
                  (rule "polySimp_elimOne" (formula "12") (term "1,1"))
                  (rule "polySimp_rightDist" (formula "12") (term "0,1"))
                  (rule "mul_literals" (formula "12") (term "0,0,1"))
                  (rule "inEqSimp_exactShadow3" (formula "18") (ifseqformula "24"))
                  (rule "polySimp_rightDist" (formula "18") (term "0,0"))
                  (rule "mul_literals" (formula "18") (term "0,0,0"))
                  (rule "polySimp_addComm1" (formula "18") (term "0"))
                  (rule "polySimp_addAssoc" (formula "18") (term "0,0"))
                  (rule "add_literals" (formula "18") (term "0,0,0"))
                  (rule "inEqSimp_sepNegMonomial1" (formula "18"))
                  (rule "polySimp_mulLiterals" (formula "18") (term "0"))
                  (rule "polySimp_elimOne" (formula "18") (term "0"))
                  (rule "inEqSimp_exactShadow3" (formula "31") (ifseqformula "28"))
                  (rule "polySimp_rightDist" (formula "31") (term "0,0"))
                  (rule "polySimp_mulLiterals" (formula "31") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "31") (term "0,0,0"))
                  (rule "polySimp_addComm1" (formula "31") (term "0"))
                  (rule "polySimp_addComm0" (formula "31") (term "0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "31"))
                  (rule "polySimp_mulComm0" (formula "31") (term "1"))
                  (rule "polySimp_rightDist" (formula "31") (term "1"))
                  (rule "mul_literals" (formula "31") (term "0,1"))
                  (rule "polySimp_mulLiterals" (formula "31") (term "1,1"))
                  (rule "polySimp_elimOne" (formula "31") (term "1,1"))
                  (rule "inEqSimp_exactShadow3" (formula "21") (ifseqformula "25"))
                  (rule "mul_literals" (formula "21") (term "0,0"))
                  (rule "polySimp_addAssoc" (formula "21") (term "0"))
                  (rule "add_literals" (formula "21") (term "0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "21"))
                  (rule "mul_literals" (formula "21") (term "1"))
                  (rule "elimGcdGeq_antec" (formula "21") (inst "elimGcdRightDiv=Z(0(#))") (inst "elimGcdLeftDiv=quotient_0") (inst "elimGcd=Z(2(3(#)))"))
                  (rule "leq_literals" (formula "21") (term "0,0"))
                   (builtin "One Step Simplification" (formula "21"))
                  (rule "times_zero_1" (formula "21") (term "1,0,0,0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "21") (term "1,0,0"))
                  (rule "polySimp_addLiterals" (formula "21") (term "0,0,0,0"))
                  (rule "add_literals" (formula "21") (term "0,0,0,0"))
                  (rule "polySimp_pullOutFactor0b" (formula "21") (term "0,0"))
                  (rule "add_literals" (formula "21") (term "1,1,0,0"))
                  (rule "times_zero_1" (formula "21") (term "1,0,0"))
                  (rule "add_zero_right" (formula "21") (term "0,0"))
                  (rule "leq_literals" (formula "21") (term "0"))
                   (builtin "One Step Simplification" (formula "21"))
                  (rule "inEqSimp_exactShadow0" (formula "30") (ifseqformula "12"))
                   (builtin "One Step Simplification" (formula "30"))
                  (rule "greater_literals" (formula "30") (term "0"))
                   (builtin "One Step Simplification" (formula "30"))
                  (rule "polySimp_rightDist" (formula "30") (term "1,0,0"))
                  (rule "mul_literals" (formula "30") (term "0,1,0,0"))
                  (rule "polySimp_rightDist" (formula "30") (term "1,0"))
                  (rule "polySimp_rightDist" (formula "30") (term "0,0"))
                  (rule "mul_literals" (formula "30") (term "0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "30") (term "1,0,0"))
                  (rule "polySimp_rightDist" (formula "30") (term "0,1,0"))
                  (rule "mul_literals" (formula "30") (term "0,0,1,0"))
                  (rule "polySimp_mulLiterals" (formula "30") (term "1,0,1,0"))
                  (rule "polySimp_addAssoc" (formula "30") (term "0"))
                  (rule "polySimp_addComm1" (formula "30") (term "0,0"))
                  (rule "polySimp_pullOutFactor0b" (formula "30") (term "0"))
                  (rule "add_literals" (formula "30") (term "1,1,0"))
                  (rule "times_zero_1" (formula "30") (term "1,0"))
                  (rule "add_zero_right" (formula "30") (term "0"))
                  (rule "polySimp_addAssoc" (formula "30") (term "0"))
                  (rule "add_literals" (formula "30") (term "0,0"))
                  (rule "inEqSimp_sepNegMonomial1" (formula "30"))
                  (rule "polySimp_mulLiterals" (formula "30") (term "0"))
                  (rule "inEqSimp_subsumption4" (formula "30") (ifseqformula "8"))
                  (rule "greater_literals" (formula "30") (term "0,0"))
                   (builtin "One Step Simplification" (formula "30"))
                  (rule "mul_literals" (formula "30") (term "0,0"))
                  (rule "leq_literals" (formula "30") (term "0"))
                   (builtin "One Step Simplification" (formula "30"))
                  (rule "true_left" (formula "30"))
                  (rule "inEqSimp_exactShadow3" (formula "35") (ifseqformula "33"))
                  (rule "polySimp_rightDist" (formula "35") (term "0,0"))
                  (rule "polySimp_mulLiterals" (formula "35") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "35") (term "0,0,0"))
                  (rule "polySimp_addComm1" (formula "35") (term "0"))
                  (rule "polySimp_addComm0" (formula "35") (term "0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "35"))
                  (rule "polySimp_mulComm0" (formula "35") (term "1"))
                  (rule "polySimp_rightDist" (formula "35") (term "1"))
                  (rule "polySimp_mulLiterals" (formula "35") (term "1,1"))
                  (rule "mul_literals" (formula "35") (term "0,1"))
                  (rule "polySimp_elimOne" (formula "35") (term "1,1"))
                  (rule "inEqSimp_exactShadow3" (formula "25") (ifseqformula "23"))
                  (rule "polySimp_mulAssoc" (formula "25") (term "0,0"))
                  (rule "polySimp_mulComm0" (formula "25") (term "0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "25") (term "0,0"))
                  (rule "polySimp_addComm0" (formula "25") (term "0"))
                  (rule "inEqSimp_sepNegMonomial1" (formula "25"))
                  (rule "polySimp_mulLiterals" (formula "25") (term "0"))
                  (rule "elimGcdLeq_antec" (formula "25") (inst "elimGcdRightDiv=Z(0(#))") (inst "elimGcdLeftDiv=quotient_0") (inst "elimGcd=Z(2(3(#)))"))
                  (rule "neg_literal" (formula "25") (term "0,0,0,0,0,1,0"))
                  (rule "times_zero_1" (formula "25") (term "1,0,0,0,0,1,0"))
                  (rule "polySimp_mulLiterals" (formula "25") (term "1,0,1,0"))
                  (rule "leq_literals" (formula "25") (term "0,0"))
                   (builtin "One Step Simplification" (formula "25"))
                  (rule "polySimp_addLiterals" (formula "25") (term "0,0,0,0"))
                  (rule "add_literals" (formula "25") (term "0,0,0,0"))
                  (rule "polySimp_pullOutFactor0b" (formula "25") (term "0,0"))
                  (rule "add_literals" (formula "25") (term "1,1,0,0"))
                  (rule "times_zero_1" (formula "25") (term "1,0,0"))
                  (rule "add_zero_right" (formula "25") (term "0,0"))
                  (rule "qeq_literals" (formula "25") (term "0"))
                   (builtin "One Step Simplification" (formula "25"))
                  (rule "inEqSimp_exactShadow3" (formula "16") (ifseqformula "18"))
                  (rule "times_zero_1" (formula "16") (term "0,0"))
                  (rule "add_zero_left" (formula "16") (term "0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "16"))
                  (rule "mul_literals" (formula "16") (term "1"))
                  (rule "inEqSimp_subsumption6" (formula "16") (ifseqformula "22"))
                  (rule "times_zero_1" (formula "16") (term "1,1,0"))
                  (rule "greater_literals" (formula "16") (term "0,0"))
                   (builtin "One Step Simplification" (formula "16"))
                  (rule "leq_literals" (formula "16") (term "0"))
                   (builtin "One Step Simplification" (formula "16"))
                  (rule "true_left" (formula "16"))
                  (rule "inEqSimp_antiSymm" (formula "21") (ifseqformula "25"))
                  (rule "applyEq" (formula "26") (term "0") (ifseqformula "21"))
                  (rule "leq_literals" (formula "26"))
                  (rule "true_left" (formula "26"))
                  (rule "applyEq" (formula "18") (term "0,1,1") (ifseqformula "21"))
                  (rule "times_zero_2" (formula "18") (term "1,1"))
                  (rule "add_zero_right" (formula "18") (term "1"))
                  (rule "applyEq" (formula "22") (term "0") (ifseqformula "21"))
                  (rule "qeq_literals" (formula "22"))
                  (rule "true_left" (formula "22"))
                  (rule "applyEqRigid" (formula "25") (term "0,1") (ifseqformula "21"))
                  (rule "mul_literals" (formula "25") (term "1"))
                  (rule "applyEqRigid" (formula "26") (term "0,1,1") (ifseqformula "21"))
                  (rule "mul_literals" (formula "26") (term "1,1"))
                  (rule "add_zero_right" (formula "26") (term "1"))
                  (rule "applyEqRigid" (formula "36") (term "0,0,1,1,0,0,1,3,0") (ifseqformula "21"))
                  (rule "times_zero_2" (formula "36") (term "0,1,1,0,0,1,3,0"))
                  (rule "add_zero_left" (formula "36") (term "1,1,0,0,1,3,0"))
                  (rule "polySimp_addComm1" (formula "36") (term "3,0"))
                  (rule "applyEqRigid" (formula "38") (term "0,0,1,1,0,0,1,1,1,0,0,1,0") (ifseqformula "21"))
                  (rule "times_zero_2" (formula "38") (term "0,1,1,0,0,1,1,1,0,0,1,0"))
                  (rule "add_zero_left" (formula "38") (term "1,1,0,0,1,1,1,0,0,1,0"))
                  (rule "polySimp_addComm1" (formula "38") (term "1,1,0,0,1,0"))
                  (rule "applyEq" (formula "32") (term "0,0,1,1,0,0,1,1") (ifseqformula "21"))
                  (rule "times_zero_2" (formula "32") (term "0,1,1,0,0,1,1"))
                  (rule "add_zero_left" (formula "32") (term "1,1,0,0,1,1"))
                  (rule "polySimp_addComm0" (formula "32") (term "1"))
                  (rule "applyEq" (formula "30") (term "0,0,1,1,0,0,0") (ifseqformula "21"))
                  (rule "times_zero_2" (formula "30") (term "0,1,1,0,0,0"))
                  (rule "add_zero_left" (formula "30") (term "1,1,0,0,0"))
                  (rule "inEqSimp_homoInEq1" (formula "30"))
                  (rule "polySimp_mulLiterals" (formula "30") (term "1,0"))
                  (rule "polySimp_addComm1" (formula "30") (term "0"))
                  (rule "applyEq" (formula "37") (term "0,0,1,1,0,0,1,1,1,0,0,0") (ifseqformula "21"))
                  (rule "times_zero_2" (formula "37") (term "0,1,1,0,0,1,1,1,0,0,0"))
                  (rule "add_zero_left" (formula "37") (term "1,1,0,0,1,1,1,0,0,0"))
                  (rule "polySimp_addComm1" (formula "37") (term "1,1,0,0,0"))
                  (rule "applyEqRigid" (formula "24") (term "1") (ifseqformula "21"))
                  (rule "applyEqRigid" (formula "35") (term "0,0,1,1,0,0,1,1") (ifseqformula "21"))
                  (rule "times_zero_2" (formula "35") (term "0,1,1,0,0,1,1"))
                  (rule "add_zero_left" (formula "35") (term "1,1,0,0,1,1"))
                  (rule "polySimp_addComm0" (formula "35") (term "1"))
                  (rule "applyEqRigid" (formula "12") (term "0,0,1,1,0,0,0") (ifseqformula "21"))
                  (rule "times_zero_2" (formula "12") (term "0,1,1,0,0,0"))
                  (rule "add_zero_left" (formula "12") (term "1,1,0,0,0"))
                  (rule "inEqSimp_homoInEq0" (formula "12"))
                  (rule "polySimp_mulLiterals" (formula "12") (term "1,0"))
                  (rule "polySimp_addComm1" (formula "12") (term "0"))
                  (rule "applyEq" (formula "28") (term "0,0,1,1,0,0,0") (ifseqformula "21"))
                  (rule "times_zero_2" (formula "28") (term "0,1,1,0,0,0"))
                  (rule "add_zero_left" (formula "28") (term "1,1,0,0,0"))
                  (rule "inEqSimp_homoInEq0" (formula "28"))
                  (rule "polySimp_mulLiterals" (formula "28") (term "1,0"))
                  (rule "polySimp_addComm1" (formula "28") (term "0"))
                  (rule "applyEqRigid" (formula "40") (term "0,0,1,1,0,0,1,1,1,0,0") (ifseqformula "21"))
                  (rule "times_zero_2" (formula "40") (term "0,1,1,0,0,1,1,1,0,0"))
                  (rule "add_zero_left" (formula "40") (term "1,1,0,0,1,1,1,0,0"))
                  (rule "polySimp_addComm0" (formula "40") (term "1,1,0,0"))
                  (rule "applyEq" (formula "38") (term "0,0,1,1,0,0,1,1,1,0,0") (ifseqformula "21"))
                  (rule "times_zero_2" (formula "38") (term "0,1,1,0,0,1,1,1,0,0"))
                  (rule "add_zero_left" (formula "38") (term "1,1,0,0,1,1,1,0,0"))
                  (rule "polySimp_addComm1" (formula "38") (term "1,1,0,0"))
                  (rule "applyEqRigid" (formula "39") (term "0,0,1,1,0,0,1,1,1,0,0") (ifseqformula "21"))
                  (rule "times_zero_2" (formula "39") (term "0,1,1,0,0,1,1,1,0,0"))
                  (rule "add_zero_left" (formula "39") (term "1,1,0,0,1,1,1,0,0"))
                  (rule "polySimp_addComm0" (formula "39") (term "1,1,0,0"))
                  (rule "applyEqRigid" (formula "27") (term "0,0,1,1,0,0,1,1") (ifseqformula "21"))
                  (rule "times_zero_2" (formula "27") (term "0,1,1,0,0,1,1"))
                  (rule "add_zero_left" (formula "27") (term "1,1,0,0,1,1"))
                  (rule "polySimp_addComm0" (formula "27") (term "1"))
                  (rule "applyEq" (formula "39") (term "0,0,1,1,0,0,1,0,0,1,1,1,0") (ifseqformula "21"))
                  (rule "times_zero_2" (formula "39") (term "0,1,1,0,0,1,0,0,1,1,1,0"))
                  (rule "add_zero_left" (formula "39") (term "1,1,0,0,1,0,0,1,1,1,0"))
                  (rule "polySimp_addComm1" (formula "39") (term "0,0,1,1,1,0"))
                  (rule "applyEqRigid" (formula "36") (term "0,0,1,1,3,0") (ifseqformula "21"))
                  (rule "times_zero_2" (formula "36") (term "0,1,1,3,0"))
                  (rule "add_zero_left" (formula "36") (term "1,1,3,0"))
                  (rule "polySimp_addComm1" (formula "36") (term "3,0"))
                  (rule "applyEq" (formula "38") (term "0,0,1,1,1,1,0,0,1,0") (ifseqformula "21"))
                  (rule "times_zero_2" (formula "38") (term "0,1,1,1,1,0,0,1,0"))
                  (rule "add_zero_left" (formula "38") (term "1,1,1,1,0,0,1,0"))
                  (rule "polySimp_addComm1" (formula "38") (term "1,1,0,0,1,0"))
                  (rule "applyEqRigid" (formula "38") (term "0,0,1,1,1,1,0,0") (ifseqformula "21"))
                  (rule "times_zero_2" (formula "38") (term "0,1,1,1,1,0,0"))
                  (rule "add_zero_left" (formula "38") (term "1,1,1,1,0,0"))
                  (rule "polySimp_addComm1" (formula "38") (term "1,1,0,0"))
                  (rule "applyEq" (formula "32") (term "0,0,1,1,1") (ifseqformula "21"))
                  (rule "times_zero_2" (formula "32") (term "0,1,1,1"))
                  (rule "add_zero_left" (formula "32") (term "1,1,1"))
                  (rule "polySimp_addComm0" (formula "32") (term "1"))
                  (rule "applyEqRigid" (formula "39") (term "0,0,1,1,1,1,0,0") (ifseqformula "21"))
                  (rule "times_zero_2" (formula "39") (term "0,1,1,1,1,0,0"))
                  (rule "add_zero_left" (formula "39") (term "1,1,1,1,0,0"))
                  (rule "polySimp_addComm0" (formula "39") (term "1,1,0,0"))
                  (rule "applyEq" (formula "35") (term "0,0,1,1,1") (ifseqformula "21"))
                  (rule "times_zero_2" (formula "35") (term "0,1,1,1"))
                  (rule "add_zero_left" (formula "35") (term "1,1,1"))
                  (rule "polySimp_addComm0" (formula "35") (term "1"))
                  (rule "applyEq" (formula "28") (term "0,0,1,1,0") (ifseqformula "21"))
                  (rule "times_zero_2" (formula "28") (term "0,1,1,0"))
                  (rule "add_zero_left" (formula "28") (term "1,1,0"))
                  (rule "polySimp_addComm1" (formula "28") (term "0"))
                  (rule "applyEq" (formula "40") (term "0,0,1,1,1,1,0,0") (ifseqformula "21"))
                  (rule "times_zero_2" (formula "40") (term "0,1,1,1,1,0,0"))
                  (rule "add_zero_left" (formula "40") (term "1,1,1,1,0,0"))
                  (rule "polySimp_addComm0" (formula "40") (term "1,1,0,0"))
                  (rule "applyEqRigid" (formula "37") (term "0,0,1,1,1,1,0,0,0") (ifseqformula "21"))
                  (rule "times_zero_2" (formula "37") (term "0,1,1,1,1,0,0,0"))
                  (rule "add_zero_left" (formula "37") (term "1,1,1,1,0,0,0"))
                  (rule "polySimp_addComm1" (formula "37") (term "1,1,0,0,0"))
                  (rule "applyEq" (formula "30") (term "0,0,1,1,0") (ifseqformula "21"))
                  (rule "times_zero_2" (formula "30") (term "0,1,1,0"))
                  (rule "add_zero_left" (formula "30") (term "1,1,0"))
                  (rule "polySimp_addComm1" (formula "30") (term "0"))
                  (rule "applyEq" (formula "12") (term "0,0,1,1,0") (ifseqformula "21"))
                  (rule "times_zero_2" (formula "12") (term "0,1,1,0"))
                  (rule "add_zero_left" (formula "12") (term "1,1,0"))
                  (rule "polySimp_addComm1" (formula "12") (term "0"))
                  (rule "applyEq" (formula "27") (term "0,0,1,1,1") (ifseqformula "21"))
                  (rule "times_zero_2" (formula "27") (term "0,1,1,1"))
                  (rule "add_zero_left" (formula "27") (term "1,1,1"))
                  (rule "polySimp_addComm0" (formula "27") (term "1"))
                  (rule "applyEq" (formula "39") (term "0,0,1,0,1,0,0,1,1,1,0") (ifseqformula "21"))
                  (rule "mul_literals" (formula "39") (term "0,1,0,1,0,0,1,1,1,0"))
                  (rule "add_zero_left" (formula "39") (term "1,0,1,0,0,1,1,1,0"))
                  (rule "polySimp_addComm1" (formula "39") (term "0,0,1,1,1,0"))
                  (rule "inEqSimp_sepNegMonomial1" (formula "28"))
                  (rule "polySimp_mulLiterals" (formula "28") (term "0"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "30"))
                  (rule "polySimp_mulLiterals" (formula "30") (term "0"))
                  (rule "inEqSimp_sepNegMonomial1" (formula "12"))
                  (rule "polySimp_mulLiterals" (formula "12") (term "0"))
                  (rule "inEqSimp_subsumption0" (formula "18") (ifseqformula "17"))
                  (rule "leq_literals" (formula "18") (term "0"))
                   (builtin "One Step Simplification" (formula "18"))
                  (rule "true_left" (formula "18"))
                  (rule "inEqSimp_subsumption1" (formula "24") (ifseqformula "21"))
                  (rule "leq_literals" (formula "24") (term "0"))
                   (builtin "One Step Simplification" (formula "24"))
                  (rule "true_left" (formula "24"))
                  (rule "inEqSimp_subsumption0" (formula "24") (ifseqformula "22"))
                  (rule "leq_literals" (formula "24") (term "0"))
                   (builtin "One Step Simplification" (formula "24"))
                  (rule "true_left" (formula "24"))
                  (rule "inEqSimp_exactShadow0" (formula "27") (ifseqformula "12"))
                   (builtin "One Step Simplification" (formula "27"))
                  (rule "greater_literals" (formula "27") (term "0"))
                   (builtin "One Step Simplification" (formula "27"))
                  (rule "polySimp_rightDist" (formula "27") (term "1,0"))
                  (rule "polySimp_rightDist" (formula "27") (term "1,0,0"))
                  (rule "mul_literals" (formula "27") (term "0,1,0,0"))
                  (rule "polySimp_rightDist" (formula "27") (term "0,1,0"))
                  (rule "mul_literals" (formula "27") (term "0,0,1,0"))
                  (rule "polySimp_mulLiterals" (formula "27") (term "1,0,1,0"))
                  (rule "polySimp_rightDist" (formula "27") (term "0,0"))
                  (rule "mul_literals" (formula "27") (term "0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "27") (term "1,0,0"))
                  (rule "polySimp_addAssoc" (formula "27") (term "0"))
                  (rule "polySimp_addComm1" (formula "27") (term "0,0"))
                  (rule "polySimp_pullOutFactor0b" (formula "27") (term "0"))
                  (rule "add_literals" (formula "27") (term "1,1,0"))
                  (rule "times_zero_1" (formula "27") (term "1,0"))
                  (rule "add_zero_right" (formula "27") (term "0"))
                  (rule "polySimp_addAssoc" (formula "27") (term "0"))
                  (rule "add_literals" (formula "27") (term "0,0"))
                  (rule "inEqSimp_sepNegMonomial1" (formula "27"))
                  (rule "polySimp_mulLiterals" (formula "27") (term "0"))
                  (rule "inEqSimp_subsumption4" (formula "27") (ifseqformula "8"))
                  (rule "greater_literals" (formula "27") (term "0,0"))
                   (builtin "One Step Simplification" (formula "27"))
                  (rule "mul_literals" (formula "27") (term "0,0"))
                  (rule "leq_literals" (formula "27") (term "0"))
                   (builtin "One Step Simplification" (formula "27"))
                  (rule "true_left" (formula "27"))
                  (rule "inEqSimp_exactShadow3" (formula "29") (ifseqformula "26"))
                  (rule "polySimp_rightDist" (formula "29") (term "0,0"))
                  (rule "polySimp_mulLiterals" (formula "29") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "29") (term "0,0,0"))
                  (rule "polySimp_addComm1" (formula "29") (term "0"))
                  (rule "polySimp_addComm0" (formula "29") (term "0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "29"))
                  (rule "polySimp_mulComm0" (formula "29") (term "1"))
                  (rule "polySimp_rightDist" (formula "29") (term "1"))
                  (rule "mul_literals" (formula "29") (term "0,1"))
                  (rule "polySimp_mulLiterals" (formula "29") (term "1,1"))
                  (rule "polySimp_elimOne" (formula "29") (term "1,1"))
                  (rule "inEqSimp_exactShadow3" (formula "32") (ifseqformula "30"))
                  (rule "polySimp_rightDist" (formula "32") (term "0,0"))
                  (rule "polySimp_mulLiterals" (formula "32") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "32") (term "0,0,0"))
                  (rule "polySimp_addComm1" (formula "32") (term "0"))
                  (rule "polySimp_addComm0" (formula "32") (term "0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "32"))
                  (rule "polySimp_mulComm0" (formula "32") (term "1"))
                  (rule "polySimp_rightDist" (formula "32") (term "1"))
                  (rule "mul_literals" (formula "32") (term "0,1"))
                  (rule "polySimp_mulLiterals" (formula "32") (term "1,1"))
                  (rule "polySimp_elimOne" (formula "32") (term "1,1"))
                  (rule "commute_or" (formula "34") (term "1,0,0"))
                  (rule "commute_or" (formula "37") (term "1,0,0,0"))
                  (rule "shift_paren_or" (formula "36") (term "0,0,0"))
                  (rule "shift_paren_or" (formula "35") (term "0,0,0"))
                  (rule "div_axiom" (formula "13") (term "1,0") (inst "quotient=quotient_1"))
                  (rule "equal_literals" (formula "13") (term "0"))
                   (builtin "One Step Simplification" (formula "13"))
                  (rule "qeq_literals" (formula "13") (term "0,1"))
                   (builtin "One Step Simplification" (formula "13"))
                  (rule "mul_literals" (formula "13") (term "1,1,1"))
                  (rule "andLeft" (formula "13"))
                  (rule "andLeft" (formula "13"))
                  (rule "polySimp_addAssoc" (formula "15") (term "0,1"))
                  (rule "add_literals" (formula "15") (term "0,0,1"))
                  (rule "polySimp_addComm1" (formula "15") (term "1"))
                  (rule "add_literals" (formula "15") (term "0,1"))
                  (rule "add_zero_left" (formula "15") (term "1"))
                  (rule "inEqSimp_commuteGeq" (formula "15"))
                  (rule "inEqSimp_homoInEq0" (formula "14"))
                  (rule "polySimp_mulLiterals" (formula "14") (term "1,0"))
                  (rule "polySimp_addComm1" (formula "14") (term "0"))
                  (rule "applyEq" (formula "16") (term "0,1,2,0") (ifseqformula "13"))
                  (rule "polySimp_addComm1" (formula "16") (term "2,0"))
                  (rule "applyEq" (formula "16") (term "1,0") (ifseqformula "13"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "14"))
                  (rule "polySimp_mulComm0" (formula "14") (term "1"))
                  (rule "polySimp_rightDist" (formula "14") (term "1"))
                  (rule "mul_literals" (formula "14") (term "0,1"))
                  (rule "polySimp_mulLiterals" (formula "14") (term "1,1"))
                  (rule "inEqSimp_exactShadow3" (formula "14") (ifseqformula "8"))
                  (rule "polySimp_rightDist" (formula "14") (term "0,0"))
                  (rule "polySimp_mulLiterals" (formula "14") (term "1,0,0"))
                  (rule "mul_literals" (formula "14") (term "0,0,0"))
                  (rule "polySimp_addComm1" (formula "14") (term "0"))
                  (rule "add_literals" (formula "14") (term "0,0"))
                  (rule "inEqSimp_sepNegMonomial1" (formula "14"))
                  (rule "polySimp_mulLiterals" (formula "14") (term "0"))
                  (rule "elimGcdLeq_antec" (formula "14") (inst "elimGcdRightDiv=Z(3(2(8(1(4(7(3(7(0(1(#)))))))))))") (inst "elimGcdLeftDiv=quotient_1") (inst "elimGcd=Z(2(#))"))
                  (rule "polySimp_mulLiterals" (formula "14") (term "1,0,1,0"))
                  (rule "polySimp_mulLiterals" (formula "14") (term "1,0,0,0,0,1,0"))
                  (rule "neg_literal" (formula "14") (term "0,0,0,0,0,1,0"))
                  (rule "leq_literals" (formula "14") (term "0,0"))
                   (builtin "One Step Simplification" (formula "14"))
                  (rule "mul_literals" (formula "14") (term "1,0,0,0,0,0"))
                  (rule "polySimp_addLiterals" (formula "14") (term "0,0,0,0"))
                  (rule "add_literals" (formula "14") (term "0,0,0,0"))
                  (rule "polySimp_pullOutFactor0b" (formula "14") (term "0,0"))
                  (rule "add_literals" (formula "14") (term "1,1,0,0"))
                  (rule "times_zero_1" (formula "14") (term "1,0,0"))
                  (rule "add_zero_right" (formula "14") (term "0,0"))
                  (rule "qeq_literals" (formula "14") (term "0"))
                   (builtin "One Step Simplification" (formula "14"))
                  (rule "inEqSimp_exactShadow3" (formula "7") (ifseqformula "16"))
                  (rule "mul_literals" (formula "7") (term "0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "7"))
                  (rule "mul_literals" (formula "7") (term "1"))
                  (rule "elimGcdGeq_antec" (formula "7") (inst "elimGcdRightDiv=Z(neglit(4(2(8(1(4(7(3(7(0(1(#))))))))))))") (inst "elimGcdLeftDiv=quotient_1") (inst "elimGcd=Z(2(#))"))
                  (rule "leq_literals" (formula "7") (term "0,0"))
                   (builtin "One Step Simplification" (formula "7"))
                  (rule "polySimp_mulLiterals" (formula "7") (term "1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "7") (term "1,0,0,0,0,0"))
                  (rule "mul_literals" (formula "7") (term "1,0,0,0,0,0"))
                  (rule "polySimp_addLiterals" (formula "7") (term "0,0,0,0"))
                  (rule "add_zero_right" (formula "7") (term "0,0,0,0"))
                  (rule "polySimp_pullOutFactor0b" (formula "7") (term "0,0"))
                  (rule "add_literals" (formula "7") (term "1,1,0,0"))
                  (rule "times_zero_1" (formula "7") (term "1,0,0"))
                  (rule "add_zero_right" (formula "7") (term "0,0"))
                  (rule "leq_literals" (formula "7") (term "0"))
                   (builtin "One Step Simplification" (formula "7"))
                  (rule "commute_or" (formula "40") (term "0,0,0,1,0"))
                  (rule "onlyCreatedObjectsAreReferencedFinal" (formula "1") (term "1,0") (ifseqformula "4") (ifseqformula "5"))
                  (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "45"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "onlyCreatedObjectsAreReferencedFinal" (formula "44") (term "0") (ifseqformula "5") (ifseqformula "6"))
                  (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "45"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "Contract_axiom_for_isSortedSliceTransitive_in_Functions" (formula "40") (term "0"))
                  (rule "replace_known_left" (formula "40") (term "0,1") (ifseqformula "41"))
                   (builtin "One Step Simplification" (formula "40") (ifInst ""  (formula "47")) (ifInst ""  (formula "6")))
                  (rule "Definition_axiom_for_isSortedSliceTransitive_in_de_wiesler_Functions" (formula "41") (term "0") (inst "i=i") (inst "j=j"))
                   (builtin "One Step Simplification" (formula "41"))
                  (rule "expand_inInt" (formula "41") (term "1,0,0,1,0"))
                  (rule "expand_inInt" (formula "41") (term "1,0,0"))
                  (rule "replace_int_MAX" (formula "41") (term "1,0,1,0,0,1,0"))
                  (rule "replace_int_MIN" (formula "41") (term "0,1,1,0,0,1,0"))
                  (rule "replace_int_MIN" (formula "41") (term "0,1,1,0,0"))
                  (rule "replace_int_MAX" (formula "41") (term "1,0,1,0,0"))
                  (rule "inEqSimp_ltToLeq" (formula "41") (term "1,0,0,0,1,0"))
                  (rule "polySimp_rightDist" (formula "41") (term "1,0,0,1,0,0,0,1,0"))
                  (rule "polySimp_mulLiterals" (formula "41") (term "1,1,0,0,1,0,0,0,1,0"))
                  (rule "polySimp_rightDist" (formula "41") (term "0,1,0,0,1,0,0,0,1,0"))
                  (rule "mul_literals" (formula "41") (term "0,0,1,0,0,1,0,0,0,1,0"))
                  (rule "polySimp_addAssoc" (formula "41") (term "0,0,1,0,0,0,1,0"))
                  (rule "polySimp_addAssoc" (formula "41") (term "0,0,0,1,0,0,0,1,0"))
                  (rule "add_literals" (formula "41") (term "0,0,0,0,1,0,0,0,1,0"))
                  (rule "inEqSimp_ltToLeq" (formula "41") (term "1,0,0,0"))
                  (rule "polySimp_rightDist" (formula "41") (term "1,0,0,1,0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "41") (term "1,1,0,0,1,0,0,0"))
                  (rule "polySimp_rightDist" (formula "41") (term "0,1,0,0,1,0,0,0"))
                  (rule "mul_literals" (formula "41") (term "0,0,1,0,0,1,0,0,0"))
                  (rule "polySimp_addAssoc" (formula "41") (term "0,0,1,0,0,0"))
                  (rule "polySimp_addAssoc" (formula "41") (term "0,0,0,1,0,0,0"))
                  (rule "add_literals" (formula "41") (term "0,0,0,0,1,0,0,0"))
                  (rule "inEqSimp_commuteLeq" (formula "41") (term "0,0,0,0"))
                  (rule "inEqSimp_commuteLeq" (formula "41") (term "0,0,0,0,1,0"))
                  (rule "inEqSimp_commuteLeq" (formula "41") (term "1,0,1,0"))
                  (rule "inEqSimp_commuteLeq" (formula "41") (term "1,1,0,0,1,0"))
                  (rule "inEqSimp_commuteLeq" (formula "41") (term "1,1,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "41") (term "1,0,0,0,1,0"))
                  (rule "polySimp_mulComm0" (formula "41") (term "1,1,0,0,0,1,0"))
                  (rule "polySimp_rightDist" (formula "41") (term "1,1,0,0,0,1,0"))
                  (rule "polySimp_mulLiterals" (formula "41") (term "1,1,1,0,0,0,1,0"))
                  (rule "polySimp_rightDist" (formula "41") (term "0,1,1,0,0,0,1,0"))
                  (rule "mul_literals" (formula "41") (term "0,0,1,1,0,0,0,1,0"))
                  (rule "polySimp_mulLiterals" (formula "41") (term "1,0,1,1,0,0,0,1,0"))
                  (rule "polySimp_elimOne" (formula "41") (term "1,0,1,1,0,0,0,1,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "41") (term "1,0,0,0"))
                  (rule "polySimp_mulComm0" (formula "41") (term "1,1,0,0,0"))
                  (rule "polySimp_rightDist" (formula "41") (term "1,1,0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "41") (term "1,1,1,0,0,0"))
                  (rule "polySimp_rightDist" (formula "41") (term "0,1,1,0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "41") (term "1,0,1,1,0,0,0"))
                  (rule "mul_literals" (formula "41") (term "0,0,1,1,0,0,0"))
                  (rule "polySimp_elimOne" (formula "41") (term "1,0,1,1,0,0,0"))
                  (rule "nnf_imp2or" (formula "41") (term "0"))
                  (rule "nnf_notAnd" (formula "41") (term "0,0"))
                  (rule "nnf_imp2or" (formula "41") (term "0,1,0"))
                  (rule "nnf_notAnd" (formula "41") (term "1,0,0"))
                  (rule "inEqSimp_notGeq" (formula "41") (term "1,1,0,0"))
                  (rule "mul_literals" (formula "41") (term "1,0,0,1,1,0,0"))
                  (rule "add_literals" (formula "41") (term "0,0,1,1,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "41") (term "1,1,0,0"))
                  (rule "mul_literals" (formula "41") (term "1,1,1,0,0"))
                  (rule "inEqSimp_notLeq" (formula "41") (term "0,1,0,0"))
                  (rule "mul_literals" (formula "41") (term "1,0,0,0,1,0,0"))
                  (rule "add_literals" (formula "41") (term "0,0,0,1,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "41") (term "0,1,0,0"))
                  (rule "mul_literals" (formula "41") (term "1,0,1,0,0"))
                  (rule "nnf_notAnd" (formula "41") (term "0,0,0"))
                  (rule "inEqSimp_notLeq" (formula "41") (term "1,0,0,0"))
                  (rule "polySimp_rightDist" (formula "41") (term "1,0,0,1,0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "41") (term "1,1,0,0,1,0,0,0"))
                  (rule "polySimp_rightDist" (formula "41") (term "0,1,0,0,1,0,0,0"))
                  (rule "mul_literals" (formula "41") (term "0,0,1,0,0,1,0,0,0"))
                  (rule "polySimp_addAssoc" (formula "41") (term "0,0,1,0,0,0"))
                  (rule "polySimp_addAssoc" (formula "41") (term "0,0,0,1,0,0,0"))
                  (rule "add_literals" (formula "41") (term "0,0,0,0,1,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "41") (term "1,0,0,0"))
                  (rule "polySimp_mulComm0" (formula "41") (term "1,1,0,0,0"))
                  (rule "polySimp_rightDist" (formula "41") (term "1,1,0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "41") (term "1,1,1,0,0,0"))
                  (rule "polySimp_rightDist" (formula "41") (term "0,1,1,0,0,0"))
                  (rule "mul_literals" (formula "41") (term "0,0,1,1,0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "41") (term "1,0,1,1,0,0,0"))
                  (rule "polySimp_elimOne" (formula "41") (term "1,0,1,1,0,0,0"))
                  (rule "inEqSimp_notGeq" (formula "41") (term "0,0,0,0"))
                  (rule "times_zero_1" (formula "41") (term "1,0,0,0,0,0,0"))
                  (rule "add_zero_right" (formula "41") (term "0,0,0,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "41") (term "0,0,0,0"))
                  (rule "mul_literals" (formula "41") (term "1,0,0,0,0"))
                  (rule "nnf_notAnd" (formula "41") (term "0,0,1,0"))
                  (rule "nnf_notAnd" (formula "41") (term "1,0,0,1,0"))
                  (rule "inEqSimp_notLeq" (formula "41") (term "0,1,0,0,1,0"))
                  (rule "mul_literals" (formula "41") (term "1,0,0,0,1,0,0,1,0"))
                  (rule "add_literals" (formula "41") (term "0,0,0,1,0,0,1,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "41") (term "0,1,0,0,1,0"))
                  (rule "mul_literals" (formula "41") (term "1,0,1,0,0,1,0"))
                  (rule "inEqSimp_notGeq" (formula "41") (term "1,1,0,0,1,0"))
                  (rule "mul_literals" (formula "41") (term "1,0,0,1,1,0,0,1,0"))
                  (rule "add_literals" (formula "41") (term "0,0,1,1,0,0,1,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "41") (term "1,1,0,0,1,0"))
                  (rule "mul_literals" (formula "41") (term "1,1,1,0,0,1,0"))
                  (rule "nnf_notAnd" (formula "41") (term "0,0,0,1,0"))
                  (rule "inEqSimp_notGeq" (formula "41") (term "0,0,0,0,1,0"))
                  (rule "polySimp_mulComm0" (formula "41") (term "1,0,0,0,0,0,0,1,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "41") (term "0,0,0,0,1,0"))
                  (rule "polySimp_mulComm0" (formula "41") (term "1,0,0,0,0,1,0"))
                  (rule "polySimp_rightDist" (formula "41") (term "1,0,0,0,0,1,0"))
                  (rule "polySimp_mulLiterals" (formula "41") (term "1,1,0,0,0,0,1,0"))
                  (rule "mul_literals" (formula "41") (term "0,1,0,0,0,0,1,0"))
                  (rule "polySimp_elimOne" (formula "41") (term "1,1,0,0,0,0,1,0"))
                  (rule "inEqSimp_notLeq" (formula "41") (term "1,0,0,0,1,0"))
                  (rule "polySimp_rightDist" (formula "41") (term "1,0,0,1,0,0,0,1,0"))
                  (rule "polySimp_mulLiterals" (formula "41") (term "1,1,0,0,1,0,0,0,1,0"))
                  (rule "polySimp_rightDist" (formula "41") (term "0,1,0,0,1,0,0,0,1,0"))
                  (rule "mul_literals" (formula "41") (term "0,0,1,0,0,1,0,0,0,1,0"))
                  (rule "polySimp_addAssoc" (formula "41") (term "0,0,1,0,0,0,1,0"))
                  (rule "polySimp_addAssoc" (formula "41") (term "0,0,0,1,0,0,0,1,0"))
                  (rule "add_literals" (formula "41") (term "0,0,0,0,1,0,0,0,1,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "41") (term "1,0,0,0,1,0"))
                  (rule "polySimp_mulComm0" (formula "41") (term "1,1,0,0,0,1,0"))
                  (rule "polySimp_rightDist" (formula "41") (term "1,1,0,0,0,1,0"))
                  (rule "polySimp_mulLiterals" (formula "41") (term "1,1,1,0,0,0,1,0"))
                  (rule "polySimp_rightDist" (formula "41") (term "0,1,1,0,0,0,1,0"))
                  (rule "mul_literals" (formula "41") (term "0,0,1,1,0,0,0,1,0"))
                  (rule "polySimp_mulLiterals" (formula "41") (term "1,0,1,1,0,0,0,1,0"))
                  (rule "polySimp_elimOne" (formula "41") (term "1,0,1,1,0,0,0,1,0"))
                  (rule "commute_or_2" (formula "42") (term "0,0"))
                  (rule "commute_or_2" (formula "44") (term "0,0,0"))
                  (rule "commute_or_2" (formula "43") (term "0,0,0"))
                  (rule "Contract_axiom_for_isSortedSlice_in_Functions" (formula "40") (term "0"))
                  (rule "replace_known_left" (formula "40") (term "1,0") (ifseqformula "6"))
                   (builtin "One Step Simplification" (formula "40") (ifInst ""  (formula "48")) (ifInst ""  (formula "41")))
                  (rule "Definition_axiom_for_isSortedSlice_in_de_wiesler_Functions" (formula "41") (term "0") (inst "i=i"))
                   (builtin "One Step Simplification" (formula "41"))
                  (rule "expand_inInt" (formula "41") (term "1,0,0"))
                  (rule "replace_int_MAX" (formula "41") (term "1,0,1,0,0"))
                  (rule "replace_int_MIN" (formula "41") (term "0,1,1,0,0"))
                  (rule "translateJavaAddInt" (formula "41") (term "0,2,1,1,0"))
                  (rule "translateJavaSubInt" (formula "41") (term "1,1,0,0,0"))
                  (rule "polySimp_elimSub" (formula "41") (term "1,1,0,0,0"))
                  (rule "mul_literals" (formula "41") (term "1,1,1,0,0,0"))
                  (rule "polySimp_addComm0" (formula "41") (term "0,2,1,1,0"))
                  (rule "polySimp_addComm1" (formula "41") (term "1,1,0,0,0"))
                  (rule "polySimp_addComm1" (formula "41") (term "0,1,1,0,0,0"))
                  (rule "add_literals" (formula "41") (term "0,0,1,1,0,0,0"))
                  (rule "inEqSimp_ltToLeq" (formula "41") (term "1,0,0,0"))
                  (rule "polySimp_rightDist" (formula "41") (term "1,0,0,1,0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "41") (term "1,1,0,0,1,0,0,0"))
                  (rule "polySimp_rightDist" (formula "41") (term "0,1,0,0,1,0,0,0"))
                  (rule "mul_literals" (formula "41") (term "0,0,1,0,0,1,0,0,0"))
                  (rule "polySimp_addAssoc" (formula "41") (term "0,0,1,0,0,0"))
                  (rule "polySimp_addAssoc" (formula "41") (term "0,0,0,1,0,0,0"))
                  (rule "add_literals" (formula "41") (term "0,0,0,0,1,0,0,0"))
                  (rule "inEqSimp_commuteLeq" (formula "41") (term "0,0,0,0"))
                  (rule "inEqSimp_commuteLeq" (formula "41") (term "1,1,0,0"))
                  (rule "inEqSimp_commuteLeq" (formula "41") (term "1,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "41") (term "1,0,0,0"))
                  (rule "polySimp_mulComm0" (formula "41") (term "1,1,0,0,0"))
                  (rule "polySimp_rightDist" (formula "41") (term "1,1,0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "41") (term "1,1,1,0,0,0"))
                  (rule "polySimp_rightDist" (formula "41") (term "0,1,1,0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "41") (term "1,0,1,1,0,0,0"))
                  (rule "mul_literals" (formula "41") (term "0,0,1,1,0,0,0"))
                  (rule "polySimp_elimOne" (formula "41") (term "1,0,1,1,0,0,0"))
                  (rule "nnf_imp2or" (formula "41") (term "0"))
                  (rule "nnf_notAnd" (formula "41") (term "0,0"))
                  (rule "nnf_notAnd" (formula "41") (term "1,0,0"))
                  (rule "inEqSimp_notLeq" (formula "41") (term "0,1,0,0"))
                  (rule "mul_literals" (formula "41") (term "1,0,0,0,1,0,0"))
                  (rule "add_literals" (formula "41") (term "0,0,0,1,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "41") (term "0,1,0,0"))
                  (rule "mul_literals" (formula "41") (term "1,0,1,0,0"))
                  (rule "inEqSimp_notGeq" (formula "41") (term "1,1,0,0"))
                  (rule "mul_literals" (formula "41") (term "1,0,0,1,1,0,0"))
                  (rule "add_literals" (formula "41") (term "0,0,1,1,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "41") (term "1,1,0,0"))
                  (rule "mul_literals" (formula "41") (term "1,1,1,0,0"))
                  (rule "nnf_notAnd" (formula "41") (term "0,0,0"))
                  (rule "inEqSimp_notLeq" (formula "41") (term "1,0,0,0"))
                  (rule "polySimp_rightDist" (formula "41") (term "1,0,0,1,0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "41") (term "1,1,0,0,1,0,0,0"))
                  (rule "polySimp_rightDist" (formula "41") (term "0,1,0,0,1,0,0,0"))
                  (rule "mul_literals" (formula "41") (term "0,0,1,0,0,1,0,0,0"))
                  (rule "polySimp_addAssoc" (formula "41") (term "0,0,1,0,0,0"))
                  (rule "polySimp_addAssoc" (formula "41") (term "0,0,0,1,0,0,0"))
                  (rule "add_literals" (formula "41") (term "0,0,0,0,1,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "41") (term "1,0,0,0"))
                  (rule "polySimp_mulComm0" (formula "41") (term "1,1,0,0,0"))
                  (rule "polySimp_rightDist" (formula "41") (term "1,1,0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "41") (term "1,1,1,0,0,0"))
                  (rule "polySimp_rightDist" (formula "41") (term "0,1,1,0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "41") (term "1,0,1,1,0,0,0"))
                  (rule "mul_literals" (formula "41") (term "0,0,1,1,0,0,0"))
                  (rule "polySimp_elimOne" (formula "41") (term "1,0,1,1,0,0,0"))
                  (rule "inEqSimp_notGeq" (formula "41") (term "0,0,0,0"))
                  (rule "times_zero_1" (formula "41") (term "1,0,0,0,0,0,0"))
                  (rule "add_zero_right" (formula "41") (term "0,0,0,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "41") (term "0,0,0,0"))
                  (rule "mul_literals" (formula "41") (term "1,0,0,0,0"))
                  (rule "shift_paren_or" (formula "46") (term "0,0,0"))
                  (rule "div_axiom" (formula "44") (term "0,1,1,1,0,0,1,0") (inst "quotient=quotient_2"))
                  (rule "mul_literals" (formula "44") (term "1,1,1,1,1"))
                  (rule "qeq_literals" (formula "44") (term "0,1,1"))
                   (builtin "One Step Simplification" (formula "44"))
                  (rule "equal_literals" (formula "44") (term "0"))
                   (builtin "One Step Simplification" (formula "44"))
                  (rule "andLeft" (formula "44"))
                  (rule "andLeft" (formula "44"))
                  (rule "polySimp_addAssoc" (formula "46") (term "0,1"))
                  (rule "add_literals" (formula "46") (term "0,0,1"))
                  (rule "polySimp_addComm1" (formula "46") (term "1"))
                  (rule "add_literals" (formula "46") (term "0,1"))
                  (rule "inEqSimp_homoInEq0" (formula "45"))
                  (rule "polySimp_mulLiterals" (formula "45") (term "1,0"))
                  (rule "polySimp_addComm1" (formula "45") (term "0"))
                  (rule "inEqSimp_homoInEq1" (formula "46"))
                  (rule "polySimp_mulLiterals" (formula "46") (term "1,0"))
                  (rule "polySimp_addComm1" (formula "46") (term "0"))
                  (rule "applyEq" (formula "41") (term "0,1,1,1,0,0,0") (ifseqformula "44"))
                  (rule "polySimp_addComm1" (formula "41") (term "1,1,0,0,0"))
                  (rule "applyEq" (formula "36") (term "0,1,1") (ifseqformula "44"))
                  (rule "polySimp_addComm0" (formula "36") (term "1"))
                  (rule "applyEq" (formula "42") (term "0,1,1,1,0,0,0,1,0") (ifseqformula "44"))
                  (rule "polySimp_addComm1" (formula "42") (term "1,1,0,0,0,1,0"))
                  (rule "applyEq" (formula "43") (term "0,1,1,1,0,0") (ifseqformula "44"))
                  (rule "polySimp_addComm1" (formula "43") (term "1,1,0,0"))
                  (rule "applyEq" (formula "47") (term "0,1,1,1,0,0,1,0") (ifseqformula "44"))
                  (rule "polySimp_addComm1" (formula "47") (term "1,1,0,0,1,0"))
                  (rule "applyEq" (formula "15") (term "0,0") (ifseqformula "44"))
                  (rule "inEqSimp_homoInEq0" (formula "15"))
                  (rule "polySimp_mulLiterals" (formula "15") (term "1,0"))
                  (rule "polySimp_addComm1" (formula "15") (term "0"))
                  (rule "polySimp_addComm1" (formula "15") (term "0,0"))
                  (rule "applyEq" (formula "42") (term "0,1,1,1,0,0,0") (ifseqformula "44"))
                  (rule "polySimp_addComm1" (formula "42") (term "1,1,0,0,0"))
                  (rule "applyEq" (formula "48") (term "0,1,1,1,0,0") (ifseqformula "44"))
                  (rule "polySimp_addComm0" (formula "48") (term "1,1,0,0"))
                  (rule "applyEq" (formula "39") (term "0,1,1") (ifseqformula "44"))
                  (rule "polySimp_addComm0" (formula "39") (term "1"))
                  (rule "applyEq" (formula "34") (term "0,0") (ifseqformula "44"))
                  (rule "inEqSimp_homoInEq1" (formula "34"))
                  (rule "polySimp_mulLiterals" (formula "34") (term "1,0"))
                  (rule "polySimp_addComm1" (formula "34") (term "0"))
                  (rule "applyEq" (formula "46") (term "0,1,1,1,0,0") (ifseqformula "43"))
                  (rule "polySimp_addComm1" (formula "46") (term "1,1,0,0"))
                  (rule "applyEq" (formula "32") (term "0,0") (ifseqformula "43"))
                  (rule "inEqSimp_homoInEq0" (formula "32"))
                  (rule "polySimp_mulLiterals" (formula "32") (term "1,0"))
                  (rule "polySimp_addComm1" (formula "32") (term "0"))
                  (rule "applyEq" (formula "39") (term "0,1,3,0") (ifseqformula "43"))
                  (rule "polySimp_addComm1" (formula "39") (term "3,0"))
                  (rule "applyEq" (formula "48") (term "0,1,1,1,0,0") (ifseqformula "43"))
                  (rule "polySimp_addComm0" (formula "48") (term "1,1,0,0"))
                  (rule "applyEq" (formula "31") (term "0,1,1") (ifseqformula "43"))
                  (rule "polySimp_addComm0" (formula "31") (term "1"))
                  (rule "applyEq" (formula "47") (term "0,1,0,0,1,1,1,0") (ifseqformula "43"))
                  (rule "polySimp_addComm1" (formula "47") (term "0,0,1,1,1,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "44"))
                  (rule "polySimp_mulComm0" (formula "44") (term "1"))
                  (rule "polySimp_rightDist" (formula "44") (term "1"))
                  (rule "polySimp_mulLiterals" (formula "44") (term "1,1"))
                  (rule "mul_literals" (formula "44") (term "0,1"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "45"))
                  (rule "polySimp_mulComm0" (formula "45") (term "1"))
                  (rule "polySimp_rightDist" (formula "45") (term "1"))
                  (rule "polySimp_mulLiterals" (formula "45") (term "1,1"))
                  (rule "mul_literals" (formula "45") (term "0,1"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "15"))
                  (rule "polySimp_mulComm0" (formula "15") (term "1"))
                  (rule "polySimp_rightDist" (formula "15") (term "1"))
                  (rule "polySimp_mulLiterals" (formula "15") (term "1,1"))
                  (rule "polySimp_elimOne" (formula "15") (term "1,1"))
                  (rule "polySimp_rightDist" (formula "15") (term "0,1"))
                  (rule "polySimp_mulLiterals" (formula "15") (term "1,0,1"))
                  (rule "mul_literals" (formula "15") (term "0,0,1"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "32"))
                  (rule "polySimp_mulComm0" (formula "32") (term "1"))
                  (rule "polySimp_rightDist" (formula "32") (term "1"))
                  (rule "polySimp_mulLiterals" (formula "32") (term "1,1"))
                  (rule "mul_literals" (formula "32") (term "0,1"))
                  (rule "inEqSimp_subsumption1" (formula "44") (ifseqformula "32"))
                  (rule "inEqSimp_homoInEq0" (formula "44") (term "0"))
                  (rule "polySimp_mulComm0" (formula "44") (term "1,0,0"))
                  (rule "polySimp_rightDist" (formula "44") (term "1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "44") (term "1,1,0,0"))
                  (rule "mul_literals" (formula "44") (term "0,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "44") (term "0,0"))
                  (rule "polySimp_addComm1" (formula "44") (term "0,0,0"))
                  (rule "add_literals" (formula "44") (term "0,0,0,0"))
                  (rule "polySimp_pullOutFactor0b" (formula "44") (term "0,0"))
                  (rule "add_literals" (formula "44") (term "1,1,0,0"))
                  (rule "times_zero_1" (formula "44") (term "1,0,0"))
                  (rule "add_zero_right" (formula "44") (term "0,0"))
                  (rule "qeq_literals" (formula "44") (term "0"))
                   (builtin "One Step Simplification" (formula "44"))
                  (rule "true_left" (formula "44"))
                  (rule "inEqSimp_exactShadow3" (formula "38") (ifseqformula "36"))
                  (rule "polySimp_rightDist" (formula "38") (term "0,0"))
                  (rule "polySimp_mulComm0" (formula "38") (term "0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "38") (term "0,0,0"))
                  (rule "polySimp_addComm1" (formula "38") (term "0"))
                  (rule "polySimp_addComm0" (formula "38") (term "0,0"))
                  (rule "inEqSimp_sepNegMonomial1" (formula "38"))
                  (rule "polySimp_mulLiterals" (formula "38") (term "0"))
                  (rule "polySimp_elimOne" (formula "38") (term "0"))
                  (rule "inEqSimp_exactShadow3" (formula "35") (ifseqformula "33"))
                  (rule "polySimp_rightDist" (formula "35") (term "0,0"))
                  (rule "polySimp_mulComm0" (formula "35") (term "0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "35") (term "0,0,0"))
                  (rule "polySimp_addComm1" (formula "35") (term "0"))
                  (rule "polySimp_addComm0" (formula "35") (term "0,0"))
                  (rule "inEqSimp_sepNegMonomial1" (formula "35"))
                  (rule "polySimp_mulLiterals" (formula "35") (term "0"))
                  (rule "polySimp_elimOne" (formula "35") (term "0"))
                  (rule "inEqSimp_exactShadow3" (formula "15") (ifseqformula "44"))
                  (rule "polySimp_rightDist" (formula "15") (term "0,0"))
                  (rule "polySimp_addComm1" (formula "15") (term "0"))
                  (rule "polySimp_rightDist" (formula "15") (term "0,0,0"))
                  (rule "mul_literals" (formula "15") (term "0,0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "15") (term "1,0,0,0"))
                  (rule "polySimp_addAssoc" (formula "15") (term "0,0"))
                  (rule "polySimp_addComm1" (formula "15") (term "0,0,0"))
                  (rule "add_literals" (formula "15") (term "0,0,0,0"))
                  (rule "polySimp_pullOutFactor0b" (formula "15") (term "0,0"))
                  (rule "add_literals" (formula "15") (term "1,1,0,0"))
                  (rule "times_zero_1" (formula "15") (term "1,0,0"))
                  (rule "add_zero_right" (formula "15") (term "0,0"))
                  (rule "inEqSimp_sepNegMonomial1" (formula "15"))
                  (rule "polySimp_mulLiterals" (formula "15") (term "0"))
                  (rule "polySimp_elimOne" (formula "15") (term "0"))
                  (rule "commute_or" (formula "45") (term "0,0,0,0,1,0"))
                  (rule "commute_or" (formula "41") (term "1,0,0"))
                  (rule "commute_or" (formula "41") (term "1,0,0,1,0"))
                  (rule "shift_paren_or" (formula "42") (term "0,0,0"))
                  (rule "commute_or" (formula "46") (term "0,0,0,0"))
                  (rule "inEqSimp_or_subsumption0" (formula "46") (term "0,0,0,0"))
                  (rule "qeq_literals" (formula "46") (term "0,0,0,0,0,0"))
                   (builtin "One Step Simplification" (formula "46"))
                  (rule "commute_or" (formula "45") (term "0,0,0,0"))
                  (rule "inEqSimp_or_subsumption0" (formula "45") (term "0,0,0,0"))
                  (rule "qeq_literals" (formula "45") (term "0,0,0,0,0,0"))
                   (builtin "One Step Simplification" (formula "45"))
                  (rule "ifthenelse_split" (formula "20") (term "0"))
                  (branch "b >= -1 TRUE"
                     (rule "polySimp_homoEq" (formula "21"))
                     (rule "polySimp_addComm1" (formula "21") (term "0"))
                     (rule "polySimp_sepPosMonomial" (formula "21"))
                     (rule "polySimp_mulComm0" (formula "21") (term "1"))
                     (rule "polySimp_rightDist" (formula "21") (term "1"))
                     (rule "mul_literals" (formula "21") (term "0,1"))
                     (rule "polySimp_mulLiterals" (formula "21") (term "1,1"))
                     (rule "polySimp_elimOne" (formula "21") (term "1,1"))
                     (rule "applyEq" (formula "23") (term "0,2,0") (ifseqformula "21"))
                     (rule "applyEq" (formula "10") (term "0") (ifseqformula "21"))
                     (rule "inEqSimp_homoInEq1" (formula "10"))
                     (rule "polySimp_mulComm0" (formula "10") (term "1,0"))
                     (rule "polySimp_rightDist" (formula "10") (term "1,0"))
                     (rule "mul_literals" (formula "10") (term "0,1,0"))
                     (rule "polySimp_addAssoc" (formula "10") (term "0"))
                     (rule "add_literals" (formula "10") (term "0,0"))
                     (rule "applyEq" (formula "3") (term "0,1,0,2,0") (ifseqformula "21"))
                     (rule "polySimp_mulComm0" (formula "3") (term "1,0,2,0"))
                     (rule "polySimp_rightDist" (formula "3") (term "1,0,2,0"))
                     (rule "mul_literals" (formula "3") (term "0,1,0,2,0"))
                     (rule "polySimp_addAssoc" (formula "3") (term "0,2,0"))
                     (rule "add_literals" (formula "3") (term "0,0,2,0"))
                     (rule "applyEq" (formula "52") (term "0") (ifseqformula "21"))
                     (rule "polySimp_homoEq" (formula "52"))
                     (rule "polySimp_mulComm0" (formula "52") (term "1,0"))
                     (rule "polySimp_rightDist" (formula "52") (term "1,0"))
                     (rule "mul_literals" (formula "52") (term "0,1,0"))
                     (rule "polySimp_addAssoc" (formula "52") (term "0"))
                     (rule "add_literals" (formula "52") (term "0,0"))
                     (rule "add_zero_left" (formula "52") (term "0"))
                     (rule "applyEq" (formula "11") (term "0") (ifseqformula "21"))
                     (rule "inEqSimp_homoInEq0" (formula "11"))
                     (rule "polySimp_mulComm0" (formula "11") (term "1,0"))
                     (rule "polySimp_rightDist" (formula "11") (term "1,0"))
                     (rule "mul_literals" (formula "11") (term "0,1,0"))
                     (rule "polySimp_addAssoc" (formula "11") (term "0"))
                     (rule "add_literals" (formula "11") (term "0,0"))
                     (rule "applyEq" (formula "18") (term "0") (ifseqformula "21"))
                     (rule "inEqSimp_homoInEq1" (formula "18"))
                     (rule "polySimp_mulComm0" (formula "18") (term "1,0"))
                     (rule "polySimp_rightDist" (formula "18") (term "1,0"))
                     (rule "mul_literals" (formula "18") (term "0,1,0"))
                     (rule "polySimp_addAssoc" (formula "18") (term "0"))
                     (rule "polySimp_addComm1" (formula "18") (term "0,0"))
                     (rule "add_literals" (formula "18") (term "0,0,0"))
                     (rule "add_zero_left" (formula "18") (term "0,0"))
                     (rule "polySimp_pullOutFactor0" (formula "18") (term "0"))
                     (rule "add_literals" (formula "18") (term "1,0"))
                     (rule "polySimp_elimOne" (formula "18") (term "0"))
                     (rule "applyEq" (formula "22") (term "1,0,0") (ifseqformula "21"))
                     (rule "polySimp_addAssoc" (formula "22") (term "0,0"))
                     (rule "add_literals" (formula "22") (term "0,0,0"))
                     (rule "add_zero_left" (formula "22") (term "0,0"))
                     (rule "applyEq" (formula "16") (term "1,0,0") (ifseqformula "21"))
                     (rule "polySimp_addAssoc" (formula "16") (term "0,0"))
                     (rule "add_literals" (formula "16") (term "0,0,0"))
                     (rule "add_zero_left" (formula "16") (term "0,0"))
                     (rule "applyEq" (formula "19") (term "0") (ifseqformula "21"))
                     (rule "inEqSimp_homoInEq0" (formula "19"))
                     (rule "polySimp_mulComm0" (formula "19") (term "1,0"))
                     (rule "polySimp_rightDist" (formula "19") (term "1,0"))
                     (rule "mul_literals" (formula "19") (term "0,1,0"))
                     (rule "polySimp_addAssoc" (formula "19") (term "0"))
                     (rule "polySimp_addComm0" (formula "19") (term "0,0"))
                     (rule "polySimp_pullOutFactor0b" (formula "19") (term "0"))
                     (rule "add_literals" (formula "19") (term "1,1,0"))
                     (rule "polySimp_elimOne" (formula "19") (term "1,0"))
                     (rule "applyEq" (formula "20") (term "0") (ifseqformula "21"))
                     (rule "inEqSimp_homoInEq1" (formula "20"))
                     (rule "polySimp_mulComm0" (formula "20") (term "1,0"))
                     (rule "polySimp_rightDist" (formula "20") (term "1,0"))
                     (rule "mul_literals" (formula "20") (term "0,1,0"))
                     (rule "polySimp_addAssoc" (formula "20") (term "0"))
                     (rule "add_literals" (formula "20") (term "0,0"))
                     (rule "add_zero_left" (formula "20") (term "0"))
                     (rule "applyEq" (formula "15") (term "1,1") (ifseqformula "21"))
                     (rule "polySimp_addAssoc" (formula "15") (term "1"))
                     (rule "polySimp_addComm1" (formula "15") (term "0,1"))
                     (rule "add_literals" (formula "15") (term "0,0,1"))
                     (rule "add_zero_left" (formula "15") (term "0,1"))
                     (rule "applyEq" (formula "22") (term "1,1") (ifseqformula "21"))
                     (rule "polySimp_addAssoc" (formula "22") (term "1"))
                     (rule "add_literals" (formula "22") (term "0,1"))
                     (rule "add_zero_left" (formula "22") (term "1"))
                     (rule "applyEq" (formula "5") (term "1,1") (ifseqformula "21"))
                     (rule "polySimp_addAssoc" (formula "5") (term "1"))
                     (rule "add_literals" (formula "5") (term "0,1"))
                     (rule "add_zero_left" (formula "5") (term "1"))
                     (rule "applyEq" (formula "27") (term "1,1") (ifseqformula "21"))
                     (rule "polySimp_addAssoc" (formula "27") (term "1"))
                     (rule "add_literals" (formula "27") (term "0,1"))
                     (rule "add_zero_left" (formula "27") (term "1"))
                     (rule "polySimp_invertEq" (formula "52"))
                     (rule "polySimp_mulLiterals" (formula "52") (term "0"))
                     (rule "times_zero_2" (formula "52") (term "1"))
                     (rule "polySimp_elimOne" (formula "52") (term "0"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "10"))
                     (rule "polySimp_mulLiterals" (formula "10") (term "0"))
                     (rule "polySimp_elimOne" (formula "10") (term "0"))
                     (rule "inEqSimp_sepNegMonomial1" (formula "11"))
                     (rule "polySimp_mulLiterals" (formula "11") (term "0"))
                     (rule "polySimp_elimOne" (formula "11") (term "0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "19"))
                     (rule "mul_literals" (formula "19") (term "1"))
                     (rule "inEqSimp_invertInEq0" (formula "20"))
                     (rule "times_zero_2" (formula "20") (term "1"))
                     (rule "polySimp_mulLiterals" (formula "20") (term "0"))
                     (rule "polySimp_elimOne" (formula "20") (term "0"))
                     (rule "inEqSimp_strengthen1" (formula "20") (ifseqformula "52"))
                     (rule "add_zero_right" (formula "20") (term "1"))
                     (rule "inEqSimp_contradEq7" (formula "52") (ifseqformula "20"))
                     (rule "times_zero_1" (formula "52") (term "1,0,0"))
                     (rule "add_zero_right" (formula "52") (term "0,0"))
                     (rule "leq_literals" (formula "52") (term "0"))
                      (builtin "One Step Simplification" (formula "52"))
                     (rule "false_right" (formula "52"))
                     (rule "inEqSimp_subsumption1" (formula "9") (ifseqformula "19"))
                     (rule "leq_literals" (formula "9") (term "0"))
                      (builtin "One Step Simplification" (formula "9"))
                     (rule "true_left" (formula "9"))
                     (rule "inEqSimp_subsumption0" (formula "16") (ifseqformula "17"))
                     (rule "leq_literals" (formula "16") (term "0"))
                      (builtin "One Step Simplification" (formula "16"))
                     (rule "true_left" (formula "16"))
                     (rule "inEqSimp_contradInEq1" (formula "16") (ifseqformula "18"))
                     (rule "qeq_literals" (formula "16") (term "0"))
                      (builtin "One Step Simplification" (formula "16"))
                     (rule "closeFalse" (formula "16"))
                  )
                  (branch "b >= -1 FALSE"
                     (rule "polySimp_homoEq" (formula "20"))
                     (rule "polySimp_mulComm0" (formula "20") (term "1,0"))
                     (rule "polySimp_rightDist" (formula "20") (term "1,0"))
                     (rule "polySimp_rightDist" (formula "20") (term "0,1,0"))
                     (rule "polySimp_mulLiterals" (formula "20") (term "1,0,1,0"))
                     (rule "mul_literals" (formula "20") (term "0,0,1,0"))
                     (rule "polySimp_elimOne" (formula "20") (term "1,0,1,0"))
                     (rule "polySimp_addAssoc" (formula "20") (term "0"))
                     (rule "polySimp_addComm1" (formula "20") (term "0,0"))
                     (rule "polySimp_pullOutFactor1b" (formula "20") (term "0"))
                     (rule "add_literals" (formula "20") (term "1,1,0"))
                     (rule "times_zero_1" (formula "20") (term "1,0"))
                     (rule "add_zero_right" (formula "20") (term "0"))
                     (rule "polySimp_addAssoc" (formula "20") (term "0"))
                     (rule "add_literals" (formula "20") (term "0,0"))
                     (rule "add_zero_left" (formula "20") (term "0"))
                     (rule "inEqSimp_geqRight" (formula "48"))
                     (rule "mul_literals" (formula "1") (term "1,0,0"))
                     (rule "add_literals" (formula "1") (term "0,0"))
                     (rule "applyEqRigid" (formula "20") (term "0,1") (ifseqformula "21"))
                     (rule "times_zero_2" (formula "20") (term "1"))
                     (rule "applyEq" (formula "10") (term "0") (ifseqformula "21"))
                     (rule "qeq_literals" (formula "10"))
                     (rule "true_left" (formula "10"))
                     (rule "applyEq" (formula "17") (term "0") (ifseqformula "20"))
                     (rule "leq_literals" (formula "17"))
                     (rule "true_left" (formula "17"))
                     (rule "applyEqRigid" (formula "17") (term "0,1,1") (ifseqformula "19"))
                     (rule "times_zero_2" (formula "17") (term "1,1"))
                     (rule "add_zero_right" (formula "17") (term "1"))
                     (rule "applyEq" (formula "16") (term "1") (ifseqformula "19"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                     (rule "mul_literals" (formula "1") (term "1"))
                     (rule "inEqSimp_contradEq3" (formula "50") (ifseqformula "1"))
                     (rule "mul_literals" (formula "50") (term "1,0,0"))
                     (rule "add_literals" (formula "50") (term "0,0"))
                     (rule "qeq_literals" (formula "50") (term "0"))
                      (builtin "One Step Simplification" (formula "50"))
                     (rule "false_right" (formula "50"))
                     (rule "inEqSimp_subsumption1" (formula "10") (ifseqformula "17"))
                     (rule "leq_literals" (formula "10") (term "0"))
                      (builtin "One Step Simplification" (formula "10"))
                     (rule "true_left" (formula "10"))
                     (rule "inEqSimp_contradInEq0" (formula "16") (ifseqformula "1"))
                     (rule "qeq_literals" (formula "16") (term "0"))
                      (builtin "One Step Simplification" (formula "16"))
                     (rule "closeFalse" (formula "16"))
                  )
               )
               (branch "CUT: self.sorted_splitters[b] >= value FALSE"
                   (builtin "One Step Simplification" (formula "14"))
                  (rule "inEqSimp_geqRight" (formula "28"))
                  (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                  (rule "applyEq" (formula "28") (term "1,1,0,0,0") (ifseqformula "15"))
                  (rule "applyEq" (formula "27") (term "1,1,0,0,0") (ifseqformula "15"))
                  (rule "applyEq" (formula "13") (term "0") (ifseqformula "15"))
                  (rule "inEqSimp_homoInEq1" (formula "13"))
                  (rule "polySimp_pullOutFactor1" (formula "13") (term "0"))
                  (rule "add_literals" (formula "13") (term "1,0"))
                  (rule "times_zero_1" (formula "13") (term "0"))
                  (rule "leq_literals" (formula "13"))
                  (rule "true_left" (formula "13"))
                  (rule "applyEq" (formula "25") (term "1,3,0") (ifseqformula "14"))
                  (rule "polySimp_addAssoc" (formula "25") (term "3,0"))
                  (rule "add_literals" (formula "25") (term "0,3,0"))
                  (rule "add_zero_left" (formula "25") (term "3,0"))
                  (rule "applyEq" (formula "26") (term "1,1,1,1,0") (ifseqformula "14"))
                  (rule "polySimp_addAssoc" (formula "26") (term "1,1,1,0"))
                  (rule "add_literals" (formula "26") (term "0,1,1,1,0"))
                  (rule "add_zero_left" (formula "26") (term "1,1,1,0"))
                  (rule "applyEq" (formula "24") (term "1") (ifseqformula "14"))
                  (rule "applyEq" (formula "22") (term "0") (ifseqformula "14"))
                  (rule "inEqSimp_homoInEq1" (formula "22"))
                  (rule "polySimp_mulComm0" (formula "22") (term "1,0"))
                  (rule "polySimp_rightDist" (formula "22") (term "1,0"))
                  (rule "mul_literals" (formula "22") (term "0,1,0"))
                  (rule "polySimp_addAssoc" (formula "22") (term "0"))
                  (rule "add_literals" (formula "22") (term "0,0"))
                  (rule "applyEq" (formula "23") (term "1") (ifseqformula "14"))
                  (rule "applyEq" (formula "21") (term "1,1") (ifseqformula "14"))
                  (rule "polySimp_addAssoc" (formula "21") (term "1"))
                  (rule "add_literals" (formula "21") (term "0,1"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                  (rule "polySimp_mulComm0" (formula "1") (term "1"))
                  (rule "polySimp_rightDist" (formula "1") (term "1"))
                  (rule "mul_literals" (formula "1") (term "0,1"))
                  (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                  (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "22"))
                  (rule "polySimp_mulLiterals" (formula "22") (term "0"))
                  (rule "polySimp_elimOne" (formula "22") (term "0"))
                  (rule "inEqSimp_contradEq7" (formula "31") (ifseqformula "22"))
                  (rule "mul_literals" (formula "31") (term "1,0,0"))
                  (rule "add_literals" (formula "31") (term "0,0"))
                  (rule "leq_literals" (formula "31") (term "0"))
                   (builtin "One Step Simplification" (formula "31"))
                  (rule "false_right" (formula "31"))
                  (rule "inEqSimp_subsumption1" (formula "8") (ifseqformula "22"))
                  (rule "leq_literals" (formula "8") (term "0"))
                   (builtin "One Step Simplification" (formula "8"))
                  (rule "true_left" (formula "8"))
                  (rule "jdiv_axiom" (formula "12") (term "0"))
                  (rule "eqSymm" (formula "12"))
                  (rule "polySimp_mulComm0" (formula "12") (term "0,0,2,0"))
                  (rule "polySimp_rightDist" (formula "12") (term "0,0,2,0"))
                  (rule "mul_literals" (formula "12") (term "0,0,0,2,0"))
                  (rule "applyEq" (formula "12") (term "1") (ifseqformula "13"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "12") (term "0,0"))
                  (rule "mul_literals" (formula "12") (term "1,0,0"))
                  (rule "inEqSimp_subsumption1" (formula "12") (term "0,0") (ifseqformula "22"))
                  (rule "leq_literals" (formula "12") (term "0,0,0"))
                   (builtin "One Step Simplification" (formula "12"))
                  (rule "Definition_axiom_for_pi_in_de_wiesler_Tree" (formula "27") (term "1,0,2,0,1,0"))
                  (rule "translateJavaSubInt" (formula "27") (term "0,1,1,1,0,2,0,1,0"))
                  (rule "polySimp_elimSub" (formula "27") (term "1,0,0,1,0,2,0,1,0"))
                  (rule "polySimp_elimSub" (formula "27") (term "1,1,1,0,2,0,1,0"))
                  (rule "polySimp_elimSub" (formula "27") (term "0,1,1,1,0,2,0,1,0"))
                  (rule "mul_literals" (formula "27") (term "1,0,1,1,1,0,2,0,1,0"))
                  (rule "polySimp_mulComm0" (formula "27") (term "1,0,2,0,1,0"))
                  (rule "polySimp_addComm0" (formula "27") (term "0,1,0,1,0,2,0,1,0"))
                  (rule "polySimp_rightDist" (formula "27") (term "0,1,1,0,2,0,1,0"))
                  (rule "polySimp_mulLiterals" (formula "27") (term "1,0,1,1,0,2,0,1,0"))
                  (rule "polySimp_mulComm0" (formula "27") (term "0,0,1,1,0,2,0,1,0"))
                  (rule "polySimp_addComm1" (formula "27") (term "1,1,0,2,0,1,0"))
                  (rule "polySimp_addComm0" (formula "27") (term "0,1,1,0,2,0,1,0"))
                  (rule "polySimp_rightDist" (formula "27") (term "1,0,2,0,1,0"))
                  (rule "polySimp_mulComm1" (formula "27") (term "1,1,0,2,0,1,0"))
                  (rule "polySimp_mulComm0" (formula "27") (term "0,1,1,0,2,0,1,0"))
                  (rule "polySimp_rightDist" (formula "27") (term "0,1,0,2,0,1,0"))
                  (rule "polySimp_elimOne" (formula "27") (term "0,0,1,0,2,0,1,0"))
                  (rule "polySimp_mulComm1" (formula "27") (term "1,0,1,0,2,0,1,0"))
                  (rule "polySimp_mulComm0" (formula "27") (term "0,1,0,1,0,2,0,1,0"))
                  (rule "polySimp_addAssoc" (formula "27") (term "0,2,0,1,0"))
                  (rule "polySimp_addAssoc" (formula "27") (term "0,0,2,0,1,0"))
                  (rule "Definition_axiom_for_pi_in_de_wiesler_Tree" (formula "26") (term "0,1,1,0"))
                  (rule "translateJavaSubInt" (formula "26") (term "0,1,1,0,1,1,0"))
                  (rule "polySimp_elimSub" (formula "26") (term "1,0,0,0,1,1,0"))
                  (rule "polySimp_elimSub" (formula "26") (term "1,1,0,1,1,0"))
                  (rule "polySimp_elimSub" (formula "26") (term "0,1,1,0,1,1,0"))
                  (rule "mul_literals" (formula "26") (term "1,0,1,1,0,1,1,0"))
                  (rule "polySimp_mulComm0" (formula "26") (term "0,1,1,0"))
                  (rule "polySimp_addComm0" (formula "26") (term "0,1,0,0,1,1,0"))
                  (rule "polySimp_rightDist" (formula "26") (term "0,1,0,1,1,0"))
                  (rule "polySimp_mulLiterals" (formula "26") (term "1,0,1,0,1,1,0"))
                  (rule "polySimp_mulComm0" (formula "26") (term "0,0,1,0,1,1,0"))
                  (rule "polySimp_addComm1" (formula "26") (term "1,0,1,1,0"))
                  (rule "polySimp_addComm0" (formula "26") (term "0,1,0,1,1,0"))
                  (rule "polySimp_rightDist" (formula "26") (term "0,1,1,0"))
                  (rule "polySimp_mulComm1" (formula "26") (term "1,0,1,1,0"))
                  (rule "polySimp_mulComm0" (formula "26") (term "0,1,0,1,1,0"))
                  (rule "polySimp_rightDist" (formula "26") (term "0,0,1,1,0"))
                  (rule "polySimp_elimOne" (formula "26") (term "0,0,0,1,1,0"))
                  (rule "polySimp_mulComm1" (formula "26") (term "1,0,0,1,1,0"))
                  (rule "polySimp_mulComm0" (formula "26") (term "0,1,0,0,1,1,0"))
                  (rule "inEqSimp_homoInEq0" (formula "26") (term "1,1,0"))
                  (rule "polySimp_mulComm0" (formula "26") (term "1,0,1,1,0"))
                  (rule "polySimp_rightDist" (formula "26") (term "1,0,1,1,0"))
                  (rule "polySimp_mulLiterals" (formula "26") (term "1,1,0,1,1,0"))
                  (rule "polySimp_rightDist" (formula "26") (term "0,1,0,1,1,0"))
                  (rule "polySimp_mulLiterals" (formula "26") (term "1,0,1,0,1,1,0"))
                  (rule "polySimp_mulComm0" (formula "26") (term "0,0,1,0,1,1,0"))
                  (rule "polySimp_addAssoc" (formula "26") (term "0,1,1,0"))
                  (rule "polySimp_addAssoc" (formula "26") (term "0,0,1,1,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "26") (term "1,1,0"))
                  (rule "polySimp_mulComm0" (formula "26") (term "1,1,1,0"))
                  (rule "polySimp_rightDist" (formula "26") (term "1,1,1,0"))
                  (rule "polySimp_mulLiterals" (formula "26") (term "1,1,1,1,0"))
                  (rule "polySimp_rightDist" (formula "26") (term "0,1,1,1,0"))
                  (rule "polySimp_mulLiterals" (formula "26") (term "1,0,1,1,1,0"))
                  (rule "polySimp_elimOne" (formula "26") (term "1,0,1,1,1,0"))
                  (rule "polySimp_mulComm0" (formula "26") (term "0,0,1,1,1,0"))
                  (rule "Definition_axiom_for_pi_in_de_wiesler_Tree" (formula "26") (term "0,0,1,0"))
                  (rule "translateJavaSubInt" (formula "26") (term "0,1,1,0,0,1,0"))
                  (rule "polySimp_elimSub" (formula "26") (term "1,0,0,0,0,1,0"))
                  (rule "polySimp_elimSub" (formula "26") (term "1,1,0,0,1,0"))
                  (rule "polySimp_elimSub" (formula "26") (term "0,1,1,0,0,1,0"))
                  (rule "mul_literals" (formula "26") (term "1,0,1,1,0,0,1,0"))
                  (rule "polySimp_mulComm0" (formula "26") (term "0,0,1,0"))
                  (rule "polySimp_addComm0" (formula "26") (term "0,1,0,0,0,1,0"))
                  (rule "polySimp_rightDist" (formula "26") (term "0,1,0,0,1,0"))
                  (rule "polySimp_mulLiterals" (formula "26") (term "1,0,1,0,0,1,0"))
                  (rule "polySimp_mulComm0" (formula "26") (term "0,0,1,0,0,1,0"))
                  (rule "polySimp_addComm1" (formula "26") (term "1,0,0,1,0"))
                  (rule "polySimp_addComm0" (formula "26") (term "0,1,0,0,1,0"))
                  (rule "polySimp_rightDist" (formula "26") (term "0,0,1,0"))
                  (rule "polySimp_mulComm1" (formula "26") (term "1,0,0,1,0"))
                  (rule "polySimp_mulComm0" (formula "26") (term "0,1,0,0,1,0"))
                  (rule "polySimp_rightDist" (formula "26") (term "0,0,0,1,0"))
                  (rule "polySimp_elimOne" (formula "26") (term "0,0,0,0,1,0"))
                  (rule "polySimp_mulComm1" (formula "26") (term "1,0,0,0,1,0"))
                  (rule "polySimp_mulComm0" (formula "26") (term "0,1,0,0,0,1,0"))
                  (rule "inEqSimp_homoInEq1" (formula "26") (term "0,1,0"))
                  (rule "polySimp_mulComm0" (formula "26") (term "1,0,0,1,0"))
                  (rule "polySimp_rightDist" (formula "26") (term "1,0,0,1,0"))
                  (rule "polySimp_mulLiterals" (formula "26") (term "1,1,0,0,1,0"))
                  (rule "polySimp_rightDist" (formula "26") (term "0,1,0,0,1,0"))
                  (rule "polySimp_mulLiterals" (formula "26") (term "1,0,1,0,0,1,0"))
                  (rule "polySimp_mulComm0" (formula "26") (term "0,0,1,0,0,1,0"))
                  (rule "polySimp_addAssoc" (formula "26") (term "0,0,1,0"))
                  (rule "polySimp_addAssoc" (formula "26") (term "0,0,0,1,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "0,1,0"))
                  (rule "polySimp_mulComm0" (formula "26") (term "1,0,1,0"))
                  (rule "polySimp_rightDist" (formula "26") (term "1,0,1,0"))
                  (rule "polySimp_mulLiterals" (formula "26") (term "1,1,0,1,0"))
                  (rule "polySimp_rightDist" (formula "26") (term "0,1,0,1,0"))
                  (rule "polySimp_mulLiterals" (formula "26") (term "1,0,1,0,1,0"))
                  (rule "mul_literals" (formula "26") (term "0,0,1,0,1,0"))
                  (rule "polySimp_elimOne" (formula "26") (term "1,0,1,0,1,0"))
                  (rule "Contract_axiom_for_isSortedSliceTransitive_in_Functions" (formula "25") (term "0"))
                  (rule "replace_known_left" (formula "25") (term "1,0") (ifseqformula "5"))
                   (builtin "One Step Simplification" (formula "25") (ifInst ""  (formula "30")) (ifInst ""  (formula "26")))
                  (rule "Definition_axiom_for_isSortedSliceTransitive_in_de_wiesler_Functions" (formula "26") (term "0") (inst "i=i") (inst "j=j"))
                   (builtin "One Step Simplification" (formula "26"))
                  (rule "expand_inInt" (formula "26") (term "1,0,0"))
                  (rule "expand_inInt" (formula "26") (term "1,0,0,1,0"))
                  (rule "replace_int_MAX" (formula "26") (term "1,0,1,0,0"))
                  (rule "replace_int_MIN" (formula "26") (term "0,1,1,0,0"))
                  (rule "replace_int_MAX" (formula "26") (term "1,0,1,0,0,1,0"))
                  (rule "replace_int_MIN" (formula "26") (term "0,1,1,0,0,1,0"))
                  (rule "inEqSimp_ltToLeq" (formula "26") (term "1,0,0,0,1,0"))
                  (rule "polySimp_mulComm0" (formula "26") (term "1,0,0,1,0,0,0,1,0"))
                  (rule "inEqSimp_ltToLeq" (formula "26") (term "1,0,0,0"))
                  (rule "polySimp_mulComm0" (formula "26") (term "1,0,0,1,0,0,0"))
                  (rule "inEqSimp_commuteLeq" (formula "26") (term "0,0,0,0"))
                  (rule "inEqSimp_commuteLeq" (formula "26") (term "0,0,0,0,1,0"))
                  (rule "inEqSimp_commuteLeq" (formula "26") (term "1,0,1,0"))
                  (rule "inEqSimp_commuteLeq" (formula "26") (term "1,1,0,0"))
                  (rule "inEqSimp_commuteLeq" (formula "26") (term "1,1,0,0,1,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "1,0,0,0,1,0"))
                  (rule "polySimp_mulComm0" (formula "26") (term "1,1,0,0,0,1,0"))
                  (rule "polySimp_rightDist" (formula "26") (term "1,1,0,0,0,1,0"))
                  (rule "polySimp_mulLiterals" (formula "26") (term "1,1,1,0,0,0,1,0"))
                  (rule "mul_literals" (formula "26") (term "0,1,1,0,0,0,1,0"))
                  (rule "polySimp_elimOne" (formula "26") (term "1,1,1,0,0,0,1,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "1,0,0,0"))
                  (rule "polySimp_mulComm0" (formula "26") (term "1,1,0,0,0"))
                  (rule "polySimp_rightDist" (formula "26") (term "1,1,0,0,0"))
                  (rule "mul_literals" (formula "26") (term "0,1,1,0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "26") (term "1,1,1,0,0,0"))
                  (rule "polySimp_elimOne" (formula "26") (term "1,1,1,0,0,0"))
                  (rule "nnf_imp2or" (formula "26") (term "0"))
                  (rule "nnf_notAnd" (formula "26") (term "0,0"))
                  (rule "nnf_imp2or" (formula "26") (term "0,1,0"))
                  (rule "nnf_notAnd" (formula "26") (term "0,0,0"))
                  (rule "inEqSimp_notLeq" (formula "26") (term "1,0,0,0"))
                  (rule "polySimp_rightDist" (formula "26") (term "1,0,0,1,0,0,0"))
                  (rule "mul_literals" (formula "26") (term "0,1,0,0,1,0,0,0"))
                  (rule "polySimp_addAssoc" (formula "26") (term "0,0,1,0,0,0"))
                  (rule "add_literals" (formula "26") (term "0,0,0,1,0,0,0"))
                  (rule "add_zero_left" (formula "26") (term "0,0,1,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "26") (term "1,0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "26") (term "1,1,0,0,0"))
                  (rule "polySimp_elimOne" (formula "26") (term "1,1,0,0,0"))
                  (rule "inEqSimp_notGeq" (formula "26") (term "0,0,0,0"))
                  (rule "times_zero_1" (formula "26") (term "1,0,0,0,0,0,0"))
                  (rule "add_zero_right" (formula "26") (term "0,0,0,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "0,0,0,0"))
                  (rule "mul_literals" (formula "26") (term "1,0,0,0,0"))
                  (rule "nnf_notAnd" (formula "26") (term "1,0,0"))
                  (rule "inEqSimp_notGeq" (formula "26") (term "1,1,0,0"))
                  (rule "mul_literals" (formula "26") (term "1,0,0,1,1,0,0"))
                  (rule "add_literals" (formula "26") (term "0,0,1,1,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "1,1,0,0"))
                  (rule "mul_literals" (formula "26") (term "1,1,1,0,0"))
                  (rule "inEqSimp_notLeq" (formula "26") (term "0,1,0,0"))
                  (rule "mul_literals" (formula "26") (term "1,0,0,0,1,0,0"))
                  (rule "add_literals" (formula "26") (term "0,0,0,1,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "26") (term "0,1,0,0"))
                  (rule "mul_literals" (formula "26") (term "1,0,1,0,0"))
                  (rule "nnf_notAnd" (formula "26") (term "0,0,1,0"))
                  (rule "nnf_notAnd" (formula "26") (term "0,0,0,1,0"))
                  (rule "inEqSimp_notLeq" (formula "26") (term "1,0,0,0,1,0"))
                  (rule "polySimp_rightDist" (formula "26") (term "1,0,0,1,0,0,0,1,0"))
                  (rule "mul_literals" (formula "26") (term "0,1,0,0,1,0,0,0,1,0"))
                  (rule "polySimp_addAssoc" (formula "26") (term "0,0,1,0,0,0,1,0"))
                  (rule "add_literals" (formula "26") (term "0,0,0,1,0,0,0,1,0"))
                  (rule "add_zero_left" (formula "26") (term "0,0,1,0,0,0,1,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "26") (term "1,0,0,0,1,0"))
                  (rule "polySimp_mulLiterals" (formula "26") (term "1,1,0,0,0,1,0"))
                  (rule "polySimp_elimOne" (formula "26") (term "1,1,0,0,0,1,0"))
                  (rule "inEqSimp_notGeq" (formula "26") (term "0,0,0,0,1,0"))
                  (rule "polySimp_mulComm0" (formula "26") (term "1,0,0,0,0,0,0,1,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "0,0,0,0,1,0"))
                  (rule "polySimp_mulComm0" (formula "26") (term "1,0,0,0,0,1,0"))
                  (rule "polySimp_rightDist" (formula "26") (term "1,0,0,0,0,1,0"))
                  (rule "polySimp_mulLiterals" (formula "26") (term "1,1,0,0,0,0,1,0"))
                  (rule "mul_literals" (formula "26") (term "0,1,0,0,0,0,1,0"))
                  (rule "polySimp_elimOne" (formula "26") (term "1,1,0,0,0,0,1,0"))
                  (rule "nnf_notAnd" (formula "26") (term "1,0,0,1,0"))
                  (rule "inEqSimp_notGeq" (formula "26") (term "1,1,0,0,1,0"))
                  (rule "mul_literals" (formula "26") (term "1,0,0,1,1,0,0,1,0"))
                  (rule "add_literals" (formula "26") (term "0,0,1,1,0,0,1,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "1,1,0,0,1,0"))
                  (rule "mul_literals" (formula "26") (term "1,1,1,0,0,1,0"))
                  (rule "inEqSimp_notLeq" (formula "26") (term "0,1,0,0,1,0"))
                  (rule "mul_literals" (formula "26") (term "1,0,0,0,1,0,0,1,0"))
                  (rule "add_literals" (formula "26") (term "0,0,0,1,0,0,1,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "26") (term "0,1,0,0,1,0"))
                  (rule "mul_literals" (formula "26") (term "1,0,1,0,0,1,0"))
                  (rule "commute_or" (formula "28") (term "1,0,0"))
                  (rule "commute_or_2" (formula "27") (term "0,0"))
                  (rule "arrayLengthIsAnInt" (formula "23") (term "0"))
                  (rule "expand_inInt" (formula "23"))
                  (rule "replace_int_MAX" (formula "23") (term "1,0"))
                  (rule "replace_int_MIN" (formula "23") (term "0,1"))
                  (rule "andLeft" (formula "23"))
                  (rule "inEqSimp_commuteLeq" (formula "24"))
                  (rule "inEqSimp_exactShadow3" (formula "25") (ifseqformula "23"))
                  (rule "polySimp_rightDist" (formula "25") (term "0,0"))
                  (rule "mul_literals" (formula "25") (term "0,0,0"))
                  (rule "polySimp_addComm1" (formula "25") (term "0"))
                  (rule "add_literals" (formula "25") (term "0,0"))
                  (rule "inEqSimp_sepNegMonomial1" (formula "25"))
                  (rule "polySimp_mulLiterals" (formula "25") (term "0"))
                  (rule "polySimp_elimOne" (formula "25") (term "0"))
                  (rule "arrayLengthNotNegative" (formula "25") (term "0"))
                  (rule "inEqSimp_subsumption1" (formula "24") (ifseqformula "25"))
                  (rule "leq_literals" (formula "24") (term "0"))
                   (builtin "One Step Simplification" (formula "24"))
                  (rule "true_left" (formula "24"))
                  (rule "arrayLengthNotNegative" (formula "26") (term "0"))
                  (rule "arrayLengthIsAnInt" (formula "27") (term "0"))
                  (rule "expand_inInt" (formula "27"))
                  (rule "replace_int_MIN" (formula "27") (term "0,1"))
                  (rule "replace_int_MAX" (formula "27") (term "1,0"))
                  (rule "andLeft" (formula "27"))
                  (rule "inEqSimp_commuteLeq" (formula "28"))
                  (rule "inEqSimp_subsumption1" (formula "28") (ifseqformula "26"))
                  (rule "leq_literals" (formula "28") (term "0"))
                   (builtin "One Step Simplification" (formula "28"))
                  (rule "true_left" (formula "28"))
                  (rule "inEqSimp_exactShadow3" (formula "28") (ifseqformula "27"))
                  (rule "polySimp_rightDist" (formula "28") (term "0,0"))
                  (rule "mul_literals" (formula "28") (term "0,0,0"))
                  (rule "polySimp_addComm1" (formula "28") (term "0"))
                  (rule "add_literals" (formula "28") (term "0,0"))
                  (rule "inEqSimp_sepNegMonomial1" (formula "28"))
                  (rule "polySimp_mulLiterals" (formula "28") (term "0"))
                  (rule "polySimp_elimOne" (formula "28") (term "0"))
                  (rule "Contract_axiom_for_isSortedSlice_in_Functions" (formula "29") (term "0"))
                  (rule "replace_known_left" (formula "29") (term "0,1") (ifseqformula "30"))
                   (builtin "One Step Simplification" (formula "29") (ifInst ""  (formula "35")) (ifInst ""  (formula "5")))
                  (rule "Definition_axiom_for_isSortedSlice_in_de_wiesler_Functions" (formula "30") (term "0") (inst "i=i"))
                   (builtin "One Step Simplification" (formula "30"))
                  (rule "expand_inInt" (formula "30") (term "1,0,0"))
                  (rule "replace_int_MAX" (formula "30") (term "1,0,1,0,0"))
                  (rule "replace_int_MIN" (formula "30") (term "0,1,1,0,0"))
                  (rule "translateJavaAddInt" (formula "30") (term "0,2,1,1,0"))
                  (rule "translateJavaSubInt" (formula "30") (term "1,1,0,0,0"))
                  (rule "polySimp_elimSub" (formula "30") (term "1,1,0,0,0"))
                  (rule "mul_literals" (formula "30") (term "1,1,1,0,0,0"))
                  (rule "polySimp_addComm0" (formula "30") (term "0,2,1,1,0"))
                  (rule "polySimp_addComm0" (formula "30") (term "1,1,0,0,0"))
                  (rule "inEqSimp_ltToLeq" (formula "30") (term "1,0,0,0"))
                  (rule "polySimp_rightDist" (formula "30") (term "1,0,0,1,0,0,0"))
                  (rule "mul_literals" (formula "30") (term "0,1,0,0,1,0,0,0"))
                  (rule "polySimp_addAssoc" (formula "30") (term "0,0,1,0,0,0"))
                  (rule "add_literals" (formula "30") (term "0,0,0,1,0,0,0"))
                  (rule "inEqSimp_commuteLeq" (formula "30") (term "0,0,0,0"))
                  (rule "inEqSimp_commuteLeq" (formula "30") (term "1,1,0,0"))
                  (rule "inEqSimp_commuteLeq" (formula "30") (term "1,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "30") (term "1,0,0,0"))
                  (rule "polySimp_mulComm0" (formula "30") (term "1,1,0,0,0"))
                  (rule "polySimp_rightDist" (formula "30") (term "1,1,0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "30") (term "1,1,1,0,0,0"))
                  (rule "mul_literals" (formula "30") (term "0,1,1,0,0,0"))
                  (rule "polySimp_elimOne" (formula "30") (term "1,1,1,0,0,0"))
                  (rule "nnf_imp2or" (formula "30") (term "0"))
                  (rule "nnf_notAnd" (formula "30") (term "0,0"))
                  (rule "nnf_notAnd" (formula "30") (term "0,0,0"))
                  (rule "inEqSimp_notGeq" (formula "30") (term "0,0,0,0"))
                  (rule "times_zero_1" (formula "30") (term "1,0,0,0,0,0,0"))
                  (rule "add_literals" (formula "30") (term "0,0,0,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "30") (term "0,0,0,0"))
                  (rule "mul_literals" (formula "30") (term "1,0,0,0,0"))
                  (rule "inEqSimp_notLeq" (formula "30") (term "1,0,0,0"))
                  (rule "polySimp_rightDist" (formula "30") (term "1,0,0,1,0,0,0"))
                  (rule "mul_literals" (formula "30") (term "0,1,0,0,1,0,0,0"))
                  (rule "polySimp_addAssoc" (formula "30") (term "0,0,1,0,0,0"))
                  (rule "add_literals" (formula "30") (term "0,0,0,1,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "30") (term "1,0,0,0"))
                  (rule "polySimp_mulComm0" (formula "30") (term "1,1,0,0,0"))
                  (rule "polySimp_rightDist" (formula "30") (term "1,1,0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "30") (term "1,1,1,0,0,0"))
                  (rule "mul_literals" (formula "30") (term "0,1,1,0,0,0"))
                  (rule "polySimp_elimOne" (formula "30") (term "1,1,1,0,0,0"))
                  (rule "nnf_notAnd" (formula "30") (term "1,0,0"))
                  (rule "inEqSimp_notLeq" (formula "30") (term "0,1,0,0"))
                  (rule "mul_literals" (formula "30") (term "1,0,0,0,1,0,0"))
                  (rule "add_literals" (formula "30") (term "0,0,0,1,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "30") (term "0,1,0,0"))
                  (rule "mul_literals" (formula "30") (term "1,0,1,0,0"))
                  (rule "inEqSimp_notGeq" (formula "30") (term "1,1,0,0"))
                  (rule "mul_literals" (formula "30") (term "1,0,0,1,1,0,0"))
                  (rule "add_literals" (formula "30") (term "0,0,1,1,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "30") (term "1,1,0,0"))
                  (rule "mul_literals" (formula "30") (term "1,1,1,0,0"))
                  (rule "div_axiom" (formula "21") (term "0,1,1,1,1,1,0,0") (inst "quotient=quotient_0"))
                  (rule "mul_literals" (formula "21") (term "1,1,1,1,1"))
                  (rule "qeq_literals" (formula "21") (term "0,1,1"))
                   (builtin "One Step Simplification" (formula "21"))
                  (rule "equal_literals" (formula "21") (term "0"))
                   (builtin "One Step Simplification" (formula "21"))
                  (rule "andLeft" (formula "21"))
                  (rule "andLeft" (formula "21"))
                  (rule "polySimp_addComm1" (formula "23") (term "1"))
                  (rule "add_literals" (formula "23") (term "0,1"))
                  (rule "inEqSimp_commuteLeq" (formula "22"))
                  (rule "inEqSimp_homoInEq1" (formula "23"))
                  (rule "polySimp_mulLiterals" (formula "23") (term "1,0"))
                  (rule "polySimp_addComm1" (formula "23") (term "0"))
                  (rule "applyEq" (formula "24") (term "0,0,0,1,0,0") (ifseqformula "21"))
                  (rule "inEqSimp_homoInEq1" (formula "24") (term "0,1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "24") (term "1,0,0,1,0,0"))
                  (rule "polySimp_addComm1" (formula "24") (term "0,0,1,0,0"))
                  (rule "applyEq" (formula "24") (term "0,1,1,2,1,0,0") (ifseqformula "21"))
                  (rule "polySimp_addComm0" (formula "24") (term "1,2,1,0,0"))
                  (rule "applyEq" (formula "24") (term "0,1,1,1,1,1,0,0") (ifseqformula "21"))
                  (rule "polySimp_addComm0" (formula "24") (term "1,1,1,1,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "23"))
                  (rule "polySimp_mulComm0" (formula "23") (term "1"))
                  (rule "polySimp_rightDist" (formula "23") (term "1"))
                  (rule "mul_literals" (formula "23") (term "0,1"))
                  (rule "polySimp_mulLiterals" (formula "23") (term "1,1"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "0,1,0,0"))
                  (rule "polySimp_mulComm0" (formula "24") (term "1,0,1,0,0"))
                  (rule "polySimp_rightDist" (formula "24") (term "1,0,1,0,0"))
                  (rule "mul_literals" (formula "24") (term "0,1,0,1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "24") (term "1,1,0,1,0,0"))
                  (rule "inEqSimp_contradInEq1" (formula "24") (term "0,1,0,0") (ifseqformula "22"))
                  (rule "inEqSimp_homoInEq1" (formula "24") (term "0,0,1,0,0"))
                  (rule "polySimp_mulComm0" (formula "24") (term "1,0,0,0,1,0,0"))
                  (rule "polySimp_rightDist" (formula "24") (term "1,0,0,0,1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "24") (term "1,1,0,0,0,1,0,0"))
                  (rule "mul_literals" (formula "24") (term "0,1,0,0,0,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "24") (term "0,0,0,1,0,0"))
                  (rule "polySimp_addComm0" (formula "24") (term "0,0,0,0,1,0,0"))
                  (rule "polySimp_pullOutFactor0b" (formula "24") (term "0,0,0,1,0,0"))
                  (rule "add_literals" (formula "24") (term "1,1,0,0,0,1,0,0"))
                  (rule "times_zero_1" (formula "24") (term "1,0,0,0,1,0,0"))
                  (rule "add_zero_right" (formula "24") (term "0,0,0,1,0,0"))
                  (rule "leq_literals" (formula "24") (term "0,0,1,0,0"))
                   (builtin "One Step Simplification" (formula "24"))
                  (rule "mod_axiom" (formula "24") (term "0"))
                  (rule "polySimp_mulLiterals" (formula "24") (term "1,0"))
                  (rule "polySimp_homoEq" (formula "24"))
                  (rule "polySimp_mulComm0" (formula "24") (term "1,0"))
                  (rule "polySimp_rightDist" (formula "24") (term "1,0"))
                  (rule "polySimp_mulLiterals" (formula "24") (term "1,1,0"))
                  (rule "polySimp_rightDist" (formula "24") (term "0,1,0"))
                  (rule "mul_literals" (formula "24") (term "0,0,1,0"))
                  (rule "polySimp_addAssoc" (formula "24") (term "0"))
                  (rule "polySimp_addAssoc" (formula "24") (term "0,0"))
                  (rule "polySimp_addComm1" (formula "24") (term "0,0,0"))
                  (rule "add_literals" (formula "24") (term "0,0,0,0"))
                  (rule "polySimp_sepPosMonomial" (formula "24"))
                  (rule "polySimp_mulComm0" (formula "24") (term "1"))
                  (rule "polySimp_rightDist" (formula "24") (term "1"))
                  (rule "polySimp_mulLiterals" (formula "24") (term "1,1"))
                  (rule "polySimp_elimOne" (formula "24") (term "1,1"))
                  (rule "polySimp_rightDist" (formula "24") (term "0,1"))
                  (rule "mul_literals" (formula "24") (term "0,0,1"))
                  (rule "newSym_eq" (formula "24") (inst "l=l_0") (inst "newSymDef=add(add(Z(0(#)), mul(b, Z(0(#)))),
    mul(pow(Z(2(#)),
            add(mul(quotient_0, Z(neglit(2(3(#))))),
                int::final(self,
                           de.wiesler.Tree::$log_buckets))),
        Z(0(#))))"))
                  (rule "times_zero_1" (formula "24") (term "1,1,1"))
                  (rule "add_zero_left" (formula "24") (term "0,1,1"))
                  (rule "times_zero_1" (formula "24") (term "0,1,1"))
                  (rule "add_zero_left" (formula "24") (term "1,1"))
                  (rule "add_zero_right" (formula "24") (term "1"))
                  (rule "applyEq" (formula "25") (term "0,0") (ifseqformula "24"))
                  (rule "polySimp_homoEq" (formula "25"))
                  (rule "polySimp_mulLiterals" (formula "25") (term "1,0"))
                  (rule "polySimp_addComm1" (formula "25") (term "0"))
                  (rule "polySimp_addComm1" (formula "25") (term "0,0"))
                  (rule "polySimp_sepPosMonomial" (formula "25"))
                  (rule "polySimp_mulComm0" (formula "25") (term "1"))
                  (rule "polySimp_rightDist" (formula "25") (term "1"))
                  (rule "polySimp_mulLiterals" (formula "25") (term "1,1"))
                  (rule "polySimp_elimOne" (formula "25") (term "1,1"))
                  (rule "polySimp_rightDist" (formula "25") (term "0,1"))
                  (rule "polySimp_mulLiterals" (formula "25") (term "1,0,1"))
                  (rule "mul_literals" (formula "25") (term "0,0,1"))
                  (rule "applyEq" (formula "24") (term "1,0,0") (ifseqformula "25"))
                  (rule "polySimp_addAssoc" (formula "24") (term "0,0"))
                  (rule "polySimp_addAssoc" (formula "24") (term "0,0,0"))
                  (rule "add_literals" (formula "24") (term "0,0,0,0"))
                  (rule "polyDiv_pullOut" (formula "24") (term "0") (inst "polyDivCoeff=l_0"))
                  (rule "polySimp_mulLiterals" (formula "24") (term "1,0,0,2,0"))
                  (rule "equal_literals" (formula "24") (term "0,0"))
                   (builtin "One Step Simplification" (formula "24"))
                  (rule "polySimp_homoEq" (formula "24"))
                  (rule "polySimp_mulComm0" (formula "24") (term "1,0"))
                  (rule "polySimp_addComm0" (formula "24") (term "1,1,0"))
                  (rule "polySimp_addComm1" (formula "24") (term "0,1,1,1,0"))
                  (rule "polySimp_pullOutFactor0b" (formula "24") (term "0,0,1,1,1,0"))
                  (rule "add_literals" (formula "24") (term "1,1,0,0,1,1,1,0"))
                  (rule "times_zero_1" (formula "24") (term "1,0,0,1,1,1,0"))
                  (rule "add_zero_right" (formula "24") (term "0,0,1,1,1,0"))
                  (rule "polySimp_rightDist" (formula "24") (term "1,0"))
                  (rule "polySimp_mulComm0" (formula "24") (term "0,1,0"))
                  (rule "polySimp_addAssoc" (formula "24") (term "0"))
                  (rule "polySimp_pullOutFactor1" (formula "24") (term "0,0"))
                  (rule "add_literals" (formula "24") (term "1,0,0"))
                  (rule "times_zero_1" (formula "24") (term "0,0"))
                  (rule "add_zero_left" (formula "24") (term "0"))
                  (rule "polySimp_invertEq" (formula "24"))
                  (rule "times_zero_2" (formula "24") (term "1"))
                  (rule "polySimp_mulLiterals" (formula "24") (term "0"))
                  (rule "polySimp_elimOne" (formula "24") (term "0"))
                  (rule "polyDiv_pullOut" (formula "24") (term "0") (inst "polyDivCoeff=Z(1(#))"))
                  (rule "polySimp_mulLiterals" (formula "24") (term "1,0,0,2,0"))
                  (rule "equal_literals" (formula "24") (term "0,0"))
                   (builtin "One Step Simplification" (formula "24"))
                  (rule "mul_literals" (formula "24") (term "1,0,0,0"))
                  (rule "polySimp_addComm1" (formula "24") (term "0,0,0"))
                  (rule "add_literals" (formula "24") (term "0,0,0,0"))
                  (rule "polySimp_addComm0" (formula "24") (term "0"))
                  (rule "polySimp_sepPosMonomial" (formula "24"))
                  (rule "mul_literals" (formula "24") (term "1"))
                  (rule "inEqSimp_exactShadow3" (formula "22") (ifseqformula "20"))
                  (rule "polySimp_mulAssoc" (formula "22") (term "0,0"))
                  (rule "polySimp_mulComm0" (formula "22") (term "0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "22") (term "0,0"))
                  (rule "polySimp_addComm0" (formula "22") (term "0"))
                  (rule "inEqSimp_sepNegMonomial1" (formula "22"))
                  (rule "polySimp_mulLiterals" (formula "22") (term "0"))
                  (rule "elimGcdLeq_antec" (formula "22") (inst "elimGcdRightDiv=Z(0(#))") (inst "elimGcdLeftDiv=quotient_0") (inst "elimGcd=Z(2(3(#)))"))
                  (rule "leq_literals" (formula "22") (term "0,0"))
                   (builtin "One Step Simplification" (formula "22"))
                  (rule "times_zero_1" (formula "22") (term "1,0,0,0,0,0"))
                  (rule "neg_literal" (formula "22") (term "0,0,0,0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "22") (term "1,0,0"))
                  (rule "polySimp_addLiterals" (formula "22") (term "0,0,0,0"))
                  (rule "add_literals" (formula "22") (term "0,0,0,0"))
                  (rule "polySimp_pullOutFactor0b" (formula "22") (term "0,0"))
                  (rule "add_literals" (formula "22") (term "1,1,0,0"))
                  (rule "times_zero_1" (formula "22") (term "1,0,0"))
                  (rule "add_zero_right" (formula "22") (term "0,0"))
                  (rule "qeq_literals" (formula "22") (term "0"))
                   (builtin "One Step Simplification" (formula "22"))
                  (rule "inEqSimp_exactShadow3" (formula "19") (ifseqformula "24"))
                  (rule "mul_literals" (formula "19") (term "0,0"))
                  (rule "polySimp_addAssoc" (formula "19") (term "0"))
                  (rule "add_literals" (formula "19") (term "0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "19"))
                  (rule "mul_literals" (formula "19") (term "1"))
                  (rule "elimGcdGeq_antec" (formula "19") (inst "elimGcdRightDiv=Z(0(#))") (inst "elimGcdLeftDiv=quotient_0") (inst "elimGcd=Z(2(3(#)))"))
                  (rule "polySimp_mulLiterals" (formula "19") (term "1,0,1,0"))
                  (rule "times_zero_1" (formula "19") (term "1,0,0,0,0,1,0"))
                  (rule "leq_literals" (formula "19") (term "0,0"))
                   (builtin "One Step Simplification" (formula "19"))
                  (rule "polySimp_addLiterals" (formula "19") (term "0,0,0,0"))
                  (rule "add_literals" (formula "19") (term "0,0,0,0"))
                  (rule "polySimp_pullOutFactor0b" (formula "19") (term "0,0"))
                  (rule "add_literals" (formula "19") (term "1,1,0,0"))
                  (rule "times_zero_1" (formula "19") (term "1,0,0"))
                  (rule "add_zero_right" (formula "19") (term "0,0"))
                  (rule "leq_literals" (formula "19") (term "0"))
                   (builtin "One Step Simplification" (formula "19"))
                  (rule "inEqSimp_exactShadow3" (formula "17") (ifseqformula "25"))
                  (rule "polySimp_rightDist" (formula "17") (term "0,0"))
                  (rule "mul_literals" (formula "17") (term "0,0,0"))
                  (rule "polySimp_addComm1" (formula "17") (term "0"))
                  (rule "polySimp_addAssoc" (formula "17") (term "0,0"))
                  (rule "add_literals" (formula "17") (term "0,0,0"))
                  (rule "inEqSimp_sepNegMonomial1" (formula "17"))
                  (rule "polySimp_mulLiterals" (formula "17") (term "0"))
                  (rule "polySimp_elimOne" (formula "17") (term "0"))
                  (rule "inEqSimp_antiSymm" (formula "20") (ifseqformula "24"))
                  (rule "applyEq" (formula "26") (term "0,1") (ifseqformula "20"))
                  (rule "times_zero_2" (formula "26") (term "1"))
                  (rule "applyEq" (formula "25") (term "0") (ifseqformula "20"))
                  (rule "leq_literals" (formula "25"))
                  (rule "true_left" (formula "25"))
                  (rule "applyEqRigid" (formula "26") (term "0,1,1") (ifseqformula "20"))
                  (rule "mul_literals" (formula "26") (term "1,1"))
                  (rule "add_zero_right" (formula "26") (term "1"))
                  (rule "applyEq" (formula "21") (term "0") (ifseqformula "20"))
                  (rule "qeq_literals" (formula "21"))
                  (rule "true_left" (formula "21"))
                  (rule "applyEq" (formula "17") (term "0,1,1") (ifseqformula "20"))
                  (rule "times_zero_2" (formula "17") (term "1,1"))
                  (rule "add_zero_right" (formula "17") (term "1"))
                  (rule "applyEqRigid" (formula "23") (term "1") (ifseqformula "20"))
                  (rule "applyEq" (formula "27") (term "0,0,1,0") (ifseqformula "20"))
                  (rule "times_zero_2" (formula "27") (term "0,1,0"))
                  (rule "add_zero_left" (formula "27") (term "1,0"))
                  (rule "inEqSimp_subsumption0" (formula "25") (ifseqformula "22"))
                  (rule "leq_literals" (formula "25") (term "0"))
                   (builtin "One Step Simplification" (formula "25"))
                  (rule "true_left" (formula "25"))
                  (rule "inEqSimp_subsumption1" (formula "24") (ifseqformula "21"))
                  (rule "leq_literals" (formula "24") (term "0"))
                   (builtin "One Step Simplification" (formula "24"))
                  (rule "true_left" (formula "24"))
                  (rule "inEqSimp_subsumption0" (formula "17") (ifseqformula "16"))
                  (rule "leq_literals" (formula "17") (term "0"))
                   (builtin "One Step Simplification" (formula "17"))
                  (rule "true_left" (formula "17"))
                  (rule "commute_or_2" (formula "34") (term "0,0"))
                  (rule "commute_or_2" (formula "36") (term "0,0"))
                  (rule "Contract_axiom_for_isSortedSliceTransitive_in_Functions" (formula "32") (term "0"))
                  (rule "replace_known_right" (formula "32") (term "0,0,0") (ifseqformula "39"))
                   (builtin "One Step Simplification" (formula "32") (ifInst ""  (formula "5")) (ifInst ""  (formula "33")))
                  (rule "Definition_axiom_for_isSortedSliceTransitive_in_de_wiesler_Functions" (formula "33") (term "0") (inst "i=i") (inst "j=j"))
                   (builtin "One Step Simplification" (formula "33"))
                  (rule "expand_inInt" (formula "33") (term "1,0,0"))
                  (rule "expand_inInt" (formula "33") (term "1,0,0,1,0"))
                  (rule "replace_int_MIN" (formula "33") (term "0,1,1,0,0"))
                  (rule "replace_int_MAX" (formula "33") (term "1,0,1,0,0"))
                  (rule "replace_int_MIN" (formula "33") (term "0,1,1,0,0,1,0"))
                  (rule "replace_int_MAX" (formula "33") (term "1,0,1,0,0,1,0"))
                  (rule "inEqSimp_ltToLeq" (formula "33") (term "1,0,0,0,1,0"))
                  (rule "polySimp_mulComm0" (formula "33") (term "1,0,0,1,0,0,0,1,0"))
                  (rule "inEqSimp_ltToLeq" (formula "33") (term "1,0,0,0"))
                  (rule "polySimp_mulComm0" (formula "33") (term "1,0,0,1,0,0,0"))
                  (rule "inEqSimp_commuteLeq" (formula "33") (term "0,0,0,0"))
                  (rule "inEqSimp_commuteLeq" (formula "33") (term "0,0,0,0,1,0"))
                  (rule "inEqSimp_commuteLeq" (formula "33") (term "1,0,1,0"))
                  (rule "inEqSimp_commuteLeq" (formula "33") (term "1,1,0,0"))
                  (rule "inEqSimp_commuteLeq" (formula "33") (term "1,1,0,0,1,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "33") (term "1,0,0,0,1,0"))
                  (rule "polySimp_mulComm0" (formula "33") (term "1,1,0,0,0,1,0"))
                  (rule "polySimp_rightDist" (formula "33") (term "1,1,0,0,0,1,0"))
                  (rule "polySimp_mulLiterals" (formula "33") (term "1,1,1,0,0,0,1,0"))
                  (rule "mul_literals" (formula "33") (term "0,1,1,0,0,0,1,0"))
                  (rule "polySimp_elimOne" (formula "33") (term "1,1,1,0,0,0,1,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "33") (term "1,0,0,0"))
                  (rule "polySimp_mulComm0" (formula "33") (term "1,1,0,0,0"))
                  (rule "polySimp_rightDist" (formula "33") (term "1,1,0,0,0"))
                  (rule "mul_literals" (formula "33") (term "0,1,1,0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "33") (term "1,1,1,0,0,0"))
                  (rule "polySimp_elimOne" (formula "33") (term "1,1,1,0,0,0"))
                  (rule "div_axiom" (formula "12") (term "0") (inst "quotient=quotient_1"))
                  (rule "mul_literals" (formula "12") (term "1,1,1,1,1"))
                  (rule "qeq_literals" (formula "12") (term "0,1,1"))
                   (builtin "One Step Simplification" (formula "12"))
                  (rule "equal_literals" (formula "12") (term "0"))
                   (builtin "One Step Simplification" (formula "12"))
                  (rule "andLeft" (formula "12"))
                  (rule "andLeft" (formula "12"))
                  (rule "polySimp_addAssoc" (formula "14") (term "0,1"))
                  (rule "add_literals" (formula "14") (term "0,0,1"))
                  (rule "polySimp_addComm1" (formula "14") (term "1"))
                  (rule "add_literals" (formula "14") (term "0,1"))
                  (rule "add_zero_left" (formula "14") (term "1"))
                  (rule "inEqSimp_commuteGeq" (formula "14"))
                  (rule "inEqSimp_homoInEq0" (formula "13"))
                  (rule "polySimp_mulLiterals" (formula "13") (term "1,0"))
                  (rule "polySimp_addComm1" (formula "13") (term "0"))
                  (rule "applyEq" (formula "12") (term "0") (ifseqformula "15"))
                  (rule "polySimp_homoEq" (formula "12"))
                  (rule "polySimp_mulComm0" (formula "12") (term "1,0"))
                  (rule "polySimp_rightDist" (formula "12") (term "1,0"))
                  (rule "mul_literals" (formula "12") (term "0,1,0"))
                  (rule "polySimp_addAssoc" (formula "12") (term "0"))
                  (rule "polySimp_addComm0" (formula "12") (term "0,0"))
                  (rule "polySimp_sepNegMonomial" (formula "12"))
                  (rule "polySimp_mulLiterals" (formula "12") (term "0"))
                  (rule "polySimp_elimOne" (formula "12") (term "0"))
                  (rule "applyEq" (formula "38") (term "1,1,0,0") (ifseqformula "12"))
                  (rule "applyEq" (formula "28") (term "0") (ifseqformula "12"))
                  (rule "inEqSimp_homoInEq1" (formula "28"))
                  (rule "polySimp_mulComm0" (formula "28") (term "1,0"))
                  (rule "polySimp_rightDist" (formula "28") (term "1,0"))
                  (rule "mul_literals" (formula "28") (term "0,1,0"))
                  (rule "polySimp_addAssoc" (formula "28") (term "0"))
                  (rule "add_literals" (formula "28") (term "0,0"))
                  (rule "applyEq" (formula "39") (term "1,1,1,0,0") (ifseqformula "12"))
                  (rule "polySimp_addAssoc" (formula "39") (term "1,1,0,0"))
                  (rule "add_literals" (formula "39") (term "0,1,1,0,0"))
                  (rule "add_zero_left" (formula "39") (term "1,1,0,0"))
                  (rule "applyEq" (formula "40") (term "1,1,1,0,0") (ifseqformula "12"))
                  (rule "polySimp_addAssoc" (formula "40") (term "1,1,0,0"))
                  (rule "add_literals" (formula "40") (term "0,1,1,0,0"))
                  (rule "add_zero_left" (formula "40") (term "1,1,0,0"))
                  (rule "applyEq" (formula "34") (term "1,1") (ifseqformula "12"))
                  (rule "polySimp_addAssoc" (formula "34") (term "1"))
                  (rule "add_literals" (formula "34") (term "0,1"))
                  (rule "add_zero_left" (formula "34") (term "1"))
                  (rule "applyEq" (formula "26") (term "1,0,0") (ifseqformula "12"))
                  (rule "polySimp_addAssoc" (formula "26") (term "0,0"))
                  (rule "add_literals" (formula "26") (term "0,0,0"))
                  (rule "applyEq" (formula "16") (term "1,0,0") (ifseqformula "12"))
                  (rule "polySimp_addAssoc" (formula "16") (term "0,0"))
                  (rule "add_literals" (formula "16") (term "0,0,0"))
                  (rule "add_zero_left" (formula "16") (term "0,0"))
                  (rule "applyEq" (formula "38") (term "1,1,0,0,0,1,0") (ifseqformula "12"))
                  (rule "applyEq" (formula "36") (term "1,1,1,0,0,0,1,0") (ifseqformula "12"))
                  (rule "polySimp_addAssoc" (formula "36") (term "1,1,0,0,0,1,0"))
                  (rule "add_literals" (formula "36") (term "0,1,1,0,0,0,1,0"))
                  (rule "applyEq" (formula "14") (term "0") (ifseqformula "12"))
                  (rule "inEqSimp_homoInEq0" (formula "14"))
                  (rule "polySimp_mulComm0" (formula "14") (term "1,0"))
                  (rule "polySimp_rightDist" (formula "14") (term "1,0"))
                  (rule "mul_literals" (formula "14") (term "0,1,0"))
                  (rule "polySimp_addAssoc" (formula "14") (term "0"))
                  (rule "polySimp_addComm0" (formula "14") (term "0,0"))
                  (rule "polySimp_pullOutFactor0b" (formula "14") (term "0"))
                  (rule "add_literals" (formula "14") (term "1,1,0"))
                  (rule "polySimp_elimOne" (formula "14") (term "1,0"))
                  (rule "applyEq" (formula "2") (term "0,1,0,2,0") (ifseqformula "12"))
                  (rule "polySimp_mulComm0" (formula "2") (term "1,0,2,0"))
                  (rule "polySimp_rightDist" (formula "2") (term "1,0,2,0"))
                  (rule "mul_literals" (formula "2") (term "0,1,0,2,0"))
                  (rule "polySimp_addAssoc" (formula "2") (term "0,2,0"))
                  (rule "add_literals" (formula "2") (term "0,0,2,0"))
                  (rule "applyEq" (formula "37") (term "1,1,1,0,0,0") (ifseqformula "12"))
                  (rule "polySimp_addAssoc" (formula "37") (term "1,1,0,0,0"))
                  (rule "add_literals" (formula "37") (term "0,1,1,0,0,0"))
                  (rule "applyEq" (formula "15") (term "1,0,0") (ifseqformula "12"))
                  (rule "polySimp_addAssoc" (formula "15") (term "0,0"))
                  (rule "add_literals" (formula "15") (term "0,0,0"))
                  (rule "add_zero_left" (formula "15") (term "0,0"))
                  (rule "applyEq" (formula "13") (term "1,0") (ifseqformula "12"))
                  (rule "polySimp_addAssoc" (formula "13") (term "0"))
                  (rule "polySimp_addComm1" (formula "13") (term "0,0"))
                  (rule "add_literals" (formula "13") (term "0,0,0"))
                  (rule "add_zero_left" (formula "13") (term "0,0"))
                  (rule "polySimp_pullOutFactor2" (formula "13") (term "0"))
                  (rule "add_literals" (formula "13") (term "1,0"))
                  (rule "applyEq" (formula "8") (term "0") (ifseqformula "12"))
                  (rule "inEqSimp_homoInEq0" (formula "8"))
                  (rule "polySimp_mulComm0" (formula "8") (term "1,0"))
                  (rule "polySimp_rightDist" (formula "8") (term "1,0"))
                  (rule "mul_literals" (formula "8") (term "0,1,0"))
                  (rule "polySimp_addAssoc" (formula "8") (term "0"))
                  (rule "add_literals" (formula "8") (term "0,0"))
                  (rule "applyEq" (formula "1") (term "0,2,0") (ifseqformula "12"))
                  (rule "applyEq" (formula "35") (term "3,0") (ifseqformula "12"))
                  (rule "applyEq" (formula "36") (term "1,1,1,0,0,0") (ifseqformula "12"))
                  (rule "polySimp_addAssoc" (formula "36") (term "1,1,0,0,0"))
                  (rule "add_literals" (formula "36") (term "0,1,1,0,0,0"))
                  (rule "applyEq" (formula "31") (term "1,1") (ifseqformula "12"))
                  (rule "polySimp_addAssoc" (formula "31") (term "1"))
                  (rule "add_literals" (formula "31") (term "0,1"))
                  (rule "add_zero_left" (formula "31") (term "1"))
                  (rule "applyEq" (formula "21") (term "1,1") (ifseqformula "12"))
                  (rule "polySimp_addAssoc" (formula "21") (term "1"))
                  (rule "add_literals" (formula "21") (term "0,1"))
                  (rule "add_zero_left" (formula "21") (term "1"))
                  (rule "applyEq" (formula "16") (term "1,1") (ifseqformula "12"))
                  (rule "polySimp_addAssoc" (formula "16") (term "1"))
                  (rule "add_literals" (formula "16") (term "0,1"))
                  (rule "add_zero_left" (formula "16") (term "1"))
                  (rule "applyEq" (formula "15") (term "1,1") (ifseqformula "12"))
                  (rule "polySimp_addAssoc" (formula "15") (term "1"))
                  (rule "add_literals" (formula "15") (term "0,1"))
                  (rule "add_zero_left" (formula "15") (term "1"))
                  (rule "applyEq" (formula "4") (term "1,1") (ifseqformula "12"))
                  (rule "polySimp_addAssoc" (formula "4") (term "1"))
                  (rule "add_literals" (formula "4") (term "0,1"))
                  (rule "add_zero_left" (formula "4") (term "1"))
                  (rule "applyEq" (formula "27") (term "1,1") (ifseqformula "12"))
                  (rule "polySimp_addComm1" (formula "27") (term "1"))
                  (rule "polySimp_addAssoc" (formula "27") (term "0,1"))
                  (rule "add_literals" (formula "27") (term "0,0,1"))
                  (rule "add_zero_left" (formula "27") (term "0,1"))
                  (rule "applyEq" (formula "17") (term "1,1") (ifseqformula "12"))
                  (rule "polySimp_addAssoc" (formula "17") (term "1"))
                  (rule "add_literals" (formula "17") (term "0,1"))
                  (rule "add_zero_left" (formula "17") (term "1"))
                  (rule "applyEq" (formula "39") (term "0,0,0,1,1,1,0") (ifseqformula "12"))
                  (rule "polySimp_mulComm0" (formula "39") (term "0,0,1,1,1,0"))
                  (rule "polySimp_rightDist" (formula "39") (term "0,0,1,1,1,0"))
                  (rule "mul_literals" (formula "39") (term "0,0,0,1,1,1,0"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "28"))
                  (rule "polySimp_mulLiterals" (formula "28") (term "0"))
                  (rule "polySimp_elimOne" (formula "28") (term "0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "14"))
                  (rule "mul_literals" (formula "14") (term "1"))
                  (rule "inEqSimp_invertInEq1" (formula "13"))
                  (rule "times_zero_2" (formula "13") (term "1"))
                  (rule "polySimp_mulLiterals" (formula "13") (term "0"))
                  (rule "polySimp_elimOne" (formula "13") (term "0"))
                  (rule "inEqSimp_sepNegMonomial1" (formula "8"))
                  (rule "polySimp_mulLiterals" (formula "8") (term "0"))
                  (rule "polySimp_elimOne" (formula "8") (term "0"))
                  (rule "inEqSimp_contradInEq0" (formula "28") (ifseqformula "13"))
                  (rule "qeq_literals" (formula "28") (term "0"))
                   (builtin "One Step Simplification" (formula "28"))
                  (rule "closeFalse" (formula "28"))
               )
            )
            (branch "CUT: d = javaDivInt(d, 2) FALSE"
               (rule "powSplitFactor" (formula "15") (term "1") (userinteraction))
               (rule "expand_inInt" (formula "4"))
               (rule "expand_inInt" (formula "5"))
               (rule "expand_inInt" (formula "6"))
               (rule "expand_inInt" (formula "7"))
               (rule "greater_literals" (formula "15") (term "1,0"))
                (builtin "One Step Simplification" (formula "15"))
               (rule "replace_int_MAX" (formula "4") (term "1,0"))
               (rule "replace_int_MIN" (formula "4") (term "0,1"))
               (rule "replace_int_MAX" (formula "5") (term "1,0"))
               (rule "replace_int_MIN" (formula "5") (term "0,1"))
               (rule "replace_int_MIN" (formula "6") (term "0,1"))
               (rule "replace_int_MAX" (formula "6") (term "1,0"))
               (rule "replace_int_MAX" (formula "7") (term "1,0"))
               (rule "replace_int_MIN" (formula "7") (term "0,1"))
               (rule "andLeft" (formula "4"))
               (rule "andLeft" (formula "6"))
               (rule "andLeft" (formula "8"))
               (rule "andLeft" (formula "10"))
               (rule "translateJavaSubInt" (formula "26") (term "0,0"))
               (rule "translateJavaDivInt" (formula "26") (term "1,0"))
               (rule "translateJavaDivInt" (formula "27") (term "1,0,0,2,0"))
               (rule "translateJavaDivInt" (formula "27") (term "1,0,2,0"))
               (rule "translateJavaSubInt" (formula "13") (term "0"))
               (rule "eqSymm" (formula "23"))
               (rule "translateJavaSubInt" (formula "14") (term "1"))
               (rule "translateJavaSubInt" (formula "15") (term "0,0"))
               (rule "translateJavaDivInt" (formula "25") (term "1,0,2,0"))
               (rule "eqSymm" (formula "20"))
               (rule "translateJavaSubInt" (formula "15") (term "0,2,0,1"))
               (rule "eqSymm" (formula "16") (term "0"))
               (rule "translateJavaSubInt" (formula "19") (term "0,0"))
               (rule "translateJavaSubInt" (formula "19") (term "1,0,1"))
               (rule "translateJavaSubInt" (formula "19") (term "0,1,1,1,1"))
               (rule "translateJavaDivInt" (formula "26") (term "1,0,0"))
               (rule "translateJavaDivInt" (formula "23") (term "0"))
               (rule "translateJavaSubInt" (formula "20") (term "1,0"))
               (rule "translateJavaSubInt" (formula "16") (term "0,0"))
               (rule "polySimp_elimSub" (formula "27") (term "0,0,2,0"))
               (rule "polySimp_elimSub" (formula "13") (term "0"))
               (rule "mul_literals" (formula "13") (term "1,0"))
               (rule "polySimp_elimSub" (formula "14") (term "1"))
               (rule "mul_literals" (formula "14") (term "1,1"))
               (rule "polySimp_elimSub" (formula "15") (term "0,0"))
               (rule "polySimp_elimSub" (formula "25") (term "0,2,0"))
               (rule "polySimp_elimSub" (formula "15") (term "0,2,0,1"))
               (rule "polySimp_elimSub" (formula "19") (term "0,0"))
               (rule "polySimp_elimSub" (formula "19") (term "1,0,1"))
               (rule "polySimp_elimSub" (formula "19") (term "0,1,1,1,1"))
               (rule "polySimp_elimSub" (formula "26") (term "0,0"))
               (rule "polySimp_elimSub" (formula "20") (term "1,0"))
               (rule "polySimp_elimSub" (formula "16") (term "0,0"))
               (rule "mul_literals" (formula "16") (term "1,0,0"))
               (rule "polySimp_elimSub" (formula "27") (term "0,2,0"))
               (rule "polySimp_homoEq" (formula "15") (term "0"))
               (rule "polySimp_elimSub" (formula "19") (term "1,1,1,1"))
               (rule "mul_literals" (formula "19") (term "1,1,1,1,1"))
               (rule "polySimp_elimSub" (formula "26") (term "0"))
               (rule "polySimp_homoEq" (formula "16") (term "0"))
               (rule "polySimp_pullOutFactor0b" (formula "27") (term "0,2,0"))
               (rule "add_literals" (formula "27") (term "1,1,0,2,0"))
               (rule "polySimp_pullOutFactor3b" (formula "26") (term "0"))
               (rule "polySimp_mulLiterals" (formula "26") (term "1,0"))
               (rule "polySimp_homoEq" (formula "26"))
               (rule "polySimp_mulComm0" (formula "15") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "19") (term "1,1"))
               (rule "eqSymm" (formula "19") (term "1"))
               (rule "polySimp_mulComm0" (formula "16") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "26") (term "1,0"))
               (rule "polySimp_addComm0" (formula "13") (term "0"))
               (rule "polySimp_addComm0" (formula "14") (term "1"))
               (rule "polySimp_addComm0" (formula "19") (term "0,0"))
               (rule "polySimp_addComm0" (formula "20") (term "1,0"))
               (rule "polySimp_addComm1" (formula "19") (term "1,0,0,1"))
               (rule "polySimp_addComm0" (formula "19") (term "1,1,1"))
               (rule "polySimp_addComm0" (formula "16") (term "1,1,0,0"))
               (rule "polySimp_addComm0" (formula "19") (term "0,1,0,0,1"))
               (rule "polySimp_rightDist" (formula "15") (term "1,0,0"))
               (rule "polySimp_mulLiterals" (formula "15") (term "1,1,0,0"))
               (rule "polySimp_elimOne" (formula "15") (term "1,1,0,0"))
               (rule "polySimp_mulComm0" (formula "15") (term "0,1,0,0"))
               (rule "polySimp_addComm1" (formula "19") (term "1,0,0,1"))
               (rule "polySimp_rightDist" (formula "26") (term "1,0"))
               (rule "polySimp_mulLiterals" (formula "26") (term "1,1,0"))
               (rule "polySimp_mulComm0" (formula "26") (term "0,1,0"))
               (rule "inEqSimp_ltToLeq" (formula "18"))
               (rule "polySimp_mulComm0" (formula "18") (term "1,0,0"))
               (rule "polySimp_rightDist" (formula "16") (term "1,0,0"))
               (rule "mul_literals" (formula "16") (term "0,1,0,0"))
               (rule "polySimp_addComm1" (formula "18") (term "0"))
               (rule "inEqSimp_ltRight" (formula "25"))
               (rule "polySimp_mulComm0" (formula "1") (term "0,0"))
               (rule "inEqSimp_commuteLeq" (formula "18"))
               (rule "inEqSimp_commuteLeq" (formula "17") (term "1"))
               (rule "inEqSimp_ltToLeq" (formula "16") (term "1"))
               (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,1"))
               (rule "inEqSimp_ltRight" (formula "27"))
               (rule "polySimp_mulComm0" (formula "1") (term "0,0"))
               (rule "polySimp_addAssoc" (formula "17") (term "0,0"))
               (rule "polySimp_addAssoc" (formula "27") (term "0"))
               (rule "inEqSimp_commuteLeq" (formula "7"))
               (rule "inEqSimp_commuteLeq" (formula "9"))
               (rule "inEqSimp_commuteLeq" (formula "11"))
               (rule "polySimp_addAssoc" (formula "18") (term "0,0"))
               (rule "polySimp_addComm0" (formula "18") (term "0,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "13"))
               (rule "inEqSimp_homoInEq0" (formula "15"))
               (rule "polySimp_mulComm0" (formula "15") (term "1,0"))
               (rule "polySimp_rightDist" (formula "15") (term "1,0"))
               (rule "mul_literals" (formula "15") (term "0,1,0"))
               (rule "polySimp_addAssoc" (formula "15") (term "0"))
               (rule "polySimp_addComm0" (formula "15") (term "0,0"))
               (rule "inEqSimp_homoInEq0" (formula "16"))
               (rule "polySimp_addComm1" (formula "16") (term "0"))
               (rule "inEqSimp_homoInEq1" (formula "21") (term "0"))
               (rule "polySimp_mulComm0" (formula "21") (term "1,0,0"))
               (rule "polySimp_rightDist" (formula "21") (term "1,0,0"))
               (rule "polySimp_mulAssoc" (formula "21") (term "0,1,0,0"))
               (rule "polySimp_mulComm0" (formula "21") (term "0,0,1,0,0"))
               (rule "polySimp_mulLiterals" (formula "21") (term "0,1,0,0"))
               (rule "polySimp_elimOne" (formula "21") (term "0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "21") (term "0,0"))
               (rule "replace_known_left" (formula "21") (term "0") (ifseqformula "20"))
                (builtin "One Step Simplification" (formula "21"))
               (rule "applyEq" (formula "21") (term "1") (ifseqformula "22"))
               (rule "polySimp_sepPosMonomial" (formula "17") (term "0"))
               (rule "polySimp_mulComm0" (formula "17") (term "1,0"))
               (rule "polySimp_rightDist" (formula "17") (term "1,0"))
               (rule "mul_literals" (formula "17") (term "0,1,0"))
               (rule "polySimp_mulLiterals" (formula "17") (term "1,1,0"))
               (rule "polySimp_elimOne" (formula "17") (term "1,1,0"))
               (rule "polySimp_sepPosMonomial" (formula "27"))
               (rule "polySimp_mulComm0" (formula "27") (term "1"))
               (rule "polySimp_rightDist" (formula "27") (term "1"))
               (rule "mul_literals" (formula "27") (term "0,1"))
               (rule "polySimp_mulLiterals" (formula "27") (term "1,1"))
               (rule "polySimp_elimOne" (formula "27") (term "1,1"))
               (rule "polySimp_sepNegMonomial" (formula "18") (term "0"))
               (rule "polySimp_mulLiterals" (formula "18") (term "0,0"))
               (rule "polySimp_elimOne" (formula "18") (term "0,0"))
               (rule "inEqSimp_sepNegMonomial0" (formula "20"))
               (rule "polySimp_mulLiterals" (formula "20") (term "0"))
               (rule "polySimp_elimOne" (formula "20") (term "0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "2"))
               (rule "polySimp_mulLiterals" (formula "2") (term "1"))
               (rule "polySimp_elimOne" (formula "2") (term "1"))
               (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "1"))
               (rule "polySimp_mulComm0" (formula "17") (term "1,1"))
               (rule "polySimp_rightDist" (formula "17") (term "1,1"))
               (rule "mul_literals" (formula "17") (term "0,1,1"))
               (rule "polySimp_mulLiterals" (formula "17") (term "1,1,1"))
               (rule "polySimp_elimOne" (formula "17") (term "1,1,1"))
               (rule "inEqSimp_sepPosMonomial1" (formula "1"))
               (rule "polySimp_mulLiterals" (formula "1") (term "1"))
               (rule "polySimp_elimOne" (formula "1") (term "1"))
               (rule "inEqSimp_sepNegMonomial1" (formula "15"))
               (rule "polySimp_mulLiterals" (formula "15") (term "0"))
               (rule "polySimp_elimOne" (formula "15") (term "0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "16"))
               (rule "polySimp_mulComm0" (formula "16") (term "1"))
               (rule "polySimp_rightDist" (formula "16") (term "1"))
               (rule "polySimp_mulLiterals" (formula "16") (term "1,1"))
               (rule "mul_literals" (formula "16") (term "0,1"))
               (rule "polySimp_elimOne" (formula "16") (term "1,1"))
               (rule "inEqSimp_subsumption1" (formula "13") (ifseqformula "19"))
               (rule "leq_literals" (formula "13") (term "0"))
                (builtin "One Step Simplification" (formula "13"))
               (rule "true_left" (formula "13"))
               (rule "newSym_eq" (formula "20") (inst "l=l_0") (inst "newSymDef=mul(d, Z(0(#)))"))
               (rule "times_zero_1" (formula "20") (term "1,1"))
               (rule "add_zero_right" (formula "20") (term "1"))
               (rule "applyEq" (formula "21") (term "0,0") (ifseqformula "20"))
               (rule "eqSymm" (formula "21"))
               (rule "applyEq" (formula "16") (term "0,1,0,2,0,1") (ifseqformula "21"))
               (rule "polySimp_mulLiterals" (formula "16") (term "1,0,2,0,1"))
               (rule "polySimp_addComm0" (formula "16") (term "0,2,0,1"))
               (rule "applyEq" (formula "9") (term "0") (ifseqformula "21"))
               (rule "applyEq" (formula "14") (term "0") (ifseqformula "21"))
               (rule "inEqSimp_homoInEq0" (formula "14"))
               (rule "polySimp_mulLiterals" (formula "14") (term "1,0"))
               (rule "polySimp_addComm1" (formula "14") (term "0"))
               (rule "applyEq" (formula "8") (term "0") (ifseqformula "21"))
               (rule "applyEq" (formula "2") (term "0,0,1,0,2,0") (ifseqformula "21"))
               (rule "applyEq" (formula "16") (term "0,0") (ifseqformula "21"))
               (rule "polySimp_homoEq" (formula "16") (term "0"))
               (rule "polySimp_mulLiterals" (formula "16") (term "1,0,0"))
               (rule "polySimp_addComm1" (formula "16") (term "0,0"))
               (rule "applyEq" (formula "27") (term "0,0,0") (ifseqformula "21"))
               (rule "applyEq" (formula "25") (term "0,0") (ifseqformula "21"))
               (rule "applyEq" (formula "1") (term "0,0,1,0,2,0") (ifseqformula "21"))
               (rule "applyEq" (formula "25") (term "1") (ifseqformula "21"))
               (rule "applyEq" (formula "22") (term "1") (ifseqformula "21"))
               (rule "polySimp_sepPosMonomial" (formula "16") (term "0"))
               (rule "polySimp_mulComm0" (formula "16") (term "1,0"))
               (rule "polySimp_rightDist" (formula "16") (term "1,0"))
               (rule "polySimp_mulLiterals" (formula "16") (term "1,1,0"))
               (rule "mul_literals" (formula "16") (term "0,1,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "14"))
               (rule "polySimp_mulComm0" (formula "14") (term "1"))
               (rule "polySimp_rightDist" (formula "14") (term "1"))
               (rule "polySimp_mulLiterals" (formula "14") (term "1,1"))
               (rule "mul_literals" (formula "14") (term "0,1"))
               (rule "elimGcdLeq_antec" (formula "8") (inst "elimGcdRightDiv=Z(3(2(8(1(4(7(3(7(0(1(#)))))))))))") (inst "elimGcdLeftDiv=l_0") (inst "elimGcd=Z(2(#))"))
               (rule "polySimp_mulLiterals" (formula "8") (term "1,0,1,0"))
               (rule "neg_literal" (formula "8") (term "0,0,0,0,0,1,0"))
               (rule "polySimp_mulLiterals" (formula "8") (term "1,0,0,0,0,1,0"))
               (rule "leq_literals" (formula "8") (term "0,0"))
                (builtin "One Step Simplification" (formula "8"))
               (rule "mul_literals" (formula "8") (term "1,0,0,0,0,0"))
               (rule "polySimp_addLiterals" (formula "8") (term "0,0,0,0"))
               (rule "add_literals" (formula "8") (term "0,0,0,0"))
               (rule "polySimp_pullOutFactor0b" (formula "8") (term "0,0"))
               (rule "add_literals" (formula "8") (term "1,1,0,0"))
               (rule "times_zero_1" (formula "8") (term "1,0,0"))
               (rule "add_zero_right" (formula "8") (term "0,0"))
               (rule "qeq_literals" (formula "8") (term "0"))
                (builtin "One Step Simplification" (formula "8"))
               (rule "elimGcdGeq_antec" (formula "9") (inst "elimGcdRightDiv=Z(neglit(4(2(8(1(4(7(3(7(0(1(#))))))))))))") (inst "elimGcdLeftDiv=l_0") (inst "elimGcd=Z(2(#))"))
               (rule "polySimp_mulLiterals" (formula "9") (term "1,0,1,0"))
               (rule "leq_literals" (formula "9") (term "0,0"))
                (builtin "One Step Simplification" (formula "9"))
               (rule "polySimp_mulLiterals" (formula "9") (term "1,0,0,0,0,0"))
               (rule "mul_literals" (formula "9") (term "1,0,0,0,0,0"))
               (rule "polySimp_addLiterals" (formula "9") (term "0,0,0,0"))
               (rule "add_zero_right" (formula "9") (term "0,0,0,0"))
               (rule "polySimp_pullOutFactor0b" (formula "9") (term "0,0"))
               (rule "add_literals" (formula "9") (term "1,1,0,0"))
               (rule "times_zero_1" (formula "9") (term "1,0,0"))
               (rule "add_zero_right" (formula "9") (term "0,0"))
               (rule "leq_literals" (formula "9") (term "0"))
                (builtin "One Step Simplification" (formula "9"))
               (rule "inEqSimp_exactShadow3" (formula "14") (ifseqformula "6"))
               (rule "polySimp_rightDist" (formula "14") (term "0,0"))
               (rule "mul_literals" (formula "14") (term "0,0,0"))
               (rule "polySimp_mulLiterals" (formula "14") (term "1,0,0"))
               (rule "polySimp_addComm1" (formula "14") (term "0"))
               (rule "add_literals" (formula "14") (term "0,0"))
               (rule "inEqSimp_sepNegMonomial1" (formula "14"))
               (rule "polySimp_mulLiterals" (formula "14") (term "0"))
               (rule "inEqSimp_subsumption4" (formula "14") (ifseqformula "8"))
               (rule "mul_literals" (formula "14") (term "0,1,0"))
               (rule "greater_literals" (formula "14") (term "0,0"))
                (builtin "One Step Simplification" (formula "14"))
               (rule "leq_literals" (formula "14") (term "0"))
                (builtin "One Step Simplification" (formula "14"))
               (rule "true_left" (formula "14"))
               (rule "Class_invariant_axiom_for_de_wiesler_Tree" (formula "23") (inst "i=i") (inst "i_0=i_0"))
                (builtin "One Step Simplification" (formula "23"))
               (rule "expand_inInt" (formula "23") (term "1,0,0,1,0"))
               (rule "expand_inInt" (formula "23") (term "1,0,0,1"))
               (rule "replace_int_MAX" (formula "23") (term "1,0,1,0,0,1,0"))
               (rule "replace_int_MIN" (formula "23") (term "0,1,1,0,0,1,0"))
               (rule "replace_int_MAX" (formula "23") (term "1,0,1,0,0,1"))
               (rule "replace_int_MIN" (formula "23") (term "0,1,1,0,0,1"))
               (rule "andLeft" (formula "23"))
               (rule "andLeft" (formula "23"))
               (rule "andLeft" (formula "23"))
               (rule "andLeft" (formula "23"))
               (rule "andLeft" (formula "23"))
               (rule "andLeft" (formula "24"))
               (rule "andLeft" (formula "23"))
               (rule "andLeft" (formula "23"))
               (rule "andLeft" (formula "24"))
               (rule "andLeft" (formula "23"))
               (rule "notLeft" (formula "24"))
               (rule "notLeft" (formula "23"))
               (rule "translateJavaSubInt" (formula "31") (term "0,2,1,1,0"))
               (rule "translateJavaSubInt" (formula "29") (term "3,0"))
               (rule "translateJavaShiftLeftInt" (formula "25") (term "1"))
               (rule "eqSymm" (formula "31") (term "1,0"))
               (rule "polySimp_elimSub" (formula "29") (term "3,0"))
               (rule "mul_literals" (formula "29") (term "1,3,0"))
               (rule "polySimp_elimSub" (formula "31") (term "0,2,0,1,0"))
               (rule "mul_literals" (formula "31") (term "1,0,2,0,1,0"))
               (rule "polySimp_addComm0" (formula "29") (term "3,0"))
               (rule "polySimp_addComm0" (formula "31") (term "0,2,0,1,0"))
               (rule "inEqSimp_ltToLeq" (formula "31") (term "1,0,0,0"))
               (rule "polySimp_mulComm0" (formula "31") (term "1,0,0,1,0,0,0"))
               (rule "inEqSimp_ltToLeq" (formula "30") (term "1,0,0,0"))
               (rule "polySimp_mulComm0" (formula "30") (term "1,0,0,1,0,0,0"))
               (rule "inEqSimp_ltToLeq" (formula "30") (term "1,1,0"))
               (rule "polySimp_mulComm0" (formula "30") (term "1,0,0,1,1,0"))
               (rule "inEqSimp_commuteLeq" (formula "31") (term "0,0,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "31") (term "1,1,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "30") (term "0,1,0"))
               (rule "inEqSimp_commuteLeq" (formula "30") (term "0,0,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "30") (term "1,1,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "28"))
               (rule "inEqSimp_commuteLeq" (formula "27"))
               (rule "inEqSimp_commuteLeq" (formula "26"))
               (rule "inEqSimp_commuteLeq" (formula "23"))
               (rule "applyEq" (formula "27") (term "1") (ifseqformula "25"))
               (rule "applyEq" (formula "29") (term "1,3,0") (ifseqformula "25"))
               (rule "applyEq" (formula "28") (term "1") (ifseqformula "25"))
               (rule "applyEq" (formula "26") (term "0") (ifseqformula "25"))
               (rule "applyEq" (formula "17") (term "0,0") (ifseqformula "25"))
               (rule "applyEq" (formula "15") (term "0") (ifseqformula "25"))
               (rule "applyEq" (formula "30") (term "0,1,0,0,1,1,0") (ifseqformula "25"))
               (rule "applyEq" (formula "30") (term "0,1,0,0,1,0,0,0") (ifseqformula "25"))
               (rule "applyEq" (formula "31") (term "0,1,0,0,1,0,0,0") (ifseqformula "25"))
               (rule "inEqSimp_sepPosMonomial0" (formula "30") (term "1,1,0"))
               (rule "polySimp_mulComm0" (formula "30") (term "1,1,1,0"))
               (rule "polySimp_rightDist" (formula "30") (term "1,1,1,0"))
               (rule "polySimp_mulLiterals" (formula "30") (term "1,1,1,1,0"))
               (rule "mul_literals" (formula "30") (term "0,1,1,1,0"))
               (rule "polySimp_elimOne" (formula "30") (term "1,1,1,1,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "30") (term "1,0,0,0"))
               (rule "polySimp_mulComm0" (formula "30") (term "1,1,0,0,0"))
               (rule "polySimp_rightDist" (formula "30") (term "1,1,0,0,0"))
               (rule "mul_literals" (formula "30") (term "0,1,1,0,0,0"))
               (rule "polySimp_mulLiterals" (formula "30") (term "1,1,1,0,0,0"))
               (rule "polySimp_elimOne" (formula "30") (term "1,1,1,0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "31") (term "1,0,0,0"))
               (rule "polySimp_mulComm0" (formula "31") (term "1,1,0,0,0"))
               (rule "polySimp_rightDist" (formula "31") (term "1,1,0,0,0"))
               (rule "polySimp_mulLiterals" (formula "31") (term "1,1,1,0,0,0"))
               (rule "mul_literals" (formula "31") (term "0,1,1,0,0,0"))
               (rule "polySimp_elimOne" (formula "31") (term "1,1,1,0,0,0"))
               (rule "javaShiftLeftIntDef" (formula "25") (term "1"))
               (rule "mod_axiom" (formula "25") (term "1,0,1"))
               (rule "polySimp_mulLiterals" (formula "25") (term "1,1,0,1"))
               (rule "javaShiftLeftIntDef" (formula "27") (term "1"))
               (rule "mod_axiom" (formula "27") (term "1,0,1"))
               (rule "polySimp_mulLiterals" (formula "27") (term "1,1,0,1"))
               (rule "javaShiftLeftIntDef" (formula "29") (term "1,3,0"))
               (rule "mod_axiom" (formula "29") (term "1,0,1,3,0"))
               (rule "polySimp_mulLiterals" (formula "29") (term "1,1,0,1,3,0"))
               (rule "javaShiftLeftIntDef" (formula "28") (term "1"))
               (rule "mod_axiom" (formula "28") (term "1,0,1"))
               (rule "polySimp_mulLiterals" (formula "28") (term "1,1,0,1"))
               (rule "javaShiftLeftIntDef" (formula "26") (term "0"))
               (rule "mod_axiom" (formula "26") (term "1,0,0"))
               (rule "polySimp_mulLiterals" (formula "26") (term "1,1,0,0"))
               (rule "javaShiftLeftIntDef" (formula "17") (term "0,0"))
               (rule "mod_axiom" (formula "17") (term "1,0,0,0"))
               (rule "polySimp_mulLiterals" (formula "17") (term "1,1,0,0,0"))
               (rule "javaShiftLeftIntDef" (formula "15") (term "0"))
               (rule "mod_axiom" (formula "15") (term "1,0,0"))
               (rule "polySimp_mulLiterals" (formula "15") (term "1,1,0,0"))
               (rule "javaShiftLeftIntDef" (formula "30") (term "1,1,1,1,0"))
               (rule "mod_axiom" (formula "30") (term "1,0,1,1,1,1,0"))
               (rule "polySimp_mulLiterals" (formula "30") (term "1,1,0,1,1,1,1,0"))
               (rule "javaShiftLeftIntDef" (formula "30") (term "1,1,1,0,0,0"))
               (rule "mod_axiom" (formula "30") (term "1,0,1,1,1,0,0,0"))
               (rule "polySimp_mulLiterals" (formula "30") (term "1,1,0,1,1,1,0,0,0"))
               (rule "javaShiftLeftIntDef" (formula "31") (term "1,1,1,0,0,0"))
               (rule "mod_axiom" (formula "31") (term "1,0,1,1,1,0,0,0"))
               (rule "polySimp_mulLiterals" (formula "31") (term "1,1,0,1,1,1,0,0,0"))
               (rule "shiftLeftDef" (formula "25") (term "0,1"))
               (rule "eqSymm" (formula "25"))
               (rule "polySimp_elimNeg" (formula "25") (term "1,1,0,0"))
               (rule "polySimp_mulComm0" (formula "25") (term "1,1,0,0"))
               (rule "polySimp_rightDist" (formula "25") (term "1,1,0,0"))
               (rule "polySimp_mulLiterals" (formula "25") (term "1,1,1,0,0"))
               (rule "polySimp_mulComm0" (formula "25") (term "0,1,1,0,0"))
               (rule "shiftLeftPositiveShiftDef" (formula "25") (term "2,0,0"))
               (rule "polySimp_elimOneLeft0" (formula "25") (term "2,0,0"))
               (rule "shiftRightPositiveShiftDef" (formula "25") (term "1,0,0"))
               (rule "inEqSimp_ltToLeq" (formula "25") (term "0,0,0"))
               (rule "times_zero_1" (formula "25") (term "1,0,0,0,0,0"))
               (rule "add_zero_right" (formula "25") (term "0,0,0,0,0"))
               (rule "polySimp_addAssoc" (formula "25") (term "0,0,0,0"))
               (rule "inEqSimp_sepNegMonomial0" (formula "25") (term "0,0,0"))
               (rule "polySimp_mulLiterals" (formula "25") (term "0,0,0,0"))
               (rule "shiftLeftDef" (formula "27") (term "0,1"))
               (rule "polySimp_elimNeg" (formula "27") (term "1,1,0,1"))
               (rule "polySimp_mulComm0" (formula "27") (term "1,1,0,1"))
               (rule "polySimp_rightDist" (formula "27") (term "1,1,0,1"))
               (rule "polySimp_mulLiterals" (formula "27") (term "1,1,1,0,1"))
               (rule "polySimp_mulComm0" (formula "27") (term "0,1,1,0,1"))
               (rule "shiftLeftPositiveShiftDef" (formula "27") (term "2,0,1"))
               (rule "polySimp_elimOneLeft0" (formula "27") (term "2,0,1"))
               (rule "shiftRightPositiveShiftDef" (formula "27") (term "1,0,1"))
               (rule "inEqSimp_ltToLeq" (formula "27") (term "0,0,1"))
               (rule "times_zero_1" (formula "27") (term "1,0,0,0,0,1"))
               (rule "add_zero_right" (formula "27") (term "0,0,0,0,1"))
               (rule "polySimp_addAssoc" (formula "27") (term "0,0,0,1"))
               (rule "inEqSimp_commuteGeq" (formula "27"))
               (rule "inEqSimp_sepNegMonomial0" (formula "27") (term "0,0,0"))
               (rule "polySimp_mulLiterals" (formula "27") (term "0,0,0,0"))
               (rule "applyEq" (formula "27") (term "0") (ifseqformula "25"))
               (rule "inEqSimp_commuteLeq" (formula "27"))
               (rule "shiftLeftDef" (formula "29") (term "0,1,3,0"))
               (rule "polySimp_elimNeg" (formula "29") (term "1,1,0,1,3,0"))
               (rule "polySimp_mulComm0" (formula "29") (term "1,1,0,1,3,0"))
               (rule "polySimp_rightDist" (formula "29") (term "1,1,0,1,3,0"))
               (rule "polySimp_mulLiterals" (formula "29") (term "1,1,1,0,1,3,0"))
               (rule "polySimp_mulComm0" (formula "29") (term "0,1,1,0,1,3,0"))
               (rule "shiftLeftPositiveShiftDef" (formula "29") (term "2,0,1,3,0"))
               (rule "polySimp_elimOneLeft0" (formula "29") (term "2,0,1,3,0"))
               (rule "shiftRightPositiveShiftDef" (formula "29") (term "1,0,1,3,0"))
               (rule "inEqSimp_ltToLeq" (formula "29") (term "0,0,1,3,0"))
               (rule "times_zero_1" (formula "29") (term "1,0,0,0,0,1,3,0"))
               (rule "add_zero_right" (formula "29") (term "0,0,0,0,1,3,0"))
               (rule "polySimp_addAssoc" (formula "29") (term "0,0,0,1,3,0"))
               (rule "inEqSimp_sepNegMonomial0" (formula "29") (term "0,0,1,3,0"))
               (rule "polySimp_mulLiterals" (formula "29") (term "0,0,0,1,3,0"))
               (rule "applyEq" (formula "29") (term "1,3,0") (ifseqformula "25"))
               (rule "shiftLeftDef" (formula "28") (term "0,1"))
               (rule "polySimp_elimNeg" (formula "28") (term "1,1,0,1"))
               (rule "polySimp_mulComm0" (formula "28") (term "1,1,0,1"))
               (rule "polySimp_rightDist" (formula "28") (term "1,1,0,1"))
               (rule "polySimp_mulLiterals" (formula "28") (term "1,1,1,0,1"))
               (rule "polySimp_mulComm0" (formula "28") (term "0,1,1,0,1"))
               (rule "shiftLeftPositiveShiftDef" (formula "28") (term "2,0,1"))
               (rule "polySimp_elimOneLeft0" (formula "28") (term "2,0,1"))
               (rule "shiftRightPositiveShiftDef" (formula "28") (term "1,0,1"))
               (rule "inEqSimp_ltToLeq" (formula "28") (term "0,0,1"))
               (rule "times_zero_1" (formula "28") (term "1,0,0,0,0,1"))
               (rule "add_zero_right" (formula "28") (term "0,0,0,0,1"))
               (rule "polySimp_addAssoc" (formula "28") (term "0,0,0,1"))
               (rule "inEqSimp_commuteGeq" (formula "28"))
               (rule "inEqSimp_sepNegMonomial0" (formula "28") (term "0,0,0"))
               (rule "polySimp_mulLiterals" (formula "28") (term "0,0,0,0"))
               (rule "applyEq" (formula "28") (term "0") (ifseqformula "25"))
               (rule "inEqSimp_commuteLeq" (formula "28"))
               (rule "shiftLeftDef" (formula "26") (term "0,0"))
               (rule "polySimp_elimNeg" (formula "26") (term "1,1,0,0"))
               (rule "polySimp_mulComm0" (formula "26") (term "1,1,0,0"))
               (rule "polySimp_rightDist" (formula "26") (term "1,1,0,0"))
               (rule "polySimp_mulLiterals" (formula "26") (term "1,1,1,0,0"))
               (rule "polySimp_mulComm0" (formula "26") (term "0,1,1,0,0"))
               (rule "shiftLeftPositiveShiftDef" (formula "26") (term "2,0,0"))
               (rule "polySimp_elimOneLeft0" (formula "26") (term "2,0,0"))
               (rule "shiftRightPositiveShiftDef" (formula "26") (term "1,0,0"))
               (rule "inEqSimp_ltToLeq" (formula "26") (term "0,0,0"))
               (rule "times_zero_1" (formula "26") (term "1,0,0,0,0,0"))
               (rule "add_zero_right" (formula "26") (term "0,0,0,0,0"))
               (rule "polySimp_addAssoc" (formula "26") (term "0,0,0,0"))
               (rule "inEqSimp_sepNegMonomial0" (formula "26") (term "0,0,0"))
               (rule "polySimp_mulLiterals" (formula "26") (term "0,0,0,0"))
               (rule "applyEq" (formula "26") (term "0") (ifseqformula "25"))
               (rule "shiftLeftDef" (formula "17") (term "0,0,0"))
               (rule "polySimp_elimNeg" (formula "17") (term "1,1,0,0,0"))
               (rule "polySimp_mulComm0" (formula "17") (term "1,1,0,0,0"))
               (rule "polySimp_rightDist" (formula "17") (term "1,1,0,0,0"))
               (rule "polySimp_mulLiterals" (formula "17") (term "1,1,1,0,0,0"))
               (rule "polySimp_mulComm0" (formula "17") (term "0,1,1,0,0,0"))
               (rule "shiftLeftPositiveShiftDef" (formula "17") (term "2,0,0,0"))
               (rule "polySimp_elimOneLeft0" (formula "17") (term "2,0,0,0"))
               (rule "shiftRightPositiveShiftDef" (formula "17") (term "1,0,0,0"))
               (rule "inEqSimp_ltToLeq" (formula "17") (term "0,0,0,0"))
               (rule "times_zero_1" (formula "17") (term "1,0,0,0,0,0,0"))
               (rule "add_zero_right" (formula "17") (term "0,0,0,0,0,0"))
               (rule "polySimp_addAssoc" (formula "17") (term "0,0,0,0,0"))
               (rule "inEqSimp_sepNegMonomial0" (formula "17") (term "0,0,0,0"))
               (rule "polySimp_mulLiterals" (formula "17") (term "0,0,0,0,0"))
               (rule "applyEq" (formula "17") (term "0,0") (ifseqformula "25"))
               (rule "shiftLeftDef" (formula "15") (term "0,0"))
               (rule "polySimp_elimNeg" (formula "15") (term "1,1,0,0"))
               (rule "polySimp_mulComm0" (formula "15") (term "1,1,0,0"))
               (rule "polySimp_rightDist" (formula "15") (term "1,1,0,0"))
               (rule "polySimp_mulLiterals" (formula "15") (term "1,1,1,0,0"))
               (rule "polySimp_mulComm0" (formula "15") (term "0,1,1,0,0"))
               (rule "shiftLeftPositiveShiftDef" (formula "15") (term "2,0,0"))
               (rule "polySimp_elimOneLeft0" (formula "15") (term "2,0,0"))
               (rule "shiftRightPositiveShiftDef" (formula "15") (term "1,0,0"))
               (rule "inEqSimp_ltToLeq" (formula "15") (term "0,0,0"))
               (rule "times_zero_1" (formula "15") (term "1,0,0,0,0,0"))
               (rule "add_zero_right" (formula "15") (term "0,0,0,0,0"))
               (rule "polySimp_addAssoc" (formula "15") (term "0,0,0,0"))
               (rule "inEqSimp_sepNegMonomial0" (formula "15") (term "0,0,0"))
               (rule "polySimp_mulLiterals" (formula "15") (term "0,0,0,0"))
               (rule "applyEq" (formula "15") (term "0") (ifseqformula "25"))
               (rule "shiftLeftDef" (formula "30") (term "0,1,1,1,1,0"))
               (rule "polySimp_elimNeg" (formula "30") (term "1,1,0,1,1,1,1,0"))
               (rule "polySimp_mulComm0" (formula "30") (term "1,1,0,1,1,1,1,0"))
               (rule "polySimp_rightDist" (formula "30") (term "1,1,0,1,1,1,1,0"))
               (rule "polySimp_mulLiterals" (formula "30") (term "1,1,1,0,1,1,1,1,0"))
               (rule "polySimp_mulComm0" (formula "30") (term "0,1,1,0,1,1,1,1,0"))
               (rule "shiftLeftPositiveShiftDef" (formula "30") (term "2,0,1,1,1,1,0"))
               (rule "polySimp_elimOneLeft0" (formula "30") (term "2,0,1,1,1,1,0"))
               (rule "shiftRightPositiveShiftDef" (formula "30") (term "1,0,1,1,1,1,0"))
               (rule "inEqSimp_ltToLeq" (formula "30") (term "0,0,1,1,1,1,0"))
               (rule "times_zero_1" (formula "30") (term "1,0,0,0,0,1,1,1,1,0"))
               (rule "add_zero_right" (formula "30") (term "0,0,0,0,1,1,1,1,0"))
               (rule "polySimp_addAssoc" (formula "30") (term "0,0,0,1,1,1,1,0"))
               (rule "inEqSimp_sepNegMonomial0" (formula "30") (term "0,0,1,1,1,1,0"))
               (rule "polySimp_mulLiterals" (formula "30") (term "0,0,0,1,1,1,1,0"))
               (rule "applyEq" (formula "30") (term "1,1,1,1,0") (ifseqformula "25"))
               (rule "shiftLeftDef" (formula "30") (term "0,1,1,1,0,0,0"))
               (rule "polySimp_elimNeg" (formula "30") (term "1,1,0,1,1,1,0,0,0"))
               (rule "polySimp_mulComm0" (formula "30") (term "1,1,0,1,1,1,0,0,0"))
               (rule "polySimp_rightDist" (formula "30") (term "1,1,0,1,1,1,0,0,0"))
               (rule "polySimp_mulLiterals" (formula "30") (term "1,1,1,0,1,1,1,0,0,0"))
               (rule "polySimp_mulComm0" (formula "30") (term "0,1,1,0,1,1,1,0,0,0"))
               (rule "shiftLeftPositiveShiftDef" (formula "30") (term "2,0,1,1,1,0,0,0"))
               (rule "polySimp_elimOneLeft0" (formula "30") (term "2,0,1,1,1,0,0,0"))
               (rule "shiftRightPositiveShiftDef" (formula "30") (term "1,0,1,1,1,0,0,0"))
               (rule "inEqSimp_ltToLeq" (formula "30") (term "0,0,1,1,1,0,0,0"))
               (rule "times_zero_1" (formula "30") (term "1,0,0,0,0,1,1,1,0,0,0"))
               (rule "add_zero_right" (formula "30") (term "0,0,0,0,1,1,1,0,0,0"))
               (rule "polySimp_addAssoc" (formula "30") (term "0,0,0,1,1,1,0,0,0"))
               (rule "inEqSimp_sepNegMonomial0" (formula "30") (term "0,0,1,1,1,0,0,0"))
               (rule "polySimp_mulLiterals" (formula "30") (term "0,0,0,1,1,1,0,0,0"))
               (rule "applyEq" (formula "30") (term "1,1,1,0,0,0") (ifseqformula "25"))
               (rule "shiftLeftDef" (formula "31") (term "0,1,1,1,0,0,0"))
               (rule "polySimp_elimNeg" (formula "31") (term "1,1,0,1,1,1,0,0,0"))
               (rule "polySimp_mulComm0" (formula "31") (term "1,1,0,1,1,1,0,0,0"))
               (rule "polySimp_rightDist" (formula "31") (term "1,1,0,1,1,1,0,0,0"))
               (rule "polySimp_mulLiterals" (formula "31") (term "1,1,1,0,1,1,1,0,0,0"))
               (rule "polySimp_mulComm0" (formula "31") (term "0,1,1,0,1,1,1,0,0,0"))
               (rule "shiftLeftPositiveShiftDef" (formula "31") (term "2,0,1,1,1,0,0,0"))
               (rule "polySimp_elimOneLeft0" (formula "31") (term "2,0,1,1,1,0,0,0"))
               (rule "shiftRightPositiveShiftDef" (formula "31") (term "1,0,1,1,1,0,0,0"))
               (rule "inEqSimp_ltToLeq" (formula "31") (term "0,0,1,1,1,0,0,0"))
               (rule "times_zero_1" (formula "31") (term "1,0,0,0,0,1,1,1,0,0,0"))
               (rule "add_zero_right" (formula "31") (term "0,0,0,0,1,1,1,0,0,0"))
               (rule "polySimp_addAssoc" (formula "31") (term "0,0,0,1,1,1,0,0,0"))
               (rule "inEqSimp_sepNegMonomial0" (formula "31") (term "0,0,1,1,1,0,0,0"))
               (rule "polySimp_mulLiterals" (formula "31") (term "0,0,0,1,1,1,0,0,0"))
               (rule "applyEq" (formula "31") (term "1,1,1,0,0,0") (ifseqformula "25"))
               (rule "inEqSimp_exactShadow3" (formula "19") (ifseqformula "24"))
               (rule "polySimp_rightDist" (formula "19") (term "0,0"))
               (rule "mul_literals" (formula "19") (term "0,0,0"))
               (rule "polySimp_addComm1" (formula "19") (term "0"))
               (rule "add_literals" (formula "19") (term "0,0"))
               (rule "inEqSimp_sepNegMonomial1" (formula "19"))
               (rule "polySimp_mulLiterals" (formula "19") (term "0"))
               (rule "polySimp_elimOne" (formula "19") (term "0"))
               (rule "inEqSimp_subsumption0" (formula "12") (ifseqformula "19"))
               (rule "leq_literals" (formula "12") (term "0"))
                (builtin "One Step Simplification" (formula "12"))
               (rule "true_left" (formula "12"))
               (rule "Free_class_invariant_axiom_for_de_wiesler_Tree" (formula "32"))
               (rule "true_left" (formula "32"))
               (rule "expand_moduloInteger" (formula "25") (term "0"))
               (rule "replace_int_RANGE" (formula "25") (term "1,1,0"))
               (rule "replace_int_HALFRANGE" (formula "25") (term "0,0,1,0"))
               (rule "replace_int_MIN" (formula "25") (term "0,0"))
               (rule "polySimp_homoEq" (formula "25"))
               (rule "polySimp_mulComm0" (formula "25") (term "1,0"))
               (rule "polySimp_rightDist" (formula "25") (term "1,0"))
               (rule "mul_literals" (formula "25") (term "0,1,0"))
               (rule "polySimp_addAssoc" (formula "25") (term "0"))
               (rule "polySimp_addComm0" (formula "25") (term "0,0"))
               (rule "polySimp_sepNegMonomial" (formula "25"))
               (rule "polySimp_mulLiterals" (formula "25") (term "0"))
               (rule "polySimp_elimOne" (formula "25") (term "0"))
               (rule "nnf_imp2or" (formula "30") (term "0"))
               (rule "nnf_imp2or" (formula "31") (term "0"))
               (rule "nnf_notAnd" (formula "30") (term "0,0"))
               (rule "nnf_notAnd" (formula "31") (term "0,0"))
               (rule "nnf_notAnd" (formula "30") (term "0,0,0"))
               (rule "inEqSimp_notLeq" (formula "30") (term "1,0,0,0"))
               (rule "polySimp_rightDist" (formula "30") (term "1,0,0,1,0,0,0"))
               (rule "mul_literals" (formula "30") (term "0,1,0,0,1,0,0,0"))
               (rule "polySimp_addAssoc" (formula "30") (term "0,0,1,0,0,0"))
               (rule "add_literals" (formula "30") (term "0,0,0,1,0,0,0"))
               (rule "add_zero_left" (formula "30") (term "0,0,1,0,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "30") (term "1,0,0,0"))
               (rule "polySimp_mulLiterals" (formula "30") (term "1,1,0,0,0"))
               (rule "polySimp_elimOne" (formula "30") (term "1,1,0,0,0"))
               (rule "inEqSimp_notGeq" (formula "30") (term "0,0,0,0"))
               (rule "mul_literals" (formula "30") (term "1,0,0,0,0,0,0"))
               (rule "add_literals" (formula "30") (term "0,0,0,0,0,0"))
               (rule "add_zero_left" (formula "30") (term "0,0,0,0,0"))
               (rule "nnf_notAnd" (formula "30") (term "1,0,0"))
               (rule "inEqSimp_notLeq" (formula "30") (term "0,1,0,0"))
               (rule "mul_literals" (formula "30") (term "1,0,0,0,1,0,0"))
               (rule "add_literals" (formula "30") (term "0,0,0,1,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "30") (term "0,1,0,0"))
               (rule "mul_literals" (formula "30") (term "1,0,1,0,0"))
               (rule "inEqSimp_notGeq" (formula "30") (term "1,1,0,0"))
               (rule "mul_literals" (formula "30") (term "1,0,0,1,1,0,0"))
               (rule "add_literals" (formula "30") (term "0,0,1,1,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "30") (term "1,1,0,0"))
               (rule "mul_literals" (formula "30") (term "1,1,1,0,0"))
               (rule "nnf_notAnd" (formula "31") (term "0,0,0"))
               (rule "inEqSimp_notLeq" (formula "31") (term "1,0,0,0"))
               (rule "polySimp_rightDist" (formula "31") (term "1,0,0,1,0,0,0"))
               (rule "mul_literals" (formula "31") (term "0,1,0,0,1,0,0,0"))
               (rule "polySimp_addAssoc" (formula "31") (term "0,0,1,0,0,0"))
               (rule "add_literals" (formula "31") (term "0,0,0,1,0,0,0"))
               (rule "add_zero_left" (formula "31") (term "0,0,1,0,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "31") (term "1,0,0,0"))
               (rule "polySimp_mulLiterals" (formula "31") (term "1,1,0,0,0"))
               (rule "polySimp_elimOne" (formula "31") (term "1,1,0,0,0"))
               (rule "inEqSimp_notGeq" (formula "31") (term "0,0,0,0"))
               (rule "mul_literals" (formula "31") (term "1,0,0,0,0,0,0"))
               (rule "add_literals" (formula "31") (term "0,0,0,0,0,0"))
               (rule "add_zero_left" (formula "31") (term "0,0,0,0,0"))
               (rule "nnf_notAnd" (formula "31") (term "1,0,0"))
               (rule "inEqSimp_notLeq" (formula "31") (term "0,1,0,0"))
               (rule "mul_literals" (formula "31") (term "1,0,0,0,1,0,0"))
               (rule "add_literals" (formula "31") (term "0,0,0,1,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "31") (term "0,1,0,0"))
               (rule "mul_literals" (formula "31") (term "1,0,1,0,0"))
               (rule "inEqSimp_notGeq" (formula "31") (term "1,1,0,0"))
               (rule "mul_literals" (formula "31") (term "1,0,0,1,1,0,0"))
               (rule "add_literals" (formula "31") (term "0,0,1,1,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "31") (term "1,1,0,0"))
               (rule "mul_literals" (formula "31") (term "1,1,1,0,0"))
               (rule "Contract_axiom_for_isSortedSliceTransitive_in_Functions" (formula "29") (term "0"))
               (rule "replace_known_left" (formula "29") (term "1,0") (ifseqformula "3"))
                (builtin "One Step Simplification" (formula "29") (ifInst ""  (formula "33")) (ifInst ""  (formula "30")))
               (rule "Definition_axiom_for_isSortedSliceTransitive_in_de_wiesler_Functions" (formula "30") (term "0") (inst "i=i") (inst "j=j"))
                (builtin "One Step Simplification" (formula "30"))
               (rule "expand_inInt" (formula "30") (term "1,0,0,1,0"))
               (rule "expand_inInt" (formula "30") (term "1,0,0"))
               (rule "replace_int_MAX" (formula "30") (term "1,0,1,0,0,1,0"))
               (rule "replace_int_MIN" (formula "30") (term "0,1,1,0,0,1,0"))
               (rule "replace_int_MIN" (formula "30") (term "0,1,1,0,0"))
               (rule "replace_int_MAX" (formula "30") (term "1,0,1,0,0"))
               (rule "inEqSimp_ltToLeq" (formula "30") (term "1,0,0,0,1,0"))
               (rule "polySimp_rightDist" (formula "30") (term "1,0,0,1,0,0,0,1,0"))
               (rule "mul_literals" (formula "30") (term "0,1,0,0,1,0,0,0,1,0"))
               (rule "polySimp_addAssoc" (formula "30") (term "0,0,1,0,0,0,1,0"))
               (rule "add_literals" (formula "30") (term "0,0,0,1,0,0,0,1,0"))
               (rule "inEqSimp_ltToLeq" (formula "30") (term "1,0,0,0"))
               (rule "polySimp_rightDist" (formula "30") (term "1,0,0,1,0,0,0"))
               (rule "mul_literals" (formula "30") (term "0,1,0,0,1,0,0,0"))
               (rule "polySimp_addAssoc" (formula "30") (term "0,0,1,0,0,0"))
               (rule "add_literals" (formula "30") (term "0,0,0,1,0,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "30") (term "0,0,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "30") (term "1,0,1,0"))
               (rule "inEqSimp_commuteLeq" (formula "30") (term "0,0,0,0,1,0"))
               (rule "inEqSimp_commuteLeq" (formula "30") (term "1,1,0,0,1,0"))
               (rule "inEqSimp_commuteLeq" (formula "30") (term "1,1,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "30") (term "1,0,0,0,1,0"))
               (rule "polySimp_mulComm0" (formula "30") (term "1,1,0,0,0,1,0"))
               (rule "polySimp_rightDist" (formula "30") (term "1,1,0,0,0,1,0"))
               (rule "mul_literals" (formula "30") (term "0,1,1,0,0,0,1,0"))
               (rule "polySimp_mulLiterals" (formula "30") (term "1,1,1,0,0,0,1,0"))
               (rule "polySimp_elimOne" (formula "30") (term "1,1,1,0,0,0,1,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "30") (term "1,0,0,0"))
               (rule "polySimp_mulComm0" (formula "30") (term "1,1,0,0,0"))
               (rule "polySimp_rightDist" (formula "30") (term "1,1,0,0,0"))
               (rule "mul_literals" (formula "30") (term "0,1,1,0,0,0"))
               (rule "polySimp_mulLiterals" (formula "30") (term "1,1,1,0,0,0"))
               (rule "polySimp_elimOne" (formula "30") (term "1,1,1,0,0,0"))
               (rule "nnf_imp2or" (formula "30") (term "0"))
               (rule "nnf_notAnd" (formula "30") (term "0,0"))
               (rule "nnf_imp2or" (formula "30") (term "0,1,0"))
               (rule "nnf_notAnd" (formula "30") (term "0,0,0"))
               (rule "inEqSimp_notLeq" (formula "30") (term "1,0,0,0"))
               (rule "polySimp_rightDist" (formula "30") (term "1,0,0,1,0,0,0"))
               (rule "mul_literals" (formula "30") (term "0,1,0,0,1,0,0,0"))
               (rule "polySimp_addAssoc" (formula "30") (term "0,0,1,0,0,0"))
               (rule "add_literals" (formula "30") (term "0,0,0,1,0,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "30") (term "1,0,0,0"))
               (rule "polySimp_mulComm0" (formula "30") (term "1,1,0,0,0"))
               (rule "polySimp_rightDist" (formula "30") (term "1,1,0,0,0"))
               (rule "polySimp_mulLiterals" (formula "30") (term "1,1,1,0,0,0"))
               (rule "mul_literals" (formula "30") (term "0,1,1,0,0,0"))
               (rule "polySimp_elimOne" (formula "30") (term "1,1,1,0,0,0"))
               (rule "inEqSimp_notGeq" (formula "30") (term "0,0,0,0"))
               (rule "times_zero_1" (formula "30") (term "1,0,0,0,0,0,0"))
               (rule "add_zero_right" (formula "30") (term "0,0,0,0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "30") (term "0,0,0,0"))
               (rule "mul_literals" (formula "30") (term "1,0,0,0,0"))
               (rule "nnf_notAnd" (formula "30") (term "1,0,0"))
               (rule "inEqSimp_notGeq" (formula "30") (term "1,1,0,0"))
               (rule "mul_literals" (formula "30") (term "1,0,0,1,1,0,0"))
               (rule "add_literals" (formula "30") (term "0,0,1,1,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "30") (term "1,1,0,0"))
               (rule "mul_literals" (formula "30") (term "1,1,1,0,0"))
               (rule "inEqSimp_notLeq" (formula "30") (term "0,1,0,0"))
               (rule "mul_literals" (formula "30") (term "1,0,0,0,1,0,0"))
               (rule "add_literals" (formula "30") (term "0,0,0,1,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "30") (term "0,1,0,0"))
               (rule "mul_literals" (formula "30") (term "1,0,1,0,0"))
               (rule "nnf_notAnd" (formula "30") (term "0,0,1,0"))
               (rule "jdiv_axiom" (formula "2") (term "0,1,0,2,0"))
               (rule "polySimp_mulLiterals" (formula "2") (term "0,0,2,1"))
               (rule "eqSymm" (formula "2"))
               (rule "polyDiv_pullOut" (formula "2") (term "0,2,0") (inst "polyDivCoeff=mul(l_0, Z(neglit(1(#))))"))
               (rule "equal_literals" (formula "2") (term "0,0,2,0"))
                (builtin "One Step Simplification" (formula "2"))
               (rule "polySimp_mulLiterals" (formula "2") (term "1,0,0,0,2,0"))
               (rule "polySimp_mulLiterals" (formula "2") (term "1,0,0,0,2,0"))
               (rule "polySimp_pullOutFactor0" (formula "2") (term "0,0,0,2,0"))
               (rule "add_literals" (formula "2") (term "1,0,0,0,2,0"))
               (rule "times_zero_1" (formula "2") (term "0,0,0,2,0"))
               (rule "div_literals" (formula "2") (term "0,0,2,0"))
               (rule "add_zero_left" (formula "2") (term "0,2,0"))
               (rule "polySimp_mulLiterals" (formula "2") (term "2,0"))
               (rule "polySimp_elimOne" (formula "2") (term "2,0"))
               (rule "elimGcdGeq" (formula "2") (term "0,0") (inst "elimGcdRightDiv=Z(0(#))") (inst "elimGcdLeftDiv=l_0") (inst "elimGcd=Z(2(#))"))
               (rule "polySimp_mulLiterals" (formula "2") (term "1,0,0,0,0,0"))
               (rule "add_zero_right" (formula "2") (term "0,0,0,0,0,0,0"))
               (rule "polySimp_mulLiterals" (formula "2") (term "1,0,1,0,0,0"))
               (rule "add_zero_right" (formula "2") (term "0,0,0,1,0,0,0"))
               (rule "polySimp_mulLiterals" (formula "2") (term "1,0,0,0,0,0,0,0"))
               (rule "sub_literals" (formula "2") (term "0,0,0,0,0,0,0,0"))
               (rule "times_zero_1" (formula "2") (term "0,0,0,1,0,0,0"))
               (rule "mul_literals" (formula "2") (term "1,0,0,0,0,0,0,0"))
               (rule "add_zero_left" (formula "2") (term "0,0,1,0,0,0"))
               (rule "add_zero_right" (formula "2") (term "0,0,0,0,0,0,0"))
               (rule "polySimp_pullOutFactor0" (formula "2") (term "0,1,0,0,0"))
               (rule "add_literals" (formula "2") (term "1,0,1,0,0,0"))
               (rule "times_zero_1" (formula "2") (term "0,1,0,0,0"))
               (rule "leq_literals" (formula "2") (term "1,0,0,0"))
                (builtin "One Step Simplification" (formula "2"))
               (rule "polySimp_pullOutFactor0b" (formula "2") (term "0,0,0,0"))
               (rule "add_literals" (formula "2") (term "1,1,0,0,0,0"))
               (rule "times_zero_1" (formula "2") (term "1,0,0,0,0"))
               (rule "add_zero_right" (formula "2") (term "0,0,0,0"))
               (rule "qeq_literals" (formula "2") (term "0,0,0"))
                (builtin "One Step Simplification" (formula "2"))
               (rule "polyDiv_pullOut" (formula "2") (term "1,0") (inst "polyDivCoeff=l_0"))
               (rule "polySimp_mulLiterals" (formula "2") (term "1,0,0,2,1,0"))
               (rule "equal_literals" (formula "2") (term "0,1,0"))
                (builtin "One Step Simplification" (formula "2"))
               (rule "polySimp_pullOutFactor0" (formula "2") (term "0,0,1,0"))
               (rule "add_literals" (formula "2") (term "1,0,0,1,0"))
               (rule "times_zero_1" (formula "2") (term "0,0,1,0"))
               (rule "div_literals" (formula "2") (term "0,1,0"))
               (rule "add_zero_left" (formula "2") (term "1,0"))
                (builtin "One Step Simplification" (formula "2"))
               (rule "eqSymm" (formula "2"))
               (rule "applyEqRigid" (formula "36") (term "0") (ifseqformula "2"))
               (rule "polySimp_homoEq" (formula "36"))
               (rule "polySimp_pullOutFactor0" (formula "36") (term "0"))
               (rule "add_literals" (formula "36") (term "1,0"))
               (rule "polySimp_elimOne" (formula "36") (term "0"))
               (rule "applyEq" (formula "38") (term "0,0") (ifseqformula "2"))
               (rule "polySimp_homoEq" (formula "38"))
               (rule "polySimp_mulLiterals" (formula "38") (term "1,0"))
               (rule "polySimp_addComm1" (formula "38") (term "0"))
               (rule "applyEqRigid" (formula "3") (term "0,1,0,2,0") (ifseqformula "2"))
               (rule "polySimp_addComm0" (formula "3") (term "0,2,0"))
               (rule "applyEqRigid" (formula "1") (term "0,1,0,2,0") (ifseqformula "2"))
               (rule "polySimp_addComm0" (formula "1") (term "0,2,0"))
               (rule "polySimp_sepPosMonomial" (formula "38"))
               (rule "polySimp_mulComm0" (formula "38") (term "1"))
               (rule "polySimp_rightDist" (formula "38") (term "1"))
               (rule "polySimp_mulLiterals" (formula "38") (term "1,1"))
               (rule "mul_literals" (formula "38") (term "0,1"))
               (rule "replace_known_right" (formula "16") (term "0") (ifseqformula "38"))
                (builtin "One Step Simplification" (formula "16"))
               (rule "inEqSimp_strengthen1" (formula "14") (ifseqformula "38"))
               (rule "polySimp_addAssoc" (formula "14") (term "1"))
               (rule "add_literals" (formula "14") (term "0,1"))
               (rule "add_zero_left" (formula "14") (term "1"))
               (rule "inEqSimp_contradEq7" (formula "38") (ifseqformula "14"))
               (rule "polySimp_rightDist" (formula "38") (term "1,0,0"))
               (rule "mul_literals" (formula "38") (term "0,1,0,0"))
               (rule "polySimp_mulLiterals" (formula "38") (term "1,1,0,0"))
               (rule "polySimp_addAssoc" (formula "38") (term "0,0"))
               (rule "polySimp_addComm0" (formula "38") (term "0,0,0"))
               (rule "polySimp_pullOutFactor0b" (formula "38") (term "0,0"))
               (rule "add_literals" (formula "38") (term "1,1,0,0"))
               (rule "times_zero_1" (formula "38") (term "1,0,0"))
               (rule "add_zero_right" (formula "38") (term "0,0"))
               (rule "leq_literals" (formula "38") (term "0"))
                (builtin "One Step Simplification" (formula "38"))
               (rule "false_right" (formula "38"))
               (rule "inEqSimp_contradInEq1" (formula "16") (ifseqformula "1"))
               (rule "andLeft" (formula "16"))
               (rule "inEqSimp_homoInEq1" (formula "16"))
               (rule "polySimp_mulComm0" (formula "16") (term "1,0"))
               (rule "polySimp_rightDist" (formula "16") (term "1,0"))
               (rule "mul_literals" (formula "16") (term "0,1,0"))
               (rule "polySimp_addAssoc" (formula "16") (term "0"))
               (rule "polySimp_addComm0" (formula "16") (term "0,0"))
               (rule "polySimp_pullOutFactor1b" (formula "16") (term "0"))
               (rule "add_literals" (formula "16") (term "1,1,0"))
               (rule "times_zero_1" (formula "16") (term "1,0"))
               (rule "add_zero_right" (formula "16") (term "0"))
               (rule "leq_literals" (formula "16"))
               (rule "closeFalse" (formula "16"))
            )
         )
      )
   )
   (branch "Case 2"
      (rule "orRight" (formula "19"))
      (rule "expand_inInt" (formula "7"))
      (rule "expand_inInt" (formula "6"))
      (rule "expand_inInt" (formula "5"))
      (rule "expand_inInt" (formula "4"))
      (rule "replace_int_MAX" (formula "7") (term "1,0"))
      (rule "replace_int_MIN" (formula "7") (term "0,1"))
      (rule "replace_int_MIN" (formula "6") (term "0,1"))
      (rule "replace_int_MAX" (formula "6") (term "1,0"))
      (rule "replace_int_MAX" (formula "5") (term "1,0"))
      (rule "replace_int_MIN" (formula "5") (term "0,1"))
      (rule "replace_int_MAX" (formula "4") (term "1,0"))
      (rule "replace_int_MIN" (formula "4") (term "0,1"))
      (rule "andLeft" (formula "7"))
      (rule "andLeft" (formula "6"))
      (rule "andLeft" (formula "5"))
      (rule "andLeft" (formula "4"))
      (rule "translateJavaSubInt" (formula "23") (term "0,2,0,0,0"))
      (rule "translateJavaSubInt" (formula "23") (term "2,0"))
      (rule "translateJavaSubInt" (formula "23") (term "1"))
      (rule "translateJavaSubInt" (formula "24") (term "0,2,0,0,0,2,1"))
      (rule "translateJavaSubInt" (formula "24") (term "2,0,2,1"))
      (rule "eqSymm" (formula "16") (term "0"))
      (rule "eqSymm" (formula "19"))
      (rule "translateJavaSubInt" (formula "15") (term "0,0"))
      (rule "translateJavaSubInt" (formula "15") (term "0,2,0,1"))
      (rule "translateJavaSubInt" (formula "14") (term "1"))
      (rule "translateJavaSubInt" (formula "13") (term "0"))
      (rule "translateJavaSubInt" (formula "16") (term "0,0"))
      (rule "translateJavaSubInt" (formula "19") (term "1,0"))
      (rule "polySimp_elimSub" (formula "23") (term "0,2,0,0,0"))
      (rule "polySimp_elimSub" (formula "23") (term "2,0"))
      (rule "polySimp_elimSub" (formula "23") (term "1"))
      (rule "mul_literals" (formula "23") (term "1,1"))
      (rule "polySimp_elimSub" (formula "24") (term "0,2,0,0,0,2,1"))
      (rule "polySimp_elimSub" (formula "24") (term "2,0,2,1"))
      (rule "polySimp_elimSub" (formula "15") (term "0,0"))
      (rule "polySimp_elimSub" (formula "15") (term "0,2,0,1"))
      (rule "polySimp_elimSub" (formula "14") (term "1"))
      (rule "mul_literals" (formula "14") (term "1,1"))
      (rule "polySimp_elimSub" (formula "13") (term "0"))
      (rule "mul_literals" (formula "13") (term "1,0"))
      (rule "polySimp_elimSub" (formula "16") (term "0,0"))
      (rule "mul_literals" (formula "16") (term "1,0,0"))
      (rule "polySimp_elimSub" (formula "19") (term "1,0"))
      (rule "polySimp_homoEq" (formula "15") (term "0"))
      (rule "polySimp_homoEq" (formula "16") (term "0"))
      (rule "polySimp_mulComm0" (formula "15") (term "1,0,0"))
      (rule "polySimp_mulComm0" (formula "16") (term "1,0,0"))
      (rule "polySimp_addComm0" (formula "23") (term "1"))
      (rule "polySimp_addComm0" (formula "14") (term "1"))
      (rule "polySimp_addComm0" (formula "13") (term "0"))
      (rule "polySimp_addComm0" (formula "19") (term "1,0"))
      (rule "polySimp_addComm0" (formula "16") (term "1,1,0,0"))
      (rule "polySimp_rightDist" (formula "15") (term "1,0,0"))
      (rule "polySimp_mulLiterals" (formula "15") (term "1,1,0,0"))
      (rule "polySimp_elimOne" (formula "15") (term "1,1,0,0"))
      (rule "polySimp_mulComm0" (formula "15") (term "0,1,0,0"))
      (rule "polySimp_rightDist" (formula "16") (term "1,0,0"))
      (rule "mul_literals" (formula "16") (term "0,1,0,0"))
      (rule "inEqSimp_ltToLeq" (formula "18"))
      (rule "polySimp_mulComm0" (formula "18") (term "1,0,0"))
      (rule "polySimp_addComm1" (formula "18") (term "0"))
      (rule "inEqSimp_leqRight" (formula "24"))
      (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
      (rule "polySimp_addComm1" (formula "1") (term "0"))
      (rule "polySimp_addAssoc" (formula "16") (term "0,0"))
      (rule "polySimp_addAssoc" (formula "17") (term "0,0"))
      (rule "polySimp_addComm0" (formula "17") (term "0,0,0"))
      (rule "inEqSimp_ltToLeq" (formula "24") (term "0,0"))
      (rule "polySimp_mulComm0" (formula "24") (term "1,0,0,0,0"))
      (rule "inEqSimp_ltToLeq" (formula "16") (term "1"))
      (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,1"))
      (rule "inEqSimp_commuteLeq" (formula "17") (term "1"))
      (rule "inEqSimp_commuteLeq" (formula "18"))
      (rule "inEqSimp_commuteLeq" (formula "12"))
      (rule "inEqSimp_commuteLeq" (formula "10"))
      (rule "inEqSimp_commuteLeq" (formula "8"))
      (rule "inEqSimp_commuteLeq" (formula "6"))
      (rule "inEqSimp_ltToLeq" (formula "1") (term "0,0,2,0,1,0"))
      (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,0,0,2,0,1,0"))
      (rule "inEqSimp_homoInEq0" (formula "15"))
      (rule "polySimp_addComm1" (formula "15") (term "0"))
      (rule "inEqSimp_homoInEq0" (formula "14"))
      (rule "polySimp_mulComm0" (formula "14") (term "1,0"))
      (rule "polySimp_rightDist" (formula "14") (term "1,0"))
      (rule "mul_literals" (formula "14") (term "0,1,0"))
      (rule "polySimp_addAssoc" (formula "14") (term "0"))
      (rule "polySimp_addComm0" (formula "14") (term "0,0"))
      (rule "polySimp_sepPosMonomial" (formula "16") (term "0"))
      (rule "polySimp_mulComm0" (formula "16") (term "1,0"))
      (rule "polySimp_rightDist" (formula "16") (term "1,0"))
      (rule "polySimp_mulLiterals" (formula "16") (term "1,1,0"))
      (rule "mul_literals" (formula "16") (term "0,1,0"))
      (rule "polySimp_elimOne" (formula "16") (term "1,1,0"))
      (rule "polySimp_sepNegMonomial" (formula "17") (term "0"))
      (rule "polySimp_mulLiterals" (formula "17") (term "0,0"))
      (rule "polySimp_elimOne" (formula "17") (term "0,0"))
      (rule "inEqSimp_sepNegMonomial0" (formula "19"))
      (rule "polySimp_mulLiterals" (formula "19") (term "0"))
      (rule "polySimp_elimOne" (formula "19") (term "0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "0,0"))
      (rule "polySimp_mulComm0" (formula "24") (term "1,0,0"))
      (rule "polySimp_rightDist" (formula "24") (term "1,0,0"))
      (rule "mul_literals" (formula "24") (term "0,1,0,0"))
      (rule "polySimp_mulLiterals" (formula "24") (term "1,1,0,0"))
      (rule "polySimp_elimOne" (formula "24") (term "1,1,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "1"))
      (rule "polySimp_mulComm0" (formula "16") (term "1,1"))
      (rule "polySimp_rightDist" (formula "16") (term "1,1"))
      (rule "mul_literals" (formula "16") (term "0,1,1"))
      (rule "polySimp_mulLiterals" (formula "16") (term "1,1,1"))
      (rule "polySimp_elimOne" (formula "16") (term "1,1,1"))
      (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "0,0,2,0,1,0"))
      (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,2,0,1,0"))
      (rule "polySimp_rightDist" (formula "1") (term "1,0,0,2,0,1,0"))
      (rule "mul_literals" (formula "1") (term "0,1,0,0,2,0,1,0"))
      (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0,2,0,1,0"))
      (rule "polySimp_elimOne" (formula "1") (term "1,1,0,0,2,0,1,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "15"))
      (rule "polySimp_mulComm0" (formula "15") (term "1"))
      (rule "polySimp_rightDist" (formula "15") (term "1"))
      (rule "polySimp_mulLiterals" (formula "15") (term "1,1"))
      (rule "mul_literals" (formula "15") (term "0,1"))
      (rule "polySimp_elimOne" (formula "15") (term "1,1"))
      (rule "inEqSimp_sepNegMonomial1" (formula "14"))
      (rule "polySimp_mulLiterals" (formula "14") (term "0"))
      (rule "polySimp_elimOne" (formula "14") (term "0"))
      (rule "inEqSimp_sepNegMonomial1" (formula "1"))
      (rule "polySimp_mulLiterals" (formula "1") (term "0"))
      (rule "polySimp_elimOne" (formula "1") (term "0"))
      (rule "inEqSimp_subsumption1" (formula "12") (ifseqformula "18"))
      (rule "leq_literals" (formula "12") (term "0"))
       (builtin "One Step Simplification" (formula "12"))
      (rule "true_left" (formula "12"))
      (rule "inEqSimp_exactShadow3" (formula "8") (ifseqformula "13"))
      (rule "mul_literals" (formula "8") (term "0,0"))
      (rule "polySimp_addAssoc" (formula "8") (term "0"))
      (rule "add_literals" (formula "8") (term "0,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "8"))
      (rule "mul_literals" (formula "8") (term "1"))
      (rule "inEqSimp_subsumption1" (formula "8") (ifseqformula "6"))
      (rule "leq_literals" (formula "8") (term "0"))
       (builtin "One Step Simplification" (formula "8"))
      (rule "true_left" (formula "8"))
      (rule "Free_class_invariant_axiom_for_de_wiesler_Tree" (formula "21"))
      (rule "true_left" (formula "21"))
      (rule "Class_invariant_axiom_for_de_wiesler_Tree" (formula "20") (inst "i_0=i_0") (inst "i=i"))
       (builtin "One Step Simplification" (formula "20"))
      (rule "expand_inInt" (formula "20") (term "1,0,0,1,0"))
      (rule "expand_inInt" (formula "20") (term "1,0,0,1"))
      (rule "replace_int_MAX" (formula "20") (term "1,0,1,0,0,1,0"))
      (rule "replace_int_MIN" (formula "20") (term "0,1,1,0,0,1,0"))
      (rule "replace_int_MAX" (formula "20") (term "1,0,1,0,0,1"))
      (rule "replace_int_MIN" (formula "20") (term "0,1,1,0,0,1"))
      (rule "andLeft" (formula "20"))
      (rule "andLeft" (formula "20"))
      (rule "andLeft" (formula "20"))
      (rule "andLeft" (formula "20"))
      (rule "andLeft" (formula "20"))
      (rule "andLeft" (formula "21"))
      (rule "andLeft" (formula "20"))
      (rule "andLeft" (formula "20"))
      (rule "andLeft" (formula "20"))
      (rule "andLeft" (formula "22"))
      (rule "notLeft" (formula "20"))
      (rule "notLeft" (formula "20"))
      (rule "translateJavaSubInt" (formula "28") (term "0,2,1,1,0"))
      (rule "translateJavaSubInt" (formula "26") (term "3,0"))
      (rule "translateJavaShiftLeftInt" (formula "22") (term "1"))
      (rule "eqSymm" (formula "28") (term "1,0"))
      (rule "polySimp_elimSub" (formula "26") (term "3,0"))
      (rule "mul_literals" (formula "26") (term "1,3,0"))
      (rule "polySimp_elimSub" (formula "28") (term "0,2,0,1,0"))
      (rule "mul_literals" (formula "28") (term "1,0,2,0,1,0"))
      (rule "polySimp_addComm0" (formula "26") (term "3,0"))
      (rule "polySimp_addComm0" (formula "28") (term "0,2,0,1,0"))
      (rule "inEqSimp_ltToLeq" (formula "28") (term "1,0,0,0"))
      (rule "polySimp_mulComm0" (formula "28") (term "1,0,0,1,0,0,0"))
      (rule "inEqSimp_ltToLeq" (formula "27") (term "1,0,0,0"))
      (rule "polySimp_mulComm0" (formula "27") (term "1,0,0,1,0,0,0"))
      (rule "inEqSimp_ltToLeq" (formula "27") (term "1,1,0"))
      (rule "polySimp_mulComm0" (formula "27") (term "1,0,0,1,1,0"))
      (rule "inEqSimp_commuteLeq" (formula "28") (term "0,0,0,0"))
      (rule "inEqSimp_commuteLeq" (formula "28") (term "1,1,0,0"))
      (rule "inEqSimp_commuteLeq" (formula "27") (term "0,0,0,0"))
      (rule "inEqSimp_commuteLeq" (formula "27") (term "1,1,0,0"))
      (rule "inEqSimp_commuteLeq" (formula "27") (term "0,1,0"))
      (rule "inEqSimp_commuteLeq" (formula "25"))
      (rule "inEqSimp_commuteLeq" (formula "23"))
      (rule "inEqSimp_commuteLeq" (formula "24"))
      (rule "inEqSimp_commuteLeq" (formula "20"))
      (rule "applyEq" (formula "14") (term "0") (ifseqformula "22"))
      (rule "applyEq" (formula "16") (term "0,0") (ifseqformula "22"))
      (rule "applyEq" (formula "26") (term "1,3,0") (ifseqformula "22"))
      (rule "applyEq" (formula "24") (term "1") (ifseqformula "22"))
      (rule "applyEq" (formula "25") (term "1") (ifseqformula "22"))
      (rule "applyEq" (formula "23") (term "0") (ifseqformula "22"))
      (rule "applyEq" (formula "27") (term "0,1,0,0,1,1,0") (ifseqformula "22"))
      (rule "applyEq" (formula "28") (term "0,1,0,0,1,0,0,0") (ifseqformula "22"))
      (rule "applyEq" (formula "27") (term "0,1,0,0,1,0,0,0") (ifseqformula "22"))
      (rule "applyEq" (formula "32") (term "1,1") (ifseqformula "22"))
      (rule "inEqSimp_sepPosMonomial0" (formula "27") (term "1,1,0"))
      (rule "polySimp_mulComm0" (formula "27") (term "1,1,1,0"))
      (rule "polySimp_rightDist" (formula "27") (term "1,1,1,0"))
      (rule "polySimp_mulLiterals" (formula "27") (term "1,1,1,1,0"))
      (rule "mul_literals" (formula "27") (term "0,1,1,1,0"))
      (rule "polySimp_elimOne" (formula "27") (term "1,1,1,1,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "28") (term "1,0,0,0"))
      (rule "polySimp_mulComm0" (formula "28") (term "1,1,0,0,0"))
      (rule "polySimp_rightDist" (formula "28") (term "1,1,0,0,0"))
      (rule "polySimp_mulLiterals" (formula "28") (term "1,1,1,0,0,0"))
      (rule "mul_literals" (formula "28") (term "0,1,1,0,0,0"))
      (rule "polySimp_elimOne" (formula "28") (term "1,1,1,0,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "27") (term "1,0,0,0"))
      (rule "polySimp_mulComm0" (formula "27") (term "1,1,0,0,0"))
      (rule "polySimp_rightDist" (formula "27") (term "1,1,0,0,0"))
      (rule "polySimp_mulLiterals" (formula "27") (term "1,1,1,0,0,0"))
      (rule "mul_literals" (formula "27") (term "0,1,1,0,0,0"))
      (rule "polySimp_elimOne" (formula "27") (term "1,1,1,0,0,0"))
      (rule "javaShiftLeftIntDef" (formula "22") (term "1"))
      (rule "mod_axiom" (formula "22") (term "1,0,1"))
      (rule "polySimp_mulLiterals" (formula "22") (term "1,1,0,1"))
      (rule "javaShiftLeftIntDef" (formula "14") (term "0"))
      (rule "mod_axiom" (formula "14") (term "1,0,0"))
      (rule "polySimp_mulLiterals" (formula "14") (term "1,1,0,0"))
      (rule "javaShiftLeftIntDef" (formula "16") (term "0,0"))
      (rule "mod_axiom" (formula "16") (term "1,0,0,0"))
      (rule "polySimp_mulLiterals" (formula "16") (term "1,1,0,0,0"))
      (rule "javaShiftLeftIntDef" (formula "26") (term "1,3,0"))
      (rule "mod_axiom" (formula "26") (term "1,0,1,3,0"))
      (rule "polySimp_mulLiterals" (formula "26") (term "1,1,0,1,3,0"))
      (rule "javaShiftLeftIntDef" (formula "24") (term "1"))
      (rule "mod_axiom" (formula "24") (term "1,0,1"))
      (rule "polySimp_mulLiterals" (formula "24") (term "1,1,0,1"))
      (rule "javaShiftLeftIntDef" (formula "25") (term "1"))
      (rule "mod_axiom" (formula "25") (term "1,0,1"))
      (rule "polySimp_mulLiterals" (formula "25") (term "1,1,0,1"))
      (rule "javaShiftLeftIntDef" (formula "23") (term "0"))
      (rule "mod_axiom" (formula "23") (term "1,0,0"))
      (rule "polySimp_mulLiterals" (formula "23") (term "1,1,0,0"))
      (rule "javaShiftLeftIntDef" (formula "32") (term "1,1"))
      (rule "mod_axiom" (formula "32") (term "1,0,1,1"))
      (rule "polySimp_mulLiterals" (formula "32") (term "1,1,0,1,1"))
      (rule "javaShiftLeftIntDef" (formula "27") (term "1,1,1,1,0"))
      (rule "mod_axiom" (formula "27") (term "1,0,1,1,1,1,0"))
      (rule "polySimp_mulLiterals" (formula "27") (term "1,1,0,1,1,1,1,0"))
      (rule "javaShiftLeftIntDef" (formula "28") (term "1,1,1,0,0,0"))
      (rule "mod_axiom" (formula "28") (term "1,0,1,1,1,0,0,0"))
      (rule "polySimp_mulLiterals" (formula "28") (term "1,1,0,1,1,1,0,0,0"))
      (rule "javaShiftLeftIntDef" (formula "27") (term "1,1,1,0,0,0"))
      (rule "mod_axiom" (formula "27") (term "1,0,1,1,1,0,0,0"))
      (rule "polySimp_mulLiterals" (formula "27") (term "1,1,0,1,1,1,0,0,0"))
      (rule "shiftLeftDef" (formula "22") (term "0,1"))
      (rule "eqSymm" (formula "22"))
      (rule "polySimp_elimNeg" (formula "22") (term "1,1,0,0"))
      (rule "polySimp_mulComm0" (formula "22") (term "1,1,0,0"))
      (rule "polySimp_rightDist" (formula "22") (term "1,1,0,0"))
      (rule "polySimp_mulLiterals" (formula "22") (term "1,1,1,0,0"))
      (rule "polySimp_mulComm0" (formula "22") (term "0,1,1,0,0"))
      (rule "shiftLeftPositiveShiftDef" (formula "22") (term "2,0,0"))
      (rule "polySimp_elimOneLeft0" (formula "22") (term "2,0,0"))
      (rule "shiftRightPositiveShiftDef" (formula "22") (term "1,0,0"))
      (rule "inEqSimp_ltToLeq" (formula "22") (term "0,0,0"))
      (rule "times_zero_1" (formula "22") (term "1,0,0,0,0,0"))
      (rule "add_literals" (formula "22") (term "0,0,0,0,0"))
      (rule "polySimp_addAssoc" (formula "22") (term "0,0,0,0"))
      (rule "inEqSimp_sepNegMonomial0" (formula "22") (term "0,0,0"))
      (rule "polySimp_mulLiterals" (formula "22") (term "0,0,0,0"))
      (rule "shiftLeftDef" (formula "14") (term "0,0"))
      (rule "polySimp_elimNeg" (formula "14") (term "1,1,0,0"))
      (rule "polySimp_mulComm0" (formula "14") (term "1,1,0,0"))
      (rule "polySimp_rightDist" (formula "14") (term "1,1,0,0"))
      (rule "polySimp_mulLiterals" (formula "14") (term "1,1,1,0,0"))
      (rule "polySimp_mulComm0" (formula "14") (term "0,1,1,0,0"))
      (rule "shiftLeftPositiveShiftDef" (formula "14") (term "2,0,0"))
      (rule "polySimp_elimOneLeft0" (formula "14") (term "2,0,0"))
      (rule "shiftRightPositiveShiftDef" (formula "14") (term "1,0,0"))
      (rule "inEqSimp_ltToLeq" (formula "14") (term "0,0,0"))
      (rule "times_zero_1" (formula "14") (term "1,0,0,0,0,0"))
      (rule "add_literals" (formula "14") (term "0,0,0,0,0"))
      (rule "polySimp_addAssoc" (formula "14") (term "0,0,0,0"))
      (rule "inEqSimp_sepNegMonomial0" (formula "14") (term "0,0,0"))
      (rule "polySimp_mulLiterals" (formula "14") (term "0,0,0,0"))
      (rule "applyEq" (formula "14") (term "0") (ifseqformula "22"))
      (rule "shiftLeftDef" (formula "16") (term "0,0,0"))
      (rule "polySimp_elimNeg" (formula "16") (term "1,1,0,0,0"))
      (rule "polySimp_mulComm0" (formula "16") (term "1,1,0,0,0"))
      (rule "polySimp_rightDist" (formula "16") (term "1,1,0,0,0"))
      (rule "polySimp_mulLiterals" (formula "16") (term "1,1,1,0,0,0"))
      (rule "polySimp_mulComm0" (formula "16") (term "0,1,1,0,0,0"))
      (rule "shiftLeftPositiveShiftDef" (formula "16") (term "2,0,0,0"))
      (rule "polySimp_elimOneLeft0" (formula "16") (term "2,0,0,0"))
      (rule "shiftRightPositiveShiftDef" (formula "16") (term "1,0,0,0"))
      (rule "inEqSimp_ltToLeq" (formula "16") (term "0,0,0,0"))
      (rule "times_zero_1" (formula "16") (term "1,0,0,0,0,0,0"))
      (rule "add_zero_right" (formula "16") (term "0,0,0,0,0,0"))
      (rule "polySimp_addAssoc" (formula "16") (term "0,0,0,0,0"))
      (rule "inEqSimp_sepNegMonomial0" (formula "16") (term "0,0,0,0"))
      (rule "polySimp_mulLiterals" (formula "16") (term "0,0,0,0,0"))
      (rule "applyEq" (formula "16") (term "0,0") (ifseqformula "22"))
      (rule "shiftLeftDef" (formula "26") (term "0,1,3,0"))
      (rule "polySimp_elimNeg" (formula "26") (term "1,1,0,1,3,0"))
      (rule "polySimp_mulComm0" (formula "26") (term "1,1,0,1,3,0"))
      (rule "polySimp_rightDist" (formula "26") (term "1,1,0,1,3,0"))
      (rule "polySimp_mulLiterals" (formula "26") (term "1,1,1,0,1,3,0"))
      (rule "polySimp_mulComm0" (formula "26") (term "0,1,1,0,1,3,0"))
      (rule "shiftLeftPositiveShiftDef" (formula "26") (term "2,0,1,3,0"))
      (rule "polySimp_elimOneLeft0" (formula "26") (term "2,0,1,3,0"))
      (rule "shiftRightPositiveShiftDef" (formula "26") (term "1,0,1,3,0"))
      (rule "inEqSimp_ltToLeq" (formula "26") (term "0,0,1,3,0"))
      (rule "times_zero_1" (formula "26") (term "1,0,0,0,0,1,3,0"))
      (rule "add_zero_right" (formula "26") (term "0,0,0,0,1,3,0"))
      (rule "polySimp_addAssoc" (formula "26") (term "0,0,0,1,3,0"))
      (rule "inEqSimp_sepNegMonomial0" (formula "26") (term "0,0,1,3,0"))
      (rule "polySimp_mulLiterals" (formula "26") (term "0,0,0,1,3,0"))
      (rule "applyEq" (formula "26") (term "1,3,0") (ifseqformula "22"))
      (rule "shiftLeftDef" (formula "24") (term "0,1"))
      (rule "polySimp_elimNeg" (formula "24") (term "1,1,0,1"))
      (rule "polySimp_mulComm0" (formula "24") (term "1,1,0,1"))
      (rule "polySimp_rightDist" (formula "24") (term "1,1,0,1"))
      (rule "polySimp_mulLiterals" (formula "24") (term "1,1,1,0,1"))
      (rule "polySimp_mulComm0" (formula "24") (term "0,1,1,0,1"))
      (rule "shiftLeftPositiveShiftDef" (formula "24") (term "2,0,1"))
      (rule "polySimp_elimOneLeft0" (formula "24") (term "2,0,1"))
      (rule "shiftRightPositiveShiftDef" (formula "24") (term "1,0,1"))
      (rule "inEqSimp_ltToLeq" (formula "24") (term "0,0,1"))
      (rule "times_zero_1" (formula "24") (term "1,0,0,0,0,1"))
      (rule "add_literals" (formula "24") (term "0,0,0,0,1"))
      (rule "polySimp_addAssoc" (formula "24") (term "0,0,0,1"))
      (rule "inEqSimp_commuteGeq" (formula "24"))
      (rule "inEqSimp_sepNegMonomial0" (formula "24") (term "0,0,0"))
      (rule "polySimp_mulLiterals" (formula "24") (term "0,0,0,0"))
      (rule "applyEq" (formula "24") (term "0") (ifseqformula "22"))
      (rule "inEqSimp_commuteLeq" (formula "24"))
      (rule "shiftLeftDef" (formula "25") (term "0,1"))
      (rule "polySimp_elimNeg" (formula "25") (term "1,1,0,1"))
      (rule "polySimp_mulComm0" (formula "25") (term "1,1,0,1"))
      (rule "polySimp_rightDist" (formula "25") (term "1,1,0,1"))
      (rule "polySimp_mulLiterals" (formula "25") (term "1,1,1,0,1"))
      (rule "polySimp_mulComm0" (formula "25") (term "0,1,1,0,1"))
      (rule "shiftLeftPositiveShiftDef" (formula "25") (term "2,0,1"))
      (rule "polySimp_elimOneLeft0" (formula "25") (term "2,0,1"))
      (rule "shiftRightPositiveShiftDef" (formula "25") (term "1,0,1"))
      (rule "inEqSimp_ltToLeq" (formula "25") (term "0,0,1"))
      (rule "times_zero_1" (formula "25") (term "1,0,0,0,0,1"))
      (rule "add_zero_right" (formula "25") (term "0,0,0,0,1"))
      (rule "polySimp_addAssoc" (formula "25") (term "0,0,0,1"))
      (rule "inEqSimp_commuteGeq" (formula "25"))
      (rule "inEqSimp_sepNegMonomial0" (formula "25") (term "0,0,0"))
      (rule "polySimp_mulLiterals" (formula "25") (term "0,0,0,0"))
      (rule "applyEq" (formula "25") (term "0") (ifseqformula "22"))
      (rule "inEqSimp_commuteLeq" (formula "25"))
      (rule "shiftLeftDef" (formula "23") (term "0,0"))
      (rule "polySimp_elimNeg" (formula "23") (term "1,1,0,0"))
      (rule "polySimp_mulComm0" (formula "23") (term "1,1,0,0"))
      (rule "polySimp_rightDist" (formula "23") (term "1,1,0,0"))
      (rule "polySimp_mulLiterals" (formula "23") (term "1,1,1,0,0"))
      (rule "polySimp_mulComm0" (formula "23") (term "0,1,1,0,0"))
      (rule "shiftLeftPositiveShiftDef" (formula "23") (term "2,0,0"))
      (rule "polySimp_elimOneLeft0" (formula "23") (term "2,0,0"))
      (rule "shiftRightPositiveShiftDef" (formula "23") (term "1,0,0"))
      (rule "inEqSimp_ltToLeq" (formula "23") (term "0,0,0"))
      (rule "times_zero_1" (formula "23") (term "1,0,0,0,0,0"))
      (rule "add_zero_right" (formula "23") (term "0,0,0,0,0"))
      (rule "polySimp_addAssoc" (formula "23") (term "0,0,0,0"))
      (rule "inEqSimp_sepNegMonomial0" (formula "23") (term "0,0,0"))
      (rule "polySimp_mulLiterals" (formula "23") (term "0,0,0,0"))
      (rule "applyEq" (formula "23") (term "0") (ifseqformula "22"))
      (rule "shiftLeftDef" (formula "32") (term "0,1,1"))
      (rule "polySimp_elimNeg" (formula "32") (term "1,1,0,1,1"))
      (rule "polySimp_homoEq" (formula "32"))
      (rule "polySimp_mulComm0" (formula "32") (term "1,1,0,1,0,0"))
      (rule "polySimp_addComm1" (formula "32") (term "0"))
      (rule "polySimp_rightDist" (formula "32") (term "1,1,0,1,0"))
      (rule "polySimp_mulLiterals" (formula "32") (term "1,1,1,0,1,0"))
      (rule "polySimp_mulComm0" (formula "32") (term "0,1,1,0,1,0"))
      (rule "shiftLeftPositiveShiftDef" (formula "32") (term "2,0,1,0"))
      (rule "polySimp_elimOneLeft0" (formula "32") (term "2,0,1,0"))
      (rule "shiftRightPositiveShiftDef" (formula "32") (term "1,0,1,0"))
      (rule "inEqSimp_ltToLeq" (formula "32") (term "0,0,1,0"))
      (rule "times_zero_1" (formula "32") (term "1,0,0,0,0,1,0"))
      (rule "add_zero_right" (formula "32") (term "0,0,0,0,1,0"))
      (rule "polySimp_addComm1" (formula "32") (term "0"))
      (rule "polySimp_addAssoc" (formula "32") (term "0,0,0,1,0,0"))
      (rule "polySimp_sepNegMonomial" (formula "32"))
      (rule "polySimp_mulLiterals" (formula "32") (term "0"))
      (rule "polySimp_elimOne" (formula "32") (term "0"))
      (rule "inEqSimp_sepNegMonomial0" (formula "32") (term "0,0,1,1"))
      (rule "polySimp_mulLiterals" (formula "32") (term "0,0,0,1,1"))
      (rule "applyEq" (formula "32") (term "1,1") (ifseqformula "22"))
      (rule "shiftLeftDef" (formula "27") (term "0,1,1,1,1,0"))
      (rule "polySimp_elimNeg" (formula "27") (term "1,1,0,1,1,1,1,0"))
      (rule "polySimp_mulComm0" (formula "27") (term "1,1,0,1,1,1,1,0"))
      (rule "polySimp_rightDist" (formula "27") (term "1,1,0,1,1,1,1,0"))
      (rule "polySimp_mulLiterals" (formula "27") (term "1,1,1,0,1,1,1,1,0"))
      (rule "polySimp_mulComm0" (formula "27") (term "0,1,1,0,1,1,1,1,0"))
      (rule "shiftLeftPositiveShiftDef" (formula "27") (term "2,0,1,1,1,1,0"))
      (rule "polySimp_elimOneLeft0" (formula "27") (term "2,0,1,1,1,1,0"))
      (rule "shiftRightPositiveShiftDef" (formula "27") (term "1,0,1,1,1,1,0"))
      (rule "inEqSimp_ltToLeq" (formula "27") (term "0,0,1,1,1,1,0"))
      (rule "times_zero_1" (formula "27") (term "1,0,0,0,0,1,1,1,1,0"))
      (rule "add_zero_right" (formula "27") (term "0,0,0,0,1,1,1,1,0"))
      (rule "polySimp_addAssoc" (formula "27") (term "0,0,0,1,1,1,1,0"))
      (rule "inEqSimp_sepNegMonomial0" (formula "27") (term "0,0,1,1,1,1,0"))
      (rule "polySimp_mulLiterals" (formula "27") (term "0,0,0,1,1,1,1,0"))
      (rule "applyEq" (formula "27") (term "1,1,1,1,0") (ifseqformula "22"))
      (rule "shiftLeftDef" (formula "28") (term "0,1,1,1,0,0,0"))
      (rule "polySimp_elimNeg" (formula "28") (term "1,1,0,1,1,1,0,0,0"))
      (rule "polySimp_mulComm0" (formula "28") (term "1,1,0,1,1,1,0,0,0"))
      (rule "polySimp_rightDist" (formula "28") (term "1,1,0,1,1,1,0,0,0"))
      (rule "polySimp_mulLiterals" (formula "28") (term "1,1,1,0,1,1,1,0,0,0"))
      (rule "polySimp_mulComm0" (formula "28") (term "0,1,1,0,1,1,1,0,0,0"))
      (rule "shiftLeftPositiveShiftDef" (formula "28") (term "2,0,1,1,1,0,0,0"))
      (rule "polySimp_elimOneLeft0" (formula "28") (term "2,0,1,1,1,0,0,0"))
      (rule "shiftRightPositiveShiftDef" (formula "28") (term "1,0,1,1,1,0,0,0"))
      (rule "inEqSimp_ltToLeq" (formula "28") (term "0,0,1,1,1,0,0,0"))
      (rule "times_zero_1" (formula "28") (term "1,0,0,0,0,1,1,1,0,0,0"))
      (rule "add_literals" (formula "28") (term "0,0,0,0,1,1,1,0,0,0"))
      (rule "polySimp_addAssoc" (formula "28") (term "0,0,0,1,1,1,0,0,0"))
      (rule "inEqSimp_sepNegMonomial0" (formula "28") (term "0,0,1,1,1,0,0,0"))
      (rule "polySimp_mulLiterals" (formula "28") (term "0,0,0,1,1,1,0,0,0"))
      (rule "applyEq" (formula "28") (term "1,1,1,0,0,0") (ifseqformula "22"))
      (rule "shiftLeftDef" (formula "27") (term "0,1,1,1,0,0,0"))
      (rule "polySimp_elimNeg" (formula "27") (term "1,1,0,1,1,1,0,0,0"))
      (rule "polySimp_mulComm0" (formula "27") (term "1,1,0,1,1,1,0,0,0"))
      (rule "polySimp_rightDist" (formula "27") (term "1,1,0,1,1,1,0,0,0"))
      (rule "polySimp_mulLiterals" (formula "27") (term "1,1,1,0,1,1,1,0,0,0"))
      (rule "polySimp_mulComm0" (formula "27") (term "0,1,1,0,1,1,1,0,0,0"))
      (rule "shiftLeftPositiveShiftDef" (formula "27") (term "2,0,1,1,1,0,0,0"))
      (rule "polySimp_elimOneLeft0" (formula "27") (term "2,0,1,1,1,0,0,0"))
      (rule "shiftRightPositiveShiftDef" (formula "27") (term "1,0,1,1,1,0,0,0"))
      (rule "inEqSimp_ltToLeq" (formula "27") (term "0,0,1,1,1,0,0,0"))
      (rule "times_zero_1" (formula "27") (term "1,0,0,0,0,1,1,1,0,0,0"))
      (rule "add_literals" (formula "27") (term "0,0,0,0,1,1,1,0,0,0"))
      (rule "polySimp_addAssoc" (formula "27") (term "0,0,0,1,1,1,0,0,0"))
      (rule "inEqSimp_sepNegMonomial0" (formula "27") (term "0,0,1,1,1,0,0,0"))
      (rule "polySimp_mulLiterals" (formula "27") (term "0,0,0,1,1,1,0,0,0"))
      (rule "applyEq" (formula "27") (term "1,1,1,0,0,0") (ifseqformula "22"))
      (rule "inEqSimp_exactShadow3" (formula "18") (ifseqformula "21"))
      (rule "polySimp_rightDist" (formula "18") (term "0,0"))
      (rule "mul_literals" (formula "18") (term "0,0,0"))
      (rule "polySimp_addComm1" (formula "18") (term "0"))
      (rule "add_literals" (formula "18") (term "0,0"))
      (rule "inEqSimp_sepNegMonomial1" (formula "18"))
      (rule "polySimp_mulLiterals" (formula "18") (term "0"))
      (rule "polySimp_elimOne" (formula "18") (term "0"))
      (rule "inEqSimp_subsumption0" (formula "11") (ifseqformula "18"))
      (rule "leq_literals" (formula "11") (term "0"))
       (builtin "One Step Simplification" (formula "11"))
      (rule "true_left" (formula "11"))
      (rule "expand_moduloInteger" (formula "22") (term "0"))
      (rule "replace_int_RANGE" (formula "22") (term "1,1,0"))
      (rule "replace_int_HALFRANGE" (formula "22") (term "0,0,1,0"))
      (rule "replace_int_MIN" (formula "22") (term "0,0"))
      (rule "polySimp_homoEq" (formula "22"))
      (rule "polySimp_mulComm0" (formula "22") (term "1,0"))
      (rule "polySimp_rightDist" (formula "22") (term "1,0"))
      (rule "mul_literals" (formula "22") (term "0,1,0"))
      (rule "polySimp_addAssoc" (formula "22") (term "0"))
      (rule "polySimp_addComm0" (formula "22") (term "0,0"))
      (rule "polySimp_sepNegMonomial" (formula "22"))
      (rule "polySimp_mulLiterals" (formula "22") (term "0"))
      (rule "polySimp_elimOne" (formula "22") (term "0"))
      (rule "Definition_axiom_for_pi_in_de_wiesler_Tree" (formula "28") (term "1,0,2,0,1,0"))
      (rule "translateJavaSubInt" (formula "28") (term "0,1,1,1,0,2,0,1,0"))
      (rule "polySimp_elimSub" (formula "28") (term "1,0,0,1,0,2,0,1,0"))
      (rule "polySimp_elimSub" (formula "28") (term "1,1,1,0,2,0,1,0"))
      (rule "polySimp_elimSub" (formula "28") (term "0,1,1,1,0,2,0,1,0"))
      (rule "mul_literals" (formula "28") (term "1,0,1,1,1,0,2,0,1,0"))
      (rule "polySimp_mulComm0" (formula "28") (term "1,0,2,0,1,0"))
      (rule "polySimp_addComm0" (formula "28") (term "0,1,0,1,0,2,0,1,0"))
      (rule "polySimp_rightDist" (formula "28") (term "0,1,1,0,2,0,1,0"))
      (rule "polySimp_mulLiterals" (formula "28") (term "1,0,1,1,0,2,0,1,0"))
      (rule "polySimp_mulComm0" (formula "28") (term "0,0,1,1,0,2,0,1,0"))
      (rule "polySimp_addComm1" (formula "28") (term "1,1,0,2,0,1,0"))
      (rule "polySimp_addComm0" (formula "28") (term "0,1,1,0,2,0,1,0"))
      (rule "polySimp_rightDist" (formula "28") (term "1,0,2,0,1,0"))
      (rule "polySimp_mulComm1" (formula "28") (term "1,1,0,2,0,1,0"))
      (rule "polySimp_mulComm0" (formula "28") (term "0,1,1,0,2,0,1,0"))
      (rule "polySimp_rightDist" (formula "28") (term "0,1,0,2,0,1,0"))
      (rule "polySimp_elimOne" (formula "28") (term "0,0,1,0,2,0,1,0"))
      (rule "polySimp_mulComm1" (formula "28") (term "1,0,1,0,2,0,1,0"))
      (rule "polySimp_mulComm0" (formula "28") (term "0,1,0,1,0,2,0,1,0"))
      (rule "polySimp_addAssoc" (formula "28") (term "0,2,0,1,0"))
      (rule "polySimp_addAssoc" (formula "28") (term "0,0,2,0,1,0"))
      (rule "Definition_axiom_for_pi_in_de_wiesler_Tree" (formula "27") (term "0,0,1,0"))
      (rule "translateJavaSubInt" (formula "27") (term "0,1,1,0,0,1,0"))
      (rule "polySimp_elimSub" (formula "27") (term "1,0,0,0,0,1,0"))
      (rule "polySimp_elimSub" (formula "27") (term "1,1,0,0,1,0"))
      (rule "polySimp_elimSub" (formula "27") (term "0,1,1,0,0,1,0"))
      (rule "mul_literals" (formula "27") (term "1,0,1,1,0,0,1,0"))
      (rule "polySimp_mulComm0" (formula "27") (term "0,0,1,0"))
      (rule "polySimp_addComm0" (formula "27") (term "0,1,0,0,0,1,0"))
      (rule "polySimp_rightDist" (formula "27") (term "0,1,0,0,1,0"))
      (rule "polySimp_mulLiterals" (formula "27") (term "1,0,1,0,0,1,0"))
      (rule "polySimp_mulComm0" (formula "27") (term "0,0,1,0,0,1,0"))
      (rule "polySimp_addComm1" (formula "27") (term "1,0,0,1,0"))
      (rule "polySimp_addComm0" (formula "27") (term "0,1,0,0,1,0"))
      (rule "polySimp_rightDist" (formula "27") (term "0,0,1,0"))
      (rule "polySimp_mulComm1" (formula "27") (term "1,0,0,1,0"))
      (rule "polySimp_mulComm0" (formula "27") (term "0,1,0,0,1,0"))
      (rule "polySimp_rightDist" (formula "27") (term "0,0,0,1,0"))
      (rule "polySimp_elimOne" (formula "27") (term "0,0,0,0,1,0"))
      (rule "polySimp_mulComm1" (formula "27") (term "1,0,0,0,1,0"))
      (rule "polySimp_mulComm0" (formula "27") (term "0,1,0,0,0,1,0"))
      (rule "inEqSimp_homoInEq1" (formula "27") (term "0,1,0"))
      (rule "polySimp_mulComm0" (formula "27") (term "1,0,0,1,0"))
      (rule "polySimp_rightDist" (formula "27") (term "1,0,0,1,0"))
      (rule "polySimp_mulLiterals" (formula "27") (term "1,1,0,0,1,0"))
      (rule "polySimp_rightDist" (formula "27") (term "0,1,0,0,1,0"))
      (rule "polySimp_mulLiterals" (formula "27") (term "1,0,1,0,0,1,0"))
      (rule "polySimp_mulComm0" (formula "27") (term "0,0,1,0,0,1,0"))
      (rule "polySimp_addAssoc" (formula "27") (term "0,0,1,0"))
      (rule "polySimp_addAssoc" (formula "27") (term "0,0,0,1,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "27") (term "0,1,0"))
      (rule "polySimp_mulComm0" (formula "27") (term "1,0,1,0"))
      (rule "polySimp_rightDist" (formula "27") (term "1,0,1,0"))
      (rule "polySimp_mulLiterals" (formula "27") (term "1,1,0,1,0"))
      (rule "polySimp_rightDist" (formula "27") (term "0,1,0,1,0"))
      (rule "mul_literals" (formula "27") (term "0,0,1,0,1,0"))
      (rule "polySimp_mulLiterals" (formula "27") (term "1,0,1,0,1,0"))
      (rule "polySimp_elimOne" (formula "27") (term "1,0,1,0,1,0"))
      (rule "Definition_axiom_for_pi_in_de_wiesler_Tree" (formula "27") (term "0,1,1,0"))
      (rule "translateJavaSubInt" (formula "27") (term "0,1,1,0,1,1,0"))
      (rule "polySimp_elimSub" (formula "27") (term "1,0,0,0,1,1,0"))
      (rule "polySimp_elimSub" (formula "27") (term "1,1,0,1,1,0"))
      (rule "polySimp_elimSub" (formula "27") (term "0,1,1,0,1,1,0"))
      (rule "mul_literals" (formula "27") (term "1,0,1,1,0,1,1,0"))
      (rule "polySimp_mulComm0" (formula "27") (term "0,1,1,0"))
      (rule "polySimp_addComm0" (formula "27") (term "0,1,0,0,1,1,0"))
      (rule "polySimp_rightDist" (formula "27") (term "0,1,0,1,1,0"))
      (rule "polySimp_mulLiterals" (formula "27") (term "1,0,1,0,1,1,0"))
      (rule "polySimp_mulComm0" (formula "27") (term "0,0,1,0,1,1,0"))
      (rule "polySimp_addComm1" (formula "27") (term "1,0,1,1,0"))
      (rule "polySimp_addComm0" (formula "27") (term "0,1,0,1,1,0"))
      (rule "polySimp_rightDist" (formula "27") (term "0,1,1,0"))
      (rule "polySimp_mulComm1" (formula "27") (term "1,0,1,1,0"))
      (rule "polySimp_mulComm0" (formula "27") (term "0,1,0,1,1,0"))
      (rule "polySimp_rightDist" (formula "27") (term "0,0,1,1,0"))
      (rule "polySimp_elimOne" (formula "27") (term "0,0,0,1,1,0"))
      (rule "polySimp_mulComm1" (formula "27") (term "1,0,0,1,1,0"))
      (rule "polySimp_mulComm0" (formula "27") (term "0,1,0,0,1,1,0"))
      (rule "inEqSimp_homoInEq0" (formula "27") (term "1,1,0"))
      (rule "polySimp_mulComm0" (formula "27") (term "1,0,1,1,0"))
      (rule "polySimp_rightDist" (formula "27") (term "1,0,1,1,0"))
      (rule "polySimp_mulLiterals" (formula "27") (term "1,1,0,1,1,0"))
      (rule "polySimp_rightDist" (formula "27") (term "0,1,0,1,1,0"))
      (rule "polySimp_mulLiterals" (formula "27") (term "1,0,1,0,1,1,0"))
      (rule "polySimp_mulComm0" (formula "27") (term "0,0,1,0,1,1,0"))
      (rule "polySimp_addAssoc" (formula "27") (term "0,1,1,0"))
      (rule "polySimp_addAssoc" (formula "27") (term "0,0,1,1,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "27") (term "1,1,0"))
      (rule "polySimp_mulComm0" (formula "27") (term "1,1,1,0"))
      (rule "polySimp_rightDist" (formula "27") (term "1,1,1,0"))
      (rule "polySimp_mulLiterals" (formula "27") (term "1,1,1,1,0"))
      (rule "polySimp_rightDist" (formula "27") (term "0,1,1,1,0"))
      (rule "polySimp_mulLiterals" (formula "27") (term "1,0,1,1,1,0"))
      (rule "polySimp_elimOne" (formula "27") (term "1,0,1,1,1,0"))
      (rule "polySimp_rightDist" (formula "27") (term "0,0,1,1,1,0"))
      (rule "mul_literals" (formula "27") (term "0,0,0,1,1,1,0"))
      (rule "nnf_imp2or" (formula "28") (term "0"))
      (rule "commute_and" (formula "27") (term "1,0,0"))
      (rule "Definition_axiom_for_isSortedSliceTransitive_in_de_wiesler_Functions" (formula "26") (term "0") (inst "j=j") (inst "i=i"))
       (builtin "One Step Simplification" (formula "26"))
      (rule "expand_inInt" (formula "26") (term "1,0,0"))
      (rule "expand_inInt" (formula "26") (term "1,0,0,1,0"))
      (rule "replace_int_MAX" (formula "26") (term "1,0,1,0,0"))
      (rule "replace_int_MIN" (formula "26") (term "0,1,1,0,0"))
      (rule "replace_int_MIN" (formula "26") (term "0,1,1,0,0,1,0"))
      (rule "replace_int_MAX" (formula "26") (term "1,0,1,0,0,1,0"))
      (rule "inEqSimp_ltToLeq" (formula "26") (term "1,0,0,0,1,0"))
      (rule "polySimp_rightDist" (formula "26") (term "1,0,0,1,0,0,0,1,0"))
      (rule "mul_literals" (formula "26") (term "0,1,0,0,1,0,0,0,1,0"))
      (rule "polySimp_addAssoc" (formula "26") (term "0,0,1,0,0,0,1,0"))
      (rule "add_literals" (formula "26") (term "0,0,0,1,0,0,0,1,0"))
      (rule "inEqSimp_ltToLeq" (formula "26") (term "1,0,0,0"))
      (rule "polySimp_rightDist" (formula "26") (term "1,0,0,1,0,0,0"))
      (rule "mul_literals" (formula "26") (term "0,1,0,0,1,0,0,0"))
      (rule "polySimp_addAssoc" (formula "26") (term "0,0,1,0,0,0"))
      (rule "add_literals" (formula "26") (term "0,0,0,1,0,0,0"))
      (rule "inEqSimp_commuteLeq" (formula "26") (term "0,0,0,0,1,0"))
      (rule "inEqSimp_commuteLeq" (formula "26") (term "0,0,0,0"))
      (rule "inEqSimp_commuteLeq" (formula "26") (term "1,0,1,0"))
      (rule "inEqSimp_commuteLeq" (formula "26") (term "1,1,0,0"))
      (rule "inEqSimp_commuteLeq" (formula "26") (term "1,1,0,0,1,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "1,0,0,0,1,0"))
      (rule "polySimp_mulComm0" (formula "26") (term "1,1,0,0,0,1,0"))
      (rule "polySimp_rightDist" (formula "26") (term "1,1,0,0,0,1,0"))
      (rule "mul_literals" (formula "26") (term "0,1,1,0,0,0,1,0"))
      (rule "polySimp_mulLiterals" (formula "26") (term "1,1,1,0,0,0,1,0"))
      (rule "polySimp_elimOne" (formula "26") (term "1,1,1,0,0,0,1,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "1,0,0,0"))
      (rule "polySimp_mulComm0" (formula "26") (term "1,1,0,0,0"))
      (rule "polySimp_rightDist" (formula "26") (term "1,1,0,0,0"))
      (rule "polySimp_mulLiterals" (formula "26") (term "1,1,1,0,0,0"))
      (rule "mul_literals" (formula "26") (term "0,1,1,0,0,0"))
      (rule "polySimp_elimOne" (formula "26") (term "1,1,1,0,0,0"))
      (rule "nnf_imp2or" (formula "27") (term "0"))
      (rule "nnf_notAnd" (formula "28") (term "0,0"))
      (rule "nnf_imp2or" (formula "26") (term "0"))
      (rule "nnf_notAnd" (formula "27") (term "0,0"))
      (rule "nnf_notAnd" (formula "26") (term "0,0"))
      (rule "nnf_notAnd" (formula "28") (term "1,0,0"))
      (rule "inEqSimp_notLeq" (formula "28") (term "0,1,0,0"))
      (rule "mul_literals" (formula "28") (term "1,0,0,0,1,0,0"))
      (rule "add_literals" (formula "28") (term "0,0,0,1,0,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "28") (term "0,1,0,0"))
      (rule "mul_literals" (formula "28") (term "1,0,1,0,0"))
      (rule "inEqSimp_notGeq" (formula "28") (term "1,1,0,0"))
      (rule "mul_literals" (formula "28") (term "1,0,0,1,1,0,0"))
      (rule "add_literals" (formula "28") (term "0,0,1,1,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "28") (term "1,1,0,0"))
      (rule "mul_literals" (formula "28") (term "1,1,1,0,0"))
      (rule "nnf_notAnd" (formula "28") (term "0,0,0"))
      (rule "inEqSimp_notLeq" (formula "28") (term "1,0,0,0"))
      (rule "polySimp_rightDist" (formula "28") (term "1,0,0,1,0,0,0"))
      (rule "mul_literals" (formula "28") (term "0,1,0,0,1,0,0,0"))
      (rule "polySimp_addAssoc" (formula "28") (term "0,0,1,0,0,0"))
      (rule "add_literals" (formula "28") (term "0,0,0,1,0,0,0"))
      (rule "add_zero_left" (formula "28") (term "0,0,1,0,0,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "28") (term "1,0,0,0"))
      (rule "polySimp_mulLiterals" (formula "28") (term "1,1,0,0,0"))
      (rule "polySimp_elimOne" (formula "28") (term "1,1,0,0,0"))
      (rule "inEqSimp_notGeq" (formula "28") (term "0,0,0,0"))
      (rule "mul_literals" (formula "28") (term "1,0,0,0,0,0,0"))
      (rule "add_literals" (formula "28") (term "0,0,0,0,0,0"))
      (rule "add_zero_left" (formula "28") (term "0,0,0,0,0"))
      (rule "nnf_imp2or" (formula "26") (term "0,1,0"))
      (rule "nnf_notAnd" (formula "27") (term "1,0,0"))
      (rule "inEqSimp_notGeq" (formula "27") (term "0,1,0,0"))
      (rule "mul_literals" (formula "27") (term "1,0,0,0,1,0,0"))
      (rule "add_literals" (formula "27") (term "0,0,0,1,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "27") (term "0,1,0,0"))
      (rule "mul_literals" (formula "27") (term "1,0,1,0,0"))
      (rule "inEqSimp_notLeq" (formula "27") (term "1,1,0,0"))
      (rule "mul_literals" (formula "27") (term "1,0,0,1,1,0,0"))
      (rule "add_literals" (formula "27") (term "0,0,1,1,0,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "27") (term "1,1,0,0"))
      (rule "mul_literals" (formula "27") (term "1,1,1,0,0"))
      (rule "nnf_notAnd" (formula "27") (term "0,0,0"))
      (rule "inEqSimp_notLeq" (formula "27") (term "1,0,0,0"))
      (rule "polySimp_rightDist" (formula "27") (term "1,0,0,1,0,0,0"))
      (rule "mul_literals" (formula "27") (term "0,1,0,0,1,0,0,0"))
      (rule "polySimp_addAssoc" (formula "27") (term "0,0,1,0,0,0"))
      (rule "add_literals" (formula "27") (term "0,0,0,1,0,0,0"))
      (rule "add_zero_left" (formula "27") (term "0,0,1,0,0,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "27") (term "1,0,0,0"))
      (rule "polySimp_mulLiterals" (formula "27") (term "1,1,0,0,0"))
      (rule "polySimp_elimOne" (formula "27") (term "1,1,0,0,0"))
      (rule "inEqSimp_notGeq" (formula "27") (term "0,0,0,0"))
      (rule "mul_literals" (formula "27") (term "1,0,0,0,0,0,0"))
      (rule "add_literals" (formula "27") (term "0,0,0,0,0,0"))
      (rule "add_zero_left" (formula "27") (term "0,0,0,0,0"))
      (rule "nnf_notAnd" (formula "26") (term "1,0,0"))
      (rule "inEqSimp_notGeq" (formula "26") (term "1,1,0,0"))
      (rule "mul_literals" (formula "26") (term "1,0,0,1,1,0,0"))
      (rule "add_literals" (formula "26") (term "0,0,1,1,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "1,1,0,0"))
      (rule "mul_literals" (formula "26") (term "1,1,1,0,0"))
      (rule "inEqSimp_notLeq" (formula "26") (term "0,1,0,0"))
      (rule "mul_literals" (formula "26") (term "1,0,0,0,1,0,0"))
      (rule "add_literals" (formula "26") (term "0,0,0,1,0,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "26") (term "0,1,0,0"))
      (rule "mul_literals" (formula "26") (term "1,0,1,0,0"))
      (rule "nnf_notAnd" (formula "26") (term "0,0,0"))
      (rule "inEqSimp_notLeq" (formula "26") (term "1,0,0,0"))
      (rule "polySimp_rightDist" (formula "26") (term "1,0,0,1,0,0,0"))
      (rule "mul_literals" (formula "26") (term "0,1,0,0,1,0,0,0"))
      (rule "polySimp_addAssoc" (formula "26") (term "0,0,1,0,0,0"))
      (rule "add_literals" (formula "26") (term "0,0,0,1,0,0,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "26") (term "1,0,0,0"))
      (rule "polySimp_mulComm0" (formula "26") (term "1,1,0,0,0"))
      (rule "polySimp_rightDist" (formula "26") (term "1,1,0,0,0"))
      (rule "polySimp_mulLiterals" (formula "26") (term "1,1,1,0,0,0"))
      (rule "mul_literals" (formula "26") (term "0,1,1,0,0,0"))
      (rule "polySimp_elimOne" (formula "26") (term "1,1,1,0,0,0"))
      (rule "inEqSimp_notGeq" (formula "26") (term "0,0,0,0"))
      (rule "times_zero_1" (formula "26") (term "1,0,0,0,0,0,0"))
      (rule "add_literals" (formula "26") (term "0,0,0,0,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "0,0,0,0"))
      (rule "mul_literals" (formula "26") (term "1,0,0,0,0"))
      (rule "ifthenelse_split" (formula "1") (term "0,2,0"))
      (branch "self.sorted_splitters[b + d * -1] <= -1 + value TRUE"
         (rule "replace_known_left" (formula "33") (term "0,0") (ifseqformula "1"))
          (builtin "One Step Simplification" (formula "33"))
         (rule "translateJavaDivInt" (formula "1") (term "0,1,0,2,0"))
         (rule "polySimp_homoEq" (formula "33"))
         (rule "polySimp_addComm1" (formula "33") (term "0"))
         (rule "polySimp_sepPosMonomial" (formula "33"))
         (rule "polySimp_mulComm0" (formula "33") (term "1"))
         (rule "polySimp_rightDist" (formula "33") (term "1"))
         (rule "polySimp_mulLiterals" (formula "33") (term "1,1"))
         (rule "mul_literals" (formula "33") (term "0,1"))
         (rule "polySimp_elimOne" (formula "33") (term "1,1"))
         (rule "replace_known_right" (formula "16") (term "0") (ifseqformula "33"))
          (builtin "One Step Simplification" (formula "16"))
         (rule "inEqSimp_strengthen1" (formula "14") (ifseqformula "33"))
         (rule "polySimp_addAssoc" (formula "14") (term "1"))
         (rule "add_literals" (formula "14") (term "0,1"))
         (rule "inEqSimp_contradEq7" (formula "33") (ifseqformula "14"))
         (rule "polySimp_rightDist" (formula "33") (term "1,0,0"))
         (rule "mul_literals" (formula "33") (term "0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "33") (term "0,0"))
         (rule "polySimp_addComm1" (formula "33") (term "0,0,0"))
         (rule "add_literals" (formula "33") (term "0,0,0,0"))
         (rule "polySimp_pullOutFactor1b" (formula "33") (term "0,0"))
         (rule "add_literals" (formula "33") (term "1,1,0,0"))
         (rule "times_zero_1" (formula "33") (term "1,0,0"))
         (rule "add_zero_right" (formula "33") (term "0,0"))
         (rule "leq_literals" (formula "33") (term "0"))
          (builtin "One Step Simplification" (formula "33"))
         (rule "false_right" (formula "33"))
         (rule "inEqSimp_contradInEq0" (formula "16") (ifseqformula "2"))
         (rule "andLeft" (formula "16"))
         (rule "inEqSimp_homoInEq1" (formula "16"))
         (rule "polySimp_mulComm0" (formula "16") (term "1,0"))
         (rule "polySimp_rightDist" (formula "16") (term "1,0"))
         (rule "mul_literals" (formula "16") (term "0,1,0"))
         (rule "polySimp_addAssoc" (formula "16") (term "0"))
         (rule "polySimp_addComm0" (formula "16") (term "0,0"))
         (rule "polySimp_pullOutFactor1b" (formula "16") (term "0"))
         (rule "add_literals" (formula "16") (term "1,1,0"))
         (rule "times_zero_1" (formula "16") (term "1,0"))
         (rule "add_literals" (formula "16") (term "0"))
         (rule "leq_literals" (formula "16"))
         (rule "closeFalse" (formula "16"))
      )
      (branch "self.sorted_splitters[b + d * -1] <= -1 + value FALSE"
         (rule "close" (formula "29") (ifseqformula "1"))
      )
   )
)
(branch "Case 2"
   (rule "close" (formula "16") (ifseqformula "13"))
)
)
}
