\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Thu Aug 04 23:46:22 CEST 2022
[NewSMT]NoTypeHierarchy=false
[Labels]UseOriginLabels=true
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[NewSMT]Presburger=false
[SMTSettings]invariantForall=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[Choice]DefaultChoices=JavaCard-JavaCard\\:on , Strings-Strings\\:on , assertions-assertions\\:safe , bigint-bigint\\:on , finalFields-finalFields\\:immutable , floatRules-floatRules\\:strictfpOnly , initialisation-initialisation\\:disableStaticInitialisation , intRules-intRules\\:arithmeticSemanticsIgnoringOF , integerSimplificationRules-integerSimplificationRules\\:full , javaLoopTreatment-javaLoopTreatment\\:efficient , mergeGenerateIsWeakeningGoal-mergeGenerateIsWeakeningGoal\\:off , methodExpansion-methodExpansion\\:modularOnly , modelFields-modelFields\\:treatAsAxiom , moreSeqRules-moreSeqRules\\:on , permissions-permissions\\:off , programRules-programRules\\:Java , reach-reach\\:on , runtimeExceptions-runtimeExceptions\\:ban , sequences-sequences\\:on , wdChecks-wdChecks\\:off , wdOperator-wdOperator\\:L
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_SCOPE_INV_TACLET
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_DEF_OPS
[SMTSettings]SelectedTaclets=
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[Strategy]MaximumNumberOfAutomaticApplications=10000
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_DELAYED
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]MPS_OPTIONS_KEY=MPS_MERGE
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[Strategy]Timeout=-1
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_OFF
[SMTSettings]useUninterpretedMultiplication=true
[NewSMT]sqrtSMTTranslation=SMT
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT_INTERNAL
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[NewSMT]identifier=OPEN
[SMTSettings]maxGenericSorts=2
[StrategyProperty]OSS_OPTIONS_KEY=OSS_ON
[NewSMT]Axiomatisations=false
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
[SMTSettings]integersMinimum=-2147483645
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]integersMaximum=2147483645
"
}

\javaSource "../../src";

\proofObligation "#Proof Obligation Settings
#Thu Aug 04 23:46:22 CEST 2022
contract=de.wiesler.Tree[de.wiesler.Tree\\:\\:classify(int)].JML normal_behavior operation contract.0
name=de.wiesler.Tree[de.wiesler.Tree\\:\\:classify(int)].JML normal_behavior operation contract.0
class=de.uka.ilkd.key.proof.init.FunctionalOperationContractPO
";

\proof {
(keyLog "0" (keyUser "Julian" ) (keyVersion "e1a85b31e7"))
(keyLog "1" (keyUser "Julian" ) (keyVersion "e1a85b31e7"))
(keyLog "2" (keyUser "Julian" ) (keyVersion "e1a85b31e7"))
(keyLog "3" (keyUser "Julian" ) (keyVersion "e1a85b31e7"))
(keyLog "4" (keyUser "Julian" ) (keyVersion "e1a85b31e7"))
(keyLog "5" (keyUser "Julian" ) (keyVersion "e1a85b31e7"))

(autoModeTime "185204")

(branch "dummy ID"
 (builtin "One Step Simplification" (formula "1") (newnames "heapAtPre,o,f"))
(rule "impRight" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "3"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "2"))
(rule "eqSymm" (formula "8") (term "0,0,1,0,1"))
(rule "inEqSimp_commuteLeq" (formula "8") (term "0,0,0,0,0,1"))
(rule "assignment" (formula "8") (term "1"))
 (builtin "One Step Simplification" (formula "8"))
(rule "methodBodyExpand" (formula "8") (term "1") (newnames "heapBefore_classify,savedHeapBefore_classify,_valueBefore_classify"))
 (builtin "One Step Simplification" (formula "8"))
(rule "variableDeclarationAssign" (formula "8") (term "1"))
(rule "variableDeclaration" (formula "8") (term "1") (newnames "b"))
(rule "compound_subtraction_1" (formula "8") (term "1") (inst "#v=x"))
(rule "variableDeclarationAssign" (formula "8") (term "1"))
(rule "variableDeclaration" (formula "8") (term "1") (newnames "x"))
(rule "remove_parentheses_right" (formula "8") (term "1"))
(rule "compound_shiftleft_2" (formula "8") (term "1") (inst "#v0=x_1") (inst "#v1=x_2"))
(rule "variableDeclarationAssign" (formula "8") (term "1"))
(rule "variableDeclaration" (formula "8") (term "1") (newnames "x_1"))
(rule "assignment" (formula "8") (term "1"))
 (builtin "One Step Simplification" (formula "8"))
(rule "variableDeclarationAssign" (formula "8") (term "1"))
(rule "variableDeclaration" (formula "8") (term "1") (newnames "x_2"))
(rule "assignment_read_attribute_this_final" (formula "8"))
 (builtin "One Step Simplification" (formula "8"))
(rule "assignmentShiftLeftInt" (formula "8") (term "1"))
 (builtin "One Step Simplification" (formula "8"))
(rule "assignmentSubtractionInt" (formula "8") (term "1"))
(branch "Overflow check"
    (builtin "One Step Simplification" (formula "8"))
   (rule "closeTrue" (formula "8"))
)
(branch "Usage"
    (builtin "One Step Simplification" (formula "8"))
   (rule "translateJavaSubInt" (formula "8") (term "0,1,0"))
   (rule "polySimp_elimSub" (formula "8") (term "0,1,0"))
   (rule "mul_literals" (formula "8") (term "1,0,1,0"))
   (rule "polySimp_addComm0" (formula "8") (term "0,1,0"))
   (rule "variableDeclarationGhostAssign" (formula "8") (term "1"))
   (rule "variableDeclarationGhost" (formula "8") (term "1") (newnames "exp"))
   (rule "assignment_read_attribute_this_final" (formula "8"))
    (builtin "One Step Simplification" (formula "8"))
   (rule "for_to_while" (formula "8") (term "1") (inst "#innerLabel=_label0") (inst "#outerLabel=_label1"))
   (rule "variableDeclarationAssign" (formula "8") (term "1"))
   (rule "variableDeclaration" (formula "8") (term "1") (newnames "d"))
   (rule "compound_shiftleft_2" (formula "8") (term "1") (inst "#v0=x") (inst "#v1=x_1"))
   (rule "variableDeclarationAssign" (formula "8") (term "1"))
   (rule "variableDeclaration" (formula "8") (term "1") (newnames "x_3"))
   (rule "assignment" (formula "8") (term "1"))
    (builtin "One Step Simplification" (formula "8"))
   (rule "variableDeclarationAssign" (formula "8") (term "1"))
   (rule "variableDeclaration" (formula "8") (term "1") (newnames "x_4"))
   (rule "assignment_read_attribute_this_final" (formula "8"))
    (builtin "One Step Simplification" (formula "8"))
   (rule "assignmentShiftLeftInt" (formula "8") (term "1"))
    (builtin "One Step Simplification" (formula "8"))
   (rule "elim_double_block_3" (formula "8") (term "1"))
   (rule "loopScopeInvDia" (formula "8") (term "1") (newnames "exp_0,b_0,d_0,o,f") (inst "anon_heap_LOOP=anon_heap_LOOP_0") (inst "anon_savedHeap_LOOP=anon_savedHeap_LOOP_0") (inst "anon_permissions_LOOP=anon_permissions_LOOP_0") (inst "#heapBefore_LOOP=h") (inst "#savedHeapBefore_LOOP=h_1") (inst "#permissionsBefore_LOOP=h_2") (inst "#variant=x") (inst "#x=x_1"))
   (branch "Invariant Initially Valid"
      (rule "andRight" (formula "8"))
      (branch
         (rule "andRight" (formula "8"))
         (branch
            (rule "andRight" (formula "8"))
            (branch
               (rule "andRight" (formula "8"))
               (branch
                  (rule "andRight" (formula "8"))
                  (branch
                      (builtin "One Step Simplification" (formula "8"))
                     (rule "translateJavaSubInt" (formula "8") (term "0"))
                     (rule "polySimp_elimSub" (formula "8") (term "0"))
                     (rule "mul_literals" (formula "8") (term "1,0"))
                     (rule "polySimp_addComm0" (formula "8") (term "0"))
                     (rule "inEqSimp_leqRight" (formula "8"))
                     (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                     (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                     (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                     (rule "add_literals" (formula "1") (term "0,0,0"))
                     (rule "add_zero_left" (formula "1") (term "0,0"))
                     (rule "polySimp_addAssoc" (formula "1") (term "0"))
                     (rule "polySimp_addComm0" (formula "1") (term "0,0"))
                     (rule "polySimp_pullOutFactor2b" (formula "1") (term "0"))
                     (rule "add_literals" (formula "1") (term "1,1,0"))
                     (rule "times_zero_1" (formula "1") (term "1,0"))
                     (rule "add_zero_right" (formula "1") (term "0"))
                     (rule "qeq_literals" (formula "1"))
                     (rule "closeFalse" (formula "1"))
                  )
                  (branch
                      (builtin "One Step Simplification" (formula "8"))
                     (rule "translateJavaSubInt" (formula "8") (term "1"))
                     (rule "polySimp_elimSub" (formula "8") (term "1"))
                     (rule "mul_literals" (formula "8") (term "1,1"))
                     (rule "polySimp_addComm0" (formula "8") (term "1"))
                     (rule "inEqSimp_leqRight" (formula "8"))
                     (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                     (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                     (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                     (rule "add_literals" (formula "1") (term "0,0,0"))
                     (rule "add_zero_left" (formula "1") (term "0,0"))
                     (rule "polySimp_addComm0" (formula "1") (term "0"))
                     (rule "inEqSimp_sepNegMonomial1" (formula "1"))
                     (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                     (rule "polySimp_elimOne" (formula "1") (term "0"))
                     (rule "Free_class_invariant_axiom_for_de_wiesler_Tree" (formula "7"))
                     (rule "true_left" (formula "7"))
                     (rule "Class_invariant_axiom_for_de_wiesler_Tree" (formula "6"))
                      (builtin "One Step Simplification" (formula "6"))
                     (rule "translateJavaSubInt" (formula "6") (term "3,0,1"))
                     (rule "andLeft" (formula "6"))
                     (rule "andLeft" (formula "6"))
                     (rule "andLeft" (formula "6"))
                     (rule "andLeft" (formula "7"))
                     (rule "andLeft" (formula "6"))
                     (rule "andLeft" (formula "6"))
                     (rule "andLeft" (formula "6"))
                     (rule "andLeft" (formula "8"))
                     (rule "notLeft" (formula "7"))
                     (rule "notLeft" (formula "6"))
                     (rule "polySimp_elimSub" (formula "12") (term "3,0"))
                     (rule "mul_literals" (formula "12") (term "1,3,0"))
                     (rule "polySimp_addComm0" (formula "12") (term "3,0"))
                     (rule "inEqSimp_commuteLeq" (formula "11"))
                     (rule "inEqSimp_commuteLeq" (formula "10"))
                     (rule "inEqSimp_commuteLeq" (formula "9"))
                     (rule "inEqSimp_commuteLeq" (formula "6"))
                     (rule "applyEq" (formula "9") (term "0") (ifseqformula "8"))
                     (rule "applyEq" (formula "10") (term "1") (ifseqformula "8"))
                     (rule "applyEq" (formula "11") (term "1") (ifseqformula "8"))
                     (rule "applyEq" (formula "12") (term "1,3,0") (ifseqformula "8"))
                     (rule "applyEq" (formula "1") (term "0") (ifseqformula "8"))
                     (rule "inEqSimp_homoInEq0" (formula "1"))
                     (rule "polySimp_pullOutFactor1b" (formula "1") (term "0"))
                     (rule "add_literals" (formula "1") (term "1,1,0"))
                     (rule "times_zero_1" (formula "1") (term "1,0"))
                     (rule "add_zero_right" (formula "1") (term "0"))
                     (rule "qeq_literals" (formula "1"))
                     (rule "closeFalse" (formula "1"))
                  )
               )
               (branch
                  (rule "andRight" (formula "8"))
                  (branch
                      (builtin "One Step Simplification" (formula "8"))
                     (rule "inEqSimp_leqRight" (formula "8"))
                     (rule "add_zero_right" (formula "1") (term "0"))
                     (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
                     (rule "inEqSimp_sepNegMonomial1" (formula "1"))
                     (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                     (rule "polySimp_elimOne" (formula "1") (term "0"))
                     (rule "Free_class_invariant_axiom_for_de_wiesler_Tree" (formula "7"))
                     (rule "true_left" (formula "7"))
                     (rule "Class_invariant_axiom_for_de_wiesler_Tree" (formula "6"))
                      (builtin "One Step Simplification" (formula "6"))
                     (rule "translateJavaSubInt" (formula "6") (term "3,0,1"))
                     (rule "andLeft" (formula "6"))
                     (rule "andLeft" (formula "6"))
                     (rule "andLeft" (formula "6"))
                     (rule "andLeft" (formula "7"))
                     (rule "andLeft" (formula "6"))
                     (rule "andLeft" (formula "6"))
                     (rule "andLeft" (formula "6"))
                     (rule "andLeft" (formula "8"))
                     (rule "notLeft" (formula "7"))
                     (rule "notLeft" (formula "6"))
                     (rule "polySimp_elimSub" (formula "12") (term "3,0"))
                     (rule "mul_literals" (formula "12") (term "1,3,0"))
                     (rule "polySimp_addComm0" (formula "12") (term "3,0"))
                     (rule "inEqSimp_commuteLeq" (formula "11"))
                     (rule "inEqSimp_commuteLeq" (formula "9"))
                     (rule "inEqSimp_commuteLeq" (formula "10"))
                     (rule "inEqSimp_commuteLeq" (formula "6"))
                     (rule "applyEq" (formula "10") (term "1") (ifseqformula "8"))
                     (rule "applyEq" (formula "9") (term "0") (ifseqformula "8"))
                     (rule "applyEq" (formula "12") (term "1,3,0") (ifseqformula "8"))
                     (rule "applyEq" (formula "11") (term "1") (ifseqformula "8"))
                     (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "6"))
                     (rule "qeq_literals" (formula "1") (term "0"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "closeFalse" (formula "1"))
                  )
                  (branch
                      (builtin "One Step Simplification" (formula "8"))
                     (rule "inEqSimp_leqRight" (formula "8"))
                     (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                     (rule "polySimp_pullOutFactor2b" (formula "1") (term "0"))
                     (rule "add_literals" (formula "1") (term "1,1,0"))
                     (rule "times_zero_1" (formula "1") (term "1,0"))
                     (rule "add_zero_right" (formula "1") (term "0"))
                     (rule "qeq_literals" (formula "1"))
                     (rule "closeFalse" (formula "1"))
                  )
               )
            )
            (branch
                (builtin "One Step Simplification" (formula "8"))
               (rule "closeTrue" (formula "8"))
            )
         )
         (branch
            (rule "orRight" (formula "8"))
             (builtin "One Step Simplification" (formula "9"))
             (builtin "One Step Simplification" (formula "8"))
            (rule "translateJavaSubInt" (formula "9") (term "0,2,0"))
            (rule "translateJavaSubInt" (formula "8") (term "0"))
            (rule "polySimp_elimSub" (formula "9") (term "0,2,0"))
            (rule "polySimp_elimSub" (formula "8") (term "0"))
            (rule "polySimp_pullOutFactor1b" (formula "9") (term "0,2,0"))
            (rule "add_literals" (formula "9") (term "1,1,0,2,0"))
            (rule "times_zero_1" (formula "9") (term "1,0,2,0"))
            (rule "add_zero_right" (formula "9") (term "0,2,0"))
            (rule "polySimp_homoEq" (formula "8"))
            (rule "polySimp_pullOutFactor1b" (formula "8") (term "0,1,0"))
            (rule "add_literals" (formula "8") (term "1,1,0,1,0"))
            (rule "times_zero_1" (formula "8") (term "1,0,1,0"))
            (rule "add_zero_right" (formula "8") (term "0,1,0"))
            (rule "mul_literals" (formula "8") (term "1,0"))
            (rule "add_literals" (formula "8") (term "0"))
             (builtin "One Step Simplification" (formula "8"))
            (rule "closeTrue" (formula "8"))
         )
      )
      (branch
         (rule "orRight" (formula "8"))
          (builtin "One Step Simplification" (formula "9"))
          (builtin "One Step Simplification" (formula "8"))
         (rule "translateJavaSubInt" (formula "8") (term "1"))
         (rule "eqSymm" (formula "8"))
         (rule "polySimp_elimSub" (formula "8") (term "0"))
         (rule "mul_literals" (formula "8") (term "1,0"))
         (rule "polySimp_homoEq" (formula "8"))
         (rule "polySimp_mulComm0" (formula "8") (term "1,0"))
         (rule "polySimp_addComm0" (formula "8") (term "1,1,0"))
         (rule "polySimp_rightDist" (formula "8") (term "1,0"))
         (rule "mul_literals" (formula "8") (term "0,1,0"))
         (rule "polySimp_addAssoc" (formula "8") (term "0"))
         (rule "polySimp_addComm1" (formula "8") (term "0,0"))
         (rule "add_literals" (formula "8") (term "0,0,0"))
         (rule "add_zero_left" (formula "8") (term "0,0"))
         (rule "inEqSimp_leqRight" (formula "9"))
         (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
         (rule "polySimp_addComm1" (formula "1") (term "0"))
         (rule "polySimp_sepNegMonomial" (formula "9"))
         (rule "polySimp_mulLiterals" (formula "9") (term "0"))
         (rule "polySimp_elimOne" (formula "9") (term "0"))
         (rule "inEqSimp_sepNegMonomial1" (formula "1"))
         (rule "polySimp_mulLiterals" (formula "1") (term "0"))
         (rule "polySimp_elimOne" (formula "1") (term "0"))
         (rule "Free_class_invariant_axiom_for_de_wiesler_Tree" (formula "7"))
         (rule "true_left" (formula "7"))
         (rule "Class_invariant_axiom_for_de_wiesler_Tree" (formula "6"))
          (builtin "One Step Simplification" (formula "6") (ifInst ""  (formula "8")))
         (rule "closeFalse" (formula "6"))
      )
   )
   (branch "Invariant Preserved and Used"
       (builtin "One Step Simplification" (formula "9"))
      (rule "translateJavaSubInt" (formula "9") (term "1,0,1,0,0,1,1,0,1,1"))
      (rule "translateJavaSubInt" (formula "9") (term "0,0,1,0,0,0,1,1,0,1,1"))
      (rule "translateJavaSubInt" (formula "9") (term "1,0,1,0"))
      (rule "translateJavaSubInt" (formula "9") (term "0,2,0,1,1,0,0"))
      (rule "translateJavaSubInt" (formula "9") (term "0,0,1,0,0"))
      (rule "translateJavaSubInt" (formula "9") (term "1,1,0,0,0,0,0"))
      (rule "translateJavaSubInt" (formula "9") (term "0,0,0,0,0,0,0,0,1,1,0,1,1"))
      (rule "translateJavaSubInt" (formula "9") (term "1,1,0,0,0,0,0,0,1,1,0,1,1"))
      (rule "translateJavaSubInt" (formula "9") (term "0,2,0,1,1,0,0,0,1,1,0,1,1"))
      (rule "translateJavaSubInt" (formula "9") (term "0,0,0,0,0,0,0"))
      (rule "impRight" (formula "9"))
      (rule "andLeft" (formula "1"))
      (rule "andLeft" (formula "1"))
      (rule "andLeft" (formula "1"))
      (rule "andLeft" (formula "1"))
      (rule "andLeft" (formula "1"))
      (rule "andLeft" (formula "3"))
      (rule "eqSymm" (formula "16") (term "0,1,0,0,1,1,0,1"))
      (rule "eqSymm" (formula "16") (term "1,0,0,0,0,1,1,0,1"))
      (rule "eqSymm" (formula "16") (term "0,0,1,0,1,1,0,1"))
      (rule "eqSymm" (formula "7") (term "0"))
      (rule "eqSymm" (formula "5"))
      (rule "polySimp_elimSub" (formula "16") (term "0,0,1,0,0,0,1,1,0,1"))
      (rule "polySimp_elimSub" (formula "16") (term "0,2,0,1,1,0,0,0,1,1,0,1"))
      (rule "polySimp_elimSub" (formula "16") (term "0,0,0,0,0,0,0,0,1,1,0,1"))
      (rule "mul_literals" (formula "16") (term "1,0,0,0,0,0,0,0,0,1,1,0,1"))
      (rule "polySimp_elimSub" (formula "16") (term "1,1,0,0,0,0,0,0,1,1,0,1"))
      (rule "mul_literals" (formula "16") (term "1,1,1,0,0,0,0,0,0,1,1,0,1"))
      (rule "polySimp_elimSub" (formula "6") (term "0,2,0,1"))
      (rule "polySimp_elimSub" (formula "6") (term "0,0"))
      (rule "polySimp_elimSub" (formula "2") (term "1"))
      (rule "mul_literals" (formula "2") (term "1,1"))
      (rule "polySimp_elimSub" (formula "1") (term "0"))
      (rule "mul_literals" (formula "1") (term "1,0"))
      (rule "polySimp_elimSub" (formula "16") (term "0,0,1,0,0,1,1,0,1"))
      (rule "mul_literals" (formula "16") (term "1,0,0,1,0,0,1,1,0,1"))
      (rule "polySimp_elimSub" (formula "7") (term "0,0"))
      (rule "mul_literals" (formula "7") (term "1,0,0"))
      (rule "polySimp_addComm0" (formula "16") (term "0,0,0,0,0,0,0,0,1,1,0,1"))
      (rule "polySimp_addComm0" (formula "16") (term "1,1,0,0,0,0,0,0,1,1,0,1"))
      (rule "polySimp_addComm0" (formula "2") (term "1"))
      (rule "polySimp_addComm0" (formula "1") (term "0"))
      (rule "polySimp_addComm0" (formula "16") (term "0,0,1,0,0,1,1,0,1"))
      (rule "polySimp_addComm0" (formula "7") (term "0,0"))
      (rule "inEqSimp_commuteLeq" (formula "16") (term "1,1,0,0,1,1,0,1"))
      (rule "inEqSimp_commuteLeq" (formula "16") (term "1,1,0,0,0,0,0,1,1,0,1"))
      (rule "inEqSimp_commuteLeq" (formula "16") (term "0,1,0,0,0,0,0,1,1,0,1"))
      (rule "inEqSimp_commuteLeq" (formula "7") (term "1"))
      (rule "inEqSimp_commuteLeq" (formula "3"))
      (rule "inEqSimp_commuteLeq" (formula "4"))
      (rule "variableDeclaration" (formula "16") (term "1") (newnames "x_5"))
      (rule "commute_or" (formula "6"))
      (rule "ifElseUnfold" (formula "16") (term "1") (inst "#boolv=x_6"))
      (rule "variableDeclaration" (formula "16") (term "1") (newnames "x_6"))
      (rule "greater_than_comparison_simple" (formula "16") (term "1"))
       (builtin "One Step Simplification" (formula "16"))
      (rule "ifElseSplit" (formula "16"))
      (branch "if x_6 true"
          (builtin "One Step Simplification" (formula "17"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "compound_assignment_op_div" (formula "17") (term "1"))
         (rule "compound_int_cast_expression" (formula "17") (term "1") (inst "#v=x_6"))
         (rule "variableDeclarationAssign" (formula "17") (term "1"))
         (rule "variableDeclaration" (formula "17") (term "1") (newnames "x_7"))
         (rule "remove_parentheses_right" (formula "17") (term "1"))
         (rule "compound_division_2" (formula "17") (term "1") (inst "#v0=x_8") (inst "#v1=x_9"))
         (rule "variableDeclarationAssign" (formula "17") (term "1"))
         (rule "variableDeclaration" (formula "17") (term "1") (newnames "x_8"))
         (rule "assignment" (formula "17") (term "1"))
          (builtin "One Step Simplification" (formula "17"))
         (rule "variableDeclarationAssign" (formula "17") (term "1"))
         (rule "variableDeclaration" (formula "17") (term "1") (newnames "x_9"))
         (rule "remove_parentheses_right" (formula "17") (term "1"))
         (rule "assignment" (formula "17") (term "1"))
          (builtin "One Step Simplification" (formula "17"))
         (rule "assignmentDivisionInt" (formula "17"))
         (branch "Case 1"
             (builtin "One Step Simplification" (formula "17"))
            (rule "translateJavaDivInt" (formula "17") (term "0,1,0"))
            (rule "widening_identity_cast_5" (formula "17") (term "1"))
            (rule "assignment" (formula "17") (term "1"))
             (builtin "One Step Simplification" (formula "17"))
            (rule "condition" (formula "17") (term "1"))
            (rule "ifElseUnfold" (formula "17") (term "1") (inst "#boolv=x_6"))
            (rule "variableDeclaration" (formula "17") (term "1") (newnames "x_10"))
            (rule "compound_less_than_comparison_1" (formula "17") (term "1") (inst "#v0=x_11"))
            (rule "variableDeclarationAssign" (formula "17") (term "1"))
            (rule "variableDeclaration" (formula "17") (term "1") (newnames "x_11"))
            (rule "eval_order_array_access4" (formula "17") (term "1") (inst "#v0=x_arr"))
            (rule "variableDeclarationAssign" (formula "17") (term "1"))
            (rule "variableDeclaration" (formula "17") (term "1") (newnames "x_arr"))
            (rule "assignment_read_attribute_this_final" (formula "17"))
             (builtin "One Step Simplification" (formula "17"))
            (rule "eval_order_array_access5" (formula "17") (term "1") (inst "#ar1=x_arr_1") (inst "#v1=x_12"))
            (rule "variableDeclarationAssign" (formula "17") (term "1"))
            (rule "variableDeclaration" (formula "17") (term "1") (newnames "x_arr_1"))
            (rule "assignment" (formula "17") (term "1"))
             (builtin "One Step Simplification" (formula "17"))
            (rule "variableDeclarationAssign" (formula "17") (term "1"))
            (rule "variableDeclaration" (formula "17") (term "1") (newnames "x_12"))
            (rule "assignmentSubtractionInt" (formula "17") (term "1"))
            (branch "Overflow check"
                (builtin "One Step Simplification" (formula "17"))
               (rule "closeTrue" (formula "17"))
            )
            (branch "Usage"
                (builtin "One Step Simplification" (formula "17"))
               (rule "translateJavaSubInt" (formula "17") (term "0,1,0"))
               (rule "polySimp_elimSub" (formula "17") (term "0,1,0"))
               (rule "assignment_array2" (formula "17"))
               (branch "Normal Execution (x_arr_1 != null)"
                   (builtin "One Step Simplification" (formula "17"))
                  (rule "less_than_comparison_simple" (formula "17") (term "1"))
                   (builtin "One Step Simplification" (formula "17"))
                  (rule "ifElseSplit" (formula "17"))
                  (branch "if x_10 true"
                      (builtin "One Step Simplification" (formula "18"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "assignment" (formula "18") (term "1"))
                      (builtin "One Step Simplification" (formula "18"))
                     (rule "blockEmpty" (formula "18") (term "1"))
                     (rule "assignmentSubtractionInt" (formula "18") (term "1"))
                     (branch "Overflow check"
                         (builtin "One Step Simplification" (formula "18"))
                        (rule "closeTrue" (formula "18"))
                     )
                     (branch "Usage"
                         (builtin "One Step Simplification" (formula "18"))
                        (rule "translateJavaSubInt" (formula "18") (term "0,1,0"))
                        (rule "polySimp_elimSub" (formula "18") (term "0,1,0"))
                        (rule "mul_literals" (formula "18") (term "1,0,1,0"))
                        (rule "polySimp_addComm0" (formula "18") (term "0,1,0"))
                        (rule "emptyStatement" (formula "18") (term "1"))
                        (rule "blockEmpty" (formula "18") (term "1"))
                        (rule "lsContinue" (formula "18") (term "1"))
                         (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "4")) (ifInst ""  (formula "1")) (ifInst ""  (formula "9")))
                        (rule "andRight" (formula "18"))
                        (branch "Case 1"
                           (rule "andRight" (formula "18"))
                           (branch
                              (rule "andRight" (formula "18"))
                              (branch
                                 (rule "polySimp_homoEq" (formula "9") (term "0"))
                                 (rule "polySimp_homoEq" (formula "8") (term "1"))
                                 (rule "polySimp_mulComm0" (formula "9") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "8") (term "1,0,1"))
                                 (rule "polySimp_rightDist" (formula "9") (term "1,0,0"))
                                 (rule "mul_literals" (formula "9") (term "0,1,0,0"))
                                 (rule "polySimp_rightDist" (formula "8") (term "1,0,1"))
                                 (rule "polySimp_mulLiterals" (formula "8") (term "1,1,0,1"))
                                 (rule "polySimp_elimOne" (formula "8") (term "1,1,0,1"))
                                 (rule "polySimp_mulComm0" (formula "8") (term "0,1,0,1"))
                                 (rule "polySimp_addAssoc" (formula "9") (term "0,0"))
                                 (rule "polySimp_addComm0" (formula "9") (term "0,0,0"))
                                 (rule "polySimp_addAssoc" (formula "8") (term "0,1"))
                                 (rule "inEqSimp_leqRight" (formula "18"))
                                 (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                 (rule "polySimp_addAssoc" (formula "1") (term "0"))
                                 (rule "polySimp_addComm1" (formula "1") (term "0,0"))
                                 (rule "add_literals" (formula "1") (term "0,0,0"))
                                 (rule "inEqSimp_gtToGeq" (formula "3"))
                                 (rule "mul_literals" (formula "3") (term "1,0,0"))
                                 (rule "add_literals" (formula "3") (term "0,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "2"))
                                 (rule "polySimp_mulComm0" (formula "2") (term "1,0,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "9") (term "0"))
                                 (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,0"))
                                 (rule "inEqSimp_homoInEq0" (formula "5"))
                                 (rule "polySimp_addComm1" (formula "5") (term "0"))
                                 (rule "inEqSimp_homoInEq0" (formula "4"))
                                 (rule "polySimp_mulComm0" (formula "4") (term "1,0"))
                                 (rule "polySimp_rightDist" (formula "4") (term "1,0"))
                                 (rule "mul_literals" (formula "4") (term "0,1,0"))
                                 (rule "polySimp_addAssoc" (formula "4") (term "0"))
                                 (rule "polySimp_addComm0" (formula "4") (term "0,0"))
                                 (rule "polySimp_sepNegMonomial" (formula "10") (term "0"))
                                 (rule "polySimp_mulLiterals" (formula "10") (term "0,0"))
                                 (rule "polySimp_elimOne" (formula "10") (term "0,0"))
                                 (rule "polySimp_sepPosMonomial" (formula "9") (term "1"))
                                 (rule "polySimp_mulComm0" (formula "9") (term "1,1"))
                                 (rule "polySimp_rightDist" (formula "9") (term "1,1"))
                                 (rule "mul_literals" (formula "9") (term "0,1,1"))
                                 (rule "polySimp_mulLiterals" (formula "9") (term "1,1,1"))
                                 (rule "polySimp_elimOne" (formula "9") (term "1,1,1"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                                 (rule "polySimp_mulComm0" (formula "1") (term "1"))
                                 (rule "polySimp_rightDist" (formula "1") (term "1"))
                                 (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                                 (rule "mul_literals" (formula "1") (term "0,1"))
                                 (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "3"))
                                 (rule "mul_literals" (formula "3") (term "1"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "2"))
                                 (rule "polySimp_mulComm0" (formula "2") (term "1"))
                                 (rule "polySimp_rightDist" (formula "2") (term "1"))
                                 (rule "mul_literals" (formula "2") (term "0,1"))
                                 (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
                                 (rule "polySimp_elimOne" (formula "2") (term "1,1"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "0"))
                                 (rule "polySimp_mulComm0" (formula "9") (term "1,0"))
                                 (rule "polySimp_rightDist" (formula "9") (term "1,0"))
                                 (rule "mul_literals" (formula "9") (term "0,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "9") (term "1,1,0"))
                                 (rule "polySimp_elimOne" (formula "9") (term "1,1,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "5"))
                                 (rule "polySimp_mulComm0" (formula "5") (term "1"))
                                 (rule "polySimp_rightDist" (formula "5") (term "1"))
                                 (rule "mul_literals" (formula "5") (term "0,1"))
                                 (rule "polySimp_mulLiterals" (formula "5") (term "1,1"))
                                 (rule "polySimp_elimOne" (formula "5") (term "1,1"))
                                 (rule "inEqSimp_sepNegMonomial1" (formula "4"))
                                 (rule "polySimp_mulLiterals" (formula "4") (term "0"))
                                 (rule "polySimp_elimOne" (formula "4") (term "0"))
                                 (rule "inEqSimp_exactShadow3" (formula "3") (ifseqformula "4"))
                                 (rule "mul_literals" (formula "3") (term "0,0"))
                                 (rule "polySimp_addAssoc" (formula "3") (term "0"))
                                 (rule "add_literals" (formula "3") (term "0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "3"))
                                 (rule "mul_literals" (formula "3") (term "1"))
                                 (rule "Class_invariant_axiom_for_de_wiesler_Tree" (formula "17"))
                                  (builtin "One Step Simplification" (formula "17"))
                                 (rule "translateJavaSubInt" (formula "17") (term "3,0,1"))
                                 (rule "andLeft" (formula "17"))
                                 (rule "andLeft" (formula "17"))
                                 (rule "andLeft" (formula "17"))
                                 (rule "andLeft" (formula "18"))
                                 (rule "andLeft" (formula "17"))
                                 (rule "andLeft" (formula "17"))
                                 (rule "andLeft" (formula "17"))
                                 (rule "andLeft" (formula "19"))
                                 (rule "notLeft" (formula "18"))
                                 (rule "notLeft" (formula "17"))
                                 (rule "polySimp_elimSub" (formula "23") (term "3,0"))
                                 (rule "mul_literals" (formula "23") (term "1,3,0"))
                                 (rule "polySimp_addComm0" (formula "23") (term "3,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "22"))
                                 (rule "inEqSimp_commuteLeq" (formula "20"))
                                 (rule "inEqSimp_commuteLeq" (formula "21"))
                                 (rule "inEqSimp_commuteLeq" (formula "17"))
                                 (rule "applyEq" (formula "11") (term "0,0") (ifseqformula "19"))
                                 (rule "applyEq" (formula "6") (term "0") (ifseqformula "19"))
                                 (rule "applyEq" (formula "23") (term "1,3,0") (ifseqformula "19"))
                                 (rule "applyEq" (formula "22") (term "1") (ifseqformula "19"))
                                 (rule "applyEq" (formula "21") (term "1") (ifseqformula "19"))
                                 (rule "applyEq" (formula "20") (term "0") (ifseqformula "19"))
                                 (rule "inEqSimp_exactShadow3" (formula "8") (ifseqformula "18"))
                                 (rule "polySimp_mulComm0" (formula "8") (term "0,0"))
                                 (rule "polySimp_addComm0" (formula "8") (term "0"))
                                 (rule "inEqSimp_sepNegMonomial1" (formula "8"))
                                 (rule "polySimp_mulLiterals" (formula "8") (term "0"))
                                 (rule "polySimp_elimOne" (formula "8") (term "0"))
                                 (rule "Free_class_invariant_axiom_for_de_wiesler_Tree" (formula "25"))
                                 (rule "true_left" (formula "25"))
                                 (rule "commute_or" (formula "11"))
                                 (rule "Definition_axiom_for_isSortedSliceTransitive_in_de_wiesler_Functions" (formula "24") (term "0") (inst "i=i") (inst "j=j"))
                                  (builtin "One Step Simplification" (formula "24"))
                                 (rule "inEqSimp_ltToLeq" (formula "24") (term "1,0,0,1,0"))
                                 (rule "polySimp_rightDist" (formula "24") (term "1,0,0,1,0,0,1,0"))
                                 (rule "mul_literals" (formula "24") (term "0,1,0,0,1,0,0,1,0"))
                                 (rule "polySimp_addAssoc" (formula "24") (term "0,0,1,0,0,1,0"))
                                 (rule "add_literals" (formula "24") (term "0,0,0,1,0,0,1,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "24") (term "1,0,0"))
                                 (rule "polySimp_rightDist" (formula "24") (term "1,0,0,1,0,0"))
                                 (rule "mul_literals" (formula "24") (term "0,1,0,0,1,0,0"))
                                 (rule "polySimp_addAssoc" (formula "24") (term "0,0,1,0,0"))
                                 (rule "add_literals" (formula "24") (term "0,0,0,1,0,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "24") (term "0,0,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "24") (term "1,0,1,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "24") (term "0,0,0,1,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "1,0,0,1,0"))
                                 (rule "polySimp_mulComm0" (formula "24") (term "1,1,0,0,1,0"))
                                 (rule "polySimp_rightDist" (formula "24") (term "1,1,0,0,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "24") (term "1,1,1,0,0,1,0"))
                                 (rule "mul_literals" (formula "24") (term "0,1,1,0,0,1,0"))
                                 (rule "polySimp_elimOne" (formula "24") (term "1,1,1,0,0,1,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "24") (term "1,1,0,0"))
                                 (rule "polySimp_rightDist" (formula "24") (term "1,1,0,0"))
                                 (rule "mul_literals" (formula "24") (term "0,1,1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "24") (term "1,1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "24") (term "1,1,1,0,0"))
                                 (rule "nnf_imp2or" (formula "24") (term "0"))
                                 (rule "nnf_notAnd" (formula "24") (term "0,0"))
                                 (rule "inEqSimp_notLeq" (formula "24") (term "1,0,0"))
                                 (rule "polySimp_rightDist" (formula "24") (term "1,0,0,1,0,0"))
                                 (rule "mul_literals" (formula "24") (term "0,1,0,0,1,0,0"))
                                 (rule "polySimp_addAssoc" (formula "24") (term "0,0,1,0,0"))
                                 (rule "add_literals" (formula "24") (term "0,0,0,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "24") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "24") (term "1,1,0,0"))
                                 (rule "polySimp_rightDist" (formula "24") (term "1,1,0,0"))
                                 (rule "mul_literals" (formula "24") (term "0,1,1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "24") (term "1,1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "24") (term "1,1,1,0,0"))
                                 (rule "inEqSimp_notGeq" (formula "24") (term "0,0,0"))
                                 (rule "times_zero_1" (formula "24") (term "1,0,0,0,0,0"))
                                 (rule "add_zero_right" (formula "24") (term "0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "0,0,0"))
                                 (rule "mul_literals" (formula "24") (term "1,0,0,0"))
                                 (rule "nnf_imp2or" (formula "24") (term "0,1,0"))
                                 (rule "nnf_notAnd" (formula "24") (term "0,0,1,0"))
                                 (rule "inEqSimp_notGeq" (formula "24") (term "0,0,0,1,0"))
                                 (rule "polySimp_mulComm0" (formula "24") (term "1,0,0,0,0,0,1,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "0,0,0,1,0"))
                                 (rule "polySimp_mulComm0" (formula "24") (term "1,0,0,0,1,0"))
                                 (rule "polySimp_rightDist" (formula "24") (term "1,0,0,0,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "24") (term "1,1,0,0,0,1,0"))
                                 (rule "mul_literals" (formula "24") (term "0,1,0,0,0,1,0"))
                                 (rule "polySimp_elimOne" (formula "24") (term "1,1,0,0,0,1,0"))
                                 (rule "inEqSimp_notLeq" (formula "24") (term "1,0,0,1,0"))
                                 (rule "polySimp_rightDist" (formula "24") (term "1,0,0,1,0,0,1,0"))
                                 (rule "mul_literals" (formula "24") (term "0,1,0,0,1,0,0,1,0"))
                                 (rule "polySimp_addAssoc" (formula "24") (term "0,0,1,0,0,1,0"))
                                 (rule "add_literals" (formula "24") (term "0,0,0,1,0,0,1,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "24") (term "1,0,0,1,0"))
                                 (rule "polySimp_mulComm0" (formula "24") (term "1,1,0,0,1,0"))
                                 (rule "polySimp_rightDist" (formula "24") (term "1,1,0,0,1,0"))
                                 (rule "mul_literals" (formula "24") (term "0,1,1,0,0,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "24") (term "1,1,1,0,0,1,0"))
                                 (rule "polySimp_elimOne" (formula "24") (term "1,1,1,0,0,1,0"))
                                 (rule "commute_or" (formula "24") (term "0,0,1,0"))
                                 (rule "jdiv_axiom" (formula "1") (term "0"))
                                 (rule "eqSymm" (formula "1"))
                                 (rule "inEqSimp_subsumption1" (formula "1") (term "0,0") (ifseqformula "5"))
                                 (rule "leq_literals" (formula "1") (term "0,0,0"))
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "eqSymm" (formula "1"))
                                 (rule "applyEqRigid" (formula "3") (term "0,1,0,2,0") (ifseqformula "1"))
                                 (rule "applyEq" (formula "2") (term "0") (ifseqformula "1"))
                                 (rule "cut_direct" (formula "13") (term "1"))
                                 (branch "CUT: self.sorted_splitters[b_0] >= value TRUE"
                                     (builtin "One Step Simplification" (formula "14"))
                                    (rule "true_left" (formula "14"))
                                    (rule "all_pull_out3" (formula "25") (term "0"))
                                    (rule "shift_paren_or" (formula "25") (term "0,0"))
                                    (rule "shift_paren_or" (formula "25") (term "0,0,0"))
                                    (rule "div_axiom" (formula "1") (term "1") (inst "quotient=quotient_0"))
                                    (rule "equal_literals" (formula "1") (term "0"))
                                     (builtin "One Step Simplification" (formula "1"))
                                    (rule "mul_literals" (formula "1") (term "1,1,1,1"))
                                    (rule "qeq_literals" (formula "1") (term "0,1"))
                                     (builtin "One Step Simplification" (formula "1"))
                                    (rule "andLeft" (formula "1"))
                                    (rule "andLeft" (formula "1"))
                                    (rule "polySimp_addComm1" (formula "3") (term "1"))
                                    (rule "add_literals" (formula "3") (term "0,1"))
                                    (rule "inEqSimp_commuteLeq" (formula "2"))
                                    (rule "inEqSimp_homoInEq1" (formula "3"))
                                    (rule "polySimp_mulLiterals" (formula "3") (term "1,0"))
                                    (rule "polySimp_addComm1" (formula "3") (term "0"))
                                    (rule "applyEq" (formula "5") (term "0") (ifseqformula "1"))
                                    (rule "inEqSimp_homoInEq1" (formula "5"))
                                    (rule "polySimp_addComm1" (formula "5") (term "0"))
                                    (rule "applyEqRigid" (formula "6") (term "0,1,0,2,0") (ifseqformula "1"))
                                    (rule "polySimp_addComm0" (formula "6") (term "0,2,0"))
                                    (rule "applyEqRigid" (formula "4") (term "1") (ifseqformula "1"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "3"))
                                    (rule "polySimp_mulComm0" (formula "3") (term "1"))
                                    (rule "polySimp_rightDist" (formula "3") (term "1"))
                                    (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
                                    (rule "mul_literals" (formula "3") (term "0,1"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "5"))
                                    (rule "polySimp_mulComm0" (formula "5") (term "1"))
                                    (rule "polySimp_rightDist" (formula "5") (term "1"))
                                    (rule "polySimp_mulLiterals" (formula "5") (term "1,1"))
                                    (rule "mul_literals" (formula "5") (term "0,1"))
                                    (rule "polySimp_elimOne" (formula "5") (term "1,1"))
                                    (rule "inEqSimp_exactShadow3" (formula "7") (ifseqformula "5"))
                                    (rule "mul_literals" (formula "7") (term "0,0"))
                                    (rule "polySimp_addAssoc" (formula "7") (term "0"))
                                    (rule "add_literals" (formula "7") (term "0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "7"))
                                    (rule "mul_literals" (formula "7") (term "1"))
                                    (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "10"))
                                    (rule "polySimp_mulAssoc" (formula "2") (term "0,0"))
                                    (rule "polySimp_mulComm0" (formula "2") (term "0,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "2") (term "0,0"))
                                    (rule "polySimp_addAssoc" (formula "2") (term "0"))
                                    (rule "polySimp_addComm0" (formula "2") (term "0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                                    (rule "polySimp_mulComm0" (formula "2") (term "1"))
                                    (rule "polySimp_rightDist" (formula "2") (term "1"))
                                    (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
                                    (rule "mul_literals" (formula "2") (term "0,1"))
                                    (rule "inEqSimp_exactShadow3" (formula "10") (ifseqformula "4"))
                                    (rule "mul_literals" (formula "10") (term "0,0"))
                                    (rule "polySimp_addAssoc" (formula "10") (term "0"))
                                    (rule "add_literals" (formula "10") (term "0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "10"))
                                    (rule "mul_literals" (formula "10") (term "1"))
                                    (rule "inEqSimp_subsumption6" (formula "10") (ifseqformula "8"))
                                    (rule "greater_literals" (formula "10") (term "0,0"))
                                     (builtin "One Step Simplification" (formula "10"))
                                    (rule "mul_literals" (formula "10") (term "1,0"))
                                    (rule "leq_literals" (formula "10") (term "0"))
                                     (builtin "One Step Simplification" (formula "10"))
                                    (rule "true_left" (formula "10"))
                                    (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "6"))
                                    (rule "polySimp_rightDist" (formula "2") (term "0,0"))
                                    (rule "polySimp_mulLiterals" (formula "2") (term "1,0,0"))
                                    (rule "mul_literals" (formula "2") (term "0,0,0"))
                                    (rule "polySimp_addAssoc" (formula "2") (term "0"))
                                    (rule "polySimp_addComm1" (formula "2") (term "0,0"))
                                    (rule "add_literals" (formula "2") (term "0,0,0"))
                                    (rule "polySimp_pullOutFactor2b" (formula "2") (term "0"))
                                    (rule "add_literals" (formula "2") (term "1,1,0"))
                                    (rule "inEqSimp_sepNegMonomial1" (formula "2"))
                                    (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                                    (rule "polySimp_elimOne" (formula "2") (term "0"))
                                    (rule "inEqSimp_contradInEq1" (formula "2") (ifseqformula "9"))
                                    (rule "qeq_literals" (formula "2") (term "0"))
                                     (builtin "One Step Simplification" (formula "2"))
                                    (rule "closeFalse" (formula "2"))
                                 )
                                 (branch "CUT: self.sorted_splitters[b_0] >= value FALSE"
                                     (builtin "One Step Simplification" (formula "13"))
                                    (rule "inEqSimp_geqRight" (formula "26"))
                                    (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                    (rule "applyEq" (formula "24") (term "1") (ifseqformula "14"))
                                    (rule "applyEq" (formula "25") (term "1") (ifseqformula "14"))
                                    (rule "applyEq" (formula "8") (term "0") (ifseqformula "14"))
                                    (rule "inEqSimp_homoInEq1" (formula "8"))
                                    (rule "polySimp_pullOutFactor1" (formula "8") (term "0"))
                                    (rule "add_literals" (formula "8") (term "1,0"))
                                    (rule "times_zero_1" (formula "8") (term "0"))
                                    (rule "leq_literals" (formula "8"))
                                    (rule "true_left" (formula "8"))
                                    (rule "applyEq" (formula "25") (term "1,1,1,0,0") (ifseqformula "13"))
                                    (rule "polySimp_addAssoc" (formula "25") (term "1,1,0,0"))
                                    (rule "add_literals" (formula "25") (term "0,1,1,0,0"))
                                    (rule "add_zero_left" (formula "25") (term "1,1,0,0"))
                                    (rule "applyEq" (formula "25") (term "1,1,0,0,0,1,0") (ifseqformula "13"))
                                    (rule "polySimp_addAssoc" (formula "25") (term "1,0,0,0,1,0"))
                                    (rule "add_literals" (formula "25") (term "0,1,0,0,0,1,0"))
                                    (rule "add_zero_left" (formula "25") (term "1,0,0,0,1,0"))
                                    (rule "applyEq" (formula "22") (term "0") (ifseqformula "13"))
                                    (rule "inEqSimp_homoInEq1" (formula "22"))
                                    (rule "polySimp_mulComm0" (formula "22") (term "1,0"))
                                    (rule "polySimp_rightDist" (formula "22") (term "1,0"))
                                    (rule "mul_literals" (formula "22") (term "0,1,0"))
                                    (rule "polySimp_addAssoc" (formula "22") (term "0"))
                                    (rule "add_literals" (formula "22") (term "0,0"))
                                    (rule "applyEq" (formula "21") (term "1") (ifseqformula "13"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                    (rule "polySimp_mulComm0" (formula "1") (term "1"))
                                    (rule "polySimp_rightDist" (formula "1") (term "1"))
                                    (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                                    (rule "mul_literals" (formula "1") (term "0,1"))
                                    (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                                    (rule "inEqSimp_sepNegMonomial0" (formula "22"))
                                    (rule "polySimp_mulLiterals" (formula "22") (term "0"))
                                    (rule "polySimp_elimOne" (formula "22") (term "0"))
                                    (rule "div_axiom" (formula "2") (term "1") (inst "quotient=quotient_0"))
                                    (rule "mul_literals" (formula "2") (term "1,1,1,1,1"))
                                    (rule "equal_literals" (formula "2") (term "0"))
                                     (builtin "One Step Simplification" (formula "2"))
                                    (rule "qeq_literals" (formula "2") (term "0,1"))
                                     (builtin "One Step Simplification" (formula "2"))
                                    (rule "andLeft" (formula "2"))
                                    (rule "andLeft" (formula "2"))
                                    (rule "polySimp_addComm1" (formula "4") (term "1"))
                                    (rule "add_literals" (formula "4") (term "0,1"))
                                    (rule "inEqSimp_commuteLeq" (formula "3"))
                                    (rule "inEqSimp_homoInEq1" (formula "4"))
                                    (rule "polySimp_mulLiterals" (formula "4") (term "1,0"))
                                    (rule "polySimp_addComm1" (formula "4") (term "0"))
                                    (rule "applyEq" (formula "7") (term "0,1,0,2,0") (ifseqformula "2"))
                                    (rule "polySimp_addComm0" (formula "7") (term "0,2,0"))
                                    (rule "applyEqRigid" (formula "6") (term "0") (ifseqformula "2"))
                                    (rule "inEqSimp_homoInEq1" (formula "6"))
                                    (rule "polySimp_addComm1" (formula "6") (term "0"))
                                    (rule "applyEqRigid" (formula "5") (term "1") (ifseqformula "2"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "4"))
                                    (rule "polySimp_mulComm0" (formula "4") (term "1"))
                                    (rule "polySimp_rightDist" (formula "4") (term "1"))
                                    (rule "polySimp_mulLiterals" (formula "4") (term "1,1"))
                                    (rule "mul_literals" (formula "4") (term "0,1"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "6"))
                                    (rule "polySimp_mulComm0" (formula "6") (term "1"))
                                    (rule "polySimp_rightDist" (formula "6") (term "1"))
                                    (rule "polySimp_mulLiterals" (formula "6") (term "1,1"))
                                    (rule "mul_literals" (formula "6") (term "0,1"))
                                    (rule "polySimp_elimOne" (formula "6") (term "1,1"))
                                    (rule "inEqSimp_exactShadow3" (formula "9") (ifseqformula "4"))
                                    (rule "mul_literals" (formula "9") (term "0,0"))
                                    (rule "polySimp_addAssoc" (formula "9") (term "0"))
                                    (rule "add_literals" (formula "9") (term "0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "9"))
                                    (rule "mul_literals" (formula "9") (term "1"))
                                    (rule "elimGcdGeq_antec" (formula "9") (inst "elimGcdRightDiv=Z(1(#))") (inst "elimGcdLeftDiv=quotient_0") (inst "elimGcd=Z(2(#))"))
                                    (rule "leq_literals" (formula "9") (term "0,0"))
                                     (builtin "One Step Simplification" (formula "9"))
                                    (rule "polySimp_mulLiterals" (formula "9") (term "1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "9") (term "1,0,0,0,0,0"))
                                    (rule "mul_literals" (formula "9") (term "1,0,0,0,0,0"))
                                    (rule "polySimp_addLiterals" (formula "9") (term "0,0,0,0"))
                                    (rule "add_literals" (formula "9") (term "0,0,0,0"))
                                    (rule "polySimp_pullOutFactor0b" (formula "9") (term "0,0"))
                                    (rule "add_literals" (formula "9") (term "1,1,0,0"))
                                    (rule "times_zero_1" (formula "9") (term "1,0,0"))
                                    (rule "add_zero_right" (formula "9") (term "0,0"))
                                    (rule "leq_literals" (formula "9") (term "0"))
                                     (builtin "One Step Simplification" (formula "9"))
                                    (rule "inEqSimp_exactShadow3" (formula "8") (ifseqformula "6"))
                                    (rule "mul_literals" (formula "8") (term "0,0"))
                                    (rule "polySimp_addAssoc" (formula "8") (term "0"))
                                    (rule "add_literals" (formula "8") (term "0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "8"))
                                    (rule "mul_literals" (formula "8") (term "1"))
                                    (rule "inEqSimp_subsumption1" (formula "10") (ifseqformula "8"))
                                    (rule "leq_literals" (formula "10") (term "0"))
                                     (builtin "One Step Simplification" (formula "10"))
                                    (rule "true_left" (formula "10"))
                                    (rule "inEqSimp_exactShadow3" (formula "3") (ifseqformula "11"))
                                    (rule "polySimp_mulAssoc" (formula "3") (term "0,0"))
                                    (rule "polySimp_mulComm0" (formula "3") (term "0,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "3") (term "0,0"))
                                    (rule "polySimp_addAssoc" (formula "3") (term "0"))
                                    (rule "polySimp_addComm0" (formula "3") (term "0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "3"))
                                    (rule "polySimp_mulComm0" (formula "3") (term "1"))
                                    (rule "polySimp_rightDist" (formula "3") (term "1"))
                                    (rule "mul_literals" (formula "3") (term "0,1"))
                                    (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
                                    (rule "inEqSimp_exactShadow3" (formula "3") (ifseqformula "7"))
                                    (rule "polySimp_rightDist" (formula "3") (term "0,0"))
                                    (rule "polySimp_mulLiterals" (formula "3") (term "1,0,0"))
                                    (rule "mul_literals" (formula "3") (term "0,0,0"))
                                    (rule "polySimp_addAssoc" (formula "3") (term "0"))
                                    (rule "polySimp_addComm1" (formula "3") (term "0,0"))
                                    (rule "add_literals" (formula "3") (term "0,0,0"))
                                    (rule "polySimp_pullOutFactor2b" (formula "3") (term "0"))
                                    (rule "add_literals" (formula "3") (term "1,1,0"))
                                    (rule "inEqSimp_sepNegMonomial1" (formula "3"))
                                    (rule "polySimp_mulLiterals" (formula "3") (term "0"))
                                    (rule "polySimp_elimOne" (formula "3") (term "0"))
                                    (rule "inEqSimp_contradInEq1" (formula "3") (ifseqformula "10"))
                                    (rule "qeq_literals" (formula "3") (term "0"))
                                     (builtin "One Step Simplification" (formula "3"))
                                    (rule "closeFalse" (formula "3"))
                                 )
                              )
                              (branch
                                 (rule "andRight" (formula "18"))
                                 (branch
                                    (rule "polySimp_homoEq" (formula "9") (term "0"))
                                    (rule "polySimp_homoEq" (formula "8") (term "1"))
                                    (rule "polySimp_mulComm0" (formula "9") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "8") (term "1,0,1"))
                                    (rule "polySimp_rightDist" (formula "9") (term "1,0,0"))
                                    (rule "mul_literals" (formula "9") (term "0,1,0,0"))
                                    (rule "polySimp_rightDist" (formula "8") (term "1,0,1"))
                                    (rule "polySimp_mulLiterals" (formula "8") (term "1,1,0,1"))
                                    (rule "polySimp_elimOne" (formula "8") (term "1,1,0,1"))
                                    (rule "polySimp_mulComm0" (formula "8") (term "0,1,0,1"))
                                    (rule "polySimp_addAssoc" (formula "9") (term "0,0"))
                                    (rule "polySimp_addComm0" (formula "9") (term "0,0,0"))
                                    (rule "polySimp_addAssoc" (formula "8") (term "0,1"))
                                    (rule "inEqSimp_geqRight" (formula "18"))
                                    (rule "times_zero_1" (formula "1") (term "1,0,0"))
                                    (rule "add_zero_right" (formula "1") (term "0,0"))
                                    (rule "polySimp_addAssoc" (formula "1") (term "0"))
                                    (rule "add_literals" (formula "1") (term "0,0"))
                                    (rule "add_zero_left" (formula "1") (term "0"))
                                    (rule "inEqSimp_ltToLeq" (formula "9") (term "0"))
                                    (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,0"))
                                    (rule "inEqSimp_ltToLeq" (formula "2"))
                                    (rule "polySimp_mulComm0" (formula "2") (term "1,0,0"))
                                    (rule "inEqSimp_gtToGeq" (formula "3"))
                                    (rule "mul_literals" (formula "3") (term "1,0,0"))
                                    (rule "add_literals" (formula "3") (term "0,0"))
                                    (rule "inEqSimp_homoInEq0" (formula "4"))
                                    (rule "polySimp_mulComm0" (formula "4") (term "1,0"))
                                    (rule "polySimp_rightDist" (formula "4") (term "1,0"))
                                    (rule "mul_literals" (formula "4") (term "0,1,0"))
                                    (rule "polySimp_addAssoc" (formula "4") (term "0"))
                                    (rule "polySimp_addComm0" (formula "4") (term "0,0"))
                                    (rule "inEqSimp_homoInEq0" (formula "5"))
                                    (rule "polySimp_addComm1" (formula "5") (term "0"))
                                    (rule "polySimp_sepNegMonomial" (formula "10") (term "0"))
                                    (rule "polySimp_mulLiterals" (formula "10") (term "0,0"))
                                    (rule "polySimp_elimOne" (formula "10") (term "0,0"))
                                    (rule "polySimp_sepPosMonomial" (formula "9") (term "1"))
                                    (rule "polySimp_mulComm0" (formula "9") (term "1,1"))
                                    (rule "polySimp_rightDist" (formula "9") (term "1,1"))
                                    (rule "mul_literals" (formula "9") (term "0,1,1"))
                                    (rule "polySimp_mulLiterals" (formula "9") (term "1,1,1"))
                                    (rule "polySimp_elimOne" (formula "9") (term "1,1,1"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "0"))
                                    (rule "polySimp_mulComm0" (formula "9") (term "1,0"))
                                    (rule "polySimp_rightDist" (formula "9") (term "1,0"))
                                    (rule "mul_literals" (formula "9") (term "0,1,0"))
                                    (rule "polySimp_mulLiterals" (formula "9") (term "1,1,0"))
                                    (rule "polySimp_elimOne" (formula "9") (term "1,1,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "2"))
                                    (rule "polySimp_mulComm0" (formula "2") (term "1"))
                                    (rule "polySimp_rightDist" (formula "2") (term "1"))
                                    (rule "mul_literals" (formula "2") (term "0,1"))
                                    (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
                                    (rule "polySimp_elimOne" (formula "2") (term "1,1"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "3"))
                                    (rule "mul_literals" (formula "3") (term "1"))
                                    (rule "inEqSimp_sepNegMonomial1" (formula "4"))
                                    (rule "polySimp_mulLiterals" (formula "4") (term "0"))
                                    (rule "polySimp_elimOne" (formula "4") (term "0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "5"))
                                    (rule "polySimp_mulComm0" (formula "5") (term "1"))
                                    (rule "polySimp_rightDist" (formula "5") (term "1"))
                                    (rule "mul_literals" (formula "5") (term "0,1"))
                                    (rule "polySimp_mulLiterals" (formula "5") (term "1,1"))
                                    (rule "polySimp_elimOne" (formula "5") (term "1,1"))
                                    (rule "inEqSimp_antiSymm" (formula "6") (ifseqformula "1"))
                                    (rule "applyEq" (formula "7") (term "0") (ifseqformula "6"))
                                    (rule "qeq_literals" (formula "7"))
                                    (rule "true_left" (formula "7"))
                                    (rule "applyEq" (formula "7") (term "1") (ifseqformula "6"))
                                    (rule "applyEqRigid" (formula "1") (term "0") (ifseqformula "6"))
                                    (rule "leq_literals" (formula "1"))
                                    (rule "true_left" (formula "1"))
                                    (rule "applyEq" (formula "7") (term "1,0") (ifseqformula "5"))
                                    (rule "translateJavaShiftLeftIntZero" (formula "7") (term "0"))
                                    (rule "eqSymm" (formula "7"))
                                    (rule "applyEqRigid" (formula "8") (term "0,1,0,2,0,0") (ifseqformula "7"))
                                    (rule "mul_literals" (formula "8") (term "1,0,2,0,0"))
                                    (rule "polySimp_addComm0" (formula "8") (term "0,2,0,0"))
                                    (rule "applyEqRigid" (formula "1") (term "0,0,1,0,2,0") (ifseqformula "7"))
                                    (rule "jdiv_axiom_inline" (formula "1") (term "0,1,0,2,0"))
                                    (rule "qeq_literals" (formula "1") (term "0,0,1,0,2,0"))
                                     (builtin "One Step Simplification" (formula "1"))
                                    (rule "div_literals" (formula "1") (term "0,1,0,2,0"))
                                    (rule "mul_literals" (formula "1") (term "1,0,2,0"))
                                    (rule "add_zero_right" (formula "1") (term "0,2,0"))
                                    (rule "applyEq" (formula "8") (term "0,1") (ifseqformula "7"))
                                    (rule "polySimp_homoEq" (formula "8") (term "1"))
                                    (rule "mul_literals" (formula "8") (term "1,0,1"))
                                    (rule "polySimp_addComm1" (formula "8") (term "0,1"))
                                    (rule "add_literals" (formula "8") (term "0,0,1"))
                                    (rule "add_zero_left" (formula "8") (term "0,1"))
                                    (rule "applyEqRigid" (formula "3") (term "0") (ifseqformula "7"))
                                    (rule "inEqSimp_homoInEq0" (formula "3"))
                                    (rule "mul_literals" (formula "3") (term "1,0"))
                                    (rule "polySimp_addComm1" (formula "3") (term "0"))
                                    (rule "add_literals" (formula "3") (term "0,0"))
                                    (rule "add_zero_left" (formula "3") (term "0"))
                                    (rule "applyEqRigid" (formula "2") (term "0") (ifseqformula "7"))
                                    (rule "qeq_literals" (formula "2"))
                                    (rule "closeFalse" (formula "2"))
                                 )
                                 (branch
                                    (rule "polySimp_homoEq" (formula "9") (term "0"))
                                    (rule "polySimp_homoEq" (formula "8") (term "1"))
                                    (rule "polySimp_mulComm0" (formula "9") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "8") (term "1,0,1"))
                                    (rule "polySimp_rightDist" (formula "9") (term "1,0,0"))
                                    (rule "mul_literals" (formula "9") (term "0,1,0,0"))
                                    (rule "polySimp_rightDist" (formula "8") (term "1,0,1"))
                                    (rule "polySimp_mulLiterals" (formula "8") (term "1,1,0,1"))
                                    (rule "polySimp_elimOne" (formula "8") (term "1,1,0,1"))
                                    (rule "polySimp_mulComm0" (formula "8") (term "0,1,0,1"))
                                    (rule "polySimp_addAssoc" (formula "9") (term "0,0"))
                                    (rule "polySimp_addComm0" (formula "9") (term "0,0,0"))
                                    (rule "polySimp_addAssoc" (formula "8") (term "0,1"))
                                    (rule "inEqSimp_geqRight" (formula "18"))
                                    (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                                    (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                                    (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                                    (rule "add_literals" (formula "1") (term "0,0,0"))
                                    (rule "inEqSimp_ltToLeq" (formula "2"))
                                    (rule "polySimp_mulComm0" (formula "2") (term "1,0,0"))
                                    (rule "inEqSimp_ltToLeq" (formula "9") (term "0"))
                                    (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,0"))
                                    (rule "inEqSimp_gtToGeq" (formula "3"))
                                    (rule "mul_literals" (formula "3") (term "1,0,0"))
                                    (rule "add_literals" (formula "3") (term "0,0"))
                                    (rule "inEqSimp_homoInEq0" (formula "5"))
                                    (rule "polySimp_addComm1" (formula "5") (term "0"))
                                    (rule "inEqSimp_homoInEq0" (formula "4"))
                                    (rule "polySimp_mulComm0" (formula "4") (term "1,0"))
                                    (rule "polySimp_rightDist" (formula "4") (term "1,0"))
                                    (rule "mul_literals" (formula "4") (term "0,1,0"))
                                    (rule "polySimp_addAssoc" (formula "4") (term "0"))
                                    (rule "polySimp_addComm0" (formula "4") (term "0,0"))
                                    (rule "polySimp_sepNegMonomial" (formula "10") (term "0"))
                                    (rule "polySimp_mulLiterals" (formula "10") (term "0,0"))
                                    (rule "polySimp_elimOne" (formula "10") (term "0,0"))
                                    (rule "polySimp_sepPosMonomial" (formula "9") (term "1"))
                                    (rule "polySimp_mulComm0" (formula "9") (term "1,1"))
                                    (rule "polySimp_rightDist" (formula "9") (term "1,1"))
                                    (rule "mul_literals" (formula "9") (term "0,1,1"))
                                    (rule "polySimp_mulLiterals" (formula "9") (term "1,1,1"))
                                    (rule "polySimp_elimOne" (formula "9") (term "1,1,1"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                    (rule "polySimp_mulComm0" (formula "1") (term "1"))
                                    (rule "polySimp_rightDist" (formula "1") (term "1"))
                                    (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                                    (rule "mul_literals" (formula "1") (term "0,1"))
                                    (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "2"))
                                    (rule "polySimp_mulComm0" (formula "2") (term "1"))
                                    (rule "polySimp_rightDist" (formula "2") (term "1"))
                                    (rule "mul_literals" (formula "2") (term "0,1"))
                                    (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
                                    (rule "polySimp_elimOne" (formula "2") (term "1,1"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "0"))
                                    (rule "polySimp_mulComm0" (formula "9") (term "1,0"))
                                    (rule "polySimp_rightDist" (formula "9") (term "1,0"))
                                    (rule "mul_literals" (formula "9") (term "0,1,0"))
                                    (rule "polySimp_mulLiterals" (formula "9") (term "1,1,0"))
                                    (rule "polySimp_elimOne" (formula "9") (term "1,1,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "3"))
                                    (rule "mul_literals" (formula "3") (term "1"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "5"))
                                    (rule "polySimp_mulComm0" (formula "5") (term "1"))
                                    (rule "polySimp_rightDist" (formula "5") (term "1"))
                                    (rule "mul_literals" (formula "5") (term "0,1"))
                                    (rule "polySimp_mulLiterals" (formula "5") (term "1,1"))
                                    (rule "polySimp_elimOne" (formula "5") (term "1,1"))
                                    (rule "inEqSimp_sepNegMonomial1" (formula "4"))
                                    (rule "polySimp_mulLiterals" (formula "4") (term "0"))
                                    (rule "polySimp_elimOne" (formula "4") (term "0"))
                                    (rule "inEqSimp_contradInEq0" (formula "7") (ifseqformula "1"))
                                    (rule "andLeft" (formula "7"))
                                    (rule "inEqSimp_homoInEq1" (formula "7"))
                                    (rule "polySimp_mulComm0" (formula "7") (term "1,0"))
                                    (rule "polySimp_rightDist" (formula "7") (term "1,0"))
                                    (rule "mul_literals" (formula "7") (term "0,1,0"))
                                    (rule "polySimp_addAssoc" (formula "7") (term "0"))
                                    (rule "polySimp_addComm0" (formula "7") (term "0,0"))
                                    (rule "polySimp_pullOutFactor1b" (formula "7") (term "0"))
                                    (rule "add_literals" (formula "7") (term "1,1,0"))
                                    (rule "times_zero_1" (formula "7") (term "1,0"))
                                    (rule "add_zero_right" (formula "7") (term "0"))
                                    (rule "leq_literals" (formula "7"))
                                    (rule "closeFalse" (formula "7"))
                                 )
                              )
                           )
                           (branch "Case 2"
                              (rule "shiftLeftSplitTwo" (formula "7") (term "0") (userinteraction))
                              (rule "polySimp_elimSub" (formula "7") (term "1,0,0,1"))
                              (rule "mul_literals" (formula "7") (term "1,1,0,0,1"))
                              (rule "polySimp_homoEq" (formula "9") (term "1"))
                              (rule "polySimp_homoEq" (formula "10") (term "0"))
                              (rule "polySimp_mulComm0" (formula "9") (term "1,0,1"))
                              (rule "polySimp_mulComm0" (formula "10") (term "1,0,0"))
                              (rule "polySimp_addComm0" (formula "7") (term "1,0,0,1"))
                              (rule "polySimp_rightDist" (formula "9") (term "1,0,1"))
                              (rule "polySimp_mulLiterals" (formula "9") (term "1,1,0,1"))
                              (rule "polySimp_elimOne" (formula "9") (term "1,1,0,1"))
                              (rule "polySimp_mulComm0" (formula "9") (term "0,1,0,1"))
                              (rule "polySimp_rightDist" (formula "10") (term "1,0,0"))
                              (rule "mul_literals" (formula "10") (term "0,1,0,0"))
                              (rule "polySimp_addAssoc" (formula "9") (term "0,1"))
                              (rule "polySimp_addAssoc" (formula "10") (term "0,0"))
                              (rule "polySimp_addComm0" (formula "10") (term "0,0,0"))
                              (rule "inEqSimp_ltToLeq" (formula "1"))
                              (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                              (rule "inEqSimp_ltToLeq" (formula "9") (term "0"))
                              (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,0"))
                              (rule "inEqSimp_gtToGeq" (formula "2"))
                              (rule "mul_literals" (formula "2") (term "1,0,0"))
                              (rule "add_literals" (formula "2") (term "0,0"))
                              (rule "inEqSimp_commuteLeq" (formula "7") (term "0,0"))
                              (rule "inEqSimp_homoInEq0" (formula "3"))
                              (rule "polySimp_mulComm0" (formula "3") (term "1,0"))
                              (rule "polySimp_rightDist" (formula "3") (term "1,0"))
                              (rule "mul_literals" (formula "3") (term "0,1,0"))
                              (rule "polySimp_addAssoc" (formula "3") (term "0"))
                              (rule "polySimp_addComm0" (formula "3") (term "0,0"))
                              (rule "inEqSimp_homoInEq0" (formula "4"))
                              (rule "polySimp_addComm1" (formula "4") (term "0"))
                              (rule "applyEq" (formula "7") (term "1,1") (ifseqformula "8"))
                              (rule "polySimp_sepPosMonomial" (formula "9") (term "1"))
                              (rule "polySimp_mulComm0" (formula "9") (term "1,1"))
                              (rule "polySimp_rightDist" (formula "9") (term "1,1"))
                              (rule "mul_literals" (formula "9") (term "0,1,1"))
                              (rule "polySimp_mulLiterals" (formula "9") (term "1,1,1"))
                              (rule "polySimp_elimOne" (formula "9") (term "1,1,1"))
                              (rule "polySimp_sepNegMonomial" (formula "10") (term "0"))
                              (rule "polySimp_mulLiterals" (formula "10") (term "0,0"))
                              (rule "polySimp_elimOne" (formula "10") (term "0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                              (rule "polySimp_mulComm0" (formula "1") (term "1"))
                              (rule "polySimp_rightDist" (formula "1") (term "1"))
                              (rule "mul_literals" (formula "1") (term "0,1"))
                              (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                              (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "0"))
                              (rule "polySimp_mulComm0" (formula "9") (term "1,0"))
                              (rule "polySimp_rightDist" (formula "9") (term "1,0"))
                              (rule "polySimp_mulLiterals" (formula "9") (term "1,1,0"))
                              (rule "mul_literals" (formula "9") (term "0,1,0"))
                              (rule "polySimp_elimOne" (formula "9") (term "1,1,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                              (rule "mul_literals" (formula "2") (term "1"))
                              (rule "inEqSimp_sepNegMonomial1" (formula "3"))
                              (rule "polySimp_mulLiterals" (formula "3") (term "0"))
                              (rule "polySimp_elimOne" (formula "3") (term "0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "4"))
                              (rule "polySimp_mulComm0" (formula "4") (term "1"))
                              (rule "polySimp_rightDist" (formula "4") (term "1"))
                              (rule "mul_literals" (formula "4") (term "0,1"))
                              (rule "polySimp_mulLiterals" (formula "4") (term "1,1"))
                              (rule "polySimp_elimOne" (formula "4") (term "1,1"))
                              (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "3"))
                              (rule "mul_literals" (formula "2") (term "0,0"))
                              (rule "polySimp_addAssoc" (formula "2") (term "0"))
                              (rule "add_literals" (formula "2") (term "0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                              (rule "mul_literals" (formula "2") (term "1"))
                              (rule "Free_class_invariant_axiom_for_de_wiesler_Tree" (formula "18"))
                              (rule "true_left" (formula "18"))
                              (rule "Class_invariant_axiom_for_de_wiesler_Tree" (formula "17"))
                               (builtin "One Step Simplification" (formula "17"))
                              (rule "translateJavaSubInt" (formula "17") (term "3,0,1"))
                              (rule "andLeft" (formula "17"))
                              (rule "andLeft" (formula "17"))
                              (rule "andLeft" (formula "17"))
                              (rule "andLeft" (formula "18"))
                              (rule "andLeft" (formula "17"))
                              (rule "andLeft" (formula "17"))
                              (rule "andLeft" (formula "17"))
                              (rule "andLeft" (formula "19"))
                              (rule "notLeft" (formula "17"))
                              (rule "notLeft" (formula "17"))
                              (rule "polySimp_elimSub" (formula "23") (term "3,0"))
                              (rule "mul_literals" (formula "23") (term "1,3,0"))
                              (rule "polySimp_addComm0" (formula "23") (term "3,0"))
                              (rule "inEqSimp_commuteLeq" (formula "22"))
                              (rule "inEqSimp_commuteLeq" (formula "21"))
                              (rule "inEqSimp_commuteLeq" (formula "20"))
                              (rule "inEqSimp_commuteLeq" (formula "17"))
                              (rule "applyEq" (formula "22") (term "1") (ifseqformula "19"))
                              (rule "applyEq" (formula "21") (term "1") (ifseqformula "19"))
                              (rule "applyEq" (formula "5") (term "0") (ifseqformula "19"))
                              (rule "applyEq" (formula "11") (term "0,0") (ifseqformula "19"))
                              (rule "applyEq" (formula "23") (term "1,3,0") (ifseqformula "19"))
                              (rule "applyEq" (formula "20") (term "0") (ifseqformula "19"))
                              (rule "inEqSimp_exactShadow3" (formula "7") (ifseqformula "18"))
                              (rule "polySimp_mulComm0" (formula "7") (term "0,0"))
                              (rule "polySimp_addComm0" (formula "7") (term "0"))
                              (rule "inEqSimp_sepNegMonomial1" (formula "7"))
                              (rule "polySimp_mulLiterals" (formula "7") (term "0"))
                              (rule "polySimp_elimOne" (formula "7") (term "0"))
                              (rule "inEqSimp_subsumption0" (formula "9") (term "1,0") (ifseqformula "7"))
                              (rule "leq_literals" (formula "9") (term "0,1,0"))
                               (builtin "One Step Simplification" (formula "9"))
                              (rule "commute_or" (formula "11"))
                              (rule "Contract_axiom_for_isSortedSliceTransitive_in_Functions" (formula "24") (term "0"))
                              (rule "replace_known_left" (formula "24") (term "1,0") (ifseqformula "14"))
                               (builtin "One Step Simplification" (formula "24") (ifInst ""  (formula "26")) (ifInst ""  (formula "25")))
                              (rule "Definition_axiom_for_isSortedSliceTransitive_in_de_wiesler_Functions" (formula "25") (term "0") (inst "i=i") (inst "j=j"))
                               (builtin "One Step Simplification" (formula "25"))
                              (rule "inEqSimp_ltToLeq" (formula "25") (term "1,0,0,1,0"))
                              (rule "polySimp_rightDist" (formula "25") (term "1,0,0,1,0,0,1,0"))
                              (rule "mul_literals" (formula "25") (term "0,1,0,0,1,0,0,1,0"))
                              (rule "polySimp_addAssoc" (formula "25") (term "0,0,1,0,0,1,0"))
                              (rule "add_literals" (formula "25") (term "0,0,0,1,0,0,1,0"))
                              (rule "inEqSimp_ltToLeq" (formula "25") (term "1,0,0"))
                              (rule "polySimp_rightDist" (formula "25") (term "1,0,0,1,0,0"))
                              (rule "mul_literals" (formula "25") (term "0,1,0,0,1,0,0"))
                              (rule "polySimp_addAssoc" (formula "25") (term "0,0,1,0,0"))
                              (rule "add_literals" (formula "25") (term "0,0,0,1,0,0"))
                              (rule "inEqSimp_commuteLeq" (formula "25") (term "0,0,0"))
                              (rule "inEqSimp_commuteLeq" (formula "25") (term "1,0,1,0"))
                              (rule "inEqSimp_commuteLeq" (formula "25") (term "0,0,0,1,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "1,0,0,1,0"))
                              (rule "polySimp_mulComm0" (formula "25") (term "1,1,0,0,1,0"))
                              (rule "polySimp_rightDist" (formula "25") (term "1,1,0,0,1,0"))
                              (rule "mul_literals" (formula "25") (term "0,1,1,0,0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "25") (term "1,1,1,0,0,1,0"))
                              (rule "polySimp_elimOne" (formula "25") (term "1,1,1,0,0,1,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "25") (term "1,1,0,0"))
                              (rule "polySimp_rightDist" (formula "25") (term "1,1,0,0"))
                              (rule "mul_literals" (formula "25") (term "0,1,1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "25") (term "1,1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "25") (term "1,1,1,0,0"))
                              (rule "nnf_imp2or" (formula "25") (term "0"))
                              (rule "nnf_notAnd" (formula "25") (term "0,0"))
                              (rule "inEqSimp_notGeq" (formula "25") (term "0,0,0"))
                              (rule "times_zero_1" (formula "25") (term "1,0,0,0,0,0"))
                              (rule "add_literals" (formula "25") (term "0,0,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "0,0,0"))
                              (rule "mul_literals" (formula "25") (term "1,0,0,0"))
                              (rule "inEqSimp_notLeq" (formula "25") (term "1,0,0"))
                              (rule "polySimp_rightDist" (formula "25") (term "1,0,0,1,0,0"))
                              (rule "mul_literals" (formula "25") (term "0,1,0,0,1,0,0"))
                              (rule "polySimp_addAssoc" (formula "25") (term "0,0,1,0,0"))
                              (rule "add_literals" (formula "25") (term "0,0,0,1,0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "25") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "25") (term "1,1,0,0"))
                              (rule "polySimp_rightDist" (formula "25") (term "1,1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "25") (term "1,1,1,0,0"))
                              (rule "mul_literals" (formula "25") (term "0,1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "25") (term "1,1,1,0,0"))
                              (rule "nnf_imp2or" (formula "25") (term "0,1,0"))
                              (rule "nnf_notAnd" (formula "25") (term "0,0,1,0"))
                              (rule "inEqSimp_notLeq" (formula "25") (term "1,0,0,1,0"))
                              (rule "polySimp_rightDist" (formula "25") (term "1,0,0,1,0,0,1,0"))
                              (rule "mul_literals" (formula "25") (term "0,1,0,0,1,0,0,1,0"))
                              (rule "polySimp_addAssoc" (formula "25") (term "0,0,1,0,0,1,0"))
                              (rule "add_literals" (formula "25") (term "0,0,0,1,0,0,1,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "25") (term "1,0,0,1,0"))
                              (rule "polySimp_mulComm0" (formula "25") (term "1,1,0,0,1,0"))
                              (rule "polySimp_rightDist" (formula "25") (term "1,1,0,0,1,0"))
                              (rule "mul_literals" (formula "25") (term "0,1,1,0,0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "25") (term "1,1,1,0,0,1,0"))
                              (rule "polySimp_elimOne" (formula "25") (term "1,1,1,0,0,1,0"))
                              (rule "inEqSimp_notGeq" (formula "25") (term "0,0,0,1,0"))
                              (rule "polySimp_mulComm0" (formula "25") (term "1,0,0,0,0,0,1,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "0,0,0,1,0"))
                              (rule "polySimp_mulComm0" (formula "25") (term "1,0,0,0,1,0"))
                              (rule "polySimp_rightDist" (formula "25") (term "1,0,0,0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "25") (term "1,1,0,0,0,1,0"))
                              (rule "mul_literals" (formula "25") (term "0,1,0,0,0,1,0"))
                              (rule "polySimp_elimOne" (formula "25") (term "1,1,0,0,0,1,0"))
                              (rule "Contract_axiom_for_isSortedSlice_in_Functions" (formula "24") (term "0"))
                              (rule "replace_known_left" (formula "24") (term "0,1") (ifseqformula "25"))
                               (builtin "One Step Simplification" (formula "24") (ifInst ""  (formula "27")) (ifInst ""  (formula "14")))
                              (rule "Definition_axiom_for_isSortedSlice_in_de_wiesler_Functions" (formula "25") (term "0") (inst "i=i"))
                               (builtin "One Step Simplification" (formula "25"))
                              (rule "translateJavaAddInt" (formula "25") (term "0,2,1,1,0"))
                              (rule "translateJavaSubInt" (formula "25") (term "1,1,0,0"))
                              (rule "polySimp_elimSub" (formula "25") (term "1,1,0,0"))
                              (rule "mul_literals" (formula "25") (term "1,1,1,0,0"))
                              (rule "polySimp_addComm0" (formula "25") (term "0,2,1,1,0"))
                              (rule "polySimp_addComm1" (formula "25") (term "1,1,0,0"))
                              (rule "add_literals" (formula "25") (term "0,1,1,0,0"))
                              (rule "inEqSimp_ltToLeq" (formula "25") (term "1,0,0"))
                              (rule "polySimp_rightDist" (formula "25") (term "1,0,0,1,0,0"))
                              (rule "mul_literals" (formula "25") (term "0,1,0,0,1,0,0"))
                              (rule "polySimp_addAssoc" (formula "25") (term "0,0,1,0,0"))
                              (rule "add_literals" (formula "25") (term "0,0,0,1,0,0"))
                              (rule "inEqSimp_commuteLeq" (formula "25") (term "0,0,0"))
                              (rule "inEqSimp_commuteLeq" (formula "25") (term "1,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "25") (term "1,1,0,0"))
                              (rule "polySimp_rightDist" (formula "25") (term "1,1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "25") (term "1,1,1,0,0"))
                              (rule "mul_literals" (formula "25") (term "0,1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "25") (term "1,1,1,0,0"))
                              (rule "nnf_imp2or" (formula "25") (term "0"))
                              (rule "nnf_notAnd" (formula "25") (term "0,0"))
                              (rule "inEqSimp_notLeq" (formula "25") (term "1,0,0"))
                              (rule "polySimp_rightDist" (formula "25") (term "1,0,0,1,0,0"))
                              (rule "mul_literals" (formula "25") (term "0,1,0,0,1,0,0"))
                              (rule "polySimp_addAssoc" (formula "25") (term "0,0,1,0,0"))
                              (rule "add_literals" (formula "25") (term "0,0,0,1,0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "25") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "25") (term "1,1,0,0"))
                              (rule "polySimp_rightDist" (formula "25") (term "1,1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "25") (term "1,1,1,0,0"))
                              (rule "mul_literals" (formula "25") (term "0,1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "25") (term "1,1,1,0,0"))
                              (rule "inEqSimp_notGeq" (formula "25") (term "0,0,0"))
                              (rule "times_zero_1" (formula "25") (term "1,0,0,0,0,0"))
                              (rule "add_literals" (formula "25") (term "0,0,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "0,0,0"))
                              (rule "mul_literals" (formula "25") (term "1,0,0,0"))
                              (rule "Contract_axiom_for_isSortedSliceTransitive_in_Functions" (formula "24") (term "0"))
                              (rule "replace_known_right" (formula "24") (term "0,0,0") (ifseqformula "28"))
                               (builtin "One Step Simplification" (formula "24") (ifInst ""  (formula "14")) (ifInst ""  (formula "25")))
                              (rule "Definition_axiom_for_isSortedSliceTransitive_in_de_wiesler_Functions" (formula "25") (term "0") (inst "i=i") (inst "j=j"))
                               (builtin "One Step Simplification" (formula "25"))
                              (rule "inEqSimp_ltToLeq" (formula "25") (term "1,0,0,1,0"))
                              (rule "polySimp_rightDist" (formula "25") (term "1,0,0,1,0,0,1,0"))
                              (rule "mul_literals" (formula "25") (term "0,1,0,0,1,0,0,1,0"))
                              (rule "polySimp_addAssoc" (formula "25") (term "0,0,1,0,0,1,0"))
                              (rule "add_literals" (formula "25") (term "0,0,0,1,0,0,1,0"))
                              (rule "inEqSimp_ltToLeq" (formula "25") (term "1,0,0"))
                              (rule "polySimp_rightDist" (formula "25") (term "1,0,0,1,0,0"))
                              (rule "mul_literals" (formula "25") (term "0,1,0,0,1,0,0"))
                              (rule "polySimp_addAssoc" (formula "25") (term "0,0,1,0,0"))
                              (rule "add_literals" (formula "25") (term "0,0,0,1,0,0"))
                              (rule "inEqSimp_commuteLeq" (formula "25") (term "1,0,1,0"))
                              (rule "inEqSimp_commuteLeq" (formula "25") (term "0,0,0,1,0"))
                              (rule "inEqSimp_commuteLeq" (formula "25") (term "0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "1,0,0,1,0"))
                              (rule "polySimp_mulComm0" (formula "25") (term "1,1,0,0,1,0"))
                              (rule "polySimp_rightDist" (formula "25") (term "1,1,0,0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "25") (term "1,1,1,0,0,1,0"))
                              (rule "mul_literals" (formula "25") (term "0,1,1,0,0,1,0"))
                              (rule "polySimp_elimOne" (formula "25") (term "1,1,1,0,0,1,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "25") (term "1,1,0,0"))
                              (rule "polySimp_rightDist" (formula "25") (term "1,1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "25") (term "1,1,1,0,0"))
                              (rule "mul_literals" (formula "25") (term "0,1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "25") (term "1,1,1,0,0"))
                              (rule "nnf_imp2or" (formula "25") (term "0"))
                              (rule "nnf_notAnd" (formula "25") (term "0,0"))
                              (rule "inEqSimp_notGeq" (formula "25") (term "0,0,0"))
                              (rule "times_zero_1" (formula "25") (term "1,0,0,0,0,0"))
                              (rule "add_literals" (formula "25") (term "0,0,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "0,0,0"))
                              (rule "mul_literals" (formula "25") (term "1,0,0,0"))
                              (rule "inEqSimp_notLeq" (formula "25") (term "1,0,0"))
                              (rule "polySimp_rightDist" (formula "25") (term "1,0,0,1,0,0"))
                              (rule "mul_literals" (formula "25") (term "0,1,0,0,1,0,0"))
                              (rule "polySimp_addAssoc" (formula "25") (term "0,0,1,0,0"))
                              (rule "add_literals" (formula "25") (term "0,0,0,1,0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "25") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "25") (term "1,1,0,0"))
                              (rule "polySimp_rightDist" (formula "25") (term "1,1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "25") (term "1,1,1,0,0"))
                              (rule "mul_literals" (formula "25") (term "0,1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "25") (term "1,1,1,0,0"))
                              (rule "nnf_imp2or" (formula "25") (term "0,1,0"))
                              (rule "nnf_notAnd" (formula "25") (term "0,0,1,0"))
                              (rule "inEqSimp_notLeq" (formula "25") (term "1,0,0,1,0"))
                              (rule "polySimp_rightDist" (formula "25") (term "1,0,0,1,0,0,1,0"))
                              (rule "mul_literals" (formula "25") (term "0,1,0,0,1,0,0,1,0"))
                              (rule "polySimp_addAssoc" (formula "25") (term "0,0,1,0,0,1,0"))
                              (rule "add_literals" (formula "25") (term "0,0,0,1,0,0,1,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "25") (term "1,0,0,1,0"))
                              (rule "polySimp_mulComm0" (formula "25") (term "1,1,0,0,1,0"))
                              (rule "polySimp_rightDist" (formula "25") (term "1,1,0,0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "25") (term "1,1,1,0,0,1,0"))
                              (rule "mul_literals" (formula "25") (term "0,1,1,0,0,1,0"))
                              (rule "polySimp_elimOne" (formula "25") (term "1,1,1,0,0,1,0"))
                              (rule "inEqSimp_notGeq" (formula "25") (term "0,0,0,1,0"))
                              (rule "polySimp_mulComm0" (formula "25") (term "1,0,0,0,0,0,1,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "0,0,0,1,0"))
                              (rule "polySimp_mulComm0" (formula "25") (term "1,0,0,0,1,0"))
                              (rule "polySimp_rightDist" (formula "25") (term "1,0,0,0,1,0"))
                              (rule "mul_literals" (formula "25") (term "0,1,0,0,0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "25") (term "1,1,0,0,0,1,0"))
                              (rule "polySimp_elimOne" (formula "25") (term "1,1,0,0,0,1,0"))
                              (rule "Contract_axiom_for_isSortedSlice_in_Functions" (formula "24") (term "0"))
                              (rule "replace_known_right" (formula "24") (term "0,0,0") (ifseqformula "28"))
                               (builtin "One Step Simplification" (formula "24") (ifInst ""  (formula "14")) (ifInst ""  (formula "25")))
                              (rule "Definition_axiom_for_isSortedSlice_in_de_wiesler_Functions" (formula "25") (term "0") (inst "i=i"))
                               (builtin "One Step Simplification" (formula "25"))
                              (rule "translateJavaAddInt" (formula "25") (term "0,2,1,1,0"))
                              (rule "translateJavaSubInt" (formula "25") (term "1,1,0,0"))
                              (rule "polySimp_elimSub" (formula "25") (term "1,1,0,0"))
                              (rule "mul_literals" (formula "25") (term "1,1,1,0,0"))
                              (rule "polySimp_addComm0" (formula "25") (term "0,2,1,1,0"))
                              (rule "polySimp_addComm1" (formula "25") (term "1,1,0,0"))
                              (rule "add_literals" (formula "25") (term "0,1,1,0,0"))
                              (rule "inEqSimp_ltToLeq" (formula "25") (term "1,0,0"))
                              (rule "polySimp_rightDist" (formula "25") (term "1,0,0,1,0,0"))
                              (rule "mul_literals" (formula "25") (term "0,1,0,0,1,0,0"))
                              (rule "polySimp_addAssoc" (formula "25") (term "0,0,1,0,0"))
                              (rule "add_literals" (formula "25") (term "0,0,0,1,0,0"))
                              (rule "inEqSimp_commuteLeq" (formula "25") (term "0,0,0"))
                              (rule "inEqSimp_commuteLeq" (formula "25") (term "1,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "25") (term "1,1,0,0"))
                              (rule "polySimp_rightDist" (formula "25") (term "1,1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "25") (term "1,1,1,0,0"))
                              (rule "mul_literals" (formula "25") (term "0,1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "25") (term "1,1,1,0,0"))
                              (rule "nnf_imp2or" (formula "25") (term "0"))
                              (rule "nnf_notAnd" (formula "25") (term "0,0"))
                              (rule "inEqSimp_notLeq" (formula "25") (term "1,0,0"))
                              (rule "polySimp_rightDist" (formula "25") (term "1,0,0,1,0,0"))
                              (rule "mul_literals" (formula "25") (term "0,1,0,0,1,0,0"))
                              (rule "polySimp_addAssoc" (formula "25") (term "0,0,1,0,0"))
                              (rule "add_literals" (formula "25") (term "0,0,0,1,0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "25") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "25") (term "1,1,0,0"))
                              (rule "polySimp_rightDist" (formula "25") (term "1,1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "25") (term "1,1,1,0,0"))
                              (rule "mul_literals" (formula "25") (term "0,1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "25") (term "1,1,1,0,0"))
                              (rule "inEqSimp_notGeq" (formula "25") (term "0,0,0"))
                              (rule "times_zero_1" (formula "25") (term "1,0,0,0,0,0"))
                              (rule "add_zero_right" (formula "25") (term "0,0,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "0,0,0"))
                              (rule "mul_literals" (formula "25") (term "1,0,0,0"))
                              (rule "jdiv_axiom" (formula "30") (term "1"))
                              (rule "eqSymm" (formula "1"))
                              (rule "inEqSimp_subsumption1" (formula "1") (term "0,0") (ifseqformula "4"))
                              (rule "leq_literals" (formula "1") (term "0,0,0"))
                               (builtin "One Step Simplification" (formula "1"))
                              (rule "eqSymm" (formula "1"))
                              (rule "applyEq" (formula "2") (term "0,1,0,2,0") (ifseqformula "1"))
                              (rule "applyEq" (formula "31") (term "1") (ifseqformula "1"))
                              (rule "commute_or" (formula "27") (term "0,0,1,0"))
                              (rule "Definition_axiom_for_isSortedSliceTransitive_in_de_wiesler_Functions" (formula "25") (term "0") (inst "i=i") (inst "j=j"))
                               (builtin "One Step Simplification" (formula "25"))
                              (rule "inEqSimp_ltToLeq" (formula "25") (term "1,0,0"))
                              (rule "polySimp_rightDist" (formula "25") (term "1,0,0,1,0,0"))
                              (rule "mul_literals" (formula "25") (term "0,1,0,0,1,0,0"))
                              (rule "polySimp_addAssoc" (formula "25") (term "0,0,1,0,0"))
                              (rule "add_literals" (formula "25") (term "0,0,0,1,0,0"))
                              (rule "inEqSimp_ltToLeq" (formula "25") (term "1,0,0,1,0"))
                              (rule "polySimp_rightDist" (formula "25") (term "1,0,0,1,0,0,1,0"))
                              (rule "mul_literals" (formula "25") (term "0,1,0,0,1,0,0,1,0"))
                              (rule "polySimp_addAssoc" (formula "25") (term "0,0,1,0,0,1,0"))
                              (rule "add_literals" (formula "25") (term "0,0,0,1,0,0,1,0"))
                              (rule "inEqSimp_commuteLeq" (formula "25") (term "0,0,0,1,0"))
                              (rule "inEqSimp_commuteLeq" (formula "25") (term "0,0,0"))
                              (rule "inEqSimp_commuteLeq" (formula "25") (term "1,0,1,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "25") (term "1,1,0,0"))
                              (rule "polySimp_rightDist" (formula "25") (term "1,1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "25") (term "1,1,1,0,0"))
                              (rule "mul_literals" (formula "25") (term "0,1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "25") (term "1,1,1,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "1,0,0,1,0"))
                              (rule "polySimp_mulComm0" (formula "25") (term "1,1,0,0,1,0"))
                              (rule "polySimp_rightDist" (formula "25") (term "1,1,0,0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "25") (term "1,1,1,0,0,1,0"))
                              (rule "mul_literals" (formula "25") (term "0,1,1,0,0,1,0"))
                              (rule "polySimp_elimOne" (formula "25") (term "1,1,1,0,0,1,0"))
                              (rule "nnf_imp2or" (formula "25") (term "0"))
                              (rule "nnf_notAnd" (formula "25") (term "0,0"))
                              (rule "inEqSimp_notLeq" (formula "25") (term "1,0,0"))
                              (rule "polySimp_rightDist" (formula "25") (term "1,0,0,1,0,0"))
                              (rule "mul_literals" (formula "25") (term "0,1,0,0,1,0,0"))
                              (rule "polySimp_addAssoc" (formula "25") (term "0,0,1,0,0"))
                              (rule "add_literals" (formula "25") (term "0,0,0,1,0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "25") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "25") (term "1,1,0,0"))
                              (rule "polySimp_rightDist" (formula "25") (term "1,1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "25") (term "1,1,1,0,0"))
                              (rule "mul_literals" (formula "25") (term "0,1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "25") (term "1,1,1,0,0"))
                              (rule "inEqSimp_notGeq" (formula "25") (term "0,0,0"))
                              (rule "times_zero_1" (formula "25") (term "1,0,0,0,0,0"))
                              (rule "add_literals" (formula "25") (term "0,0,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "0,0,0"))
                              (rule "mul_literals" (formula "25") (term "1,0,0,0"))
                              (rule "nnf_imp2or" (formula "25") (term "0,1,0"))
                              (rule "nnf_notAnd" (formula "25") (term "0,0,1,0"))
                              (rule "inEqSimp_notGeq" (formula "25") (term "0,0,0,1,0"))
                              (rule "polySimp_mulComm0" (formula "25") (term "1,0,0,0,0,0,1,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "0,0,0,1,0"))
                              (rule "polySimp_mulComm0" (formula "25") (term "1,0,0,0,1,0"))
                              (rule "polySimp_rightDist" (formula "25") (term "1,0,0,0,1,0"))
                              (rule "mul_literals" (formula "25") (term "0,1,0,0,0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "25") (term "1,1,0,0,0,1,0"))
                              (rule "polySimp_elimOne" (formula "25") (term "1,1,0,0,0,1,0"))
                              (rule "inEqSimp_notLeq" (formula "25") (term "1,0,0,1,0"))
                              (rule "polySimp_rightDist" (formula "25") (term "1,0,0,1,0,0,1,0"))
                              (rule "mul_literals" (formula "25") (term "0,1,0,0,1,0,0,1,0"))
                              (rule "polySimp_addAssoc" (formula "25") (term "0,0,1,0,0,1,0"))
                              (rule "add_literals" (formula "25") (term "0,0,0,1,0,0,1,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "25") (term "1,0,0,1,0"))
                              (rule "polySimp_mulComm0" (formula "25") (term "1,1,0,0,1,0"))
                              (rule "polySimp_rightDist" (formula "25") (term "1,1,0,0,1,0"))
                              (rule "mul_literals" (formula "25") (term "0,1,1,0,0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "25") (term "1,1,1,0,0,1,0"))
                              (rule "polySimp_elimOne" (formula "25") (term "1,1,1,0,0,1,0"))
                              (rule "cut_direct" (formula "13") (term "1"))
                              (branch "CUT: self.sorted_splitters[b_0] >= value TRUE"
                                  (builtin "One Step Simplification" (formula "14"))
                                 (rule "true_left" (formula "14"))
                                 (rule "arrayLengthIsAShort" (formula "24") (term "0"))
                                  (builtin "One Step Simplification" (formula "24"))
                                 (rule "true_left" (formula "24"))
                                 (rule "arrayLengthNotNegative" (formula "24") (term "0"))
                                 (rule "arrayLengthNotNegative" (formula "23") (term "0"))
                                 (rule "arrayLengthIsAShort" (formula "24") (term "0"))
                                  (builtin "One Step Simplification" (formula "24"))
                                 (rule "true_left" (formula "24"))
                                 (rule "cut_direct" (formula "10") (term "0"))
                                 (branch "CUT: exp_0 >= 1 TRUE"
                                     (builtin "One Step Simplification" (formula "11"))
                                    (rule "inEqSimp_subsumption1" (formula "7") (ifseqformula "10"))
                                    (rule "leq_literals" (formula "7") (term "0"))
                                     (builtin "One Step Simplification" (formula "7"))
                                    (rule "true_left" (formula "7"))
                                    (rule "newSym_eq" (formula "10") (inst "l=l_0") (inst "newSymDef=mul(d_0, Z(0(#)))"))
                                    (rule "times_zero_1" (formula "10") (term "1,1"))
                                    (rule "add_zero_right" (formula "10") (term "1"))
                                    (rule "applyEq" (formula "34") (term "0") (ifseqformula "10"))
                                    (rule "eqSymm" (formula "34"))
                                    (rule "applyEqRigid" (formula "11") (term "0,0") (ifseqformula "10"))
                                    (rule "eqSymm" (formula "11"))
                                    (rule "applyEq" (formula "5") (term "0") (ifseqformula "11"))
                                    (rule "inEqSimp_homoInEq0" (formula "5"))
                                    (rule "polySimp_mulLiterals" (formula "5") (term "1,0"))
                                    (rule "polySimp_addComm1" (formula "5") (term "0"))
                                    (rule "applyEqRigid" (formula "13") (term "0,0") (ifseqformula "11"))
                                    (rule "polySimp_homoEq" (formula "13") (term "0"))
                                    (rule "polySimp_mulLiterals" (formula "13") (term "1,0,0"))
                                    (rule "polySimp_addComm1" (formula "13") (term "0,0"))
                                    (rule "applyEqRigid" (formula "13") (term "0,1,0,2,0,1") (ifseqformula "11"))
                                    (rule "polySimp_mulLiterals" (formula "13") (term "1,0,2,0,1"))
                                    (rule "polySimp_addComm0" (formula "13") (term "0,2,0,1"))
                                    (rule "applyEq" (formula "34") (term "0,0") (ifseqformula "11"))
                                    (rule "applyEq" (formula "2") (term "0,0,1,0,2,0") (ifseqformula "11"))
                                    (rule "applyEqRigid" (formula "4") (term "0") (ifseqformula "11"))
                                    (rule "applyEqRigid" (formula "1") (term "0,0") (ifseqformula "11"))
                                    (rule "applyEq" (formula "1") (term "0,1") (ifseqformula "11"))
                                    (rule "applyEqRigid" (formula "12") (term "1") (ifseqformula "11"))
                                    (rule "polySimp_sepPosMonomial" (formula "13") (term "0"))
                                    (rule "polySimp_mulComm0" (formula "13") (term "1,0"))
                                    (rule "polySimp_rightDist" (formula "13") (term "1,0"))
                                    (rule "polySimp_mulLiterals" (formula "13") (term "1,1,0"))
                                    (rule "mul_literals" (formula "13") (term "0,1,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "5"))
                                    (rule "polySimp_mulComm0" (formula "5") (term "1"))
                                    (rule "polySimp_rightDist" (formula "5") (term "1"))
                                    (rule "polySimp_mulLiterals" (formula "5") (term "1,1"))
                                    (rule "mul_literals" (formula "5") (term "0,1"))
                                    (rule "elimGcdGeq_antec" (formula "4") (inst "elimGcdRightDiv=Z(1(#))") (inst "elimGcdLeftDiv=l_0") (inst "elimGcd=Z(2(#))"))
                                    (rule "polySimp_mulLiterals" (formula "4") (term "1,0,0,0,0,1,0"))
                                    (rule "polySimp_mulLiterals" (formula "4") (term "1,0,1,0"))
                                    (rule "leq_literals" (formula "4") (term "0,0"))
                                     (builtin "One Step Simplification" (formula "4"))
                                    (rule "mul_literals" (formula "4") (term "1,0,0,0,0,0"))
                                    (rule "polySimp_addLiterals" (formula "4") (term "0,0,0,0"))
                                    (rule "add_zero_right" (formula "4") (term "0,0,0,0"))
                                    (rule "polySimp_pullOutFactor0b" (formula "4") (term "0,0"))
                                    (rule "add_literals" (formula "4") (term "1,1,0,0"))
                                    (rule "times_zero_1" (formula "4") (term "1,0,0"))
                                    (rule "add_literals" (formula "4") (term "0,0"))
                                    (rule "leq_literals" (formula "4") (term "0"))
                                     (builtin "One Step Simplification" (formula "4"))
                                    (rule "polyDiv_pullOut" (formula "1") (term "1") (inst "polyDivCoeff=l_0"))
                                    (rule "polySimp_mulLiterals" (formula "1") (term "1,0,0,2,1"))
                                    (rule "equal_literals" (formula "1") (term "0,1"))
                                     (builtin "One Step Simplification" (formula "1"))
                                    (rule "polySimp_pullOutFactor0" (formula "1") (term "0,0,1"))
                                    (rule "add_literals" (formula "1") (term "1,0,0,1"))
                                    (rule "times_zero_1" (formula "1") (term "0,0,1"))
                                    (rule "div_literals" (formula "1") (term "0,1"))
                                    (rule "add_zero_left" (formula "1") (term "1"))
                                    (rule "polyDiv_pullOut" (formula "2") (term "0,1,0,2,0") (inst "polyDivCoeff=l_0"))
                                    (rule "equal_literals" (formula "2") (term "0,0,1,0,2,0"))
                                     (builtin "One Step Simplification" (formula "2"))
                                    (rule "polySimp_mulLiterals" (formula "2") (term "1,0,0,0,1,0,2,0"))
                                    (rule "polySimp_pullOutFactor0" (formula "2") (term "0,0,0,1,0,2,0"))
                                    (rule "add_literals" (formula "2") (term "1,0,0,0,1,0,2,0"))
                                    (rule "times_zero_1" (formula "2") (term "0,0,0,1,0,2,0"))
                                    (rule "div_literals" (formula "2") (term "0,0,1,0,2,0"))
                                    (rule "add_zero_left" (formula "2") (term "0,1,0,2,0"))
                                    (rule "polySimp_addComm0" (formula "2") (term "0,2,0"))
                                    (rule "polyDiv_pullOut" (formula "34") (term "0") (inst "polyDivCoeff=l_0"))
                                    (rule "equal_literals" (formula "34") (term "0,0"))
                                     (builtin "One Step Simplification" (formula "34"))
                                    (rule "polySimp_mulLiterals" (formula "34") (term "1,0,0,0"))
                                    (rule "polySimp_homoEq" (formula "34"))
                                    (rule "polySimp_pullOutFactor0" (formula "34") (term "0,0,0,1,0"))
                                    (rule "add_literals" (formula "34") (term "1,0,0,0,1,0"))
                                    (rule "times_zero_1" (formula "34") (term "0,0,0,1,0"))
                                    (rule "div_literals" (formula "34") (term "0,0,1,0"))
                                    (rule "add_zero_left" (formula "34") (term "0,1,0"))
                                    (rule "polySimp_pullOutFactor1" (formula "34") (term "0"))
                                    (rule "add_literals" (formula "34") (term "1,0"))
                                    (rule "times_zero_1" (formula "34") (term "0"))
                                     (builtin "One Step Simplification" (formula "34"))
                                    (rule "closeTrue" (formula "34"))
                                 )
                                 (branch "CUT: exp_0 >= 1 FALSE"
                                     (builtin "One Step Simplification" (formula "10"))
                                    (rule "true_left" (formula "10"))
                                    (rule "inEqSimp_geqRight" (formula "29"))
                                    (rule "mul_literals" (formula "1") (term "1,0,0"))
                                    (rule "add_literals" (formula "1") (term "0,0"))
                                    (rule "add_zero_left" (formula "1") (term "0"))
                                    (rule "inEqSimp_subsumption0" (formula "9") (ifseqformula "1"))
                                    (rule "leq_literals" (formula "9") (term "0"))
                                     (builtin "One Step Simplification" (formula "9"))
                                    (rule "true_left" (formula "9"))
                                    (rule "inEqSimp_antiSymm" (formula "8") (ifseqformula "1"))
                                    (rule "applyEq" (formula "9") (term "0") (ifseqformula "8"))
                                    (rule "qeq_literals" (formula "9"))
                                    (rule "true_left" (formula "9"))
                                    (rule "applyEqRigid" (formula "10") (term "1,0") (ifseqformula "8"))
                                    (rule "translateJavaShiftLeftIntZero" (formula "10") (term "0"))
                                    (rule "eqSymm" (formula "10"))
                                    (rule "applyEq" (formula "9") (term "1") (ifseqformula "8"))
                                    (rule "applyEq" (formula "1") (term "0") (ifseqformula "8"))
                                    (rule "leq_literals" (formula "1"))
                                    (rule "true_left" (formula "1"))
                                    (rule "applyEqRigid" (formula "31") (term "1,1,0") (ifseqformula "7"))
                                    (rule "add_zero_right" (formula "31") (term "1,0"))
                                    (rule "translateJavaShiftLeftIntConstant" (formula "31") (term "0"))
                                    (rule "applyEq" (formula "10") (term "0,1,0,2,0,1") (ifseqformula "9"))
                                    (rule "mul_literals" (formula "10") (term "1,0,2,0,1"))
                                    (rule "polySimp_addComm0" (formula "10") (term "0,2,0,1"))
                                    (rule "applyEq" (formula "2") (term "0,0,1,0,2,0") (ifseqformula "9"))
                                    (rule "div_literals" (formula "2") (term "0,1,0,2,0"))
                                    (rule "mul_literals" (formula "2") (term "1,0,2,0"))
                                    (rule "add_zero_right" (formula "2") (term "0,2,0"))
                                    (rule "applyEq" (formula "10") (term "0,0") (ifseqformula "9"))
                                    (rule "polySimp_homoEq" (formula "10") (term "0"))
                                    (rule "mul_literals" (formula "10") (term "1,0,0"))
                                    (rule "polySimp_addComm1" (formula "10") (term "0,0"))
                                    (rule "add_literals" (formula "10") (term "0,0,0"))
                                    (rule "add_zero_left" (formula "10") (term "0,0"))
                                    (rule "applyEqRigid" (formula "4") (term "0") (ifseqformula "9"))
                                    (rule "qeq_literals" (formula "4"))
                                    (rule "closeFalse" (formula "4"))
                                 )
                              )
                              (branch "CUT: self.sorted_splitters[b_0] >= value FALSE"
                                  (builtin "One Step Simplification" (formula "13"))
                                 (rule "inEqSimp_geqRight" (formula "28"))
                                 (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                 (rule "applyEq" (formula "27") (term "1,1,1,0,0") (ifseqformula "14"))
                                 (rule "polySimp_addAssoc" (formula "27") (term "1,1,0,0"))
                                 (rule "add_literals" (formula "27") (term "0,1,1,0,0"))
                                 (rule "applyEq" (formula "28") (term "1,1,1,0,0") (ifseqformula "14"))
                                 (rule "polySimp_addAssoc" (formula "28") (term "1,1,0,0"))
                                 (rule "add_literals" (formula "28") (term "0,1,1,0,0"))
                                 (rule "add_zero_left" (formula "28") (term "1,1,0,0"))
                                 (rule "applyEq" (formula "28") (term "1,1,0,0,0,1,0") (ifseqformula "14"))
                                 (rule "polySimp_addAssoc" (formula "28") (term "1,0,0,0,1,0"))
                                 (rule "add_literals" (formula "28") (term "0,1,0,0,0,1,0"))
                                 (rule "add_zero_left" (formula "28") (term "1,0,0,0,1,0"))
                                 (rule "applyEq" (formula "24") (term "1") (ifseqformula "14"))
                                 (rule "applyEq" (formula "7") (term "0") (ifseqformula "14"))
                                 (rule "inEqSimp_homoInEq1" (formula "7"))
                                 (rule "polySimp_pullOutFactor1" (formula "7") (term "0"))
                                 (rule "add_literals" (formula "7") (term "1,0"))
                                 (rule "times_zero_1" (formula "7") (term "0"))
                                 (rule "leq_literals" (formula "7"))
                                 (rule "true_left" (formula "7"))
                                 (rule "applyEq" (formula "25") (term "1,1,1,0,0,1,0") (ifseqformula "13"))
                                 (rule "polySimp_addAssoc" (formula "25") (term "1,1,0,0,1,0"))
                                 (rule "add_literals" (formula "25") (term "0,1,1,0,0,1,0"))
                                 (rule "add_zero_left" (formula "25") (term "1,1,0,0,1,0"))
                                 (rule "applyEq" (formula "24") (term "1") (ifseqformula "13"))
                                 (rule "applyEq" (formula "22") (term "0") (ifseqformula "13"))
                                 (rule "inEqSimp_homoInEq1" (formula "22"))
                                 (rule "polySimp_mulComm0" (formula "22") (term "1,0"))
                                 (rule "polySimp_rightDist" (formula "22") (term "1,0"))
                                 (rule "mul_literals" (formula "22") (term "0,1,0"))
                                 (rule "polySimp_addAssoc" (formula "22") (term "0"))
                                 (rule "add_literals" (formula "22") (term "0,0"))
                                 (rule "applyEq" (formula "25") (term "1,1,1,0,0") (ifseqformula "13"))
                                 (rule "polySimp_addAssoc" (formula "25") (term "1,1,0,0"))
                                 (rule "add_literals" (formula "25") (term "0,1,1,0,0"))
                                 (rule "add_zero_left" (formula "25") (term "1,1,0,0"))
                                 (rule "applyEq" (formula "21") (term "1") (ifseqformula "13"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                 (rule "polySimp_mulComm0" (formula "1") (term "1"))
                                 (rule "polySimp_rightDist" (formula "1") (term "1"))
                                 (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                                 (rule "mul_literals" (formula "1") (term "0,1"))
                                 (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                                 (rule "inEqSimp_sepNegMonomial0" (formula "22"))
                                 (rule "polySimp_mulLiterals" (formula "22") (term "0"))
                                 (rule "polySimp_elimOne" (formula "22") (term "0"))
                                 (rule "arrayLengthIsAShort" (formula "23") (term "0"))
                                  (builtin "One Step Simplification" (formula "23"))
                                 (rule "true_left" (formula "23"))
                                 (rule "arrayLengthNotNegative" (formula "23") (term "0"))
                                 (rule "arrayLengthNotNegative" (formula "22") (term "0"))
                                 (rule "arrayLengthIsAShort" (formula "23") (term "0"))
                                  (builtin "One Step Simplification" (formula "23"))
                                 (rule "true_left" (formula "23"))
                                 (rule "cut_direct" (formula "10") (term "0"))
                                 (branch "CUT: exp_0 >= 1 TRUE"
                                     (builtin "One Step Simplification" (formula "11"))
                                    (rule "inEqSimp_subsumption1" (formula "7") (ifseqformula "10"))
                                    (rule "leq_literals" (formula "7") (term "0"))
                                     (builtin "One Step Simplification" (formula "7"))
                                    (rule "true_left" (formula "7"))
                                    (rule "newSym_eq" (formula "10") (inst "l=l_0") (inst "newSymDef=mul(d_0, Z(0(#)))"))
                                    (rule "times_zero_1" (formula "10") (term "1,1"))
                                    (rule "add_zero_right" (formula "10") (term "1"))
                                    (rule "applyEq" (formula "33") (term "0") (ifseqformula "10"))
                                    (rule "eqSymm" (formula "33"))
                                    (rule "applyEqRigid" (formula "11") (term "0,0") (ifseqformula "10"))
                                    (rule "eqSymm" (formula "11"))
                                    (rule "applyEqRigid" (formula "5") (term "0") (ifseqformula "11"))
                                    (rule "applyEq" (formula "2") (term "0,0") (ifseqformula "11"))
                                    (rule "applyEq" (formula "6") (term "0") (ifseqformula "11"))
                                    (rule "inEqSimp_homoInEq0" (formula "6"))
                                    (rule "polySimp_mulLiterals" (formula "6") (term "1,0"))
                                    (rule "polySimp_addComm1" (formula "6") (term "0"))
                                    (rule "applyEqRigid" (formula "13") (term "0,0") (ifseqformula "11"))
                                    (rule "polySimp_homoEq" (formula "13") (term "0"))
                                    (rule "polySimp_mulLiterals" (formula "13") (term "1,0,0"))
                                    (rule "polySimp_addComm1" (formula "13") (term "0,0"))
                                    (rule "applyEqRigid" (formula "13") (term "0,1,0,2,0,1") (ifseqformula "11"))
                                    (rule "polySimp_mulLiterals" (formula "13") (term "1,0,2,0,1"))
                                    (rule "polySimp_addComm0" (formula "13") (term "0,2,0,1"))
                                    (rule "applyEqRigid" (formula "3") (term "0,0,1,0,2,0") (ifseqformula "11"))
                                    (rule "applyEq" (formula "33") (term "0,0") (ifseqformula "11"))
                                    (rule "applyEq" (formula "2") (term "0,1") (ifseqformula "11"))
                                    (rule "applyEq" (formula "12") (term "1") (ifseqformula "11"))
                                    (rule "polySimp_sepPosMonomial" (formula "13") (term "0"))
                                    (rule "polySimp_mulComm0" (formula "13") (term "1,0"))
                                    (rule "polySimp_rightDist" (formula "13") (term "1,0"))
                                    (rule "polySimp_mulLiterals" (formula "13") (term "1,1,0"))
                                    (rule "mul_literals" (formula "13") (term "0,1,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "6"))
                                    (rule "polySimp_mulComm0" (formula "6") (term "1"))
                                    (rule "polySimp_rightDist" (formula "6") (term "1"))
                                    (rule "polySimp_mulLiterals" (formula "6") (term "1,1"))
                                    (rule "mul_literals" (formula "6") (term "0,1"))
                                    (rule "elimGcdGeq_antec" (formula "5") (inst "elimGcdRightDiv=Z(1(#))") (inst "elimGcdLeftDiv=l_0") (inst "elimGcd=Z(2(#))"))
                                    (rule "polySimp_mulLiterals" (formula "5") (term "1,0,0,0,0,1,0"))
                                    (rule "polySimp_mulLiterals" (formula "5") (term "1,0,1,0"))
                                    (rule "leq_literals" (formula "5") (term "0,0"))
                                     (builtin "One Step Simplification" (formula "5"))
                                    (rule "mul_literals" (formula "5") (term "1,0,0,0,0,0"))
                                    (rule "polySimp_addLiterals" (formula "5") (term "0,0,0,0"))
                                    (rule "add_zero_right" (formula "5") (term "0,0,0,0"))
                                    (rule "polySimp_pullOutFactor0b" (formula "5") (term "0,0"))
                                    (rule "add_literals" (formula "5") (term "1,1,0,0"))
                                    (rule "times_zero_1" (formula "5") (term "1,0,0"))
                                    (rule "add_zero_right" (formula "5") (term "0,0"))
                                    (rule "leq_literals" (formula "5") (term "0"))
                                     (builtin "One Step Simplification" (formula "5"))
                                    (rule "polyDiv_pullOut" (formula "2") (term "1") (inst "polyDivCoeff=l_0"))
                                    (rule "polySimp_mulLiterals" (formula "2") (term "1,0,0,2,1"))
                                    (rule "equal_literals" (formula "2") (term "0,1"))
                                     (builtin "One Step Simplification" (formula "2"))
                                    (rule "polySimp_pullOutFactor0" (formula "2") (term "0,0,1"))
                                    (rule "add_literals" (formula "2") (term "1,0,0,1"))
                                    (rule "times_zero_1" (formula "2") (term "0,0,1"))
                                    (rule "div_literals" (formula "2") (term "0,1"))
                                    (rule "add_zero_left" (formula "2") (term "1"))
                                    (rule "polyDiv_pullOut" (formula "33") (term "0") (inst "polyDivCoeff=l_0"))
                                    (rule "polySimp_mulLiterals" (formula "33") (term "1,0,0,2,0"))
                                    (rule "equal_literals" (formula "33") (term "0,0"))
                                     (builtin "One Step Simplification" (formula "33"))
                                    (rule "polySimp_pullOutFactor0" (formula "33") (term "0,0,0"))
                                    (rule "add_literals" (formula "33") (term "1,0,0,0"))
                                    (rule "times_zero_1" (formula "33") (term "0,0,0"))
                                    (rule "div_literals" (formula "33") (term "0,0"))
                                    (rule "add_zero_left" (formula "33") (term "0"))
                                     (builtin "One Step Simplification" (formula "33"))
                                    (rule "closeTrue" (formula "33"))
                                 )
                                 (branch "CUT: exp_0 >= 1 FALSE"
                                     (builtin "One Step Simplification" (formula "10"))
                                    (rule "true_left" (formula "10"))
                                    (rule "inEqSimp_geqRight" (formula "28"))
                                    (rule "mul_literals" (formula "1") (term "1,0,0"))
                                    (rule "add_literals" (formula "1") (term "0,0"))
                                    (rule "add_zero_left" (formula "1") (term "0"))
                                    (rule "inEqSimp_subsumption0" (formula "9") (ifseqformula "1"))
                                    (rule "leq_literals" (formula "9") (term "0"))
                                     (builtin "One Step Simplification" (formula "9"))
                                    (rule "true_left" (formula "9"))
                                    (rule "inEqSimp_antiSymm" (formula "8") (ifseqformula "1"))
                                    (rule "applyEqRigid" (formula "32") (term "1,1,0") (ifseqformula "8"))
                                    (rule "add_zero_right" (formula "32") (term "1,0"))
                                    (rule "translateJavaShiftLeftIntConstant" (formula "32") (term "0"))
                                    (rule "applyEq" (formula "10") (term "1") (ifseqformula "8"))
                                    (rule "applyEqRigid" (formula "11") (term "1,0") (ifseqformula "8"))
                                    (rule "translateJavaShiftLeftIntZero" (formula "11") (term "0"))
                                    (rule "eqSymm" (formula "11"))
                                    (rule "applyEqRigid" (formula "9") (term "0") (ifseqformula "8"))
                                    (rule "qeq_literals" (formula "9"))
                                    (rule "true_left" (formula "9"))
                                    (rule "applyEqRigid" (formula "1") (term "0") (ifseqformula "8"))
                                    (rule "leq_literals" (formula "1"))
                                    (rule "true_left" (formula "1"))
                                    (rule "applyEqRigid" (formula "3") (term "0,0,1,0,2,0") (ifseqformula "9"))
                                    (rule "div_literals" (formula "3") (term "0,1,0,2,0"))
                                    (rule "times_zero_2" (formula "3") (term "1,0,2,0"))
                                    (rule "add_zero_right" (formula "3") (term "0,2,0"))
                                    (rule "applyEqRigid" (formula "9") (term "0,0") (ifseqformula "8"))
                                    (rule "polySimp_homoEq" (formula "9") (term "0"))
                                    (rule "mul_literals" (formula "9") (term "1,0,0"))
                                    (rule "polySimp_addComm1" (formula "9") (term "0,0"))
                                    (rule "add_literals" (formula "9") (term "0,0,0"))
                                    (rule "add_zero_left" (formula "9") (term "0,0"))
                                    (rule "applyEqRigid" (formula "2") (term "0,0") (ifseqformula "8"))
                                    (rule "eqSymm" (formula "2"))
                                    (rule "jdiv_axiom_inline" (formula "2") (term "1"))
                                    (rule "mul_literals" (formula "2") (term "0,0,2,1"))
                                    (rule "div_literals" (formula "2") (term "1,1"))
                                    (rule "qeq_literals" (formula "2") (term "0,1"))
                                     (builtin "One Step Simplification" (formula "2"))
                                    (rule "applyEq" (formula "4") (term "0") (ifseqformula "8"))
                                    (rule "qeq_literals" (formula "4"))
                                    (rule "closeFalse" (formula "4"))
                                 )
                              )
                           )
                        )
                        (branch
                           (rule "polySimp_homoEq" (formula "9") (term "0"))
                           (rule "polySimp_homoEq" (formula "8") (term "1"))
                           (rule "polySimp_mulComm0" (formula "9") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "8") (term "1,0,1"))
                           (rule "polySimp_rightDist" (formula "9") (term "1,0,0"))
                           (rule "mul_literals" (formula "9") (term "0,1,0,0"))
                           (rule "polySimp_rightDist" (formula "8") (term "1,0,1"))
                           (rule "polySimp_mulLiterals" (formula "8") (term "1,1,0,1"))
                           (rule "polySimp_elimOne" (formula "8") (term "1,1,0,1"))
                           (rule "polySimp_mulComm0" (formula "8") (term "0,1,0,1"))
                           (rule "polySimp_addAssoc" (formula "9") (term "0,0"))
                           (rule "polySimp_addComm0" (formula "9") (term "0,0,0"))
                           (rule "polySimp_addAssoc" (formula "8") (term "0,1"))
                           (rule "precOfInt" (formula "18"))
                           (rule "inEqSimp_ltToLeq" (formula "8") (term "0"))
                           (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "1"))
                           (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                           (rule "inEqSimp_gtToGeq" (formula "2"))
                           (rule "mul_literals" (formula "2") (term "1,0,0"))
                           (rule "add_literals" (formula "2") (term "0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "18") (term "1"))
                           (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,1"))
                           (rule "polySimp_addAssoc" (formula "18") (term "0,1"))
                           (rule "polySimp_addComm1" (formula "18") (term "0,0,1"))
                           (rule "add_literals" (formula "18") (term "0,0,0,1"))
                           (rule "add_zero_left" (formula "18") (term "0,0,1"))
                           (rule "polySimp_pullOutFactor2" (formula "18") (term "0,1"))
                           (rule "add_literals" (formula "18") (term "1,0,1"))
                           (rule "times_zero_1" (formula "18") (term "0,1"))
                           (rule "leq_literals" (formula "18") (term "1"))
                            (builtin "One Step Simplification" (formula "18"))
                           (rule "inEqSimp_leqRight" (formula "18"))
                           (rule "add_zero_right" (formula "1") (term "0"))
                           (rule "polySimp_rightDist" (formula "1") (term "1,0"))
                           (rule "mul_literals" (formula "1") (term "0,1,0"))
                           (rule "polySimp_addAssoc" (formula "1") (term "0"))
                           (rule "add_literals" (formula "1") (term "0,0"))
                           (rule "add_zero_left" (formula "1") (term "0"))
                           (rule "inEqSimp_homoInEq0" (formula "5"))
                           (rule "polySimp_addComm1" (formula "5") (term "0"))
                           (rule "inEqSimp_homoInEq0" (formula "4"))
                           (rule "polySimp_mulComm0" (formula "4") (term "1,0"))
                           (rule "polySimp_rightDist" (formula "4") (term "1,0"))
                           (rule "mul_literals" (formula "4") (term "0,1,0"))
                           (rule "polySimp_addAssoc" (formula "4") (term "0"))
                           (rule "polySimp_addComm0" (formula "4") (term "0,0"))
                           (rule "polySimp_sepNegMonomial" (formula "10") (term "0"))
                           (rule "polySimp_mulLiterals" (formula "10") (term "0,0"))
                           (rule "polySimp_elimOne" (formula "10") (term "0,0"))
                           (rule "polySimp_sepPosMonomial" (formula "9") (term "1"))
                           (rule "polySimp_mulComm0" (formula "9") (term "1,1"))
                           (rule "polySimp_rightDist" (formula "9") (term "1,1"))
                           (rule "mul_literals" (formula "9") (term "0,1,1"))
                           (rule "polySimp_mulLiterals" (formula "9") (term "1,1,1"))
                           (rule "polySimp_elimOne" (formula "9") (term "1,1,1"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "0"))
                           (rule "polySimp_mulComm0" (formula "9") (term "1,0"))
                           (rule "polySimp_rightDist" (formula "9") (term "1,0"))
                           (rule "mul_literals" (formula "9") (term "0,1,0"))
                           (rule "polySimp_mulLiterals" (formula "9") (term "1,1,0"))
                           (rule "polySimp_elimOne" (formula "9") (term "1,1,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "2"))
                           (rule "polySimp_mulComm0" (formula "2") (term "1"))
                           (rule "polySimp_rightDist" (formula "2") (term "1"))
                           (rule "mul_literals" (formula "2") (term "0,1"))
                           (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
                           (rule "polySimp_elimOne" (formula "2") (term "1,1"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "3"))
                           (rule "mul_literals" (formula "3") (term "1"))
                           (rule "inEqSimp_invertInEq1" (formula "1"))
                           (rule "times_zero_2" (formula "1") (term "1"))
                           (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                           (rule "polySimp_elimOne" (formula "1") (term "0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "5"))
                           (rule "polySimp_mulComm0" (formula "5") (term "1"))
                           (rule "polySimp_rightDist" (formula "5") (term "1"))
                           (rule "mul_literals" (formula "5") (term "0,1"))
                           (rule "polySimp_mulLiterals" (formula "5") (term "1,1"))
                           (rule "polySimp_elimOne" (formula "5") (term "1,1"))
                           (rule "inEqSimp_sepNegMonomial1" (formula "4"))
                           (rule "polySimp_mulLiterals" (formula "4") (term "0"))
                           (rule "polySimp_elimOne" (formula "4") (term "0"))
                           (rule "inEqSimp_antiSymm" (formula "6") (ifseqformula "1"))
                           (rule "applyEqRigid" (formula "9") (term "1,0") (ifseqformula "6"))
                           (rule "translateJavaShiftLeftIntConstant" (formula "9") (term "0"))
                           (rule "applyEq" (formula "8") (term "1") (ifseqformula "6"))
                           (rule "applyEqRigid" (formula "1") (term "0") (ifseqformula "6"))
                           (rule "leq_literals" (formula "1"))
                           (rule "true_left" (formula "1"))
                           (rule "applyEq" (formula "6") (term "0") (ifseqformula "5"))
                           (rule "qeq_literals" (formula "6"))
                           (rule "true_left" (formula "6"))
                           (rule "javaShiftLeftIntDef" (formula "7") (term "0"))
                            (builtin "One Step Simplification" (formula "7"))
                           (rule "shiftleft_literals" (formula "7") (term "0,0"))
                           (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "3"))
                           (rule "mul_literals" (formula "2") (term "0,0"))
                           (rule "polySimp_addAssoc" (formula "2") (term "0"))
                           (rule "add_literals" (formula "2") (term "0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                           (rule "mul_literals" (formula "2") (term "1"))
                           (rule "expand_moduloInteger" (formula "8") (term "0"))
                           (rule "replace_int_RANGE" (formula "8") (term "1,1,0"))
                           (rule "replace_int_HALFRANGE" (formula "8") (term "0,0,1,0"))
                           (rule "replace_int_MIN" (formula "8") (term "0,0"))
                           (rule "add_literals" (formula "8") (term "0,1,0"))
                           (rule "polySimp_homoEq" (formula "8"))
                           (rule "polySimp_mulComm0" (formula "8") (term "1,0"))
                           (rule "polySimp_rightDist" (formula "8") (term "1,0"))
                           (rule "mul_literals" (formula "8") (term "0,1,0"))
                           (rule "polySimp_addAssoc" (formula "8") (term "0"))
                           (rule "polySimp_addComm0" (formula "8") (term "0,0"))
                           (rule "mod_axiom" (formula "8") (term "0,1,0"))
                           (rule "polySimp_mulLiterals" (formula "8") (term "1,0,1,0"))
                           (rule "div_literals" (formula "8") (term "0,1,0,1,0"))
                           (rule "mul_literals" (formula "8") (term "1,0,1,0"))
                           (rule "add_zero_right" (formula "8") (term "0,1,0"))
                           (rule "mul_literals" (formula "8") (term "1,0"))
                           (rule "polySimp_addComm1" (formula "8") (term "0"))
                           (rule "add_literals" (formula "8") (term "0,0"))
                           (rule "polySimp_sepPosMonomial" (formula "8"))
                           (rule "mul_literals" (formula "8") (term "1"))
                           (rule "applyEq" (formula "9") (term "0,1") (ifseqformula "8"))
                           (rule "polySimp_homoEq" (formula "9") (term "1"))
                           (rule "mul_literals" (formula "9") (term "1,0,1"))
                           (rule "polySimp_addComm1" (formula "9") (term "0,1"))
                           (rule "add_literals" (formula "9") (term "0,0,1"))
                           (rule "add_zero_left" (formula "9") (term "0,1"))
                           (rule "applyEq" (formula "9") (term "0,1,0,2,0,0") (ifseqformula "8"))
                           (rule "mul_literals" (formula "9") (term "1,0,2,0,0"))
                           (rule "polySimp_addComm0" (formula "9") (term "0,2,0,0"))
                           (rule "applyEqRigid" (formula "3") (term "0") (ifseqformula "8"))
                           (rule "qeq_literals" (formula "3"))
                           (rule "closeFalse" (formula "3"))
                        )
                     )
                  )
                  (branch "if x_10 false"
                      (builtin "One Step Simplification" (formula "18"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "notLeft" (formula "1"))
                     (rule "elim_double_block_2" (formula "18") (term "1"))
                     (rule "assignmentSubtractionInt" (formula "18") (term "1"))
                     (branch "Overflow check"
                         (builtin "One Step Simplification" (formula "18"))
                        (rule "closeTrue" (formula "18"))
                     )
                     (branch "Usage"
                         (builtin "One Step Simplification" (formula "18"))
                        (rule "translateJavaSubInt" (formula "18") (term "0,1,0"))
                        (rule "polySimp_elimSub" (formula "18") (term "0,1,0"))
                        (rule "blockEmpty" (formula "18") (term "1"))
                        (rule "assignmentSubtractionInt" (formula "18") (term "1"))
                        (branch "Overflow check"
                            (builtin "One Step Simplification" (formula "18"))
                           (rule "closeTrue" (formula "18"))
                        )
                        (branch "Usage"
                            (builtin "One Step Simplification" (formula "18"))
                           (rule "translateJavaSubInt" (formula "18") (term "0,1,0"))
                           (rule "polySimp_elimSub" (formula "18") (term "0,1,0"))
                           (rule "mul_literals" (formula "18") (term "1,0,1,0"))
                           (rule "polySimp_addComm0" (formula "18") (term "0,1,0"))
                           (rule "emptyStatement" (formula "18") (term "1"))
                           (rule "blockEmpty" (formula "18") (term "1"))
                           (rule "lsContinue" (formula "18") (term "1"))
                            (builtin "One Step Simplification" (formula "18"))
                           (rule "andRight" (formula "18"))
                           (branch "Case 1"
                              (rule "andRight" (formula "18"))
                              (branch "Case 1"
                                 (rule "andRight" (formula "18"))
                                 (branch "Case 1"
                                    (rule "andRight" (formula "18"))
                                    (branch
                                       (rule "andRight" (formula "18"))
                                       (branch
                                          (rule "andRight" (formula "18"))
                                          (branch
                                             (rule "polySimp_homoEq" (formula "7") (term "1"))
                                             (rule "polySimp_homoEq" (formula "8") (term "0"))
                                             (rule "polySimp_mulComm0" (formula "7") (term "1,0,1"))
                                             (rule "polySimp_mulComm0" (formula "8") (term "1,0,0"))
                                             (rule "polySimp_rightDist" (formula "7") (term "1,0,1"))
                                             (rule "polySimp_mulLiterals" (formula "7") (term "1,1,0,1"))
                                             (rule "polySimp_elimOne" (formula "7") (term "1,1,0,1"))
                                             (rule "polySimp_mulComm0" (formula "7") (term "0,1,0,1"))
                                             (rule "polySimp_rightDist" (formula "8") (term "1,0,0"))
                                             (rule "mul_literals" (formula "8") (term "0,1,0,0"))
                                             (rule "polySimp_addAssoc" (formula "7") (term "0,1"))
                                             (rule "polySimp_addAssoc" (formula "8") (term "0,0"))
                                             (rule "polySimp_addComm0" (formula "8") (term "0,0,0"))
                                             (rule "inEqSimp_leqRight" (formula "18"))
                                             (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0"))
                                             (rule "polySimp_elimOne" (formula "1") (term "1,1,0,0"))
                                             (rule "polySimp_mulComm0" (formula "1") (term "0,1,0,0"))
                                             (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                                             (rule "polySimp_addAssoc" (formula "1") (term "0"))
                                             (rule "polySimp_addComm1" (formula "1") (term "0,0"))
                                             (rule "polySimp_pullOutFactor3b" (formula "1") (term "0"))
                                             (rule "polySimp_addComm1" (formula "1") (term "0,0"))
                                             (rule "add_literals" (formula "1") (term "0,0,0"))
                                             (rule "inEqSimp_ltRight" (formula "17"))
                                             (rule "polySimp_mulComm0" (formula "1") (term "0,0"))
                                             (rule "inEqSimp_ltToLeq" (formula "9") (term "0"))
                                             (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,0"))
                                             (rule "inEqSimp_gtToGeq" (formula "3"))
                                             (rule "mul_literals" (formula "3") (term "1,0,0"))
                                             (rule "add_literals" (formula "3") (term "0,0"))
                                             (rule "inEqSimp_homoInEq0" (formula "4"))
                                             (rule "polySimp_mulComm0" (formula "4") (term "1,0"))
                                             (rule "polySimp_rightDist" (formula "4") (term "1,0"))
                                             (rule "mul_literals" (formula "4") (term "0,1,0"))
                                             (rule "polySimp_addAssoc" (formula "4") (term "0"))
                                             (rule "polySimp_addComm0" (formula "4") (term "0,0"))
                                             (rule "inEqSimp_homoInEq0" (formula "5"))
                                             (rule "polySimp_addComm1" (formula "5") (term "0"))
                                             (rule "polySimp_sepPosMonomial" (formula "9") (term "1"))
                                             (rule "polySimp_mulComm0" (formula "9") (term "1,1"))
                                             (rule "polySimp_rightDist" (formula "9") (term "1,1"))
                                             (rule "mul_literals" (formula "9") (term "0,1,1"))
                                             (rule "polySimp_mulLiterals" (formula "9") (term "1,1,1"))
                                             (rule "polySimp_elimOne" (formula "9") (term "1,1,1"))
                                             (rule "polySimp_sepNegMonomial" (formula "10") (term "0"))
                                             (rule "polySimp_mulLiterals" (formula "10") (term "0,0"))
                                             (rule "polySimp_elimOne" (formula "10") (term "0,0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                                             (rule "polySimp_mulComm0" (formula "2") (term "1"))
                                             (rule "polySimp_rightDist" (formula "2") (term "1"))
                                             (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
                                             (rule "mul_literals" (formula "2") (term "0,1"))
                                             (rule "polySimp_elimOne" (formula "2") (term "1,1"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                                             (rule "polySimp_mulLiterals" (formula "1") (term "1"))
                                             (rule "polySimp_elimOne" (formula "1") (term "1"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "0"))
                                             (rule "polySimp_mulComm0" (formula "9") (term "1,0"))
                                             (rule "polySimp_rightDist" (formula "9") (term "1,0"))
                                             (rule "mul_literals" (formula "9") (term "0,1,0"))
                                             (rule "polySimp_mulLiterals" (formula "9") (term "1,1,0"))
                                             (rule "polySimp_elimOne" (formula "9") (term "1,1,0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "3"))
                                             (rule "mul_literals" (formula "3") (term "1"))
                                             (rule "inEqSimp_sepNegMonomial1" (formula "4"))
                                             (rule "polySimp_mulLiterals" (formula "4") (term "0"))
                                             (rule "polySimp_elimOne" (formula "4") (term "0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "5"))
                                             (rule "polySimp_mulComm0" (formula "5") (term "1"))
                                             (rule "polySimp_rightDist" (formula "5") (term "1"))
                                             (rule "mul_literals" (formula "5") (term "0,1"))
                                             (rule "polySimp_mulLiterals" (formula "5") (term "1,1"))
                                             (rule "polySimp_elimOne" (formula "5") (term "1,1"))
                                             (rule "inEqSimp_exactShadow3" (formula "3") (ifseqformula "4"))
                                             (rule "mul_literals" (formula "3") (term "0,0"))
                                             (rule "polySimp_addAssoc" (formula "3") (term "0"))
                                             (rule "add_literals" (formula "3") (term "0,0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "3"))
                                             (rule "mul_literals" (formula "3") (term "1"))
                                             (rule "Class_invariant_axiom_for_de_wiesler_Tree" (formula "17"))
                                              (builtin "One Step Simplification" (formula "17"))
                                             (rule "translateJavaSubInt" (formula "17") (term "3,0,1"))
                                             (rule "andLeft" (formula "17"))
                                             (rule "andLeft" (formula "17"))
                                             (rule "andLeft" (formula "17"))
                                             (rule "andLeft" (formula "18"))
                                             (rule "andLeft" (formula "17"))
                                             (rule "andLeft" (formula "17"))
                                             (rule "andLeft" (formula "17"))
                                             (rule "andLeft" (formula "19"))
                                             (rule "notLeft" (formula "18"))
                                             (rule "notLeft" (formula "17"))
                                             (rule "polySimp_elimSub" (formula "23") (term "3,0"))
                                             (rule "mul_literals" (formula "23") (term "1,3,0"))
                                             (rule "polySimp_addComm0" (formula "23") (term "3,0"))
                                             (rule "inEqSimp_commuteLeq" (formula "22"))
                                             (rule "inEqSimp_commuteLeq" (formula "20"))
                                             (rule "inEqSimp_commuteLeq" (formula "21"))
                                             (rule "inEqSimp_commuteLeq" (formula "17"))
                                             (rule "applyEq" (formula "6") (term "0") (ifseqformula "19"))
                                             (rule "applyEq" (formula "11") (term "0,0") (ifseqformula "19"))
                                             (rule "applyEq" (formula "23") (term "1,3,0") (ifseqformula "19"))
                                             (rule "applyEq" (formula "20") (term "0") (ifseqformula "19"))
                                             (rule "applyEq" (formula "21") (term "1") (ifseqformula "19"))
                                             (rule "applyEq" (formula "22") (term "1") (ifseqformula "19"))
                                             (rule "inEqSimp_exactShadow3" (formula "8") (ifseqformula "18"))
                                             (rule "polySimp_mulComm0" (formula "8") (term "0,0"))
                                             (rule "polySimp_addComm0" (formula "8") (term "0"))
                                             (rule "inEqSimp_sepNegMonomial1" (formula "8"))
                                             (rule "polySimp_mulLiterals" (formula "8") (term "0"))
                                             (rule "polySimp_elimOne" (formula "8") (term "0"))
                                             (rule "Free_class_invariant_axiom_for_de_wiesler_Tree" (formula "25"))
                                             (rule "true_left" (formula "25"))
                                             (rule "commute_or" (formula "11"))
                                             (rule "Contract_axiom_for_isSortedSliceTransitive_in_Functions" (formula "24") (term "0"))
                                             (rule "replace_known_left" (formula "24") (term "1,0") (ifseqformula "14"))
                                              (builtin "One Step Simplification" (formula "24") (ifInst ""  (formula "27")) (ifInst ""  (formula "25")))
                                             (rule "Definition_axiom_for_isSortedSliceTransitive_in_de_wiesler_Functions" (formula "25") (term "0") (inst "i=i") (inst "j=j"))
                                              (builtin "One Step Simplification" (formula "25"))
                                             (rule "inEqSimp_ltToLeq" (formula "25") (term "1,0,0,1,0"))
                                             (rule "polySimp_rightDist" (formula "25") (term "1,0,0,1,0,0,1,0"))
                                             (rule "mul_literals" (formula "25") (term "0,1,0,0,1,0,0,1,0"))
                                             (rule "polySimp_addAssoc" (formula "25") (term "0,0,1,0,0,1,0"))
                                             (rule "add_literals" (formula "25") (term "0,0,0,1,0,0,1,0"))
                                             (rule "inEqSimp_ltToLeq" (formula "25") (term "1,0,0"))
                                             (rule "polySimp_rightDist" (formula "25") (term "1,0,0,1,0,0"))
                                             (rule "mul_literals" (formula "25") (term "0,1,0,0,1,0,0"))
                                             (rule "polySimp_addAssoc" (formula "25") (term "0,0,1,0,0"))
                                             (rule "add_literals" (formula "25") (term "0,0,0,1,0,0"))
                                             (rule "inEqSimp_commuteLeq" (formula "25") (term "1,0,1,0"))
                                             (rule "inEqSimp_commuteLeq" (formula "25") (term "0,0,0,1,0"))
                                             (rule "inEqSimp_commuteLeq" (formula "25") (term "0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "1,0,0,1,0"))
                                             (rule "polySimp_mulComm0" (formula "25") (term "1,1,0,0,1,0"))
                                             (rule "polySimp_rightDist" (formula "25") (term "1,1,0,0,1,0"))
                                             (rule "mul_literals" (formula "25") (term "0,1,1,0,0,1,0"))
                                             (rule "polySimp_mulLiterals" (formula "25") (term "1,1,1,0,0,1,0"))
                                             (rule "polySimp_elimOne" (formula "25") (term "1,1,1,0,0,1,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "1,0,0"))
                                             (rule "polySimp_mulComm0" (formula "25") (term "1,1,0,0"))
                                             (rule "polySimp_rightDist" (formula "25") (term "1,1,0,0"))
                                             (rule "mul_literals" (formula "25") (term "0,1,1,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "25") (term "1,1,1,0,0"))
                                             (rule "polySimp_elimOne" (formula "25") (term "1,1,1,0,0"))
                                             (rule "nnf_imp2or" (formula "25") (term "0"))
                                             (rule "nnf_notAnd" (formula "25") (term "0,0"))
                                             (rule "inEqSimp_notGeq" (formula "25") (term "0,0,0"))
                                             (rule "times_zero_1" (formula "25") (term "1,0,0,0,0,0"))
                                             (rule "add_zero_right" (formula "25") (term "0,0,0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "0,0,0"))
                                             (rule "mul_literals" (formula "25") (term "1,0,0,0"))
                                             (rule "inEqSimp_notLeq" (formula "25") (term "1,0,0"))
                                             (rule "polySimp_rightDist" (formula "25") (term "1,0,0,1,0,0"))
                                             (rule "mul_literals" (formula "25") (term "0,1,0,0,1,0,0"))
                                             (rule "polySimp_addAssoc" (formula "25") (term "0,0,1,0,0"))
                                             (rule "add_literals" (formula "25") (term "0,0,0,1,0,0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "25") (term "1,0,0"))
                                             (rule "polySimp_mulComm0" (formula "25") (term "1,1,0,0"))
                                             (rule "polySimp_rightDist" (formula "25") (term "1,1,0,0"))
                                             (rule "mul_literals" (formula "25") (term "0,1,1,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "25") (term "1,1,1,0,0"))
                                             (rule "polySimp_elimOne" (formula "25") (term "1,1,1,0,0"))
                                             (rule "nnf_imp2or" (formula "25") (term "0,1,0"))
                                             (rule "nnf_notAnd" (formula "25") (term "0,0,1,0"))
                                             (rule "inEqSimp_notGeq" (formula "25") (term "0,0,0,1,0"))
                                             (rule "polySimp_mulComm0" (formula "25") (term "1,0,0,0,0,0,1,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "0,0,0,1,0"))
                                             (rule "polySimp_mulComm0" (formula "25") (term "1,0,0,0,1,0"))
                                             (rule "polySimp_rightDist" (formula "25") (term "1,0,0,0,1,0"))
                                             (rule "mul_literals" (formula "25") (term "0,1,0,0,0,1,0"))
                                             (rule "polySimp_mulLiterals" (formula "25") (term "1,1,0,0,0,1,0"))
                                             (rule "polySimp_elimOne" (formula "25") (term "1,1,0,0,0,1,0"))
                                             (rule "inEqSimp_notLeq" (formula "25") (term "1,0,0,1,0"))
                                             (rule "polySimp_rightDist" (formula "25") (term "1,0,0,1,0,0,1,0"))
                                             (rule "mul_literals" (formula "25") (term "0,1,0,0,1,0,0,1,0"))
                                             (rule "polySimp_addAssoc" (formula "25") (term "0,0,1,0,0,1,0"))
                                             (rule "add_literals" (formula "25") (term "0,0,0,1,0,0,1,0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "25") (term "1,0,0,1,0"))
                                             (rule "polySimp_mulComm0" (formula "25") (term "1,1,0,0,1,0"))
                                             (rule "polySimp_rightDist" (formula "25") (term "1,1,0,0,1,0"))
                                             (rule "polySimp_mulLiterals" (formula "25") (term "1,1,1,0,0,1,0"))
                                             (rule "mul_literals" (formula "25") (term "0,1,1,0,0,1,0"))
                                             (rule "polySimp_elimOne" (formula "25") (term "1,1,1,0,0,1,0"))
                                             (rule "Contract_axiom_for_isSortedSlice_in_Functions" (formula "24") (term "0"))
                                             (rule "replace_known_left" (formula "24") (term "1,0") (ifseqformula "14"))
                                              (builtin "One Step Simplification" (formula "24") (ifInst ""  (formula "28")) (ifInst ""  (formula "25")))
                                             (rule "Definition_axiom_for_isSortedSlice_in_de_wiesler_Functions" (formula "25") (term "0") (inst "i=i"))
                                              (builtin "One Step Simplification" (formula "25"))
                                             (rule "translateJavaAddInt" (formula "25") (term "0,2,1,1,0"))
                                             (rule "translateJavaSubInt" (formula "25") (term "1,1,0,0"))
                                             (rule "polySimp_elimSub" (formula "25") (term "1,1,0,0"))
                                             (rule "mul_literals" (formula "25") (term "1,1,1,0,0"))
                                             (rule "polySimp_addComm0" (formula "25") (term "0,2,1,1,0"))
                                             (rule "polySimp_addComm1" (formula "25") (term "1,1,0,0"))
                                             (rule "add_literals" (formula "25") (term "0,1,1,0,0"))
                                             (rule "inEqSimp_ltToLeq" (formula "25") (term "1,0,0"))
                                             (rule "polySimp_rightDist" (formula "25") (term "1,0,0,1,0,0"))
                                             (rule "mul_literals" (formula "25") (term "0,1,0,0,1,0,0"))
                                             (rule "polySimp_addAssoc" (formula "25") (term "0,0,1,0,0"))
                                             (rule "add_literals" (formula "25") (term "0,0,0,1,0,0"))
                                             (rule "inEqSimp_commuteLeq" (formula "25") (term "0,0,0"))
                                             (rule "inEqSimp_commuteLeq" (formula "25") (term "1,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "1,0,0"))
                                             (rule "polySimp_mulComm0" (formula "25") (term "1,1,0,0"))
                                             (rule "polySimp_rightDist" (formula "25") (term "1,1,0,0"))
                                             (rule "mul_literals" (formula "25") (term "0,1,1,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "25") (term "1,1,1,0,0"))
                                             (rule "polySimp_elimOne" (formula "25") (term "1,1,1,0,0"))
                                             (rule "nnf_imp2or" (formula "25") (term "0"))
                                             (rule "nnf_notAnd" (formula "25") (term "0,0"))
                                             (rule "inEqSimp_notLeq" (formula "25") (term "1,0,0"))
                                             (rule "polySimp_rightDist" (formula "25") (term "1,0,0,1,0,0"))
                                             (rule "mul_literals" (formula "25") (term "0,1,0,0,1,0,0"))
                                             (rule "polySimp_addAssoc" (formula "25") (term "0,0,1,0,0"))
                                             (rule "add_literals" (formula "25") (term "0,0,0,1,0,0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "25") (term "1,0,0"))
                                             (rule "polySimp_mulComm0" (formula "25") (term "1,1,0,0"))
                                             (rule "polySimp_rightDist" (formula "25") (term "1,1,0,0"))
                                             (rule "mul_literals" (formula "25") (term "0,1,1,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "25") (term "1,1,1,0,0"))
                                             (rule "polySimp_elimOne" (formula "25") (term "1,1,1,0,0"))
                                             (rule "inEqSimp_notGeq" (formula "25") (term "0,0,0"))
                                             (rule "times_zero_1" (formula "25") (term "1,0,0,0,0,0"))
                                             (rule "add_zero_right" (formula "25") (term "0,0,0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "0,0,0"))
                                             (rule "mul_literals" (formula "25") (term "1,0,0,0"))
                                             (rule "Contract_axiom_for_isSortedSliceTransitive_in_Functions" (formula "24") (term "0"))
                                             (rule "replace_known_left" (formula "24") (term "0,1") (ifseqformula "25"))
                                              (builtin "One Step Simplification" (formula "24") (ifInst ""  (formula "29")) (ifInst ""  (formula "14")))
                                             (rule "Definition_axiom_for_isSortedSliceTransitive_in_de_wiesler_Functions" (formula "25") (term "0") (inst "i=i") (inst "j=j"))
                                              (builtin "One Step Simplification" (formula "25"))
                                             (rule "inEqSimp_ltToLeq" (formula "25") (term "1,0,0,1,0"))
                                             (rule "polySimp_rightDist" (formula "25") (term "1,0,0,1,0,0,1,0"))
                                             (rule "mul_literals" (formula "25") (term "0,1,0,0,1,0,0,1,0"))
                                             (rule "polySimp_addAssoc" (formula "25") (term "0,0,1,0,0,1,0"))
                                             (rule "add_literals" (formula "25") (term "0,0,0,1,0,0,1,0"))
                                             (rule "inEqSimp_ltToLeq" (formula "25") (term "1,0,0"))
                                             (rule "polySimp_rightDist" (formula "25") (term "1,0,0,1,0,0"))
                                             (rule "mul_literals" (formula "25") (term "0,1,0,0,1,0,0"))
                                             (rule "polySimp_addAssoc" (formula "25") (term "0,0,1,0,0"))
                                             (rule "add_literals" (formula "25") (term "0,0,0,1,0,0"))
                                             (rule "inEqSimp_commuteLeq" (formula "25") (term "0,0,0"))
                                             (rule "inEqSimp_commuteLeq" (formula "25") (term "0,0,0,1,0"))
                                             (rule "inEqSimp_commuteLeq" (formula "25") (term "1,0,1,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "1,0,0,1,0"))
                                             (rule "polySimp_mulComm0" (formula "25") (term "1,1,0,0,1,0"))
                                             (rule "polySimp_rightDist" (formula "25") (term "1,1,0,0,1,0"))
                                             (rule "polySimp_mulLiterals" (formula "25") (term "1,1,1,0,0,1,0"))
                                             (rule "mul_literals" (formula "25") (term "0,1,1,0,0,1,0"))
                                             (rule "polySimp_elimOne" (formula "25") (term "1,1,1,0,0,1,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "1,0,0"))
                                             (rule "polySimp_mulComm0" (formula "25") (term "1,1,0,0"))
                                             (rule "polySimp_rightDist" (formula "25") (term "1,1,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "25") (term "1,1,1,0,0"))
                                             (rule "mul_literals" (formula "25") (term "0,1,1,0,0"))
                                             (rule "polySimp_elimOne" (formula "25") (term "1,1,1,0,0"))
                                             (rule "nnf_imp2or" (formula "25") (term "0"))
                                             (rule "nnf_notAnd" (formula "25") (term "0,0"))
                                             (rule "inEqSimp_notLeq" (formula "25") (term "1,0,0"))
                                             (rule "polySimp_rightDist" (formula "25") (term "1,0,0,1,0,0"))
                                             (rule "mul_literals" (formula "25") (term "0,1,0,0,1,0,0"))
                                             (rule "polySimp_addAssoc" (formula "25") (term "0,0,1,0,0"))
                                             (rule "add_literals" (formula "25") (term "0,0,0,1,0,0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "25") (term "1,0,0"))
                                             (rule "polySimp_mulComm0" (formula "25") (term "1,1,0,0"))
                                             (rule "polySimp_rightDist" (formula "25") (term "1,1,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "25") (term "1,1,1,0,0"))
                                             (rule "mul_literals" (formula "25") (term "0,1,1,0,0"))
                                             (rule "polySimp_elimOne" (formula "25") (term "1,1,1,0,0"))
                                             (rule "inEqSimp_notGeq" (formula "25") (term "0,0,0"))
                                             (rule "times_zero_1" (formula "25") (term "1,0,0,0,0,0"))
                                             (rule "add_zero_right" (formula "25") (term "0,0,0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "0,0,0"))
                                             (rule "mul_literals" (formula "25") (term "1,0,0,0"))
                                             (rule "nnf_imp2or" (formula "25") (term "0,1,0"))
                                             (rule "nnf_notAnd" (formula "25") (term "0,0,1,0"))
                                             (rule "inEqSimp_notLeq" (formula "25") (term "1,0,0,1,0"))
                                             (rule "polySimp_rightDist" (formula "25") (term "1,0,0,1,0,0,1,0"))
                                             (rule "mul_literals" (formula "25") (term "0,1,0,0,1,0,0,1,0"))
                                             (rule "polySimp_addAssoc" (formula "25") (term "0,0,1,0,0,1,0"))
                                             (rule "add_literals" (formula "25") (term "0,0,0,1,0,0,1,0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "25") (term "1,0,0,1,0"))
                                             (rule "polySimp_mulComm0" (formula "25") (term "1,1,0,0,1,0"))
                                             (rule "polySimp_rightDist" (formula "25") (term "1,1,0,0,1,0"))
                                             (rule "polySimp_mulLiterals" (formula "25") (term "1,1,1,0,0,1,0"))
                                             (rule "mul_literals" (formula "25") (term "0,1,1,0,0,1,0"))
                                             (rule "polySimp_elimOne" (formula "25") (term "1,1,1,0,0,1,0"))
                                             (rule "inEqSimp_notGeq" (formula "25") (term "0,0,0,1,0"))
                                             (rule "polySimp_mulComm0" (formula "25") (term "1,0,0,0,0,0,1,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "0,0,0,1,0"))
                                             (rule "polySimp_mulComm0" (formula "25") (term "1,0,0,0,1,0"))
                                             (rule "polySimp_rightDist" (formula "25") (term "1,0,0,0,1,0"))
                                             (rule "mul_literals" (formula "25") (term "0,1,0,0,0,1,0"))
                                             (rule "polySimp_mulLiterals" (formula "25") (term "1,1,0,0,0,1,0"))
                                             (rule "polySimp_elimOne" (formula "25") (term "1,1,0,0,0,1,0"))
                                             (rule "Contract_axiom_for_isSortedSlice_in_Functions" (formula "24") (term "0"))
                                             (rule "replace_known_left" (formula "24") (term "0,1") (ifseqformula "25"))
                                              (builtin "One Step Simplification" (formula "24") (ifInst ""  (formula "29")) (ifInst ""  (formula "14")))
                                             (rule "Definition_axiom_for_isSortedSlice_in_de_wiesler_Functions" (formula "25") (term "0") (inst "i=i"))
                                              (builtin "One Step Simplification" (formula "25"))
                                             (rule "translateJavaAddInt" (formula "25") (term "0,2,1,1,0"))
                                             (rule "translateJavaSubInt" (formula "25") (term "1,1,0,0"))
                                             (rule "polySimp_elimSub" (formula "25") (term "1,1,0,0"))
                                             (rule "mul_literals" (formula "25") (term "1,1,1,0,0"))
                                             (rule "polySimp_addComm0" (formula "25") (term "0,2,1,1,0"))
                                             (rule "polySimp_addComm1" (formula "25") (term "1,1,0,0"))
                                             (rule "add_literals" (formula "25") (term "0,1,1,0,0"))
                                             (rule "inEqSimp_ltToLeq" (formula "25") (term "1,0,0"))
                                             (rule "polySimp_rightDist" (formula "25") (term "1,0,0,1,0,0"))
                                             (rule "mul_literals" (formula "25") (term "0,1,0,0,1,0,0"))
                                             (rule "polySimp_addAssoc" (formula "25") (term "0,0,1,0,0"))
                                             (rule "add_literals" (formula "25") (term "0,0,0,1,0,0"))
                                             (rule "inEqSimp_commuteLeq" (formula "25") (term "0,0,0"))
                                             (rule "inEqSimp_commuteLeq" (formula "25") (term "1,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "1,0,0"))
                                             (rule "polySimp_mulComm0" (formula "25") (term "1,1,0,0"))
                                             (rule "polySimp_rightDist" (formula "25") (term "1,1,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "25") (term "1,1,1,0,0"))
                                             (rule "mul_literals" (formula "25") (term "0,1,1,0,0"))
                                             (rule "polySimp_elimOne" (formula "25") (term "1,1,1,0,0"))
                                             (rule "nnf_imp2or" (formula "25") (term "0"))
                                             (rule "nnf_notAnd" (formula "25") (term "0,0"))
                                             (rule "inEqSimp_notGeq" (formula "25") (term "0,0,0"))
                                             (rule "times_zero_1" (formula "25") (term "1,0,0,0,0,0"))
                                             (rule "add_zero_right" (formula "25") (term "0,0,0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "0,0,0"))
                                             (rule "mul_literals" (formula "25") (term "1,0,0,0"))
                                             (rule "inEqSimp_notLeq" (formula "25") (term "1,0,0"))
                                             (rule "polySimp_rightDist" (formula "25") (term "1,0,0,1,0,0"))
                                             (rule "mul_literals" (formula "25") (term "0,1,0,0,1,0,0"))
                                             (rule "polySimp_addAssoc" (formula "25") (term "0,0,1,0,0"))
                                             (rule "add_literals" (formula "25") (term "0,0,0,1,0,0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "25") (term "1,0,0"))
                                             (rule "polySimp_mulComm0" (formula "25") (term "1,1,0,0"))
                                             (rule "polySimp_rightDist" (formula "25") (term "1,1,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "25") (term "1,1,1,0,0"))
                                             (rule "mul_literals" (formula "25") (term "0,1,1,0,0"))
                                             (rule "polySimp_elimOne" (formula "25") (term "1,1,1,0,0"))
                                             (rule "commute_or" (formula "26") (term "0,0,1,0"))
                                             (rule "Contract_axiom_for_isSortedSliceTransitive_in_Functions" (formula "24") (term "0"))
                                             (rule "replace_known_left" (formula "24") (term "0,1") (ifseqformula "25"))
                                              (builtin "One Step Simplification" (formula "24") (ifInst ""  (formula "29")) (ifInst ""  (formula "14")))
                                             (rule "Definition_axiom_for_isSortedSliceTransitive_in_de_wiesler_Functions" (formula "25") (term "0") (inst "i=i") (inst "j=j"))
                                              (builtin "One Step Simplification" (formula "25"))
                                             (rule "inEqSimp_ltToLeq" (formula "25") (term "1,0,0,1,0"))
                                             (rule "polySimp_rightDist" (formula "25") (term "1,0,0,1,0,0,1,0"))
                                             (rule "mul_literals" (formula "25") (term "0,1,0,0,1,0,0,1,0"))
                                             (rule "polySimp_addAssoc" (formula "25") (term "0,0,1,0,0,1,0"))
                                             (rule "add_literals" (formula "25") (term "0,0,0,1,0,0,1,0"))
                                             (rule "inEqSimp_ltToLeq" (formula "25") (term "1,0,0"))
                                             (rule "polySimp_rightDist" (formula "25") (term "1,0,0,1,0,0"))
                                             (rule "mul_literals" (formula "25") (term "0,1,0,0,1,0,0"))
                                             (rule "polySimp_addAssoc" (formula "25") (term "0,0,1,0,0"))
                                             (rule "add_literals" (formula "25") (term "0,0,0,1,0,0"))
                                             (rule "inEqSimp_commuteLeq" (formula "25") (term "1,0,1,0"))
                                             (rule "inEqSimp_commuteLeq" (formula "25") (term "0,0,0,1,0"))
                                             (rule "inEqSimp_commuteLeq" (formula "25") (term "0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "1,0,0,1,0"))
                                             (rule "polySimp_mulComm0" (formula "25") (term "1,1,0,0,1,0"))
                                             (rule "polySimp_rightDist" (formula "25") (term "1,1,0,0,1,0"))
                                             (rule "polySimp_mulLiterals" (formula "25") (term "1,1,1,0,0,1,0"))
                                             (rule "mul_literals" (formula "25") (term "0,1,1,0,0,1,0"))
                                             (rule "polySimp_elimOne" (formula "25") (term "1,1,1,0,0,1,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "1,0,0"))
                                             (rule "polySimp_mulComm0" (formula "25") (term "1,1,0,0"))
                                             (rule "polySimp_rightDist" (formula "25") (term "1,1,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "25") (term "1,1,1,0,0"))
                                             (rule "mul_literals" (formula "25") (term "0,1,1,0,0"))
                                             (rule "polySimp_elimOne" (formula "25") (term "1,1,1,0,0"))
                                             (rule "nnf_imp2or" (formula "25") (term "0"))
                                             (rule "nnf_notAnd" (formula "25") (term "0,0"))
                                             (rule "inEqSimp_notLeq" (formula "25") (term "1,0,0"))
                                             (rule "polySimp_rightDist" (formula "25") (term "1,0,0,1,0,0"))
                                             (rule "mul_literals" (formula "25") (term "0,1,0,0,1,0,0"))
                                             (rule "polySimp_addAssoc" (formula "25") (term "0,0,1,0,0"))
                                             (rule "add_literals" (formula "25") (term "0,0,0,1,0,0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "25") (term "1,0,0"))
                                             (rule "polySimp_mulComm0" (formula "25") (term "1,1,0,0"))
                                             (rule "polySimp_rightDist" (formula "25") (term "1,1,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "25") (term "1,1,1,0,0"))
                                             (rule "mul_literals" (formula "25") (term "0,1,1,0,0"))
                                             (rule "polySimp_elimOne" (formula "25") (term "1,1,1,0,0"))
                                             (rule "inEqSimp_notGeq" (formula "25") (term "0,0,0"))
                                             (rule "times_zero_1" (formula "25") (term "1,0,0,0,0,0"))
                                             (rule "add_zero_right" (formula "25") (term "0,0,0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "0,0,0"))
                                             (rule "mul_literals" (formula "25") (term "1,0,0,0"))
                                             (rule "nnf_imp2or" (formula "25") (term "0,1,0"))
                                             (rule "nnf_notAnd" (formula "25") (term "0,0,1,0"))
                                             (rule "inEqSimp_notGeq" (formula "25") (term "0,0,0,1,0"))
                                             (rule "polySimp_mulComm0" (formula "25") (term "1,0,0,0,0,0,1,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "0,0,0,1,0"))
                                             (rule "polySimp_mulComm0" (formula "25") (term "1,0,0,0,1,0"))
                                             (rule "polySimp_rightDist" (formula "25") (term "1,0,0,0,1,0"))
                                             (rule "polySimp_mulLiterals" (formula "25") (term "1,1,0,0,0,1,0"))
                                             (rule "mul_literals" (formula "25") (term "0,1,0,0,0,1,0"))
                                             (rule "polySimp_elimOne" (formula "25") (term "1,1,0,0,0,1,0"))
                                             (rule "inEqSimp_notLeq" (formula "25") (term "1,0,0,1,0"))
                                             (rule "polySimp_rightDist" (formula "25") (term "1,0,0,1,0,0,1,0"))
                                             (rule "mul_literals" (formula "25") (term "0,1,0,0,1,0,0,1,0"))
                                             (rule "polySimp_addAssoc" (formula "25") (term "0,0,1,0,0,1,0"))
                                             (rule "add_literals" (formula "25") (term "0,0,0,1,0,0,1,0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "25") (term "1,0,0,1,0"))
                                             (rule "polySimp_mulComm0" (formula "25") (term "1,1,0,0,1,0"))
                                             (rule "polySimp_rightDist" (formula "25") (term "1,1,0,0,1,0"))
                                             (rule "mul_literals" (formula "25") (term "0,1,1,0,0,1,0"))
                                             (rule "polySimp_mulLiterals" (formula "25") (term "1,1,1,0,0,1,0"))
                                             (rule "polySimp_elimOne" (formula "25") (term "1,1,1,0,0,1,0"))
                                             (rule "jdiv_axiom" (formula "2") (term "0,0"))
                                             (rule "eqSymm" (formula "2"))
                                             (rule "inEqSimp_subsumption1" (formula "2") (term "0,0") (ifseqformula "5"))
                                             (rule "leq_literals" (formula "2") (term "0,0,0"))
                                              (builtin "One Step Simplification" (formula "2"))
                                             (rule "eqSymm" (formula "2"))
                                             (rule "applyEqRigid" (formula "3") (term "0,0") (ifseqformula "2"))
                                             (rule "applyEqRigid" (formula "1") (term "0,1,0,2,0") (ifseqformula "2"))
                                             (rule "Definition_axiom_for_isSortedSlice_in_de_wiesler_Functions" (formula "25") (term "0") (inst "i=i"))
                                              (builtin "One Step Simplification" (formula "25"))
                                             (rule "translateJavaAddInt" (formula "25") (term "0,2,1,1,0"))
                                             (rule "translateJavaSubInt" (formula "25") (term "1,1,0,0"))
                                             (rule "polySimp_elimSub" (formula "25") (term "1,1,0,0"))
                                             (rule "mul_literals" (formula "25") (term "1,1,1,0,0"))
                                             (rule "polySimp_addComm0" (formula "25") (term "0,2,1,1,0"))
                                             (rule "polySimp_addComm1" (formula "25") (term "1,1,0,0"))
                                             (rule "add_literals" (formula "25") (term "0,1,1,0,0"))
                                             (rule "inEqSimp_ltToLeq" (formula "25") (term "1,0,0"))
                                             (rule "polySimp_rightDist" (formula "25") (term "1,0,0,1,0,0"))
                                             (rule "mul_literals" (formula "25") (term "0,1,0,0,1,0,0"))
                                             (rule "polySimp_addAssoc" (formula "25") (term "0,0,1,0,0"))
                                             (rule "add_literals" (formula "25") (term "0,0,0,1,0,0"))
                                             (rule "inEqSimp_commuteLeq" (formula "25") (term "0,0,0"))
                                             (rule "inEqSimp_commuteLeq" (formula "25") (term "1,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "1,0,0"))
                                             (rule "polySimp_mulComm0" (formula "25") (term "1,1,0,0"))
                                             (rule "polySimp_rightDist" (formula "25") (term "1,1,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "25") (term "1,1,1,0,0"))
                                             (rule "mul_literals" (formula "25") (term "0,1,1,0,0"))
                                             (rule "polySimp_elimOne" (formula "25") (term "1,1,1,0,0"))
                                             (rule "nnf_imp2or" (formula "25") (term "0"))
                                             (rule "nnf_notAnd" (formula "25") (term "0,0"))
                                             (rule "inEqSimp_notGeq" (formula "25") (term "0,0,0"))
                                             (rule "times_zero_1" (formula "25") (term "1,0,0,0,0,0"))
                                             (rule "add_zero_right" (formula "25") (term "0,0,0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "0,0,0"))
                                             (rule "mul_literals" (formula "25") (term "1,0,0,0"))
                                             (rule "inEqSimp_notLeq" (formula "25") (term "1,0,0"))
                                             (rule "polySimp_rightDist" (formula "25") (term "1,0,0,1,0,0"))
                                             (rule "mul_literals" (formula "25") (term "0,1,0,0,1,0,0"))
                                             (rule "polySimp_addAssoc" (formula "25") (term "0,0,1,0,0"))
                                             (rule "add_literals" (formula "25") (term "0,0,0,1,0,0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "25") (term "1,0,0"))
                                             (rule "polySimp_mulComm0" (formula "25") (term "1,1,0,0"))
                                             (rule "polySimp_rightDist" (formula "25") (term "1,1,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "25") (term "1,1,1,0,0"))
                                             (rule "mul_literals" (formula "25") (term "0,1,1,0,0"))
                                             (rule "polySimp_elimOne" (formula "25") (term "1,1,1,0,0"))
                                             (rule "cut_direct" (formula "13") (term "1"))
                                             (branch "CUT: self.sorted_splitters[b_0] >= value TRUE"
                                                 (builtin "One Step Simplification" (formula "14"))
                                                (rule "true_left" (formula "14"))
                                                (rule "arrayLengthIsAShort" (formula "24") (term "0"))
                                                 (builtin "One Step Simplification" (formula "24"))
                                                (rule "true_left" (formula "24"))
                                                (rule "arrayLengthNotNegative" (formula "24") (term "0"))
                                                (rule "arrayLengthNotNegative" (formula "23") (term "0"))
                                                (rule "arrayLengthIsAShort" (formula "24") (term "0"))
                                                 (builtin "One Step Simplification" (formula "24"))
                                                (rule "true_left" (formula "24"))
                                                (rule "cut_direct" (formula "12") (term "1"))
                                                (branch "CUT: self.sorted_splitters[b_0 + d_0 * -1] <= -1 + value TRUE"
                                                    (builtin "One Step Simplification" (formula "13"))
                                                   (rule "true_left" (formula "13"))
                                                   (rule "commute_or" (formula "27") (term "0,0,1,0"))
                                                   (rule "all_pull_out3" (formula "28") (term "0"))
                                                   (rule "shift_paren_or" (formula "28") (term "0,0"))
                                                   (rule "shift_paren_or" (formula "28") (term "0,0,0"))
                                                   (rule "div_axiom" (formula "2") (term "1") (inst "quotient=quotient_0"))
                                                   (rule "mul_literals" (formula "2") (term "1,1,1,1,1"))
                                                   (rule "qeq_literals" (formula "2") (term "0,1,1"))
                                                    (builtin "One Step Simplification" (formula "2"))
                                                   (rule "equal_literals" (formula "2") (term "0"))
                                                    (builtin "One Step Simplification" (formula "2"))
                                                   (rule "andLeft" (formula "2"))
                                                   (rule "andLeft" (formula "2"))
                                                   (rule "polySimp_addComm1" (formula "4") (term "1"))
                                                   (rule "add_literals" (formula "4") (term "0,1"))
                                                   (rule "inEqSimp_commuteLeq" (formula "3"))
                                                   (rule "inEqSimp_homoInEq1" (formula "4"))
                                                   (rule "polySimp_mulLiterals" (formula "4") (term "1,0"))
                                                   (rule "polySimp_addComm1" (formula "4") (term "0"))
                                                   (rule "applyEqRigid" (formula "6") (term "0,0") (ifseqformula "2"))
                                                   (rule "inEqSimp_homoInEq1" (formula "6"))
                                                   (rule "polySimp_mulLiterals" (formula "6") (term "1,0"))
                                                   (rule "polySimp_addComm1" (formula "6") (term "0"))
                                                   (rule "applyEq" (formula "1") (term "0,1,0,2,0") (ifseqformula "2"))
                                                   (rule "polySimp_addComm0" (formula "1") (term "0,2,0"))
                                                   (rule "applyEq" (formula "5") (term "1") (ifseqformula "2"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "4"))
                                                   (rule "polySimp_mulComm0" (formula "4") (term "1"))
                                                   (rule "polySimp_rightDist" (formula "4") (term "1"))
                                                   (rule "mul_literals" (formula "4") (term "0,1"))
                                                   (rule "polySimp_mulLiterals" (formula "4") (term "1,1"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "6"))
                                                   (rule "polySimp_mulComm0" (formula "6") (term "1"))
                                                   (rule "polySimp_rightDist" (formula "6") (term "1"))
                                                   (rule "polySimp_mulLiterals" (formula "6") (term "1,1"))
                                                   (rule "mul_literals" (formula "6") (term "0,1"))
                                                   (rule "inEqSimp_exactShadow3" (formula "8") (ifseqformula "4"))
                                                   (rule "mul_literals" (formula "8") (term "0,0"))
                                                   (rule "polySimp_addAssoc" (formula "8") (term "0"))
                                                   (rule "add_literals" (formula "8") (term "0,0"))
                                                   (rule "inEqSimp_sepPosMonomial1" (formula "8"))
                                                   (rule "mul_literals" (formula "8") (term "1"))
                                                   (rule "elimGcdGeq_antec" (formula "8") (inst "elimGcdRightDiv=Z(1(#))") (inst "elimGcdLeftDiv=quotient_0") (inst "elimGcd=Z(2(#))"))
                                                   (rule "polySimp_mulLiterals" (formula "8") (term "1,0,0,0,0,1,0"))
                                                   (rule "polySimp_mulLiterals" (formula "8") (term "1,0,1,0"))
                                                   (rule "leq_literals" (formula "8") (term "0,0"))
                                                    (builtin "One Step Simplification" (formula "8"))
                                                   (rule "mul_literals" (formula "8") (term "1,0,0,0,0,0"))
                                                   (rule "polySimp_addLiterals" (formula "8") (term "0,0,0,0"))
                                                   (rule "add_literals" (formula "8") (term "0,0,0,0"))
                                                   (rule "polySimp_pullOutFactor0b" (formula "8") (term "0,0"))
                                                   (rule "add_literals" (formula "8") (term "1,1,0,0"))
                                                   (rule "times_zero_1" (formula "8") (term "1,0,0"))
                                                   (rule "add_zero_right" (formula "8") (term "0,0"))
                                                   (rule "leq_literals" (formula "8") (term "0"))
                                                    (builtin "One Step Simplification" (formula "8"))
                                                   (rule "inEqSimp_exactShadow3" (formula "3") (ifseqformula "10"))
                                                   (rule "polySimp_mulAssoc" (formula "3") (term "0,0"))
                                                   (rule "polySimp_mulComm0" (formula "3") (term "0,0,0"))
                                                   (rule "polySimp_mulLiterals" (formula "3") (term "0,0"))
                                                   (rule "polySimp_addAssoc" (formula "3") (term "0"))
                                                   (rule "polySimp_addComm0" (formula "3") (term "0,0"))
                                                   (rule "inEqSimp_sepPosMonomial1" (formula "3"))
                                                   (rule "polySimp_mulComm0" (formula "3") (term "1"))
                                                   (rule "polySimp_rightDist" (formula "3") (term "1"))
                                                   (rule "mul_literals" (formula "3") (term "0,1"))
                                                   (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
                                                   (rule "inEqSimp_contradInEq0" (formula "3") (ifseqformula "7"))
                                                   (rule "andLeft" (formula "3"))
                                                   (rule "inEqSimp_homoInEq1" (formula "3"))
                                                   (rule "polySimp_mulComm0" (formula "3") (term "1,0"))
                                                   (rule "polySimp_rightDist" (formula "3") (term "1,0"))
                                                   (rule "polySimp_mulLiterals" (formula "3") (term "1,1,0"))
                                                   (rule "mul_literals" (formula "3") (term "0,1,0"))
                                                   (rule "polySimp_addAssoc" (formula "3") (term "0"))
                                                   (rule "polySimp_addComm1" (formula "3") (term "0,0"))
                                                   (rule "add_literals" (formula "3") (term "0,0,0"))
                                                   (rule "polySimp_pullOutFactor0b" (formula "3") (term "0"))
                                                   (rule "add_literals" (formula "3") (term "1,1,0"))
                                                   (rule "times_zero_1" (formula "3") (term "1,0"))
                                                   (rule "add_zero_right" (formula "3") (term "0"))
                                                   (rule "leq_literals" (formula "3"))
                                                   (rule "closeFalse" (formula "3"))
                                                )
                                                (branch "CUT: self.sorted_splitters[b_0 + d_0 * -1] <= -1 + value FALSE"
                                                    (builtin "One Step Simplification" (formula "12"))
                                                   (rule "inEqSimp_leqRight" (formula "30"))
                                                   (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                                                   (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                                                   (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                                                   (rule "add_literals" (formula "1") (term "0,0,0"))
                                                   (rule "add_zero_left" (formula "1") (term "0,0"))
                                                   (rule "applyEqRigid" (formula "7") (term "0") (ifseqformula "13"))
                                                   (rule "inEqSimp_homoInEq0" (formula "7"))
                                                   (rule "polySimp_pullOutFactor1" (formula "7") (term "0"))
                                                   (rule "add_literals" (formula "7") (term "1,0"))
                                                   (rule "times_zero_1" (formula "7") (term "0"))
                                                   (rule "qeq_literals" (formula "7"))
                                                   (rule "true_left" (formula "7"))
                                                   (rule "applyEq" (formula "2") (term "0,0,1,0,2,0") (ifseqformula "12"))
                                                   (rule "applyEq" (formula "6") (term "0") (ifseqformula "12"))
                                                   (rule "inEqSimp_homoInEq1" (formula "6"))
                                                   (rule "polySimp_mulComm0" (formula "6") (term "1,0"))
                                                   (rule "polySimp_rightDist" (formula "6") (term "1,0"))
                                                   (rule "mul_literals" (formula "6") (term "0,1,0"))
                                                   (rule "polySimp_addAssoc" (formula "6") (term "0"))
                                                   (rule "add_literals" (formula "6") (term "0,0"))
                                                   (rule "applyEq" (formula "4") (term "0,0,0") (ifseqformula "12"))
                                                   (rule "applyEq" (formula "3") (term "0,0") (ifseqformula "12"))
                                                   (rule "eqSymm" (formula "3"))
                                                   (rule "applyEq" (formula "1") (term "0,1,0,2,1,0") (ifseqformula "12"))
                                                   (rule "polySimp_mulComm0" (formula "1") (term "1,0,2,1,0"))
                                                   (rule "polySimp_rightDist" (formula "1") (term "1,0,2,1,0"))
                                                   (rule "mul_literals" (formula "1") (term "0,1,0,2,1,0"))
                                                   (rule "polySimp_addAssoc" (formula "1") (term "0,2,1,0"))
                                                   (rule "polySimp_addComm0" (formula "1") (term "0,0,2,1,0"))
                                                   (rule "polySimp_pullOutFactor1b" (formula "1") (term "0,2,1,0"))
                                                   (rule "add_literals" (formula "1") (term "1,1,0,2,1,0"))
                                                   (rule "times_zero_1" (formula "1") (term "1,0,2,1,0"))
                                                   (rule "add_zero_right" (formula "1") (term "0,2,1,0"))
                                                   (rule "applyEq" (formula "11") (term "1") (ifseqformula "12"))
                                                   (rule "applyEqRigid" (formula "3") (term "0,0") (ifseqformula "12"))
                                                   (rule "eqSymm" (formula "3"))
                                                   (rule "inEqSimp_sepNegMonomial0" (formula "6"))
                                                   (rule "polySimp_mulLiterals" (formula "6") (term "0"))
                                                   (rule "polySimp_elimOne" (formula "6") (term "0"))
                                                   (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                                                   (rule "polySimp_mulLiterals" (formula "1") (term "1"))
                                                   (rule "polySimp_elimOne" (formula "1") (term "1"))
                                                   (rule "commute_or" (formula "26") (term "0,0,1,0"))
                                                   (rule "all_pull_out3" (formula "27") (term "0"))
                                                   (rule "shift_paren_or" (formula "27") (term "0,0"))
                                                   (rule "shift_paren_or" (formula "27") (term "0,0,0"))
                                                   (rule "div_axiom" (formula "2") (term "0,1,0,2,0") (inst "quotient=quotient_0"))
                                                   (rule "qeq_literals" (formula "2") (term "0,1,1"))
                                                    (builtin "One Step Simplification" (formula "2"))
                                                   (rule "mul_literals" (formula "2") (term "1,1,1,1"))
                                                   (rule "equal_literals" (formula "2") (term "0"))
                                                    (builtin "One Step Simplification" (formula "2"))
                                                   (rule "andLeft" (formula "2"))
                                                   (rule "andLeft" (formula "2"))
                                                   (rule "polySimp_addAssoc" (formula "4") (term "0,1"))
                                                   (rule "add_literals" (formula "4") (term "0,0,1"))
                                                   (rule "polySimp_addComm1" (formula "4") (term "1"))
                                                   (rule "add_literals" (formula "4") (term "0,1"))
                                                   (rule "add_zero_left" (formula "4") (term "1"))
                                                   (rule "inEqSimp_commuteGeq" (formula "4"))
                                                   (rule "inEqSimp_homoInEq0" (formula "3"))
                                                   (rule "polySimp_mulLiterals" (formula "3") (term "1,0"))
                                                   (rule "polySimp_addComm1" (formula "3") (term "0"))
                                                   (rule "applyEqRigid" (formula "7") (term "0,0") (ifseqformula "2"))
                                                   (rule "inEqSimp_homoInEq1" (formula "7"))
                                                   (rule "polySimp_mulLiterals" (formula "7") (term "1,0"))
                                                   (rule "polySimp_addComm1" (formula "7") (term "0"))
                                                   (rule "applyEq" (formula "5") (term "0,1,0,2,0") (ifseqformula "2"))
                                                   (rule "polySimp_addComm0" (formula "5") (term "0,2,0"))
                                                   (rule "applyEqRigid" (formula "6") (term "1") (ifseqformula "2"))
                                                   (rule "inEqSimp_sepPosMonomial1" (formula "3"))
                                                   (rule "polySimp_mulComm0" (formula "3") (term "1"))
                                                   (rule "polySimp_rightDist" (formula "3") (term "1"))
                                                   (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
                                                   (rule "mul_literals" (formula "3") (term "0,1"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "7"))
                                                   (rule "polySimp_mulComm0" (formula "7") (term "1"))
                                                   (rule "polySimp_rightDist" (formula "7") (term "1"))
                                                   (rule "polySimp_mulLiterals" (formula "7") (term "1,1"))
                                                   (rule "mul_literals" (formula "7") (term "0,1"))
                                                   (rule "inEqSimp_subsumption0" (formula "4") (ifseqformula "7"))
                                                   (rule "inEqSimp_homoInEq0" (formula "4") (term "0"))
                                                   (rule "polySimp_mulComm0" (formula "4") (term "1,0,0"))
                                                   (rule "polySimp_rightDist" (formula "4") (term "1,0,0"))
                                                   (rule "mul_literals" (formula "4") (term "0,1,0,0"))
                                                   (rule "polySimp_mulLiterals" (formula "4") (term "1,1,0,0"))
                                                   (rule "polySimp_addAssoc" (formula "4") (term "0,0"))
                                                   (rule "polySimp_addComm0" (formula "4") (term "0,0,0"))
                                                   (rule "polySimp_pullOutFactor0b" (formula "4") (term "0,0"))
                                                   (rule "add_literals" (formula "4") (term "1,1,0,0"))
                                                   (rule "times_zero_1" (formula "4") (term "1,0,0"))
                                                   (rule "add_zero_right" (formula "4") (term "0,0"))
                                                   (rule "qeq_literals" (formula "4") (term "0"))
                                                    (builtin "One Step Simplification" (formula "4"))
                                                   (rule "true_left" (formula "4"))
                                                   (rule "inEqSimp_contradInEq1" (formula "6") (ifseqformula "3"))
                                                   (rule "andLeft" (formula "6"))
                                                   (rule "inEqSimp_homoInEq1" (formula "6"))
                                                   (rule "polySimp_mulComm0" (formula "6") (term "1,0"))
                                                   (rule "polySimp_rightDist" (formula "6") (term "1,0"))
                                                   (rule "polySimp_mulLiterals" (formula "6") (term "1,1,0"))
                                                   (rule "mul_literals" (formula "6") (term "0,1,0"))
                                                   (rule "polySimp_addAssoc" (formula "6") (term "0"))
                                                   (rule "polySimp_addComm1" (formula "6") (term "0,0"))
                                                   (rule "add_literals" (formula "6") (term "0,0,0"))
                                                   (rule "polySimp_pullOutFactor0b" (formula "6") (term "0"))
                                                   (rule "add_literals" (formula "6") (term "1,1,0"))
                                                   (rule "times_zero_1" (formula "6") (term "1,0"))
                                                   (rule "add_zero_right" (formula "6") (term "0"))
                                                   (rule "leq_literals" (formula "6"))
                                                   (rule "closeFalse" (formula "6"))
                                                )
                                             )
                                             (branch "CUT: self.sorted_splitters[b_0] >= value FALSE"
                                                 (builtin "One Step Simplification" (formula "13"))
                                                (rule "inEqSimp_geqRight" (formula "28"))
                                                (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                                (rule "applyEq" (formula "27") (term "1,1,1,0,0") (ifseqformula "14"))
                                                (rule "polySimp_addAssoc" (formula "27") (term "1,1,0,0"))
                                                (rule "add_literals" (formula "27") (term "0,1,1,0,0"))
                                                (rule "applyEq" (formula "24") (term "1") (ifseqformula "14"))
                                                (rule "applyEq" (formula "23") (term "0") (ifseqformula "14"))
                                                (rule "inEqSimp_homoInEq1" (formula "23"))
                                                (rule "polySimp_mulComm0" (formula "23") (term "1,0"))
                                                (rule "polySimp_rightDist" (formula "23") (term "1,0"))
                                                (rule "mul_literals" (formula "23") (term "0,1,0"))
                                                (rule "polySimp_addAssoc" (formula "23") (term "0"))
                                                (rule "add_literals" (formula "23") (term "0,0"))
                                                (rule "applyEq" (formula "28") (term "1,1,1,0,0") (ifseqformula "14"))
                                                (rule "polySimp_addAssoc" (formula "28") (term "1,1,0,0"))
                                                (rule "add_literals" (formula "28") (term "0,1,1,0,0"))
                                                (rule "add_zero_left" (formula "28") (term "1,1,0,0"))
                                                (rule "applyEq" (formula "8") (term "0") (ifseqformula "14"))
                                                (rule "inEqSimp_homoInEq1" (formula "8"))
                                                (rule "polySimp_pullOutFactor1" (formula "8") (term "0"))
                                                (rule "add_literals" (formula "8") (term "1,0"))
                                                (rule "times_zero_1" (formula "8") (term "0"))
                                                (rule "leq_literals" (formula "8"))
                                                (rule "true_left" (formula "8"))
                                                (rule "applyEq" (formula "27") (term "1,1,0,0,0,1,0") (ifseqformula "13"))
                                                (rule "polySimp_addAssoc" (formula "27") (term "1,0,0,0,1,0"))
                                                (rule "add_literals" (formula "27") (term "0,1,0,0,0,1,0"))
                                                (rule "add_zero_left" (formula "27") (term "1,0,0,0,1,0"))
                                                (rule "applyEq" (formula "25") (term "1,1,1,0,0") (ifseqformula "13"))
                                                (rule "polySimp_addAssoc" (formula "25") (term "1,1,0,0"))
                                                (rule "add_literals" (formula "25") (term "0,1,1,0,0"))
                                                (rule "add_zero_left" (formula "25") (term "1,1,0,0"))
                                                (rule "applyEq" (formula "25") (term "1,1,1,0,0,1,0") (ifseqformula "13"))
                                                (rule "polySimp_addAssoc" (formula "25") (term "1,1,0,0,1,0"))
                                                (rule "add_literals" (formula "25") (term "0,1,1,0,0,1,0"))
                                                (rule "add_zero_left" (formula "25") (term "1,1,0,0,1,0"))
                                                (rule "applyEq" (formula "24") (term "1") (ifseqformula "13"))
                                                (rule "applyEq" (formula "21") (term "1") (ifseqformula "13"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                                (rule "polySimp_mulComm0" (formula "1") (term "1"))
                                                (rule "polySimp_rightDist" (formula "1") (term "1"))
                                                (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                                                (rule "mul_literals" (formula "1") (term "0,1"))
                                                (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                                                (rule "inEqSimp_sepNegMonomial0" (formula "22"))
                                                (rule "polySimp_mulLiterals" (formula "22") (term "0"))
                                                (rule "polySimp_elimOne" (formula "22") (term "0"))
                                                (rule "arrayLengthNotNegative" (formula "23") (term "0"))
                                                (rule "arrayLengthIsAShort" (formula "24") (term "0"))
                                                 (builtin "One Step Simplification" (formula "24"))
                                                (rule "true_left" (formula "24"))
                                                (rule "arrayLengthIsAShort" (formula "22") (term "0"))
                                                 (builtin "One Step Simplification" (formula "22"))
                                                (rule "true_left" (formula "22"))
                                                (rule "arrayLengthNotNegative" (formula "22") (term "0"))
                                                (rule "cut_direct" (formula "12") (term "1"))
                                                (branch "CUT: self.sorted_splitters[b_0 + d_0 * -1] <= -1 + value TRUE"
                                                    (builtin "One Step Simplification" (formula "13"))
                                                   (rule "true_left" (formula "13"))
                                                   (rule "commute_or" (formula "26") (term "0,0,1,0"))
                                                   (rule "div_axiom" (formula "3") (term "1") (inst "quotient=quotient_0"))
                                                   (rule "mul_literals" (formula "3") (term "1,1,1,1,1"))
                                                   (rule "qeq_literals" (formula "3") (term "0,1,1"))
                                                    (builtin "One Step Simplification" (formula "3"))
                                                   (rule "equal_literals" (formula "3") (term "0"))
                                                    (builtin "One Step Simplification" (formula "3"))
                                                   (rule "andLeft" (formula "3"))
                                                   (rule "andLeft" (formula "3"))
                                                   (rule "polySimp_addComm1" (formula "5") (term "1"))
                                                   (rule "add_literals" (formula "5") (term "0,1"))
                                                   (rule "inEqSimp_commuteLeq" (formula "4"))
                                                   (rule "inEqSimp_homoInEq1" (formula "5"))
                                                   (rule "polySimp_mulLiterals" (formula "5") (term "1,0"))
                                                   (rule "polySimp_addComm1" (formula "5") (term "0"))
                                                   (rule "applyEqRigid" (formula "2") (term "0,1,0,2,0") (ifseqformula "3"))
                                                   (rule "polySimp_addComm0" (formula "2") (term "0,2,0"))
                                                   (rule "applyEqRigid" (formula "7") (term "0,0") (ifseqformula "3"))
                                                   (rule "inEqSimp_homoInEq1" (formula "7"))
                                                   (rule "polySimp_mulLiterals" (formula "7") (term "1,0"))
                                                   (rule "polySimp_addComm1" (formula "7") (term "0"))
                                                   (rule "applyEq" (formula "6") (term "1") (ifseqformula "3"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "5"))
                                                   (rule "polySimp_mulComm0" (formula "5") (term "1"))
                                                   (rule "polySimp_rightDist" (formula "5") (term "1"))
                                                   (rule "polySimp_mulLiterals" (formula "5") (term "1,1"))
                                                   (rule "mul_literals" (formula "5") (term "0,1"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "7"))
                                                   (rule "polySimp_mulComm0" (formula "7") (term "1"))
                                                   (rule "polySimp_rightDist" (formula "7") (term "1"))
                                                   (rule "polySimp_mulLiterals" (formula "7") (term "1,1"))
                                                   (rule "mul_literals" (formula "7") (term "0,1"))
                                                   (rule "inEqSimp_exactShadow3" (formula "4") (ifseqformula "10"))
                                                   (rule "polySimp_mulAssoc" (formula "4") (term "0,0"))
                                                   (rule "polySimp_mulComm0" (formula "4") (term "0,0,0"))
                                                   (rule "polySimp_mulLiterals" (formula "4") (term "0,0"))
                                                   (rule "polySimp_addAssoc" (formula "4") (term "0"))
                                                   (rule "polySimp_addComm0" (formula "4") (term "0,0"))
                                                   (rule "inEqSimp_sepPosMonomial1" (formula "4"))
                                                   (rule "polySimp_mulComm0" (formula "4") (term "1"))
                                                   (rule "polySimp_rightDist" (formula "4") (term "1"))
                                                   (rule "mul_literals" (formula "4") (term "0,1"))
                                                   (rule "polySimp_mulLiterals" (formula "4") (term "1,1"))
                                                   (rule "inEqSimp_contradInEq0" (formula "4") (ifseqformula "8"))
                                                   (rule "andLeft" (formula "4"))
                                                   (rule "inEqSimp_homoInEq1" (formula "4"))
                                                   (rule "polySimp_mulComm0" (formula "4") (term "1,0"))
                                                   (rule "polySimp_rightDist" (formula "4") (term "1,0"))
                                                   (rule "polySimp_mulLiterals" (formula "4") (term "1,1,0"))
                                                   (rule "mul_literals" (formula "4") (term "0,1,0"))
                                                   (rule "polySimp_addAssoc" (formula "4") (term "0"))
                                                   (rule "polySimp_addComm1" (formula "4") (term "0,0"))
                                                   (rule "add_literals" (formula "4") (term "0,0,0"))
                                                   (rule "polySimp_pullOutFactor0b" (formula "4") (term "0"))
                                                   (rule "add_literals" (formula "4") (term "1,1,0"))
                                                   (rule "times_zero_1" (formula "4") (term "1,0"))
                                                   (rule "add_zero_right" (formula "4") (term "0"))
                                                   (rule "leq_literals" (formula "4"))
                                                   (rule "closeFalse" (formula "4"))
                                                )
                                                (branch "CUT: self.sorted_splitters[b_0 + d_0 * -1] <= -1 + value FALSE"
                                                    (builtin "One Step Simplification" (formula "12"))
                                                   (rule "inEqSimp_leqRight" (formula "29"))
                                                   (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                                                   (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                                                   (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                                                   (rule "add_literals" (formula "1") (term "0,0,0"))
                                                   (rule "add_zero_left" (formula "1") (term "0,0"))
                                                   (rule "applyEqRigid" (formula "1") (term "0,1,0,2,1,0") (ifseqformula "13"))
                                                   (rule "polySimp_mulComm0" (formula "1") (term "1,0,2,1,0"))
                                                   (rule "polySimp_rightDist" (formula "1") (term "1,0,2,1,0"))
                                                   (rule "mul_literals" (formula "1") (term "0,1,0,2,1,0"))
                                                   (rule "polySimp_addAssoc" (formula "1") (term "0,2,1,0"))
                                                   (rule "polySimp_addComm0" (formula "1") (term "0,0,2,1,0"))
                                                   (rule "polySimp_pullOutFactor1b" (formula "1") (term "0,2,1,0"))
                                                   (rule "add_literals" (formula "1") (term "1,1,0,2,1,0"))
                                                   (rule "times_zero_1" (formula "1") (term "1,0,2,1,0"))
                                                   (rule "add_zero_right" (formula "1") (term "0,2,1,0"))
                                                   (rule "applyEq" (formula "8") (term "0") (ifseqformula "13"))
                                                   (rule "inEqSimp_homoInEq0" (formula "8"))
                                                   (rule "polySimp_pullOutFactor1" (formula "8") (term "0"))
                                                   (rule "add_literals" (formula "8") (term "1,0"))
                                                   (rule "times_zero_1" (formula "8") (term "0"))
                                                   (rule "qeq_literals" (formula "8"))
                                                   (rule "true_left" (formula "8"))
                                                   (rule "applyEqRigid" (formula "7") (term "0") (ifseqformula "12"))
                                                   (rule "inEqSimp_homoInEq1" (formula "7"))
                                                   (rule "polySimp_mulComm0" (formula "7") (term "1,0"))
                                                   (rule "polySimp_rightDist" (formula "7") (term "1,0"))
                                                   (rule "mul_literals" (formula "7") (term "0,1,0"))
                                                   (rule "polySimp_addAssoc" (formula "7") (term "0"))
                                                   (rule "add_literals" (formula "7") (term "0,0"))
                                                   (rule "applyEq" (formula "5") (term "0,0,0") (ifseqformula "12"))
                                                   (rule "applyEq" (formula "4") (term "0,0") (ifseqformula "12"))
                                                   (rule "eqSymm" (formula "4"))
                                                   (rule "applyEqRigid" (formula "3") (term "0,0,1,0,2,0") (ifseqformula "12"))
                                                   (rule "applyEq" (formula "11") (term "1") (ifseqformula "12"))
                                                   (rule "applyEq" (formula "4") (term "0,0") (ifseqformula "12"))
                                                   (rule "eqSymm" (formula "4"))
                                                   (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                                                   (rule "polySimp_mulLiterals" (formula "1") (term "1"))
                                                   (rule "polySimp_elimOne" (formula "1") (term "1"))
                                                   (rule "inEqSimp_sepNegMonomial0" (formula "7"))
                                                   (rule "polySimp_mulLiterals" (formula "7") (term "0"))
                                                   (rule "polySimp_elimOne" (formula "7") (term "0"))
                                                   (rule "commute_or" (formula "25") (term "0,0,1,0"))
                                                   (rule "all_pull_out3" (formula "26") (term "0"))
                                                   (rule "shift_paren_or" (formula "26") (term "0,0"))
                                                   (rule "shift_paren_or" (formula "26") (term "0,0,0"))
                                                   (rule "div_axiom" (formula "5") (term "0,0") (inst "quotient=quotient_0"))
                                                   (rule "mul_literals" (formula "5") (term "1,1,1,1,1"))
                                                   (rule "qeq_literals" (formula "5") (term "0,1,1"))
                                                    (builtin "One Step Simplification" (formula "5"))
                                                   (rule "equal_literals" (formula "5") (term "0"))
                                                    (builtin "One Step Simplification" (formula "5"))
                                                   (rule "andLeft" (formula "5"))
                                                   (rule "andLeft" (formula "5"))
                                                   (rule "polySimp_addAssoc" (formula "7") (term "0,1"))
                                                   (rule "add_literals" (formula "7") (term "0,0,1"))
                                                   (rule "polySimp_addComm1" (formula "7") (term "1"))
                                                   (rule "add_literals" (formula "7") (term "0,1"))
                                                   (rule "add_zero_left" (formula "7") (term "1"))
                                                   (rule "inEqSimp_commuteGeq" (formula "7"))
                                                   (rule "inEqSimp_homoInEq0" (formula "6"))
                                                   (rule "polySimp_mulLiterals" (formula "6") (term "1,0"))
                                                   (rule "polySimp_addComm1" (formula "6") (term "0"))
                                                   (rule "applyEqRigid" (formula "3") (term "0,1,0,2,0") (ifseqformula "5"))
                                                   (rule "polySimp_addComm0" (formula "3") (term "0,2,0"))
                                                   (rule "applyEqRigid" (formula "8") (term "0,0") (ifseqformula "5"))
                                                   (rule "inEqSimp_homoInEq1" (formula "8"))
                                                   (rule "polySimp_mulLiterals" (formula "8") (term "1,0"))
                                                   (rule "polySimp_addComm1" (formula "8") (term "0"))
                                                   (rule "applyEqRigid" (formula "4") (term "1") (ifseqformula "5"))
                                                   (rule "inEqSimp_sepPosMonomial1" (formula "6"))
                                                   (rule "polySimp_mulComm0" (formula "6") (term "1"))
                                                   (rule "polySimp_rightDist" (formula "6") (term "1"))
                                                   (rule "polySimp_mulLiterals" (formula "6") (term "1,1"))
                                                   (rule "mul_literals" (formula "6") (term "0,1"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "8"))
                                                   (rule "polySimp_mulComm0" (formula "8") (term "1"))
                                                   (rule "polySimp_rightDist" (formula "8") (term "1"))
                                                   (rule "polySimp_mulLiterals" (formula "8") (term "1,1"))
                                                   (rule "mul_literals" (formula "8") (term "0,1"))
                                                   (rule "inEqSimp_subsumption0" (formula "7") (ifseqformula "8"))
                                                   (rule "inEqSimp_homoInEq0" (formula "7") (term "0"))
                                                   (rule "polySimp_mulComm0" (formula "7") (term "1,0,0"))
                                                   (rule "polySimp_rightDist" (formula "7") (term "1,0,0"))
                                                   (rule "polySimp_mulLiterals" (formula "7") (term "1,1,0,0"))
                                                   (rule "mul_literals" (formula "7") (term "0,1,0,0"))
                                                   (rule "polySimp_addAssoc" (formula "7") (term "0,0"))
                                                   (rule "polySimp_addComm0" (formula "7") (term "0,0,0"))
                                                   (rule "polySimp_pullOutFactor0b" (formula "7") (term "0,0"))
                                                   (rule "add_literals" (formula "7") (term "1,1,0,0"))
                                                   (rule "times_zero_1" (formula "7") (term "1,0,0"))
                                                   (rule "add_zero_right" (formula "7") (term "0,0"))
                                                   (rule "qeq_literals" (formula "7") (term "0"))
                                                    (builtin "One Step Simplification" (formula "7"))
                                                   (rule "true_left" (formula "7"))
                                                   (rule "inEqSimp_contradInEq0" (formula "6") (ifseqformula "7"))
                                                   (rule "andLeft" (formula "6"))
                                                   (rule "inEqSimp_homoInEq1" (formula "6"))
                                                   (rule "polySimp_mulComm0" (formula "6") (term "1,0"))
                                                   (rule "polySimp_rightDist" (formula "6") (term "1,0"))
                                                   (rule "mul_literals" (formula "6") (term "0,1,0"))
                                                   (rule "polySimp_mulLiterals" (formula "6") (term "1,1,0"))
                                                   (rule "polySimp_addAssoc" (formula "6") (term "0"))
                                                   (rule "polySimp_addComm1" (formula "6") (term "0,0"))
                                                   (rule "add_literals" (formula "6") (term "0,0,0"))
                                                   (rule "polySimp_pullOutFactor0b" (formula "6") (term "0"))
                                                   (rule "add_literals" (formula "6") (term "1,1,0"))
                                                   (rule "times_zero_1" (formula "6") (term "1,0"))
                                                   (rule "add_zero_right" (formula "6") (term "0"))
                                                   (rule "leq_literals" (formula "6"))
                                                   (rule "closeFalse" (formula "6"))
                                                )
                                             )
                                          )
                                          (branch
                                             (rule "polySimp_homoEq" (formula "8") (term "0"))
                                             (rule "polySimp_homoEq" (formula "7") (term "1"))
                                             (rule "polySimp_mulComm0" (formula "8") (term "1,0,0"))
                                             (rule "polySimp_mulComm0" (formula "7") (term "1,0,1"))
                                             (rule "polySimp_rightDist" (formula "8") (term "1,0,0"))
                                             (rule "mul_literals" (formula "8") (term "0,1,0,0"))
                                             (rule "polySimp_rightDist" (formula "7") (term "1,0,1"))
                                             (rule "polySimp_mulLiterals" (formula "7") (term "1,1,0,1"))
                                             (rule "polySimp_elimOne" (formula "7") (term "1,1,0,1"))
                                             (rule "polySimp_mulComm0" (formula "7") (term "0,1,0,1"))
                                             (rule "polySimp_addAssoc" (formula "8") (term "0,0"))
                                             (rule "polySimp_addComm0" (formula "8") (term "0,0,0"))
                                             (rule "polySimp_addAssoc" (formula "7") (term "0,1"))
                                             (rule "inEqSimp_leqRight" (formula "18"))
                                             (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                                             (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                                             (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                                             (rule "add_literals" (formula "1") (term "0,0,0"))
                                             (rule "add_zero_left" (formula "1") (term "0,0"))
                                             (rule "polySimp_addComm0" (formula "1") (term "0"))
                                             (rule "inEqSimp_ltRight" (formula "17"))
                                             (rule "polySimp_mulComm0" (formula "1") (term "0,0"))
                                             (rule "inEqSimp_ltToLeq" (formula "9") (term "0"))
                                             (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,0"))
                                             (rule "inEqSimp_gtToGeq" (formula "3"))
                                             (rule "mul_literals" (formula "3") (term "1,0,0"))
                                             (rule "add_literals" (formula "3") (term "0,0"))
                                             (rule "inEqSimp_homoInEq0" (formula "4"))
                                             (rule "polySimp_mulComm0" (formula "4") (term "1,0"))
                                             (rule "polySimp_rightDist" (formula "4") (term "1,0"))
                                             (rule "mul_literals" (formula "4") (term "0,1,0"))
                                             (rule "polySimp_addAssoc" (formula "4") (term "0"))
                                             (rule "polySimp_addComm0" (formula "4") (term "0,0"))
                                             (rule "inEqSimp_homoInEq0" (formula "5"))
                                             (rule "polySimp_addComm1" (formula "5") (term "0"))
                                             (rule "polySimp_sepNegMonomial" (formula "10") (term "0"))
                                             (rule "polySimp_mulLiterals" (formula "10") (term "0,0"))
                                             (rule "polySimp_elimOne" (formula "10") (term "0,0"))
                                             (rule "polySimp_sepPosMonomial" (formula "9") (term "1"))
                                             (rule "polySimp_mulComm0" (formula "9") (term "1,1"))
                                             (rule "polySimp_rightDist" (formula "9") (term "1,1"))
                                             (rule "mul_literals" (formula "9") (term "0,1,1"))
                                             (rule "polySimp_mulLiterals" (formula "9") (term "1,1,1"))
                                             (rule "polySimp_elimOne" (formula "9") (term "1,1,1"))
                                             (rule "inEqSimp_sepNegMonomial1" (formula "2"))
                                             (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                                             (rule "polySimp_elimOne" (formula "2") (term "0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                                             (rule "polySimp_mulLiterals" (formula "1") (term "1"))
                                             (rule "polySimp_elimOne" (formula "1") (term "1"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "0"))
                                             (rule "polySimp_mulComm0" (formula "9") (term "1,0"))
                                             (rule "polySimp_rightDist" (formula "9") (term "1,0"))
                                             (rule "mul_literals" (formula "9") (term "0,1,0"))
                                             (rule "polySimp_mulLiterals" (formula "9") (term "1,1,0"))
                                             (rule "polySimp_elimOne" (formula "9") (term "1,1,0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "3"))
                                             (rule "mul_literals" (formula "3") (term "1"))
                                             (rule "inEqSimp_sepNegMonomial1" (formula "4"))
                                             (rule "polySimp_mulLiterals" (formula "4") (term "0"))
                                             (rule "polySimp_elimOne" (formula "4") (term "0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "5"))
                                             (rule "polySimp_mulComm0" (formula "5") (term "1"))
                                             (rule "polySimp_rightDist" (formula "5") (term "1"))
                                             (rule "mul_literals" (formula "5") (term "0,1"))
                                             (rule "polySimp_mulLiterals" (formula "5") (term "1,1"))
                                             (rule "polySimp_elimOne" (formula "5") (term "1,1"))
                                             (rule "inEqSimp_exactShadow3" (formula "3") (ifseqformula "4"))
                                             (rule "mul_literals" (formula "3") (term "0,0"))
                                             (rule "polySimp_addAssoc" (formula "3") (term "0"))
                                             (rule "add_literals" (formula "3") (term "0,0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "3"))
                                             (rule "mul_literals" (formula "3") (term "1"))
                                             (rule "inEqSimp_exactShadow3" (formula "6") (ifseqformula "2"))
                                             (rule "polySimp_rightDist" (formula "6") (term "0,0"))
                                             (rule "mul_literals" (formula "6") (term "0,0,0"))
                                             (rule "polySimp_addAssoc" (formula "6") (term "0"))
                                             (rule "polySimp_pullOutFactor2b" (formula "6") (term "0,0"))
                                             (rule "add_literals" (formula "6") (term "1,1,0,0"))
                                             (rule "times_zero_1" (formula "6") (term "1,0,0"))
                                             (rule "add_zero_right" (formula "6") (term "0,0"))
                                             (rule "inEqSimp_sepNegMonomial1" (formula "6"))
                                             (rule "polySimp_mulLiterals" (formula "6") (term "0"))
                                             (rule "polySimp_elimOne" (formula "6") (term "0"))
                                             (rule "Class_invariant_axiom_for_de_wiesler_Tree" (formula "18"))
                                              (builtin "One Step Simplification" (formula "18"))
                                             (rule "translateJavaSubInt" (formula "18") (term "3,0,1"))
                                             (rule "andLeft" (formula "18"))
                                             (rule "andLeft" (formula "18"))
                                             (rule "andLeft" (formula "18"))
                                             (rule "andLeft" (formula "19"))
                                             (rule "andLeft" (formula "18"))
                                             (rule "andLeft" (formula "18"))
                                             (rule "andLeft" (formula "18"))
                                             (rule "andLeft" (formula "20"))
                                             (rule "notLeft" (formula "19"))
                                             (rule "notLeft" (formula "18"))
                                             (rule "polySimp_elimSub" (formula "24") (term "3,0"))
                                             (rule "mul_literals" (formula "24") (term "1,3,0"))
                                             (rule "polySimp_addComm0" (formula "24") (term "3,0"))
                                             (rule "inEqSimp_commuteLeq" (formula "23"))
                                             (rule "inEqSimp_commuteLeq" (formula "21"))
                                             (rule "inEqSimp_commuteLeq" (formula "22"))
                                             (rule "inEqSimp_commuteLeq" (formula "18"))
                                             (rule "applyEq" (formula "7") (term "0") (ifseqformula "20"))
                                             (rule "applyEq" (formula "2") (term "0") (ifseqformula "20"))
                                             (rule "applyEq" (formula "24") (term "1,3,0") (ifseqformula "20"))
                                             (rule "applyEq" (formula "23") (term "1") (ifseqformula "20"))
                                             (rule "applyEq" (formula "21") (term "0") (ifseqformula "20"))
                                             (rule "applyEq" (formula "12") (term "0,0") (ifseqformula "20"))
                                             (rule "applyEq" (formula "22") (term "1") (ifseqformula "20"))
                                             (rule "inEqSimp_exactShadow3" (formula "7") (ifseqformula "2"))
                                             (rule "polySimp_rightDist" (formula "7") (term "0,0"))
                                             (rule "mul_literals" (formula "7") (term "0,0,0"))
                                             (rule "polySimp_addAssoc" (formula "7") (term "0"))
                                             (rule "polySimp_pullOutFactor2b" (formula "7") (term "0,0"))
                                             (rule "add_literals" (formula "7") (term "1,1,0,0"))
                                             (rule "times_zero_1" (formula "7") (term "1,0,0"))
                                             (rule "add_zero_right" (formula "7") (term "0,0"))
                                             (rule "inEqSimp_sepNegMonomial1" (formula "7"))
                                             (rule "polySimp_mulLiterals" (formula "7") (term "0"))
                                             (rule "polySimp_elimOne" (formula "7") (term "0"))
                                             (rule "inEqSimp_exactShadow3" (formula "9") (ifseqformula "19"))
                                             (rule "polySimp_mulComm0" (formula "9") (term "0,0"))
                                             (rule "polySimp_addComm0" (formula "9") (term "0"))
                                             (rule "inEqSimp_sepNegMonomial1" (formula "9"))
                                             (rule "polySimp_mulLiterals" (formula "9") (term "0"))
                                             (rule "polySimp_elimOne" (formula "9") (term "0"))
                                             (rule "inEqSimp_exactShadow3" (formula "22") (ifseqformula "2"))
                                             (rule "mul_literals" (formula "22") (term "0,0"))
                                             (rule "polySimp_addAssoc" (formula "22") (term "0"))
                                             (rule "inEqSimp_sepNegMonomial1" (formula "22"))
                                             (rule "polySimp_mulLiterals" (formula "22") (term "0"))
                                             (rule "polySimp_elimOne" (formula "22") (term "0"))
                                             (rule "Free_class_invariant_axiom_for_de_wiesler_Tree" (formula "27"))
                                             (rule "true_left" (formula "27"))
                                             (rule "commute_or" (formula "12"))
                                             (rule "Contract_axiom_for_isSortedSliceTransitive_in_Functions" (formula "26") (term "0"))
                                             (rule "replace_known_left" (formula "26") (term "1,0") (ifseqformula "15"))
                                              (builtin "One Step Simplification" (formula "26") (ifInst ""  (formula "29")) (ifInst ""  (formula "27")))
                                             (rule "Definition_axiom_for_isSortedSliceTransitive_in_de_wiesler_Functions" (formula "27") (term "0") (inst "i=i") (inst "j=j"))
                                              (builtin "One Step Simplification" (formula "27"))
                                             (rule "inEqSimp_ltToLeq" (formula "27") (term "1,0,0,1,0"))
                                             (rule "polySimp_rightDist" (formula "27") (term "1,0,0,1,0,0,1,0"))
                                             (rule "mul_literals" (formula "27") (term "0,1,0,0,1,0,0,1,0"))
                                             (rule "polySimp_addAssoc" (formula "27") (term "0,0,1,0,0,1,0"))
                                             (rule "add_literals" (formula "27") (term "0,0,0,1,0,0,1,0"))
                                             (rule "inEqSimp_ltToLeq" (formula "27") (term "1,0,0"))
                                             (rule "polySimp_rightDist" (formula "27") (term "1,0,0,1,0,0"))
                                             (rule "mul_literals" (formula "27") (term "0,1,0,0,1,0,0"))
                                             (rule "polySimp_addAssoc" (formula "27") (term "0,0,1,0,0"))
                                             (rule "add_literals" (formula "27") (term "0,0,0,1,0,0"))
                                             (rule "inEqSimp_commuteLeq" (formula "27") (term "0,0,0"))
                                             (rule "inEqSimp_commuteLeq" (formula "27") (term "0,0,0,1,0"))
                                             (rule "inEqSimp_commuteLeq" (formula "27") (term "1,0,1,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "27") (term "1,0,0,1,0"))
                                             (rule "polySimp_mulComm0" (formula "27") (term "1,1,0,0,1,0"))
                                             (rule "polySimp_rightDist" (formula "27") (term "1,1,0,0,1,0"))
                                             (rule "polySimp_mulLiterals" (formula "27") (term "1,1,1,0,0,1,0"))
                                             (rule "mul_literals" (formula "27") (term "0,1,1,0,0,1,0"))
                                             (rule "polySimp_elimOne" (formula "27") (term "1,1,1,0,0,1,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "27") (term "1,0,0"))
                                             (rule "polySimp_mulComm0" (formula "27") (term "1,1,0,0"))
                                             (rule "polySimp_rightDist" (formula "27") (term "1,1,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "27") (term "1,1,1,0,0"))
                                             (rule "mul_literals" (formula "27") (term "0,1,1,0,0"))
                                             (rule "polySimp_elimOne" (formula "27") (term "1,1,1,0,0"))
                                             (rule "nnf_imp2or" (formula "27") (term "0"))
                                             (rule "nnf_notAnd" (formula "27") (term "0,0"))
                                             (rule "inEqSimp_notLeq" (formula "27") (term "1,0,0"))
                                             (rule "polySimp_rightDist" (formula "27") (term "1,0,0,1,0,0"))
                                             (rule "mul_literals" (formula "27") (term "0,1,0,0,1,0,0"))
                                             (rule "polySimp_addAssoc" (formula "27") (term "0,0,1,0,0"))
                                             (rule "add_literals" (formula "27") (term "0,0,0,1,0,0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "27") (term "1,0,0"))
                                             (rule "polySimp_mulComm0" (formula "27") (term "1,1,0,0"))
                                             (rule "polySimp_rightDist" (formula "27") (term "1,1,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "27") (term "1,1,1,0,0"))
                                             (rule "mul_literals" (formula "27") (term "0,1,1,0,0"))
                                             (rule "polySimp_elimOne" (formula "27") (term "1,1,1,0,0"))
                                             (rule "inEqSimp_notGeq" (formula "27") (term "0,0,0"))
                                             (rule "times_zero_1" (formula "27") (term "1,0,0,0,0,0"))
                                             (rule "add_zero_right" (formula "27") (term "0,0,0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "27") (term "0,0,0"))
                                             (rule "mul_literals" (formula "27") (term "1,0,0,0"))
                                             (rule "nnf_imp2or" (formula "27") (term "0,1,0"))
                                             (rule "nnf_notAnd" (formula "27") (term "0,0,1,0"))
                                             (rule "inEqSimp_notLeq" (formula "27") (term "1,0,0,1,0"))
                                             (rule "polySimp_rightDist" (formula "27") (term "1,0,0,1,0,0,1,0"))
                                             (rule "mul_literals" (formula "27") (term "0,1,0,0,1,0,0,1,0"))
                                             (rule "polySimp_addAssoc" (formula "27") (term "0,0,1,0,0,1,0"))
                                             (rule "add_literals" (formula "27") (term "0,0,0,1,0,0,1,0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "27") (term "1,0,0,1,0"))
                                             (rule "polySimp_mulComm0" (formula "27") (term "1,1,0,0,1,0"))
                                             (rule "polySimp_rightDist" (formula "27") (term "1,1,0,0,1,0"))
                                             (rule "polySimp_mulLiterals" (formula "27") (term "1,1,1,0,0,1,0"))
                                             (rule "mul_literals" (formula "27") (term "0,1,1,0,0,1,0"))
                                             (rule "polySimp_elimOne" (formula "27") (term "1,1,1,0,0,1,0"))
                                             (rule "inEqSimp_notGeq" (formula "27") (term "0,0,0,1,0"))
                                             (rule "polySimp_mulComm0" (formula "27") (term "1,0,0,0,0,0,1,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "27") (term "0,0,0,1,0"))
                                             (rule "polySimp_mulComm0" (formula "27") (term "1,0,0,0,1,0"))
                                             (rule "polySimp_rightDist" (formula "27") (term "1,0,0,0,1,0"))
                                             (rule "mul_literals" (formula "27") (term "0,1,0,0,0,1,0"))
                                             (rule "polySimp_mulLiterals" (formula "27") (term "1,1,0,0,0,1,0"))
                                             (rule "polySimp_elimOne" (formula "27") (term "1,1,0,0,0,1,0"))
                                             (rule "Contract_axiom_for_isSortedSlice_in_Functions" (formula "26") (term "0"))
                                             (rule "replace_known_right" (formula "26") (term "0,0,0") (ifseqformula "30"))
                                              (builtin "One Step Simplification" (formula "26") (ifInst ""  (formula "15")) (ifInst ""  (formula "27")))
                                             (rule "Definition_axiom_for_isSortedSlice_in_de_wiesler_Functions" (formula "27") (term "0") (inst "i=i"))
                                              (builtin "One Step Simplification" (formula "27"))
                                             (rule "translateJavaAddInt" (formula "27") (term "0,2,1,1,0"))
                                             (rule "translateJavaSubInt" (formula "27") (term "1,1,0,0"))
                                             (rule "polySimp_elimSub" (formula "27") (term "1,1,0,0"))
                                             (rule "mul_literals" (formula "27") (term "1,1,1,0,0"))
                                             (rule "polySimp_addComm0" (formula "27") (term "0,2,1,1,0"))
                                             (rule "polySimp_addComm1" (formula "27") (term "1,1,0,0"))
                                             (rule "add_literals" (formula "27") (term "0,1,1,0,0"))
                                             (rule "inEqSimp_ltToLeq" (formula "27") (term "1,0,0"))
                                             (rule "polySimp_rightDist" (formula "27") (term "1,0,0,1,0,0"))
                                             (rule "mul_literals" (formula "27") (term "0,1,0,0,1,0,0"))
                                             (rule "polySimp_addAssoc" (formula "27") (term "0,0,1,0,0"))
                                             (rule "add_literals" (formula "27") (term "0,0,0,1,0,0"))
                                             (rule "inEqSimp_commuteLeq" (formula "27") (term "0,0,0"))
                                             (rule "inEqSimp_commuteLeq" (formula "27") (term "1,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "27") (term "1,0,0"))
                                             (rule "polySimp_mulComm0" (formula "27") (term "1,1,0,0"))
                                             (rule "polySimp_rightDist" (formula "27") (term "1,1,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "27") (term "1,1,1,0,0"))
                                             (rule "mul_literals" (formula "27") (term "0,1,1,0,0"))
                                             (rule "polySimp_elimOne" (formula "27") (term "1,1,1,0,0"))
                                             (rule "nnf_imp2or" (formula "27") (term "0"))
                                             (rule "nnf_notAnd" (formula "27") (term "0,0"))
                                             (rule "inEqSimp_notGeq" (formula "27") (term "0,0,0"))
                                             (rule "times_zero_1" (formula "27") (term "1,0,0,0,0,0"))
                                             (rule "add_zero_right" (formula "27") (term "0,0,0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "27") (term "0,0,0"))
                                             (rule "mul_literals" (formula "27") (term "1,0,0,0"))
                                             (rule "inEqSimp_notLeq" (formula "27") (term "1,0,0"))
                                             (rule "polySimp_rightDist" (formula "27") (term "1,0,0,1,0,0"))
                                             (rule "mul_literals" (formula "27") (term "0,1,0,0,1,0,0"))
                                             (rule "polySimp_addAssoc" (formula "27") (term "0,0,1,0,0"))
                                             (rule "add_literals" (formula "27") (term "0,0,0,1,0,0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "27") (term "1,0,0"))
                                             (rule "polySimp_mulComm0" (formula "27") (term "1,1,0,0"))
                                             (rule "polySimp_rightDist" (formula "27") (term "1,1,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "27") (term "1,1,1,0,0"))
                                             (rule "mul_literals" (formula "27") (term "0,1,1,0,0"))
                                             (rule "polySimp_elimOne" (formula "27") (term "1,1,1,0,0"))
                                             (rule "Definition_axiom_for_isSortedSliceTransitive_in_de_wiesler_Functions" (formula "26") (term "0") (inst "i=i") (inst "j=j"))
                                              (builtin "One Step Simplification" (formula "26"))
                                             (rule "inEqSimp_ltToLeq" (formula "26") (term "1,0,0,1,0"))
                                             (rule "polySimp_rightDist" (formula "26") (term "1,0,0,1,0,0,1,0"))
                                             (rule "mul_literals" (formula "26") (term "0,1,0,0,1,0,0,1,0"))
                                             (rule "polySimp_addAssoc" (formula "26") (term "0,0,1,0,0,1,0"))
                                             (rule "add_literals" (formula "26") (term "0,0,0,1,0,0,1,0"))
                                             (rule "inEqSimp_ltToLeq" (formula "26") (term "1,0,0"))
                                             (rule "polySimp_rightDist" (formula "26") (term "1,0,0,1,0,0"))
                                             (rule "mul_literals" (formula "26") (term "0,1,0,0,1,0,0"))
                                             (rule "polySimp_addAssoc" (formula "26") (term "0,0,1,0,0"))
                                             (rule "add_literals" (formula "26") (term "0,0,0,1,0,0"))
                                             (rule "inEqSimp_commuteLeq" (formula "26") (term "1,0,1,0"))
                                             (rule "inEqSimp_commuteLeq" (formula "26") (term "0,0,0"))
                                             (rule "inEqSimp_commuteLeq" (formula "26") (term "0,0,0,1,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "1,0,0,1,0"))
                                             (rule "polySimp_mulComm0" (formula "26") (term "1,1,0,0,1,0"))
                                             (rule "polySimp_rightDist" (formula "26") (term "1,1,0,0,1,0"))
                                             (rule "polySimp_mulLiterals" (formula "26") (term "1,1,1,0,0,1,0"))
                                             (rule "mul_literals" (formula "26") (term "0,1,1,0,0,1,0"))
                                             (rule "polySimp_elimOne" (formula "26") (term "1,1,1,0,0,1,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "1,0,0"))
                                             (rule "polySimp_mulComm0" (formula "26") (term "1,1,0,0"))
                                             (rule "polySimp_rightDist" (formula "26") (term "1,1,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "26") (term "1,1,1,0,0"))
                                             (rule "mul_literals" (formula "26") (term "0,1,1,0,0"))
                                             (rule "polySimp_elimOne" (formula "26") (term "1,1,1,0,0"))
                                             (rule "nnf_imp2or" (formula "26") (term "0"))
                                             (rule "nnf_notAnd" (formula "26") (term "0,0"))
                                             (rule "inEqSimp_notLeq" (formula "26") (term "1,0,0"))
                                             (rule "polySimp_rightDist" (formula "26") (term "1,0,0,1,0,0"))
                                             (rule "mul_literals" (formula "26") (term "0,1,0,0,1,0,0"))
                                             (rule "polySimp_addAssoc" (formula "26") (term "0,0,1,0,0"))
                                             (rule "add_literals" (formula "26") (term "0,0,0,1,0,0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "26") (term "1,0,0"))
                                             (rule "polySimp_mulComm0" (formula "26") (term "1,1,0,0"))
                                             (rule "polySimp_rightDist" (formula "26") (term "1,1,0,0"))
                                             (rule "mul_literals" (formula "26") (term "0,1,1,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "26") (term "1,1,1,0,0"))
                                             (rule "polySimp_elimOne" (formula "26") (term "1,1,1,0,0"))
                                             (rule "inEqSimp_notGeq" (formula "26") (term "0,0,0"))
                                             (rule "times_zero_1" (formula "26") (term "1,0,0,0,0,0"))
                                             (rule "add_zero_right" (formula "26") (term "0,0,0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "0,0,0"))
                                             (rule "mul_literals" (formula "26") (term "1,0,0,0"))
                                             (rule "nnf_imp2or" (formula "26") (term "0,1,0"))
                                             (rule "nnf_notAnd" (formula "26") (term "0,0,1,0"))
                                             (rule "inEqSimp_notLeq" (formula "26") (term "1,0,0,1,0"))
                                             (rule "polySimp_rightDist" (formula "26") (term "1,0,0,1,0,0,1,0"))
                                             (rule "mul_literals" (formula "26") (term "0,1,0,0,1,0,0,1,0"))
                                             (rule "polySimp_addAssoc" (formula "26") (term "0,0,1,0,0,1,0"))
                                             (rule "add_literals" (formula "26") (term "0,0,0,1,0,0,1,0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "26") (term "1,0,0,1,0"))
                                             (rule "polySimp_mulComm0" (formula "26") (term "1,1,0,0,1,0"))
                                             (rule "polySimp_rightDist" (formula "26") (term "1,1,0,0,1,0"))
                                             (rule "mul_literals" (formula "26") (term "0,1,1,0,0,1,0"))
                                             (rule "polySimp_mulLiterals" (formula "26") (term "1,1,1,0,0,1,0"))
                                             (rule "polySimp_elimOne" (formula "26") (term "1,1,1,0,0,1,0"))
                                             (rule "inEqSimp_notGeq" (formula "26") (term "0,0,0,1,0"))
                                             (rule "polySimp_mulComm0" (formula "26") (term "1,0,0,0,0,0,1,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "0,0,0,1,0"))
                                             (rule "polySimp_mulComm0" (formula "26") (term "1,0,0,0,1,0"))
                                             (rule "polySimp_rightDist" (formula "26") (term "1,0,0,0,1,0"))
                                             (rule "mul_literals" (formula "26") (term "0,1,0,0,0,1,0"))
                                             (rule "polySimp_mulLiterals" (formula "26") (term "1,1,0,0,0,1,0"))
                                             (rule "polySimp_elimOne" (formula "26") (term "1,1,0,0,0,1,0"))
                                             (rule "commute_or" (formula "27") (term "0,0,1,0"))
                                             (rule "jdiv_axiom" (formula "2") (term "0,1,1"))
                                             (rule "eqSymm" (formula "2"))
                                             (rule "inEqSimp_subsumption1" (formula "2") (term "0,0") (ifseqformula "5"))
                                             (rule "leq_literals" (formula "2") (term "0,0,0"))
                                              (builtin "One Step Simplification" (formula "2"))
                                             (rule "eqSymm" (formula "2"))
                                             (rule "applyEq" (formula "3") (term "0,1,1") (ifseqformula "2"))
                                             (rule "applyEqRigid" (formula "1") (term "0,1,0,2,0") (ifseqformula "2"))
                                             (rule "applyEq" (formula "23") (term "0") (ifseqformula "2"))
                                             (rule "applyEqRigid" (formula "7") (term "0") (ifseqformula "2"))
                                             (rule "inEqSimp_exactShadow3" (formula "8") (ifseqformula "3"))
                                             (rule "polySimp_rightDist" (formula "8") (term "0,0"))
                                             (rule "mul_literals" (formula "8") (term "0,0,0"))
                                             (rule "polySimp_addAssoc" (formula "8") (term "0"))
                                             (rule "polySimp_pullOutFactor2b" (formula "8") (term "0,0"))
                                             (rule "add_literals" (formula "8") (term "1,1,0,0"))
                                             (rule "times_zero_1" (formula "8") (term "1,0,0"))
                                             (rule "add_zero_right" (formula "8") (term "0,0"))
                                             (rule "inEqSimp_sepNegMonomial1" (formula "8"))
                                             (rule "polySimp_mulLiterals" (formula "8") (term "0"))
                                             (rule "polySimp_elimOne" (formula "8") (term "0"))
                                             (rule "inEqSimp_exactShadow3" (formula "24") (ifseqformula "3"))
                                             (rule "mul_literals" (formula "24") (term "0,0"))
                                             (rule "polySimp_addAssoc" (formula "24") (term "0"))
                                             (rule "inEqSimp_sepNegMonomial1" (formula "24"))
                                             (rule "polySimp_mulLiterals" (formula "24") (term "0"))
                                             (rule "polySimp_elimOne" (formula "24") (term "0"))
                                             (rule "cut_direct" (formula "14") (term "1"))
                                             (branch "CUT: self.sorted_splitters[b_0] >= value TRUE"
                                                 (builtin "One Step Simplification" (formula "15"))
                                                (rule "true_left" (formula "15"))
                                                (rule "arrayLengthNotNegative" (formula "26") (term "0"))
                                                (rule "arrayLengthIsAShort" (formula "27") (term "0"))
                                                 (builtin "One Step Simplification" (formula "27"))
                                                (rule "true_left" (formula "27"))
                                                (rule "arrayLengthIsAShort" (formula "25") (term "0"))
                                                 (builtin "One Step Simplification" (formula "25"))
                                                (rule "true_left" (formula "25"))
                                                (rule "arrayLengthNotNegative" (formula "25") (term "0"))
                                                (rule "cut_direct" (formula "13") (term "1"))
                                                (branch "CUT: self.sorted_splitters[b_0 + d_0 * -1] <= -1 + value TRUE"
                                                    (builtin "One Step Simplification" (formula "14"))
                                                   (rule "true_left" (formula "14"))
                                                   (rule "all_pull_out3" (formula "30") (term "0"))
                                                   (rule "shift_paren_or" (formula "30") (term "0,0"))
                                                   (rule "shift_paren_or" (formula "30") (term "0,0,0"))
                                                   (rule "div_axiom" (formula "2") (term "1") (inst "quotient=quotient_0"))
                                                   (rule "qeq_literals" (formula "2") (term "0,1,1"))
                                                    (builtin "One Step Simplification" (formula "2"))
                                                   (rule "mul_literals" (formula "2") (term "1,1,1,1"))
                                                   (rule "equal_literals" (formula "2") (term "0"))
                                                    (builtin "One Step Simplification" (formula "2"))
                                                   (rule "andLeft" (formula "2"))
                                                   (rule "andLeft" (formula "2"))
                                                   (rule "polySimp_addComm1" (formula "4") (term "1"))
                                                   (rule "add_literals" (formula "4") (term "0,1"))
                                                   (rule "inEqSimp_commuteLeq" (formula "3"))
                                                   (rule "inEqSimp_homoInEq1" (formula "4"))
                                                   (rule "polySimp_mulLiterals" (formula "4") (term "1,0"))
                                                   (rule "polySimp_addComm1" (formula "4") (term "0"))
                                                   (rule "applyEq" (formula "1") (term "0,1,0,2,0") (ifseqformula "2"))
                                                   (rule "polySimp_addComm0" (formula "1") (term "0,2,0"))
                                                   (rule "applyEq" (formula "10") (term "0") (ifseqformula "2"))
                                                   (rule "applyEq" (formula "26") (term "0") (ifseqformula "2"))
                                                   (rule "inEqSimp_homoInEq0" (formula "26"))
                                                   (rule "polySimp_addComm1" (formula "26") (term "0"))
                                                   (rule "applyEqRigid" (formula "6") (term "0,1,1") (ifseqformula "2"))
                                                   (rule "polySimp_addComm0" (formula "6") (term "1"))
                                                   (rule "applyEqRigid" (formula "5") (term "1") (ifseqformula "2"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "4"))
                                                   (rule "polySimp_mulComm0" (formula "4") (term "1"))
                                                   (rule "polySimp_rightDist" (formula "4") (term "1"))
                                                   (rule "mul_literals" (formula "4") (term "0,1"))
                                                   (rule "polySimp_mulLiterals" (formula "4") (term "1,1"))
                                                   (rule "inEqSimp_sepPosMonomial1" (formula "26"))
                                                   (rule "polySimp_mulComm0" (formula "26") (term "1"))
                                                   (rule "polySimp_rightDist" (formula "26") (term "1"))
                                                   (rule "mul_literals" (formula "26") (term "0,1"))
                                                   (rule "polySimp_mulLiterals" (formula "26") (term "1,1"))
                                                   (rule "polySimp_elimOne" (formula "26") (term "1,1"))
                                                   (rule "inEqSimp_exactShadow3" (formula "11") (ifseqformula "6"))
                                                   (rule "polySimp_rightDist" (formula "11") (term "0,0"))
                                                   (rule "mul_literals" (formula "11") (term "0,0,0"))
                                                   (rule "polySimp_addAssoc" (formula "11") (term "0"))
                                                   (rule "polySimp_addComm1" (formula "11") (term "0,0"))
                                                   (rule "polySimp_pullOutFactor2b" (formula "11") (term "0"))
                                                   (rule "add_literals" (formula "11") (term "1,1,0"))
                                                   (rule "times_zero_1" (formula "11") (term "1,0"))
                                                   (rule "add_zero_right" (formula "11") (term "0"))
                                                   (rule "inEqSimp_sepNegMonomial1" (formula "11"))
                                                   (rule "polySimp_mulLiterals" (formula "11") (term "0"))
                                                   (rule "polySimp_elimOne" (formula "11") (term "0"))
                                                   (rule "inEqSimp_exactShadow3" (formula "3") (ifseqformula "9"))
                                                   (rule "polySimp_mulAssoc" (formula "3") (term "0,0"))
                                                   (rule "polySimp_mulComm0" (formula "3") (term "0,0,0"))
                                                   (rule "polySimp_mulLiterals" (formula "3") (term "0,0"))
                                                   (rule "polySimp_addAssoc" (formula "3") (term "0"))
                                                   (rule "polySimp_addComm0" (formula "3") (term "0,0"))
                                                   (rule "inEqSimp_sepPosMonomial1" (formula "3"))
                                                   (rule "polySimp_mulComm0" (formula "3") (term "1"))
                                                   (rule "polySimp_rightDist" (formula "3") (term "1"))
                                                   (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
                                                   (rule "mul_literals" (formula "3") (term "0,1"))
                                                   (rule "inEqSimp_exactShadow3" (formula "28") (ifseqformula "7"))
                                                   (rule "mul_literals" (formula "28") (term "0,0"))
                                                   (rule "polySimp_addAssoc" (formula "28") (term "0"))
                                                   (rule "inEqSimp_sepPosMonomial1" (formula "28"))
                                                   (rule "polySimp_mulComm0" (formula "28") (term "1"))
                                                   (rule "polySimp_rightDist" (formula "28") (term "1"))
                                                   (rule "polySimp_mulLiterals" (formula "28") (term "1,1"))
                                                   (rule "mul_literals" (formula "28") (term "0,1"))
                                                   (rule "polySimp_elimOne" (formula "28") (term "1,1"))
                                                   (rule "inEqSimp_exactShadow3" (formula "9") (ifseqformula "5"))
                                                   (rule "mul_literals" (formula "9") (term "0,0"))
                                                   (rule "polySimp_addAssoc" (formula "9") (term "0"))
                                                   (rule "add_literals" (formula "9") (term "0,0"))
                                                   (rule "inEqSimp_sepPosMonomial1" (formula "9"))
                                                   (rule "mul_literals" (formula "9") (term "1"))
                                                   (rule "inEqSimp_contradInEq3" (formula "9") (ifseqformula "12"))
                                                   (rule "greater_literals" (formula "9") (term "0,0"))
                                                    (builtin "One Step Simplification" (formula "9"))
                                                   (rule "mul_literals" (formula "9") (term "0,0"))
                                                   (rule "qeq_literals" (formula "9") (term "0"))
                                                    (builtin "One Step Simplification" (formula "9"))
                                                   (rule "closeFalse" (formula "9"))
                                                )
                                                (branch "CUT: self.sorted_splitters[b_0 + d_0 * -1] <= -1 + value FALSE"
                                                    (builtin "One Step Simplification" (formula "13"))
                                                   (rule "inEqSimp_leqRight" (formula "31"))
                                                   (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                                                   (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                                                   (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                                                   (rule "add_literals" (formula "1") (term "0,0,0"))
                                                   (rule "add_zero_left" (formula "1") (term "0,0"))
                                                   (rule "applyEqRigid" (formula "1") (term "0,1,0,2,1,0") (ifseqformula "14"))
                                                   (rule "polySimp_mulComm0" (formula "1") (term "1,0,2,1,0"))
                                                   (rule "polySimp_rightDist" (formula "1") (term "1,0,2,1,0"))
                                                   (rule "mul_literals" (formula "1") (term "0,1,0,2,1,0"))
                                                   (rule "polySimp_addAssoc" (formula "1") (term "0,2,1,0"))
                                                   (rule "polySimp_addComm0" (formula "1") (term "0,0,2,1,0"))
                                                   (rule "polySimp_pullOutFactor1b" (formula "1") (term "0,2,1,0"))
                                                   (rule "add_literals" (formula "1") (term "1,1,0,2,1,0"))
                                                   (rule "times_zero_1" (formula "1") (term "1,0,2,1,0"))
                                                   (rule "add_zero_right" (formula "1") (term "0,2,1,0"))
                                                   (rule "applyEq" (formula "7") (term "0") (ifseqformula "14"))
                                                   (rule "inEqSimp_homoInEq0" (formula "7"))
                                                   (rule "polySimp_pullOutFactor1" (formula "7") (term "0"))
                                                   (rule "add_literals" (formula "7") (term "1,0"))
                                                   (rule "times_zero_1" (formula "7") (term "0"))
                                                   (rule "qeq_literals" (formula "7"))
                                                   (rule "true_left" (formula "7"))
                                                   (rule "applyEq" (formula "3") (term "0,0") (ifseqformula "13"))
                                                   (rule "eqSymm" (formula "3"))
                                                   (rule "applyEqRigid" (formula "7") (term "0,0") (ifseqformula "13"))
                                                   (rule "applyEq" (formula "2") (term "0,0,1,0,2,0") (ifseqformula "13"))
                                                   (rule "applyEqRigid" (formula "6") (term "0") (ifseqformula "13"))
                                                   (rule "inEqSimp_homoInEq1" (formula "6"))
                                                   (rule "polySimp_mulComm0" (formula "6") (term "1,0"))
                                                   (rule "polySimp_rightDist" (formula "6") (term "1,0"))
                                                   (rule "mul_literals" (formula "6") (term "0,1,0"))
                                                   (rule "polySimp_addAssoc" (formula "6") (term "0"))
                                                   (rule "add_literals" (formula "6") (term "0,0"))
                                                   (rule "applyEqRigid" (formula "4") (term "0,0,1,1") (ifseqformula "13"))
                                                   (rule "applyEqRigid" (formula "23") (term "0,0") (ifseqformula "13"))
                                                   (rule "applyEq" (formula "12") (term "1") (ifseqformula "13"))
                                                   (rule "applyEq" (formula "3") (term "0,0") (ifseqformula "13"))
                                                   (rule "eqSymm" (formula "3"))
                                                   (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                                                   (rule "polySimp_mulLiterals" (formula "1") (term "1"))
                                                   (rule "polySimp_elimOne" (formula "1") (term "1"))
                                                   (rule "inEqSimp_sepNegMonomial0" (formula "6"))
                                                   (rule "polySimp_mulLiterals" (formula "6") (term "0"))
                                                   (rule "polySimp_elimOne" (formula "6") (term "0"))
                                                   (rule "inEqSimp_exactShadow3" (formula "7") (ifseqformula "4"))
                                                   (rule "polySimp_rightDist" (formula "7") (term "0,0"))
                                                   (rule "mul_literals" (formula "7") (term "0,0,0"))
                                                   (rule "polySimp_addAssoc" (formula "7") (term "0"))
                                                   (rule "polySimp_pullOutFactor2b" (formula "7") (term "0,0"))
                                                   (rule "add_literals" (formula "7") (term "1,1,0,0"))
                                                   (rule "times_zero_1" (formula "7") (term "1,0,0"))
                                                   (rule "add_zero_right" (formula "7") (term "0,0"))
                                                   (rule "inEqSimp_sepNegMonomial1" (formula "7"))
                                                   (rule "polySimp_mulLiterals" (formula "7") (term "0"))
                                                   (rule "polySimp_elimOne" (formula "7") (term "0"))
                                                   (rule "inEqSimp_exactShadow3" (formula "23") (ifseqformula "4"))
                                                   (rule "mul_literals" (formula "23") (term "0,0"))
                                                   (rule "polySimp_addAssoc" (formula "23") (term "0"))
                                                   (rule "inEqSimp_sepNegMonomial1" (formula "23"))
                                                   (rule "polySimp_mulLiterals" (formula "23") (term "0"))
                                                   (rule "polySimp_elimOne" (formula "23") (term "0"))
                                                   (rule "all_pull_out3" (formula "29") (term "0"))
                                                   (rule "shift_paren_or" (formula "29") (term "0,0"))
                                                   (rule "shift_paren_or" (formula "29") (term "0,0,0"))
                                                   (rule "div_axiom" (formula "6") (term "0") (inst "quotient=quotient_0"))
                                                   (rule "mul_literals" (formula "6") (term "1,1,1,1,1"))
                                                   (rule "qeq_literals" (formula "6") (term "0,1,1"))
                                                    (builtin "One Step Simplification" (formula "6"))
                                                   (rule "equal_literals" (formula "6") (term "0"))
                                                    (builtin "One Step Simplification" (formula "6"))
                                                   (rule "andLeft" (formula "6"))
                                                   (rule "andLeft" (formula "6"))
                                                   (rule "polySimp_addAssoc" (formula "8") (term "0,1"))
                                                   (rule "add_literals" (formula "8") (term "0,0,1"))
                                                   (rule "polySimp_addComm1" (formula "8") (term "1"))
                                                   (rule "add_literals" (formula "8") (term "0,1"))
                                                   (rule "add_zero_left" (formula "8") (term "1"))
                                                   (rule "inEqSimp_commuteGeq" (formula "8"))
                                                   (rule "inEqSimp_homoInEq0" (formula "7"))
                                                   (rule "polySimp_mulLiterals" (formula "7") (term "1,0"))
                                                   (rule "polySimp_addComm1" (formula "7") (term "0"))
                                                   (rule "applyEq" (formula "2") (term "0,1,0,2,0") (ifseqformula "6"))
                                                   (rule "polySimp_addComm0" (formula "2") (term "0,2,0"))
                                                   (rule "applyEqRigid" (formula "4") (term "0,1,1") (ifseqformula "6"))
                                                   (rule "polySimp_addComm0" (formula "4") (term "1"))
                                                   (rule "applyEqRigid" (formula "25") (term "0") (ifseqformula "6"))
                                                   (rule "inEqSimp_homoInEq0" (formula "25"))
                                                   (rule "polySimp_addComm1" (formula "25") (term "0"))
                                                   (rule "applyEqRigid" (formula "9") (term "0") (ifseqformula "6"))
                                                   (rule "applyEq" (formula "3") (term "1") (ifseqformula "6"))
                                                   (rule "inEqSimp_sepPosMonomial1" (formula "7"))
                                                   (rule "polySimp_mulComm0" (formula "7") (term "1"))
                                                   (rule "polySimp_rightDist" (formula "7") (term "1"))
                                                   (rule "polySimp_mulLiterals" (formula "7") (term "1,1"))
                                                   (rule "mul_literals" (formula "7") (term "0,1"))
                                                   (rule "inEqSimp_sepPosMonomial1" (formula "25"))
                                                   (rule "polySimp_mulComm0" (formula "25") (term "1"))
                                                   (rule "polySimp_rightDist" (formula "25") (term "1"))
                                                   (rule "polySimp_mulLiterals" (formula "25") (term "1,1"))
                                                   (rule "mul_literals" (formula "25") (term "0,1"))
                                                   (rule "polySimp_elimOne" (formula "25") (term "1,1"))
                                                   (rule "inEqSimp_exactShadow3" (formula "26") (ifseqformula "4"))
                                                   (rule "mul_literals" (formula "26") (term "0,0"))
                                                   (rule "polySimp_addAssoc" (formula "26") (term "0"))
                                                   (rule "inEqSimp_sepPosMonomial1" (formula "26"))
                                                   (rule "polySimp_mulComm0" (formula "26") (term "1"))
                                                   (rule "polySimp_rightDist" (formula "26") (term "1"))
                                                   (rule "polySimp_mulLiterals" (formula "26") (term "1,1"))
                                                   (rule "mul_literals" (formula "26") (term "0,1"))
                                                   (rule "polySimp_elimOne" (formula "26") (term "1,1"))
                                                   (rule "inEqSimp_exactShadow3" (formula "25") (ifseqformula "8"))
                                                   (rule "polySimp_rightDist" (formula "25") (term "0,0"))
                                                   (rule "mul_literals" (formula "25") (term "0,0,0"))
                                                   (rule "polySimp_pullOutFactor0b" (formula "25") (term "0"))
                                                   (rule "add_literals" (formula "25") (term "1,1,0"))
                                                   (rule "polySimp_elimOne" (formula "25") (term "1,0"))
                                                   (rule "inEqSimp_sepPosMonomial1" (formula "25"))
                                                   (rule "mul_literals" (formula "25") (term "1"))
                                                   (rule "inEqSimp_contradInEq1" (formula "9") (ifseqformula "25"))
                                                   (rule "qeq_literals" (formula "9") (term "0"))
                                                    (builtin "One Step Simplification" (formula "9"))
                                                   (rule "closeFalse" (formula "9"))
                                                )
                                             )
                                             (branch "CUT: self.sorted_splitters[b_0] >= value FALSE"
                                                 (builtin "One Step Simplification" (formula "14"))
                                                (rule "inEqSimp_geqRight" (formula "29"))
                                                (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                                (rule "applyEq" (formula "4") (term "0") (ifseqformula "15"))
                                                (rule "inEqSimp_homoInEq0" (formula "4"))
                                                (rule "polySimp_mulComm0" (formula "4") (term "1,0"))
                                                (rule "polySimp_rightDist" (formula "4") (term "1,0"))
                                                (rule "mul_literals" (formula "4") (term "0,1,0"))
                                                (rule "polySimp_addComm1" (formula "4") (term "0"))
                                                (rule "polySimp_addAssoc" (formula "4") (term "0,0"))
                                                (rule "polySimp_addComm0" (formula "4") (term "0,0,0"))
                                                (rule "polySimp_pullOutFactor1b" (formula "4") (term "0,0"))
                                                (rule "add_literals" (formula "4") (term "1,1,0,0"))
                                                (rule "times_zero_1" (formula "4") (term "1,0,0"))
                                                (rule "add_zero_right" (formula "4") (term "0,0"))
                                                (rule "applyEq" (formula "26") (term "1") (ifseqformula "15"))
                                                (rule "applyEq" (formula "28") (term "1,1,1,0,0") (ifseqformula "15"))
                                                (rule "polySimp_addAssoc" (formula "28") (term "1,1,0,0"))
                                                (rule "add_literals" (formula "28") (term "0,1,1,0,0"))
                                                (rule "applyEq" (formula "29") (term "1,1,1,0,0") (ifseqformula "15"))
                                                (rule "polySimp_addAssoc" (formula "29") (term "1,1,0,0"))
                                                (rule "add_literals" (formula "29") (term "0,1,1,0,0"))
                                                (rule "add_zero_left" (formula "29") (term "1,1,0,0"))
                                                (rule "applyEq" (formula "25") (term "0") (ifseqformula "15"))
                                                (rule "inEqSimp_homoInEq1" (formula "25"))
                                                (rule "polySimp_mulComm0" (formula "25") (term "1,0"))
                                                (rule "polySimp_rightDist" (formula "25") (term "1,0"))
                                                (rule "mul_literals" (formula "25") (term "0,1,0"))
                                                (rule "polySimp_addAssoc" (formula "25") (term "0"))
                                                (rule "add_literals" (formula "25") (term "0,0"))
                                                (rule "applyEq" (formula "9") (term "0") (ifseqformula "15"))
                                                (rule "inEqSimp_homoInEq1" (formula "9"))
                                                (rule "polySimp_pullOutFactor1" (formula "9") (term "0"))
                                                (rule "add_literals" (formula "9") (term "1,0"))
                                                (rule "times_zero_1" (formula "9") (term "0"))
                                                (rule "leq_literals" (formula "9"))
                                                (rule "true_left" (formula "9"))
                                                (rule "applyEq" (formula "26") (term "1") (ifseqformula "14"))
                                                (rule "applyEq" (formula "28") (term "1,1,0,0,0,1,0") (ifseqformula "14"))
                                                (rule "polySimp_addAssoc" (formula "28") (term "1,0,0,0,1,0"))
                                                (rule "add_literals" (formula "28") (term "0,1,0,0,0,1,0"))
                                                (rule "add_zero_left" (formula "28") (term "1,0,0,0,1,0"))
                                                (rule "applyEq" (formula "22") (term "1") (ifseqformula "14"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                                (rule "polySimp_mulComm0" (formula "1") (term "1"))
                                                (rule "polySimp_rightDist" (formula "1") (term "1"))
                                                (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                                                (rule "mul_literals" (formula "1") (term "0,1"))
                                                (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                                                (rule "inEqSimp_sepNegMonomial1" (formula "4"))
                                                (rule "polySimp_mulLiterals" (formula "4") (term "0"))
                                                (rule "polySimp_elimOne" (formula "4") (term "0"))
                                                (rule "inEqSimp_sepNegMonomial0" (formula "23"))
                                                (rule "polySimp_mulLiterals" (formula "23") (term "0"))
                                                (rule "polySimp_elimOne" (formula "23") (term "0"))
                                                (rule "arrayLengthNotNegative" (formula "24") (term "0"))
                                                (rule "arrayLengthIsAShort" (formula "25") (term "0"))
                                                 (builtin "One Step Simplification" (formula "25"))
                                                (rule "true_left" (formula "25"))
                                                (rule "arrayLengthIsAShort" (formula "23") (term "0"))
                                                 (builtin "One Step Simplification" (formula "23"))
                                                (rule "true_left" (formula "23"))
                                                (rule "arrayLengthNotNegative" (formula "23") (term "0"))
                                                (rule "cut_direct" (formula "12") (term "1"))
                                                (branch "CUT: self.sorted_splitters[b_0 + d_0 * -1] <= -1 + value TRUE"
                                                    (builtin "One Step Simplification" (formula "13"))
                                                   (rule "true_left" (formula "13"))
                                                   (rule "div_axiom" (formula "3") (term "1") (inst "quotient=quotient_0"))
                                                   (rule "mul_literals" (formula "3") (term "1,1,1,1,1"))
                                                   (rule "equal_literals" (formula "3") (term "0"))
                                                    (builtin "One Step Simplification" (formula "3"))
                                                   (rule "qeq_literals" (formula "3") (term "0,1"))
                                                    (builtin "One Step Simplification" (formula "3"))
                                                   (rule "andLeft" (formula "3"))
                                                   (rule "andLeft" (formula "3"))
                                                   (rule "polySimp_addComm1" (formula "5") (term "1"))
                                                   (rule "add_literals" (formula "5") (term "0,1"))
                                                   (rule "inEqSimp_commuteLeq" (formula "4"))
                                                   (rule "inEqSimp_homoInEq1" (formula "5"))
                                                   (rule "polySimp_mulLiterals" (formula "5") (term "1,0"))
                                                   (rule "polySimp_addComm1" (formula "5") (term "0"))
                                                   (rule "applyEq" (formula "25") (term "0") (ifseqformula "3"))
                                                   (rule "inEqSimp_homoInEq0" (formula "25"))
                                                   (rule "polySimp_addComm1" (formula "25") (term "0"))
                                                   (rule "applyEqRigid" (formula "2") (term "0,1,0,2,0") (ifseqformula "3"))
                                                   (rule "polySimp_addComm0" (formula "2") (term "0,2,0"))
                                                   (rule "applyEq" (formula "10") (term "0") (ifseqformula "3"))
                                                   (rule "applyEqRigid" (formula "6") (term "1") (ifseqformula "3"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "5"))
                                                   (rule "polySimp_mulComm0" (formula "5") (term "1"))
                                                   (rule "polySimp_rightDist" (formula "5") (term "1"))
                                                   (rule "mul_literals" (formula "5") (term "0,1"))
                                                   (rule "polySimp_mulLiterals" (formula "5") (term "1,1"))
                                                   (rule "inEqSimp_sepPosMonomial1" (formula "25"))
                                                   (rule "polySimp_mulComm0" (formula "25") (term "1"))
                                                   (rule "polySimp_rightDist" (formula "25") (term "1"))
                                                   (rule "polySimp_mulLiterals" (formula "25") (term "1,1"))
                                                   (rule "mul_literals" (formula "25") (term "0,1"))
                                                   (rule "polySimp_elimOne" (formula "25") (term "1,1"))
                                                   (rule "inEqSimp_exactShadow3" (formula "8") (ifseqformula "5"))
                                                   (rule "mul_literals" (formula "8") (term "0,0"))
                                                   (rule "polySimp_addAssoc" (formula "8") (term "0"))
                                                   (rule "add_literals" (formula "8") (term "0,0"))
                                                   (rule "inEqSimp_sepPosMonomial1" (formula "8"))
                                                   (rule "mul_literals" (formula "8") (term "1"))
                                                   (rule "inEqSimp_contradInEq3" (formula "8") (ifseqformula "11"))
                                                   (rule "mul_literals" (formula "8") (term "0,1,0"))
                                                   (rule "greater_literals" (formula "8") (term "0,0"))
                                                    (builtin "One Step Simplification" (formula "8"))
                                                   (rule "qeq_literals" (formula "8") (term "0"))
                                                    (builtin "One Step Simplification" (formula "8"))
                                                   (rule "closeFalse" (formula "8"))
                                                )
                                                (branch "CUT: self.sorted_splitters[b_0 + d_0 * -1] <= -1 + value FALSE"
                                                    (builtin "One Step Simplification" (formula "12"))
                                                   (rule "inEqSimp_leqRight" (formula "29"))
                                                   (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                                                   (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                                                   (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                                                   (rule "add_literals" (formula "1") (term "0,0,0"))
                                                   (rule "add_zero_left" (formula "1") (term "0,0"))
                                                   (rule "applyEq" (formula "1") (term "0,1,0,2,1,0") (ifseqformula "13"))
                                                   (rule "polySimp_mulComm0" (formula "1") (term "1,0,2,1,0"))
                                                   (rule "polySimp_rightDist" (formula "1") (term "1,0,2,1,0"))
                                                   (rule "mul_literals" (formula "1") (term "0,1,0,2,1,0"))
                                                   (rule "polySimp_addAssoc" (formula "1") (term "0,2,1,0"))
                                                   (rule "polySimp_addComm0" (formula "1") (term "0,0,2,1,0"))
                                                   (rule "polySimp_pullOutFactor1b" (formula "1") (term "0,2,1,0"))
                                                   (rule "add_literals" (formula "1") (term "1,1,0,2,1,0"))
                                                   (rule "times_zero_1" (formula "1") (term "1,0,2,1,0"))
                                                   (rule "add_zero_right" (formula "1") (term "0,2,1,0"))
                                                   (rule "applyEqRigid" (formula "3") (term "0,0,1,0,2,0") (ifseqformula "13"))
                                                   (rule "applyEqRigid" (formula "8") (term "0,0") (ifseqformula "13"))
                                                   (rule "applyEq" (formula "4") (term "0,0") (ifseqformula "13"))
                                                   (rule "eqSymm" (formula "4"))
                                                   (rule "applyEq" (formula "7") (term "0") (ifseqformula "13"))
                                                   (rule "inEqSimp_homoInEq0" (formula "7"))
                                                   (rule "polySimp_pullOutFactor1" (formula "7") (term "0"))
                                                   (rule "add_literals" (formula "7") (term "1,0"))
                                                   (rule "times_zero_1" (formula "7") (term "0"))
                                                   (rule "qeq_literals" (formula "7"))
                                                   (rule "true_left" (formula "7"))
                                                   (rule "applyEqRigid" (formula "22") (term "0,0") (ifseqformula "12"))
                                                   (rule "applyEqRigid" (formula "6") (term "0") (ifseqformula "12"))
                                                   (rule "inEqSimp_homoInEq1" (formula "6"))
                                                   (rule "polySimp_mulComm0" (formula "6") (term "1,0"))
                                                   (rule "polySimp_rightDist" (formula "6") (term "1,0"))
                                                   (rule "mul_literals" (formula "6") (term "0,1,0"))
                                                   (rule "polySimp_addAssoc" (formula "6") (term "0"))
                                                   (rule "add_literals" (formula "6") (term "0,0"))
                                                   (rule "applyEq" (formula "11") (term "1") (ifseqformula "12"))
                                                   (rule "applyEqRigid" (formula "4") (term "0,0") (ifseqformula "12"))
                                                   (rule "eqSymm" (formula "4"))
                                                   (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                                                   (rule "polySimp_mulLiterals" (formula "1") (term "1"))
                                                   (rule "polySimp_elimOne" (formula "1") (term "1"))
                                                   (rule "inEqSimp_sepNegMonomial0" (formula "6"))
                                                   (rule "polySimp_mulLiterals" (formula "6") (term "0"))
                                                   (rule "polySimp_elimOne" (formula "6") (term "0"))
                                                   (rule "all_pull_out3" (formula "27") (term "0"))
                                                   (rule "shift_paren_or" (formula "27") (term "0,0"))
                                                   (rule "shift_paren_or" (formula "27") (term "0,0,0"))
                                                   (rule "div_axiom" (formula "3") (term "0,1,0,2,0") (inst "quotient=quotient_0"))
                                                   (rule "mul_literals" (formula "3") (term "1,1,1,1,1"))
                                                   (rule "qeq_literals" (formula "3") (term "0,1,1"))
                                                    (builtin "One Step Simplification" (formula "3"))
                                                   (rule "equal_literals" (formula "3") (term "0"))
                                                    (builtin "One Step Simplification" (formula "3"))
                                                   (rule "andLeft" (formula "3"))
                                                   (rule "andLeft" (formula "3"))
                                                   (rule "polySimp_addAssoc" (formula "5") (term "0,1"))
                                                   (rule "add_literals" (formula "5") (term "0,0,1"))
                                                   (rule "polySimp_addComm1" (formula "5") (term "1"))
                                                   (rule "add_literals" (formula "5") (term "0,1"))
                                                   (rule "add_zero_left" (formula "5") (term "1"))
                                                   (rule "inEqSimp_commuteGeq" (formula "5"))
                                                   (rule "inEqSimp_homoInEq0" (formula "4"))
                                                   (rule "polySimp_mulLiterals" (formula "4") (term "1,0"))
                                                   (rule "polySimp_addComm1" (formula "4") (term "0"))
                                                   (rule "applyEqRigid" (formula "6") (term "0,1,0,2,0") (ifseqformula "3"))
                                                   (rule "polySimp_addComm0" (formula "6") (term "0,2,0"))
                                                   (rule "applyEq" (formula "24") (term "0") (ifseqformula "3"))
                                                   (rule "inEqSimp_homoInEq0" (formula "24"))
                                                   (rule "polySimp_addComm1" (formula "24") (term "0"))
                                                   (rule "applyEqRigid" (formula "9") (term "0") (ifseqformula "3"))
                                                   (rule "applyEq" (formula "7") (term "1") (ifseqformula "3"))
                                                   (rule "inEqSimp_sepPosMonomial1" (formula "4"))
                                                   (rule "polySimp_mulComm0" (formula "4") (term "1"))
                                                   (rule "polySimp_rightDist" (formula "4") (term "1"))
                                                   (rule "polySimp_mulLiterals" (formula "4") (term "1,1"))
                                                   (rule "mul_literals" (formula "4") (term "0,1"))
                                                   (rule "inEqSimp_sepPosMonomial1" (formula "24"))
                                                   (rule "polySimp_mulComm0" (formula "24") (term "1"))
                                                   (rule "polySimp_rightDist" (formula "24") (term "1"))
                                                   (rule "polySimp_mulLiterals" (formula "24") (term "1,1"))
                                                   (rule "mul_literals" (formula "24") (term "0,1"))
                                                   (rule "polySimp_elimOne" (formula "24") (term "1,1"))
                                                   (rule "inEqSimp_exactShadow3" (formula "24") (ifseqformula "5"))
                                                   (rule "polySimp_rightDist" (formula "24") (term "0,0"))
                                                   (rule "mul_literals" (formula "24") (term "0,0,0"))
                                                   (rule "polySimp_pullOutFactor0b" (formula "24") (term "0"))
                                                   (rule "add_literals" (formula "24") (term "1,1,0"))
                                                   (rule "polySimp_elimOne" (formula "24") (term "1,0"))
                                                   (rule "inEqSimp_sepPosMonomial1" (formula "24"))
                                                   (rule "mul_literals" (formula "24") (term "1"))
                                                   (rule "inEqSimp_contradInEq0" (formula "24") (ifseqformula "9"))
                                                   (rule "qeq_literals" (formula "24") (term "0"))
                                                    (builtin "One Step Simplification" (formula "24"))
                                                   (rule "closeFalse" (formula "24"))
                                                )
                                             )
                                          )
                                       )
                                       (branch
                                          (rule "andRight" (formula "18"))
                                          (branch
                                             (rule "polySimp_homoEq" (formula "8") (term "0"))
                                             (rule "polySimp_homoEq" (formula "7") (term "1"))
                                             (rule "polySimp_mulComm0" (formula "8") (term "1,0,0"))
                                             (rule "polySimp_mulComm0" (formula "7") (term "1,0,1"))
                                             (rule "polySimp_rightDist" (formula "8") (term "1,0,0"))
                                             (rule "mul_literals" (formula "8") (term "0,1,0,0"))
                                             (rule "polySimp_rightDist" (formula "7") (term "1,0,1"))
                                             (rule "polySimp_mulLiterals" (formula "7") (term "1,1,0,1"))
                                             (rule "polySimp_elimOne" (formula "7") (term "1,1,0,1"))
                                             (rule "polySimp_mulComm0" (formula "7") (term "0,1,0,1"))
                                             (rule "polySimp_addAssoc" (formula "8") (term "0,0"))
                                             (rule "polySimp_addComm0" (formula "8") (term "0,0,0"))
                                             (rule "polySimp_addAssoc" (formula "7") (term "0,1"))
                                             (rule "inEqSimp_ltRight" (formula "16"))
                                             (rule "polySimp_mulComm0" (formula "1") (term "0,0"))
                                             (rule "inEqSimp_geqRight" (formula "18"))
                                             (rule "times_zero_1" (formula "1") (term "1,0,0"))
                                             (rule "add_zero_right" (formula "1") (term "0,0"))
                                             (rule "polySimp_addAssoc" (formula "1") (term "0"))
                                             (rule "add_literals" (formula "1") (term "0,0"))
                                             (rule "add_zero_left" (formula "1") (term "0"))
                                             (rule "inEqSimp_gtToGeq" (formula "3"))
                                             (rule "mul_literals" (formula "3") (term "1,0,0"))
                                             (rule "add_literals" (formula "3") (term "0,0"))
                                             (rule "inEqSimp_ltToLeq" (formula "9") (term "0"))
                                             (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,0"))
                                             (rule "inEqSimp_homoInEq0" (formula "4"))
                                             (rule "polySimp_mulComm0" (formula "4") (term "1,0"))
                                             (rule "polySimp_rightDist" (formula "4") (term "1,0"))
                                             (rule "mul_literals" (formula "4") (term "0,1,0"))
                                             (rule "polySimp_addAssoc" (formula "4") (term "0"))
                                             (rule "polySimp_addComm0" (formula "4") (term "0,0"))
                                             (rule "inEqSimp_homoInEq0" (formula "5"))
                                             (rule "polySimp_addComm1" (formula "5") (term "0"))
                                             (rule "polySimp_sepNegMonomial" (formula "10") (term "0"))
                                             (rule "polySimp_mulLiterals" (formula "10") (term "0,0"))
                                             (rule "polySimp_elimOne" (formula "10") (term "0,0"))
                                             (rule "polySimp_sepPosMonomial" (formula "9") (term "1"))
                                             (rule "polySimp_mulComm0" (formula "9") (term "1,1"))
                                             (rule "polySimp_rightDist" (formula "9") (term "1,1"))
                                             (rule "mul_literals" (formula "9") (term "0,1,1"))
                                             (rule "polySimp_mulLiterals" (formula "9") (term "1,1,1"))
                                             (rule "polySimp_elimOne" (formula "9") (term "1,1,1"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                                             (rule "polySimp_mulLiterals" (formula "2") (term "1"))
                                             (rule "polySimp_elimOne" (formula "2") (term "1"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "3"))
                                             (rule "mul_literals" (formula "3") (term "1"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "0"))
                                             (rule "polySimp_mulComm0" (formula "9") (term "1,0"))
                                             (rule "polySimp_rightDist" (formula "9") (term "1,0"))
                                             (rule "mul_literals" (formula "9") (term "0,1,0"))
                                             (rule "polySimp_mulLiterals" (formula "9") (term "1,1,0"))
                                             (rule "polySimp_elimOne" (formula "9") (term "1,1,0"))
                                             (rule "inEqSimp_sepNegMonomial1" (formula "4"))
                                             (rule "polySimp_mulLiterals" (formula "4") (term "0"))
                                             (rule "polySimp_elimOne" (formula "4") (term "0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "5"))
                                             (rule "polySimp_mulComm0" (formula "5") (term "1"))
                                             (rule "polySimp_rightDist" (formula "5") (term "1"))
                                             (rule "mul_literals" (formula "5") (term "0,1"))
                                             (rule "polySimp_mulLiterals" (formula "5") (term "1,1"))
                                             (rule "polySimp_elimOne" (formula "5") (term "1,1"))
                                             (rule "inEqSimp_antiSymm" (formula "6") (ifseqformula "1"))
                                             (rule "applyEq" (formula "9") (term "1,0") (ifseqformula "6"))
                                             (rule "translateJavaShiftLeftIntZero" (formula "9") (term "0"))
                                             (rule "eqSymm" (formula "9"))
                                             (rule "applyEqRigid" (formula "1") (term "0") (ifseqformula "6"))
                                             (rule "leq_literals" (formula "1"))
                                             (rule "true_left" (formula "1"))
                                             (rule "applyEqRigid" (formula "7") (term "1") (ifseqformula "5"))
                                             (rule "applyEqRigid" (formula "6") (term "0") (ifseqformula "5"))
                                             (rule "qeq_literals" (formula "6"))
                                             (rule "true_left" (formula "6"))
                                             (rule "applyEqRigid" (formula "8") (term "0,1") (ifseqformula "7"))
                                             (rule "polySimp_homoEq" (formula "8") (term "1"))
                                             (rule "mul_literals" (formula "8") (term "1,0,1"))
                                             (rule "polySimp_addComm1" (formula "8") (term "0,1"))
                                             (rule "add_literals" (formula "8") (term "0,0,1"))
                                             (rule "add_zero_left" (formula "8") (term "0,1"))
                                             (rule "applyEqRigid" (formula "8") (term "0,1,0,2,0,0") (ifseqformula "7"))
                                             (rule "mul_literals" (formula "8") (term "1,0,2,0,0"))
                                             (rule "polySimp_addComm0" (formula "8") (term "0,2,0,0"))
                                             (rule "applyEqRigid" (formula "3") (term "0") (ifseqformula "7"))
                                             (rule "inEqSimp_homoInEq0" (formula "3"))
                                             (rule "mul_literals" (formula "3") (term "1,0"))
                                             (rule "polySimp_addComm1" (formula "3") (term "0"))
                                             (rule "add_literals" (formula "3") (term "0,0"))
                                             (rule "add_zero_left" (formula "3") (term "0"))
                                             (rule "applyEqRigid" (formula "1") (term "0,0,1,0,2,0") (ifseqformula "7"))
                                             (rule "jdiv_axiom_inline" (formula "1") (term "0,1,0,2,0"))
                                             (rule "mul_literals" (formula "1") (term "0,0,2,0,1,0,2,0"))
                                             (rule "qeq_literals" (formula "1") (term "0,0,1,0,2,0"))
                                              (builtin "One Step Simplification" (formula "1"))
                                             (rule "div_literals" (formula "1") (term "0,1,0,2,0"))
                                             (rule "times_zero_2" (formula "1") (term "1,0,2,0"))
                                             (rule "add_zero_right" (formula "1") (term "0,2,0"))
                                             (rule "replace_known_left" (formula "9") (term "1") (ifseqformula "1"))
                                              (builtin "One Step Simplification" (formula "9"))
                                             (rule "true_left" (formula "9"))
                                             (rule "applyEq" (formula "2") (term "0") (ifseqformula "7"))
                                             (rule "qeq_literals" (formula "2"))
                                             (rule "closeFalse" (formula "2"))
                                          )
                                          (branch
                                             (rule "polySimp_homoEq" (formula "7") (term "1"))
                                             (rule "polySimp_homoEq" (formula "8") (term "0"))
                                             (rule "polySimp_mulComm0" (formula "7") (term "1,0,1"))
                                             (rule "polySimp_mulComm0" (formula "8") (term "1,0,0"))
                                             (rule "polySimp_rightDist" (formula "7") (term "1,0,1"))
                                             (rule "polySimp_mulLiterals" (formula "7") (term "1,1,0,1"))
                                             (rule "polySimp_elimOne" (formula "7") (term "1,1,0,1"))
                                             (rule "polySimp_mulComm0" (formula "7") (term "0,1,0,1"))
                                             (rule "polySimp_rightDist" (formula "8") (term "1,0,0"))
                                             (rule "mul_literals" (formula "8") (term "0,1,0,0"))
                                             (rule "polySimp_addAssoc" (formula "7") (term "0,1"))
                                             (rule "polySimp_addAssoc" (formula "8") (term "0,0"))
                                             (rule "polySimp_addComm0" (formula "8") (term "0,0,0"))
                                             (rule "inEqSimp_ltRight" (formula "16"))
                                             (rule "polySimp_mulComm0" (formula "1") (term "0,0"))
                                             (rule "inEqSimp_geqRight" (formula "18"))
                                             (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                                             (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                                             (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                                             (rule "add_literals" (formula "1") (term "0,0,0"))
                                             (rule "inEqSimp_gtToGeq" (formula "3"))
                                             (rule "mul_literals" (formula "3") (term "1,0,0"))
                                             (rule "add_literals" (formula "3") (term "0,0"))
                                             (rule "inEqSimp_ltToLeq" (formula "9") (term "0"))
                                             (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,0"))
                                             (rule "inEqSimp_homoInEq0" (formula "4"))
                                             (rule "polySimp_mulComm0" (formula "4") (term "1,0"))
                                             (rule "polySimp_rightDist" (formula "4") (term "1,0"))
                                             (rule "mul_literals" (formula "4") (term "0,1,0"))
                                             (rule "polySimp_addAssoc" (formula "4") (term "0"))
                                             (rule "polySimp_addComm0" (formula "4") (term "0,0"))
                                             (rule "inEqSimp_homoInEq0" (formula "5"))
                                             (rule "polySimp_addComm1" (formula "5") (term "0"))
                                             (rule "polySimp_sepPosMonomial" (formula "9") (term "1"))
                                             (rule "polySimp_mulComm0" (formula "9") (term "1,1"))
                                             (rule "polySimp_rightDist" (formula "9") (term "1,1"))
                                             (rule "mul_literals" (formula "9") (term "0,1,1"))
                                             (rule "polySimp_mulLiterals" (formula "9") (term "1,1,1"))
                                             (rule "polySimp_elimOne" (formula "9") (term "1,1,1"))
                                             (rule "polySimp_sepNegMonomial" (formula "10") (term "0"))
                                             (rule "polySimp_mulLiterals" (formula "10") (term "0,0"))
                                             (rule "polySimp_elimOne" (formula "10") (term "0,0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                                             (rule "polySimp_mulLiterals" (formula "2") (term "1"))
                                             (rule "polySimp_elimOne" (formula "2") (term "1"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                             (rule "polySimp_mulComm0" (formula "1") (term "1"))
                                             (rule "polySimp_rightDist" (formula "1") (term "1"))
                                             (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                                             (rule "mul_literals" (formula "1") (term "0,1"))
                                             (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "3"))
                                             (rule "mul_literals" (formula "3") (term "1"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "0"))
                                             (rule "polySimp_mulComm0" (formula "9") (term "1,0"))
                                             (rule "polySimp_rightDist" (formula "9") (term "1,0"))
                                             (rule "mul_literals" (formula "9") (term "0,1,0"))
                                             (rule "polySimp_mulLiterals" (formula "9") (term "1,1,0"))
                                             (rule "polySimp_elimOne" (formula "9") (term "1,1,0"))
                                             (rule "inEqSimp_sepNegMonomial1" (formula "4"))
                                             (rule "polySimp_mulLiterals" (formula "4") (term "0"))
                                             (rule "polySimp_elimOne" (formula "4") (term "0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "5"))
                                             (rule "polySimp_mulComm0" (formula "5") (term "1"))
                                             (rule "polySimp_rightDist" (formula "5") (term "1"))
                                             (rule "mul_literals" (formula "5") (term "0,1"))
                                             (rule "polySimp_mulLiterals" (formula "5") (term "1,1"))
                                             (rule "polySimp_elimOne" (formula "5") (term "1,1"))
                                             (rule "inEqSimp_contradInEq0" (formula "7") (ifseqformula "1"))
                                             (rule "andLeft" (formula "7"))
                                             (rule "inEqSimp_homoInEq1" (formula "7"))
                                             (rule "polySimp_mulComm0" (formula "7") (term "1,0"))
                                             (rule "polySimp_rightDist" (formula "7") (term "1,0"))
                                             (rule "mul_literals" (formula "7") (term "0,1,0"))
                                             (rule "polySimp_addAssoc" (formula "7") (term "0"))
                                             (rule "polySimp_addComm0" (formula "7") (term "0,0"))
                                             (rule "polySimp_pullOutFactor1b" (formula "7") (term "0"))
                                             (rule "add_literals" (formula "7") (term "1,1,0"))
                                             (rule "times_zero_1" (formula "7") (term "1,0"))
                                             (rule "add_zero_right" (formula "7") (term "0"))
                                             (rule "leq_literals" (formula "7"))
                                             (rule "closeFalse" (formula "7"))
                                          )
                                       )
                                    )
                                    (branch "Case 2"
                                       (rule "shiftLeftSplitTwo" (formula "6") (term "0") (userinteraction))
                                       (rule "polySimp_homoEq" (formula "9") (term "0"))
                                       (rule "polySimp_homoEq" (formula "8") (term "1"))
                                       (rule "polySimp_elimSub" (formula "6") (term "1,0,0,1"))
                                       (rule "mul_literals" (formula "6") (term "1,1,0,0,1"))
                                       (rule "polySimp_mulComm0" (formula "9") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "8") (term "1,0,1"))
                                       (rule "polySimp_addComm0" (formula "6") (term "1,0,0,1"))
                                       (rule "polySimp_rightDist" (formula "9") (term "1,0,0"))
                                       (rule "mul_literals" (formula "9") (term "0,1,0,0"))
                                       (rule "polySimp_rightDist" (formula "8") (term "1,0,1"))
                                       (rule "polySimp_mulLiterals" (formula "8") (term "1,1,0,1"))
                                       (rule "polySimp_elimOne" (formula "8") (term "1,1,0,1"))
                                       (rule "polySimp_mulComm0" (formula "8") (term "0,1,0,1"))
                                       (rule "polySimp_addAssoc" (formula "9") (term "0,0"))
                                       (rule "polySimp_addComm0" (formula "9") (term "0,0,0"))
                                       (rule "polySimp_addAssoc" (formula "8") (term "0,1"))
                                       (rule "inEqSimp_ltRight" (formula "17"))
                                       (rule "polySimp_mulComm0" (formula "1") (term "0,0"))
                                       (rule "inEqSimp_ltToLeq" (formula "9") (term "0"))
                                       (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,0"))
                                       (rule "inEqSimp_gtToGeq" (formula "2"))
                                       (rule "mul_literals" (formula "2") (term "1,0,0"))
                                       (rule "add_literals" (formula "2") (term "0,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "7") (term "0,0"))
                                       (rule "inEqSimp_homoInEq0" (formula "4"))
                                       (rule "polySimp_addComm1" (formula "4") (term "0"))
                                       (rule "inEqSimp_homoInEq0" (formula "3"))
                                       (rule "polySimp_mulComm0" (formula "3") (term "1,0"))
                                       (rule "polySimp_rightDist" (formula "3") (term "1,0"))
                                       (rule "mul_literals" (formula "3") (term "0,1,0"))
                                       (rule "polySimp_addAssoc" (formula "3") (term "0"))
                                       (rule "polySimp_addComm0" (formula "3") (term "0,0"))
                                       (rule "applyEqRigid" (formula "7") (term "1,1") (ifseqformula "8"))
                                       (rule "polySimp_sepNegMonomial" (formula "10") (term "0"))
                                       (rule "polySimp_mulLiterals" (formula "10") (term "0,0"))
                                       (rule "polySimp_elimOne" (formula "10") (term "0,0"))
                                       (rule "polySimp_sepPosMonomial" (formula "9") (term "1"))
                                       (rule "polySimp_mulComm0" (formula "9") (term "1,1"))
                                       (rule "polySimp_rightDist" (formula "9") (term "1,1"))
                                       (rule "mul_literals" (formula "9") (term "0,1,1"))
                                       (rule "polySimp_mulLiterals" (formula "9") (term "1,1,1"))
                                       (rule "polySimp_elimOne" (formula "9") (term "1,1,1"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                                       (rule "polySimp_mulLiterals" (formula "1") (term "1"))
                                       (rule "polySimp_elimOne" (formula "1") (term "1"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "0"))
                                       (rule "polySimp_mulComm0" (formula "9") (term "1,0"))
                                       (rule "polySimp_rightDist" (formula "9") (term "1,0"))
                                       (rule "polySimp_mulLiterals" (formula "9") (term "1,1,0"))
                                       (rule "mul_literals" (formula "9") (term "0,1,0"))
                                       (rule "polySimp_elimOne" (formula "9") (term "1,1,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                                       (rule "mul_literals" (formula "2") (term "1"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "4"))
                                       (rule "polySimp_mulComm0" (formula "4") (term "1"))
                                       (rule "polySimp_rightDist" (formula "4") (term "1"))
                                       (rule "mul_literals" (formula "4") (term "0,1"))
                                       (rule "polySimp_mulLiterals" (formula "4") (term "1,1"))
                                       (rule "polySimp_elimOne" (formula "4") (term "1,1"))
                                       (rule "inEqSimp_sepNegMonomial1" (formula "3"))
                                       (rule "polySimp_mulLiterals" (formula "3") (term "0"))
                                       (rule "polySimp_elimOne" (formula "3") (term "0"))
                                       (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "3"))
                                       (rule "mul_literals" (formula "2") (term "0,0"))
                                       (rule "polySimp_addAssoc" (formula "2") (term "0"))
                                       (rule "add_literals" (formula "2") (term "0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                                       (rule "mul_literals" (formula "2") (term "1"))
                                       (rule "Class_invariant_axiom_for_de_wiesler_Tree" (formula "17"))
                                        (builtin "One Step Simplification" (formula "17"))
                                       (rule "translateJavaSubInt" (formula "17") (term "3,0,1"))
                                       (rule "andLeft" (formula "17"))
                                       (rule "andLeft" (formula "17"))
                                       (rule "andLeft" (formula "17"))
                                       (rule "andLeft" (formula "18"))
                                       (rule "andLeft" (formula "17"))
                                       (rule "andLeft" (formula "17"))
                                       (rule "andLeft" (formula "17"))
                                       (rule "andLeft" (formula "19"))
                                       (rule "notLeft" (formula "17"))
                                       (rule "notLeft" (formula "17"))
                                       (rule "polySimp_elimSub" (formula "23") (term "3,0"))
                                       (rule "mul_literals" (formula "23") (term "1,3,0"))
                                       (rule "polySimp_addComm0" (formula "23") (term "3,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "22"))
                                       (rule "inEqSimp_commuteLeq" (formula "21"))
                                       (rule "inEqSimp_commuteLeq" (formula "20"))
                                       (rule "inEqSimp_commuteLeq" (formula "17"))
                                       (rule "applyEq" (formula "11") (term "0,0") (ifseqformula "19"))
                                       (rule "applyEq" (formula "5") (term "0") (ifseqformula "19"))
                                       (rule "applyEq" (formula "23") (term "1,3,0") (ifseqformula "19"))
                                       (rule "applyEq" (formula "22") (term "1") (ifseqformula "19"))
                                       (rule "applyEq" (formula "21") (term "1") (ifseqformula "19"))
                                       (rule "applyEq" (formula "20") (term "0") (ifseqformula "19"))
                                       (rule "inEqSimp_exactShadow3" (formula "7") (ifseqformula "18"))
                                       (rule "polySimp_mulComm0" (formula "7") (term "0,0"))
                                       (rule "polySimp_addComm0" (formula "7") (term "0"))
                                       (rule "inEqSimp_sepNegMonomial1" (formula "7"))
                                       (rule "polySimp_mulLiterals" (formula "7") (term "0"))
                                       (rule "polySimp_elimOne" (formula "7") (term "0"))
                                       (rule "inEqSimp_subsumption0" (formula "9") (term "1,0") (ifseqformula "7"))
                                       (rule "leq_literals" (formula "9") (term "0,1,0"))
                                        (builtin "One Step Simplification" (formula "9"))
                                       (rule "Free_class_invariant_axiom_for_de_wiesler_Tree" (formula "25"))
                                       (rule "true_left" (formula "25"))
                                       (rule "commute_or" (formula "11"))
                                       (rule "Definition_axiom_for_isSortedSliceTransitive_in_de_wiesler_Functions" (formula "24") (term "0") (inst "i=i") (inst "j=j"))
                                        (builtin "One Step Simplification" (formula "24"))
                                       (rule "inEqSimp_ltToLeq" (formula "24") (term "1,0,0"))
                                       (rule "polySimp_rightDist" (formula "24") (term "1,0,0,1,0,0"))
                                       (rule "mul_literals" (formula "24") (term "0,1,0,0,1,0,0"))
                                       (rule "polySimp_addAssoc" (formula "24") (term "0,0,1,0,0"))
                                       (rule "add_literals" (formula "24") (term "0,0,0,1,0,0"))
                                       (rule "inEqSimp_ltToLeq" (formula "24") (term "1,0,0,1,0"))
                                       (rule "polySimp_rightDist" (formula "24") (term "1,0,0,1,0,0,1,0"))
                                       (rule "mul_literals" (formula "24") (term "0,1,0,0,1,0,0,1,0"))
                                       (rule "polySimp_addAssoc" (formula "24") (term "0,0,1,0,0,1,0"))
                                       (rule "add_literals" (formula "24") (term "0,0,0,1,0,0,1,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "24") (term "0,0,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "24") (term "1,0,1,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "24") (term "0,0,0,1,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "24") (term "1,1,0,0"))
                                       (rule "polySimp_rightDist" (formula "24") (term "1,1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "24") (term "1,1,1,0,0"))
                                       (rule "mul_literals" (formula "24") (term "0,1,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "24") (term "1,1,1,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "1,0,0,1,0"))
                                       (rule "polySimp_mulComm0" (formula "24") (term "1,1,0,0,1,0"))
                                       (rule "polySimp_rightDist" (formula "24") (term "1,1,0,0,1,0"))
                                       (rule "mul_literals" (formula "24") (term "0,1,1,0,0,1,0"))
                                       (rule "polySimp_mulLiterals" (formula "24") (term "1,1,1,0,0,1,0"))
                                       (rule "polySimp_elimOne" (formula "24") (term "1,1,1,0,0,1,0"))
                                       (rule "nnf_imp2or" (formula "24") (term "0"))
                                       (rule "nnf_notAnd" (formula "24") (term "0,0"))
                                       (rule "inEqSimp_notLeq" (formula "24") (term "1,0,0"))
                                       (rule "polySimp_rightDist" (formula "24") (term "1,0,0,1,0,0"))
                                       (rule "mul_literals" (formula "24") (term "0,1,0,0,1,0,0"))
                                       (rule "polySimp_addAssoc" (formula "24") (term "0,0,1,0,0"))
                                       (rule "add_literals" (formula "24") (term "0,0,0,1,0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "24") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "24") (term "1,1,0,0"))
                                       (rule "polySimp_rightDist" (formula "24") (term "1,1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "24") (term "1,1,1,0,0"))
                                       (rule "mul_literals" (formula "24") (term "0,1,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "24") (term "1,1,1,0,0"))
                                       (rule "inEqSimp_notGeq" (formula "24") (term "0,0,0"))
                                       (rule "times_zero_1" (formula "24") (term "1,0,0,0,0,0"))
                                       (rule "add_zero_right" (formula "24") (term "0,0,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "0,0,0"))
                                       (rule "mul_literals" (formula "24") (term "1,0,0,0"))
                                       (rule "nnf_imp2or" (formula "24") (term "0,1,0"))
                                       (rule "nnf_notAnd" (formula "24") (term "0,0,1,0"))
                                       (rule "inEqSimp_notLeq" (formula "24") (term "1,0,0,1,0"))
                                       (rule "polySimp_rightDist" (formula "24") (term "1,0,0,1,0,0,1,0"))
                                       (rule "mul_literals" (formula "24") (term "0,1,0,0,1,0,0,1,0"))
                                       (rule "polySimp_addAssoc" (formula "24") (term "0,0,1,0,0,1,0"))
                                       (rule "add_literals" (formula "24") (term "0,0,0,1,0,0,1,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "24") (term "1,0,0,1,0"))
                                       (rule "polySimp_mulComm0" (formula "24") (term "1,1,0,0,1,0"))
                                       (rule "polySimp_rightDist" (formula "24") (term "1,1,0,0,1,0"))
                                       (rule "mul_literals" (formula "24") (term "0,1,1,0,0,1,0"))
                                       (rule "polySimp_mulLiterals" (formula "24") (term "1,1,1,0,0,1,0"))
                                       (rule "polySimp_elimOne" (formula "24") (term "1,1,1,0,0,1,0"))
                                       (rule "inEqSimp_notGeq" (formula "24") (term "0,0,0,1,0"))
                                       (rule "polySimp_mulComm0" (formula "24") (term "1,0,0,0,0,0,1,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "0,0,0,1,0"))
                                       (rule "polySimp_mulComm0" (formula "24") (term "1,0,0,0,1,0"))
                                       (rule "polySimp_rightDist" (formula "24") (term "1,0,0,0,1,0"))
                                       (rule "polySimp_mulLiterals" (formula "24") (term "1,1,0,0,0,1,0"))
                                       (rule "mul_literals" (formula "24") (term "0,1,0,0,0,1,0"))
                                       (rule "polySimp_elimOne" (formula "24") (term "1,1,0,0,0,1,0"))
                                       (rule "jdiv_axiom" (formula "28") (term "1"))
                                       (rule "eqSymm" (formula "1"))
                                       (rule "inEqSimp_subsumption1" (formula "1") (term "0,0") (ifseqformula "4"))
                                       (rule "leq_literals" (formula "1") (term "0,0,0"))
                                        (builtin "One Step Simplification" (formula "1"))
                                       (rule "eqSymm" (formula "1"))
                                       (rule "applyEqRigid" (formula "2") (term "0,1,0,2,0") (ifseqformula "1"))
                                       (rule "applyEq" (formula "29") (term "1") (ifseqformula "1"))
                                       (rule "commute_or" (formula "25") (term "0,0,1,0"))
                                       (rule "cut_direct" (formula "13") (term "1"))
                                       (branch "CUT: self.sorted_splitters[b_0] >= value TRUE"
                                           (builtin "One Step Simplification" (formula "14"))
                                          (rule "true_left" (formula "14"))
                                          (rule "all_pull_out3" (formula "25") (term "0"))
                                          (rule "shift_paren_or" (formula "25") (term "0,0"))
                                          (rule "shift_paren_or" (formula "25") (term "0,0,0"))
                                          (rule "div_axiom" (formula "1") (term "1") (inst "quotient=quotient_0"))
                                          (rule "mul_literals" (formula "1") (term "1,1,1,1,1"))
                                          (rule "equal_literals" (formula "1") (term "0"))
                                           (builtin "One Step Simplification" (formula "1"))
                                          (rule "qeq_literals" (formula "1") (term "0,1"))
                                           (builtin "One Step Simplification" (formula "1"))
                                          (rule "andLeft" (formula "1"))
                                          (rule "andLeft" (formula "1"))
                                          (rule "polySimp_addComm1" (formula "3") (term "1"))
                                          (rule "add_literals" (formula "3") (term "0,1"))
                                          (rule "inEqSimp_commuteLeq" (formula "2"))
                                          (rule "inEqSimp_homoInEq1" (formula "3"))
                                          (rule "polySimp_mulLiterals" (formula "3") (term "1,0"))
                                          (rule "polySimp_addComm1" (formula "3") (term "0"))
                                          (rule "applyEqRigid" (formula "5") (term "0,1,0,2,0") (ifseqformula "1"))
                                          (rule "polySimp_addComm0" (formula "5") (term "0,2,0"))
                                          (rule "applyEqRigid" (formula "32") (term "1") (ifseqformula "1"))
                                          (rule "applyEqRigid" (formula "4") (term "1") (ifseqformula "1"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "3"))
                                          (rule "polySimp_mulComm0" (formula "3") (term "1"))
                                          (rule "polySimp_rightDist" (formula "3") (term "1"))
                                          (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
                                          (rule "mul_literals" (formula "3") (term "0,1"))
                                          (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "8"))
                                          (rule "polySimp_mulAssoc" (formula "2") (term "0,0"))
                                          (rule "polySimp_mulComm0" (formula "2") (term "0,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "2") (term "0,0"))
                                          (rule "polySimp_addAssoc" (formula "2") (term "0"))
                                          (rule "polySimp_addComm0" (formula "2") (term "0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                                          (rule "polySimp_mulComm0" (formula "2") (term "1"))
                                          (rule "polySimp_rightDist" (formula "2") (term "1"))
                                          (rule "mul_literals" (formula "2") (term "0,1"))
                                          (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
                                          (rule "inEqSimp_exactShadow3" (formula "8") (ifseqformula "4"))
                                          (rule "mul_literals" (formula "8") (term "0,0"))
                                          (rule "polySimp_addAssoc" (formula "8") (term "0"))
                                          (rule "add_literals" (formula "8") (term "0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "8"))
                                          (rule "mul_literals" (formula "8") (term "1"))
                                          (rule "elimGcdGeq_antec" (formula "8") (inst "elimGcdRightDiv=Z(1(#))") (inst "elimGcdLeftDiv=quotient_0") (inst "elimGcd=Z(2(#))"))
                                          (rule "polySimp_mulLiterals" (formula "8") (term "1,0,0,0,0,1,0"))
                                          (rule "polySimp_mulLiterals" (formula "8") (term "1,0,1,0"))
                                          (rule "leq_literals" (formula "8") (term "0,0"))
                                           (builtin "One Step Simplification" (formula "8"))
                                          (rule "mul_literals" (formula "8") (term "1,0,0,0,0,0"))
                                          (rule "polySimp_addLiterals" (formula "8") (term "0,0,0,0"))
                                          (rule "add_literals" (formula "8") (term "0,0,0,0"))
                                          (rule "polySimp_pullOutFactor0b" (formula "8") (term "0,0"))
                                          (rule "add_literals" (formula "8") (term "1,1,0,0"))
                                          (rule "times_zero_1" (formula "8") (term "1,0,0"))
                                          (rule "add_zero_right" (formula "8") (term "0,0"))
                                          (rule "leq_literals" (formula "8") (term "0"))
                                           (builtin "One Step Simplification" (formula "8"))
                                          (rule "arrayLengthIsAShort" (formula "29") (term "0"))
                                           (builtin "One Step Simplification" (formula "29"))
                                          (rule "true_left" (formula "29"))
                                          (rule "arrayLengthNotNegative" (formula "29") (term "0"))
                                          (rule "arrayLengthIsAShort" (formula "28") (term "0"))
                                           (builtin "One Step Simplification" (formula "28"))
                                          (rule "true_left" (formula "28"))
                                          (rule "arrayLengthNotNegative" (formula "28") (term "0"))
                                          (rule "cut_direct" (formula "15") (term "0"))
                                          (branch "CUT: exp_0 >= 1 TRUE"
                                              (builtin "One Step Simplification" (formula "16"))
                                             (rule "inEqSimp_subsumption1" (formula "12") (ifseqformula "15"))
                                             (rule "leq_literals" (formula "12") (term "0"))
                                              (builtin "One Step Simplification" (formula "12"))
                                             (rule "true_left" (formula "12"))
                                             (rule "newSym_eq" (formula "15") (inst "l=l_0") (inst "newSymDef=mul(d_0, Z(0(#)))"))
                                             (rule "times_zero_1" (formula "15") (term "1,1"))
                                             (rule "add_zero_right" (formula "15") (term "1"))
                                             (rule "applyEqRigid" (formula "16") (term "0,0") (ifseqformula "15"))
                                             (rule "eqSymm" (formula "16"))
                                             (rule "applyEq" (formula "37") (term "0") (ifseqformula "15"))
                                             (rule "eqSymm" (formula "37"))
                                             (rule "applyEq" (formula "5") (term "0,0") (ifseqformula "16"))
                                             (rule "applyEq" (formula "18") (term "0,0") (ifseqformula "16"))
                                             (rule "polySimp_homoEq" (formula "18") (term "0"))
                                             (rule "polySimp_mulLiterals" (formula "18") (term "1,0,0"))
                                             (rule "polySimp_addComm1" (formula "18") (term "0,0"))
                                             (rule "applyEq" (formula "4") (term "0") (ifseqformula "16"))
                                             (rule "inEqSimp_homoInEq0" (formula "4"))
                                             (rule "polySimp_mulLiterals" (formula "4") (term "1,0"))
                                             (rule "polySimp_addComm1" (formula "4") (term "0"))
                                             (rule "applyEq" (formula "9") (term "0") (ifseqformula "16"))
                                             (rule "applyEqRigid" (formula "18") (term "0,1,0,2,0,1") (ifseqformula "16"))
                                             (rule "polySimp_mulLiterals" (formula "18") (term "1,0,2,0,1"))
                                             (rule "polySimp_addComm0" (formula "18") (term "0,2,0,1"))
                                             (rule "applyEq" (formula "3") (term "0") (ifseqformula "16"))
                                             (rule "inEqSimp_commuteGeq" (formula "3"))
                                             (rule "applyEqRigid" (formula "1") (term "0,0") (ifseqformula "16"))
                                             (rule "applyEqRigid" (formula "10") (term "0") (ifseqformula "16"))
                                             (rule "inEqSimp_homoInEq0" (formula "10"))
                                             (rule "polySimp_mulLiterals" (formula "10") (term "1,0"))
                                             (rule "polySimp_addComm1" (formula "10") (term "0"))
                                             (rule "applyEqRigid" (formula "17") (term "1") (ifseqformula "16"))
                                             (rule "polySimp_sepPosMonomial" (formula "18") (term "0"))
                                             (rule "polySimp_mulComm0" (formula "18") (term "1,0"))
                                             (rule "polySimp_rightDist" (formula "18") (term "1,0"))
                                             (rule "mul_literals" (formula "18") (term "0,1,0"))
                                             (rule "polySimp_mulLiterals" (formula "18") (term "1,1,0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "4"))
                                             (rule "polySimp_mulComm0" (formula "4") (term "1"))
                                             (rule "polySimp_rightDist" (formula "4") (term "1"))
                                             (rule "polySimp_mulLiterals" (formula "4") (term "1,1"))
                                             (rule "mul_literals" (formula "4") (term "0,1"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "10"))
                                             (rule "polySimp_mulComm0" (formula "10") (term "1"))
                                             (rule "polySimp_rightDist" (formula "10") (term "1"))
                                             (rule "polySimp_mulLiterals" (formula "10") (term "1,1"))
                                             (rule "mul_literals" (formula "10") (term "0,1"))
                                             (rule "elimGcdGeq_antec" (formula "4") (inst "elimGcdRightDiv=add(Z(0(#)), l_0)") (inst "elimGcdLeftDiv=quotient_0") (inst "elimGcd=Z(2(#))"))
                                             (rule "add_zero_left" (formula "4") (term "1,1"))
                                             (rule "polySimp_mulLiterals" (formula "4") (term "1,0,1,0"))
                                             (rule "add_zero_left" (formula "4") (term "1,1,0,0,0,0,1,0"))
                                             (rule "mul_literals" (formula "4") (term "0,1,0,0,0,0,1,0"))
                                             (rule "leq_literals" (formula "4") (term "0,0"))
                                              (builtin "One Step Simplification" (formula "4"))
                                             (rule "polySimp_pullOutFactor0b" (formula "4") (term "0,0"))
                                             (rule "add_literals" (formula "4") (term "1,1,0,0"))
                                             (rule "times_zero_1" (formula "4") (term "1,0,0"))
                                             (rule "add_zero_right" (formula "4") (term "0,0"))
                                             (rule "polySimp_mulComm0" (formula "4") (term "1,0,0,0"))
                                             (rule "polySimp_addAssoc" (formula "4") (term "0,0"))
                                             (rule "polySimp_addComm1" (formula "4") (term "0,0,0"))
                                             (rule "add_literals" (formula "4") (term "0,0,0,0"))
                                             (rule "polySimp_pullOutFactor0b" (formula "4") (term "0,0"))
                                             (rule "add_literals" (formula "4") (term "1,1,0,0"))
                                             (rule "times_zero_1" (formula "4") (term "1,0,0"))
                                             (rule "add_zero_right" (formula "4") (term "0,0"))
                                             (rule "leq_literals" (formula "4") (term "0"))
                                              (builtin "One Step Simplification" (formula "4"))
                                             (rule "inEqSimp_strengthen1" (formula "4") (ifseqformula "37"))
                                             (rule "inEqSimp_contradEq7" (formula "37") (ifseqformula "4"))
                                             (rule "polySimp_mulComm0" (formula "37") (term "1,0,0"))
                                             (rule "polySimp_pullOutFactor1b" (formula "37") (term "0,0"))
                                             (rule "add_literals" (formula "37") (term "1,1,0,0"))
                                             (rule "times_zero_1" (formula "37") (term "1,0,0"))
                                             (rule "add_literals" (formula "37") (term "0,0"))
                                             (rule "leq_literals" (formula "37") (term "0"))
                                              (builtin "One Step Simplification" (formula "37"))
                                             (rule "false_right" (formula "37"))
                                             (rule "inEqSimp_contradInEq5" (formula "3") (ifseqformula "4"))
                                             (rule "greater_literals" (formula "3") (term "0,0"))
                                              (builtin "One Step Simplification" (formula "3"))
                                             (rule "andLeft" (formula "3"))
                                             (rule "polySimp_rightDist" (formula "3") (term "1"))
                                             (rule "mul_literals" (formula "3") (term "0,1"))
                                             (rule "inEqSimp_homoInEq1" (formula "3"))
                                             (rule "polySimp_mulLiterals" (formula "3") (term "1,0"))
                                             (rule "polySimp_pullOutFactor0b" (formula "3") (term "0"))
                                             (rule "add_literals" (formula "3") (term "1,1,0"))
                                             (rule "times_zero_1" (formula "3") (term "1,0"))
                                             (rule "add_zero_right" (formula "3") (term "0"))
                                             (rule "leq_literals" (formula "3"))
                                             (rule "closeFalse" (formula "3"))
                                          )
                                          (branch "CUT: exp_0 >= 1 FALSE"
                                              (builtin "One Step Simplification" (formula "15"))
                                             (rule "true_left" (formula "15"))
                                             (rule "inEqSimp_geqRight" (formula "32"))
                                             (rule "mul_literals" (formula "1") (term "1,0,0"))
                                             (rule "add_literals" (formula "1") (term "0,0"))
                                             (rule "add_zero_left" (formula "1") (term "0"))
                                             (rule "inEqSimp_subsumption0" (formula "14") (ifseqformula "1"))
                                             (rule "leq_literals" (formula "14") (term "0"))
                                              (builtin "One Step Simplification" (formula "14"))
                                             (rule "true_left" (formula "14"))
                                             (rule "inEqSimp_antiSymm" (formula "13") (ifseqformula "1"))
                                             (rule "applyEq" (formula "14") (term "0") (ifseqformula "13"))
                                             (rule "qeq_literals" (formula "14"))
                                             (rule "true_left" (formula "14"))
                                             (rule "applyEq" (formula "35") (term "1,1,0") (ifseqformula "13"))
                                             (rule "add_zero_right" (formula "35") (term "1,0"))
                                             (rule "translateJavaShiftLeftIntConstant" (formula "35") (term "0"))
                                             (rule "applyEq" (formula "1") (term "0") (ifseqformula "13"))
                                             (rule "leq_literals" (formula "1"))
                                             (rule "true_left" (formula "1"))
                                             (rule "applyEq" (formula "13") (term "1") (ifseqformula "12"))
                                             (rule "applyEq" (formula "14") (term "1,0") (ifseqformula "12"))
                                             (rule "translateJavaShiftLeftIntZero" (formula "14") (term "0"))
                                             (rule "eqSymm" (formula "14"))
                                             (rule "applyEqRigid" (formula "9") (term "0") (ifseqformula "14"))
                                             (rule "qeq_literals" (formula "9"))
                                             (rule "closeFalse" (formula "9"))
                                          )
                                       )
                                       (branch "CUT: self.sorted_splitters[b_0] >= value FALSE"
                                           (builtin "One Step Simplification" (formula "13"))
                                          (rule "inEqSimp_geqRight" (formula "26"))
                                          (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                          (rule "applyEq" (formula "25") (term "1") (ifseqformula "14"))
                                          (rule "applyEq" (formula "26") (term "1,1,0,0,0,1,0") (ifseqformula "14"))
                                          (rule "polySimp_addAssoc" (formula "26") (term "1,0,0,0,1,0"))
                                          (rule "add_literals" (formula "26") (term "0,1,0,0,0,1,0"))
                                          (rule "add_zero_left" (formula "26") (term "1,0,0,0,1,0"))
                                          (rule "applyEq" (formula "7") (term "0") (ifseqformula "14"))
                                          (rule "inEqSimp_homoInEq1" (formula "7"))
                                          (rule "polySimp_pullOutFactor1" (formula "7") (term "0"))
                                          (rule "add_literals" (formula "7") (term "1,0"))
                                          (rule "times_zero_1" (formula "7") (term "0"))
                                          (rule "leq_literals" (formula "7"))
                                          (rule "true_left" (formula "7"))
                                          (rule "applyEq" (formula "23") (term "1") (ifseqformula "13"))
                                          (rule "applyEq" (formula "25") (term "1,1,1,0,0") (ifseqformula "13"))
                                          (rule "polySimp_addAssoc" (formula "25") (term "1,1,0,0"))
                                          (rule "add_literals" (formula "25") (term "0,1,1,0,0"))
                                          (rule "add_zero_left" (formula "25") (term "1,1,0,0"))
                                          (rule "applyEq" (formula "22") (term "0") (ifseqformula "13"))
                                          (rule "inEqSimp_homoInEq1" (formula "22"))
                                          (rule "polySimp_mulComm0" (formula "22") (term "1,0"))
                                          (rule "polySimp_rightDist" (formula "22") (term "1,0"))
                                          (rule "mul_literals" (formula "22") (term "0,1,0"))
                                          (rule "polySimp_addAssoc" (formula "22") (term "0"))
                                          (rule "add_literals" (formula "22") (term "0,0"))
                                          (rule "applyEq" (formula "21") (term "1") (ifseqformula "13"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                          (rule "polySimp_mulComm0" (formula "1") (term "1"))
                                          (rule "polySimp_rightDist" (formula "1") (term "1"))
                                          (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                                          (rule "mul_literals" (formula "1") (term "0,1"))
                                          (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                                          (rule "inEqSimp_sepNegMonomial0" (formula "22"))
                                          (rule "polySimp_mulLiterals" (formula "22") (term "0"))
                                          (rule "polySimp_elimOne" (formula "22") (term "0"))
                                          (rule "div_axiom" (formula "2") (term "1") (inst "quotient=quotient_0"))
                                          (rule "mul_literals" (formula "2") (term "1,1,1,1,1"))
                                          (rule "qeq_literals" (formula "2") (term "0,1,1"))
                                           (builtin "One Step Simplification" (formula "2"))
                                          (rule "equal_literals" (formula "2") (term "0"))
                                           (builtin "One Step Simplification" (formula "2"))
                                          (rule "andLeft" (formula "2"))
                                          (rule "andLeft" (formula "2"))
                                          (rule "polySimp_addComm1" (formula "4") (term "1"))
                                          (rule "add_literals" (formula "4") (term "0,1"))
                                          (rule "inEqSimp_commuteLeq" (formula "3"))
                                          (rule "inEqSimp_homoInEq1" (formula "4"))
                                          (rule "polySimp_mulLiterals" (formula "4") (term "1,0"))
                                          (rule "polySimp_addComm1" (formula "4") (term "0"))
                                          (rule "applyEqRigid" (formula "6") (term "0,1,0,2,0") (ifseqformula "2"))
                                          (rule "polySimp_addComm0" (formula "6") (term "0,2,0"))
                                          (rule "applyEqRigid" (formula "31") (term "1") (ifseqformula "2"))
                                          (rule "applyEq" (formula "5") (term "1") (ifseqformula "2"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "4"))
                                          (rule "polySimp_mulComm0" (formula "4") (term "1"))
                                          (rule "polySimp_rightDist" (formula "4") (term "1"))
                                          (rule "mul_literals" (formula "4") (term "0,1"))
                                          (rule "polySimp_mulLiterals" (formula "4") (term "1,1"))
                                          (rule "inEqSimp_exactShadow3" (formula "8") (ifseqformula "4"))
                                          (rule "mul_literals" (formula "8") (term "0,0"))
                                          (rule "polySimp_addAssoc" (formula "8") (term "0"))
                                          (rule "add_literals" (formula "8") (term "0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "8"))
                                          (rule "mul_literals" (formula "8") (term "1"))
                                          (rule "elimGcdGeq_antec" (formula "8") (inst "elimGcdRightDiv=Z(1(#))") (inst "elimGcdLeftDiv=quotient_0") (inst "elimGcd=Z(2(#))"))
                                          (rule "polySimp_mulLiterals" (formula "8") (term "1,0,1,0"))
                                          (rule "polySimp_mulLiterals" (formula "8") (term "1,0,0,0,0,1,0"))
                                          (rule "leq_literals" (formula "8") (term "0,0"))
                                           (builtin "One Step Simplification" (formula "8"))
                                          (rule "mul_literals" (formula "8") (term "1,0,0,0,0,0"))
                                          (rule "polySimp_addLiterals" (formula "8") (term "0,0,0,0"))
                                          (rule "add_literals" (formula "8") (term "0,0,0,0"))
                                          (rule "polySimp_pullOutFactor0b" (formula "8") (term "0,0"))
                                          (rule "add_literals" (formula "8") (term "1,1,0,0"))
                                          (rule "times_zero_1" (formula "8") (term "1,0,0"))
                                          (rule "add_literals" (formula "8") (term "0,0"))
                                          (rule "leq_literals" (formula "8") (term "0"))
                                           (builtin "One Step Simplification" (formula "8"))
                                          (rule "inEqSimp_exactShadow3" (formula "3") (ifseqformula "10"))
                                          (rule "polySimp_mulAssoc" (formula "3") (term "0,0"))
                                          (rule "polySimp_mulComm0" (formula "3") (term "0,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "3") (term "0,0"))
                                          (rule "polySimp_addAssoc" (formula "3") (term "0"))
                                          (rule "polySimp_addComm0" (formula "3") (term "0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "3"))
                                          (rule "polySimp_mulComm0" (formula "3") (term "1"))
                                          (rule "polySimp_rightDist" (formula "3") (term "1"))
                                          (rule "mul_literals" (formula "3") (term "0,1"))
                                          (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
                                          (rule "all_pull_out3" (formula "29") (term "0"))
                                          (rule "shift_paren_or" (formula "29") (term "0,0"))
                                          (rule "shift_paren_or" (formula "29") (term "0,0,0"))
                                          (rule "arrayLengthNotNegative" (formula "28") (term "0"))
                                          (rule "arrayLengthIsAShort" (formula "29") (term "0"))
                                           (builtin "One Step Simplification" (formula "29"))
                                          (rule "true_left" (formula "29"))
                                          (rule "arrayLengthNotNegative" (formula "27") (term "0"))
                                          (rule "arrayLengthIsAShort" (formula "28") (term "0"))
                                           (builtin "One Step Simplification" (formula "28"))
                                          (rule "true_left" (formula "28"))
                                          (rule "cut_direct" (formula "15") (term "0"))
                                          (branch "CUT: exp_0 >= 1 TRUE"
                                              (builtin "One Step Simplification" (formula "16"))
                                             (rule "inEqSimp_subsumption1" (formula "12") (ifseqformula "15"))
                                             (rule "leq_literals" (formula "12") (term "0"))
                                              (builtin "One Step Simplification" (formula "12"))
                                             (rule "true_left" (formula "12"))
                                             (rule "newSym_eq" (formula "15") (inst "l=l_0") (inst "newSymDef=mul(d_0, Z(0(#)))"))
                                             (rule "times_zero_1" (formula "15") (term "1,1"))
                                             (rule "add_zero_right" (formula "15") (term "1"))
                                             (rule "applyEqRigid" (formula "16") (term "0,0") (ifseqformula "15"))
                                             (rule "eqSymm" (formula "16"))
                                             (rule "applyEqRigid" (formula "36") (term "0") (ifseqformula "15"))
                                             (rule "eqSymm" (formula "36"))
                                             (rule "applyEq" (formula "11") (term "0") (ifseqformula "16"))
                                             (rule "inEqSimp_homoInEq0" (formula "11"))
                                             (rule "polySimp_mulLiterals" (formula "11") (term "1,0"))
                                             (rule "polySimp_addComm1" (formula "11") (term "0"))
                                             (rule "applyEq" (formula "4") (term "0") (ifseqformula "16"))
                                             (rule "inEqSimp_commuteGeq" (formula "4"))
                                             (rule "applyEqRigid" (formula "2") (term "0,0") (ifseqformula "16"))
                                             (rule "applyEqRigid" (formula "6") (term "0,0") (ifseqformula "16"))
                                             (rule "applyEq" (formula "18") (term "0,1,0,2,0,1") (ifseqformula "16"))
                                             (rule "polySimp_mulLiterals" (formula "18") (term "1,0,2,0,1"))
                                             (rule "polySimp_addComm0" (formula "18") (term "0,2,0,1"))
                                             (rule "applyEqRigid" (formula "18") (term "0,0") (ifseqformula "16"))
                                             (rule "polySimp_homoEq" (formula "18") (term "0"))
                                             (rule "polySimp_mulLiterals" (formula "18") (term "1,0,0"))
                                             (rule "polySimp_addComm1" (formula "18") (term "0,0"))
                                             (rule "applyEqRigid" (formula "5") (term "0") (ifseqformula "16"))
                                             (rule "inEqSimp_homoInEq0" (formula "5"))
                                             (rule "polySimp_mulLiterals" (formula "5") (term "1,0"))
                                             (rule "polySimp_addComm1" (formula "5") (term "0"))
                                             (rule "applyEq" (formula "10") (term "0") (ifseqformula "16"))
                                             (rule "applyEq" (formula "17") (term "1") (ifseqformula "16"))
                                             (rule "polySimp_sepPosMonomial" (formula "18") (term "0"))
                                             (rule "polySimp_mulComm0" (formula "18") (term "1,0"))
                                             (rule "polySimp_rightDist" (formula "18") (term "1,0"))
                                             (rule "polySimp_mulLiterals" (formula "18") (term "1,1,0"))
                                             (rule "mul_literals" (formula "18") (term "0,1,0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "11"))
                                             (rule "polySimp_mulComm0" (formula "11") (term "1"))
                                             (rule "polySimp_rightDist" (formula "11") (term "1"))
                                             (rule "mul_literals" (formula "11") (term "0,1"))
                                             (rule "polySimp_mulLiterals" (formula "11") (term "1,1"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "5"))
                                             (rule "polySimp_mulComm0" (formula "5") (term "1"))
                                             (rule "polySimp_rightDist" (formula "5") (term "1"))
                                             (rule "mul_literals" (formula "5") (term "0,1"))
                                             (rule "polySimp_mulLiterals" (formula "5") (term "1,1"))
                                             (rule "elimGcdGeq_antec" (formula "5") (inst "elimGcdRightDiv=add(Z(0(#)), l_0)") (inst "elimGcdLeftDiv=quotient_0") (inst "elimGcd=Z(2(#))"))
                                             (rule "add_zero_left" (formula "5") (term "1,1,0,0,0,0,1,0"))
                                             (rule "add_zero_left" (formula "5") (term "1,1"))
                                             (rule "polySimp_mulLiterals" (formula "5") (term "1,0,1,0"))
                                             (rule "mul_literals" (formula "5") (term "0,1,0,0,0,0,1,0"))
                                             (rule "leq_literals" (formula "5") (term "0,0"))
                                              (builtin "One Step Simplification" (formula "5"))
                                             (rule "polySimp_pullOutFactor0b" (formula "5") (term "0,0"))
                                             (rule "add_literals" (formula "5") (term "1,1,0,0"))
                                             (rule "times_zero_1" (formula "5") (term "1,0,0"))
                                             (rule "add_zero_right" (formula "5") (term "0,0"))
                                             (rule "polySimp_mulComm0" (formula "5") (term "1,0,0,0"))
                                             (rule "polySimp_addAssoc" (formula "5") (term "0,0"))
                                             (rule "polySimp_addComm1" (formula "5") (term "0,0,0"))
                                             (rule "add_literals" (formula "5") (term "0,0,0,0"))
                                             (rule "polySimp_pullOutFactor0b" (formula "5") (term "0,0"))
                                             (rule "add_literals" (formula "5") (term "1,1,0,0"))
                                             (rule "times_zero_1" (formula "5") (term "1,0,0"))
                                             (rule "add_zero_right" (formula "5") (term "0,0"))
                                             (rule "leq_literals" (formula "5") (term "0"))
                                              (builtin "One Step Simplification" (formula "5"))
                                             (rule "inEqSimp_strengthen1" (formula "5") (ifseqformula "36"))
                                             (rule "inEqSimp_contradEq7" (formula "36") (ifseqformula "5"))
                                             (rule "polySimp_mulComm0" (formula "36") (term "1,0,0"))
                                             (rule "polySimp_pullOutFactor1b" (formula "36") (term "0,0"))
                                             (rule "add_literals" (formula "36") (term "1,1,0,0"))
                                             (rule "times_zero_1" (formula "36") (term "1,0,0"))
                                             (rule "add_literals" (formula "36") (term "0,0"))
                                             (rule "leq_literals" (formula "36") (term "0"))
                                              (builtin "One Step Simplification" (formula "36"))
                                             (rule "false_right" (formula "36"))
                                             (rule "inEqSimp_contradInEq5" (formula "4") (ifseqformula "5"))
                                             (rule "greater_literals" (formula "4") (term "0,0"))
                                              (builtin "One Step Simplification" (formula "4"))
                                             (rule "andLeft" (formula "4"))
                                             (rule "polySimp_rightDist" (formula "4") (term "1"))
                                             (rule "mul_literals" (formula "4") (term "0,1"))
                                             (rule "inEqSimp_homoInEq1" (formula "4"))
                                             (rule "polySimp_mulLiterals" (formula "4") (term "1,0"))
                                             (rule "polySimp_pullOutFactor0b" (formula "4") (term "0"))
                                             (rule "add_literals" (formula "4") (term "1,1,0"))
                                             (rule "times_zero_1" (formula "4") (term "1,0"))
                                             (rule "add_zero_right" (formula "4") (term "0"))
                                             (rule "leq_literals" (formula "4"))
                                             (rule "closeFalse" (formula "4"))
                                          )
                                          (branch "CUT: exp_0 >= 1 FALSE"
                                              (builtin "One Step Simplification" (formula "15"))
                                             (rule "true_left" (formula "15"))
                                             (rule "inEqSimp_geqRight" (formula "31"))
                                             (rule "mul_literals" (formula "1") (term "1,0,0"))
                                             (rule "add_literals" (formula "1") (term "0,0"))
                                             (rule "add_zero_left" (formula "1") (term "0"))
                                             (rule "inEqSimp_subsumption0" (formula "14") (ifseqformula "1"))
                                             (rule "leq_literals" (formula "14") (term "0"))
                                              (builtin "One Step Simplification" (formula "14"))
                                             (rule "true_left" (formula "14"))
                                             (rule "inEqSimp_antiSymm" (formula "13") (ifseqformula "1"))
                                             (rule "applyEq" (formula "1") (term "0") (ifseqformula "13"))
                                             (rule "leq_literals" (formula "1"))
                                             (rule "true_left" (formula "1"))
                                             (rule "applyEqRigid" (formula "14") (term "1") (ifseqformula "12"))
                                             (rule "applyEq" (formula "34") (term "1,1,0") (ifseqformula "12"))
                                             (rule "add_zero_right" (formula "34") (term "1,0"))
                                             (rule "translateJavaShiftLeftIntConstant" (formula "34") (term "0"))
                                             (rule "applyEq" (formula "13") (term "0") (ifseqformula "12"))
                                             (rule "qeq_literals" (formula "13"))
                                             (rule "true_left" (formula "13"))
                                             (rule "applyEq" (formula "14") (term "1,0") (ifseqformula "12"))
                                             (rule "translateJavaShiftLeftIntZero" (formula "14") (term "0"))
                                             (rule "eqSymm" (formula "14"))
                                             (rule "applyEqRigid" (formula "10") (term "0") (ifseqformula "14"))
                                             (rule "qeq_literals" (formula "10"))
                                             (rule "closeFalse" (formula "10"))
                                          )
                                       )
                                    )
                                 )
                                 (branch "Case 2"
                                    (rule "orRight" (formula "18"))
                                    (rule "eqTermCut" (formula "18") (term "0") (inst "s=add(b_0, mul(d_0, Z(neglit(1(#)))))") (userinteraction))
                                    (branch "Assume b_0 + jdiv(d_0, 2) * -1 + jdiv(d_0, 2) * -1 = b_0 + d_0 * -1"
                                       (rule "polySimp_homoEq" (formula "9") (term "0"))
                                       (rule "polySimp_pullOutFactor0b" (formula "20") (term "0,2,0"))
                                       (rule "add_literals" (formula "20") (term "1,1,0,2,0"))
                                       (rule "polySimp_homoEq" (formula "19"))
                                       (rule "polySimp_homoEq" (formula "1"))
                                       (rule "polySimp_homoEq" (formula "8") (term "1"))
                                       (rule "polySimp_pullOutFactor3b" (formula "19") (term "0,1,0"))
                                       (rule "polySimp_mulLiterals" (formula "19") (term "1,0,1,0"))
                                       (rule "polySimp_pullOutFactor3b" (formula "1") (term "0,1,0"))
                                       (rule "polySimp_mulLiterals" (formula "1") (term "1,0,1,0"))
                                       (rule "polySimp_mulComm0" (formula "9") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "8") (term "1,0,1"))
                                       (rule "polySimp_mulComm0" (formula "19") (term "1,0"))
                                       (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
                                       (rule "polySimp_rightDist" (formula "9") (term "1,0,0"))
                                       (rule "mul_literals" (formula "9") (term "0,1,0,0"))
                                       (rule "polySimp_rightDist" (formula "8") (term "1,0,1"))
                                       (rule "polySimp_mulLiterals" (formula "8") (term "1,1,0,1"))
                                       (rule "polySimp_elimOne" (formula "8") (term "1,1,0,1"))
                                       (rule "polySimp_mulComm0" (formula "8") (term "0,1,0,1"))
                                       (rule "polySimp_rightDist" (formula "19") (term "1,0"))
                                       (rule "polySimp_mulLiterals" (formula "19") (term "1,1,0"))
                                       (rule "polySimp_mulComm0" (formula "19") (term "0,1,0"))
                                       (rule "polySimp_rightDist" (formula "1") (term "1,0"))
                                       (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0"))
                                       (rule "polySimp_mulComm0" (formula "1") (term "0,1,0"))
                                       (rule "polySimp_addAssoc" (formula "9") (term "0,0"))
                                       (rule "polySimp_addComm0" (formula "9") (term "0,0,0"))
                                       (rule "polySimp_addAssoc" (formula "8") (term "0,1"))
                                       (rule "inEqSimp_ltRight" (formula "17"))
                                       (rule "polySimp_mulComm0" (formula "1") (term "0,0"))
                                       (rule "polySimp_addAssoc" (formula "19") (term "0"))
                                       (rule "inEqSimp_ltRight" (formula "20"))
                                       (rule "polySimp_mulComm0" (formula "1") (term "0,0"))
                                       (rule "polySimp_addAssoc" (formula "3") (term "0"))
                                       (rule "polySimp_addComm1" (formula "3") (term "0,0"))
                                       (rule "polySimp_pullOutFactor1" (formula "3") (term "0,0,0"))
                                       (rule "add_literals" (formula "3") (term "1,0,0,0"))
                                       (rule "times_zero_1" (formula "3") (term "0,0,0"))
                                       (rule "add_zero_left" (formula "3") (term "0,0"))
                                       (rule "inEqSimp_ltToLeq" (formula "10") (term "0"))
                                       (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,0"))
                                       (rule "inEqSimp_gtToGeq" (formula "4"))
                                       (rule "mul_literals" (formula "4") (term "1,0,0"))
                                       (rule "add_literals" (formula "4") (term "0,0"))
                                       (rule "inEqSimp_homoInEq0" (formula "5"))
                                       (rule "polySimp_mulComm0" (formula "5") (term "1,0"))
                                       (rule "polySimp_rightDist" (formula "5") (term "1,0"))
                                       (rule "mul_literals" (formula "5") (term "0,1,0"))
                                       (rule "polySimp_addAssoc" (formula "5") (term "0"))
                                       (rule "polySimp_addComm0" (formula "5") (term "0,0"))
                                       (rule "inEqSimp_homoInEq0" (formula "6"))
                                       (rule "polySimp_addComm1" (formula "6") (term "0"))
                                       (rule "polySimp_sepNegMonomial" (formula "11") (term "0"))
                                       (rule "polySimp_mulLiterals" (formula "11") (term "0,0"))
                                       (rule "polySimp_elimOne" (formula "11") (term "0,0"))
                                       (rule "polySimp_sepPosMonomial" (formula "10") (term "1"))
                                       (rule "polySimp_mulComm0" (formula "10") (term "1,1"))
                                       (rule "polySimp_rightDist" (formula "10") (term "1,1"))
                                       (rule "mul_literals" (formula "10") (term "0,1,1"))
                                       (rule "polySimp_mulLiterals" (formula "10") (term "1,1,1"))
                                       (rule "polySimp_elimOne" (formula "10") (term "1,1,1"))
                                       (rule "polySimp_sepPosMonomial" (formula "20"))
                                       (rule "polySimp_mulComm0" (formula "20") (term "1"))
                                       (rule "polySimp_rightDist" (formula "20") (term "1"))
                                       (rule "mul_literals" (formula "20") (term "0,1"))
                                       (rule "polySimp_mulLiterals" (formula "20") (term "1,1"))
                                       (rule "polySimp_elimOne" (formula "20") (term "1,1"))
                                       (rule "polySimp_sepPosMonomial" (formula "3"))
                                       (rule "polySimp_mulLiterals" (formula "3") (term "1"))
                                       (rule "polySimp_elimOne" (formula "3") (term "1"))
                                       (rule "applyEqRigid" (formula "20") (term "0") (ifseqformula "3"))
                                       (rule "replace_known_right" (formula "10") (term "1") (ifseqformula "20"))
                                        (builtin "One Step Simplification" (formula "10"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                                       (rule "polySimp_mulLiterals" (formula "2") (term "1"))
                                       (rule "polySimp_elimOne" (formula "2") (term "1"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                                       (rule "polySimp_mulLiterals" (formula "1") (term "1"))
                                       (rule "polySimp_elimOne" (formula "1") (term "1"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "4"))
                                       (rule "mul_literals" (formula "4") (term "1"))
                                       (rule "inEqSimp_sepNegMonomial1" (formula "5"))
                                       (rule "polySimp_mulLiterals" (formula "5") (term "0"))
                                       (rule "polySimp_elimOne" (formula "5") (term "0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "6"))
                                       (rule "polySimp_mulComm0" (formula "6") (term "1"))
                                       (rule "polySimp_rightDist" (formula "6") (term "1"))
                                       (rule "mul_literals" (formula "6") (term "0,1"))
                                       (rule "polySimp_mulLiterals" (formula "6") (term "1,1"))
                                       (rule "polySimp_elimOne" (formula "6") (term "1,1"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "10"))
                                       (rule "polySimp_mulComm0" (formula "10") (term "1"))
                                       (rule "polySimp_rightDist" (formula "10") (term "1"))
                                       (rule "mul_literals" (formula "10") (term "0,1"))
                                       (rule "polySimp_mulLiterals" (formula "10") (term "1,1"))
                                       (rule "polySimp_elimOne" (formula "10") (term "1,1"))
                                       (rule "inEqSimp_strengthen0" (formula "5") (ifseqformula "20"))
                                       (rule "polySimp_addAssoc" (formula "5") (term "1"))
                                       (rule "add_literals" (formula "5") (term "0,1"))
                                       (rule "add_zero_left" (formula "5") (term "1"))
                                       (rule "inEqSimp_contradEq3" (formula "20") (ifseqformula "5"))
                                       (rule "polySimp_rightDist" (formula "20") (term "1,0,0"))
                                       (rule "mul_literals" (formula "20") (term "0,1,0,0"))
                                       (rule "polySimp_addAssoc" (formula "20") (term "0,0"))
                                       (rule "polySimp_addComm0" (formula "20") (term "0,0,0"))
                                       (rule "polySimp_pullOutFactor1b" (formula "20") (term "0,0"))
                                       (rule "add_literals" (formula "20") (term "1,1,0,0"))
                                       (rule "times_zero_1" (formula "20") (term "1,0,0"))
                                       (rule "add_zero_right" (formula "20") (term "0,0"))
                                       (rule "qeq_literals" (formula "20") (term "0"))
                                        (builtin "One Step Simplification" (formula "20"))
                                       (rule "false_right" (formula "20"))
                                       (rule "newSym_eq" (formula "3") (inst "l=l_0") (inst "newSymDef=mul(d_0, Z(0(#)))"))
                                       (rule "times_zero_1" (formula "3") (term "1,1"))
                                       (rule "add_zero_right" (formula "3") (term "1"))
                                       (rule "applyEq" (formula "1") (term "0,1,0,2,0") (ifseqformula "3"))
                                       (rule "polySimp_addComm0" (formula "1") (term "0,2,0"))
                                       (rule "applyEq" (formula "4") (term "0,0") (ifseqformula "3"))
                                       (rule "eqSymm" (formula "4"))
                                       (rule "applyEqRigid" (formula "2") (term "0,1,0,2,0") (ifseqformula "3"))
                                       (rule "polySimp_addComm0" (formula "2") (term "0,2,0"))
                                       (rule "apply_eq_monomials" (formula "11") (term "1,0,2,0") (ifseqformula "4"))
                                       (rule "polySimp_rightDist" (formula "11") (term "0,1,0,2,0"))
                                       (rule "polySimp_mulLiterals" (formula "11") (term "1,0,1,0,2,0"))
                                       (rule "polySimp_pullOutFactor0b" (formula "11") (term "1,0,2,0"))
                                       (rule "add_literals" (formula "11") (term "1,1,1,0,2,0"))
                                       (rule "times_zero_1" (formula "11") (term "1,1,0,2,0"))
                                       (rule "add_zero_right" (formula "11") (term "1,0,2,0"))
                                       (rule "polySimp_mulAssoc" (formula "11") (term "1,0,2,0"))
                                       (rule "polySimp_mulComm0" (formula "11") (term "0,1,0,2,0"))
                                       (rule "polySimp_mulLiterals" (formula "11") (term "1,0,2,0"))
                                       (rule "polySimp_addComm0" (formula "11") (term "0,2,0"))
                                       (rule "applyEq" (formula "3") (term "0,0") (ifseqformula "4"))
                                       (rule "applyEqRigid" (formula "6") (term "0") (ifseqformula "4"))
                                       (rule "inEqSimp_commuteLeq" (formula "6"))
                                       (rule "applyEqRigid" (formula "5") (term "0") (ifseqformula "4"))
                                       (rule "applyEq" (formula "10") (term "1") (ifseqformula "4"))
                                       (rule "inEqSimp_contradInEq1" (formula "11") (ifseqformula "1"))
                                       (rule "andLeft" (formula "11"))
                                       (rule "inEqSimp_homoInEq1" (formula "11"))
                                       (rule "polySimp_mulComm0" (formula "11") (term "1,0"))
                                       (rule "polySimp_rightDist" (formula "11") (term "1,0"))
                                       (rule "mul_literals" (formula "11") (term "0,1,0"))
                                       (rule "polySimp_addAssoc" (formula "11") (term "0"))
                                       (rule "polySimp_addComm0" (formula "11") (term "0,0"))
                                       (rule "polySimp_pullOutFactor1b" (formula "11") (term "0"))
                                       (rule "add_literals" (formula "11") (term "1,1,0"))
                                       (rule "times_zero_1" (formula "11") (term "1,0"))
                                       (rule "add_zero_right" (formula "11") (term "0"))
                                       (rule "leq_literals" (formula "11"))
                                       (rule "closeFalse" (formula "11"))
                                    )
                                    (branch "Assume b_0 + jdiv(d_0, 2) * -1 + jdiv(d_0, 2) * -1 != b_0 + d_0 * -1"
                                       (rule "shiftLeftSplitTwo" (formula "7") (term "0") (userinteraction))
                                       (rule "notLeft" (formula "1"))
                                       (rule "polySimp_homoEq" (formula "9") (term "0"))
                                       (rule "polySimp_elimSub" (formula "6") (term "1,0,0,1"))
                                       (rule "mul_literals" (formula "6") (term "1,1,0,0,1"))
                                       (rule "polySimp_homoEq" (formula "8") (term "1"))
                                       (rule "polySimp_pullOutFactor0b" (formula "21") (term "0,2,0"))
                                       (rule "add_literals" (formula "21") (term "1,1,0,2,0"))
                                       (rule "polySimp_homoEq" (formula "20"))
                                       (rule "polySimp_homoEq" (formula "17"))
                                       (rule "polySimp_pullOutFactor0b" (formula "20") (term "0,1,0"))
                                       (rule "add_literals" (formula "20") (term "1,1,0,1,0"))
                                       (rule "polySimp_pullOutFactor0b" (formula "17") (term "0,1,0"))
                                       (rule "add_literals" (formula "17") (term "1,1,0,1,0"))
                                       (rule "polySimp_mulComm0" (formula "9") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "8") (term "1,0,1"))
                                       (rule "polySimp_mulComm0" (formula "20") (term "1,0"))
                                       (rule "polySimp_mulComm0" (formula "17") (term "1,0"))
                                       (rule "polySimp_addComm0" (formula "6") (term "1,0,0,1"))
                                       (rule "polySimp_rightDist" (formula "9") (term "1,0,0"))
                                       (rule "mul_literals" (formula "9") (term "0,1,0,0"))
                                       (rule "polySimp_rightDist" (formula "8") (term "1,0,1"))
                                       (rule "polySimp_mulLiterals" (formula "8") (term "1,1,0,1"))
                                       (rule "polySimp_elimOne" (formula "8") (term "1,1,0,1"))
                                       (rule "polySimp_mulComm0" (formula "8") (term "0,1,0,1"))
                                       (rule "polySimp_rightDist" (formula "20") (term "1,0"))
                                       (rule "polySimp_mulLiterals" (formula "20") (term "1,1,0"))
                                       (rule "polySimp_mulComm0" (formula "20") (term "0,1,0"))
                                       (rule "polySimp_rightDist" (formula "17") (term "1,0"))
                                       (rule "polySimp_mulLiterals" (formula "17") (term "1,1,0"))
                                       (rule "polySimp_mulComm0" (formula "17") (term "0,1,0"))
                                       (rule "polySimp_addAssoc" (formula "9") (term "0,0"))
                                       (rule "polySimp_addComm0" (formula "9") (term "0,0,0"))
                                       (rule "inEqSimp_ltRight" (formula "18"))
                                       (rule "polySimp_mulComm0" (formula "1") (term "0,0"))
                                       (rule "polySimp_addAssoc" (formula "9") (term "0,1"))
                                       (rule "polySimp_addAssoc" (formula "20") (term "0"))
                                       (rule "inEqSimp_ltRight" (formula "21"))
                                       (rule "polySimp_mulComm0" (formula "1") (term "0,0"))
                                       (rule "inEqSimp_gtToGeq" (formula "3"))
                                       (rule "mul_literals" (formula "3") (term "1,0,0"))
                                       (rule "add_literals" (formula "3") (term "0,0"))
                                       (rule "inEqSimp_ltToLeq" (formula "10") (term "0"))
                                       (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,0"))
                                       (rule "polySimp_addAssoc" (formula "19") (term "0"))
                                       (rule "polySimp_addComm1" (formula "19") (term "0,0"))
                                       (rule "polySimp_pullOutFactor1" (formula "19") (term "0,0,0"))
                                       (rule "add_literals" (formula "19") (term "1,0,0,0"))
                                       (rule "times_zero_1" (formula "19") (term "0,0,0"))
                                       (rule "add_zero_left" (formula "19") (term "0,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "8") (term "0,0"))
                                       (rule "inEqSimp_homoInEq0" (formula "5"))
                                       (rule "polySimp_addComm1" (formula "5") (term "0"))
                                       (rule "inEqSimp_homoInEq0" (formula "4"))
                                       (rule "polySimp_mulComm0" (formula "4") (term "1,0"))
                                       (rule "polySimp_rightDist" (formula "4") (term "1,0"))
                                       (rule "mul_literals" (formula "4") (term "0,1,0"))
                                       (rule "polySimp_addAssoc" (formula "4") (term "0"))
                                       (rule "polySimp_addComm0" (formula "4") (term "0,0"))
                                       (rule "applyEq" (formula "8") (term "1,1") (ifseqformula "9"))
                                       (rule "polySimp_sepNegMonomial" (formula "11") (term "0"))
                                       (rule "polySimp_mulLiterals" (formula "11") (term "0,0"))
                                       (rule "polySimp_elimOne" (formula "11") (term "0,0"))
                                       (rule "polySimp_sepPosMonomial" (formula "10") (term "1"))
                                       (rule "polySimp_mulComm0" (formula "10") (term "1,1"))
                                       (rule "polySimp_rightDist" (formula "10") (term "1,1"))
                                       (rule "polySimp_mulLiterals" (formula "10") (term "1,1,1"))
                                       (rule "mul_literals" (formula "10") (term "0,1,1"))
                                       (rule "polySimp_elimOne" (formula "10") (term "1,1,1"))
                                       (rule "polySimp_sepPosMonomial" (formula "21"))
                                       (rule "polySimp_mulComm0" (formula "21") (term "1"))
                                       (rule "polySimp_rightDist" (formula "21") (term "1"))
                                       (rule "mul_literals" (formula "21") (term "0,1"))
                                       (rule "polySimp_mulLiterals" (formula "21") (term "1,1"))
                                       (rule "polySimp_elimOne" (formula "21") (term "1,1"))
                                       (rule "polySimp_sepPosMonomial" (formula "19"))
                                       (rule "polySimp_mulLiterals" (formula "19") (term "1"))
                                       (rule "polySimp_elimOne" (formula "19") (term "1"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                                       (rule "polySimp_mulLiterals" (formula "2") (term "1"))
                                       (rule "polySimp_elimOne" (formula "2") (term "1"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                                       (rule "polySimp_mulLiterals" (formula "1") (term "1"))
                                       (rule "polySimp_elimOne" (formula "1") (term "1"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "3"))
                                       (rule "mul_literals" (formula "3") (term "1"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "0"))
                                       (rule "polySimp_mulComm0" (formula "10") (term "1,0"))
                                       (rule "polySimp_rightDist" (formula "10") (term "1,0"))
                                       (rule "polySimp_mulLiterals" (formula "10") (term "1,1,0"))
                                       (rule "mul_literals" (formula "10") (term "0,1,0"))
                                       (rule "polySimp_elimOne" (formula "10") (term "1,1,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "5"))
                                       (rule "polySimp_mulComm0" (formula "5") (term "1"))
                                       (rule "polySimp_rightDist" (formula "5") (term "1"))
                                       (rule "mul_literals" (formula "5") (term "0,1"))
                                       (rule "polySimp_mulLiterals" (formula "5") (term "1,1"))
                                       (rule "polySimp_elimOne" (formula "5") (term "1,1"))
                                       (rule "inEqSimp_sepNegMonomial1" (formula "4"))
                                       (rule "polySimp_mulLiterals" (formula "4") (term "0"))
                                       (rule "polySimp_elimOne" (formula "4") (term "0"))
                                       (rule "inEqSimp_exactShadow3" (formula "3") (ifseqformula "4"))
                                       (rule "mul_literals" (formula "3") (term "0,0"))
                                       (rule "polySimp_addAssoc" (formula "3") (term "0"))
                                       (rule "add_literals" (formula "3") (term "0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "3"))
                                       (rule "mul_literals" (formula "3") (term "1"))
                                       (rule "Class_invariant_axiom_for_de_wiesler_Tree" (formula "18"))
                                        (builtin "One Step Simplification" (formula "18"))
                                       (rule "translateJavaSubInt" (formula "18") (term "3,0,1"))
                                       (rule "andLeft" (formula "18"))
                                       (rule "andLeft" (formula "18"))
                                       (rule "andLeft" (formula "18"))
                                       (rule "andLeft" (formula "19"))
                                       (rule "andLeft" (formula "18"))
                                       (rule "andLeft" (formula "18"))
                                       (rule "andLeft" (formula "19"))
                                       (rule "andLeft" (formula "18"))
                                       (rule "notLeft" (formula "19"))
                                       (rule "notLeft" (formula "18"))
                                       (rule "polySimp_elimSub" (formula "24") (term "3,0"))
                                       (rule "mul_literals" (formula "24") (term "1,3,0"))
                                       (rule "polySimp_addComm0" (formula "24") (term "3,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "23"))
                                       (rule "inEqSimp_commuteLeq" (formula "22"))
                                       (rule "inEqSimp_commuteLeq" (formula "21"))
                                       (rule "inEqSimp_commuteLeq" (formula "18"))
                                       (rule "applyEq" (formula "21") (term "0") (ifseqformula "20"))
                                       (rule "applyEq" (formula "24") (term "1,3,0") (ifseqformula "20"))
                                       (rule "applyEq" (formula "22") (term "1") (ifseqformula "20"))
                                       (rule "applyEq" (formula "12") (term "0,0") (ifseqformula "20"))
                                       (rule "applyEq" (formula "23") (term "1") (ifseqformula "20"))
                                       (rule "applyEq" (formula "6") (term "0") (ifseqformula "20"))
                                       (rule "inEqSimp_exactShadow3" (formula "8") (ifseqformula "19"))
                                       (rule "polySimp_mulComm0" (formula "8") (term "0,0"))
                                       (rule "polySimp_addComm0" (formula "8") (term "0"))
                                       (rule "inEqSimp_sepNegMonomial1" (formula "8"))
                                       (rule "polySimp_mulLiterals" (formula "8") (term "0"))
                                       (rule "polySimp_elimOne" (formula "8") (term "0"))
                                       (rule "inEqSimp_subsumption0" (formula "10") (term "1,0") (ifseqformula "8"))
                                       (rule "leq_literals" (formula "10") (term "0,1,0"))
                                        (builtin "One Step Simplification" (formula "10"))
                                       (rule "Free_class_invariant_axiom_for_de_wiesler_Tree" (formula "26"))
                                       (rule "true_left" (formula "26"))
                                       (rule "commute_or" (formula "12"))
                                       (rule "Contract_axiom_for_isSortedSliceTransitive_in_Functions" (formula "25") (term "0"))
                                       (rule "replace_known_right" (formula "25") (term "0,0,0") (ifseqformula "28"))
                                        (builtin "One Step Simplification" (formula "25") (ifInst ""  (formula "15")) (ifInst ""  (formula "26")))
                                       (rule "Definition_axiom_for_isSortedSliceTransitive_in_de_wiesler_Functions" (formula "26") (term "0") (inst "i=i") (inst "j=j"))
                                        (builtin "One Step Simplification" (formula "26"))
                                       (rule "inEqSimp_ltToLeq" (formula "26") (term "1,0,0"))
                                       (rule "polySimp_rightDist" (formula "26") (term "1,0,0,1,0,0"))
                                       (rule "mul_literals" (formula "26") (term "0,1,0,0,1,0,0"))
                                       (rule "polySimp_addAssoc" (formula "26") (term "0,0,1,0,0"))
                                       (rule "add_literals" (formula "26") (term "0,0,0,1,0,0"))
                                       (rule "inEqSimp_ltToLeq" (formula "26") (term "1,0,0,1,0"))
                                       (rule "polySimp_rightDist" (formula "26") (term "1,0,0,1,0,0,1,0"))
                                       (rule "mul_literals" (formula "26") (term "0,1,0,0,1,0,0,1,0"))
                                       (rule "polySimp_addAssoc" (formula "26") (term "0,0,1,0,0,1,0"))
                                       (rule "add_literals" (formula "26") (term "0,0,0,1,0,0,1,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "26") (term "1,0,1,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "26") (term "0,0,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "26") (term "0,0,0,1,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "26") (term "1,1,0,0"))
                                       (rule "polySimp_rightDist" (formula "26") (term "1,1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "26") (term "1,1,1,0,0"))
                                       (rule "mul_literals" (formula "26") (term "0,1,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "26") (term "1,1,1,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "1,0,0,1,0"))
                                       (rule "polySimp_mulComm0" (formula "26") (term "1,1,0,0,1,0"))
                                       (rule "polySimp_rightDist" (formula "26") (term "1,1,0,0,1,0"))
                                       (rule "polySimp_mulLiterals" (formula "26") (term "1,1,1,0,0,1,0"))
                                       (rule "mul_literals" (formula "26") (term "0,1,1,0,0,1,0"))
                                       (rule "polySimp_elimOne" (formula "26") (term "1,1,1,0,0,1,0"))
                                       (rule "nnf_imp2or" (formula "26") (term "0"))
                                       (rule "nnf_notAnd" (formula "26") (term "0,0"))
                                       (rule "inEqSimp_notLeq" (formula "26") (term "1,0,0"))
                                       (rule "polySimp_rightDist" (formula "26") (term "1,0,0,1,0,0"))
                                       (rule "mul_literals" (formula "26") (term "0,1,0,0,1,0,0"))
                                       (rule "polySimp_addAssoc" (formula "26") (term "0,0,1,0,0"))
                                       (rule "add_literals" (formula "26") (term "0,0,0,1,0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "26") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "26") (term "1,1,0,0"))
                                       (rule "polySimp_rightDist" (formula "26") (term "1,1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "26") (term "1,1,1,0,0"))
                                       (rule "mul_literals" (formula "26") (term "0,1,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "26") (term "1,1,1,0,0"))
                                       (rule "inEqSimp_notGeq" (formula "26") (term "0,0,0"))
                                       (rule "times_zero_1" (formula "26") (term "1,0,0,0,0,0"))
                                       (rule "add_zero_right" (formula "26") (term "0,0,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "0,0,0"))
                                       (rule "mul_literals" (formula "26") (term "1,0,0,0"))
                                       (rule "nnf_imp2or" (formula "26") (term "0,1,0"))
                                       (rule "nnf_notAnd" (formula "26") (term "0,0,1,0"))
                                       (rule "inEqSimp_notGeq" (formula "26") (term "0,0,0,1,0"))
                                       (rule "polySimp_mulComm0" (formula "26") (term "1,0,0,0,0,0,1,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "0,0,0,1,0"))
                                       (rule "polySimp_mulComm0" (formula "26") (term "1,0,0,0,1,0"))
                                       (rule "polySimp_rightDist" (formula "26") (term "1,0,0,0,1,0"))
                                       (rule "polySimp_mulLiterals" (formula "26") (term "1,1,0,0,0,1,0"))
                                       (rule "mul_literals" (formula "26") (term "0,1,0,0,0,1,0"))
                                       (rule "polySimp_elimOne" (formula "26") (term "1,1,0,0,0,1,0"))
                                       (rule "inEqSimp_notLeq" (formula "26") (term "1,0,0,1,0"))
                                       (rule "polySimp_rightDist" (formula "26") (term "1,0,0,1,0,0,1,0"))
                                       (rule "mul_literals" (formula "26") (term "0,1,0,0,1,0,0,1,0"))
                                       (rule "polySimp_addAssoc" (formula "26") (term "0,0,1,0,0,1,0"))
                                       (rule "add_literals" (formula "26") (term "0,0,0,1,0,0,1,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "26") (term "1,0,0,1,0"))
                                       (rule "polySimp_mulComm0" (formula "26") (term "1,1,0,0,1,0"))
                                       (rule "polySimp_rightDist" (formula "26") (term "1,1,0,0,1,0"))
                                       (rule "polySimp_mulLiterals" (formula "26") (term "1,1,1,0,0,1,0"))
                                       (rule "mul_literals" (formula "26") (term "0,1,1,0,0,1,0"))
                                       (rule "polySimp_elimOne" (formula "26") (term "1,1,1,0,0,1,0"))
                                       (rule "Definition_axiom_for_isSortedSlice_in_de_wiesler_Functions" (formula "25") (term "0") (inst "i=i"))
                                        (builtin "One Step Simplification" (formula "25"))
                                       (rule "translateJavaSubInt" (formula "25") (term "1,1,0,0"))
                                       (rule "translateJavaAddInt" (formula "25") (term "0,2,1,1,0"))
                                       (rule "polySimp_elimSub" (formula "25") (term "1,1,0,0"))
                                       (rule "mul_literals" (formula "25") (term "1,1,1,0,0"))
                                       (rule "polySimp_addComm0" (formula "25") (term "0,2,1,1,0"))
                                       (rule "polySimp_addComm1" (formula "25") (term "1,1,0,0"))
                                       (rule "add_literals" (formula "25") (term "0,1,1,0,0"))
                                       (rule "inEqSimp_ltToLeq" (formula "25") (term "1,0,0"))
                                       (rule "polySimp_rightDist" (formula "25") (term "1,0,0,1,0,0"))
                                       (rule "mul_literals" (formula "25") (term "0,1,0,0,1,0,0"))
                                       (rule "polySimp_addAssoc" (formula "25") (term "0,0,1,0,0"))
                                       (rule "add_literals" (formula "25") (term "0,0,0,1,0,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "25") (term "0,0,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "25") (term "1,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "25") (term "1,1,0,0"))
                                       (rule "polySimp_rightDist" (formula "25") (term "1,1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "25") (term "1,1,1,0,0"))
                                       (rule "mul_literals" (formula "25") (term "0,1,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "25") (term "1,1,1,0,0"))
                                       (rule "nnf_imp2or" (formula "25") (term "0"))
                                       (rule "nnf_notAnd" (formula "25") (term "0,0"))
                                       (rule "inEqSimp_notLeq" (formula "25") (term "1,0,0"))
                                       (rule "polySimp_rightDist" (formula "25") (term "1,0,0,1,0,0"))
                                       (rule "mul_literals" (formula "25") (term "0,1,0,0,1,0,0"))
                                       (rule "polySimp_addAssoc" (formula "25") (term "0,0,1,0,0"))
                                       (rule "add_literals" (formula "25") (term "0,0,0,1,0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "25") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "25") (term "1,1,0,0"))
                                       (rule "polySimp_rightDist" (formula "25") (term "1,1,0,0"))
                                       (rule "mul_literals" (formula "25") (term "0,1,1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "25") (term "1,1,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "25") (term "1,1,1,0,0"))
                                       (rule "inEqSimp_notGeq" (formula "25") (term "0,0,0"))
                                       (rule "times_zero_1" (formula "25") (term "1,0,0,0,0,0"))
                                       (rule "add_zero_right" (formula "25") (term "0,0,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "0,0,0"))
                                       (rule "mul_literals" (formula "25") (term "1,0,0,0"))
                                       (rule "commute_or" (formula "26") (term "0,0,1,0"))
                                       (rule "jdiv_axiom" (formula "31") (term "0,0"))
                                       (rule "eqSymm" (formula "1"))
                                       (rule "inEqSimp_subsumption1" (formula "1") (term "0,0") (ifseqformula "5"))
                                       (rule "leq_literals" (formula "1") (term "0,0,0"))
                                        (builtin "One Step Simplification" (formula "1"))
                                       (rule "eqSymm" (formula "1"))
                                       (rule "applyEqRigid" (formula "3") (term "0,1,0,2,0") (ifseqformula "1"))
                                       (rule "applyEq" (formula "32") (term "0,0") (ifseqformula "1"))
                                       (rule "applyEqRigid" (formula "2") (term "0,1,0,2,0") (ifseqformula "1"))
                                       (rule "applyEqRigid" (formula "30") (term "0,0") (ifseqformula "1"))
                                       (rule "cut_direct" (formula "14") (term "1"))
                                       (branch "CUT: self.sorted_splitters[b_0] >= value TRUE"
                                           (builtin "One Step Simplification" (formula "15"))
                                          (rule "true_left" (formula "15"))
                                          (rule "arrayLengthIsAShort" (formula "25") (term "0"))
                                           (builtin "One Step Simplification" (formula "25"))
                                          (rule "true_left" (formula "25"))
                                          (rule "arrayLengthNotNegative" (formula "25") (term "0"))
                                          (rule "arrayLengthIsAShort" (formula "24") (term "0"))
                                           (builtin "One Step Simplification" (formula "24"))
                                          (rule "true_left" (formula "24"))
                                          (rule "arrayLengthNotNegative" (formula "24") (term "0"))
                                          (rule "all_pull_out3" (formula "29") (term "0"))
                                          (rule "shift_paren_or" (formula "29") (term "0,0"))
                                          (rule "shift_paren_or" (formula "29") (term "0,0,0"))
                                          (rule "cut_direct" (formula "11") (term "0"))
                                          (branch "CUT: exp_0 >= 1 TRUE"
                                              (builtin "One Step Simplification" (formula "12"))
                                             (rule "inEqSimp_subsumption1" (formula "8") (ifseqformula "11"))
                                             (rule "leq_literals" (formula "8") (term "0"))
                                              (builtin "One Step Simplification" (formula "8"))
                                             (rule "true_left" (formula "8"))
                                             (rule "newSym_eq" (formula "11") (inst "l=l_0") (inst "newSymDef=mul(d_0, Z(0(#)))"))
                                             (rule "times_zero_1" (formula "11") (term "1,1"))
                                             (rule "add_zero_right" (formula "11") (term "1"))
                                             (rule "applyEq" (formula "12") (term "0,0") (ifseqformula "11"))
                                             (rule "eqSymm" (formula "12"))
                                             (rule "applyEqRigid" (formula "3") (term "0,0,1,0,2,0") (ifseqformula "12"))
                                             (rule "applyEq" (formula "14") (term "0,0") (ifseqformula "12"))
                                             (rule "polySimp_homoEq" (formula "14") (term "0"))
                                             (rule "polySimp_mulLiterals" (formula "14") (term "1,0,0"))
                                             (rule "polySimp_addComm1" (formula "14") (term "0,0"))
                                             (rule "applyEq" (formula "35") (term "0,0,0") (ifseqformula "12"))
                                             (rule "applyEq" (formula "5") (term "0") (ifseqformula "12"))
                                             (rule "applyEq" (formula "14") (term "0,1,0,2,0,1") (ifseqformula "12"))
                                             (rule "polySimp_mulLiterals" (formula "14") (term "1,0,2,0,1"))
                                             (rule "polySimp_addComm0" (formula "14") (term "0,2,0,1"))
                                             (rule "applyEqRigid" (formula "6") (term "0") (ifseqformula "12"))
                                             (rule "inEqSimp_homoInEq0" (formula "6"))
                                             (rule "polySimp_mulLiterals" (formula "6") (term "1,0"))
                                             (rule "polySimp_addComm1" (formula "6") (term "0"))
                                             (rule "applyEq" (formula "1") (term "0,0") (ifseqformula "12"))
                                             (rule "applyEqRigid" (formula "2") (term "0,0,1,0,2,0") (ifseqformula "12"))
                                             (rule "applyEqRigid" (formula "33") (term "0,0,0") (ifseqformula "12"))
                                             (rule "applyEqRigid" (formula "1") (term "0,1") (ifseqformula "12"))
                                             (rule "applyEq" (formula "13") (term "1") (ifseqformula "12"))
                                             (rule "applyEq" (formula "33") (term "1") (ifseqformula "12"))
                                             (rule "polySimp_sepPosMonomial" (formula "14") (term "0"))
                                             (rule "polySimp_mulComm0" (formula "14") (term "1,0"))
                                             (rule "polySimp_rightDist" (formula "14") (term "1,0"))
                                             (rule "polySimp_mulLiterals" (formula "14") (term "1,1,0"))
                                             (rule "mul_literals" (formula "14") (term "0,1,0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "6"))
                                             (rule "polySimp_mulComm0" (formula "6") (term "1"))
                                             (rule "polySimp_rightDist" (formula "6") (term "1"))
                                             (rule "polySimp_mulLiterals" (formula "6") (term "1,1"))
                                             (rule "mul_literals" (formula "6") (term "0,1"))
                                             (rule "elimGcdEq" (formula "33") (inst "elimGcdRightDiv=l_0") (inst "elimGcdLeftDiv=div(mul(l_0, Z(2(#))), Z(2(#)))") (inst "elimGcd=Z(2(#))"))
                                              (builtin "One Step Simplification" (formula "33"))
                                             (rule "mul_literals" (formula "33") (term "0,1,0,1,0"))
                                             (rule "mul_literals" (formula "33") (term "0,1,0,0,0"))
                                             (rule "mul_literals" (formula "33") (term "0,1,0,0,1"))
                                             (rule "add_literals" (formula "33") (term "1,0,0"))
                                             (rule "polySimp_mulComm0" (formula "33") (term "1,0,1,0"))
                                             (rule "polySimp_pullOutFactor0" (formula "33") (term "0,1,0"))
                                             (rule "add_literals" (formula "33") (term "1,0,1,0"))
                                             (rule "times_zero_1" (formula "33") (term "0,1,0"))
                                             (rule "qeq_literals" (formula "33") (term "1,0"))
                                              (builtin "One Step Simplification" (formula "33"))
                                             (rule "polySimp_mulComm0" (formula "33") (term "1,0,0,1"))
                                             (rule "polySimp_pullOutFactor0" (formula "33") (term "0,0,1"))
                                             (rule "add_literals" (formula "33") (term "1,0,0,1"))
                                             (rule "times_zero_1" (formula "33") (term "0,0,1"))
                                              (builtin "One Step Simplification" (formula "33"))
                                             (rule "polySimp_mulComm0" (formula "33") (term "1,0,0"))
                                             (rule "polySimp_pullOutFactor0" (formula "33") (term "0,0"))
                                             (rule "add_literals" (formula "33") (term "1,0,0"))
                                             (rule "times_zero_1" (formula "33") (term "0,0"))
                                             (rule "leq_literals" (formula "33") (term "0"))
                                              (builtin "One Step Simplification" (formula "33"))
                                             (rule "elimGcdGeq_antec" (formula "5") (inst "elimGcdRightDiv=Z(1(#))") (inst "elimGcdLeftDiv=l_0") (inst "elimGcd=Z(2(#))"))
                                             (rule "polySimp_mulLiterals" (formula "5") (term "1,0,0,0,0,1,0"))
                                             (rule "leq_literals" (formula "5") (term "0,0"))
                                              (builtin "One Step Simplification" (formula "5"))
                                             (rule "mul_literals" (formula "5") (term "1,0,0,0,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "5") (term "1,0,0"))
                                             (rule "polySimp_addLiterals" (formula "5") (term "0,0,0,0"))
                                             (rule "add_zero_right" (formula "5") (term "0,0,0,0"))
                                             (rule "polySimp_pullOutFactor0b" (formula "5") (term "0,0"))
                                             (rule "add_literals" (formula "5") (term "1,1,0,0"))
                                             (rule "times_zero_1" (formula "5") (term "1,0,0"))
                                             (rule "add_zero_right" (formula "5") (term "0,0"))
                                             (rule "leq_literals" (formula "5") (term "0"))
                                              (builtin "One Step Simplification" (formula "5"))
                                             (rule "polyDiv_pullOut" (formula "1") (term "1") (inst "polyDivCoeff=l_0"))
                                             (rule "equal_literals" (formula "1") (term "0,1"))
                                              (builtin "One Step Simplification" (formula "1"))
                                             (rule "polySimp_mulLiterals" (formula "1") (term "1,0,0,1"))
                                             (rule "polySimp_pullOutFactor0" (formula "1") (term "0,0,1"))
                                             (rule "add_literals" (formula "1") (term "1,0,0,1"))
                                             (rule "times_zero_1" (formula "1") (term "0,0,1"))
                                             (rule "div_literals" (formula "1") (term "0,1"))
                                             (rule "add_zero_left" (formula "1") (term "1"))
                                             (rule "polyDiv_pullOut" (formula "2") (term "0,1,0,2,0") (inst "polyDivCoeff=l_0"))
                                             (rule "polySimp_mulLiterals" (formula "2") (term "1,0,0,2,0,1,0,2,0"))
                                             (rule "equal_literals" (formula "2") (term "0,0,1,0,2,0"))
                                              (builtin "One Step Simplification" (formula "2"))
                                             (rule "polySimp_pullOutFactor0" (formula "2") (term "0,0,0,1,0,2,0"))
                                             (rule "add_literals" (formula "2") (term "1,0,0,0,1,0,2,0"))
                                             (rule "times_zero_1" (formula "2") (term "0,0,0,1,0,2,0"))
                                             (rule "div_literals" (formula "2") (term "0,0,1,0,2,0"))
                                             (rule "add_zero_left" (formula "2") (term "0,1,0,2,0"))
                                             (rule "polySimp_addComm0" (formula "2") (term "0,2,0"))
                                             (rule "inEqSimp_contradInEq1" (formula "14") (term "1") (ifseqformula "2"))
                                             (rule "inEqSimp_homoInEq1" (formula "14") (term "0,1"))
                                             (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,1"))
                                             (rule "polySimp_rightDist" (formula "14") (term "1,0,0,1"))
                                             (rule "mul_literals" (formula "14") (term "0,1,0,0,1"))
                                             (rule "polySimp_addAssoc" (formula "14") (term "0,0,1"))
                                             (rule "polySimp_addComm0" (formula "14") (term "0,0,0,1"))
                                             (rule "polySimp_pullOutFactor1b" (formula "14") (term "0,0,1"))
                                             (rule "add_literals" (formula "14") (term "1,1,0,0,1"))
                                             (rule "times_zero_1" (formula "14") (term "1,0,0,1"))
                                             (rule "add_zero_right" (formula "14") (term "0,0,1"))
                                             (rule "leq_literals" (formula "14") (term "0,1"))
                                              (builtin "One Step Simplification" (formula "14"))
                                             (rule "applyEqRigid" (formula "6") (term "0") (ifseqformula "14"))
                                             (rule "inEqSimp_homoInEq1" (formula "6"))
                                             (rule "polySimp_pullOutFactor1" (formula "6") (term "0"))
                                             (rule "add_literals" (formula "6") (term "1,0"))
                                             (rule "times_zero_1" (formula "6") (term "0"))
                                             (rule "leq_literals" (formula "6"))
                                             (rule "true_left" (formula "6"))
                                             (rule "applyEqRigid" (formula "14") (term "0,2,0") (ifseqformula "13"))
                                             (rule "applyEqRigid" (formula "2") (term "1,0,2,0") (ifseqformula "13"))
                                             (rule "polySimp_addAssoc" (formula "2") (term "0,2,0"))
                                             (rule "polySimp_addComm0" (formula "2") (term "0,0,2,0"))
                                             (rule "polySimp_pullOutFactor0b" (formula "2") (term "0,2,0"))
                                             (rule "add_literals" (formula "2") (term "1,1,0,2,0"))
                                             (rule "times_zero_1" (formula "2") (term "1,0,2,0"))
                                             (rule "add_zero_right" (formula "2") (term "0,2,0"))
                                             (rule "applyEq" (formula "4") (term "0") (ifseqformula "13"))
                                             (rule "inEqSimp_homoInEq1" (formula "4"))
                                             (rule "polySimp_mulComm0" (formula "4") (term "1,0"))
                                             (rule "polySimp_rightDist" (formula "4") (term "1,0"))
                                             (rule "mul_literals" (formula "4") (term "0,1,0"))
                                             (rule "polySimp_mulLiterals" (formula "4") (term "1,1,0"))
                                             (rule "polySimp_addAssoc" (formula "4") (term "0"))
                                             (rule "add_literals" (formula "4") (term "0,0"))
                                             (rule "applyEq" (formula "6") (term "1,1") (ifseqformula "13"))
                                             (rule "polySimp_addAssoc" (formula "6") (term "1"))
                                             (rule "add_literals" (formula "6") (term "0,1"))
                                             (rule "add_zero_left" (formula "6") (term "1"))
                                             (rule "applyEq" (formula "34") (term "1,1") (ifseqformula "13"))
                                             (rule "polySimp_addAssoc" (formula "34") (term "1"))
                                             (rule "add_literals" (formula "34") (term "0,1"))
                                             (rule "add_zero_left" (formula "34") (term "1"))
                                             (rule "applyEqRigid" (formula "3") (term "0,0,2,0") (ifseqformula "13"))
                                             (rule "inEqSimp_sepNegMonomial0" (formula "4"))
                                             (rule "polySimp_mulLiterals" (formula "4") (term "0"))
                                             (rule "inEqSimp_subsumption6" (formula "4") (ifseqformula "5"))
                                             (rule "mul_literals" (formula "4") (term "1,1,0"))
                                             (rule "greater_literals" (formula "4") (term "0,0"))
                                              (builtin "One Step Simplification" (formula "4"))
                                             (rule "leq_literals" (formula "4") (term "0"))
                                              (builtin "One Step Simplification" (formula "4"))
                                             (rule "true_left" (formula "4"))
                                             (rule "elimGcdEq" (formula "33") (inst "elimGcdRightDiv=l_0") (inst "elimGcdLeftDiv=div(mul(l_0, Z(2(#))), Z(2(#)))") (inst "elimGcd=Z(2(#))"))
                                              (builtin "One Step Simplification" (formula "33") (ifInst ""  (formula "31")))
                                             (rule "add_literals" (formula "33") (term "1,0,0"))
                                             (rule "mul_literals" (formula "33") (term "0,1,0,0,0"))
                                             (rule "mul_literals" (formula "33") (term "0,1,0,1,0"))
                                             (rule "polySimp_mulComm0" (formula "33") (term "1,0,0,0"))
                                             (rule "polySimp_pullOutFactor0" (formula "33") (term "0,0,0"))
                                             (rule "add_literals" (formula "33") (term "1,0,0,0"))
                                             (rule "times_zero_1" (formula "33") (term "0,0,0"))
                                             (rule "leq_literals" (formula "33") (term "0,0"))
                                              (builtin "One Step Simplification" (formula "33"))
                                             (rule "polySimp_mulComm0" (formula "33") (term "1,0,0"))
                                             (rule "polySimp_pullOutFactor0" (formula "33") (term "0,0"))
                                             (rule "add_literals" (formula "33") (term "1,0,0"))
                                             (rule "times_zero_1" (formula "33") (term "0,0"))
                                             (rule "qeq_literals" (formula "33") (term "0"))
                                              (builtin "One Step Simplification" (formula "33"))
                                             (rule "false_right" (formula "33"))
                                             (rule "polyDiv_pullOut" (formula "3") (term "0,1,0,2,0") (inst "polyDivCoeff=l_0"))
                                             (rule "equal_literals" (formula "3") (term "0,0,1,0,2,0"))
                                              (builtin "One Step Simplification" (formula "3"))
                                             (rule "polySimp_mulLiterals" (formula "3") (term "1,0,0,0,1,0,2,0"))
                                             (rule "polySimp_pullOutFactor0" (formula "3") (term "0,0,0,1,0,2,0"))
                                             (rule "add_literals" (formula "3") (term "1,0,0,0,1,0,2,0"))
                                             (rule "times_zero_1" (formula "3") (term "0,0,0,1,0,2,0"))
                                             (rule "div_literals" (formula "3") (term "0,0,1,0,2,0"))
                                             (rule "add_zero_left" (formula "3") (term "0,1,0,2,0"))
                                             (rule "polySimp_pullOutFactor0b" (formula "3") (term "0,2,0"))
                                             (rule "add_literals" (formula "3") (term "1,1,0,2,0"))
                                             (rule "polySimp_elimOne" (formula "3") (term "1,0,2,0"))
                                             (rule "polyDiv_pullOut" (formula "31") (term "0") (inst "polyDivCoeff=l_0"))
                                             (rule "equal_literals" (formula "31") (term "0,0"))
                                              (builtin "One Step Simplification" (formula "31"))
                                             (rule "polySimp_mulLiterals" (formula "31") (term "1,0,0,0"))
                                             (rule "polySimp_homoEq" (formula "31"))
                                             (rule "polySimp_pullOutFactor0" (formula "31") (term "0,0,0,1,0"))
                                             (rule "add_literals" (formula "31") (term "1,0,0,0,1,0"))
                                             (rule "times_zero_1" (formula "31") (term "0,0,0,1,0"))
                                             (rule "div_literals" (formula "31") (term "0,0,1,0"))
                                             (rule "add_zero_left" (formula "31") (term "0,1,0"))
                                             (rule "polySimp_pullOutFactor1" (formula "31") (term "0"))
                                             (rule "add_literals" (formula "31") (term "1,0"))
                                             (rule "times_zero_1" (formula "31") (term "0"))
                                              (builtin "One Step Simplification" (formula "31"))
                                             (rule "closeTrue" (formula "31"))
                                          )
                                          (branch "CUT: exp_0 >= 1 FALSE"
                                              (builtin "One Step Simplification" (formula "11"))
                                             (rule "true_left" (formula "11"))
                                             (rule "inEqSimp_geqRight" (formula "29"))
                                             (rule "mul_literals" (formula "1") (term "1,0,0"))
                                             (rule "add_literals" (formula "1") (term "0,0"))
                                             (rule "add_zero_left" (formula "1") (term "0"))
                                             (rule "inEqSimp_subsumption0" (formula "10") (ifseqformula "1"))
                                             (rule "leq_literals" (formula "10") (term "0"))
                                              (builtin "One Step Simplification" (formula "10"))
                                             (rule "true_left" (formula "10"))
                                             (rule "inEqSimp_antiSymm" (formula "9") (ifseqformula "1"))
                                             (rule "applyEqRigid" (formula "11") (term "1") (ifseqformula "9"))
                                             (rule "applyEq" (formula "1") (term "0") (ifseqformula "9"))
                                             (rule "leq_literals" (formula "1"))
                                             (rule "true_left" (formula "1"))
                                             (rule "applyEqRigid" (formula "9") (term "0") (ifseqformula "8"))
                                             (rule "qeq_literals" (formula "9"))
                                             (rule "true_left" (formula "9"))
                                             (rule "applyEq" (formula "10") (term "1,0") (ifseqformula "8"))
                                             (rule "translateJavaShiftLeftIntZero" (formula "10") (term "0"))
                                             (rule "eqSymm" (formula "10"))
                                             (rule "applyEqRigid" (formula "2") (term "0,0,1,0,2,0") (ifseqformula "10"))
                                             (rule "div_literals" (formula "2") (term "0,1,0,2,0"))
                                             (rule "times_zero_2" (formula "2") (term "1,0,2,0"))
                                             (rule "add_zero_right" (formula "2") (term "0,2,0"))
                                             (rule "applyEq" (formula "2") (term "0,0,1,0,2,0") (ifseqformula "9"))
                                             (rule "div_literals" (formula "2") (term "0,1,0,2,0"))
                                             (rule "times_zero_2" (formula "2") (term "1,0,2,0"))
                                             (rule "add_zero_right" (formula "2") (term "0,2,0"))
                                             (rule "applyEqRigid" (formula "9") (term "0,0") (ifseqformula "8"))
                                             (rule "polySimp_homoEq" (formula "9") (term "0"))
                                             (rule "mul_literals" (formula "9") (term "1,0,0"))
                                             (rule "polySimp_addComm1" (formula "9") (term "0,0"))
                                             (rule "add_literals" (formula "9") (term "0,0,0"))
                                             (rule "add_zero_left" (formula "9") (term "0,0"))
                                             (rule "applyEqRigid" (formula "3") (term "0") (ifseqformula "8"))
                                             (rule "qeq_literals" (formula "3"))
                                             (rule "closeFalse" (formula "3"))
                                          )
                                       )
                                       (branch "CUT: self.sorted_splitters[b_0] >= value FALSE"
                                           (builtin "One Step Simplification" (formula "14"))
                                          (rule "inEqSimp_geqRight" (formula "28"))
                                          (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                          (rule "applyEq" (formula "25") (term "1") (ifseqformula "15"))
                                          (rule "applyEq" (formula "28") (term "1,1,0,0,0,1,0") (ifseqformula "15"))
                                          (rule "polySimp_addAssoc" (formula "28") (term "1,0,0,0,1,0"))
                                          (rule "add_literals" (formula "28") (term "0,1,0,0,0,1,0"))
                                          (rule "add_zero_left" (formula "28") (term "1,0,0,0,1,0"))
                                          (rule "applyEq" (formula "28") (term "1,1,1,0,0") (ifseqformula "15"))
                                          (rule "polySimp_addAssoc" (formula "28") (term "1,1,0,0"))
                                          (rule "add_literals" (formula "28") (term "0,1,1,0,0"))
                                          (rule "add_zero_left" (formula "28") (term "1,1,0,0"))
                                          (rule "applyEq" (formula "27") (term "1,1,1,0,0") (ifseqformula "15"))
                                          (rule "polySimp_addAssoc" (formula "27") (term "1,1,0,0"))
                                          (rule "add_literals" (formula "27") (term "0,1,1,0,0"))
                                          (rule "applyEq" (formula "24") (term "0") (ifseqformula "15"))
                                          (rule "inEqSimp_homoInEq1" (formula "24"))
                                          (rule "polySimp_mulComm0" (formula "24") (term "1,0"))
                                          (rule "polySimp_rightDist" (formula "24") (term "1,0"))
                                          (rule "mul_literals" (formula "24") (term "0,1,0"))
                                          (rule "polySimp_addAssoc" (formula "24") (term "0"))
                                          (rule "add_literals" (formula "24") (term "0,0"))
                                          (rule "applyEq" (formula "26") (term "1") (ifseqformula "15"))
                                          (rule "applyEq" (formula "8") (term "0") (ifseqformula "15"))
                                          (rule "inEqSimp_homoInEq1" (formula "8"))
                                          (rule "polySimp_pullOutFactor1" (formula "8") (term "0"))
                                          (rule "add_literals" (formula "8") (term "1,0"))
                                          (rule "times_zero_1" (formula "8") (term "0"))
                                          (rule "leq_literals" (formula "8"))
                                          (rule "true_left" (formula "8"))
                                          (rule "applyEq" (formula "22") (term "1") (ifseqformula "14"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                          (rule "polySimp_mulComm0" (formula "1") (term "1"))
                                          (rule "polySimp_rightDist" (formula "1") (term "1"))
                                          (rule "mul_literals" (formula "1") (term "0,1"))
                                          (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                                          (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                                          (rule "inEqSimp_sepNegMonomial0" (formula "23"))
                                          (rule "polySimp_mulLiterals" (formula "23") (term "0"))
                                          (rule "polySimp_elimOne" (formula "23") (term "0"))
                                          (rule "arrayLengthNotNegative" (formula "24") (term "0"))
                                          (rule "arrayLengthIsAShort" (formula "25") (term "0"))
                                           (builtin "One Step Simplification" (formula "25"))
                                          (rule "true_left" (formula "25"))
                                          (rule "arrayLengthNotNegative" (formula "23") (term "0"))
                                          (rule "arrayLengthIsAShort" (formula "24") (term "0"))
                                           (builtin "One Step Simplification" (formula "24"))
                                          (rule "true_left" (formula "24"))
                                          (rule "cut_direct" (formula "11") (term "0"))
                                          (branch "CUT: exp_0 >= 1 TRUE"
                                              (builtin "One Step Simplification" (formula "12"))
                                             (rule "inEqSimp_subsumption1" (formula "8") (ifseqformula "11"))
                                             (rule "leq_literals" (formula "8") (term "0"))
                                              (builtin "One Step Simplification" (formula "8"))
                                             (rule "true_left" (formula "8"))
                                             (rule "newSym_eq" (formula "11") (inst "l=l_0") (inst "newSymDef=mul(d_0, Z(0(#)))"))
                                             (rule "times_zero_1" (formula "11") (term "1,1"))
                                             (rule "add_zero_right" (formula "11") (term "1"))
                                             (rule "applyEqRigid" (formula "12") (term "0,0") (ifseqformula "11"))
                                             (rule "eqSymm" (formula "12"))
                                             (rule "applyEq" (formula "32") (term "0,0,0") (ifseqformula "12"))
                                             (rule "applyEqRigid" (formula "3") (term "0,0,1,0,2,0") (ifseqformula "12"))
                                             (rule "applyEqRigid" (formula "2") (term "0,0") (ifseqformula "12"))
                                             (rule "applyEq" (formula "6") (term "0") (ifseqformula "12"))
                                             (rule "applyEqRigid" (formula "14") (term "0,0") (ifseqformula "12"))
                                             (rule "polySimp_homoEq" (formula "14") (term "0"))
                                             (rule "polySimp_mulLiterals" (formula "14") (term "1,0,0"))
                                             (rule "polySimp_addComm1" (formula "14") (term "0,0"))
                                             (rule "applyEq" (formula "7") (term "0") (ifseqformula "12"))
                                             (rule "inEqSimp_homoInEq0" (formula "7"))
                                             (rule "polySimp_mulLiterals" (formula "7") (term "1,0"))
                                             (rule "polySimp_addComm1" (formula "7") (term "0"))
                                             (rule "applyEqRigid" (formula "14") (term "0,1,0,2,0,1") (ifseqformula "12"))
                                             (rule "polySimp_mulLiterals" (formula "14") (term "1,0,2,0,1"))
                                             (rule "polySimp_addComm0" (formula "14") (term "0,2,0,1"))
                                             (rule "applyEq" (formula "4") (term "0,0,1,0,2,0") (ifseqformula "12"))
                                             (rule "applyEq" (formula "34") (term "0,0,0") (ifseqformula "12"))
                                             (rule "applyEqRigid" (formula "13") (term "1") (ifseqformula "12"))
                                             (rule "applyEqRigid" (formula "2") (term "0,1") (ifseqformula "12"))
                                             (rule "applyEq" (formula "32") (term "1") (ifseqformula "12"))
                                             (rule "polySimp_sepPosMonomial" (formula "14") (term "0"))
                                             (rule "polySimp_mulComm0" (formula "14") (term "1,0"))
                                             (rule "polySimp_rightDist" (formula "14") (term "1,0"))
                                             (rule "mul_literals" (formula "14") (term "0,1,0"))
                                             (rule "polySimp_mulLiterals" (formula "14") (term "1,1,0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "7"))
                                             (rule "polySimp_mulComm0" (formula "7") (term "1"))
                                             (rule "polySimp_rightDist" (formula "7") (term "1"))
                                             (rule "mul_literals" (formula "7") (term "0,1"))
                                             (rule "polySimp_mulLiterals" (formula "7") (term "1,1"))
                                             (rule "elimGcdEq" (formula "32") (inst "elimGcdRightDiv=l_0") (inst "elimGcdLeftDiv=div(mul(l_0, Z(2(#))), Z(2(#)))") (inst "elimGcd=Z(2(#))"))
                                              (builtin "One Step Simplification" (formula "32"))
                                             (rule "mul_literals" (formula "32") (term "0,1,0,1,0"))
                                             (rule "mul_literals" (formula "32") (term "0,1,0,0,0"))
                                             (rule "mul_literals" (formula "32") (term "0,1,0,0,1"))
                                             (rule "add_literals" (formula "32") (term "1,0,0"))
                                             (rule "polySimp_mulComm0" (formula "32") (term "1,0,1,0"))
                                             (rule "polySimp_pullOutFactor0" (formula "32") (term "0,1,0"))
                                             (rule "add_literals" (formula "32") (term "1,0,1,0"))
                                             (rule "times_zero_1" (formula "32") (term "0,1,0"))
                                             (rule "qeq_literals" (formula "32") (term "1,0"))
                                              (builtin "One Step Simplification" (formula "32"))
                                             (rule "polySimp_mulComm0" (formula "32") (term "1,0,0"))
                                             (rule "polySimp_pullOutFactor0" (formula "32") (term "0,0"))
                                             (rule "add_literals" (formula "32") (term "1,0,0"))
                                             (rule "times_zero_1" (formula "32") (term "0,0"))
                                             (rule "leq_literals" (formula "32") (term "0"))
                                              (builtin "One Step Simplification" (formula "32"))
                                             (rule "polySimp_mulComm0" (formula "32") (term "1,0,0"))
                                             (rule "polySimp_pullOutFactor0" (formula "32") (term "0,0"))
                                             (rule "add_literals" (formula "32") (term "1,0,0"))
                                             (rule "times_zero_1" (formula "32") (term "0,0"))
                                              (builtin "One Step Simplification" (formula "32"))
                                             (rule "elimGcdGeq_antec" (formula "6") (inst "elimGcdRightDiv=Z(1(#))") (inst "elimGcdLeftDiv=l_0") (inst "elimGcd=Z(2(#))"))
                                             (rule "polySimp_mulLiterals" (formula "6") (term "1,0,0,0,0,1,0"))
                                             (rule "polySimp_mulLiterals" (formula "6") (term "1,0,1,0"))
                                             (rule "leq_literals" (formula "6") (term "0,0"))
                                              (builtin "One Step Simplification" (formula "6"))
                                             (rule "mul_literals" (formula "6") (term "1,0,0,0,0,0"))
                                             (rule "polySimp_addLiterals" (formula "6") (term "0,0,0,0"))
                                             (rule "add_zero_right" (formula "6") (term "0,0,0,0"))
                                             (rule "polySimp_pullOutFactor0b" (formula "6") (term "0,0"))
                                             (rule "add_literals" (formula "6") (term "1,1,0,0"))
                                             (rule "times_zero_1" (formula "6") (term "1,0,0"))
                                             (rule "add_zero_right" (formula "6") (term "0,0"))
                                             (rule "leq_literals" (formula "6") (term "0"))
                                              (builtin "One Step Simplification" (formula "6"))
                                             (rule "polyDiv_pullOut" (formula "2") (term "1") (inst "polyDivCoeff=l_0"))
                                             (rule "polySimp_mulLiterals" (formula "2") (term "1,0,0,2,1"))
                                             (rule "equal_literals" (formula "2") (term "0,1"))
                                              (builtin "One Step Simplification" (formula "2"))
                                             (rule "polySimp_pullOutFactor0" (formula "2") (term "0,0,1"))
                                             (rule "add_literals" (formula "2") (term "1,0,0,1"))
                                             (rule "times_zero_1" (formula "2") (term "0,0,1"))
                                             (rule "div_literals" (formula "2") (term "0,1"))
                                             (rule "add_zero_left" (formula "2") (term "1"))
                                             (rule "polyDiv_pullOut" (formula "34") (term "0,0") (inst "polyDivCoeff=l_0"))
                                             (rule "equal_literals" (formula "34") (term "0,0,0"))
                                              (builtin "One Step Simplification" (formula "34"))
                                             (rule "polySimp_mulLiterals" (formula "34") (term "1,0,0,0,0"))
                                             (rule "polySimp_pullOutFactor0" (formula "34") (term "0,0,0,0"))
                                             (rule "add_literals" (formula "34") (term "1,0,0,0,0"))
                                             (rule "times_zero_1" (formula "34") (term "0,0,0,0"))
                                             (rule "div_literals" (formula "34") (term "0,0,0"))
                                             (rule "add_zero_left" (formula "34") (term "0,0"))
                                             (rule "polySimp_homoEq" (formula "34"))
                                             (rule "polySimp_mulLiterals" (formula "34") (term "1,0"))
                                             (rule "polySimp_addComm1" (formula "34") (term "0"))
                                             (rule "polySimp_sepPosMonomial" (formula "34"))
                                             (rule "polySimp_mulComm0" (formula "34") (term "1"))
                                             (rule "polySimp_rightDist" (formula "34") (term "1"))
                                             (rule "polySimp_mulLiterals" (formula "34") (term "1,1"))
                                             (rule "mul_literals" (formula "34") (term "0,1"))
                                             (rule "replace_known_right" (formula "14") (term "0") (ifseqformula "34"))
                                              (builtin "One Step Simplification" (formula "14"))
                                             (rule "inEqSimp_strengthen1" (formula "7") (ifseqformula "34"))
                                             (rule "polySimp_addAssoc" (formula "7") (term "1"))
                                             (rule "add_literals" (formula "7") (term "0,1"))
                                             (rule "add_zero_left" (formula "7") (term "1"))
                                             (rule "inEqSimp_contradEq7" (formula "34") (ifseqformula "7"))
                                             (rule "polySimp_rightDist" (formula "34") (term "1,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "34") (term "1,1,0,0"))
                                             (rule "mul_literals" (formula "34") (term "0,1,0,0"))
                                             (rule "polySimp_addAssoc" (formula "34") (term "0,0"))
                                             (rule "polySimp_addComm0" (formula "34") (term "0,0,0"))
                                             (rule "polySimp_pullOutFactor0b" (formula "34") (term "0,0"))
                                             (rule "add_literals" (formula "34") (term "1,1,0,0"))
                                             (rule "times_zero_1" (formula "34") (term "1,0,0"))
                                             (rule "add_zero_right" (formula "34") (term "0,0"))
                                             (rule "leq_literals" (formula "34") (term "0"))
                                              (builtin "One Step Simplification" (formula "34"))
                                             (rule "false_right" (formula "34"))
                                             (rule "polyDiv_pullOut" (formula "4") (term "0,1,0,2,0") (inst "polyDivCoeff=l_0"))
                                             (rule "equal_literals" (formula "4") (term "0,0,1,0,2,0"))
                                              (builtin "One Step Simplification" (formula "4"))
                                             (rule "polySimp_mulLiterals" (formula "4") (term "1,0,0,0,1,0,2,0"))
                                             (rule "polySimp_pullOutFactor0" (formula "4") (term "0,0,0,1,0,2,0"))
                                             (rule "add_literals" (formula "4") (term "1,0,0,0,1,0,2,0"))
                                             (rule "times_zero_1" (formula "4") (term "0,0,0,1,0,2,0"))
                                             (rule "div_literals" (formula "4") (term "0,0,1,0,2,0"))
                                             (rule "add_zero_left" (formula "4") (term "0,1,0,2,0"))
                                             (rule "polySimp_addComm0" (formula "4") (term "0,2,0"))
                                             (rule "polyDiv_pullOut" (formula "3") (term "0,1,0,2,0") (inst "polyDivCoeff=l_0"))
                                             (rule "equal_literals" (formula "3") (term "0,0,1,0,2,0"))
                                              (builtin "One Step Simplification" (formula "3"))
                                             (rule "polySimp_mulLiterals" (formula "3") (term "1,0,0,0,1,0,2,0"))
                                             (rule "polySimp_pullOutFactor0" (formula "3") (term "0,0,0,1,0,2,0"))
                                             (rule "add_literals" (formula "3") (term "1,0,0,0,1,0,2,0"))
                                             (rule "times_zero_1" (formula "3") (term "0,0,0,1,0,2,0"))
                                             (rule "div_literals" (formula "3") (term "0,0,1,0,2,0"))
                                             (rule "add_zero_left" (formula "3") (term "0,1,0,2,0"))
                                             (rule "polySimp_addComm0" (formula "3") (term "0,2,0"))
                                             (rule "inEqSimp_contradInEq0" (formula "3") (ifseqformula "14"))
                                             (rule "andLeft" (formula "3"))
                                             (rule "inEqSimp_homoInEq1" (formula "3"))
                                             (rule "polySimp_mulComm0" (formula "3") (term "1,0"))
                                             (rule "polySimp_rightDist" (formula "3") (term "1,0"))
                                             (rule "mul_literals" (formula "3") (term "0,1,0"))
                                             (rule "polySimp_addAssoc" (formula "3") (term "0"))
                                             (rule "polySimp_addComm0" (formula "3") (term "0,0"))
                                             (rule "polySimp_pullOutFactor1b" (formula "3") (term "0"))
                                             (rule "add_literals" (formula "3") (term "1,1,0"))
                                             (rule "times_zero_1" (formula "3") (term "1,0"))
                                             (rule "add_literals" (formula "3") (term "0"))
                                             (rule "leq_literals" (formula "3"))
                                             (rule "closeFalse" (formula "3"))
                                          )
                                          (branch "CUT: exp_0 >= 1 FALSE"
                                              (builtin "One Step Simplification" (formula "11"))
                                             (rule "true_left" (formula "11"))
                                             (rule "inEqSimp_geqRight" (formula "28"))
                                             (rule "mul_literals" (formula "1") (term "1,0,0"))
                                             (rule "add_literals" (formula "1") (term "0,0"))
                                             (rule "add_zero_left" (formula "1") (term "0"))
                                             (rule "inEqSimp_subsumption0" (formula "10") (ifseqformula "1"))
                                             (rule "leq_literals" (formula "10") (term "0"))
                                              (builtin "One Step Simplification" (formula "10"))
                                             (rule "true_left" (formula "10"))
                                             (rule "inEqSimp_antiSymm" (formula "9") (ifseqformula "1"))
                                             (rule "applyEq" (formula "10") (term "0") (ifseqformula "9"))
                                             (rule "qeq_literals" (formula "10"))
                                             (rule "true_left" (formula "10"))
                                             (rule "applyEqRigid" (formula "10") (term "1") (ifseqformula "9"))
                                             (rule "applyEq" (formula "11") (term "1,0") (ifseqformula "9"))
                                             (rule "translateJavaShiftLeftIntZero" (formula "11") (term "0"))
                                             (rule "eqSymm" (formula "11"))
                                             (rule "applyEqRigid" (formula "1") (term "0") (ifseqformula "9"))
                                             (rule "leq_literals" (formula "1"))
                                             (rule "true_left" (formula "1"))
                                             (rule "applyEqRigid" (formula "11") (term "0,0") (ifseqformula "10"))
                                             (rule "polySimp_homoEq" (formula "11") (term "0"))
                                             (rule "mul_literals" (formula "11") (term "1,0,0"))
                                             (rule "polySimp_addComm1" (formula "11") (term "0,0"))
                                             (rule "add_literals" (formula "11") (term "0,0,0"))
                                             (rule "add_zero_left" (formula "11") (term "0,0"))
                                             (rule "applyEqRigid" (formula "4") (term "0,0,1,0,2,0") (ifseqformula "10"))
                                             (rule "div_literals" (formula "4") (term "0,1,0,2,0"))
                                             (rule "times_zero_2" (formula "4") (term "1,0,2,0"))
                                             (rule "add_zero_right" (formula "4") (term "0,2,0"))
                                             (rule "applyEqRigid" (formula "31") (term "0,0,0") (ifseqformula "10"))
                                             (rule "div_literals" (formula "31") (term "0,0"))
                                             (rule "times_zero_2" (formula "31") (term "0"))
                                             (rule "polySimp_homoEq" (formula "31"))
                                             (rule "times_zero_2" (formula "31") (term "1,0"))
                                             (rule "add_zero_right" (formula "31") (term "0"))
                                             (rule "applyEq" (formula "6") (term "0") (ifseqformula "10"))
                                             (rule "qeq_literals" (formula "6"))
                                             (rule "closeFalse" (formula "6"))
                                          )
                                       )
                                    )
                                 )
                              )
                              (branch
                                 (rule "orRight" (formula "18"))
                                 (rule "polySimp_homoEq" (formula "8") (term "0"))
                                 (rule "polySimp_homoEq" (formula "18"))
                                 (rule "polySimp_homoEq" (formula "7") (term "1"))
                                 (rule "polySimp_mulComm0" (formula "8") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "18") (term "1,0"))
                                 (rule "polySimp_mulComm0" (formula "7") (term "1,0,1"))
                                 (rule "polySimp_rightDist" (formula "8") (term "1,0,0"))
                                 (rule "mul_literals" (formula "8") (term "0,1,0,0"))
                                 (rule "polySimp_rightDist" (formula "18") (term "1,0"))
                                 (rule "mul_literals" (formula "18") (term "0,1,0"))
                                 (rule "polySimp_rightDist" (formula "7") (term "1,0,1"))
                                 (rule "polySimp_mulLiterals" (formula "7") (term "1,1,0,1"))
                                 (rule "polySimp_elimOne" (formula "7") (term "1,1,0,1"))
                                 (rule "polySimp_mulComm0" (formula "7") (term "0,1,0,1"))
                                 (rule "polySimp_addAssoc" (formula "8") (term "0,0"))
                                 (rule "polySimp_addComm0" (formula "8") (term "0,0,0"))
                                 (rule "polySimp_addAssoc" (formula "18") (term "0"))
                                 (rule "polySimp_addComm1" (formula "18") (term "0,0"))
                                 (rule "polySimp_addComm0" (formula "18") (term "0,0,0"))
                                 (rule "polySimp_addAssoc" (formula "7") (term "0,1"))
                                 (rule "inEqSimp_ltRight" (formula "16"))
                                 (rule "polySimp_mulComm0" (formula "1") (term "0,0"))
                                 (rule "inEqSimp_geqRight" (formula "19"))
                                 (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                 (rule "inEqSimp_gtToGeq" (formula "3"))
                                 (rule "mul_literals" (formula "3") (term "1,0,0"))
                                 (rule "add_literals" (formula "3") (term "0,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "9") (term "0"))
                                 (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,0"))
                                 (rule "inEqSimp_homoInEq0" (formula "4"))
                                 (rule "polySimp_mulComm0" (formula "4") (term "1,0"))
                                 (rule "polySimp_rightDist" (formula "4") (term "1,0"))
                                 (rule "mul_literals" (formula "4") (term "0,1,0"))
                                 (rule "polySimp_addAssoc" (formula "4") (term "0"))
                                 (rule "polySimp_addComm0" (formula "4") (term "0,0"))
                                 (rule "inEqSimp_homoInEq0" (formula "5"))
                                 (rule "polySimp_addComm1" (formula "5") (term "0"))
                                 (rule "polySimp_sepNegMonomial" (formula "10") (term "0"))
                                 (rule "polySimp_mulLiterals" (formula "10") (term "0,0"))
                                 (rule "polySimp_elimOne" (formula "10") (term "0,0"))
                                 (rule "polySimp_sepNegMonomial" (formula "19"))
                                 (rule "polySimp_mulLiterals" (formula "19") (term "0"))
                                 (rule "polySimp_elimOne" (formula "19") (term "0"))
                                 (rule "polySimp_sepPosMonomial" (formula "9") (term "1"))
                                 (rule "polySimp_mulComm0" (formula "9") (term "1,1"))
                                 (rule "polySimp_rightDist" (formula "9") (term "1,1"))
                                 (rule "polySimp_mulLiterals" (formula "9") (term "1,1,1"))
                                 (rule "mul_literals" (formula "9") (term "0,1,1"))
                                 (rule "polySimp_elimOne" (formula "9") (term "1,1,1"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                                 (rule "polySimp_mulLiterals" (formula "2") (term "1"))
                                 (rule "polySimp_elimOne" (formula "2") (term "1"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                 (rule "polySimp_mulComm0" (formula "1") (term "1"))
                                 (rule "polySimp_rightDist" (formula "1") (term "1"))
                                 (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                                 (rule "mul_literals" (formula "1") (term "0,1"))
                                 (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "3"))
                                 (rule "mul_literals" (formula "3") (term "1"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "0"))
                                 (rule "polySimp_mulComm0" (formula "9") (term "1,0"))
                                 (rule "polySimp_rightDist" (formula "9") (term "1,0"))
                                 (rule "polySimp_mulLiterals" (formula "9") (term "1,1,0"))
                                 (rule "mul_literals" (formula "9") (term "0,1,0"))
                                 (rule "polySimp_elimOne" (formula "9") (term "1,1,0"))
                                 (rule "inEqSimp_sepNegMonomial1" (formula "4"))
                                 (rule "polySimp_mulLiterals" (formula "4") (term "0"))
                                 (rule "polySimp_elimOne" (formula "4") (term "0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "5"))
                                 (rule "polySimp_mulComm0" (formula "5") (term "1"))
                                 (rule "polySimp_rightDist" (formula "5") (term "1"))
                                 (rule "mul_literals" (formula "5") (term "0,1"))
                                 (rule "polySimp_mulLiterals" (formula "5") (term "1,1"))
                                 (rule "polySimp_elimOne" (formula "5") (term "1,1"))
                                 (rule "inEqSimp_contradInEq0" (formula "2") (ifseqformula "1"))
                                 (rule "andLeft" (formula "2"))
                                 (rule "inEqSimp_homoInEq1" (formula "2"))
                                 (rule "polySimp_mulComm0" (formula "2") (term "1,0"))
                                 (rule "polySimp_rightDist" (formula "2") (term "1,0"))
                                 (rule "mul_literals" (formula "2") (term "0,1,0"))
                                 (rule "polySimp_addAssoc" (formula "2") (term "0"))
                                 (rule "polySimp_addComm0" (formula "2") (term "0,0"))
                                 (rule "polySimp_pullOutFactor1b" (formula "2") (term "0"))
                                 (rule "add_literals" (formula "2") (term "1,1,0"))
                                 (rule "times_zero_1" (formula "2") (term "1,0"))
                                 (rule "add_zero_right" (formula "2") (term "0"))
                                 (rule "leq_literals" (formula "2"))
                                 (rule "closeFalse" (formula "2"))
                              )
                           )
                           (branch
                              (rule "polySimp_homoEq" (formula "8") (term "0"))
                              (rule "polySimp_homoEq" (formula "7") (term "1"))
                              (rule "polySimp_mulComm0" (formula "8") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "7") (term "1,0,1"))
                              (rule "polySimp_rightDist" (formula "8") (term "1,0,0"))
                              (rule "mul_literals" (formula "8") (term "0,1,0,0"))
                              (rule "polySimp_rightDist" (formula "7") (term "1,0,1"))
                              (rule "polySimp_mulLiterals" (formula "7") (term "1,1,0,1"))
                              (rule "polySimp_elimOne" (formula "7") (term "1,1,0,1"))
                              (rule "polySimp_mulComm0" (formula "7") (term "0,1,0,1"))
                              (rule "polySimp_addAssoc" (formula "8") (term "0,0"))
                              (rule "polySimp_addComm0" (formula "8") (term "0,0,0"))
                              (rule "polySimp_addAssoc" (formula "7") (term "0,1"))
                              (rule "precOfInt" (formula "18"))
                              (rule "inEqSimp_ltRight" (formula "16"))
                              (rule "polySimp_mulComm0" (formula "1") (term "0,0"))
                              (rule "inEqSimp_gtToGeq" (formula "2"))
                              (rule "mul_literals" (formula "2") (term "1,0,0"))
                              (rule "add_literals" (formula "2") (term "0,0"))
                              (rule "inEqSimp_ltToLeq" (formula "8") (term "0"))
                              (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,0"))
                              (rule "inEqSimp_ltToLeq" (formula "18") (term "1"))
                              (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,1"))
                              (rule "polySimp_addAssoc" (formula "18") (term "0,1"))
                              (rule "polySimp_addComm1" (formula "18") (term "0,0,1"))
                              (rule "add_literals" (formula "18") (term "0,0,0,1"))
                              (rule "add_zero_left" (formula "18") (term "0,0,1"))
                              (rule "polySimp_pullOutFactor2" (formula "18") (term "0,1"))
                              (rule "add_literals" (formula "18") (term "1,0,1"))
                              (rule "times_zero_1" (formula "18") (term "0,1"))
                              (rule "leq_literals" (formula "18") (term "1"))
                               (builtin "One Step Simplification" (formula "18"))
                              (rule "inEqSimp_leqRight" (formula "18"))
                              (rule "add_zero_right" (formula "1") (term "0"))
                              (rule "polySimp_rightDist" (formula "1") (term "1,0"))
                              (rule "mul_literals" (formula "1") (term "0,1,0"))
                              (rule "polySimp_addAssoc" (formula "1") (term "0"))
                              (rule "add_literals" (formula "1") (term "0,0"))
                              (rule "add_zero_left" (formula "1") (term "0"))
                              (rule "inEqSimp_homoInEq0" (formula "5"))
                              (rule "polySimp_addComm1" (formula "5") (term "0"))
                              (rule "inEqSimp_homoInEq0" (formula "4"))
                              (rule "polySimp_mulComm0" (formula "4") (term "1,0"))
                              (rule "polySimp_rightDist" (formula "4") (term "1,0"))
                              (rule "mul_literals" (formula "4") (term "0,1,0"))
                              (rule "polySimp_addAssoc" (formula "4") (term "0"))
                              (rule "polySimp_addComm0" (formula "4") (term "0,0"))
                              (rule "polySimp_sepNegMonomial" (formula "10") (term "0"))
                              (rule "polySimp_mulLiterals" (formula "10") (term "0,0"))
                              (rule "polySimp_elimOne" (formula "10") (term "0,0"))
                              (rule "polySimp_sepPosMonomial" (formula "9") (term "1"))
                              (rule "polySimp_mulComm0" (formula "9") (term "1,1"))
                              (rule "polySimp_rightDist" (formula "9") (term "1,1"))
                              (rule "mul_literals" (formula "9") (term "0,1,1"))
                              (rule "polySimp_mulLiterals" (formula "9") (term "1,1,1"))
                              (rule "polySimp_elimOne" (formula "9") (term "1,1,1"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                              (rule "polySimp_mulLiterals" (formula "2") (term "1"))
                              (rule "polySimp_elimOne" (formula "2") (term "1"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "3"))
                              (rule "mul_literals" (formula "3") (term "1"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "0"))
                              (rule "polySimp_mulComm0" (formula "9") (term "1,0"))
                              (rule "polySimp_rightDist" (formula "9") (term "1,0"))
                              (rule "mul_literals" (formula "9") (term "0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "9") (term "1,1,0"))
                              (rule "polySimp_elimOne" (formula "9") (term "1,1,0"))
                              (rule "inEqSimp_invertInEq1" (formula "1"))
                              (rule "times_zero_2" (formula "1") (term "1"))
                              (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                              (rule "polySimp_elimOne" (formula "1") (term "0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "5"))
                              (rule "polySimp_mulComm0" (formula "5") (term "1"))
                              (rule "polySimp_rightDist" (formula "5") (term "1"))
                              (rule "mul_literals" (formula "5") (term "0,1"))
                              (rule "polySimp_mulLiterals" (formula "5") (term "1,1"))
                              (rule "polySimp_elimOne" (formula "5") (term "1,1"))
                              (rule "inEqSimp_sepNegMonomial1" (formula "4"))
                              (rule "polySimp_mulLiterals" (formula "4") (term "0"))
                              (rule "polySimp_elimOne" (formula "4") (term "0"))
                              (rule "inEqSimp_antiSymm" (formula "6") (ifseqformula "1"))
                              (rule "applyEqRigid" (formula "7") (term "0") (ifseqformula "6"))
                              (rule "qeq_literals" (formula "7"))
                              (rule "true_left" (formula "7"))
                              (rule "applyEqRigid" (formula "7") (term "1") (ifseqformula "6"))
                              (rule "applyEqRigid" (formula "8") (term "1,0") (ifseqformula "6"))
                              (rule "translateJavaShiftLeftIntZero" (formula "8") (term "0"))
                              (rule "eqSymm" (formula "8"))
                              (rule "applyEq" (formula "1") (term "0") (ifseqformula "6"))
                              (rule "leq_literals" (formula "1"))
                              (rule "true_left" (formula "1"))
                              (rule "applyEqRigid" (formula "3") (term "0") (ifseqformula "7"))
                              (rule "inEqSimp_homoInEq0" (formula "3"))
                              (rule "mul_literals" (formula "3") (term "1,0"))
                              (rule "polySimp_addComm1" (formula "3") (term "0"))
                              (rule "add_literals" (formula "3") (term "0,0"))
                              (rule "add_zero_left" (formula "3") (term "0"))
                              (rule "applyEqRigid" (formula "8") (term "0,1,0,2,0,0") (ifseqformula "7"))
                              (rule "mul_literals" (formula "8") (term "1,0,2,0,0"))
                              (rule "polySimp_addComm0" (formula "8") (term "0,2,0,0"))
                              (rule "applyEqRigid" (formula "2") (term "0") (ifseqformula "7"))
                              (rule "qeq_literals" (formula "2"))
                              (rule "closeFalse" (formula "2"))
                           )
                        )
                     )
                  )
               )
               (branch "Null Reference (x_arr_1 = null)"
                  (rule "false_right" (formula "18"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "polySimp_homoEq" (formula "8") (term "1"))
                  (rule "polySimp_homoEq" (formula "9") (term "0"))
                  (rule "polySimp_mulComm0" (formula "8") (term "1,0,1"))
                  (rule "polySimp_mulComm0" (formula "9") (term "1,0,0"))
                  (rule "polySimp_rightDist" (formula "8") (term "1,0,1"))
                  (rule "polySimp_mulLiterals" (formula "8") (term "1,1,0,1"))
                  (rule "polySimp_elimOne" (formula "8") (term "1,1,0,1"))
                  (rule "polySimp_mulComm0" (formula "8") (term "0,1,0,1"))
                  (rule "polySimp_rightDist" (formula "9") (term "1,0,0"))
                  (rule "mul_literals" (formula "9") (term "0,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "8") (term "0,1"))
                  (rule "polySimp_addAssoc" (formula "9") (term "0,0"))
                  (rule "polySimp_addComm0" (formula "9") (term "0,0,0"))
                  (rule "inEqSimp_gtToGeq" (formula "2"))
                  (rule "mul_literals" (formula "2") (term "1,0,0"))
                  (rule "add_literals" (formula "2") (term "0,0"))
                  (rule "inEqSimp_ltToLeq" (formula "8") (term "0"))
                  (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,0"))
                  (rule "inEqSimp_homoInEq0" (formula "4"))
                  (rule "polySimp_addComm1" (formula "4") (term "0"))
                  (rule "inEqSimp_homoInEq0" (formula "3"))
                  (rule "polySimp_mulComm0" (formula "3") (term "1,0"))
                  (rule "polySimp_rightDist" (formula "3") (term "1,0"))
                  (rule "mul_literals" (formula "3") (term "0,1,0"))
                  (rule "polySimp_addAssoc" (formula "3") (term "0"))
                  (rule "polySimp_addComm0" (formula "3") (term "0,0"))
                  (rule "applyEq" (formula "8") (term "1,1,0,0") (ifseqformula "1"))
                  (rule "applyEq" (formula "9") (term "1,0,1") (ifseqformula "1"))
                  (rule "polySimp_sepPosMonomial" (formula "8") (term "1"))
                  (rule "polySimp_mulComm0" (formula "8") (term "1,1"))
                  (rule "polySimp_rightDist" (formula "8") (term "1,1"))
                  (rule "mul_literals" (formula "8") (term "0,1,1"))
                  (rule "polySimp_mulLiterals" (formula "8") (term "1,1,1"))
                  (rule "polySimp_elimOne" (formula "8") (term "1,1,1"))
                  (rule "polySimp_sepNegMonomial" (formula "9") (term "0"))
                  (rule "polySimp_mulLiterals" (formula "9") (term "0,0"))
                  (rule "polySimp_elimOne" (formula "9") (term "0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                  (rule "mul_literals" (formula "2") (term "1"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "4"))
                  (rule "polySimp_mulComm0" (formula "4") (term "1"))
                  (rule "polySimp_rightDist" (formula "4") (term "1"))
                  (rule "mul_literals" (formula "4") (term "0,1"))
                  (rule "polySimp_mulLiterals" (formula "4") (term "1,1"))
                  (rule "polySimp_elimOne" (formula "4") (term "1,1"))
                  (rule "inEqSimp_sepNegMonomial1" (formula "3"))
                  (rule "polySimp_mulLiterals" (formula "3") (term "0"))
                  (rule "polySimp_elimOne" (formula "3") (term "0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "0"))
                  (rule "polySimp_mulComm0" (formula "8") (term "1,0"))
                  (rule "polySimp_rightDist" (formula "8") (term "1,0"))
                  (rule "mul_literals" (formula "8") (term "0,1,0"))
                  (rule "polySimp_mulLiterals" (formula "8") (term "1,1,0"))
                  (rule "polySimp_elimOne" (formula "8") (term "1,1,0"))
                  (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "3"))
                  (rule "mul_literals" (formula "2") (term "0,0"))
                  (rule "polySimp_addAssoc" (formula "2") (term "0"))
                  (rule "add_literals" (formula "2") (term "0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                  (rule "mul_literals" (formula "2") (term "1"))
                  (rule "Free_class_invariant_axiom_for_de_wiesler_Tree" (formula "17"))
                  (rule "true_left" (formula "17"))
                  (rule "Class_invariant_axiom_for_de_wiesler_Tree" (formula "16"))
                   (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "1")))
                  (rule "closeFalse" (formula "16"))
               )
               (branch "Index Out of Bounds (x_arr_1 != null, but x_12 Out of Bounds!)"
                  (rule "false_right" (formula "18"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "andLeft" (formula "1"))
                  (rule "notLeft" (formula "1"))
                  (rule "polySimp_homoEq" (formula "8") (term "1"))
                  (rule "polySimp_homoEq" (formula "9") (term "0"))
                  (rule "polySimp_mulComm0" (formula "8") (term "1,0,1"))
                  (rule "polySimp_mulComm0" (formula "9") (term "1,0,0"))
                  (rule "polySimp_rightDist" (formula "8") (term "1,0,1"))
                  (rule "polySimp_mulLiterals" (formula "8") (term "1,1,0,1"))
                  (rule "polySimp_elimOne" (formula "8") (term "1,1,0,1"))
                  (rule "polySimp_mulComm0" (formula "8") (term "0,1,0,1"))
                  (rule "polySimp_rightDist" (formula "9") (term "1,0,0"))
                  (rule "mul_literals" (formula "9") (term "0,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "8") (term "0,1"))
                  (rule "polySimp_addAssoc" (formula "9") (term "0,0"))
                  (rule "polySimp_addComm0" (formula "9") (term "0,0,0"))
                  (rule "inEqSimp_gtToGeq" (formula "2"))
                  (rule "mul_literals" (formula "2") (term "1,0,0"))
                  (rule "add_literals" (formula "2") (term "0,0"))
                  (rule "inEqSimp_ltToLeq" (formula "8") (term "0"))
                  (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,0"))
                  (rule "inEqSimp_ltToLeq" (formula "1") (term "1"))
                  (rule "times_zero_1" (formula "1") (term "1,0,0,1"))
                  (rule "add_zero_right" (formula "1") (term "0,0,1"))
                  (rule "polySimp_addAssoc" (formula "1") (term "0,1"))
                  (rule "inEqSimp_homoInEq0" (formula "4"))
                  (rule "polySimp_addComm1" (formula "4") (term "0"))
                  (rule "inEqSimp_homoInEq0" (formula "3"))
                  (rule "polySimp_mulComm0" (formula "3") (term "1,0"))
                  (rule "polySimp_rightDist" (formula "3") (term "1,0"))
                  (rule "mul_literals" (formula "3") (term "0,1,0"))
                  (rule "polySimp_addAssoc" (formula "3") (term "0"))
                  (rule "polySimp_addComm0" (formula "3") (term "0,0"))
                  (rule "polySimp_sepPosMonomial" (formula "8") (term "1"))
                  (rule "polySimp_mulComm0" (formula "8") (term "1,1"))
                  (rule "polySimp_rightDist" (formula "8") (term "1,1"))
                  (rule "mul_literals" (formula "8") (term "0,1,1"))
                  (rule "polySimp_mulLiterals" (formula "8") (term "1,1,1"))
                  (rule "polySimp_elimOne" (formula "8") (term "1,1,1"))
                  (rule "polySimp_sepNegMonomial" (formula "9") (term "0"))
                  (rule "polySimp_mulLiterals" (formula "9") (term "0,0"))
                  (rule "polySimp_elimOne" (formula "9") (term "0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                  (rule "mul_literals" (formula "2") (term "1"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "0"))
                  (rule "polySimp_mulComm0" (formula "8") (term "1,0"))
                  (rule "polySimp_rightDist" (formula "8") (term "1,0"))
                  (rule "polySimp_mulLiterals" (formula "8") (term "1,1,0"))
                  (rule "mul_literals" (formula "8") (term "0,1,0"))
                  (rule "polySimp_elimOne" (formula "8") (term "1,1,0"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "1") (term "1"))
                  (rule "polySimp_mulLiterals" (formula "1") (term "0,1"))
                  (rule "polySimp_elimOne" (formula "1") (term "0,1"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "4"))
                  (rule "polySimp_mulComm0" (formula "4") (term "1"))
                  (rule "polySimp_rightDist" (formula "4") (term "1"))
                  (rule "mul_literals" (formula "4") (term "0,1"))
                  (rule "polySimp_mulLiterals" (formula "4") (term "1,1"))
                  (rule "polySimp_elimOne" (formula "4") (term "1,1"))
                  (rule "inEqSimp_sepNegMonomial1" (formula "3"))
                  (rule "polySimp_mulLiterals" (formula "3") (term "0"))
                  (rule "polySimp_elimOne" (formula "3") (term "0"))
                  (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "3"))
                  (rule "mul_literals" (formula "2") (term "0,0"))
                  (rule "polySimp_addAssoc" (formula "2") (term "0"))
                  (rule "add_literals" (formula "2") (term "0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                  (rule "mul_literals" (formula "2") (term "1"))
                  (rule "Class_invariant_axiom_for_de_wiesler_Tree" (formula "16"))
                   (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "18")))
                  (rule "translateJavaSubInt" (formula "16") (term "3,0,1"))
                  (rule "andLeft" (formula "16"))
                  (rule "andLeft" (formula "16"))
                  (rule "andLeft" (formula "16"))
                  (rule "andLeft" (formula "16"))
                  (rule "andLeft" (formula "18"))
                  (rule "andLeft" (formula "16"))
                  (rule "andLeft" (formula "17"))
                  (rule "notLeft" (formula "16"))
                  (rule "polySimp_elimSub" (formula "22") (term "3,0"))
                  (rule "mul_literals" (formula "22") (term "1,3,0"))
                  (rule "polySimp_addComm0" (formula "22") (term "3,0"))
                  (rule "inEqSimp_commuteLeq" (formula "21"))
                  (rule "inEqSimp_commuteLeq" (formula "19"))
                  (rule "inEqSimp_commuteLeq" (formula "20"))
                  (rule "inEqSimp_commuteLeq" (formula "16"))
                  (rule "applyEq" (formula "22") (term "1,3,0") (ifseqformula "18"))
                  (rule "applyEq" (formula "10") (term "0,0") (ifseqformula "18"))
                  (rule "applyEq" (formula "21") (term "1") (ifseqformula "18"))
                  (rule "applyEq" (formula "5") (term "0") (ifseqformula "18"))
                  (rule "applyEq" (formula "19") (term "0") (ifseqformula "18"))
                  (rule "applyEq" (formula "20") (term "1") (ifseqformula "18"))
                  (rule "inEqSimp_exactShadow3" (formula "7") (ifseqformula "17"))
                  (rule "polySimp_mulComm0" (formula "7") (term "0,0"))
                  (rule "polySimp_addComm0" (formula "7") (term "0"))
                  (rule "inEqSimp_sepNegMonomial1" (formula "7"))
                  (rule "polySimp_mulLiterals" (formula "7") (term "0"))
                  (rule "polySimp_elimOne" (formula "7") (term "0"))
                  (rule "Free_class_invariant_axiom_for_de_wiesler_Tree" (formula "24"))
                  (rule "true_left" (formula "24"))
                  (rule "commute_or" (formula "10"))
                  (rule "commute_or" (formula "1"))
                  (rule "Definition_axiom_for_isSortedSliceTransitive_in_de_wiesler_Functions" (formula "23") (term "0") (inst "j=j") (inst "i=i"))
                   (builtin "One Step Simplification" (formula "23"))
                  (rule "inEqSimp_ltToLeq" (formula "23") (term "1,0,0,1,0"))
                  (rule "polySimp_rightDist" (formula "23") (term "1,0,0,1,0,0,1,0"))
                  (rule "mul_literals" (formula "23") (term "0,1,0,0,1,0,0,1,0"))
                  (rule "polySimp_addAssoc" (formula "23") (term "0,0,1,0,0,1,0"))
                  (rule "add_literals" (formula "23") (term "0,0,0,1,0,0,1,0"))
                  (rule "inEqSimp_ltToLeq" (formula "23") (term "1,0,0"))
                  (rule "polySimp_rightDist" (formula "23") (term "1,0,0,1,0,0"))
                  (rule "mul_literals" (formula "23") (term "0,1,0,0,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "23") (term "0,0,1,0,0"))
                  (rule "add_literals" (formula "23") (term "0,0,0,1,0,0"))
                  (rule "inEqSimp_commuteLeq" (formula "23") (term "0,0,0"))
                  (rule "inEqSimp_commuteLeq" (formula "23") (term "0,0,0,1,0"))
                  (rule "inEqSimp_commuteLeq" (formula "23") (term "1,0,1,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "1,0,0,1,0"))
                  (rule "polySimp_mulComm0" (formula "23") (term "1,1,0,0,1,0"))
                  (rule "polySimp_rightDist" (formula "23") (term "1,1,0,0,1,0"))
                  (rule "mul_literals" (formula "23") (term "0,1,1,0,0,1,0"))
                  (rule "polySimp_mulLiterals" (formula "23") (term "1,1,1,0,0,1,0"))
                  (rule "polySimp_elimOne" (formula "23") (term "1,1,1,0,0,1,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "23") (term "1,1,0,0"))
                  (rule "polySimp_rightDist" (formula "23") (term "1,1,0,0"))
                  (rule "mul_literals" (formula "23") (term "0,1,1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "23") (term "1,1,1,0,0"))
                  (rule "polySimp_elimOne" (formula "23") (term "1,1,1,0,0"))
                  (rule "nnf_imp2or" (formula "23") (term "0"))
                  (rule "nnf_notAnd" (formula "23") (term "0,0"))
                  (rule "inEqSimp_notLeq" (formula "23") (term "1,0,0"))
                  (rule "polySimp_rightDist" (formula "23") (term "1,0,0,1,0,0"))
                  (rule "mul_literals" (formula "23") (term "0,1,0,0,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "23") (term "0,0,1,0,0"))
                  (rule "add_literals" (formula "23") (term "0,0,0,1,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "23") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "23") (term "1,1,0,0"))
                  (rule "polySimp_rightDist" (formula "23") (term "1,1,0,0"))
                  (rule "mul_literals" (formula "23") (term "0,1,1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "23") (term "1,1,1,0,0"))
                  (rule "polySimp_elimOne" (formula "23") (term "1,1,1,0,0"))
                  (rule "inEqSimp_notGeq" (formula "23") (term "0,0,0"))
                  (rule "times_zero_1" (formula "23") (term "1,0,0,0,0,0"))
                  (rule "add_zero_right" (formula "23") (term "0,0,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "0,0,0"))
                  (rule "mul_literals" (formula "23") (term "1,0,0,0"))
                  (rule "nnf_imp2or" (formula "23") (term "0,1,0"))
                  (rule "nnf_notAnd" (formula "23") (term "0,0,1,0"))
                  (rule "inEqSimp_notGeq" (formula "23") (term "0,0,0,1,0"))
                  (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,0,0,0,1,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "0,0,0,1,0"))
                  (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,0,1,0"))
                  (rule "polySimp_rightDist" (formula "23") (term "1,0,0,0,1,0"))
                  (rule "mul_literals" (formula "23") (term "0,1,0,0,0,1,0"))
                  (rule "polySimp_mulLiterals" (formula "23") (term "1,1,0,0,0,1,0"))
                  (rule "polySimp_elimOne" (formula "23") (term "1,1,0,0,0,1,0"))
                  (rule "inEqSimp_notLeq" (formula "23") (term "1,0,0,1,0"))
                  (rule "polySimp_rightDist" (formula "23") (term "1,0,0,1,0,0,1,0"))
                  (rule "mul_literals" (formula "23") (term "0,1,0,0,1,0,0,1,0"))
                  (rule "polySimp_addAssoc" (formula "23") (term "0,0,1,0,0,1,0"))
                  (rule "add_literals" (formula "23") (term "0,0,0,1,0,0,1,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "23") (term "1,0,0,1,0"))
                  (rule "polySimp_mulComm0" (formula "23") (term "1,1,0,0,1,0"))
                  (rule "polySimp_rightDist" (formula "23") (term "1,1,0,0,1,0"))
                  (rule "polySimp_mulLiterals" (formula "23") (term "1,1,1,0,0,1,0"))
                  (rule "mul_literals" (formula "23") (term "0,1,1,0,0,1,0"))
                  (rule "polySimp_elimOne" (formula "23") (term "1,1,1,0,0,1,0"))
                  (rule "commute_or" (formula "23") (term "0,0,1,0"))
                  (rule "cut_direct" (formula "11") (term "1"))
                  (branch "CUT: self.sorted_splitters[b_0] >= value TRUE"
                      (builtin "One Step Simplification" (formula "12"))
                     (rule "true_left" (formula "12"))
                     (rule "jdiv_axiom" (formula "1") (term "0,0"))
                     (rule "eqSymm" (formula "1"))
                     (rule "inEqSimp_subsumption1" (formula "1") (term "0,0") (ifseqformula "4"))
                     (rule "leq_literals" (formula "1") (term "0,0,0"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "eqSymm" (formula "1"))
                     (rule "applyEqRigid" (formula "2") (term "0,0") (ifseqformula "1"))
                     (rule "applyEqRigid" (formula "2") (term "0,1,1,1") (ifseqformula "1"))
                     (rule "all_pull_out3" (formula "24") (term "0"))
                     (rule "shift_paren_or" (formula "24") (term "0,0"))
                     (rule "shift_paren_or" (formula "24") (term "0,0,0"))
                     (rule "div_axiom" (formula "1") (term "1") (inst "quotient=quotient_0"))
                     (rule "equal_literals" (formula "1") (term "0"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "mul_literals" (formula "1") (term "1,1,1,1"))
                     (rule "qeq_literals" (formula "1") (term "0,1"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "andLeft" (formula "1"))
                     (rule "andLeft" (formula "1"))
                     (rule "polySimp_addComm1" (formula "3") (term "1"))
                     (rule "add_literals" (formula "3") (term "0,1"))
                     (rule "inEqSimp_commuteLeq" (formula "2"))
                     (rule "inEqSimp_homoInEq1" (formula "3"))
                     (rule "polySimp_mulLiterals" (formula "3") (term "1,0"))
                     (rule "polySimp_addComm1" (formula "3") (term "0"))
                     (rule "applyEqRigid" (formula "5") (term "0,1,1,1") (ifseqformula "1"))
                     (rule "polySimp_addComm0" (formula "5") (term "1,1"))
                     (rule "applyEq" (formula "5") (term "0,0") (ifseqformula "1"))
                     (rule "inEqSimp_homoInEq1" (formula "5") (term "0"))
                     (rule "polySimp_addComm1" (formula "5") (term "0,0"))
                     (rule "applyEq" (formula "4") (term "1") (ifseqformula "1"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "3"))
                     (rule "polySimp_mulComm0" (formula "3") (term "1"))
                     (rule "polySimp_rightDist" (formula "3") (term "1"))
                     (rule "mul_literals" (formula "3") (term "0,1"))
                     (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "5") (term "0"))
                     (rule "polySimp_mulComm0" (formula "5") (term "1,0"))
                     (rule "polySimp_rightDist" (formula "5") (term "1,0"))
                     (rule "mul_literals" (formula "5") (term "0,1,0"))
                     (rule "polySimp_mulLiterals" (formula "5") (term "1,1,0"))
                     (rule "polySimp_elimOne" (formula "5") (term "1,1,0"))
                     (rule "inEqSimp_exactShadow3" (formula "7") (ifseqformula "3"))
                     (rule "mul_literals" (formula "7") (term "0,0"))
                     (rule "polySimp_addAssoc" (formula "7") (term "0"))
                     (rule "add_literals" (formula "7") (term "0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "7"))
                     (rule "mul_literals" (formula "7") (term "1"))
                     (rule "elimGcdGeq_antec" (formula "7") (inst "elimGcd=Z(2(#))") (inst "elimGcdLeftDiv=quotient_0") (inst "elimGcdRightDiv=Z(1(#))"))
                     (rule "polySimp_mulLiterals" (formula "7") (term "1,0,1,0"))
                     (rule "polySimp_mulLiterals" (formula "7") (term "1,0,0,0,0,1,0"))
                     (rule "leq_literals" (formula "7") (term "0,0"))
                      (builtin "One Step Simplification" (formula "7"))
                     (rule "mul_literals" (formula "7") (term "1,0,0,0,0,0"))
                     (rule "polySimp_addLiterals" (formula "7") (term "0,0,0,0"))
                     (rule "add_literals" (formula "7") (term "0,0,0,0"))
                     (rule "polySimp_pullOutFactor0b" (formula "7") (term "0,0"))
                     (rule "add_literals" (formula "7") (term "1,1,0,0"))
                     (rule "times_zero_1" (formula "7") (term "1,0,0"))
                     (rule "add_zero_right" (formula "7") (term "0,0"))
                     (rule "leq_literals" (formula "7") (term "0"))
                      (builtin "One Step Simplification" (formula "7"))
                     (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "9"))
                     (rule "polySimp_mulAssoc" (formula "2") (term "0,0"))
                     (rule "polySimp_mulComm0" (formula "2") (term "0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "2") (term "0,0"))
                     (rule "polySimp_addAssoc" (formula "2") (term "0"))
                     (rule "polySimp_addComm0" (formula "2") (term "0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                     (rule "polySimp_mulComm0" (formula "2") (term "1"))
                     (rule "polySimp_rightDist" (formula "2") (term "1"))
                     (rule "mul_literals" (formula "2") (term "0,1"))
                     (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
                     (rule "arrayLengthNotNegative" (formula "28") (term "0"))
                     (rule "arrayLengthIsAShort" (formula "29") (term "0"))
                      (builtin "One Step Simplification" (formula "29"))
                     (rule "true_left" (formula "29"))
                     (rule "arrayLengthIsAShort" (formula "27") (term "0"))
                      (builtin "One Step Simplification" (formula "27"))
                     (rule "true_left" (formula "27"))
                     (rule "arrayLengthNotNegative" (formula "27") (term "0"))
                     (rule "cut_direct" (formula "16") (term "1"))
                     (branch "CUT: self.sorted_splitters[b_0 + d_0 * -1] <= -1 + value TRUE"
                         (builtin "One Step Simplification" (formula "17"))
                        (rule "true_left" (formula "17"))
                        (rule "onlyCreatedObjectsAreReferencedFinal" (formula "33") (term "0") (ifseqformula "19") (ifseqformula "20"))
                        (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "34"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "onlyCreatedObjectsAreReferencedFinal" (formula "33") (term "0") (ifseqformula "20") (ifseqformula "21"))
                        (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "34"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "cut_direct" (formula "8") (term "0"))
                        (branch "CUT: b_0 <= -1 + quotient_0 TRUE"
                            (builtin "One Step Simplification" (formula "9"))
                           (rule "true_left" (formula "9"))
                           (rule "inEqSimp_exactShadow3" (formula "4") (ifseqformula "8"))
                           (rule "polySimp_rightDist" (formula "4") (term "0,0"))
                           (rule "polySimp_mulLiterals" (formula "4") (term "1,0,0"))
                           (rule "mul_literals" (formula "4") (term "0,0,0"))
                           (rule "polySimp_addAssoc" (formula "4") (term "0"))
                           (rule "polySimp_addComm1" (formula "4") (term "0,0"))
                           (rule "add_literals" (formula "4") (term "0,0,0"))
                           (rule "add_zero_left" (formula "4") (term "0,0"))
                           (rule "polySimp_pullOutFactor2" (formula "4") (term "0"))
                           (rule "add_literals" (formula "4") (term "1,0"))
                           (rule "inEqSimp_invertInEq1" (formula "4"))
                           (rule "polySimp_mulLiterals" (formula "4") (term "0"))
                           (rule "times_zero_2" (formula "4") (term "1"))
                           (rule "polySimp_elimOne" (formula "4") (term "0"))
                           (rule "inEqSimp_contradInEq0" (formula "11") (ifseqformula "4"))
                           (rule "qeq_literals" (formula "11") (term "0"))
                            (builtin "One Step Simplification" (formula "11"))
                           (rule "closeFalse" (formula "11"))
                        )
                        (branch "CUT: b_0 <= -1 + quotient_0 FALSE"
                            (builtin "One Step Simplification" (formula "8"))
                           (rule "inEqSimp_leqRight" (formula "34"))
                           (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                           (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                           (rule "add_literals" (formula "1") (term "0,0,0"))
                           (rule "add_zero_left" (formula "1") (term "0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                           (rule "polySimp_mulLiterals" (formula "1") (term "1"))
                           (rule "polySimp_elimOne" (formula "1") (term "1"))
                           (rule "inEqSimp_exactShadow3" (formula "33") (ifseqformula "9"))
                           (rule "polySimp_mulComm0" (formula "33") (term "0,0"))
                           (rule "polySimp_addComm0" (formula "33") (term "0"))
                           (rule "inEqSimp_sepNegMonomial1" (formula "33"))
                           (rule "polySimp_mulLiterals" (formula "33") (term "0"))
                           (rule "polySimp_elimOne" (formula "33") (term "0"))
                           (rule "inEqSimp_exactShadow3" (formula "32") (ifseqformula "9"))
                           (rule "times_zero_1" (formula "32") (term "0,0"))
                           (rule "add_zero_left" (formula "32") (term "0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "32"))
                           (rule "polySimp_mulLiterals" (formula "32") (term "1"))
                           (rule "polySimp_elimOne" (formula "32") (term "1"))
                           (rule "inEqSimp_exactShadow3" (formula "29") (ifseqformula "33"))
                           (rule "mul_literals" (formula "29") (term "0,0"))
                           (rule "polySimp_addAssoc" (formula "29") (term "0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "29"))
                           (rule "polySimp_mulComm0" (formula "29") (term "1"))
                           (rule "polySimp_rightDist" (formula "29") (term "1"))
                           (rule "polySimp_mulLiterals" (formula "29") (term "1,1"))
                           (rule "mul_literals" (formula "29") (term "0,1"))
                           (rule "polySimp_elimOne" (formula "29") (term "1,1"))
                           (rule "inEqSimp_subsumption1" (formula "1") (ifseqformula "29"))
                           (rule "inEqSimp_homoInEq0" (formula "1") (term "0"))
                           (rule "polySimp_pullOutFactor1b" (formula "1") (term "0,0"))
                           (rule "add_literals" (formula "1") (term "1,1,0,0"))
                           (rule "times_zero_1" (formula "1") (term "1,0,0"))
                           (rule "add_zero_right" (formula "1") (term "0,0"))
                           (rule "qeq_literals" (formula "1") (term "0"))
                            (builtin "One Step Simplification" (formula "1"))
                           (rule "true_left" (formula "1"))
                           (rule "inEqSimp_exactShadow3" (formula "13") (ifseqformula "33"))
                           (rule "polySimp_rightDist" (formula "13") (term "0,0"))
                           (rule "mul_literals" (formula "13") (term "0,0,0"))
                           (rule "polySimp_addAssoc" (formula "13") (term "0"))
                           (rule "polySimp_addComm1" (formula "13") (term "0,0"))
                           (rule "polySimp_pullOutFactor2b" (formula "13") (term "0"))
                           (rule "add_literals" (formula "13") (term "1,1,0"))
                           (rule "times_zero_1" (formula "13") (term "1,0"))
                           (rule "add_zero_right" (formula "13") (term "0"))
                           (rule "inEqSimp_sepNegMonomial1" (formula "13"))
                           (rule "polySimp_mulLiterals" (formula "13") (term "0"))
                           (rule "polySimp_elimOne" (formula "13") (term "0"))
                           (rule "inEqSimp_contradInEq0" (formula "10") (ifseqformula "13"))
                           (rule "qeq_literals" (formula "10") (term "0"))
                            (builtin "One Step Simplification" (formula "10"))
                           (rule "closeFalse" (formula "10"))
                        )
                     )
                     (branch "CUT: self.sorted_splitters[b_0 + d_0 * -1] <= -1 + value FALSE"
                         (builtin "One Step Simplification" (formula "16"))
                        (rule "inEqSimp_leqRight" (formula "32"))
                        (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                        (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                        (rule "add_literals" (formula "1") (term "0,0,0"))
                        (rule "add_zero_left" (formula "1") (term "0,0"))
                        (rule "applyEq" (formula "1") (term "0,1,0,2,1,0") (ifseqformula "17"))
                        (rule "polySimp_mulComm0" (formula "1") (term "1,0,2,1,0"))
                        (rule "polySimp_rightDist" (formula "1") (term "1,0,2,1,0"))
                        (rule "mul_literals" (formula "1") (term "0,1,0,2,1,0"))
                        (rule "polySimp_addAssoc" (formula "1") (term "0,2,1,0"))
                        (rule "polySimp_addComm0" (formula "1") (term "0,0,2,1,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "1") (term "0,2,1,0"))
                        (rule "add_literals" (formula "1") (term "1,1,0,2,1,0"))
                        (rule "times_zero_1" (formula "1") (term "1,0,2,1,0"))
                        (rule "add_zero_right" (formula "1") (term "0,2,1,0"))
                        (rule "applyEqRigid" (formula "11") (term "0") (ifseqformula "17"))
                        (rule "inEqSimp_homoInEq0" (formula "11"))
                        (rule "polySimp_pullOutFactor1" (formula "11") (term "0"))
                        (rule "add_literals" (formula "11") (term "1,0"))
                        (rule "times_zero_1" (formula "11") (term "0"))
                        (rule "qeq_literals" (formula "11"))
                        (rule "true_left" (formula "11"))
                        (rule "applyEq" (formula "10") (term "0") (ifseqformula "16"))
                        (rule "inEqSimp_homoInEq1" (formula "10"))
                        (rule "polySimp_mulComm0" (formula "10") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "10") (term "1,0"))
                        (rule "mul_literals" (formula "10") (term "0,1,0"))
                        (rule "polySimp_addAssoc" (formula "10") (term "0"))
                        (rule "add_literals" (formula "10") (term "0,0"))
                        (rule "applyEqRigid" (formula "6") (term "0,0") (ifseqformula "16"))
                        (rule "applyEqRigid" (formula "4") (term "0") (ifseqformula "16"))
                        (rule "inEqSimp_homoInEq1" (formula "4"))
                        (rule "polySimp_mulComm0" (formula "4") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "4") (term "1,0"))
                        (rule "mul_literals" (formula "4") (term "0,1,0"))
                        (rule "polySimp_addAssoc" (formula "4") (term "0"))
                        (rule "polySimp_addComm0" (formula "4") (term "0,0"))
                        (rule "applyEq" (formula "5") (term "0") (ifseqformula "16"))
                        (rule "inEqSimp_homoInEq0" (formula "5"))
                        (rule "polySimp_mulComm0" (formula "5") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "5") (term "1,0"))
                        (rule "mul_literals" (formula "5") (term "0,1,0"))
                        (rule "polySimp_addAssoc" (formula "5") (term "0"))
                        (rule "polySimp_addComm1" (formula "5") (term "0,0"))
                        (rule "add_literals" (formula "5") (term "0,0,0"))
                        (rule "add_zero_left" (formula "5") (term "0,0"))
                        (rule "applyEqRigid" (formula "2") (term "0,0") (ifseqformula "16"))
                        (rule "applyEqRigid" (formula "15") (term "1") (ifseqformula "16"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "1"))
                        (rule "polySimp_elimOne" (formula "1") (term "1"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "10"))
                        (rule "polySimp_mulLiterals" (formula "10") (term "0"))
                        (rule "polySimp_elimOne" (formula "10") (term "0"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "4"))
                        (rule "polySimp_mulLiterals" (formula "4") (term "0"))
                        (rule "polySimp_elimOne" (formula "4") (term "0"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "4"))
                        (rule "polySimp_mulLiterals" (formula "4") (term "0"))
                        (rule "polySimp_elimOne" (formula "4") (term "0"))
                        (rule "inEqSimp_exactShadow3" (formula "7") (ifseqformula "4"))
                        (rule "mul_literals" (formula "7") (term "0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "7"))
                        (rule "mul_literals" (formula "7") (term "1"))
                        (rule "inEqSimp_subsumption6" (formula "7") (ifseqformula "9"))
                        (rule "mul_literals" (formula "7") (term "1,1,0"))
                        (rule "greater_literals" (formula "7") (term "0,0"))
                         (builtin "One Step Simplification" (formula "7"))
                        (rule "leq_literals" (formula "7") (term "0"))
                         (builtin "One Step Simplification" (formula "7"))
                        (rule "true_left" (formula "7"))
                        (rule "onlyCreatedObjectsAreReferencedFinal" (formula "31") (term "0") (ifseqformula "17") (ifseqformula "18"))
                        (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "32"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "onlyCreatedObjectsAreReferencedFinal" (formula "31") (term "0") (ifseqformula "18") (ifseqformula "19"))
                        (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "32"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "jdiv_axiom" (formula "7") (term "0"))
                        (rule "eqSymm" (formula "7"))
                        (rule "polySimp_mulComm0" (formula "7") (term "0,0,2,0"))
                        (rule "polySimp_rightDist" (formula "7") (term "0,0,2,0"))
                        (rule "mul_literals" (formula "7") (term "0,0,0,2,0"))
                        (rule "applyEqRigid" (formula "7") (term "1,0") (ifseqformula "4"))
                        (rule "applyEq" (formula "7") (term "1") (ifseqformula "8"))
                         (builtin "One Step Simplification" (formula "7"))
                        (rule "polySimp_homoEq" (formula "7") (term "1"))
                        (rule "polySimp_mulLiterals" (formula "7") (term "1,0,1"))
                        (rule "polySimp_elimOne" (formula "7") (term "1,0,1"))
                        (rule "polySimp_sepPosMonomial" (formula "7") (term "1"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "7") (term "0"))
                        (rule "mul_literals" (formula "7") (term "1,0"))
                        (rule "inEqSimp_subsumption1" (formula "7") (term "0") (ifseqformula "10"))
                        (rule "leq_literals" (formula "7") (term "0,0"))
                         (builtin "One Step Simplification" (formula "7"))
                        (rule "true_left" (formula "7"))
                        (rule "div_axiom" (formula "4") (term "0") (inst "quotient=quotient_1"))
                        (rule "mul_literals" (formula "4") (term "1,1,1,1,1"))
                        (rule "qeq_literals" (formula "4") (term "0,1,1"))
                         (builtin "One Step Simplification" (formula "4"))
                        (rule "equal_literals" (formula "4") (term "0"))
                         (builtin "One Step Simplification" (formula "4"))
                        (rule "andLeft" (formula "4"))
                        (rule "andLeft" (formula "4"))
                        (rule "polySimp_addAssoc" (formula "6") (term "0,1"))
                        (rule "add_literals" (formula "6") (term "0,0,1"))
                        (rule "polySimp_addComm1" (formula "6") (term "1"))
                        (rule "add_literals" (formula "6") (term "0,1"))
                        (rule "add_zero_left" (formula "6") (term "1"))
                        (rule "inEqSimp_commuteGeq" (formula "6"))
                        (rule "inEqSimp_homoInEq0" (formula "5"))
                        (rule "polySimp_mulLiterals" (formula "5") (term "1,0"))
                        (rule "polySimp_addComm1" (formula "5") (term "0"))
                        (rule "applyEq" (formula "7") (term "0") (ifseqformula "4"))
                        (rule "eqSymm" (formula "7"))
                        (rule "applyEqRigid" (formula "11") (term "1,1,0") (ifseqformula "7"))
                        (rule "applyEqRigid" (formula "9") (term "0,1") (ifseqformula "7"))
                        (rule "applyEqRigid" (formula "8") (term "0,1,1") (ifseqformula "7"))
                        (rule "applyEqRigid" (formula "12") (term "0") (ifseqformula "7"))
                        (rule "applyEqRigid" (formula "10") (term "0,0,1,1") (ifseqformula "7"))
                        (rule "applyEqRigid" (formula "9") (term "1") (ifseqformula "7"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "5"))
                        (rule "polySimp_mulComm0" (formula "5") (term "1"))
                        (rule "polySimp_rightDist" (formula "5") (term "1"))
                        (rule "polySimp_mulLiterals" (formula "5") (term "1,1"))
                        (rule "mul_literals" (formula "5") (term "0,1"))
                        (rule "inEqSimp_exactShadow3" (formula "10") (ifseqformula "5"))
                        (rule "mul_literals" (formula "10") (term "0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "10"))
                        (rule "mul_literals" (formula "10") (term "1"))
                        (rule "inEqSimp_subsumption6" (formula "10") (ifseqformula "12"))
                        (rule "greater_literals" (formula "10") (term "0,0"))
                         (builtin "One Step Simplification" (formula "10"))
                        (rule "mul_literals" (formula "10") (term "1,0"))
                        (rule "leq_literals" (formula "10") (term "0"))
                         (builtin "One Step Simplification" (formula "10"))
                        (rule "true_left" (formula "10"))
                        (rule "cut_direct" (formula "9") (term "0"))
                        (branch "CUT: b_0 <= -1 + quotient_1 TRUE"
                            (builtin "One Step Simplification" (formula "10"))
                           (rule "true_left" (formula "10"))
                           (rule "inEqSimp_exactShadow3" (formula "7") (ifseqformula "9"))
                           (rule "polySimp_rightDist" (formula "7") (term "0,0"))
                           (rule "mul_literals" (formula "7") (term "0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "7") (term "1,0,0"))
                           (rule "polySimp_addAssoc" (formula "7") (term "0"))
                           (rule "polySimp_addComm1" (formula "7") (term "0,0"))
                           (rule "add_literals" (formula "7") (term "0,0,0"))
                           (rule "add_zero_left" (formula "7") (term "0,0"))
                           (rule "polySimp_pullOutFactor2" (formula "7") (term "0"))
                           (rule "add_literals" (formula "7") (term "1,0"))
                           (rule "inEqSimp_invertInEq1" (formula "7"))
                           (rule "times_zero_2" (formula "7") (term "1"))
                           (rule "polySimp_mulLiterals" (formula "7") (term "0"))
                           (rule "polySimp_elimOne" (formula "7") (term "0"))
                           (rule "inEqSimp_contradInEq0" (formula "12") (ifseqformula "7"))
                           (rule "qeq_literals" (formula "12") (term "0"))
                            (builtin "One Step Simplification" (formula "12"))
                           (rule "closeFalse" (formula "12"))
                        )
                        (branch "CUT: b_0 <= -1 + quotient_1 FALSE"
                            (builtin "One Step Simplification" (formula "9"))
                           (rule "inEqSimp_leqRight" (formula "33"))
                           (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                           (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                           (rule "add_literals" (formula "1") (term "0,0,0"))
                           (rule "add_zero_left" (formula "1") (term "0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                           (rule "polySimp_mulLiterals" (formula "1") (term "1"))
                           (rule "polySimp_elimOne" (formula "1") (term "1"))
                           (rule "inEqSimp_exactShadow3" (formula "1") (ifseqformula "6"))
                           (rule "polySimp_mulComm0" (formula "1") (term "0,0"))
                           (rule "polySimp_pullOutFactor0" (formula "1") (term "0"))
                           (rule "add_literals" (formula "1") (term "1,0"))
                           (rule "polySimp_elimOne" (formula "1") (term "0"))
                           (rule "inEqSimp_subsumption1" (formula "1") (ifseqformula "13"))
                           (rule "leq_literals" (formula "1") (term "0"))
                            (builtin "One Step Simplification" (formula "1"))
                           (rule "true_left" (formula "1"))
                           (rule "inEqSimp_exactShadow3" (formula "32") (ifseqformula "10"))
                           (rule "polySimp_mulComm0" (formula "32") (term "0,0"))
                           (rule "polySimp_addComm0" (formula "32") (term "0"))
                           (rule "inEqSimp_sepNegMonomial1" (formula "32"))
                           (rule "polySimp_mulLiterals" (formula "32") (term "0"))
                           (rule "polySimp_elimOne" (formula "32") (term "0"))
                           (rule "inEqSimp_exactShadow3" (formula "31") (ifseqformula "10"))
                           (rule "times_zero_1" (formula "31") (term "0,0"))
                           (rule "add_zero_left" (formula "31") (term "0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "31"))
                           (rule "polySimp_mulLiterals" (formula "31") (term "1"))
                           (rule "polySimp_elimOne" (formula "31") (term "1"))
                           (rule "inEqSimp_exactShadow3" (formula "13") (ifseqformula "32"))
                           (rule "polySimp_rightDist" (formula "13") (term "0,0"))
                           (rule "mul_literals" (formula "13") (term "0,0,0"))
                           (rule "polySimp_addAssoc" (formula "13") (term "0"))
                           (rule "polySimp_addComm1" (formula "13") (term "0,0"))
                           (rule "polySimp_pullOutFactor2b" (formula "13") (term "0"))
                           (rule "add_literals" (formula "13") (term "1,1,0"))
                           (rule "times_zero_1" (formula "13") (term "1,0"))
                           (rule "add_zero_right" (formula "13") (term "0"))
                           (rule "inEqSimp_sepNegMonomial1" (formula "13"))
                           (rule "polySimp_mulLiterals" (formula "13") (term "0"))
                           (rule "polySimp_elimOne" (formula "13") (term "0"))
                           (rule "inEqSimp_contradInEq1" (formula "13") (ifseqformula "12"))
                           (rule "qeq_literals" (formula "13") (term "0"))
                            (builtin "One Step Simplification" (formula "13"))
                           (rule "closeFalse" (formula "13"))
                        )
                     )
                  )
                  (branch "CUT: self.sorted_splitters[b_0] >= value FALSE"
                      (builtin "One Step Simplification" (formula "11"))
                     (rule "inEqSimp_geqRight" (formula "24"))
                     (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                     (rule "applyEq" (formula "21") (term "0") (ifseqformula "12"))
                     (rule "inEqSimp_homoInEq1" (formula "21"))
                     (rule "polySimp_mulComm0" (formula "21") (term "1,0"))
                     (rule "polySimp_rightDist" (formula "21") (term "1,0"))
                     (rule "mul_literals" (formula "21") (term "0,1,0"))
                     (rule "polySimp_addAssoc" (formula "21") (term "0"))
                     (rule "add_literals" (formula "21") (term "0,0"))
                     (rule "applyEq" (formula "24") (term "1,1,1,0,0") (ifseqformula "12"))
                     (rule "polySimp_addAssoc" (formula "24") (term "1,1,0,0"))
                     (rule "add_literals" (formula "24") (term "0,1,1,0,0"))
                     (rule "add_zero_left" (formula "24") (term "1,1,0,0"))
                     (rule "applyEq" (formula "6") (term "0") (ifseqformula "12"))
                     (rule "inEqSimp_homoInEq1" (formula "6"))
                     (rule "polySimp_pullOutFactor1" (formula "6") (term "0"))
                     (rule "add_literals" (formula "6") (term "1,0"))
                     (rule "times_zero_1" (formula "6") (term "0"))
                     (rule "leq_literals" (formula "6"))
                     (rule "true_left" (formula "6"))
                     (rule "applyEq" (formula "23") (term "1,1,0,0,0,1,0") (ifseqformula "11"))
                     (rule "polySimp_addAssoc" (formula "23") (term "1,0,0,0,1,0"))
                     (rule "add_literals" (formula "23") (term "0,1,0,0,0,1,0"))
                     (rule "add_zero_left" (formula "23") (term "1,0,0,0,1,0"))
                     (rule "applyEq" (formula "22") (term "1") (ifseqformula "11"))
                     (rule "applyEq" (formula "21") (term "1") (ifseqformula "11"))
                     (rule "applyEq" (formula "19") (term "1") (ifseqformula "11"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                     (rule "polySimp_mulComm0" (formula "1") (term "1"))
                     (rule "polySimp_rightDist" (formula "1") (term "1"))
                     (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                     (rule "mul_literals" (formula "1") (term "0,1"))
                     (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "20"))
                     (rule "polySimp_mulLiterals" (formula "20") (term "0"))
                     (rule "polySimp_elimOne" (formula "20") (term "0"))
                     (rule "jdiv_axiom" (formula "2") (term "0,1,1,1"))
                     (rule "eqSymm" (formula "2"))
                     (rule "inEqSimp_subsumption1" (formula "2") (term "0,0") (ifseqformula "5"))
                     (rule "leq_literals" (formula "2") (term "0,0,0"))
                      (builtin "One Step Simplification" (formula "2"))
                     (rule "eqSymm" (formula "2"))
                     (rule "applyEq" (formula "3") (term "0,0") (ifseqformula "2"))
                     (rule "applyEq" (formula "3") (term "0,1,1,1") (ifseqformula "2"))
                     (rule "all_pull_out3" (formula "23") (term "0"))
                     (rule "shift_paren_or" (formula "23") (term "0,0"))
                     (rule "shift_paren_or" (formula "23") (term "0,0,0"))
                     (rule "arrayLengthNotNegative" (formula "22") (term "0"))
                     (rule "arrayLengthIsAShort" (formula "23") (term "0"))
                      (builtin "One Step Simplification" (formula "23"))
                     (rule "true_left" (formula "23"))
                     (rule "arrayLengthNotNegative" (formula "21") (term "0"))
                     (rule "arrayLengthIsAShort" (formula "22") (term "0"))
                      (builtin "One Step Simplification" (formula "22"))
                     (rule "true_left" (formula "22"))
                     (rule "cut_direct" (formula "11") (term "1"))
                     (branch "CUT: self.sorted_splitters[b_0 + d_0 * -1] <= -1 + value TRUE"
                         (builtin "One Step Simplification" (formula "12"))
                        (rule "true_left" (formula "12"))
                        (rule "div_axiom" (formula "2") (term "1") (inst "quotient=quotient_0"))
                        (rule "mul_literals" (formula "2") (term "1,1,1,1,1"))
                        (rule "qeq_literals" (formula "2") (term "0,1,1"))
                         (builtin "One Step Simplification" (formula "2"))
                        (rule "equal_literals" (formula "2") (term "0"))
                         (builtin "One Step Simplification" (formula "2"))
                        (rule "andLeft" (formula "2"))
                        (rule "andLeft" (formula "2"))
                        (rule "polySimp_addComm1" (formula "4") (term "1"))
                        (rule "add_literals" (formula "4") (term "0,1"))
                        (rule "inEqSimp_commuteLeq" (formula "3"))
                        (rule "inEqSimp_homoInEq1" (formula "4"))
                        (rule "polySimp_mulLiterals" (formula "4") (term "1,0"))
                        (rule "polySimp_addComm1" (formula "4") (term "0"))
                        (rule "applyEq" (formula "6") (term "0,0") (ifseqformula "2"))
                        (rule "inEqSimp_homoInEq1" (formula "6") (term "0"))
                        (rule "polySimp_addComm1" (formula "6") (term "0,0"))
                        (rule "applyEq" (formula "6") (term "0,1,1,1") (ifseqformula "2"))
                        (rule "polySimp_addComm0" (formula "6") (term "1,1"))
                        (rule "applyEq" (formula "5") (term "1") (ifseqformula "2"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "4"))
                        (rule "polySimp_mulComm0" (formula "4") (term "1"))
                        (rule "polySimp_rightDist" (formula "4") (term "1"))
                        (rule "polySimp_mulLiterals" (formula "4") (term "1,1"))
                        (rule "mul_literals" (formula "4") (term "0,1"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "6") (term "0"))
                        (rule "polySimp_mulComm0" (formula "6") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "6") (term "1,0"))
                        (rule "mul_literals" (formula "6") (term "0,1,0"))
                        (rule "polySimp_mulLiterals" (formula "6") (term "1,1,0"))
                        (rule "polySimp_elimOne" (formula "6") (term "1,1,0"))
                        (rule "inEqSimp_exactShadow3" (formula "8") (ifseqformula "4"))
                        (rule "mul_literals" (formula "8") (term "0,0"))
                        (rule "polySimp_addAssoc" (formula "8") (term "0"))
                        (rule "add_literals" (formula "8") (term "0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "8"))
                        (rule "mul_literals" (formula "8") (term "1"))
                        (rule "elimGcdGeq_antec" (formula "8") (inst "elimGcd=Z(2(#))") (inst "elimGcdLeftDiv=quotient_0") (inst "elimGcdRightDiv=Z(1(#))"))
                        (rule "polySimp_mulLiterals" (formula "8") (term "1,0,1,0"))
                        (rule "leq_literals" (formula "8") (term "0,0"))
                         (builtin "One Step Simplification" (formula "8"))
                        (rule "polySimp_mulLiterals" (formula "8") (term "1,0,0,0,0,0"))
                        (rule "mul_literals" (formula "8") (term "1,0,0,0,0,0"))
                        (rule "polySimp_addLiterals" (formula "8") (term "0,0,0,0"))
                        (rule "add_literals" (formula "8") (term "0,0,0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "8") (term "0,0"))
                        (rule "add_literals" (formula "8") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "8") (term "1,0,0"))
                        (rule "add_zero_right" (formula "8") (term "0,0"))
                        (rule "leq_literals" (formula "8") (term "0"))
                         (builtin "One Step Simplification" (formula "8"))
                        (rule "inEqSimp_exactShadow3" (formula "3") (ifseqformula "10"))
                        (rule "polySimp_mulAssoc" (formula "3") (term "0,0"))
                        (rule "polySimp_mulComm0" (formula "3") (term "0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "3") (term "0,0"))
                        (rule "polySimp_addAssoc" (formula "3") (term "0"))
                        (rule "polySimp_addComm0" (formula "3") (term "0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "3"))
                        (rule "polySimp_mulComm0" (formula "3") (term "1"))
                        (rule "polySimp_rightDist" (formula "3") (term "1"))
                        (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
                        (rule "mul_literals" (formula "3") (term "0,1"))
                        (rule "onlyCreatedObjectsAreReferencedFinal" (formula "32") (term "0") (ifseqformula "19") (ifseqformula "20"))
                        (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "33"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "onlyCreatedObjectsAreReferencedFinal" (formula "32") (term "0") (ifseqformula "20") (ifseqformula "21"))
                        (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "33"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "cut_direct" (formula "9") (term "0"))
                        (branch "CUT: b_0 <= -1 + quotient_0 TRUE"
                            (builtin "One Step Simplification" (formula "10"))
                           (rule "true_left" (formula "10"))
                           (rule "inEqSimp_exactShadow3" (formula "10") (ifseqformula "9"))
                           (rule "mul_literals" (formula "10") (term "0,0"))
                           (rule "polySimp_addAssoc" (formula "10") (term "0"))
                           (rule "add_literals" (formula "10") (term "0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "10"))
                           (rule "mul_literals" (formula "10") (term "1"))
                           (rule "inEqSimp_subsumption1" (formula "12") (ifseqformula "10"))
                           (rule "leq_literals" (formula "12") (term "0"))
                            (builtin "One Step Simplification" (formula "12"))
                           (rule "true_left" (formula "12"))
                           (rule "inEqSimp_exactShadow3" (formula "5") (ifseqformula "9"))
                           (rule "polySimp_rightDist" (formula "5") (term "0,0"))
                           (rule "mul_literals" (formula "5") (term "0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "5") (term "1,0,0"))
                           (rule "polySimp_addAssoc" (formula "5") (term "0"))
                           (rule "polySimp_addComm1" (formula "5") (term "0,0"))
                           (rule "add_literals" (formula "5") (term "0,0,0"))
                           (rule "add_zero_left" (formula "5") (term "0,0"))
                           (rule "polySimp_pullOutFactor2" (formula "5") (term "0"))
                           (rule "add_literals" (formula "5") (term "1,0"))
                           (rule "inEqSimp_invertInEq1" (formula "5"))
                           (rule "times_zero_2" (formula "5") (term "1"))
                           (rule "polySimp_mulLiterals" (formula "5") (term "0"))
                           (rule "polySimp_elimOne" (formula "5") (term "0"))
                           (rule "inEqSimp_contradInEq0" (formula "11") (ifseqformula "5"))
                           (rule "qeq_literals" (formula "11") (term "0"))
                            (builtin "One Step Simplification" (formula "11"))
                           (rule "closeFalse" (formula "11"))
                        )
                        (branch "CUT: b_0 <= -1 + quotient_0 FALSE"
                            (builtin "One Step Simplification" (formula "9"))
                           (rule "inEqSimp_leqRight" (formula "33"))
                           (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                           (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                           (rule "add_literals" (formula "1") (term "0,0,0"))
                           (rule "add_zero_left" (formula "1") (term "0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                           (rule "polySimp_mulLiterals" (formula "1") (term "1"))
                           (rule "polySimp_elimOne" (formula "1") (term "1"))
                           (rule "inEqSimp_exactShadow3" (formula "32") (ifseqformula "10"))
                           (rule "polySimp_rightDist" (formula "32") (term "0,0"))
                           (rule "mul_literals" (formula "32") (term "0,0,0"))
                           (rule "polySimp_addAssoc" (formula "32") (term "0"))
                           (rule "polySimp_addComm1" (formula "32") (term "0,0"))
                           (rule "polySimp_pullOutFactor2b" (formula "32") (term "0"))
                           (rule "add_literals" (formula "32") (term "1,1,0"))
                           (rule "times_zero_1" (formula "32") (term "1,0"))
                           (rule "add_zero_right" (formula "32") (term "0"))
                           (rule "inEqSimp_sepNegMonomial1" (formula "32"))
                           (rule "polySimp_mulLiterals" (formula "32") (term "0"))
                           (rule "polySimp_elimOne" (formula "32") (term "0"))
                           (rule "inEqSimp_contradInEq1" (formula "32") (ifseqformula "12"))
                           (rule "qeq_literals" (formula "32") (term "0"))
                            (builtin "One Step Simplification" (formula "32"))
                           (rule "closeFalse" (formula "32"))
                        )
                     )
                     (branch "CUT: self.sorted_splitters[b_0 + d_0 * -1] <= -1 + value FALSE"
                         (builtin "One Step Simplification" (formula "11"))
                        (rule "inEqSimp_leqRight" (formula "26"))
                        (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                        (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                        (rule "add_literals" (formula "1") (term "0,0,0"))
                        (rule "add_zero_left" (formula "1") (term "0,0"))
                        (rule "applyEq" (formula "1") (term "0,1,0,2,1,0") (ifseqformula "12"))
                        (rule "polySimp_mulComm0" (formula "1") (term "1,0,2,1,0"))
                        (rule "polySimp_rightDist" (formula "1") (term "1,0,2,1,0"))
                        (rule "mul_literals" (formula "1") (term "0,1,0,2,1,0"))
                        (rule "polySimp_addAssoc" (formula "1") (term "0,2,1,0"))
                        (rule "polySimp_addComm0" (formula "1") (term "0,0,2,1,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "1") (term "0,2,1,0"))
                        (rule "add_literals" (formula "1") (term "1,1,0,2,1,0"))
                        (rule "times_zero_1" (formula "1") (term "1,0,2,1,0"))
                        (rule "add_zero_right" (formula "1") (term "0,2,1,0"))
                        (rule "applyEq" (formula "6") (term "0") (ifseqformula "12"))
                        (rule "inEqSimp_homoInEq1" (formula "6"))
                        (rule "polySimp_mulComm0" (formula "6") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "6") (term "1,0"))
                        (rule "mul_literals" (formula "6") (term "0,1,0"))
                        (rule "polySimp_addAssoc" (formula "6") (term "0"))
                        (rule "add_literals" (formula "6") (term "0,0"))
                        (rule "applyEqRigid" (formula "7") (term "0") (ifseqformula "12"))
                        (rule "inEqSimp_homoInEq0" (formula "7"))
                        (rule "polySimp_pullOutFactor1" (formula "7") (term "0"))
                        (rule "add_literals" (formula "7") (term "1,0"))
                        (rule "times_zero_1" (formula "7") (term "0"))
                        (rule "qeq_literals" (formula "7"))
                        (rule "true_left" (formula "7"))
                        (rule "applyEq" (formula "4") (term "0,0,0") (ifseqformula "11"))
                        (rule "applyEq" (formula "3") (term "0,0") (ifseqformula "11"))
                        (rule "eqSymm" (formula "3"))
                        (rule "applyEq" (formula "4") (term "0,0,1,1,1") (ifseqformula "11"))
                        (rule "applyEq" (formula "10") (term "1") (ifseqformula "11"))
                        (rule "applyEqRigid" (formula "3") (term "0,0") (ifseqformula "11"))
                        (rule "eqSymm" (formula "3"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "1"))
                        (rule "polySimp_elimOne" (formula "1") (term "1"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "6"))
                        (rule "polySimp_mulLiterals" (formula "6") (term "0"))
                        (rule "polySimp_elimOne" (formula "6") (term "0"))
                        (rule "div_axiom" (formula "4") (term "0,0") (inst "quotient=quotient_0"))
                        (rule "mul_literals" (formula "4") (term "1,1,1,1,1"))
                        (rule "qeq_literals" (formula "4") (term "0,1,1"))
                         (builtin "One Step Simplification" (formula "4"))
                        (rule "equal_literals" (formula "4") (term "0"))
                         (builtin "One Step Simplification" (formula "4"))
                        (rule "andLeft" (formula "4"))
                        (rule "andLeft" (formula "4"))
                        (rule "polySimp_addAssoc" (formula "6") (term "0,1"))
                        (rule "add_literals" (formula "6") (term "0,0,1"))
                        (rule "polySimp_addComm1" (formula "6") (term "1"))
                        (rule "add_literals" (formula "6") (term "0,1"))
                        (rule "add_zero_left" (formula "6") (term "1"))
                        (rule "inEqSimp_commuteGeq" (formula "6"))
                        (rule "inEqSimp_homoInEq0" (formula "5"))
                        (rule "polySimp_mulLiterals" (formula "5") (term "1,0"))
                        (rule "polySimp_addComm1" (formula "5") (term "0"))
                        (rule "applyEq" (formula "7") (term "0,0") (ifseqformula "4"))
                        (rule "inEqSimp_homoInEq1" (formula "7") (term "0"))
                        (rule "polySimp_addComm1" (formula "7") (term "0,0"))
                        (rule "applyEqRigid" (formula "7") (term "0,1,1,1") (ifseqformula "4"))
                        (rule "polySimp_addComm0" (formula "7") (term "1,1"))
                        (rule "applyEqRigid" (formula "3") (term "1") (ifseqformula "4"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "5"))
                        (rule "polySimp_mulComm0" (formula "5") (term "1"))
                        (rule "polySimp_rightDist" (formula "5") (term "1"))
                        (rule "polySimp_mulLiterals" (formula "5") (term "1,1"))
                        (rule "mul_literals" (formula "5") (term "0,1"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "7") (term "0"))
                        (rule "polySimp_mulComm0" (formula "7") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "7") (term "1,0"))
                        (rule "polySimp_mulLiterals" (formula "7") (term "1,1,0"))
                        (rule "mul_literals" (formula "7") (term "0,1,0"))
                        (rule "polySimp_elimOne" (formula "7") (term "1,1,0"))
                        (rule "inEqSimp_exactShadow3" (formula "8") (ifseqformula "6"))
                        (rule "mul_literals" (formula "8") (term "0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "8"))
                        (rule "mul_literals" (formula "8") (term "1"))
                        (rule "elimGcdGeq_antec" (formula "8") (inst "elimGcd=Z(2(#))") (inst "elimGcdLeftDiv=quotient_0") (inst "elimGcdRightDiv=Z(1(#))"))
                        (rule "polySimp_mulLiterals" (formula "8") (term "1,0,1,0"))
                        (rule "polySimp_mulLiterals" (formula "8") (term "1,0,0,0,0,1,0"))
                        (rule "leq_literals" (formula "8") (term "0,0"))
                         (builtin "One Step Simplification" (formula "8"))
                        (rule "mul_literals" (formula "8") (term "1,0,0,0,0,0"))
                        (rule "polySimp_addLiterals" (formula "8") (term "0,0,0,0"))
                        (rule "add_literals" (formula "8") (term "0,0,0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "8") (term "0,0"))
                        (rule "add_literals" (formula "8") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "8") (term "1,0,0"))
                        (rule "add_zero_right" (formula "8") (term "0,0"))
                        (rule "leq_literals" (formula "8") (term "0"))
                         (builtin "One Step Simplification" (formula "8"))
                        (rule "jdiv_axiom" (formula "3") (term "0"))
                        (rule "eqSymm" (formula "3"))
                        (rule "polySimp_mulComm0" (formula "3") (term "0,0,2,0"))
                        (rule "polySimp_rightDist" (formula "3") (term "0,0,2,0"))
                        (rule "mul_literals" (formula "3") (term "0,0,0,2,0"))
                        (rule "applyEqRigid" (formula "3") (term "1,0") (ifseqformula "5"))
                        (rule "applyEqRigid" (formula "3") (term "1") (ifseqformula "4"))
                         (builtin "One Step Simplification" (formula "3"))
                        (rule "polySimp_homoEq" (formula "3") (term "1"))
                        (rule "polySimp_mulLiterals" (formula "3") (term "1,0,1"))
                        (rule "polySimp_elimOne" (formula "3") (term "1,0,1"))
                        (rule "polySimp_sepPosMonomial" (formula "3") (term "1"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "3") (term "0"))
                        (rule "mul_literals" (formula "3") (term "1,0"))
                        (rule "inEqSimp_subsumption1" (formula "3") (term "0") (ifseqformula "10"))
                        (rule "leq_literals" (formula "3") (term "0,0"))
                         (builtin "One Step Simplification" (formula "3"))
                        (rule "true_left" (formula "3"))
                        (rule "onlyCreatedObjectsAreReferencedFinal" (formula "30") (term "0") (ifseqformula "17") (ifseqformula "18"))
                        (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "31"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "onlyCreatedObjectsAreReferencedFinal" (formula "30") (term "0") (ifseqformula "18") (ifseqformula "19"))
                        (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "31"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "cut_direct" (formula "9") (term "0"))
                        (branch "CUT: b_0 <= -1 + quotient_0 TRUE"
                            (builtin "One Step Simplification" (formula "10"))
                           (rule "true_left" (formula "10"))
                           (rule "inEqSimp_exactShadow3" (formula "11") (ifseqformula "9"))
                           (rule "mul_literals" (formula "11") (term "0,0"))
                           (rule "polySimp_addAssoc" (formula "11") (term "0"))
                           (rule "add_literals" (formula "11") (term "0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "11"))
                           (rule "mul_literals" (formula "11") (term "1"))
                           (rule "inEqSimp_subsumption1" (formula "10") (ifseqformula "11"))
                           (rule "leq_literals" (formula "10") (term "0"))
                            (builtin "One Step Simplification" (formula "10"))
                           (rule "true_left" (formula "10"))
                           (rule "inEqSimp_exactShadow3" (formula "7") (ifseqformula "9"))
                           (rule "polySimp_rightDist" (formula "7") (term "0,0"))
                           (rule "mul_literals" (formula "7") (term "0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "7") (term "1,0,0"))
                           (rule "polySimp_addAssoc" (formula "7") (term "0"))
                           (rule "polySimp_addComm1" (formula "7") (term "0,0"))
                           (rule "add_literals" (formula "7") (term "0,0,0"))
                           (rule "add_zero_left" (formula "7") (term "0,0"))
                           (rule "polySimp_pullOutFactor2" (formula "7") (term "0"))
                           (rule "add_literals" (formula "7") (term "1,0"))
                           (rule "inEqSimp_invertInEq1" (formula "7"))
                           (rule "times_zero_2" (formula "7") (term "1"))
                           (rule "polySimp_mulLiterals" (formula "7") (term "0"))
                           (rule "polySimp_elimOne" (formula "7") (term "0"))
                           (rule "inEqSimp_contradInEq1" (formula "7") (ifseqformula "11"))
                           (rule "qeq_literals" (formula "7") (term "0"))
                            (builtin "One Step Simplification" (formula "7"))
                           (rule "closeFalse" (formula "7"))
                        )
                        (branch "CUT: b_0 <= -1 + quotient_0 FALSE"
                            (builtin "One Step Simplification" (formula "9"))
                           (rule "inEqSimp_leqRight" (formula "31"))
                           (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                           (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                           (rule "add_literals" (formula "1") (term "0,0,0"))
                           (rule "add_zero_left" (formula "1") (term "0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                           (rule "polySimp_mulLiterals" (formula "1") (term "1"))
                           (rule "polySimp_elimOne" (formula "1") (term "1"))
                           (rule "inEqSimp_exactShadow3" (formula "30") (ifseqformula "10"))
                           (rule "polySimp_rightDist" (formula "30") (term "0,0"))
                           (rule "mul_literals" (formula "30") (term "0,0,0"))
                           (rule "polySimp_addAssoc" (formula "30") (term "0"))
                           (rule "polySimp_addComm1" (formula "30") (term "0,0"))
                           (rule "polySimp_pullOutFactor2b" (formula "30") (term "0"))
                           (rule "add_literals" (formula "30") (term "1,1,0"))
                           (rule "times_zero_1" (formula "30") (term "1,0"))
                           (rule "add_zero_right" (formula "30") (term "0"))
                           (rule "inEqSimp_sepNegMonomial1" (formula "30"))
                           (rule "polySimp_mulLiterals" (formula "30") (term "0"))
                           (rule "polySimp_elimOne" (formula "30") (term "0"))
                           (rule "inEqSimp_contradInEq0" (formula "11") (ifseqformula "30"))
                           (rule "qeq_literals" (formula "11") (term "0"))
                            (builtin "One Step Simplification" (formula "11"))
                           (rule "closeFalse" (formula "11"))
                        )
                     )
                  )
               )
            )
         )
         (branch
             (builtin "One Step Simplification" (formula "17"))
            (rule "equal_literals" (formula "17") (term "0"))
             (builtin "One Step Simplification" (formula "17"))
            (rule "closeTrue" (formula "17"))
         )
      )
      (branch "if x_6 false"
          (builtin "One Step Simplification" (formula "17"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "notLeft" (formula "1"))
         (rule "blockBreak" (formula "17") (term "1"))
         (rule "lsBreak" (formula "17") (term "1"))
         (rule "assignment" (formula "17") (term "1"))
          (builtin "One Step Simplification" (formula "17"))
          (builtin "Block Contract (Internal)" (formula "17") (newnames "result_0,exc_0,heap_Before_BLOCK,savedHeap_Before_BLOCK,o,f"))
         (branch "Validity"
             (builtin "One Step Simplification" (formula "18"))
             (builtin "One Step Simplification" (formula "15") (ifInst ""  (formula "12")) (ifInst ""  (formula "9")) (ifInst ""  (formula "17")) (ifInst ""  (formula "10")) (ifInst ""  (formula "11")))
            (rule "true_left" (formula "15"))
            (rule "eqSymm" (formula "17") (term "0,0,1,0,1"))
            (rule "variableDeclarationAssign" (formula "17") (term "1"))
            (rule "variableDeclaration" (formula "17") (term "1") (newnames "exc_0_1"))
            (rule "assignment" (formula "17") (term "1"))
             (builtin "One Step Simplification" (formula "17"))
            (rule "emptyStatement" (formula "17") (term "1"))
            (rule "emptyStatement" (formula "17") (term "1"))
            (rule "tryEmpty" (formula "17") (term "1"))
            (rule "blockEmptyLabel" (formula "17") (term "1"))
            (rule "blockEmpty" (formula "17") (term "1"))
            (rule "methodCallEmpty" (formula "17") (term "1"))
            (rule "emptyModality" (formula "17") (term "1"))
            (rule "andRight" (formula "17"))
            (branch "Case 1"
               (rule "andRight" (formula "17"))
               (branch
                   (builtin "One Step Simplification" (formula "17"))
                  (rule "closeTrue" (formula "17"))
               )
               (branch "Case 2"
                   (builtin "One Step Simplification" (formula "17"))
                  (rule "shiftLeftLowerBoundGe" (formula "5") (term "0") (ifseqformula "3") (userinteraction))
                  (rule "leq_literals" (formula "5") (term "0,0"))
                   (builtin "One Step Simplification" (formula "5"))
                  (rule "polySimp_homoEq" (formula "8") (term "0"))
                  (rule "polySimp_homoEq" (formula "7") (term "1"))
                  (rule "polySimp_mulComm0" (formula "8") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "7") (term "1,0,1"))
                  (rule "polySimp_rightDist" (formula "8") (term "1,0,0"))
                  (rule "mul_literals" (formula "8") (term "0,1,0,0"))
                  (rule "polySimp_rightDist" (formula "7") (term "1,0,1"))
                  (rule "polySimp_mulLiterals" (formula "7") (term "1,1,0,1"))
                  (rule "polySimp_elimOne" (formula "7") (term "1,1,0,1"))
                  (rule "polySimp_mulComm0" (formula "7") (term "0,1,0,1"))
                  (rule "polySimp_addAssoc" (formula "8") (term "0,0"))
                  (rule "polySimp_addComm0" (formula "8") (term "0,0,0"))
                  (rule "translateJavaShiftLeftIntZero" (formula "5") (term "1,1"))
                  (rule "polySimp_addAssoc" (formula "7") (term "0,1"))
                  (rule "inEqSimp_gtRight" (formula "16"))
                  (rule "mul_literals" (formula "1") (term "0,0"))
                  (rule "inEqSimp_ltToLeq" (formula "8") (term "0"))
                  (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,0"))
                  (rule "inEqSimp_homoInEq0" (formula "3"))
                  (rule "polySimp_addComm1" (formula "3") (term "0"))
                  (rule "inEqSimp_homoInEq0" (formula "2"))
                  (rule "polySimp_mulComm0" (formula "2") (term "1,0"))
                  (rule "polySimp_rightDist" (formula "2") (term "1,0"))
                  (rule "mul_literals" (formula "2") (term "0,1,0"))
                  (rule "polySimp_addAssoc" (formula "2") (term "0"))
                  (rule "polySimp_addComm0" (formula "2") (term "0,0"))
                  (rule "applyEqRigid" (formula "6") (term "0,1") (ifseqformula "7"))
                  (rule "polySimp_sepNegMonomial" (formula "9") (term "0"))
                  (rule "polySimp_mulLiterals" (formula "9") (term "0,0"))
                  (rule "polySimp_elimOne" (formula "9") (term "0,0"))
                  (rule "polySimp_sepPosMonomial" (formula "8") (term "1"))
                  (rule "polySimp_mulComm0" (formula "8") (term "1,1"))
                  (rule "polySimp_rightDist" (formula "8") (term "1,1"))
                  (rule "mul_literals" (formula "8") (term "0,1,1"))
                  (rule "polySimp_mulLiterals" (formula "8") (term "1,1,1"))
                  (rule "polySimp_elimOne" (formula "8") (term "1,1,1"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                  (rule "mul_literals" (formula "1") (term "1"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "0"))
                  (rule "polySimp_mulComm0" (formula "8") (term "1,0"))
                  (rule "polySimp_rightDist" (formula "8") (term "1,0"))
                  (rule "mul_literals" (formula "8") (term "0,1,0"))
                  (rule "polySimp_mulLiterals" (formula "8") (term "1,1,0"))
                  (rule "polySimp_elimOne" (formula "8") (term "1,1,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "3"))
                  (rule "polySimp_mulComm0" (formula "3") (term "1"))
                  (rule "polySimp_rightDist" (formula "3") (term "1"))
                  (rule "mul_literals" (formula "3") (term "0,1"))
                  (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
                  (rule "polySimp_elimOne" (formula "3") (term "1,1"))
                  (rule "inEqSimp_sepNegMonomial1" (formula "2"))
                  (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                  (rule "polySimp_elimOne" (formula "2") (term "0"))
                  (rule "inEqSimp_strengthen0" (formula "1") (ifseqformula "18"))
                  (rule "add_literals" (formula "1") (term "1"))
                  (rule "inEqSimp_contradEq3" (formula "18") (ifseqformula "1"))
                  (rule "add_zero_left" (formula "18") (term "0,0"))
                  (rule "mul_literals" (formula "18") (term "0,0"))
                  (rule "qeq_literals" (formula "18") (term "0"))
                   (builtin "One Step Simplification" (formula "18"))
                  (rule "false_right" (formula "18"))
                  (rule "inEqSimp_contradInEq0" (formula "6") (term "1") (ifseqformula "1"))
                  (rule "qeq_literals" (formula "6") (term "0,1"))
                   (builtin "One Step Simplification" (formula "6"))
                  (rule "notLeft" (formula "6"))
                  (rule "inEqSimp_leqRight" (formula "16"))
                  (rule "mul_literals" (formula "1") (term "1,0,0"))
                  (rule "add_literals" (formula "1") (term "0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                  (rule "mul_literals" (formula "1") (term "1"))
                  (rule "inEqSimp_subsumption1" (formula "5") (ifseqformula "1"))
                  (rule "leq_literals" (formula "5") (term "0"))
                   (builtin "One Step Simplification" (formula "5"))
                  (rule "true_left" (formula "5"))
                  (rule "Free_class_invariant_axiom_for_de_wiesler_Tree" (formula "15"))
                  (rule "true_left" (formula "15"))
                  (rule "Class_invariant_axiom_for_de_wiesler_Tree" (formula "14"))
                   (builtin "One Step Simplification" (formula "14"))
                  (rule "translateJavaSubInt" (formula "14") (term "3,0,1"))
                  (rule "andLeft" (formula "14"))
                  (rule "andLeft" (formula "14"))
                  (rule "andLeft" (formula "14"))
                  (rule "andLeft" (formula "15"))
                  (rule "andLeft" (formula "14"))
                  (rule "andLeft" (formula "14"))
                  (rule "andLeft" (formula "14"))
                  (rule "andLeft" (formula "16"))
                  (rule "notLeft" (formula "15"))
                  (rule "notLeft" (formula "14"))
                  (rule "polySimp_elimSub" (formula "20") (term "3,0"))
                  (rule "mul_literals" (formula "20") (term "1,3,0"))
                  (rule "polySimp_addComm0" (formula "20") (term "3,0"))
                  (rule "inEqSimp_commuteLeq" (formula "19"))
                  (rule "inEqSimp_commuteLeq" (formula "17"))
                  (rule "inEqSimp_commuteLeq" (formula "18"))
                  (rule "inEqSimp_commuteLeq" (formula "14"))
                  (rule "applyEq" (formula "20") (term "1,3,0") (ifseqformula "16"))
                  (rule "applyEq" (formula "19") (term "1") (ifseqformula "16"))
                  (rule "applyEq" (formula "18") (term "1") (ifseqformula "16"))
                  (rule "applyEq" (formula "17") (term "0") (ifseqformula "16"))
                  (rule "applyEq" (formula "8") (term "0,0") (ifseqformula "16"))
                  (rule "applyEq" (formula "4") (term "0") (ifseqformula "16"))
                  (rule "inEqSimp_exactShadow3" (formula "5") (ifseqformula "15"))
                  (rule "polySimp_mulComm0" (formula "5") (term "0,0"))
                  (rule "polySimp_addComm0" (formula "5") (term "0"))
                  (rule "inEqSimp_sepNegMonomial1" (formula "5"))
                  (rule "polySimp_mulLiterals" (formula "5") (term "0"))
                  (rule "polySimp_elimOne" (formula "5") (term "0"))
                  (rule "inEqSimp_contradInEq1" (formula "5") (ifseqformula "1"))
                  (rule "qeq_literals" (formula "5") (term "0"))
                   (builtin "One Step Simplification" (formula "5"))
                  (rule "closeFalse" (formula "5"))
               )
            )
            (branch
                (builtin "One Step Simplification" (formula "17"))
               (rule "closeTrue" (formula "17"))
            )
         )
         (branch "Precondition"
            (rule "andRight" (formula "17"))
            (branch
               (rule "andRight" (formula "17"))
               (branch
                   (builtin "One Step Simplification" (formula "17") (ifInst ""  (formula "12")))
                  (rule "closeTrue" (formula "17"))
               )
               (branch
                   (builtin "One Step Simplification" (formula "17") (ifInst ""  (formula "9")))
                  (rule "closeTrue" (formula "17"))
               )
            )
            (branch
               (rule "andRight" (formula "17"))
               (branch
                  (rule "andRight" (formula "17"))
                  (branch
                      (builtin "One Step Simplification" (formula "17") (ifInst ""  (formula "16")))
                     (rule "closeTrue" (formula "17"))
                  )
                  (branch
                      (builtin "One Step Simplification" (formula "17") (ifInst ""  (formula "10")))
                     (rule "closeTrue" (formula "17"))
                  )
               )
               (branch
                   (builtin "One Step Simplification" (formula "17") (ifInst ""  (formula "11")))
                  (rule "closeTrue" (formula "17"))
               )
            )
         )
         (branch "Usage"
             (builtin "One Step Simplification" (formula "15"))
             (builtin "One Step Simplification" (formula "18"))
            (rule "andLeft" (formula "15"))
            (rule "andLeft" (formula "15"))
            (rule "replace_known_left" (formula "17") (term "0") (ifseqformula "15"))
             (builtin "One Step Simplification" (formula "17"))
            (rule "true_left" (formula "17"))
            (rule "applyEqRigid" (formula "1") (term "1,0") (ifseqformula "16"))
            (rule "add_literals" (formula "1") (term "0"))
            (rule "inEqSimp_commuteLeq" (formula "1"))
            (rule "applyEqRigid" (formula "6") (term "0,1,0,1") (ifseqformula "16"))
            (rule "mul_literals" (formula "6") (term "1,0,1"))
            (rule "polySimp_addComm0" (formula "6") (term "0,1"))
            (rule "applyEqRigid" (formula "17") (term "0") (ifseqformula "16"))
            (rule "greater_literals" (formula "17"))
            (rule "false_right" (formula "17"))
            (rule "applyEq" (formula "6") (term "0,1,0,2,0,0") (ifseqformula "16"))
            (rule "mul_literals" (formula "6") (term "1,0,2,0,0"))
            (rule "polySimp_addComm0" (formula "6") (term "0,2,0,0"))
            (rule "applyEq" (formula "18") (term "0,1,1,0,1,0,0") (ifseqformula "16"))
            (rule "applyEq" (formula "5") (term "1") (ifseqformula "16"))
            (rule "elim_double_block_2" (formula "18") (term "1"))
            (rule "ifUnfold" (formula "18") (term "1") (inst "#boolv=x"))
            (rule "variableDeclaration" (formula "18") (term "1") (newnames "x_7"))
            (rule "inequality_comparison_simple" (formula "18") (term "1"))
             (builtin "One Step Simplification" (formula "18"))
            (rule "replace_known_left" (formula "18") (term "0,0,1,0") (ifseqformula "15"))
             (builtin "One Step Simplification" (formula "18"))
            (rule "ifSplit" (formula "18"))
            (branch "if x_7 true"
                (builtin "One Step Simplification" (formula "19"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "closeFalse" (formula "1"))
            )
            (branch "if x_7 false"
                (builtin "One Step Simplification" (formula "19"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "true_left" (formula "1"))
               (rule "blockEmpty" (formula "18") (term "1"))
               (rule "methodCallReturn" (formula "18") (term "1"))
               (rule "assignment" (formula "18") (term "1"))
                (builtin "One Step Simplification" (formula "18"))
               (rule "methodCallEmpty" (formula "18") (term "1"))
               (rule "tryEmpty" (formula "18") (term "1"))
               (rule "emptyModality" (formula "18") (term "1"))
               (rule "andRight" (formula "18"))
               (branch
                  (rule "impRight" (formula "18"))
                  (rule "andRight" (formula "19"))
                  (branch
                     (rule "andRight" (formula "19"))
                     (branch
                        (rule "andRight" (formula "19"))
                        (branch
                           (rule "andRight" (formula "19"))
                           (branch
                               (builtin "One Step Simplification" (formula "1"))
                               (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "2")))
                              (rule "closeTrue" (formula "19"))
                           )
                           (branch
                               (builtin "One Step Simplification" (formula "1"))
                               (builtin "One Step Simplification" (formula "19"))
                              (rule "true_left" (formula "1"))
                              (rule "polySimp_homoEq" (formula "7") (term "0"))
                              (rule "polySimp_homoEq" (formula "6") (term "1"))
                              (rule "polySimp_mulComm0" (formula "7") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "6") (term "1,0,1"))
                              (rule "polySimp_rightDist" (formula "7") (term "1,0,0"))
                              (rule "mul_literals" (formula "7") (term "0,1,0,0"))
                              (rule "polySimp_rightDist" (formula "6") (term "1,0,1"))
                              (rule "mul_literals" (formula "6") (term "0,1,0,1"))
                              (rule "polySimp_addAssoc" (formula "7") (term "0,0"))
                              (rule "polySimp_addComm0" (formula "7") (term "0,0,0"))
                              (rule "polySimp_addAssoc" (formula "6") (term "0,1"))
                              (rule "add_literals" (formula "6") (term "0,0,1"))
                              (rule "add_zero_left" (formula "6") (term "0,1"))
                              (rule "inEqSimp_ltRight" (formula "18"))
                              (rule "polySimp_mulComm0" (formula "1") (term "0,0"))
                              (rule "polySimp_addComm0" (formula "1") (term "0"))
                              (rule "inEqSimp_ltToLeq" (formula "7") (term "0"))
                              (rule "polySimp_mulComm0" (formula "7") (term "1,0,0,0"))
                              (rule "inEqSimp_homoInEq0" (formula "3"))
                              (rule "polySimp_addComm1" (formula "3") (term "0"))
                              (rule "polySimp_sepNegMonomial" (formula "8") (term "0"))
                              (rule "polySimp_mulLiterals" (formula "8") (term "0,0"))
                              (rule "polySimp_elimOne" (formula "8") (term "0,0"))
                              (rule "polySimp_invertEq" (formula "7") (term "1"))
                              (rule "times_zero_2" (formula "7") (term "1,1"))
                              (rule "polySimp_mulLiterals" (formula "7") (term "0,1"))
                              (rule "polySimp_elimOne" (formula "7") (term "0,1"))
                              (rule "inEqSimp_sepNegMonomial1" (formula "1"))
                              (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                              (rule "polySimp_elimOne" (formula "1") (term "0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "7") (term "0"))
                              (rule "polySimp_mulComm0" (formula "7") (term "1,0"))
                              (rule "polySimp_rightDist" (formula "7") (term "1,0"))
                              (rule "mul_literals" (formula "7") (term "0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "7") (term "1,1,0"))
                              (rule "polySimp_elimOne" (formula "7") (term "1,1,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "3"))
                              (rule "polySimp_mulComm0" (formula "3") (term "1"))
                              (rule "polySimp_rightDist" (formula "3") (term "1"))
                              (rule "mul_literals" (formula "3") (term "0,1"))
                              (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
                              (rule "polySimp_elimOne" (formula "3") (term "1,1"))
                              (rule "inEqSimp_contradEq3" (formula "8") (term "0") (ifseqformula "1"))
                              (rule "polySimp_rightDist" (formula "8") (term "1,0,0,0"))
                              (rule "mul_literals" (formula "8") (term "0,1,0,0,0"))
                              (rule "polySimp_addAssoc" (formula "8") (term "0,0,0"))
                              (rule "polySimp_addComm0" (formula "8") (term "0,0,0,0"))
                              (rule "polySimp_pullOutFactor1b" (formula "8") (term "0,0,0"))
                              (rule "add_literals" (formula "8") (term "1,1,0,0,0"))
                              (rule "times_zero_1" (formula "8") (term "1,0,0,0"))
                              (rule "add_zero_right" (formula "8") (term "0,0,0"))
                              (rule "qeq_literals" (formula "8") (term "0,0"))
                               (builtin "One Step Simplification" (formula "8"))
                              (rule "inEqSimp_contradInEq0" (formula "3") (ifseqformula "1"))
                              (rule "andLeft" (formula "3"))
                              (rule "inEqSimp_homoInEq1" (formula "3"))
                              (rule "polySimp_pullOutFactor1b" (formula "3") (term "0"))
                              (rule "add_literals" (formula "3") (term "1,1,0"))
                              (rule "times_zero_1" (formula "3") (term "1,0"))
                              (rule "add_zero_right" (formula "3") (term "0"))
                              (rule "leq_literals" (formula "3"))
                              (rule "closeFalse" (formula "3"))
                           )
                        )
                        (branch
                           (rule "andRight" (formula "19"))
                           (branch
                               (builtin "One Step Simplification" (formula "1"))
                               (builtin "One Step Simplification" (formula "19"))
                              (rule "true_left" (formula "1"))
                              (rule "polySimp_homoEq" (formula "7") (term "0"))
                              (rule "polySimp_homoEq" (formula "6") (term "1"))
                              (rule "polySimp_mulComm0" (formula "7") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "6") (term "1,0,1"))
                              (rule "polySimp_rightDist" (formula "7") (term "1,0,0"))
                              (rule "mul_literals" (formula "7") (term "0,1,0,0"))
                              (rule "polySimp_rightDist" (formula "6") (term "1,0,1"))
                              (rule "mul_literals" (formula "6") (term "0,1,0,1"))
                              (rule "polySimp_addAssoc" (formula "7") (term "0,0"))
                              (rule "polySimp_addComm0" (formula "7") (term "0,0,0"))
                              (rule "polySimp_addAssoc" (formula "6") (term "0,1"))
                              (rule "add_literals" (formula "6") (term "0,0,1"))
                              (rule "add_zero_left" (formula "6") (term "0,1"))
                              (rule "inEqSimp_ltToLeq" (formula "6") (term "0"))
                              (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,0"))
                              (rule "inEqSimp_homoInEq0" (formula "2"))
                              (rule "polySimp_addComm1" (formula "2") (term "0"))
                              (rule "polySimp_sepNegMonomial" (formula "7") (term "0"))
                              (rule "polySimp_mulLiterals" (formula "7") (term "0,0"))
                              (rule "polySimp_elimOne" (formula "7") (term "0,0"))
                              (rule "polySimp_invertEq" (formula "6") (term "1"))
                              (rule "polySimp_mulLiterals" (formula "6") (term "0,1"))
                              (rule "times_zero_2" (formula "6") (term "1,1"))
                              (rule "polySimp_elimOne" (formula "6") (term "0,1"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "6") (term "0"))
                              (rule "polySimp_mulComm0" (formula "6") (term "1,0"))
                              (rule "polySimp_rightDist" (formula "6") (term "1,0"))
                              (rule "polySimp_mulLiterals" (formula "6") (term "1,1,0"))
                              (rule "mul_literals" (formula "6") (term "0,1,0"))
                              (rule "polySimp_elimOne" (formula "6") (term "1,1,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                              (rule "polySimp_mulComm0" (formula "2") (term "1"))
                              (rule "polySimp_rightDist" (formula "2") (term "1"))
                              (rule "mul_literals" (formula "2") (term "0,1"))
                              (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
                              (rule "polySimp_elimOne" (formula "2") (term "1,1"))
                              (rule "Class_invariant_axiom_for_de_wiesler_Tree" (formula "13"))
                               (builtin "One Step Simplification" (formula "13"))
                              (rule "translateJavaSubInt" (formula "13") (term "3,0,1"))
                              (rule "andLeft" (formula "13"))
                              (rule "andLeft" (formula "13"))
                              (rule "andLeft" (formula "13"))
                              (rule "andLeft" (formula "14"))
                              (rule "andLeft" (formula "13"))
                              (rule "andLeft" (formula "13"))
                              (rule "andLeft" (formula "13"))
                              (rule "andLeft" (formula "15"))
                              (rule "notLeft" (formula "13"))
                              (rule "notLeft" (formula "13"))
                              (rule "polySimp_elimSub" (formula "19") (term "3,0"))
                              (rule "mul_literals" (formula "19") (term "1,3,0"))
                              (rule "polySimp_addComm0" (formula "19") (term "3,0"))
                              (rule "inEqSimp_commuteLeq" (formula "18"))
                              (rule "inEqSimp_commuteLeq" (formula "17"))
                              (rule "inEqSimp_commuteLeq" (formula "16"))
                              (rule "inEqSimp_commuteLeq" (formula "13"))
                              (rule "applyEq" (formula "17") (term "1") (ifseqformula "15"))
                              (rule "applyEq" (formula "7") (term "0,0") (ifseqformula "15"))
                              (rule "applyEq" (formula "18") (term "1") (ifseqformula "15"))
                              (rule "applyEq" (formula "19") (term "1,3,0") (ifseqformula "15"))
                              (rule "applyEq" (formula "16") (term "0") (ifseqformula "15"))
                              (rule "applyEq" (formula "2") (term "0") (ifseqformula "15"))
                              (rule "inEqSimp_exactShadow3" (formula "4") (ifseqformula "14"))
                              (rule "polySimp_mulComm0" (formula "4") (term "0,0"))
                              (rule "polySimp_addComm0" (formula "4") (term "0"))
                              (rule "inEqSimp_sepNegMonomial1" (formula "4"))
                              (rule "polySimp_mulLiterals" (formula "4") (term "0"))
                              (rule "polySimp_elimOne" (formula "4") (term "0"))
                              (rule "Free_class_invariant_axiom_for_de_wiesler_Tree" (formula "21"))
                              (rule "true_left" (formula "21"))
                              (rule "Definition_axiom_for_isClassifiedAs_in_de_wiesler_Tree" (formula "26") (term "0"))
                               (builtin "One Step Simplification" (formula "26"))
                              (rule "translateJavaSubInt" (formula "26") (term "1,0,1"))
                              (rule "translateJavaSubInt" (formula "26") (term "0,2,0,1,0"))
                              (rule "polySimp_elimSub" (formula "26") (term "1,0,1"))
                              (rule "mul_literals" (formula "26") (term "1,1,0,1"))
                              (rule "polySimp_elimSub" (formula "26") (term "0,2,0,1,0"))
                              (rule "mul_literals" (formula "26") (term "1,0,2,0,1,0"))
                              (rule "polySimp_addComm0" (formula "26") (term "1,0,1"))
                              (rule "polySimp_addComm0" (formula "26") (term "0,2,0,1,0"))
                              (rule "inEqSimp_ltToLeq" (formula "26") (term "0,0"))
                              (rule "add_zero_right" (formula "26") (term "0,0,0"))
                              (rule "polySimp_mulComm0" (formula "26") (term "1,0,0,0"))
                              (rule "inEqSimp_ltToLeq" (formula "26") (term "0,1"))
                              (rule "polySimp_rightDist" (formula "26") (term "1,0,0,0,1"))
                              (rule "mul_literals" (formula "26") (term "0,1,0,0,0,1"))
                              (rule "polySimp_addAssoc" (formula "26") (term "0,0,0,1"))
                              (rule "add_literals" (formula "26") (term "0,0,0,0,1"))
                              (rule "polySimp_addComm1" (formula "26") (term "0,0,1"))
                              (rule "inEqSimp_ltToLeq" (formula "26") (term "1,0"))
                              (rule "polySimp_mulComm0" (formula "26") (term "1,0,0,1,0"))
                              (rule "inEqSimp_commuteLeq" (formula "26") (term "1,1"))
                              (rule "applyEq" (formula "26") (term "0,1,0,0,1") (ifseqformula "16"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "26") (term "0,0"))
                              (rule "polySimp_mulLiterals" (formula "26") (term "0,0,0"))
                              (rule "polySimp_elimOne" (formula "26") (term "0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "1,0"))
                              (rule "polySimp_mulComm0" (formula "26") (term "1,1,0"))
                              (rule "polySimp_rightDist" (formula "26") (term "1,1,0"))
                              (rule "mul_literals" (formula "26") (term "0,1,1,0"))
                              (rule "polySimp_mulLiterals" (formula "26") (term "1,1,1,0"))
                              (rule "polySimp_elimOne" (formula "26") (term "1,1,1,0"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "26") (term "0,1"))
                              (rule "polySimp_mulLiterals" (formula "26") (term "0,0,1"))
                              (rule "polySimp_elimOne" (formula "26") (term "0,0,1"))
                              (rule "commute_or" (formula "7"))
                              (rule "Contract_axiom_for_isSortedSliceTransitive_in_Functions" (formula "20") (term "0"))
                              (rule "replace_known_left" (formula "20") (term "1,0") (ifseqformula "10"))
                               (builtin "One Step Simplification" (formula "20") (ifInst ""  (formula "24")) (ifInst ""  (formula "21")))
                              (rule "Definition_axiom_for_isSortedSliceTransitive_in_de_wiesler_Functions" (formula "21") (term "0") (inst "i=i") (inst "j=j"))
                               (builtin "One Step Simplification" (formula "21"))
                              (rule "inEqSimp_ltToLeq" (formula "21") (term "1,0,0"))
                              (rule "polySimp_rightDist" (formula "21") (term "1,0,0,1,0,0"))
                              (rule "mul_literals" (formula "21") (term "0,1,0,0,1,0,0"))
                              (rule "polySimp_addAssoc" (formula "21") (term "0,0,1,0,0"))
                              (rule "add_literals" (formula "21") (term "0,0,0,1,0,0"))
                              (rule "inEqSimp_ltToLeq" (formula "21") (term "1,0,0,1,0"))
                              (rule "polySimp_rightDist" (formula "21") (term "1,0,0,1,0,0,1,0"))
                              (rule "mul_literals" (formula "21") (term "0,1,0,0,1,0,0,1,0"))
                              (rule "polySimp_addAssoc" (formula "21") (term "0,0,1,0,0,1,0"))
                              (rule "add_literals" (formula "21") (term "0,0,0,1,0,0,1,0"))
                              (rule "inEqSimp_commuteLeq" (formula "21") (term "0,0,0"))
                              (rule "inEqSimp_commuteLeq" (formula "21") (term "0,0,0,1,0"))
                              (rule "inEqSimp_commuteLeq" (formula "21") (term "1,0,1,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "21") (term "1,1,0,0"))
                              (rule "polySimp_rightDist" (formula "21") (term "1,1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "21") (term "1,1,1,0,0"))
                              (rule "mul_literals" (formula "21") (term "0,1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "21") (term "1,1,1,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "1,0,0,1,0"))
                              (rule "polySimp_mulComm0" (formula "21") (term "1,1,0,0,1,0"))
                              (rule "polySimp_rightDist" (formula "21") (term "1,1,0,0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "21") (term "1,1,1,0,0,1,0"))
                              (rule "mul_literals" (formula "21") (term "0,1,1,0,0,1,0"))
                              (rule "polySimp_elimOne" (formula "21") (term "1,1,1,0,0,1,0"))
                              (rule "nnf_imp2or" (formula "21") (term "0"))
                              (rule "nnf_notAnd" (formula "21") (term "0,0"))
                              (rule "inEqSimp_notGeq" (formula "21") (term "0,0,0"))
                              (rule "times_zero_1" (formula "21") (term "1,0,0,0,0,0"))
                              (rule "add_literals" (formula "21") (term "0,0,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "0,0,0"))
                              (rule "mul_literals" (formula "21") (term "1,0,0,0"))
                              (rule "inEqSimp_notLeq" (formula "21") (term "1,0,0"))
                              (rule "polySimp_rightDist" (formula "21") (term "1,0,0,1,0,0"))
                              (rule "mul_literals" (formula "21") (term "0,1,0,0,1,0,0"))
                              (rule "polySimp_addAssoc" (formula "21") (term "0,0,1,0,0"))
                              (rule "add_literals" (formula "21") (term "0,0,0,1,0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "21") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "21") (term "1,1,0,0"))
                              (rule "polySimp_rightDist" (formula "21") (term "1,1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "21") (term "1,1,1,0,0"))
                              (rule "mul_literals" (formula "21") (term "0,1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "21") (term "1,1,1,0,0"))
                              (rule "nnf_imp2or" (formula "21") (term "0,1,0"))
                              (rule "nnf_notAnd" (formula "21") (term "0,0,1,0"))
                              (rule "inEqSimp_notLeq" (formula "21") (term "1,0,0,1,0"))
                              (rule "polySimp_rightDist" (formula "21") (term "1,0,0,1,0,0,1,0"))
                              (rule "mul_literals" (formula "21") (term "0,1,0,0,1,0,0,1,0"))
                              (rule "polySimp_addAssoc" (formula "21") (term "0,0,1,0,0,1,0"))
                              (rule "add_literals" (formula "21") (term "0,0,0,1,0,0,1,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "21") (term "1,0,0,1,0"))
                              (rule "polySimp_mulComm0" (formula "21") (term "1,1,0,0,1,0"))
                              (rule "polySimp_rightDist" (formula "21") (term "1,1,0,0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "21") (term "1,1,1,0,0,1,0"))
                              (rule "mul_literals" (formula "21") (term "0,1,1,0,0,1,0"))
                              (rule "polySimp_elimOne" (formula "21") (term "1,1,1,0,0,1,0"))
                              (rule "inEqSimp_notGeq" (formula "21") (term "0,0,0,1,0"))
                              (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,0,0,0,1,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "0,0,0,1,0"))
                              (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,0,1,0"))
                              (rule "polySimp_rightDist" (formula "21") (term "1,0,0,0,1,0"))
                              (rule "mul_literals" (formula "21") (term "0,1,0,0,0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "21") (term "1,1,0,0,0,1,0"))
                              (rule "polySimp_elimOne" (formula "21") (term "1,1,0,0,0,1,0"))
                              (rule "Definition_axiom_for_isSortedSlice_in_de_wiesler_Functions" (formula "20") (term "0") (inst "i=i"))
                               (builtin "One Step Simplification" (formula "20"))
                              (rule "translateJavaSubInt" (formula "20") (term "1,1,0,0"))
                              (rule "translateJavaAddInt" (formula "20") (term "0,2,1,1,0"))
                              (rule "polySimp_elimSub" (formula "20") (term "1,1,0,0"))
                              (rule "mul_literals" (formula "20") (term "1,1,1,0,0"))
                              (rule "polySimp_addComm0" (formula "20") (term "0,2,1,1,0"))
                              (rule "polySimp_addComm1" (formula "20") (term "1,1,0,0"))
                              (rule "add_literals" (formula "20") (term "0,1,1,0,0"))
                              (rule "inEqSimp_ltToLeq" (formula "20") (term "1,0,0"))
                              (rule "polySimp_rightDist" (formula "20") (term "1,0,0,1,0,0"))
                              (rule "mul_literals" (formula "20") (term "0,1,0,0,1,0,0"))
                              (rule "polySimp_addAssoc" (formula "20") (term "0,0,1,0,0"))
                              (rule "add_literals" (formula "20") (term "0,0,0,1,0,0"))
                              (rule "inEqSimp_commuteLeq" (formula "20") (term "0,0,0"))
                              (rule "inEqSimp_commuteLeq" (formula "20") (term "1,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "20") (term "1,1,0,0"))
                              (rule "polySimp_rightDist" (formula "20") (term "1,1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "20") (term "1,1,1,0,0"))
                              (rule "mul_literals" (formula "20") (term "0,1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "20") (term "1,1,1,0,0"))
                              (rule "nnf_imp2or" (formula "20") (term "0"))
                              (rule "nnf_notAnd" (formula "20") (term "0,0"))
                              (rule "inEqSimp_notGeq" (formula "20") (term "0,0,0"))
                              (rule "times_zero_1" (formula "20") (term "1,0,0,0,0,0"))
                              (rule "add_literals" (formula "20") (term "0,0,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "0,0,0"))
                              (rule "mul_literals" (formula "20") (term "1,0,0,0"))
                              (rule "inEqSimp_notLeq" (formula "20") (term "1,0,0"))
                              (rule "polySimp_rightDist" (formula "20") (term "1,0,0,1,0,0"))
                              (rule "mul_literals" (formula "20") (term "0,1,0,0,1,0,0"))
                              (rule "polySimp_addAssoc" (formula "20") (term "0,0,1,0,0"))
                              (rule "add_literals" (formula "20") (term "0,0,0,1,0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "20") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "20") (term "1,1,0,0"))
                              (rule "polySimp_rightDist" (formula "20") (term "1,1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "20") (term "1,1,1,0,0"))
                              (rule "mul_literals" (formula "20") (term "0,1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "20") (term "1,1,1,0,0"))
                              (rule "andRight" (formula "27"))
                              (branch
                                 (rule "impRight" (formula "27"))
                                 (rule "replace_known_right" (formula "8") (term "1") (ifseqformula "28"))
                                  (builtin "One Step Simplification" (formula "8"))
                                 (rule "inEqSimp_leqRight" (formula "28"))
                                 (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                                 (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                                 (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                                 (rule "add_literals" (formula "1") (term "0,0,0"))
                                 (rule "add_zero_left" (formula "1") (term "0,0"))
                                 (rule "applyEqRigid" (formula "10") (term "0,2,0,1") (ifseqformula "9"))
                                 (rule "applyEq" (formula "3") (term "0") (ifseqformula "9"))
                                 (rule "qeq_literals" (formula "3"))
                                 (rule "true_left" (formula "3"))
                                 (rule "applyEq" (formula "2") (term "0") (ifseqformula "8"))
                                 (rule "qeq_literals" (formula "2"))
                                 (rule "closeFalse" (formula "2"))
                              )
                              (branch
                                 (rule "impRight" (formula "27"))
                                 (rule "replace_known_right" (formula "9") (term "1") (ifseqformula "28"))
                                  (builtin "One Step Simplification" (formula "9"))
                                 (rule "inEqSimp_geqRight" (formula "28"))
                                 (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                 (rule "applyEq" (formula "4") (term "0") (ifseqformula "10"))
                                 (rule "inEqSimp_homoInEq1" (formula "4"))
                                 (rule "polySimp_pullOutFactor1" (formula "4") (term "0"))
                                 (rule "add_literals" (formula "4") (term "1,0"))
                                 (rule "times_zero_1" (formula "4") (term "0"))
                                 (rule "leq_literals" (formula "4"))
                                 (rule "true_left" (formula "4"))
                                 (rule "applyEq" (formula "22") (term "1,1,1,0,0,1,0") (ifseqformula "9"))
                                 (rule "polySimp_addAssoc" (formula "22") (term "1,1,0,0,1,0"))
                                 (rule "add_literals" (formula "22") (term "0,1,1,0,0,1,0"))
                                 (rule "add_zero_left" (formula "22") (term "1,1,0,0,1,0"))
                                 (rule "applyEq" (formula "21") (term "1,1,1,0,0") (ifseqformula "9"))
                                 (rule "polySimp_addAssoc" (formula "21") (term "1,1,0,0"))
                                 (rule "add_literals" (formula "21") (term "0,1,1,0,0"))
                                 (rule "applyEq" (formula "19") (term "1") (ifseqformula "9"))
                                 (rule "applyEq" (formula "2") (term "0") (ifseqformula "9"))
                                 (rule "inEqSimp_homoInEq1" (formula "2"))
                                 (rule "polySimp_mulComm0" (formula "2") (term "1,0"))
                                 (rule "polySimp_rightDist" (formula "2") (term "1,0"))
                                 (rule "mul_literals" (formula "2") (term "0,1,0"))
                                 (rule "polySimp_addAssoc" (formula "2") (term "0"))
                                 (rule "polySimp_addComm1" (formula "2") (term "0,0"))
                                 (rule "add_literals" (formula "2") (term "0,0,0"))
                                 (rule "polySimp_pullOutFactor1b" (formula "2") (term "0"))
                                 (rule "add_literals" (formula "2") (term "1,1,0"))
                                 (rule "times_zero_1" (formula "2") (term "1,0"))
                                 (rule "add_zero_right" (formula "2") (term "0"))
                                 (rule "leq_literals" (formula "2"))
                                 (rule "closeFalse" (formula "2"))
                              )
                           )
                           (branch
                               (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "14")))
                              (rule "closeTrue" (formula "19"))
                           )
                        )
                     )
                     (branch
                         (builtin "One Step Simplification" (formula "1"))
                         (builtin "One Step Simplification" (formula "19"))
                        (rule "closeTrue" (formula "19"))
                     )
                  )
                  (branch
                      (builtin "One Step Simplification" (formula "1"))
                      (builtin "One Step Simplification" (formula "19"))
                     (rule "closeTrue" (formula "19"))
                  )
               )
               (branch
                  (rule "impRight" (formula "18"))
                  (rule "andRight" (formula "19"))
                  (branch
                     (rule "andRight" (formula "19"))
                     (branch
                        (rule "andRight" (formula "19"))
                        (branch
                           (rule "andRight" (formula "19"))
                           (branch
                              (rule "andRight" (formula "19"))
                              (branch
                                 (rule "andRight" (formula "19"))
                                 (branch
                                    (rule "andRight" (formula "19"))
                                    (branch
                                        (builtin "One Step Simplification" (formula "1"))
                                       (rule "closeFalse" (formula "1"))
                                    )
                                    (branch
                                        (builtin "One Step Simplification" (formula "1"))
                                       (rule "closeFalse" (formula "1"))
                                    )
                                 )
                                 (branch
                                    (rule "andRight" (formula "19"))
                                    (branch
                                        (builtin "One Step Simplification" (formula "1"))
                                       (rule "closeFalse" (formula "1"))
                                    )
                                    (branch
                                        (builtin "One Step Simplification" (formula "1"))
                                       (rule "closeFalse" (formula "1"))
                                    )
                                 )
                              )
                              (branch
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "closeFalse" (formula "1"))
                              )
                           )
                           (branch
                              (rule "orRight" (formula "19"))
                               (builtin "One Step Simplification" (formula "1"))
                              (rule "closeFalse" (formula "1"))
                           )
                        )
                        (branch
                           (rule "orRight" (formula "19"))
                            (builtin "One Step Simplification" (formula "1"))
                           (rule "closeFalse" (formula "1"))
                        )
                     )
                     (branch
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "closeFalse" (formula "1"))
                     )
                  )
                  (branch
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "closeFalse" (formula "1"))
                  )
               )
            )
         )
      )
   )
)
)
}
