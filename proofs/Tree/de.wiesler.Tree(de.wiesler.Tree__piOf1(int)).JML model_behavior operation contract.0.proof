\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Thu Aug 18 14:53:21 CEST 2022
[Labels]UseOriginLabels=true
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_OFF
[SMTSettings]invariantForall=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[Choice]DefaultChoices=JavaCard-JavaCard\\:off , Strings-Strings\\:on , assertions-assertions\\:safe , bigint-bigint\\:on , finalFields-finalFields\\:immutable , floatRules-floatRules\\:strictfpOnly , initialisation-initialisation\\:disableStaticInitialisation , intRules-intRules\\:arithmeticSemanticsCheckingOF , integerSimplificationRules-integerSimplificationRules\\:full , javaLoopTreatment-javaLoopTreatment\\:efficient , mergeGenerateIsWeakeningGoal-mergeGenerateIsWeakeningGoal\\:off , methodExpansion-methodExpansion\\:modularOnly , modelFields-modelFields\\:treatAsAxiom , moreSeqRules-moreSeqRules\\:off , permissions-permissions\\:off , programRules-programRules\\:Java , reach-reach\\:on , runtimeExceptions-runtimeExceptions\\:ban , sequences-sequences\\:on , wdChecks-wdChecks\\:off , wdOperator-wdOperator\\:L
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_INVARIANT
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_DEF_OPS
[SMTSettings]SelectedTaclets=
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[Strategy]MaximumNumberOfAutomaticApplications=10000
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_DELAYED
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]MPS_OPTIONS_KEY=MPS_MERGE
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[Strategy]Timeout=-1
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_RESTRICTED
[SMTSettings]useUninterpretedMultiplication=true
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT_INTERNAL
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[SMTSettings]maxGenericSorts=2
[StrategyProperty]OSS_OPTIONS_KEY=OSS_ON
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
[SMTSettings]integersMinimum=-2147483645
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]integersMaximum=2147483645
"
}

\javaSource "../../src";

\proofObligation "#Proof Obligation Settings
#Thu Aug 18 14:53:21 CEST 2022
contract=de.wiesler.Tree[de.wiesler.Tree\\:\\:piOf1(int)].JML model_behavior operation contract.0
name=de.wiesler.Tree[de.wiesler.Tree\\:\\:piOf1(int)].JML model_behavior operation contract.0
class=de.uka.ilkd.key.proof.init.FunctionalOperationContractPO
";

\proof {
(keyLog "0" (keyUser "Julian" ) (keyVersion "e1a85b31e7"))

(autoModeTime "208")

(branch "dummy ID"
 (builtin "One Step Simplification" (formula "1"))
(rule "impRight" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "Definition_axiom_for_pi_in_de_wiesler_Tree" (formula "5") (term "0") (userinteraction))
(rule "log1Concrete" (formula "5") (term "1,1,1,0,0,0") (userinteraction))
(rule "ifthenelse_split" (formula "5") (term "1,1,1,0,0,0") (userinteraction))
(branch "2 > 1 TRUE"
   (rule "eqTermCut" (formula "6") (term "0") (inst "s=pow(Z(2(#)), sub(log_buckets, Z(1(#))))") (userinteraction))
   (branch "Assume (2 * (1 - pow(2, 0)) + 1) * pow(2, javaSubInt(log_buckets, 1) - log(2, 1)) = pow(2, log_buckets - 1)"
      (rule "applyEq" (formula "7") (term "0") (ifseqformula "1") (userinteraction))
      (rule "powSplitFactor" (formula "7") (term "0,1") (userinteraction))
      (rule "pow_literals" (formula "2") (term "1,1,0,0,0"))
      (rule "greater_literals" (formula "3"))
      (rule "true_left" (formula "3"))
      (rule "expand_inInt" (formula "4"))
      (rule "greater_literals" (formula "1") (term "1,0"))
       (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "6")))
      (rule "sub_literals" (formula "2") (term "1,0,0,0"))
      (rule "replace_int_MAX" (formula "4") (term "1,0"))
      (rule "replace_int_MIN" (formula "4") (term "0,1"))
      (rule "times_zero_1" (formula "2") (term "0,0,0"))
      (rule "add_zero_left" (formula "2") (term "0,0"))
      (rule "andLeft" (formula "4"))
      (rule "eqSymm" (formula "8"))
      (rule "translateJavaSubInt" (formula "2") (term "0,1,1,0"))
      (rule "polySimp_elimSub" (formula "2") (term "1,1"))
      (rule "mul_literals" (formula "2") (term "1,1,1"))
      (rule "polySimp_elimSub" (formula "1") (term "1,1,1"))
      (rule "mul_literals" (formula "1") (term "1,1,1,1"))
      (rule "polySimp_elimSub" (formula "8") (term "0"))
      (rule "eqSymm" (formula "8"))
      (rule "polySimp_elimOneLeft0" (formula "2") (term "0"))
      (rule "polySimp_elimSub" (formula "8") (term "1,0"))
      (rule "mul_literals" (formula "8") (term "1,1,0"))
      (rule "polySimp_elimSub" (formula "2") (term "1,0"))
      (rule "polySimp_elimSub" (formula "2") (term "0,1,0"))
      (rule "mul_literals" (formula "2") (term "1,0,1,0"))
      (rule "polySimp_mulComm0" (formula "1") (term "1"))
      (rule "eqSymm" (formula "1"))
      (rule "polySimp_addComm0" (formula "2") (term "1,1"))
      (rule "polySimp_addComm0" (formula "8") (term "1,0"))
      (rule "polySimp_addComm0" (formula "2") (term "0,1,0"))
      (rule "polySimp_addComm0" (formula "1") (term "1,0,0"))
      (rule "log1Concrete" (formula "2") (term "0,1,1,0"))
      (rule "greater_literals" (formula "2") (term "0,0,1,1,0"))
       (builtin "One Step Simplification" (formula "2"))
      (rule "times_zero_2" (formula "2") (term "1,1,0"))
      (rule "add_zero_right" (formula "2") (term "1,0"))
       (builtin "One Step Simplification" (formula "2"))
      (rule "true_left" (formula "2"))
      (rule "inEqSimp_commuteLeq" (formula "4"))
      (rule "inEqSimp_subsumption1" (formula "4") (ifseqformula "6"))
      (rule "leq_literals" (formula "4") (term "0"))
       (builtin "One Step Simplification" (formula "4"))
      (rule "true_left" (formula "4"))
      (rule "newSym_eq" (formula "1") (inst "l=l_0") (inst "newSymDef=mul(pow(Z(2(#)), log_buckets), Z(0(#)))"))
      (rule "times_zero_1" (formula "1") (term "1,1"))
      (rule "add_zero_right" (formula "1") (term "1"))
      (rule "applyEq" (formula "7") (term "0") (ifseqformula "1"))
      (rule "polySimp_homoEq" (formula "7"))
      (rule "polySimp_addComm1" (formula "7") (term "0"))
      (rule "polySimp_addComm0" (formula "7") (term "0,0"))
      (rule "applyEq" (formula "2") (term "0,0") (ifseqformula "1"))
      (rule "eqSymm" (formula "2"))
      (rule "applyEq" (formula "7") (term "0,0,1,0") (ifseqformula "2"))
      (rule "polySimp_addComm1" (formula "7") (term "0"))
      (rule "applyEq" (formula "7") (term "1,0") (ifseqformula "2"))
      (rule "polySimp_addComm1" (formula "7") (term "0"))
      (rule "polySimp_pullOutFactor0" (formula "7") (term "0,0"))
      (rule "add_literals" (formula "7") (term "1,0,0"))
      (rule "polySimp_elimOne" (formula "7") (term "0,0"))
      (rule "polySimp_sepNegMonomial" (formula "7"))
      (rule "polySimp_mulLiterals" (formula "7") (term "0"))
      (rule "polySimp_elimOne" (formula "7") (term "0"))
      (rule "jdiv_axiom" (formula "7") (term "0"))
      (rule "polySimp_mulLiterals" (formula "1") (term "0,0,2,1"))
      (rule "eqSymm" (formula "1"))
      (rule "polyDiv_pullOut" (formula "1") (term "1,0") (inst "polyDivCoeff=l_0"))
      (rule "polySimp_mulLiterals" (formula "1") (term "1,0,0,2,1,0"))
      (rule "equal_literals" (formula "1") (term "0,1,0"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "polySimp_pullOutFactor0" (formula "1") (term "0,0,1,0"))
      (rule "add_literals" (formula "1") (term "1,0,0,1,0"))
      (rule "times_zero_1" (formula "1") (term "0,0,1,0"))
      (rule "div_literals" (formula "1") (term "0,1,0"))
      (rule "add_zero_left" (formula "1") (term "1,0"))
      (rule "polyDiv_pullOut" (formula "1") (term "0,2,0") (inst "polyDivCoeff=mul(l_0, Z(neglit(1(#))))"))
      (rule "polySimp_mulLiterals" (formula "1") (term "1,0,0,2,0,2,0"))
      (rule "equal_literals" (formula "1") (term "0,0,2,0"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "polySimp_mulLiterals" (formula "1") (term "1,0,0,0,2,0"))
      (rule "polySimp_pullOutFactor0" (formula "1") (term "0,0,0,2,0"))
      (rule "add_literals" (formula "1") (term "1,0,0,0,2,0"))
      (rule "times_zero_1" (formula "1") (term "0,0,0,2,0"))
      (rule "div_literals" (formula "1") (term "0,0,2,0"))
      (rule "add_zero_left" (formula "1") (term "0,2,0"))
      (rule "polySimp_mulLiterals" (formula "1") (term "2,0"))
      (rule "polySimp_elimOne" (formula "1") (term "2,0"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "eqSymm" (formula "1"))
      (rule "close" (formula "8") (ifseqformula "1"))
   )
   (branch "Assume (2 * (1 - pow(2, 0)) + 1) * pow(2, javaSubInt(log_buckets, 1) - log(2, 1)) != pow(2, log_buckets - 1)"
      (rule "pow_literals" (formula "7") (term "1,1,0,0,0"))
      (rule "greater_literals" (formula "2"))
      (rule "true_left" (formula "2"))
      (rule "expand_inInt" (formula "3"))
      (rule "pow_literals" (formula "1") (term "1,1,0,0,0,0"))
      (rule "sub_literals" (formula "6") (term "1,0,0,0"))
      (rule "replace_int_MIN" (formula "3") (term "0,1"))
      (rule "replace_int_MAX" (formula "3") (term "1,0"))
      (rule "sub_literals" (formula "1") (term "1,0,0,0,0"))
      (rule "times_zero_1" (formula "6") (term "0,0,0"))
      (rule "times_zero_1" (formula "1") (term "0,0,0,0"))
      (rule "add_zero_left" (formula "6") (term "0,0"))
      (rule "add_zero_left" (formula "1") (term "0,0,0"))
      (rule "andLeft" (formula "3"))
      (rule "notLeft" (formula "1"))
      (rule "translateJavaSubInt" (formula "7") (term "0,1,1,0"))
      (rule "translateJavaSubInt" (formula "6") (term "0,1,1,0"))
      (rule "polySimp_elimSub" (formula "7") (term "1"))
      (rule "polySimp_elimSub" (formula "6") (term "1,1"))
      (rule "mul_literals" (formula "6") (term "1,1,1"))
      (rule "polySimp_elimSub" (formula "7") (term "0,1,1,0"))
      (rule "mul_literals" (formula "7") (term "1,0,1,1,0"))
      (rule "polySimp_elimOneLeft0" (formula "6") (term "0"))
      (rule "polySimp_elimSub" (formula "7") (term "1,1,0"))
      (rule "polySimp_elimSub" (formula "6") (term "1,0"))
      (rule "polySimp_elimOneLeft0" (formula "7") (term "0"))
      (rule "polySimp_elimSub" (formula "6") (term "0,1,0"))
      (rule "mul_literals" (formula "6") (term "1,0,1,0"))
      (rule "polySimp_addComm0" (formula "6") (term "1,1"))
      (rule "polySimp_addComm0" (formula "7") (term "0,1,0"))
      (rule "polySimp_addComm0" (formula "6") (term "0,1,0"))
      (rule "log1Concrete" (formula "6") (term "0,1,1,0"))
      (rule "greater_literals" (formula "6") (term "0,0,1,1,0"))
       (builtin "One Step Simplification" (formula "6"))
      (rule "times_zero_2" (formula "6") (term "1,1,0"))
      (rule "add_zero_right" (formula "6") (term "1,0"))
       (builtin "One Step Simplification" (formula "6"))
      (rule "closeTrue" (formula "6"))
   )
)
(branch "2 > 1 FALSE"
   (rule "expand_inInt" (formula "2"))
   (rule "greater_literals" (formula "5"))
   (rule "closeTrue" (formula "5"))
)
)
}
