\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Fri Sep 02 13:06:58 CEST 2022
[NewSMT]NoTypeHierarchy=false
[Labels]UseOriginLabels=true
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[NewSMT]Presburger=false
[SMTSettings]invariantForall=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[Choice]DefaultChoices=JavaCard-JavaCard\\:on , Strings-Strings\\:on , assertions-assertions\\:safe , bigint-bigint\\:on , finalFields-finalFields\\:immutable , floatRules-floatRules\\:strictfpOnly , initialisation-initialisation\\:disableStaticInitialisation , intRules-intRules\\:arithmeticSemanticsIgnoringOF , integerSimplificationRules-integerSimplificationRules\\:full , javaLoopTreatment-javaLoopTreatment\\:efficient , mergeGenerateIsWeakeningGoal-mergeGenerateIsWeakeningGoal\\:off , methodExpansion-methodExpansion\\:modularOnly , modelFields-modelFields\\:treatAsAxiom , moreSeqRules-moreSeqRules\\:on , permissions-permissions\\:off , programRules-programRules\\:Java , reach-reach\\:on , runtimeExceptions-runtimeExceptions\\:ban , sequences-sequences\\:on , wdChecks-wdChecks\\:off , wdOperator-wdOperator\\:L
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_SCOPE_INV_TACLET
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_DEF_OPS
[SMTSettings]SelectedTaclets=
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[Strategy]MaximumNumberOfAutomaticApplications=10000
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_DELAYED
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]MPS_OPTIONS_KEY=MPS_MERGE
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[Strategy]Timeout=-1
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_OFF
[SMTSettings]useUninterpretedMultiplication=true
[NewSMT]sqrtSMTTranslation=SMT
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT_INTERNAL
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[NewSMT]identifier=OPEN
[SMTSettings]maxGenericSorts=2
[StrategyProperty]OSS_OPTIONS_KEY=OSS_ON
[NewSMT]Axiomatisations=false
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
[SMTSettings]integersMinimum=-2147483645
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]integersMaximum=2147483645
"
}

\javaSource "../../src";

\proofObligation "#Proof Obligation Settings
#Fri Sep 02 13:06:58 CEST 2022
contract=de.wiesler.Cleanup[de.wiesler.Cleanup\\:\\:cleanedUpSlice([I,int,int,int,int,de.wiesler.Classifier,int)].JML accessible clause.0
name=de.wiesler.Cleanup[de.wiesler.Cleanup\\:\\:cleanedUpSlice([I,int,int,int,int,de.wiesler.Classifier,int)].JML accessible clause.0
class=de.uka.ilkd.key.proof.init.DependencyContractPO
";

\proof {
(keyLog "0" (keyUser "Julian" ) (keyVersion "e1a85b31e7"))
(keyLog "1" (keyUser "Julian" ) (keyVersion "e1a85b31e7"))

(autoModeTime "21881")

(branch "dummy ID"
(rule "impRight" (formula "1") (newnames "values_0,begin,end,bucket_begin,bucket_end,classifier,bucket,anon_heap"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "3"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "5"))
(rule "andLeft" (formula "2"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "8"))
(rule "notLeft" (formula "7"))
(rule "andLeft" (formula "3"))
(rule "andLeft" (formula "3"))
(rule "andLeft" (formula "3"))
(rule "andLeft" (formula "3"))
(rule "andLeft" (formula "3"))
(rule "Definition_axiom_for_cleanedUpSlice_in_de_wiesler_Cleanup" (formula "14") (term "0") (userinteraction))
(rule "Definition_axiom_for_cleanedUpSlice_in_de_wiesler_Cleanup" (formula "14") (term "1,1") (userinteraction))
 (builtin "One Step Simplification" (formula "14") (userinteraction))
(rule "Definition_axiom_for_smallBucketIsSorted_in_de_wiesler_Sorter" (formula "14") (term "0,1,1") (userinteraction))
(rule "Definition_axiom_for_smallBucketIsSorted_in_de_wiesler_Sorter" (formula "14") (term "0,1,0") (userinteraction))
 (builtin "Use Dependency Contract" (formula "14") (term "0,0,1") (ifInst ""  (formula "14") (term "0,0,0")) (contract "de.wiesler.Classifier[de.wiesler.Classifier::isClassOfSlice([I,int,int,int)].JML accessible clause.0") (userinteraction))
 (builtin "Use Dependency Contract" (formula "15") (term "0,1,0,0,1,1") (ifInst ""  (formula "15") (term "0,1,0,0,1,0")) (contract "de.wiesler.Functions[de.wiesler.Functions::isSortedSlice([I,int,int)].JML accessible clause.0") (userinteraction))
(rule "impLeft" (formula "12") (userinteraction))
(branch "Case 1"
    (builtin "One Step Simplification" (formula "12") (ifInst ""  (formula "1")) (ifInst ""  (formula "3")) (ifInst ""  (formula "14")))
    (builtin "One Step Simplification" (formula "9"))
    (builtin "One Step Simplification" (formula "7"))
    (builtin "One Step Simplification" (formula "6"))
    (builtin "One Step Simplification" (formula "5"))
    (builtin "One Step Simplification" (formula "4"))
    (builtin "One Step Simplification" (formula "12"))
    (builtin "One Step Simplification" (formula "9") (ifInst ""  (formula "11")) (ifInst ""  (formula "1")) (ifInst ""  (formula "3")) (ifInst ""  (formula "7")) (ifInst ""  (formula "10")))
   (rule "true_left" (formula "5"))
   (rule "wellFormedAnon" (formula "7") (term "0,0"))
   (rule "wellFormedAnon" (formula "8") (term "1,0"))
   (rule "translateJavaAddInt" (formula "7") (term "2,0,1"))
   (rule "translateJavaAddInt" (formula "7") (term "3,1,1"))
   (rule "translateJavaSubInt" (formula "7") (term "2,0,0,1,0,1,0"))
   (rule "translateJavaAddInt" (formula "7") (term "0,2,0,0,1,1,0,0,1"))
   (rule "translateJavaAddInt" (formula "7") (term "2,1,1"))
   (rule "translateJavaAddInt" (formula "7") (term "1,1,1,0"))
   (rule "translateJavaAddInt" (formula "7") (term "1,0,0,1,1,0,0,1"))
   (rule "translateJavaAddInt" (formula "7") (term "3,0,1"))
   (rule "translateJavaSubInt" (formula "7") (term "2,1,1,0"))
   (rule "translateJavaAddInt" (formula "7") (term "1,0,0,1,0,1,0"))
   (rule "translateJavaAddInt" (formula "11") (term "1,0,0,1,1,0,0,1,1,1"))
   (rule "translateJavaSubInt" (formula "11") (term "0,0,0,1,1"))
   (rule "translateJavaAddInt" (formula "11") (term "4,0,0,1"))
   (rule "translateJavaAddInt" (formula "11") (term "3,0,1,1,0"))
   (rule "translateJavaSubInt" (formula "11") (term "2,0,0,1,1,0,0,1,1,1"))
   (rule "translateJavaAddInt" (formula "11") (term "2,0,1,1,0"))
   (rule "translateJavaAddInt" (formula "11") (term "3,0,0,0"))
   (rule "translateJavaAddInt" (formula "11") (term "4,0,0,0"))
   (rule "translateJavaAddInt" (formula "11") (term "2,0,1,1,1"))
   (rule "translateJavaAddInt" (formula "11") (term "3,0,1,1,1"))
   (rule "translateJavaSubInt" (formula "11") (term "0,1,0,1,1"))
   (rule "translateJavaAddInt" (formula "11") (term "1,0,0,1,1,0,0,0,1"))
   (rule "translateJavaSubInt" (formula "11") (term "2,0,0,1,1,0,0,0,1"))
   (rule "translateJavaAddInt" (formula "11") (term "3,0,0,1"))
   (rule "translateJavaSubInt" (formula "11") (term "0,1,0,1,0"))
   (rule "translateJavaSubInt" (formula "11") (term "0,0,0,1,0"))
   (rule "translateJavaAddInt" (formula "8") (term "1,0,0,1,0,1"))
   (rule "translateJavaSubInt" (formula "8") (term "2,0,0,1,0,1"))
   (rule "translateJavaAddInt" (formula "8") (term "1,1,1,1"))
   (rule "translateJavaSubInt" (formula "8") (term "2,1,1,1"))
   (rule "translateJavaAddInt" (formula "7") (term "0,2,0,0,1,0,1,0"))
   (rule "translateJavaSubInt" (formula "7") (term "2,0,0,1,1,0,0,1"))
   (rule "translateJavaAddInt" (formula "7") (term "0,2,1,1,0"))
   (rule "translateJavaAddInt" (formula "11") (term "0,2,0,0,1,1,0,0,1,1,1"))
   (rule "translateJavaAddInt" (formula "11") (term "0,2,0,0,1,1,0,0,0,1"))
   (rule "translateJavaAddInt" (formula "8") (term "0,2,0,0,1,0,1"))
   (rule "translateJavaAddInt" (formula "8") (term "0,2,1,1,1"))
   (rule "replace_known_right" (formula "4") (term "0") (ifseqformula "10"))
    (builtin "One Step Simplification" (formula "4"))
   (rule "replace_known_right" (formula "3") (term "0") (ifseqformula "9"))
    (builtin "One Step Simplification" (formula "3"))
   (rule "replace_known_left" (formula "8") (term "0,1,0") (ifseqformula "1"))
    (builtin "One Step Simplification" (formula "8") (ifInst ""  (formula "4")) (ifInst ""  (formula "2")))
   (rule "replace_known_left" (formula "7") (term "1,0,0") (ifseqformula "2"))
    (builtin "One Step Simplification" (formula "7") (ifInst ""  (formula "1")))
   (rule "polySimp_elimSub" (formula "11") (term "0,0,0,1,1"))
   (rule "polySimp_elimSub" (formula "11") (term "0,1,0,1,1"))
   (rule "polySimp_elimSub" (formula "11") (term "0,1,0,1,0"))
   (rule "polySimp_elimSub" (formula "11") (term "0,0,0,1,0"))
   (rule "polySimp_elimSub" (formula "11") (term "2,0,0,1,1,0,0,1,1,1"))
   (rule "mul_literals" (formula "11") (term "1,2,0,0,1,1,0,0,1,1,1"))
   (rule "polySimp_elimSub" (formula "11") (term "2,0,0,1,1,0,0,0,1"))
   (rule "mul_literals" (formula "11") (term "1,2,0,0,1,1,0,0,0,1"))
   (rule "polySimp_elimSub" (formula "8") (term "2,1,1"))
   (rule "mul_literals" (formula "8") (term "1,2,1,1"))
   (rule "polySimp_elimSub" (formula "8") (term "2,0,0,1,0"))
   (rule "mul_literals" (formula "8") (term "1,2,0,0,1,0"))
   (rule "polySimp_elimSub" (formula "7") (term "2,1,0"))
   (rule "mul_literals" (formula "7") (term "1,2,1,0"))
   (rule "polySimp_elimSub" (formula "7") (term "2,0,0,1,0,0"))
   (rule "mul_literals" (formula "7") (term "1,2,0,0,1,0,0"))
   (rule "polySimp_elimSub" (formula "7") (term "2,0,0,1,1,0,0,1"))
   (rule "mul_literals" (formula "7") (term "1,2,0,0,1,1,0,0,1"))
   (rule "polySimp_addComm0" (formula "11") (term "0,0,0,1,1"))
   (rule "polySimp_addComm0" (formula "11") (term "0,1,0,1,1"))
   (rule "polySimp_addComm0" (formula "11") (term "0,1,0,1,0"))
   (rule "polySimp_addComm0" (formula "11") (term "0,0,0,1,0"))
   (rule "polySimp_addComm1" (formula "11") (term "2,0,0,1,1,0,0,1,1,1"))
   (rule "polySimp_addComm1" (formula "11") (term "2,0,0,1,1,0,0,0,1"))
   (rule "polySimp_addComm1" (formula "8") (term "2,1,1"))
   (rule "polySimp_addComm1" (formula "8") (term "2,0,0,1,0"))
   (rule "polySimp_addComm1" (formula "7") (term "2,1,0"))
   (rule "polySimp_addComm1" (formula "7") (term "2,0,0,1,0,0"))
   (rule "polySimp_addComm1" (formula "7") (term "2,0,0,1,1,0,0,1"))
   (rule "polySimp_addComm0" (formula "11") (term "0,2,0,0,1,1,0,0,1,1,1"))
   (rule "polySimp_addComm0" (formula "11") (term "0,2,0,0,1,1,0,0,0,1"))
   (rule "polySimp_addComm0" (formula "8") (term "0,2,1,1"))
   (rule "polySimp_addComm0" (formula "8") (term "0,2,0,0,1,0"))
   (rule "polySimp_addComm0" (formula "7") (term "0,2,1,0"))
   (rule "polySimp_addComm0" (formula "7") (term "0,2,0,0,1,0,0"))
   (rule "polySimp_addComm0" (formula "7") (term "0,2,0,0,1,1,0,0,1"))
   (rule "disjointDefinition" (formula "8"))
   (rule "disjointDefinition" (formula "7") (term "0"))
   (rule "inEqSimp_homoInEq0" (formula "11") (term "0,0,1,1"))
   (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0,1,1"))
   (rule "polySimp_rightDist" (formula "11") (term "1,0,0,0,1,1"))
   (rule "polySimp_mulAssoc" (formula "11") (term "0,1,0,0,0,1,1"))
   (rule "polySimp_mulComm0" (formula "11") (term "0,0,1,0,0,0,1,1"))
   (rule "polySimp_mulLiterals" (formula "11") (term "0,1,0,0,0,1,1"))
   (rule "polySimp_elimOne" (formula "11") (term "0,1,0,0,0,1,1"))
   (rule "polySimp_addAssoc" (formula "11") (term "0,0,0,1,1"))
   (rule "inEqSimp_homoInEq0" (formula "11") (term "1,0,1,1"))
   (rule "polySimp_mulComm0" (formula "11") (term "1,0,1,0,1,1"))
   (rule "polySimp_rightDist" (formula "11") (term "1,0,1,0,1,1"))
   (rule "polySimp_mulAssoc" (formula "11") (term "0,1,0,1,0,1,1"))
   (rule "polySimp_mulComm0" (formula "11") (term "0,0,1,0,1,0,1,1"))
   (rule "polySimp_mulLiterals" (formula "11") (term "0,1,0,1,0,1,1"))
   (rule "polySimp_elimOne" (formula "11") (term "0,1,0,1,0,1,1"))
   (rule "polySimp_addAssoc" (formula "11") (term "0,1,0,1,1"))
   (rule "inEqSimp_homoInEq0" (formula "11") (term "1,0,1,0"))
   (rule "polySimp_mulComm0" (formula "11") (term "1,0,1,0,1,0"))
   (rule "polySimp_rightDist" (formula "11") (term "1,0,1,0,1,0"))
   (rule "polySimp_mulAssoc" (formula "11") (term "0,1,0,1,0,1,0"))
   (rule "polySimp_mulComm0" (formula "11") (term "0,0,1,0,1,0,1,0"))
   (rule "polySimp_mulLiterals" (formula "11") (term "0,1,0,1,0,1,0"))
   (rule "polySimp_elimOne" (formula "11") (term "0,1,0,1,0,1,0"))
   (rule "polySimp_addAssoc" (formula "11") (term "0,1,0,1,0"))
   (rule "inEqSimp_homoInEq0" (formula "11") (term "0,0,1,0"))
   (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0,1,0"))
   (rule "polySimp_rightDist" (formula "11") (term "1,0,0,0,1,0"))
   (rule "polySimp_mulAssoc" (formula "11") (term "0,1,0,0,0,1,0"))
   (rule "polySimp_mulComm0" (formula "11") (term "0,0,1,0,0,0,1,0"))
   (rule "polySimp_mulLiterals" (formula "11") (term "0,1,0,0,0,1,0"))
   (rule "polySimp_elimOne" (formula "11") (term "0,1,0,0,0,1,0"))
   (rule "polySimp_addAssoc" (formula "11") (term "0,0,0,1,0"))
   (rule "inEqSimp_sepNegMonomial1" (formula "11") (term "0,0,1,1"))
   (rule "polySimp_mulLiterals" (formula "11") (term "0,0,0,1,1"))
   (rule "polySimp_elimOne" (formula "11") (term "0,0,0,1,1"))
   (rule "inEqSimp_sepNegMonomial1" (formula "11") (term "1,0,1,1"))
   (rule "polySimp_mulLiterals" (formula "11") (term "0,1,0,1,1"))
   (rule "polySimp_elimOne" (formula "11") (term "0,1,0,1,1"))
   (rule "inEqSimp_sepNegMonomial1" (formula "11") (term "1,0,1,0"))
   (rule "polySimp_mulLiterals" (formula "11") (term "0,1,0,1,0"))
   (rule "polySimp_elimOne" (formula "11") (term "0,1,0,1,0"))
   (rule "inEqSimp_sepNegMonomial1" (formula "11") (term "0,0,1,0"))
   (rule "polySimp_mulLiterals" (formula "11") (term "0,0,0,1,0"))
   (rule "polySimp_elimOne" (formula "11") (term "0,0,0,1,0"))
   (rule "distributeIntersection" (formula "8") (term "0"))
   (rule "unionEqualsEmpty" (formula "8"))
   (rule "distributeIntersection" (formula "8") (term "0,0"))
   (rule "unionEqualsEmpty" (formula "8") (term "0"))
   (rule "commuteUnion" (formula "11") (term "0,1,1,0,0,1,1,1"))
   (rule "commuteUnion" (formula "11") (term "0,1,1,0,0,0,1"))
   (rule "commuteUnion" (formula "7") (term "0,1,1,0,0,1"))
   (rule "commuteUnion" (formula "7") (term "0,1,0,0,0"))
   (rule "commuteIntersection" (formula "8") (term "0,1"))
   (rule "commuteUnion" (formula "8") (term "0,1,0,0,1,0"))
   (rule "commuteIntersection" (formula "8") (term "0,0,0"))
   (rule "commuteUnion_2" (formula "11") (term "1,1,0,0,1,1,1"))
   (rule "commuteUnion_2" (formula "11") (term "1,1,0,0,0,1"))
   (rule "commuteUnion_2" (formula "7") (term "1,1,0,0,1"))
   (rule "commuteIntersection" (formula "7") (term "0,0"))
   (rule "commuteUnion" (formula "8") (term "0,1,1,0,1"))
   (rule "commuteIntersection" (formula "8") (term "0,1,0"))
   (rule "commuteUnion" (formula "8") (term "0,1,1,0,0,0"))
   (rule "commuteUnion_2" (formula "7") (term "1,1,0,0"))
   (rule "commuteUnion_2" (formula "8") (term "1,1,0,1"))
   (rule "commuteUnion_2" (formula "8") (term "1,1,0,1,0"))
   (rule "commuteUnion_2" (formula "8") (term "1,1,0,0,0"))
   (rule "Class_invariant_axiom_for_de_wiesler_Classifier" (formula "6"))
    (builtin "One Step Simplification" (formula "6"))
   (rule "translateJavaSubInt" (formula "6") (term "0,2,1,1,0"))
   (rule "translateJavaSubInt" (formula "6") (term "0,2,0,1,0"))
   (rule "translateJavaMulInt" (formula "6") (term "1,1,1,0,0,0,0"))
   (rule "andLeft" (formula "6"))
   (rule "andLeft" (formula "6"))
   (rule "andLeft" (formula "6"))
   (rule "andLeft" (formula "6"))
   (rule "andLeft" (formula "6"))
   (rule "andLeft" (formula "6"))
   (rule "andLeft" (formula "7"))
   (rule "andLeft" (formula "6"))
   (rule "notLeft" (formula "6"))
   (rule "notLeft" (formula "6"))
   (rule "eqSymm" (formula "11"))
   (rule "eqSymm" (formula "8"))
   (rule "polySimp_elimSub" (formula "11") (term "0,2,1"))
   (rule "mul_literals" (formula "11") (term "1,0,2,1"))
   (rule "polySimp_elimSub" (formula "11") (term "0,2,0"))
   (rule "mul_literals" (formula "11") (term "1,0,2,0"))
   (rule "polySimp_mulComm0" (formula "8") (term "1,0"))
   (rule "polySimp_addComm0" (formula "11") (term "0,2,1"))
   (rule "polySimp_addComm0" (formula "11") (term "0,2,0"))
   (rule "inEqSimp_commuteLeq" (formula "6"))
   (rule "Definition_axiom_for_isSortedSlice_in_de_wiesler_Functions" (formula "19") (term "0,1,1,0") (inst "i=i"))
    (builtin "One Step Simplification" (formula "19"))
   (rule "translateJavaAddInt" (formula "19") (term "0,2,1,1,0,1,1,0"))
   (rule "translateJavaSubInt" (formula "19") (term "1,1,0,0,1,1,0"))
   (rule "polySimp_elimSub" (formula "19") (term "1,1,0,0,1,1,0"))
   (rule "mul_literals" (formula "19") (term "1,1,1,0,0,1,1,0"))
   (rule "polySimp_addComm0" (formula "19") (term "0,2,1,1,0,1,1,0"))
   (rule "polySimp_addComm1" (formula "19") (term "1,1,0,0,1,1,0"))
   (rule "polySimp_addComm0" (formula "19") (term "0,1,1,0,0,1,1,0"))
   (rule "inEqSimp_ltToLeq" (formula "19") (term "1,0,0,1,1,0"))
   (rule "polySimp_rightDist" (formula "19") (term "1,0,0,1,0,0,1,1,0"))
   (rule "polySimp_rightDist" (formula "19") (term "0,1,0,0,1,0,0,1,1,0"))
   (rule "mul_literals" (formula "19") (term "0,0,1,0,0,1,0,0,1,1,0"))
   (rule "polySimp_addAssoc" (formula "19") (term "0,0,1,0,0,1,1,0"))
   (rule "polySimp_addAssoc" (formula "19") (term "0,0,0,1,0,0,1,1,0"))
   (rule "add_literals" (formula "19") (term "0,0,0,0,1,0,0,1,1,0"))
   (rule "inEqSimp_commuteLeq" (formula "19") (term "0,0,0,1,1,0"))
   (rule "inEqSimp_commuteLeq" (formula "19") (term "1,0,1,1,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "1,0,0,1,1,0"))
   (rule "polySimp_mulComm0" (formula "19") (term "1,1,0,0,1,1,0"))
   (rule "polySimp_rightDist" (formula "19") (term "1,1,0,0,1,1,0"))
   (rule "polySimp_mulLiterals" (formula "19") (term "1,1,1,0,0,1,1,0"))
   (rule "polySimp_elimOne" (formula "19") (term "1,1,1,0,0,1,1,0"))
   (rule "polySimp_rightDist" (formula "19") (term "0,1,1,0,0,1,1,0"))
   (rule "mul_literals" (formula "19") (term "0,0,1,1,0,0,1,1,0"))
   (rule "polySimp_mulLiterals" (formula "19") (term "1,0,1,1,0,0,1,1,0"))
   (rule "polySimp_elimOne" (formula "19") (term "1,0,1,1,0,0,1,1,0"))
   (rule "nnf_imp2or" (formula "19") (term "0,1,1,0"))
   (rule "nnf_notAnd" (formula "19") (term "0,0,1,1,0"))
   (rule "inEqSimp_notLeq" (formula "19") (term "1,0,0,1,1,0"))
   (rule "polySimp_rightDist" (formula "19") (term "1,0,0,1,0,0,1,1,0"))
   (rule "polySimp_rightDist" (formula "19") (term "0,1,0,0,1,0,0,1,1,0"))
   (rule "mul_literals" (formula "19") (term "0,0,1,0,0,1,0,0,1,1,0"))
   (rule "polySimp_addAssoc" (formula "19") (term "0,0,1,0,0,1,1,0"))
   (rule "polySimp_addAssoc" (formula "19") (term "0,0,0,1,0,0,1,1,0"))
   (rule "add_literals" (formula "19") (term "0,0,0,0,1,0,0,1,1,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "19") (term "1,0,0,1,1,0"))
   (rule "polySimp_mulComm0" (formula "19") (term "1,1,0,0,1,1,0"))
   (rule "polySimp_rightDist" (formula "19") (term "1,1,0,0,1,1,0"))
   (rule "polySimp_mulLiterals" (formula "19") (term "1,1,1,0,0,1,1,0"))
   (rule "polySimp_elimOne" (formula "19") (term "1,1,1,0,0,1,1,0"))
   (rule "polySimp_rightDist" (formula "19") (term "0,1,1,0,0,1,1,0"))
   (rule "polySimp_mulLiterals" (formula "19") (term "1,0,1,1,0,0,1,1,0"))
   (rule "mul_literals" (formula "19") (term "0,0,1,1,0,0,1,1,0"))
   (rule "polySimp_elimOne" (formula "19") (term "1,0,1,1,0,0,1,1,0"))
   (rule "inEqSimp_notGeq" (formula "19") (term "0,0,0,1,1,0"))
   (rule "polySimp_rightDist" (formula "19") (term "1,0,0,0,0,0,1,1,0"))
   (rule "polySimp_mulComm0" (formula "19") (term "0,1,0,0,0,0,0,1,1,0"))
   (rule "polySimp_addAssoc" (formula "19") (term "0,0,0,0,0,1,1,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "0,0,0,1,1,0"))
   (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,0,1,1,0"))
   (rule "polySimp_rightDist" (formula "19") (term "1,0,0,0,1,1,0"))
   (rule "polySimp_mulLiterals" (formula "19") (term "1,1,0,0,0,1,1,0"))
   (rule "polySimp_elimOne" (formula "19") (term "1,1,0,0,0,1,1,0"))
   (rule "polySimp_rightDist" (formula "19") (term "0,1,0,0,0,1,1,0"))
   (rule "mul_literals" (formula "19") (term "0,0,1,0,0,0,1,1,0"))
   (rule "polySimp_mulLiterals" (formula "19") (term "1,0,1,0,0,0,1,1,0"))
   (rule "polySimp_elimOne" (formula "19") (term "1,0,1,0,0,0,1,1,0"))
   (rule "Definition_axiom_for_isSortedSlice_in_de_wiesler_Functions" (formula "13") (term "1,1") (inst "i=i"))
    (builtin "One Step Simplification" (formula "13"))
   (rule "translateJavaAddInt" (formula "13") (term "0,2,1,1,0,0,1,1"))
   (rule "translateJavaSubInt" (formula "13") (term "1,1,0,0,0,1,1"))
   (rule "eqSymm" (formula "13") (term "1"))
   (rule "polySimp_elimSub" (formula "13") (term "1,1,0,0,0,0,1"))
   (rule "mul_literals" (formula "13") (term "1,1,1,0,0,0,0,1"))
   (rule "polySimp_addComm0" (formula "13") (term "0,2,1,1,0,0,0,1"))
   (rule "polySimp_addComm1" (formula "13") (term "1,1,0,0,0,0,1"))
   (rule "polySimp_addComm0" (formula "13") (term "0,1,1,0,0,0,0,1"))
   (rule "inEqSimp_ltToLeq" (formula "13") (term "1,0,0,0,0,1"))
   (rule "polySimp_rightDist" (formula "13") (term "1,0,0,1,0,0,0,0,1"))
   (rule "polySimp_rightDist" (formula "13") (term "0,1,0,0,1,0,0,0,0,1"))
   (rule "mul_literals" (formula "13") (term "0,0,1,0,0,1,0,0,0,0,1"))
   (rule "polySimp_addAssoc" (formula "13") (term "0,0,1,0,0,0,0,1"))
   (rule "polySimp_addAssoc" (formula "13") (term "0,0,0,1,0,0,0,0,1"))
   (rule "add_literals" (formula "13") (term "0,0,0,0,1,0,0,0,0,1"))
   (rule "inEqSimp_commuteLeq" (formula "13") (term "0,0,0,0,0,1"))
   (rule "inEqSimp_commuteLeq" (formula "13") (term "1,0,0,0,1"))
   (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "1,0,0,0,0,1"))
   (rule "polySimp_mulComm0" (formula "13") (term "1,1,0,0,0,0,1"))
   (rule "polySimp_rightDist" (formula "13") (term "1,1,0,0,0,0,1"))
   (rule "polySimp_mulLiterals" (formula "13") (term "1,1,1,0,0,0,0,1"))
   (rule "polySimp_elimOne" (formula "13") (term "1,1,1,0,0,0,0,1"))
   (rule "polySimp_rightDist" (formula "13") (term "0,1,1,0,0,0,0,1"))
   (rule "polySimp_mulLiterals" (formula "13") (term "1,0,1,1,0,0,0,0,1"))
   (rule "mul_literals" (formula "13") (term "0,0,1,1,0,0,0,0,1"))
   (rule "polySimp_elimOne" (formula "13") (term "1,0,1,1,0,0,0,0,1"))
   (rule "nnf_imp2or" (formula "13") (term "0,0,0,1"))
   (rule "nnf_notAnd" (formula "13") (term "0,0,0,0,1"))
   (rule "inEqSimp_notLeq" (formula "13") (term "1,0,0,0,0,1"))
   (rule "polySimp_rightDist" (formula "13") (term "1,0,0,1,0,0,0,0,1"))
   (rule "polySimp_rightDist" (formula "13") (term "0,1,0,0,1,0,0,0,0,1"))
   (rule "mul_literals" (formula "13") (term "0,0,1,0,0,1,0,0,0,0,1"))
   (rule "polySimp_addAssoc" (formula "13") (term "0,0,1,0,0,0,0,1"))
   (rule "polySimp_addAssoc" (formula "13") (term "0,0,0,1,0,0,0,0,1"))
   (rule "add_literals" (formula "13") (term "0,0,0,0,1,0,0,0,0,1"))
   (rule "inEqSimp_sepPosMonomial1" (formula "13") (term "1,0,0,0,0,1"))
   (rule "polySimp_mulComm0" (formula "13") (term "1,1,0,0,0,0,1"))
   (rule "polySimp_rightDist" (formula "13") (term "1,1,0,0,0,0,1"))
   (rule "polySimp_mulLiterals" (formula "13") (term "1,1,1,0,0,0,0,1"))
   (rule "polySimp_elimOne" (formula "13") (term "1,1,1,0,0,0,0,1"))
   (rule "polySimp_rightDist" (formula "13") (term "0,1,1,0,0,0,0,1"))
   (rule "polySimp_mulLiterals" (formula "13") (term "1,0,1,1,0,0,0,0,1"))
   (rule "mul_literals" (formula "13") (term "0,0,1,1,0,0,0,0,1"))
   (rule "polySimp_elimOne" (formula "13") (term "1,0,1,1,0,0,0,0,1"))
   (rule "inEqSimp_notGeq" (formula "13") (term "0,0,0,0,0,1"))
   (rule "polySimp_rightDist" (formula "13") (term "1,0,0,0,0,0,0,0,1"))
   (rule "polySimp_mulComm0" (formula "13") (term "0,1,0,0,0,0,0,0,0,1"))
   (rule "polySimp_addAssoc" (formula "13") (term "0,0,0,0,0,0,0,1"))
   (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "0,0,0,0,0,1"))
   (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,0,0,0,1"))
   (rule "polySimp_rightDist" (formula "13") (term "1,0,0,0,0,0,1"))
   (rule "polySimp_mulLiterals" (formula "13") (term "1,1,0,0,0,0,0,1"))
   (rule "polySimp_elimOne" (formula "13") (term "1,1,0,0,0,0,0,1"))
   (rule "polySimp_rightDist" (formula "13") (term "0,1,0,0,0,0,0,1"))
   (rule "polySimp_mulLiterals" (formula "13") (term "1,0,1,0,0,0,0,0,1"))
   (rule "mul_literals" (formula "13") (term "0,0,1,0,0,0,0,0,1"))
   (rule "polySimp_elimOne" (formula "13") (term "1,0,1,0,0,0,0,0,1"))
   (rule "Class_invariant_axiom_for_de_wiesler_Tree" (formula "12") (inst "i=i") (inst "i_0=i_0"))
    (builtin "One Step Simplification" (formula "12"))
   (rule "translateJavaSubInt" (formula "12") (term "0,2,1,1,0,1"))
   (rule "translateJavaSubInt" (formula "12") (term "3,0,1,0,0"))
   (rule "andLeft" (formula "12"))
   (rule "andLeft" (formula "12"))
   (rule "andLeft" (formula "12"))
   (rule "andLeft" (formula "12"))
   (rule "andLeft" (formula "12"))
   (rule "andLeft" (formula "13"))
   (rule "andLeft" (formula "12"))
   (rule "andLeft" (formula "12"))
   (rule "andLeft" (formula "12"))
   (rule "andLeft" (formula "14"))
   (rule "notLeft" (formula "13"))
   (rule "notLeft" (formula "12"))
   (rule "eqSymm" (formula "20") (term "1,0"))
   (rule "polySimp_elimSub" (formula "18") (term "3,0"))
   (rule "mul_literals" (formula "18") (term "1,3,0"))
   (rule "polySimp_elimSub" (formula "20") (term "0,2,0,1,0"))
   (rule "mul_literals" (formula "20") (term "1,0,2,0,1,0"))
   (rule "polySimp_addComm0" (formula "18") (term "3,0"))
   (rule "polySimp_addComm0" (formula "20") (term "0,2,0,1,0"))
   (rule "inEqSimp_ltToLeq" (formula "20") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,1,0,0"))
   (rule "inEqSimp_ltToLeq" (formula "19") (term "1,1,0"))
   (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,1,1,0"))
   (rule "inEqSimp_ltToLeq" (formula "19") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,1,0,0"))
   (rule "inEqSimp_commuteLeq" (formula "20") (term "0,0,0"))
   (rule "inEqSimp_commuteLeq" (formula "19") (term "0,0,0"))
   (rule "inEqSimp_commuteLeq" (formula "19") (term "0,1,0"))
   (rule "inEqSimp_commuteLeq" (formula "17"))
   (rule "inEqSimp_commuteLeq" (formula "16"))
   (rule "inEqSimp_commuteLeq" (formula "15"))
   (rule "inEqSimp_commuteLeq" (formula "12"))
   (rule "applyEq" (formula "15") (term "0") (ifseqformula "14"))
   (rule "applyEq" (formula "16") (term "1") (ifseqformula "14"))
   (rule "applyEq" (formula "20") (term "1,0,1,0") (ifseqformula "9"))
   (rule "applyEq" (formula "11") (term "1,0,2,0") (ifseqformula "14"))
   (rule "eqSymm" (formula "11"))
   (rule "applyEq" (formula "17") (term "0,0") (ifseqformula "9"))
   (rule "inEqSimp_commuteGeq" (formula "17"))
   (rule "applyEq" (formula "8") (term "0,1,0") (ifseqformula "14"))
   (rule "applyEq" (formula "18") (term "1,3,0") (ifseqformula "14"))
   (rule "applyEq" (formula "8") (term "2,0") (ifseqformula "14"))
   (rule "applyEq" (formula "18") (term "1,0") (ifseqformula "9"))
   (rule "applyEq" (formula "10") (term "3,0") (ifseqformula "14"))
   (rule "applyEq" (formula "22") (term "0") (ifseqformula "9"))
   (rule "applyEq" (formula "20") (term "0,1,0,0,1,0,0") (ifseqformula "14"))
   (rule "applyEq" (formula "19") (term "0,1,0,0,1,0,0") (ifseqformula "14"))
   (rule "applyEq" (formula "19") (term "0,1,0,0,1,1,0") (ifseqformula "14"))
   (rule "applyEq" (formula "11") (term "1,0,2,0") (ifseqformula "14"))
   (rule "eqSymm" (formula "11"))
   (rule "applyEq" (formula "17") (term "0") (ifseqformula "14"))
   (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "20") (term "1,1,0,0"))
   (rule "polySimp_rightDist" (formula "20") (term "1,1,0,0"))
   (rule "mul_literals" (formula "20") (term "0,1,1,0,0"))
   (rule "polySimp_mulLiterals" (formula "20") (term "1,1,1,0,0"))
   (rule "polySimp_elimOne" (formula "20") (term "1,1,1,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "19") (term "1,1,0,0"))
   (rule "polySimp_rightDist" (formula "19") (term "1,1,0,0"))
   (rule "mul_literals" (formula "19") (term "0,1,1,0,0"))
   (rule "polySimp_mulLiterals" (formula "19") (term "1,1,1,0,0"))
   (rule "polySimp_elimOne" (formula "19") (term "1,1,1,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "1,1,0"))
   (rule "polySimp_mulComm0" (formula "19") (term "1,1,1,0"))
   (rule "polySimp_rightDist" (formula "19") (term "1,1,1,0"))
   (rule "mul_literals" (formula "19") (term "0,1,1,1,0"))
   (rule "polySimp_mulLiterals" (formula "19") (term "1,1,1,1,0"))
   (rule "polySimp_elimOne" (formula "19") (term "1,1,1,1,0"))
   (rule "inEqSimp_exactShadow3" (formula "15") (ifseqformula "17"))
   (rule "mul_literals" (formula "15") (term "0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "15"))
   (rule "mul_literals" (formula "15") (term "1"))
   (rule "nnf_imp2or" (formula "21") (term "0"))
   (rule "nnf_imp2or" (formula "20") (term "0"))
   (rule "nnf_notAnd" (formula "21") (term "0,0"))
   (rule "inEqSimp_notLeq" (formula "21") (term "1,0,0"))
   (rule "polySimp_rightDist" (formula "21") (term "1,0,0,1,0,0"))
   (rule "mul_literals" (formula "21") (term "0,1,0,0,1,0,0"))
   (rule "polySimp_addAssoc" (formula "21") (term "0,0,1,0,0"))
   (rule "add_literals" (formula "21") (term "0,0,0,1,0,0"))
   (rule "add_zero_left" (formula "21") (term "0,0,1,0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "21") (term "1,0,0"))
   (rule "polySimp_mulLiterals" (formula "21") (term "1,1,0,0"))
   (rule "polySimp_elimOne" (formula "21") (term "1,1,0,0"))
   (rule "inEqSimp_notGeq" (formula "21") (term "0,0,0"))
   (rule "mul_literals" (formula "21") (term "1,0,0,0,0,0"))
   (rule "add_literals" (formula "21") (term "0,0,0,0,0"))
   (rule "add_zero_left" (formula "21") (term "0,0,0,0"))
   (rule "nnf_notAnd" (formula "20") (term "0,0"))
   (rule "inEqSimp_notLeq" (formula "20") (term "1,0,0"))
   (rule "polySimp_rightDist" (formula "20") (term "1,0,0,1,0,0"))
   (rule "mul_literals" (formula "20") (term "0,1,0,0,1,0,0"))
   (rule "polySimp_addAssoc" (formula "20") (term "0,0,1,0,0"))
   (rule "add_literals" (formula "20") (term "0,0,0,1,0,0"))
   (rule "add_zero_left" (formula "20") (term "0,0,1,0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "20") (term "1,0,0"))
   (rule "polySimp_mulLiterals" (formula "20") (term "1,1,0,0"))
   (rule "polySimp_elimOne" (formula "20") (term "1,1,0,0"))
   (rule "inEqSimp_notGeq" (formula "20") (term "0,0,0"))
   (rule "mul_literals" (formula "20") (term "1,0,0,0,0,0"))
   (rule "add_literals" (formula "20") (term "0,0,0,0,0"))
   (rule "add_zero_left" (formula "20") (term "0,0,0,0"))
   (rule "Definition_axiom_for_isSortedSlice_in_de_wiesler_Functions" (formula "29") (term "0,1,1,1") (inst "i=i"))
    (builtin "One Step Simplification" (formula "29"))
   (rule "translateJavaSubInt" (formula "29") (term "1,1,0,0,1,1,1"))
   (rule "translateJavaAddInt" (formula "29") (term "0,2,1,1,0,1,1,1"))
   (rule "polySimp_elimSub" (formula "29") (term "1,1,0,0,1,1,1"))
   (rule "mul_literals" (formula "29") (term "1,1,1,0,0,1,1,1"))
   (rule "polySimp_addComm0" (formula "29") (term "0,2,1,1,0,1,1,1"))
   (rule "polySimp_addComm1" (formula "29") (term "1,1,0,0,1,1,1"))
   (rule "polySimp_addComm0" (formula "29") (term "0,1,1,0,0,1,1,1"))
   (rule "inEqSimp_ltToLeq" (formula "29") (term "1,0,0,1,1,1"))
   (rule "polySimp_rightDist" (formula "29") (term "1,0,0,1,0,0,1,1,1"))
   (rule "polySimp_rightDist" (formula "29") (term "0,1,0,0,1,0,0,1,1,1"))
   (rule "mul_literals" (formula "29") (term "0,0,1,0,0,1,0,0,1,1,1"))
   (rule "polySimp_addAssoc" (formula "29") (term "0,0,1,0,0,1,1,1"))
   (rule "polySimp_addAssoc" (formula "29") (term "0,0,0,1,0,0,1,1,1"))
   (rule "add_literals" (formula "29") (term "0,0,0,0,1,0,0,1,1,1"))
   (rule "inEqSimp_commuteLeq" (formula "29") (term "0,0,0,1,1,1"))
   (rule "inEqSimp_commuteLeq" (formula "29") (term "1,0,1,1,1"))
   (rule "inEqSimp_sepPosMonomial0" (formula "29") (term "1,0,0,1,1,1"))
   (rule "polySimp_mulComm0" (formula "29") (term "1,1,0,0,1,1,1"))
   (rule "polySimp_rightDist" (formula "29") (term "1,1,0,0,1,1,1"))
   (rule "polySimp_mulLiterals" (formula "29") (term "1,1,1,0,0,1,1,1"))
   (rule "polySimp_elimOne" (formula "29") (term "1,1,1,0,0,1,1,1"))
   (rule "polySimp_rightDist" (formula "29") (term "0,1,1,0,0,1,1,1"))
   (rule "polySimp_mulLiterals" (formula "29") (term "1,0,1,1,0,0,1,1,1"))
   (rule "mul_literals" (formula "29") (term "0,0,1,1,0,0,1,1,1"))
   (rule "polySimp_elimOne" (formula "29") (term "1,0,1,1,0,0,1,1,1"))
   (rule "nnf_imp2or" (formula "29") (term "0,1,1,1"))
   (rule "nnf_notAnd" (formula "29") (term "0,0,1,1,1"))
   (rule "inEqSimp_notLeq" (formula "29") (term "1,0,0,1,1,1"))
   (rule "polySimp_rightDist" (formula "29") (term "1,0,0,1,0,0,1,1,1"))
   (rule "polySimp_rightDist" (formula "29") (term "0,1,0,0,1,0,0,1,1,1"))
   (rule "mul_literals" (formula "29") (term "0,0,1,0,0,1,0,0,1,1,1"))
   (rule "polySimp_addAssoc" (formula "29") (term "0,0,1,0,0,1,1,1"))
   (rule "polySimp_addAssoc" (formula "29") (term "0,0,0,1,0,0,1,1,1"))
   (rule "add_literals" (formula "29") (term "0,0,0,0,1,0,0,1,1,1"))
   (rule "inEqSimp_sepPosMonomial1" (formula "29") (term "1,0,0,1,1,1"))
   (rule "polySimp_mulComm0" (formula "29") (term "1,1,0,0,1,1,1"))
   (rule "polySimp_rightDist" (formula "29") (term "1,1,0,0,1,1,1"))
   (rule "polySimp_mulLiterals" (formula "29") (term "1,1,1,0,0,1,1,1"))
   (rule "polySimp_elimOne" (formula "29") (term "1,1,1,0,0,1,1,1"))
   (rule "polySimp_rightDist" (formula "29") (term "0,1,1,0,0,1,1,1"))
   (rule "polySimp_mulLiterals" (formula "29") (term "1,0,1,1,0,0,1,1,1"))
   (rule "mul_literals" (formula "29") (term "0,0,1,1,0,0,1,1,1"))
   (rule "polySimp_elimOne" (formula "29") (term "1,0,1,1,0,0,1,1,1"))
   (rule "inEqSimp_notGeq" (formula "29") (term "0,0,0,1,1,1"))
   (rule "polySimp_rightDist" (formula "29") (term "1,0,0,0,0,0,1,1,1"))
   (rule "polySimp_mulComm0" (formula "29") (term "0,1,0,0,0,0,0,1,1,1"))
   (rule "polySimp_addAssoc" (formula "29") (term "0,0,0,0,0,1,1,1"))
   (rule "inEqSimp_sepPosMonomial0" (formula "29") (term "0,0,0,1,1,1"))
   (rule "polySimp_mulComm0" (formula "29") (term "1,0,0,0,1,1,1"))
   (rule "polySimp_rightDist" (formula "29") (term "1,0,0,0,1,1,1"))
   (rule "polySimp_mulLiterals" (formula "29") (term "1,1,0,0,0,1,1,1"))
   (rule "polySimp_elimOne" (formula "29") (term "1,1,0,0,0,1,1,1"))
   (rule "polySimp_rightDist" (formula "29") (term "0,1,0,0,0,1,1,1"))
   (rule "mul_literals" (formula "29") (term "0,0,1,0,0,0,1,1,1"))
   (rule "polySimp_mulLiterals" (formula "29") (term "1,0,1,0,0,0,1,1,1"))
   (rule "polySimp_elimOne" (formula "29") (term "1,0,1,0,0,0,1,1,1"))
   (rule "Definition_axiom_for_isSortedSlice_in_de_wiesler_Functions" (formula "22") (term "1,1") (inst "i=i"))
    (builtin "One Step Simplification" (formula "22"))
   (rule "translateJavaAddInt" (formula "22") (term "0,2,1,1,0,1,1"))
   (rule "translateJavaSubInt" (formula "22") (term "1,1,0,0,1,1"))
   (rule "polySimp_elimSub" (formula "22") (term "1,1,0,0,1,1"))
   (rule "mul_literals" (formula "22") (term "1,1,1,0,0,1,1"))
   (rule "polySimp_addComm0" (formula "22") (term "0,2,1,1,0,1,1"))
   (rule "polySimp_addComm1" (formula "22") (term "1,1,0,0,1,1"))
   (rule "polySimp_addComm0" (formula "22") (term "0,1,1,0,0,1,1"))
   (rule "inEqSimp_ltToLeq" (formula "22") (term "1,0,0,1,1"))
   (rule "polySimp_rightDist" (formula "22") (term "1,0,0,1,0,0,1,1"))
   (rule "polySimp_rightDist" (formula "22") (term "0,1,0,0,1,0,0,1,1"))
   (rule "mul_literals" (formula "22") (term "0,0,1,0,0,1,0,0,1,1"))
   (rule "polySimp_addAssoc" (formula "22") (term "0,0,1,0,0,1,1"))
   (rule "polySimp_addAssoc" (formula "22") (term "0,0,0,1,0,0,1,1"))
   (rule "add_literals" (formula "22") (term "0,0,0,0,1,0,0,1,1"))
   (rule "inEqSimp_commuteLeq" (formula "22") (term "0,0,0,1,1"))
   (rule "inEqSimp_commuteLeq" (formula "22") (term "1,0,1,1"))
   (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "1,0,0,1,1"))
   (rule "polySimp_mulComm0" (formula "22") (term "1,1,0,0,1,1"))
   (rule "polySimp_rightDist" (formula "22") (term "1,1,0,0,1,1"))
   (rule "polySimp_mulLiterals" (formula "22") (term "1,1,1,0,0,1,1"))
   (rule "polySimp_elimOne" (formula "22") (term "1,1,1,0,0,1,1"))
   (rule "polySimp_rightDist" (formula "22") (term "0,1,1,0,0,1,1"))
   (rule "polySimp_mulLiterals" (formula "22") (term "1,0,1,1,0,0,1,1"))
   (rule "mul_literals" (formula "22") (term "0,0,1,1,0,0,1,1"))
   (rule "polySimp_elimOne" (formula "22") (term "1,0,1,1,0,0,1,1"))
   (rule "nnf_imp2or" (formula "22") (term "0,1,1"))
   (rule "nnf_notAnd" (formula "22") (term "0,0,1,1"))
   (rule "inEqSimp_notLeq" (formula "22") (term "1,0,0,1,1"))
   (rule "polySimp_rightDist" (formula "22") (term "1,0,0,1,0,0,1,1"))
   (rule "polySimp_rightDist" (formula "22") (term "0,1,0,0,1,0,0,1,1"))
   (rule "mul_literals" (formula "22") (term "0,0,1,0,0,1,0,0,1,1"))
   (rule "polySimp_addAssoc" (formula "22") (term "0,0,1,0,0,1,1"))
   (rule "polySimp_addAssoc" (formula "22") (term "0,0,0,1,0,0,1,1"))
   (rule "add_literals" (formula "22") (term "0,0,0,0,1,0,0,1,1"))
   (rule "inEqSimp_sepPosMonomial1" (formula "22") (term "1,0,0,1,1"))
   (rule "polySimp_mulComm0" (formula "22") (term "1,1,0,0,1,1"))
   (rule "polySimp_rightDist" (formula "22") (term "1,1,0,0,1,1"))
   (rule "polySimp_mulLiterals" (formula "22") (term "1,1,1,0,0,1,1"))
   (rule "polySimp_elimOne" (formula "22") (term "1,1,1,0,0,1,1"))
   (rule "polySimp_rightDist" (formula "22") (term "0,1,1,0,0,1,1"))
   (rule "polySimp_mulLiterals" (formula "22") (term "1,0,1,1,0,0,1,1"))
   (rule "mul_literals" (formula "22") (term "0,0,1,1,0,0,1,1"))
   (rule "polySimp_elimOne" (formula "22") (term "1,0,1,1,0,0,1,1"))
   (rule "inEqSimp_notGeq" (formula "22") (term "0,0,0,1,1"))
   (rule "polySimp_rightDist" (formula "22") (term "1,0,0,0,0,0,1,1"))
   (rule "polySimp_mulComm0" (formula "22") (term "0,1,0,0,0,0,0,1,1"))
   (rule "polySimp_addAssoc" (formula "22") (term "0,0,0,0,0,1,1"))
   (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "0,0,0,1,1"))
   (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,0,1,1"))
   (rule "polySimp_rightDist" (formula "22") (term "1,0,0,0,1,1"))
   (rule "polySimp_mulLiterals" (formula "22") (term "1,1,0,0,0,1,1"))
   (rule "polySimp_elimOne" (formula "22") (term "1,1,0,0,0,1,1"))
   (rule "polySimp_rightDist" (formula "22") (term "0,1,0,0,0,1,1"))
   (rule "mul_literals" (formula "22") (term "0,0,1,0,0,0,1,1"))
   (rule "polySimp_mulLiterals" (formula "22") (term "1,0,1,0,0,0,1,1"))
   (rule "polySimp_elimOne" (formula "22") (term "1,0,1,0,0,0,1,1"))
   (rule "Definition_axiom_for_isSortedSliceTransitive_in_de_wiesler_Functions" (formula "19") (term "0") (inst "i=i") (inst "j=j"))
    (builtin "One Step Simplification" (formula "19"))
   (rule "inEqSimp_ltToLeq" (formula "19") (term "1,0,0"))
   (rule "polySimp_rightDist" (formula "19") (term "1,0,0,1,0,0"))
   (rule "mul_literals" (formula "19") (term "0,1,0,0,1,0,0"))
   (rule "polySimp_addAssoc" (formula "19") (term "0,0,1,0,0"))
   (rule "add_literals" (formula "19") (term "0,0,0,1,0,0"))
   (rule "inEqSimp_ltToLeq" (formula "19") (term "1,0,0,1,0"))
   (rule "polySimp_rightDist" (formula "19") (term "1,0,0,1,0,0,1,0"))
   (rule "mul_literals" (formula "19") (term "0,1,0,0,1,0,0,1,0"))
   (rule "polySimp_addAssoc" (formula "19") (term "0,0,1,0,0,1,0"))
   (rule "add_literals" (formula "19") (term "0,0,0,1,0,0,1,0"))
   (rule "inEqSimp_commuteLeq" (formula "19") (term "0,0,0,1,0"))
   (rule "inEqSimp_commuteLeq" (formula "19") (term "0,0,0"))
   (rule "inEqSimp_commuteLeq" (formula "19") (term "1,0,1,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "19") (term "1,1,0,0"))
   (rule "polySimp_rightDist" (formula "19") (term "1,1,0,0"))
   (rule "mul_literals" (formula "19") (term "0,1,1,0,0"))
   (rule "polySimp_mulLiterals" (formula "19") (term "1,1,1,0,0"))
   (rule "polySimp_elimOne" (formula "19") (term "1,1,1,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "1,0,0,1,0"))
   (rule "polySimp_mulComm0" (formula "19") (term "1,1,0,0,1,0"))
   (rule "polySimp_rightDist" (formula "19") (term "1,1,0,0,1,0"))
   (rule "mul_literals" (formula "19") (term "0,1,1,0,0,1,0"))
   (rule "polySimp_mulLiterals" (formula "19") (term "1,1,1,0,0,1,0"))
   (rule "polySimp_elimOne" (formula "19") (term "1,1,1,0,0,1,0"))
   (rule "nnf_imp2or" (formula "19") (term "0"))
   (rule "nnf_notAnd" (formula "19") (term "0,0"))
   (rule "inEqSimp_notLeq" (formula "19") (term "1,0,0"))
   (rule "polySimp_rightDist" (formula "19") (term "1,0,0,1,0,0"))
   (rule "mul_literals" (formula "19") (term "0,1,0,0,1,0,0"))
   (rule "polySimp_addAssoc" (formula "19") (term "0,0,1,0,0"))
   (rule "add_literals" (formula "19") (term "0,0,0,1,0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "19") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "19") (term "1,1,0,0"))
   (rule "polySimp_rightDist" (formula "19") (term "1,1,0,0"))
   (rule "polySimp_mulLiterals" (formula "19") (term "1,1,1,0,0"))
   (rule "mul_literals" (formula "19") (term "0,1,1,0,0"))
   (rule "polySimp_elimOne" (formula "19") (term "1,1,1,0,0"))
   (rule "inEqSimp_notGeq" (formula "19") (term "0,0,0"))
   (rule "times_zero_1" (formula "19") (term "1,0,0,0,0,0"))
   (rule "add_literals" (formula "19") (term "0,0,0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "0,0,0"))
   (rule "mul_literals" (formula "19") (term "1,0,0,0"))
   (rule "nnf_imp2or" (formula "19") (term "0,1,0"))
   (rule "Definition_axiom_for_isSortedSliceTransitive_in_de_wiesler_Functions" (formula "10") (term "0") (inst "i=i") (inst "j=j"))
    (builtin "One Step Simplification" (formula "10"))
   (rule "inEqSimp_ltToLeq" (formula "10") (term "1,0,0,1,0"))
   (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,1,0,0,1,0"))
   (rule "inEqSimp_ltToLeq" (formula "10") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,1,0,0"))
   (rule "inEqSimp_commuteLeq" (formula "10") (term "1,0,1,0"))
   (rule "inEqSimp_commuteLeq" (formula "10") (term "0,0,0,1,0"))
   (rule "inEqSimp_commuteLeq" (formula "10") (term "0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "1,0,0,1,0"))
   (rule "polySimp_mulComm0" (formula "10") (term "1,1,0,0,1,0"))
   (rule "polySimp_rightDist" (formula "10") (term "1,1,0,0,1,0"))
   (rule "polySimp_mulLiterals" (formula "10") (term "1,1,1,0,0,1,0"))
   (rule "mul_literals" (formula "10") (term "0,1,1,0,0,1,0"))
   (rule "polySimp_elimOne" (formula "10") (term "1,1,1,0,0,1,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "10") (term "1,1,0,0"))
   (rule "polySimp_rightDist" (formula "10") (term "1,1,0,0"))
   (rule "polySimp_mulLiterals" (formula "10") (term "1,1,1,0,0"))
   (rule "mul_literals" (formula "10") (term "0,1,1,0,0"))
   (rule "polySimp_elimOne" (formula "10") (term "1,1,1,0,0"))
   (rule "nnf_imp2or" (formula "10") (term "0"))
   (rule "nnf_notAnd" (formula "19") (term "0,0,1,0"))
   (rule "inEqSimp_notLeq" (formula "19") (term "1,0,0,1,0"))
   (rule "polySimp_rightDist" (formula "19") (term "1,0,0,1,0,0,1,0"))
   (rule "mul_literals" (formula "19") (term "0,1,0,0,1,0,0,1,0"))
   (rule "polySimp_addAssoc" (formula "19") (term "0,0,1,0,0,1,0"))
   (rule "add_literals" (formula "19") (term "0,0,0,1,0,0,1,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "19") (term "1,0,0,1,0"))
   (rule "polySimp_mulComm0" (formula "19") (term "1,1,0,0,1,0"))
   (rule "polySimp_rightDist" (formula "19") (term "1,1,0,0,1,0"))
   (rule "polySimp_mulLiterals" (formula "19") (term "1,1,1,0,0,1,0"))
   (rule "mul_literals" (formula "19") (term "0,1,1,0,0,1,0"))
   (rule "polySimp_elimOne" (formula "19") (term "1,1,1,0,0,1,0"))
   (rule "inEqSimp_notGeq" (formula "19") (term "0,0,0,1,0"))
   (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,0,0,0,1,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "0,0,0,1,0"))
   (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,0,1,0"))
   (rule "polySimp_rightDist" (formula "19") (term "1,0,0,0,1,0"))
   (rule "polySimp_mulLiterals" (formula "19") (term "1,1,0,0,0,1,0"))
   (rule "mul_literals" (formula "19") (term "0,1,0,0,0,1,0"))
   (rule "polySimp_elimOne" (formula "19") (term "1,1,0,0,0,1,0"))
   (rule "nnf_notAnd" (formula "10") (term "0,0"))
   (rule "inEqSimp_notGeq" (formula "10") (term "0,0,0"))
   (rule "times_zero_1" (formula "10") (term "1,0,0,0,0,0"))
   (rule "add_literals" (formula "10") (term "0,0,0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "0,0,0"))
   (rule "mul_literals" (formula "10") (term "1,0,0,0"))
   (rule "inEqSimp_notLeq" (formula "10") (term "1,0,0"))
   (rule "polySimp_rightDist" (formula "10") (term "1,0,0,1,0,0"))
   (rule "mul_literals" (formula "10") (term "0,1,0,0,1,0,0"))
   (rule "polySimp_addAssoc" (formula "10") (term "0,0,1,0,0"))
   (rule "add_literals" (formula "10") (term "0,0,0,1,0,0"))
   (rule "add_zero_left" (formula "10") (term "0,0,1,0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "10") (term "1,0,0"))
   (rule "polySimp_mulLiterals" (formula "10") (term "1,1,0,0"))
   (rule "polySimp_elimOne" (formula "10") (term "1,1,0,0"))
   (rule "nnf_imp2or" (formula "10") (term "0,1,0"))
   (rule "Definition_axiom_for_pi_in_de_wiesler_Tree" (formula "21") (term "1,0,2,0,1,0"))
   (rule "translateJavaSubInt" (formula "21") (term "0,1,1,1,0,2,0,1,0"))
   (rule "polySimp_elimSub" (formula "21") (term "1,0,0,1,0,2,0,1,0"))
   (rule "polySimp_elimSub" (formula "21") (term "1,1,1,0,2,0,1,0"))
   (rule "polySimp_elimSub" (formula "21") (term "0,1,1,1,0,2,0,1,0"))
   (rule "mul_literals" (formula "21") (term "1,0,1,1,1,0,2,0,1,0"))
   (rule "polySimp_mulComm0" (formula "21") (term "1,0,2,0,1,0"))
   (rule "polySimp_addComm0" (formula "21") (term "0,1,0,1,0,2,0,1,0"))
   (rule "polySimp_rightDist" (formula "21") (term "0,1,1,0,2,0,1,0"))
   (rule "polySimp_mulLiterals" (formula "21") (term "1,0,1,1,0,2,0,1,0"))
   (rule "polySimp_mulComm0" (formula "21") (term "0,0,1,1,0,2,0,1,0"))
   (rule "polySimp_addComm1" (formula "21") (term "1,1,0,2,0,1,0"))
   (rule "polySimp_addComm0" (formula "21") (term "0,1,1,0,2,0,1,0"))
   (rule "polySimp_rightDist" (formula "21") (term "1,0,2,0,1,0"))
   (rule "polySimp_mulComm1" (formula "21") (term "1,1,0,2,0,1,0"))
   (rule "polySimp_mulComm0" (formula "21") (term "0,1,1,0,2,0,1,0"))
   (rule "polySimp_rightDist" (formula "21") (term "0,1,0,2,0,1,0"))
   (rule "polySimp_elimOne" (formula "21") (term "0,0,1,0,2,0,1,0"))
   (rule "polySimp_mulComm1" (formula "21") (term "1,0,1,0,2,0,1,0"))
   (rule "polySimp_mulComm0" (formula "21") (term "0,1,0,1,0,2,0,1,0"))
   (rule "polySimp_addAssoc" (formula "21") (term "0,2,0,1,0"))
   (rule "polySimp_addAssoc" (formula "21") (term "0,0,2,0,1,0"))
   (rule "Definition_axiom_for_pi_in_de_wiesler_Tree" (formula "20") (term "0,0,1,0"))
   (rule "translateJavaSubInt" (formula "20") (term "0,1,1,0,0,1,0"))
   (rule "polySimp_elimSub" (formula "20") (term "1,0,0,0,0,1,0"))
   (rule "polySimp_elimSub" (formula "20") (term "1,1,0,0,1,0"))
   (rule "polySimp_elimSub" (formula "20") (term "0,1,1,0,0,1,0"))
   (rule "mul_literals" (formula "20") (term "1,0,1,1,0,0,1,0"))
   (rule "polySimp_mulComm0" (formula "20") (term "0,0,1,0"))
   (rule "polySimp_addComm0" (formula "20") (term "0,1,0,0,0,1,0"))
   (rule "polySimp_rightDist" (formula "20") (term "0,1,0,0,1,0"))
   (rule "polySimp_mulLiterals" (formula "20") (term "1,0,1,0,0,1,0"))
   (rule "polySimp_mulComm0" (formula "20") (term "0,0,1,0,0,1,0"))
   (rule "polySimp_addComm1" (formula "20") (term "1,0,0,1,0"))
   (rule "polySimp_addComm0" (formula "20") (term "0,1,0,0,1,0"))
   (rule "polySimp_rightDist" (formula "20") (term "0,0,1,0"))
   (rule "polySimp_mulComm1" (formula "20") (term "1,0,0,1,0"))
   (rule "polySimp_mulComm0" (formula "20") (term "0,1,0,0,1,0"))
   (rule "polySimp_rightDist" (formula "20") (term "0,0,0,1,0"))
   (rule "polySimp_elimOne" (formula "20") (term "0,0,0,0,1,0"))
   (rule "polySimp_mulComm1" (formula "20") (term "1,0,0,0,1,0"))
   (rule "polySimp_mulComm0" (formula "20") (term "0,1,0,0,0,1,0"))
   (rule "inEqSimp_homoInEq1" (formula "20") (term "0,1,0"))
   (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,1,0"))
   (rule "polySimp_rightDist" (formula "20") (term "1,0,0,1,0"))
   (rule "polySimp_mulLiterals" (formula "20") (term "1,1,0,0,1,0"))
   (rule "polySimp_rightDist" (formula "20") (term "0,1,0,0,1,0"))
   (rule "polySimp_mulLiterals" (formula "20") (term "1,0,1,0,0,1,0"))
   (rule "polySimp_mulComm0" (formula "20") (term "0,0,1,0,0,1,0"))
   (rule "polySimp_addAssoc" (formula "20") (term "0,0,1,0"))
   (rule "polySimp_addAssoc" (formula "20") (term "0,0,0,1,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "0,1,0"))
   (rule "polySimp_mulComm0" (formula "20") (term "1,0,1,0"))
   (rule "polySimp_rightDist" (formula "20") (term "1,0,1,0"))
   (rule "polySimp_mulLiterals" (formula "20") (term "1,1,0,1,0"))
   (rule "polySimp_rightDist" (formula "20") (term "0,1,0,1,0"))
   (rule "polySimp_mulLiterals" (formula "20") (term "1,0,1,0,1,0"))
   (rule "mul_literals" (formula "20") (term "0,0,1,0,1,0"))
   (rule "polySimp_elimOne" (formula "20") (term "1,0,1,0,1,0"))
   (rule "Definition_axiom_for_pi_in_de_wiesler_Tree" (formula "20") (term "0,1,1,0"))
   (rule "translateJavaSubInt" (formula "20") (term "0,1,1,0,1,1,0"))
   (rule "polySimp_elimSub" (formula "20") (term "1,0,0,0,1,1,0"))
   (rule "polySimp_elimSub" (formula "20") (term "1,1,0,1,1,0"))
   (rule "polySimp_elimSub" (formula "20") (term "0,1,1,0,1,1,0"))
   (rule "mul_literals" (formula "20") (term "1,0,1,1,0,1,1,0"))
   (rule "polySimp_mulComm0" (formula "20") (term "0,1,1,0"))
   (rule "polySimp_addComm0" (formula "20") (term "0,1,0,0,1,1,0"))
   (rule "polySimp_rightDist" (formula "20") (term "0,1,0,1,1,0"))
   (rule "polySimp_mulLiterals" (formula "20") (term "1,0,1,0,1,1,0"))
   (rule "polySimp_mulComm0" (formula "20") (term "0,0,1,0,1,1,0"))
   (rule "polySimp_addComm1" (formula "20") (term "1,0,1,1,0"))
   (rule "polySimp_addComm0" (formula "20") (term "0,1,0,1,1,0"))
   (rule "polySimp_rightDist" (formula "20") (term "0,1,1,0"))
   (rule "polySimp_mulComm1" (formula "20") (term "1,0,1,1,0"))
   (rule "polySimp_mulComm0" (formula "20") (term "0,1,0,1,1,0"))
   (rule "polySimp_rightDist" (formula "20") (term "0,0,1,1,0"))
   (rule "polySimp_elimOne" (formula "20") (term "0,0,0,1,1,0"))
   (rule "polySimp_mulComm1" (formula "20") (term "1,0,0,1,1,0"))
   (rule "polySimp_mulComm0" (formula "20") (term "0,1,0,0,1,1,0"))
   (rule "inEqSimp_homoInEq0" (formula "20") (term "1,1,0"))
   (rule "polySimp_mulComm0" (formula "20") (term "1,0,1,1,0"))
   (rule "polySimp_rightDist" (formula "20") (term "1,0,1,1,0"))
   (rule "polySimp_mulLiterals" (formula "20") (term "1,1,0,1,1,0"))
   (rule "polySimp_rightDist" (formula "20") (term "0,1,0,1,1,0"))
   (rule "polySimp_mulLiterals" (formula "20") (term "1,0,1,0,1,1,0"))
   (rule "polySimp_mulComm0" (formula "20") (term "0,0,1,0,1,1,0"))
   (rule "polySimp_addAssoc" (formula "20") (term "0,1,1,0"))
   (rule "polySimp_addAssoc" (formula "20") (term "0,0,1,1,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "20") (term "1,1,0"))
   (rule "polySimp_mulComm0" (formula "20") (term "1,1,1,0"))
   (rule "polySimp_rightDist" (formula "20") (term "1,1,1,0"))
   (rule "polySimp_mulLiterals" (formula "20") (term "1,1,1,1,0"))
   (rule "polySimp_rightDist" (formula "20") (term "0,1,1,1,0"))
   (rule "polySimp_mulLiterals" (formula "20") (term "1,0,1,1,1,0"))
   (rule "polySimp_elimOne" (formula "20") (term "1,0,1,1,1,0"))
   (rule "polySimp_rightDist" (formula "20") (term "0,0,1,1,1,0"))
   (rule "mul_literals" (formula "20") (term "0,0,0,1,1,1,0"))
   (rule "Contract_axiom_for_isClassOfSlice_in_Classifier" (formula "29") (term "0,0,0"))
   (rule "replace_known_right" (formula "1") (term "0,1,0") (ifseqformula "29"))
    (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "28")) (ifInst ""  (formula "2")) (ifInst ""  (formula "5")))
   (rule "true_left" (formula "1"))
   (rule "Definition_axiom_for_isClassOfSlice_in_de_wiesler_Classifier" (formula "29") (term "0,0,0") (inst "i=i"))
    (builtin "One Step Simplification" (formula "29"))
   (rule "inEqSimp_ltToLeq" (formula "29") (term "1,0,0,0,0"))
   (rule "polySimp_rightDist" (formula "29") (term "1,0,0,1,0,0,0,0"))
   (rule "polySimp_mulComm0" (formula "29") (term "0,1,0,0,1,0,0,0,0"))
   (rule "polySimp_addAssoc" (formula "29") (term "0,0,1,0,0,0,0"))
   (rule "inEqSimp_commuteLeq" (formula "29") (term "0,0,0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "29") (term "1,0,0,0,0"))
   (rule "polySimp_mulComm0" (formula "29") (term "1,1,0,0,0,0"))
   (rule "polySimp_rightDist" (formula "29") (term "1,1,0,0,0,0"))
   (rule "polySimp_mulLiterals" (formula "29") (term "1,1,1,0,0,0,0"))
   (rule "polySimp_elimOne" (formula "29") (term "1,1,1,0,0,0,0"))
   (rule "polySimp_rightDist" (formula "29") (term "0,1,1,0,0,0,0"))
   (rule "polySimp_mulLiterals" (formula "29") (term "1,0,1,1,0,0,0,0"))
   (rule "mul_literals" (formula "29") (term "0,0,1,1,0,0,0,0"))
   (rule "polySimp_elimOne" (formula "29") (term "1,0,1,1,0,0,0,0"))
   (rule "nnf_notAnd" (formula "10") (term "0,0,1,0"))
   (rule "inEqSimp_notGeq" (formula "10") (term "0,0,0,1,0"))
   (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,0,0,0,1,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "0,0,0,1,0"))
   (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,0,1,0"))
   (rule "polySimp_rightDist" (formula "10") (term "1,0,0,0,1,0"))
   (rule "polySimp_mulLiterals" (formula "10") (term "1,1,0,0,0,1,0"))
   (rule "mul_literals" (formula "10") (term "0,1,0,0,0,1,0"))
   (rule "polySimp_elimOne" (formula "10") (term "1,1,0,0,0,1,0"))
   (rule "inEqSimp_notLeq" (formula "10") (term "1,0,0,1,0"))
   (rule "polySimp_rightDist" (formula "10") (term "1,0,0,1,0,0,1,0"))
   (rule "mul_literals" (formula "10") (term "0,1,0,0,1,0,0,1,0"))
   (rule "polySimp_addAssoc" (formula "10") (term "0,0,1,0,0,1,0"))
   (rule "add_literals" (formula "10") (term "0,0,0,1,0,0,1,0"))
   (rule "add_zero_left" (formula "10") (term "0,0,1,0,0,1,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "10") (term "1,0,0,1,0"))
   (rule "polySimp_mulLiterals" (formula "10") (term "1,1,0,0,1,0"))
   (rule "polySimp_elimOne" (formula "10") (term "1,1,0,0,1,0"))
   (rule "nnf_imp2or" (formula "29") (term "0,0,0"))
   (rule "nnf_notAnd" (formula "29") (term "0,0,0,0"))
   (rule "inEqSimp_notGeq" (formula "29") (term "0,0,0,0,0"))
   (rule "polySimp_rightDist" (formula "29") (term "1,0,0,0,0,0,0,0"))
   (rule "polySimp_mulComm0" (formula "29") (term "0,1,0,0,0,0,0,0,0"))
   (rule "polySimp_addAssoc" (formula "29") (term "0,0,0,0,0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "29") (term "0,0,0,0,0"))
   (rule "polySimp_mulComm0" (formula "29") (term "1,0,0,0,0,0"))
   (rule "polySimp_rightDist" (formula "29") (term "1,0,0,0,0,0"))
   (rule "polySimp_mulLiterals" (formula "29") (term "1,1,0,0,0,0,0"))
   (rule "polySimp_elimOne" (formula "29") (term "1,1,0,0,0,0,0"))
   (rule "polySimp_rightDist" (formula "29") (term "0,1,0,0,0,0,0"))
   (rule "mul_literals" (formula "29") (term "0,0,1,0,0,0,0,0"))
   (rule "polySimp_mulLiterals" (formula "29") (term "1,0,1,0,0,0,0,0"))
   (rule "polySimp_elimOne" (formula "29") (term "1,0,1,0,0,0,0,0"))
   (rule "inEqSimp_notLeq" (formula "29") (term "1,0,0,0,0"))
   (rule "polySimp_rightDist" (formula "29") (term "1,0,0,1,0,0,0,0"))
   (rule "polySimp_rightDist" (formula "29") (term "0,1,0,0,1,0,0,0,0"))
   (rule "mul_literals" (formula "29") (term "0,0,1,0,0,1,0,0,0,0"))
   (rule "polySimp_addAssoc" (formula "29") (term "0,0,1,0,0,0,0"))
   (rule "polySimp_addAssoc" (formula "29") (term "0,0,0,1,0,0,0,0"))
   (rule "add_literals" (formula "29") (term "0,0,0,0,1,0,0,0,0"))
   (rule "add_zero_left" (formula "29") (term "0,0,0,1,0,0,0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "29") (term "1,0,0,0,0"))
   (rule "polySimp_mulComm0" (formula "29") (term "1,1,0,0,0,0"))
   (rule "polySimp_rightDist" (formula "29") (term "1,1,0,0,0,0"))
   (rule "polySimp_mulLiterals" (formula "29") (term "1,1,1,0,0,0,0"))
   (rule "polySimp_elimOne" (formula "29") (term "1,1,1,0,0,0,0"))
   (rule "polySimp_mulAssoc" (formula "29") (term "0,1,1,0,0,0,0"))
   (rule "polySimp_mulComm0" (formula "29") (term "0,0,1,1,0,0,0,0"))
   (rule "polySimp_mulLiterals" (formula "29") (term "0,1,1,0,0,0,0"))
   (rule "polySimp_elimOne" (formula "29") (term "0,1,1,0,0,0,0"))
   (rule "ifthenelse_split" (formula "8") (term "0"))
   (branch "classifier.equal_buckets = TRUE TRUE"
      (rule "newSym_eq" (formula "9") (inst "l=l_0") (inst "newSymDef=mul(int::final(classifier,
               de.wiesler.Classifier::$num_buckets),
    Z(0(#)))"))
      (rule "times_zero_1" (formula "9") (term "1,1"))
      (rule "add_zero_right" (formula "9") (term "1"))
      (rule "applyEq" (formula "22") (term "1,1,0,0") (ifseqformula "9"))
      (rule "applyEq" (formula "12") (term "1,1,0,0") (ifseqformula "9"))
      (rule "applyEq" (formula "13") (term "1,0,2,0") (ifseqformula "9"))
      (rule "eqSymm" (formula "13"))
      (rule "applyEq" (formula "19") (term "1") (ifseqformula "9"))
      (rule "applyEq" (formula "12") (term "1,1,0,0,1,0") (ifseqformula "9"))
      (rule "applyEq" (formula "21") (term "1,1,1,0,0,1,0") (ifseqformula "9"))
      (rule "applyEq" (formula "21") (term "1,1,1,0,0") (ifseqformula "9"))
      (rule "applyEq" (formula "23") (term "1,1,0,0") (ifseqformula "9"))
      (rule "applyEq" (formula "20") (term "0") (ifseqformula "9"))
      (rule "inEqSimp_commuteLeq" (formula "20"))
      (rule "applyEq" (formula "10") (term "0,0") (ifseqformula "9"))
      (rule "eqSymm" (formula "10"))
      (rule "applyEq" (formula "18") (term "0") (ifseqformula "9"))
      (rule "applyEq" (formula "7") (term "0") (ifseqformula "10"))
      (rule "applyEq" (formula "6") (term "0") (ifseqformula "10"))
      (rule "applyEq" (formula "13") (term "1,0,2,0") (ifseqformula "9"))
      (rule "eqSymm" (formula "13"))
      (rule "applyEq" (formula "16") (term "1") (ifseqformula "9"))
      (rule "applyEq" (formula "22") (term "0,1,0,0,1,1,1,0") (ifseqformula "9"))
      (rule "inEqSimp_subsumption6" (formula "6") (ifseqformula "18"))
      (rule "greater_literals" (formula "6") (term "0,0"))
       (builtin "One Step Simplification" (formula "6"))
      (rule "mul_literals" (formula "6") (term "1,0"))
      (rule "leq_literals" (formula "6") (term "0"))
       (builtin "One Step Simplification" (formula "6"))
      (rule "true_left" (formula "6"))
      (rule "elimGcdLeq_antec" (formula "6") (inst "elimGcdRightDiv=Z(4(6(#)))") (inst "elimGcdLeftDiv=l_0") (inst "elimGcd=Z(2(#))"))
      (rule "polySimp_mulLiterals" (formula "6") (term "1,0,1,0"))
      (rule "leq_literals" (formula "6") (term "0,0"))
       (builtin "One Step Simplification" (formula "6"))
      (rule "neg_literal" (formula "6") (term "0,0,0,0,0,0"))
      (rule "polySimp_mulLiterals" (formula "6") (term "1,0,0,0,0,0"))
      (rule "mul_literals" (formula "6") (term "1,0,0,0,0,0"))
      (rule "polySimp_addLiterals" (formula "6") (term "0,0,0,0"))
      (rule "add_zero_right" (formula "6") (term "0,0,0,0"))
      (rule "polySimp_pullOutFactor0b" (formula "6") (term "0,0"))
      (rule "add_literals" (formula "6") (term "1,1,0,0"))
      (rule "times_zero_1" (formula "6") (term "1,0,0"))
      (rule "add_zero_right" (formula "6") (term "0,0"))
      (rule "qeq_literals" (formula "6") (term "0"))
       (builtin "One Step Simplification" (formula "6"))
      (rule "cut_direct" (formula "27") (term "0,0"))
      (branch "CUT: classifier.sorted_splitters.* cap allLocs setMinus classifier.sorted_splitters.* cup classifier.tree.tree.* cup arrayRange(values_0, begin + bucket_begin, -1 + begin + bucket_end) = {} TRUE"
          (builtin "One Step Simplification" (formula "28"))
         (rule "arrayLengthIsAShort" (formula "19") (term "0"))
          (builtin "One Step Simplification" (formula "19"))
         (rule "true_left" (formula "19"))
         (rule "arrayLengthNotNegative" (formula "19") (term "0"))
         (rule "arrayLengthNotNegative" (formula "17") (term "0"))
         (rule "inEqSimp_subsumption1" (formula "17") (ifseqformula "18"))
         (rule "leq_literals" (formula "17") (term "0"))
          (builtin "One Step Simplification" (formula "17"))
         (rule "true_left" (formula "17"))
         (rule "arrayLengthIsAShort" (formula "17") (term "0"))
          (builtin "One Step Simplification" (formula "17"))
         (rule "true_left" (formula "17"))
         (rule "Definition_axiom_for_isClassOfSlice_in_de_wiesler_Classifier" (formula "32") (term "0,0,1") (inst "i=i"))
          (builtin "One Step Simplification" (formula "32"))
         (rule "inEqSimp_ltToLeq" (formula "32") (term "1,0,0,0,1"))
         (rule "polySimp_rightDist" (formula "32") (term "1,0,0,1,0,0,0,1"))
         (rule "polySimp_mulComm0" (formula "32") (term "0,1,0,0,1,0,0,0,1"))
         (rule "polySimp_addAssoc" (formula "32") (term "0,0,1,0,0,0,1"))
         (rule "inEqSimp_commuteLeq" (formula "32") (term "0,0,0,0,1"))
         (rule "inEqSimp_sepPosMonomial0" (formula "32") (term "1,0,0,0,1"))
         (rule "polySimp_mulComm0" (formula "32") (term "1,1,0,0,0,1"))
         (rule "polySimp_rightDist" (formula "32") (term "1,1,0,0,0,1"))
         (rule "polySimp_mulLiterals" (formula "32") (term "1,1,1,0,0,0,1"))
         (rule "polySimp_elimOne" (formula "32") (term "1,1,1,0,0,0,1"))
         (rule "polySimp_rightDist" (formula "32") (term "0,1,1,0,0,0,1"))
         (rule "polySimp_mulLiterals" (formula "32") (term "1,0,1,1,0,0,0,1"))
         (rule "mul_literals" (formula "32") (term "0,0,1,1,0,0,0,1"))
         (rule "polySimp_elimOne" (formula "32") (term "1,0,1,1,0,0,0,1"))
         (rule "nnf_imp2or" (formula "32") (term "0,0,1"))
         (rule "nnf_notAnd" (formula "32") (term "0,0,0,1"))
         (rule "inEqSimp_notLeq" (formula "32") (term "1,0,0,0,1"))
         (rule "polySimp_rightDist" (formula "32") (term "1,0,0,1,0,0,0,1"))
         (rule "polySimp_rightDist" (formula "32") (term "0,1,0,0,1,0,0,0,1"))
         (rule "mul_literals" (formula "32") (term "0,0,1,0,0,1,0,0,0,1"))
         (rule "polySimp_addAssoc" (formula "32") (term "0,0,1,0,0,0,1"))
         (rule "polySimp_addAssoc" (formula "32") (term "0,0,0,1,0,0,0,1"))
         (rule "add_literals" (formula "32") (term "0,0,0,0,1,0,0,0,1"))
         (rule "add_zero_left" (formula "32") (term "0,0,0,1,0,0,0,1"))
         (rule "inEqSimp_sepPosMonomial1" (formula "32") (term "1,0,0,0,1"))
         (rule "polySimp_mulComm0" (formula "32") (term "1,1,0,0,0,1"))
         (rule "polySimp_rightDist" (formula "32") (term "1,1,0,0,0,1"))
         (rule "polySimp_mulLiterals" (formula "32") (term "1,1,1,0,0,0,1"))
         (rule "polySimp_elimOne" (formula "32") (term "1,1,1,0,0,0,1"))
         (rule "polySimp_mulAssoc" (formula "32") (term "0,1,1,0,0,0,1"))
         (rule "polySimp_mulComm0" (formula "32") (term "0,0,1,1,0,0,0,1"))
         (rule "polySimp_mulLiterals" (formula "32") (term "0,1,1,0,0,0,1"))
         (rule "polySimp_elimOne" (formula "32") (term "0,1,1,0,0,0,1"))
         (rule "inEqSimp_notGeq" (formula "32") (term "0,0,0,0,1"))
         (rule "polySimp_rightDist" (formula "32") (term "1,0,0,0,0,0,0,1"))
         (rule "polySimp_mulComm0" (formula "32") (term "0,1,0,0,0,0,0,0,1"))
         (rule "polySimp_addAssoc" (formula "32") (term "0,0,0,0,0,0,1"))
         (rule "inEqSimp_sepPosMonomial0" (formula "32") (term "0,0,0,0,1"))
         (rule "polySimp_mulComm0" (formula "32") (term "1,0,0,0,0,1"))
         (rule "polySimp_rightDist" (formula "32") (term "1,0,0,0,0,1"))
         (rule "polySimp_mulLiterals" (formula "32") (term "1,1,0,0,0,0,1"))
         (rule "polySimp_elimOne" (formula "32") (term "1,1,0,0,0,0,1"))
         (rule "polySimp_rightDist" (formula "32") (term "0,1,0,0,0,0,1"))
         (rule "mul_literals" (formula "32") (term "0,0,1,0,0,0,0,1"))
         (rule "polySimp_mulLiterals" (formula "32") (term "1,0,1,0,0,0,0,1"))
         (rule "polySimp_elimOne" (formula "32") (term "1,0,1,0,0,0,0,1"))
         (rule "cut_direct" (formula "25") (term "0"))
         (branch "CUT: arrayRange(values_0, begin + bucket_begin, -1 + begin + bucket_end) cap allLocs setMinus classifier.sorted_splitters.* cup classifier.tree.tree.* cup arrayRange(values_0, begin + bucket_begin, -1 + begin + bucket_end) = {} TRUE"
             (builtin "One Step Simplification" (formula "26"))
            (rule "replace_known_left" (formula "30") (term "1") (ifseqformula "25"))
             (builtin "One Step Simplification" (formula "30"))
            (rule "Definition_axiom_for_classOf_in_de_wiesler_Classifier" (formula "33") (term "0,1,0,0,0"))
            (rule "Definition_axiom_for_classOf_in_de_wiesler_Classifier" (formula "33") (term "0,1,0,0,1"))
            (rule "commute_or" (formula "12") (term "0,0,1,0"))
            (rule "commute_or" (formula "22") (term "0,0,1,0"))
            (rule "cnf_rightDist" (formula "23") (term "0"))
            (rule "distr_forallAnd" (formula "23"))
            (rule "andLeft" (formula "23"))
            (rule "commute_or" (formula "24") (term "0"))
            (rule "equiv_left" (formula "27"))
            (branch "Case 1"
               (rule "replace_known_left" (formula "35") (term "1,1,1") (ifseqformula "28"))
                (builtin "One Step Simplification" (formula "35") (ifInst ""  (formula "27")))
               (rule "equiv_right" (formula "35"))
               (branch "Case '->'"
                  (rule "allRight" (formula "36") (inst "sk=i_0"))
                  (rule "orRight" (formula "36"))
                  (rule "orRight" (formula "36"))
                  (rule "inEqSimp_leqRight" (formula "36"))
                  (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                  (rule "polySimp_rightDist" (formula "1") (term "0,1,0,0"))
                  (rule "mul_literals" (formula "1") (term "0,0,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                  (rule "polySimp_addAssoc" (formula "1") (term "0,0,0"))
                  (rule "add_literals" (formula "1") (term "0,0,0,0"))
                  (rule "add_zero_left" (formula "1") (term "0,0,0"))
                  (rule "inEqSimp_geqRight" (formula "37"))
                  (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "1") (term "0,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                  (rule "polySimp_mulComm0" (formula "2") (term "1"))
                  (rule "polySimp_rightDist" (formula "2") (term "1"))
                  (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
                  (rule "polySimp_elimOne" (formula "2") (term "1,1"))
                  (rule "polySimp_mulAssoc" (formula "2") (term "0,1"))
                  (rule "polySimp_mulComm0" (formula "2") (term "0,0,1"))
                  (rule "polySimp_mulLiterals" (formula "2") (term "0,1"))
                  (rule "polySimp_elimOne" (formula "2") (term "0,1"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                  (rule "polySimp_mulComm0" (formula "1") (term "1"))
                  (rule "polySimp_rightDist" (formula "1") (term "1"))
                  (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                  (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                  (rule "polySimp_rightDist" (formula "1") (term "0,1"))
                  (rule "polySimp_mulLiterals" (formula "1") (term "1,0,1"))
                  (rule "mul_literals" (formula "1") (term "0,0,1"))
                  (rule "polySimp_elimOne" (formula "1") (term "1,0,1"))
                  (rule "pullOutSelect" (formula "38") (term "2,0") (inst "selectSK=arr_0"))
                  (rule "simplifySelectOfAnon" (formula "1"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "37")) (ifInst ""  (formula "8")))
                  (rule "elementOfSetMinus" (formula "1") (term "0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "ifthenelse_negated" (formula "1") (term "0"))
                  (rule "elementOfUnion" (formula "1") (term "0,0"))
                  (rule "elementOfArrayRangeConcrete" (formula "1") (term "1,0,0"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "2")))
                  (rule "inEqSimp_commuteLeq" (formula "1") (term "1,0,0"))
                  (rule "replace_known_left" (formula "1") (term "1,0,0") (ifseqformula "3"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "applyEqReverse" (formula "39") (term "2,0") (ifseqformula "1"))
                  (rule "hideAuxiliaryEq" (formula "1"))
                  (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "1"))
                  (rule "polySimp_rightDist" (formula "2") (term "0,0"))
                  (rule "polySimp_mulComm0" (formula "2") (term "0,0,0"))
                  (rule "polySimp_addAssoc" (formula "2") (term "0"))
                  (rule "polySimp_addComm1" (formula "2") (term "0,0"))
                  (rule "polySimp_addAssoc" (formula "2") (term "0,0,0"))
                  (rule "polySimp_addComm0" (formula "2") (term "0,0,0,0"))
                  (rule "polySimp_pullOutFactor2b" (formula "2") (term "0,0,0"))
                  (rule "add_literals" (formula "2") (term "1,1,0,0,0"))
                  (rule "times_zero_1" (formula "2") (term "1,0,0,0"))
                  (rule "add_literals" (formula "2") (term "0,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                  (rule "polySimp_mulComm0" (formula "2") (term "1"))
                  (rule "polySimp_rightDist" (formula "2") (term "1"))
                  (rule "mul_literals" (formula "2") (term "0,1"))
                  (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
                  (rule "polySimp_elimOne" (formula "2") (term "1,1"))
                  (rule "equalityToElementOfRight" (formula "36") (inst "ov=ov") (inst "fv=fv"))
                   (builtin "One Step Simplification" (formula "36"))
                  (rule "allRight" (formula "36") (inst "sk=ov_0"))
                  (rule "allRight" (formula "36") (inst "sk=fv_0"))
                  (rule "notRight" (formula "36"))
                  (rule "elementOfIntersect" (formula "1"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "andLeft" (formula "1"))
                  (rule "applyEq" (formula "2") (term "0") (ifseqformula "1"))
                  (rule "elementOfSetMinus" (formula "2"))
                   (builtin "One Step Simplification" (formula "2"))
                  (rule "notLeft" (formula "2"))
                  (rule "elementOfUnion" (formula "34"))
                  (rule "orRight" (formula "34"))
                  (rule "elementOfUnion" (formula "34"))
                   (builtin "One Step Simplification" (formula "34"))
                  (rule "closeTrue" (formula "34"))
               )
               (branch "Case '<-'"
                  (rule "allRight" (formula "36") (inst "sk=i_0"))
                  (rule "orRight" (formula "36"))
                  (rule "orRight" (formula "36"))
                  (rule "inEqSimp_geqRight" (formula "37"))
                  (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "1") (term "0,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                  (rule "inEqSimp_leqRight" (formula "37"))
                  (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                  (rule "polySimp_rightDist" (formula "1") (term "0,1,0,0"))
                  (rule "mul_literals" (formula "1") (term "0,0,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                  (rule "polySimp_addAssoc" (formula "1") (term "0,0,0"))
                  (rule "add_literals" (formula "1") (term "0,0,0,0"))
                  (rule "add_zero_left" (formula "1") (term "0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "2"))
                  (rule "polySimp_mulComm0" (formula "2") (term "1"))
                  (rule "polySimp_rightDist" (formula "2") (term "1"))
                  (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
                  (rule "polySimp_elimOne" (formula "2") (term "1,1"))
                  (rule "polySimp_rightDist" (formula "2") (term "0,1"))
                  (rule "polySimp_mulLiterals" (formula "2") (term "1,0,1"))
                  (rule "mul_literals" (formula "2") (term "0,0,1"))
                  (rule "polySimp_elimOne" (formula "2") (term "1,0,1"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                  (rule "polySimp_mulComm0" (formula "1") (term "1"))
                  (rule "polySimp_rightDist" (formula "1") (term "1"))
                  (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                  (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                  (rule "polySimp_mulAssoc" (formula "1") (term "0,1"))
                  (rule "polySimp_mulComm0" (formula "1") (term "0,0,1"))
                  (rule "polySimp_mulLiterals" (formula "1") (term "0,1"))
                  (rule "polySimp_elimOne" (formula "1") (term "0,1"))
                  (rule "inEqSimp_exactShadow3" (formula "1") (ifseqformula "2"))
                  (rule "polySimp_rightDist" (formula "1") (term "0,0"))
                  (rule "polySimp_mulComm0" (formula "1") (term "0,0,0"))
                  (rule "polySimp_addAssoc" (formula "1") (term "0"))
                  (rule "polySimp_addComm1" (formula "1") (term "0,0"))
                  (rule "polySimp_addAssoc" (formula "1") (term "0,0,0"))
                  (rule "polySimp_addComm0" (formula "1") (term "0,0,0,0"))
                  (rule "polySimp_pullOutFactor2b" (formula "1") (term "0,0,0"))
                  (rule "add_literals" (formula "1") (term "1,1,0,0,0"))
                  (rule "times_zero_1" (formula "1") (term "1,0,0,0"))
                  (rule "add_literals" (formula "1") (term "0,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                  (rule "polySimp_mulComm0" (formula "1") (term "1"))
                  (rule "polySimp_rightDist" (formula "1") (term "1"))
                  (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                  (rule "mul_literals" (formula "1") (term "0,1"))
                  (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                  (rule "equalityToElementOfRight" (formula "36") (inst "ov=ov") (inst "fv=fv"))
                   (builtin "One Step Simplification" (formula "36"))
                  (rule "allRight" (formula "36") (inst "sk=ov_0"))
                  (rule "allRight" (formula "36") (inst "sk=fv_0"))
                  (rule "notRight" (formula "36"))
                  (rule "elementOfIntersect" (formula "1"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "andLeft" (formula "1"))
                  (rule "applyEq" (formula "2") (term "0") (ifseqformula "1"))
                  (rule "elementOfSetMinus" (formula "2"))
                   (builtin "One Step Simplification" (formula "2"))
                  (rule "notLeft" (formula "2"))
                  (rule "elementOfUnion" (formula "34"))
                  (rule "orRight" (formula "34"))
                  (rule "elementOfUnion" (formula "34"))
                   (builtin "One Step Simplification" (formula "34"))
                  (rule "closeTrue" (formula "34"))
               )
            )
            (branch "Case 2"
               (rule "allRight" (formula "28") (inst "sk=i_0"))
               (rule "orRight" (formula "28"))
               (rule "orRight" (formula "28"))
               (rule "allRight" (formula "27") (inst "sk=i_1"))
               (rule "orRight" (formula "27"))
               (rule "orRight" (formula "27"))
               (rule "inEqSimp_geqRight" (formula "32"))
               (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
               (rule "inEqSimp_leqRight" (formula "31"))
               (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
               (rule "polySimp_rightDist" (formula "1") (term "0,1,0,0"))
               (rule "mul_literals" (formula "1") (term "0,0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
               (rule "polySimp_addAssoc" (formula "1") (term "0,0,0"))
               (rule "add_literals" (formula "1") (term "0,0,0,0"))
               (rule "add_zero_left" (formula "1") (term "0,0,0"))
               (rule "inEqSimp_geqRight" (formula "32"))
               (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
               (rule "polySimp_rightDist" (formula "1") (term "0,1,0,0"))
               (rule "mul_literals" (formula "1") (term "0,0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
               (rule "polySimp_addAssoc" (formula "1") (term "0,0,0"))
               (rule "add_literals" (formula "1") (term "0,0,0,0"))
               (rule "inEqSimp_geqRight" (formula "32"))
               (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
               (rule "inEqSimp_geqRight" (formula "32"))
               (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
               (rule "polySimp_rightDist" (formula "1") (term "0,1,0,0"))
               (rule "mul_literals" (formula "1") (term "0,0,1,0,0"))
               (rule "inEqSimp_leqRight" (formula "32"))
               (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
               (rule "polySimp_rightDist" (formula "1") (term "0,1,0,0"))
               (rule "mul_literals" (formula "1") (term "0,0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "2") (term "0,0"))
               (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
               (rule "polySimp_addAssoc" (formula "2") (term "0,0,0"))
               (rule "add_literals" (formula "2") (term "0,0,0,0"))
               (rule "polySimp_addAssoc" (formula "1") (term "0,0,0"))
               (rule "add_literals" (formula "1") (term "0,0,0,0"))
               (rule "add_zero_left" (formula "1") (term "0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "6"))
               (rule "polySimp_mulComm0" (formula "6") (term "1"))
               (rule "polySimp_rightDist" (formula "6") (term "1"))
               (rule "polySimp_mulLiterals" (formula "6") (term "1,1"))
               (rule "mul_literals" (formula "6") (term "0,1"))
               (rule "polySimp_elimOne" (formula "6") (term "1,1"))
               (rule "inEqSimp_sepPosMonomial1" (formula "5"))
               (rule "polySimp_mulComm0" (formula "5") (term "1"))
               (rule "polySimp_rightDist" (formula "5") (term "1"))
               (rule "polySimp_mulLiterals" (formula "5") (term "1,1"))
               (rule "polySimp_elimOne" (formula "5") (term "1,1"))
               (rule "polySimp_mulAssoc" (formula "5") (term "0,1"))
               (rule "polySimp_mulComm0" (formula "5") (term "0,0,1"))
               (rule "polySimp_mulLiterals" (formula "5") (term "0,1"))
               (rule "polySimp_elimOne" (formula "5") (term "0,1"))
               (rule "inEqSimp_sepPosMonomial0" (formula "4"))
               (rule "polySimp_mulComm0" (formula "4") (term "1"))
               (rule "polySimp_rightDist" (formula "4") (term "1"))
               (rule "polySimp_mulLiterals" (formula "4") (term "1,1"))
               (rule "polySimp_elimOne" (formula "4") (term "1,1"))
               (rule "polySimp_rightDist" (formula "4") (term "0,1"))
               (rule "mul_literals" (formula "4") (term "0,0,1"))
               (rule "polySimp_mulLiterals" (formula "4") (term "1,0,1"))
               (rule "polySimp_elimOne" (formula "4") (term "1,0,1"))
               (rule "inEqSimp_sepPosMonomial0" (formula "3"))
               (rule "polySimp_mulComm0" (formula "3") (term "1"))
               (rule "polySimp_rightDist" (formula "3") (term "1"))
               (rule "mul_literals" (formula "3") (term "0,1"))
               (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
               (rule "polySimp_elimOne" (formula "3") (term "1,1"))
               (rule "inEqSimp_sepPosMonomial0" (formula "2"))
               (rule "polySimp_mulComm0" (formula "2") (term "1"))
               (rule "polySimp_rightDist" (formula "2") (term "1"))
               (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
               (rule "polySimp_elimOne" (formula "2") (term "1,1"))
               (rule "polySimp_rightDist" (formula "2") (term "0,1"))
               (rule "mul_literals" (formula "2") (term "0,0,1"))
               (rule "polySimp_mulLiterals" (formula "2") (term "1,0,1"))
               (rule "polySimp_elimOne" (formula "2") (term "1,0,1"))
               (rule "inEqSimp_sepPosMonomial1" (formula "1"))
               (rule "polySimp_mulComm0" (formula "1") (term "1"))
               (rule "polySimp_rightDist" (formula "1") (term "1"))
               (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
               (rule "polySimp_elimOne" (formula "1") (term "1,1"))
               (rule "polySimp_mulAssoc" (formula "1") (term "0,1"))
               (rule "polySimp_mulComm0" (formula "1") (term "0,0,1"))
               (rule "polySimp_mulLiterals" (formula "1") (term "0,1"))
               (rule "polySimp_elimOne" (formula "1") (term "0,1"))
               (rule "pullOutSelect" (formula "6") (term "0") (inst "selectSK=arr_0"))
               (rule "simplifySelectOfAnon" (formula "6"))
                (builtin "One Step Simplification" (formula "6") (ifInst ""  (formula "38")) (ifInst ""  (formula "11")))
               (rule "inEqSimp_homoInEq0" (formula "7"))
               (rule "polySimp_addComm1" (formula "7") (term "0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "7"))
               (rule "polySimp_mulComm0" (formula "7") (term "1"))
               (rule "polySimp_rightDist" (formula "7") (term "1"))
               (rule "polySimp_mulLiterals" (formula "7") (term "1,1"))
               (rule "mul_literals" (formula "7") (term "0,1"))
               (rule "polySimp_elimOne" (formula "7") (term "1,1"))
               (rule "elementOfSetMinus" (formula "6") (term "0,0"))
                (builtin "One Step Simplification" (formula "6"))
               (rule "ifthenelse_negated" (formula "6") (term "0"))
               (rule "elementOfUnion" (formula "6") (term "0,0"))
               (rule "elementOfArrayRangeConcrete" (formula "6") (term "1,0,0"))
                (builtin "One Step Simplification" (formula "6"))
               (rule "inEqSimp_homoInEq0" (formula "6") (term "1,1,0,0"))
               (rule "polySimp_mulComm0" (formula "6") (term "1,0,1,1,0,0"))
               (rule "polySimp_rightDist" (formula "6") (term "1,0,1,1,0,0"))
               (rule "mul_literals" (formula "6") (term "0,1,0,1,1,0,0"))
               (rule "polySimp_addAssoc" (formula "6") (term "0,1,1,0,0"))
               (rule "polySimp_addComm1" (formula "6") (term "0,0,1,1,0,0"))
               (rule "polySimp_addComm1" (formula "6") (term "0,0,0,1,1,0,0"))
               (rule "add_literals" (formula "6") (term "0,0,0,0,1,1,0,0"))
               (rule "inEqSimp_homoInEq0" (formula "6") (term "0,1,0,0"))
               (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,1,0,0"))
               (rule "polySimp_rightDist" (formula "6") (term "1,0,0,1,0,0"))
               (rule "polySimp_mulComm0" (formula "6") (term "0,1,0,0,1,0,0"))
               (rule "polySimp_addComm1" (formula "6") (term "0,0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "6") (term "0,0,0,1,0,0"))
               (rule "inEqSimp_sepNegMonomial1" (formula "6") (term "1,1,0,0"))
               (rule "polySimp_mulLiterals" (formula "6") (term "0,1,1,0,0"))
               (rule "polySimp_elimOne" (formula "6") (term "0,1,1,0,0"))
               (rule "replace_known_left" (formula "6") (term "1,1,0,0") (ifseqformula "4"))
                (builtin "One Step Simplification" (formula "6"))
               (rule "inEqSimp_sepPosMonomial1" (formula "6") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "6") (term "1,1,0,0"))
               (rule "polySimp_rightDist" (formula "6") (term "1,1,0,0"))
               (rule "polySimp_mulLiterals" (formula "6") (term "1,1,1,0,0"))
               (rule "polySimp_elimOne" (formula "6") (term "1,1,1,0,0"))
               (rule "polySimp_rightDist" (formula "6") (term "0,1,1,0,0"))
               (rule "polySimp_mulLiterals" (formula "6") (term "1,0,1,1,0,0"))
               (rule "mul_literals" (formula "6") (term "0,0,1,1,0,0"))
               (rule "polySimp_elimOne" (formula "6") (term "1,0,1,1,0,0"))
               (rule "inEqSimp_subsumption1" (formula "6") (term "1,0,0") (ifseqformula "5"))
               (rule "inEqSimp_homoInEq0" (formula "6") (term "0,1,0,0"))
               (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,1,0,0"))
               (rule "polySimp_rightDist" (formula "6") (term "1,0,0,1,0,0"))
               (rule "polySimp_rightDist" (formula "6") (term "0,1,0,0,1,0,0"))
               (rule "mul_literals" (formula "6") (term "0,0,1,0,0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "6") (term "0,0,1,0,0"))
               (rule "polySimp_addComm1" (formula "6") (term "0,0,0,1,0,0"))
               (rule "polySimp_pullOutFactor1b" (formula "6") (term "0,0,1,0,0"))
               (rule "add_literals" (formula "6") (term "1,1,0,0,1,0,0"))
               (rule "times_zero_1" (formula "6") (term "1,0,0,1,0,0"))
               (rule "add_zero_right" (formula "6") (term "0,0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "6") (term "0,0,1,0,0"))
               (rule "polySimp_addComm0" (formula "6") (term "0,0,0,1,0,0"))
               (rule "polySimp_pullOutFactor1b" (formula "6") (term "0,0,1,0,0"))
               (rule "add_literals" (formula "6") (term "1,1,0,0,1,0,0"))
               (rule "times_zero_1" (formula "6") (term "1,0,0,1,0,0"))
               (rule "add_zero_right" (formula "6") (term "0,0,1,0,0"))
               (rule "qeq_literals" (formula "6") (term "0,1,0,0"))
                (builtin "One Step Simplification" (formula "6"))
               (rule "applyEqReverse" (formula "7") (term "1,1") (ifseqformula "6"))
               (rule "hideAuxiliaryEq" (formula "6"))
               (rule "pullOutSelect" (formula "6") (term "0") (inst "selectSK=arr_1"))
               (rule "simplifySelectOfAnon" (formula "6"))
                (builtin "One Step Simplification" (formula "6") (ifInst ""  (formula "38")) (ifInst ""  (formula "11")))
               (rule "inEqSimp_homoInEq1" (formula "7"))
               (rule "polySimp_addComm1" (formula "7") (term "0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "7"))
               (rule "polySimp_mulComm0" (formula "7") (term "1"))
               (rule "polySimp_rightDist" (formula "7") (term "1"))
               (rule "mul_literals" (formula "7") (term "0,1"))
               (rule "polySimp_mulLiterals" (formula "7") (term "1,1"))
               (rule "polySimp_elimOne" (formula "7") (term "1,1"))
               (rule "elementOfSetMinus" (formula "6") (term "0,0"))
                (builtin "One Step Simplification" (formula "6"))
               (rule "ifthenelse_negated" (formula "6") (term "0"))
               (rule "elementOfUnion" (formula "6") (term "0,0"))
               (rule "elementOfArrayRangeConcrete" (formula "6") (term "1,0,0"))
                (builtin "One Step Simplification" (formula "6"))
               (rule "inEqSimp_commuteLeq" (formula "6") (term "0,1,0,0"))
               (rule "replace_known_left" (formula "6") (term "0,1,0,0") (ifseqformula "5"))
                (builtin "One Step Simplification" (formula "6"))
               (rule "inEqSimp_subsumption0" (formula "6") (term "1,0,0") (ifseqformula "4"))
               (rule "inEqSimp_homoInEq0" (formula "6") (term "0,1,0,0"))
               (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,1,0,0"))
               (rule "polySimp_rightDist" (formula "6") (term "1,0,0,1,0,0"))
               (rule "polySimp_rightDist" (formula "6") (term "0,1,0,0,1,0,0"))
               (rule "mul_literals" (formula "6") (term "0,0,1,0,0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "6") (term "0,0,1,0,0"))
               (rule "polySimp_addComm1" (formula "6") (term "0,0,0,1,0,0"))
               (rule "polySimp_pullOutFactor1b" (formula "6") (term "0,0,1,0,0"))
               (rule "add_literals" (formula "6") (term "1,1,0,0,1,0,0"))
               (rule "times_zero_1" (formula "6") (term "1,0,0,1,0,0"))
               (rule "add_zero_right" (formula "6") (term "0,0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "6") (term "0,0,1,0,0"))
               (rule "polySimp_addComm1" (formula "6") (term "0,0,0,1,0,0"))
               (rule "add_literals" (formula "6") (term "0,0,0,0,1,0,0"))
               (rule "polySimp_pullOutFactor1b" (formula "6") (term "0,0,1,0,0"))
               (rule "add_literals" (formula "6") (term "1,1,0,0,1,0,0"))
               (rule "times_zero_1" (formula "6") (term "1,0,0,1,0,0"))
               (rule "add_zero_right" (formula "6") (term "0,0,1,0,0"))
               (rule "qeq_literals" (formula "6") (term "0,1,0,0"))
                (builtin "One Step Simplification" (formula "6"))
               (rule "applyEqReverse" (formula "7") (term "1,1") (ifseqformula "6"))
               (rule "hideAuxiliaryEq" (formula "6"))
               (rule "inEqSimp_exactShadow3" (formula "5") (ifseqformula "4"))
               (rule "polySimp_rightDist" (formula "5") (term "0,0"))
               (rule "polySimp_mulComm0" (formula "5") (term "0,0,0"))
               (rule "polySimp_addAssoc" (formula "5") (term "0"))
               (rule "polySimp_addComm1" (formula "5") (term "0,0"))
               (rule "polySimp_addAssoc" (formula "5") (term "0,0,0"))
               (rule "polySimp_addComm0" (formula "5") (term "0,0,0,0"))
               (rule "polySimp_pullOutFactor2b" (formula "5") (term "0,0,0"))
               (rule "add_literals" (formula "5") (term "1,1,0,0,0"))
               (rule "times_zero_1" (formula "5") (term "1,0,0,0"))
               (rule "add_literals" (formula "5") (term "0,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "5"))
               (rule "polySimp_mulComm0" (formula "5") (term "1"))
               (rule "polySimp_rightDist" (formula "5") (term "1"))
               (rule "polySimp_mulLiterals" (formula "5") (term "1,1"))
               (rule "mul_literals" (formula "5") (term "0,1"))
               (rule "polySimp_elimOne" (formula "5") (term "1,1"))
               (rule "inEqSimp_exactShadow3" (formula "1") (ifseqformula "2"))
               (rule "polySimp_rightDist" (formula "1") (term "0,0"))
               (rule "polySimp_mulComm0" (formula "1") (term "0,0,0"))
               (rule "polySimp_addAssoc" (formula "1") (term "0"))
               (rule "polySimp_addComm1" (formula "1") (term "0,0"))
               (rule "polySimp_addAssoc" (formula "1") (term "0,0,0"))
               (rule "polySimp_addComm0" (formula "1") (term "0,0,0,0"))
               (rule "polySimp_pullOutFactor2b" (formula "1") (term "0,0,0"))
               (rule "add_literals" (formula "1") (term "1,1,0,0,0"))
               (rule "times_zero_1" (formula "1") (term "1,0,0,0"))
               (rule "add_literals" (formula "1") (term "0,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "1"))
               (rule "polySimp_mulComm0" (formula "1") (term "1"))
               (rule "polySimp_rightDist" (formula "1") (term "1"))
               (rule "mul_literals" (formula "1") (term "0,1"))
               (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
               (rule "polySimp_elimOne" (formula "1") (term "1,1"))
               (rule "equiv_right" (formula "40"))
               (branch "Case '->'"
                  (rule "andLeft" (formula "1"))
                  (rule "equalityToElementOfRight" (formula "39") (inst "ov=ov") (inst "fv=fv"))
                   (builtin "One Step Simplification" (formula "39"))
                  (rule "allRight" (formula "39") (inst "sk=ov_0"))
                  (rule "allRight" (formula "39") (inst "sk=fv_0"))
                  (rule "notRight" (formula "39"))
                  (rule "elementOfIntersect" (formula "1"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "andLeft" (formula "1"))
                  (rule "applyEq" (formula "2") (term "0") (ifseqformula "1"))
                  (rule "elementOfSetMinus" (formula "2"))
                   (builtin "One Step Simplification" (formula "2"))
                  (rule "notLeft" (formula "2"))
                  (rule "elementOfUnion" (formula "37"))
                  (rule "orRight" (formula "37"))
                  (rule "elementOfUnion" (formula "37"))
                   (builtin "One Step Simplification" (formula "37"))
                  (rule "closeTrue" (formula "37"))
               )
               (branch "Case '<-'"
                  (rule "andLeft" (formula "1"))
                  (rule "equalityToElementOfRight" (formula "39") (inst "ov=ov") (inst "fv=fv"))
                   (builtin "One Step Simplification" (formula "39"))
                  (rule "allRight" (formula "39") (inst "sk=ov_0"))
                  (rule "allRight" (formula "39") (inst "sk=fv_0"))
                  (rule "notRight" (formula "39"))
                  (rule "elementOfIntersect" (formula "1"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "andLeft" (formula "1"))
                  (rule "applyEq" (formula "2") (term "0") (ifseqformula "1"))
                  (rule "elementOfSetMinus" (formula "2"))
                   (builtin "One Step Simplification" (formula "2"))
                  (rule "notLeft" (formula "2"))
                  (rule "elementOfUnion" (formula "37"))
                  (rule "orRight" (formula "37"))
                  (rule "elementOfUnion" (formula "37"))
                   (builtin "One Step Simplification" (formula "37"))
                  (rule "closeTrue" (formula "37"))
               )
            )
         )
         (branch "CUT: arrayRange(values_0, begin + bucket_begin, -1 + begin + bucket_end) cap allLocs setMinus classifier.sorted_splitters.* cup classifier.tree.tree.* cup arrayRange(values_0, begin + bucket_begin, -1 + begin + bucket_end) = {} FALSE"
             (builtin "One Step Simplification" (formula "25"))
            (rule "true_left" (formula "25"))
            (rule "replace_known_right" (formula "29") (term "1") (ifseqformula "25"))
             (builtin "One Step Simplification" (formula "29"))
            (rule "false_right" (formula "29"))
            (rule "Definition_axiom_for_classOf_in_de_wiesler_Classifier" (formula "31") (term "0,1,0,0,0"))
            (rule "Definition_axiom_for_classOf_in_de_wiesler_Classifier" (formula "31") (term "0,1,0,0,1"))
            (rule "commute_or" (formula "12") (term "0,0,1,0"))
            (rule "commute_or" (formula "22") (term "0,0,1,0"))
            (rule "cnf_rightDist" (formula "23") (term "0"))
            (rule "distr_forallAnd" (formula "23"))
            (rule "andLeft" (formula "23"))
            (rule "commute_or" (formula "24") (term "0"))
            (rule "equiv_right" (formula "32"))
            (branch "Case '->'"
               (rule "andLeft" (formula "1"))
               (rule "andRight" (formula "34"))
               (branch "Case 1"
                  (rule "allRight" (formula "34") (inst "sk=i_0"))
                  (rule "orRight" (formula "34"))
                  (rule "orRight" (formula "34"))
                  (rule "inEqSimp_geqRight" (formula "35"))
                  (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "1") (term "0,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                  (rule "inEqSimp_leqRight" (formula "35"))
                  (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                  (rule "polySimp_rightDist" (formula "1") (term "0,1,0,0"))
                  (rule "mul_literals" (formula "1") (term "0,0,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                  (rule "polySimp_addAssoc" (formula "1") (term "0,0,0"))
                  (rule "add_literals" (formula "1") (term "0,0,0,0"))
                  (rule "add_zero_left" (formula "1") (term "0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "2"))
                  (rule "polySimp_mulComm0" (formula "2") (term "1"))
                  (rule "polySimp_rightDist" (formula "2") (term "1"))
                  (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
                  (rule "polySimp_elimOne" (formula "2") (term "1,1"))
                  (rule "polySimp_rightDist" (formula "2") (term "0,1"))
                  (rule "polySimp_mulLiterals" (formula "2") (term "1,0,1"))
                  (rule "mul_literals" (formula "2") (term "0,0,1"))
                  (rule "polySimp_elimOne" (formula "2") (term "1,0,1"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                  (rule "polySimp_mulComm0" (formula "1") (term "1"))
                  (rule "polySimp_rightDist" (formula "1") (term "1"))
                  (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                  (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                  (rule "polySimp_mulAssoc" (formula "1") (term "0,1"))
                  (rule "polySimp_mulComm0" (formula "1") (term "0,0,1"))
                  (rule "polySimp_mulLiterals" (formula "1") (term "0,1"))
                  (rule "polySimp_elimOne" (formula "1") (term "0,1"))
                  (rule "pullOutSelect" (formula "36") (term "2,0") (inst "selectSK=arr_0"))
                  (rule "simplifySelectOfAnon" (formula "1"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "35")) (ifInst ""  (formula "9")))
                  (rule "elementOfSetMinus" (formula "1") (term "0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "ifthenelse_negated" (formula "1") (term "0"))
                  (rule "elementOfUnion" (formula "1") (term "0,0"))
                  (rule "elementOfArrayRangeConcrete" (formula "1") (term "1,0,0"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "3")))
                  (rule "inEqSimp_commuteLeq" (formula "1") (term "1,0,0"))
                  (rule "replace_known_left" (formula "1") (term "1,0,0") (ifseqformula "2"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "applyEqReverse" (formula "37") (term "2,0") (ifseqformula "1"))
                  (rule "hideAuxiliaryEq" (formula "1"))
                  (rule "inEqSimp_exactShadow3" (formula "1") (ifseqformula "2"))
                  (rule "polySimp_rightDist" (formula "1") (term "0,0"))
                  (rule "polySimp_mulComm0" (formula "1") (term "0,0,0"))
                  (rule "polySimp_addAssoc" (formula "1") (term "0"))
                  (rule "polySimp_addComm1" (formula "1") (term "0,0"))
                  (rule "polySimp_addAssoc" (formula "1") (term "0,0,0"))
                  (rule "polySimp_addComm0" (formula "1") (term "0,0,0,0"))
                  (rule "polySimp_pullOutFactor2b" (formula "1") (term "0,0,0"))
                  (rule "add_literals" (formula "1") (term "1,1,0,0,0"))
                  (rule "times_zero_1" (formula "1") (term "1,0,0,0"))
                  (rule "add_literals" (formula "1") (term "0,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                  (rule "polySimp_mulComm0" (formula "1") (term "1"))
                  (rule "polySimp_rightDist" (formula "1") (term "1"))
                  (rule "mul_literals" (formula "1") (term "0,1"))
                  (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                  (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                  (rule "equalityToElementOfRight" (formula "31") (inst "ov=ov") (inst "fv=fv"))
                   (builtin "One Step Simplification" (formula "31"))
                  (rule "allRight" (formula "31") (inst "sk=ov_0"))
                  (rule "allRight" (formula "31") (inst "sk=fv_0"))
                  (rule "notRight" (formula "31"))
                  (rule "elementOfIntersect" (formula "1"))
                  (rule "andLeft" (formula "1"))
                  (rule "elementOfSetMinus" (formula "2"))
                   (builtin "One Step Simplification" (formula "2"))
                  (rule "notLeft" (formula "2"))
                  (rule "elementOfArrayRange" (formula "1") (inst "iv=iv"))
                  (rule "andLeft" (formula "1"))
                  (rule "exLeft" (formula "2") (inst "sk=iv_0"))
                  (rule "andLeft" (formula "2"))
                  (rule "andLeft" (formula "2"))
                  (rule "inEqSimp_commuteLeq" (formula "3"))
                  (rule "applyEq" (formula "35") (term "0") (ifseqformula "1"))
                  (rule "applyEqRigid" (formula "35") (term "1") (ifseqformula "2"))
                  (rule "elementOfUnion" (formula "35"))
                  (rule "orRight" (formula "35"))
                  (rule "elementOfArrayRangeConcrete" (formula "36"))
                   (builtin "One Step Simplification" (formula "36") (ifInst ""  (formula "4")))
                  (rule "inEqSimp_leqRight" (formula "36"))
                  (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                  (rule "polySimp_addComm1" (formula "1") (term "0"))
                  (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                  (rule "inEqSimp_sepNegMonomial1" (formula "1"))
                  (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                  (rule "polySimp_elimOne" (formula "1") (term "0"))
                  (rule "inEqSimp_contradInEq0" (formula "4") (ifseqformula "1"))
                  (rule "andLeft" (formula "4"))
                  (rule "inEqSimp_homoInEq1" (formula "4"))
                  (rule "polySimp_mulComm0" (formula "4") (term "1,0"))
                  (rule "polySimp_rightDist" (formula "4") (term "1,0"))
                  (rule "polySimp_rightDist" (formula "4") (term "0,1,0"))
                  (rule "mul_literals" (formula "4") (term "0,0,1,0"))
                  (rule "polySimp_addAssoc" (formula "4") (term "0"))
                  (rule "polySimp_addComm1" (formula "4") (term "0,0"))
                  (rule "polySimp_pullOutFactor1b" (formula "4") (term "0"))
                  (rule "add_literals" (formula "4") (term "1,1,0"))
                  (rule "times_zero_1" (formula "4") (term "1,0"))
                  (rule "add_zero_right" (formula "4") (term "0"))
                  (rule "polySimp_addAssoc" (formula "4") (term "0"))
                  (rule "polySimp_addComm0" (formula "4") (term "0,0"))
                  (rule "polySimp_pullOutFactor1b" (formula "4") (term "0"))
                  (rule "add_literals" (formula "4") (term "1,1,0"))
                  (rule "times_zero_1" (formula "4") (term "1,0"))
                  (rule "add_zero_right" (formula "4") (term "0"))
                  (rule "leq_literals" (formula "4"))
                  (rule "closeFalse" (formula "4"))
               )
               (branch "Case 2"
                  (rule "impRight" (formula "34"))
                  (rule "allRight" (formula "35") (inst "sk=i_0"))
                  (rule "orRight" (formula "35"))
                  (rule "orRight" (formula "35"))
                  (rule "replace_known_left" (formula "3") (term "0") (ifseqformula "1"))
                   (builtin "One Step Simplification" (formula "3"))
                  (rule "inEqSimp_geqRight" (formula "37"))
                  (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                  (rule "inEqSimp_leqRight" (formula "36"))
                  (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                  (rule "polySimp_rightDist" (formula "1") (term "0,1,0,0"))
                  (rule "mul_literals" (formula "1") (term "0,0,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                  (rule "polySimp_addAssoc" (formula "1") (term "0,0,0"))
                  (rule "add_literals" (formula "1") (term "0,0,0,0"))
                  (rule "add_zero_left" (formula "1") (term "0,0,0"))
                  (rule "inEqSimp_geqRight" (formula "37"))
                  (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                  (rule "polySimp_rightDist" (formula "1") (term "0,1,0,0"))
                  (rule "mul_literals" (formula "1") (term "0,0,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                  (rule "polySimp_addAssoc" (formula "1") (term "0,0,0"))
                  (rule "add_literals" (formula "1") (term "0,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "3"))
                  (rule "polySimp_mulComm0" (formula "3") (term "1"))
                  (rule "polySimp_rightDist" (formula "3") (term "1"))
                  (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
                  (rule "mul_literals" (formula "3") (term "0,1"))
                  (rule "polySimp_elimOne" (formula "3") (term "1,1"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                  (rule "polySimp_mulComm0" (formula "2") (term "1"))
                  (rule "polySimp_rightDist" (formula "2") (term "1"))
                  (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
                  (rule "polySimp_elimOne" (formula "2") (term "1,1"))
                  (rule "polySimp_mulAssoc" (formula "2") (term "0,1"))
                  (rule "polySimp_mulComm0" (formula "2") (term "0,0,1"))
                  (rule "polySimp_mulLiterals" (formula "2") (term "0,1"))
                  (rule "polySimp_elimOne" (formula "2") (term "0,1"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                  (rule "polySimp_mulComm0" (formula "1") (term "1"))
                  (rule "polySimp_rightDist" (formula "1") (term "1"))
                  (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                  (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                  (rule "polySimp_rightDist" (formula "1") (term "0,1"))
                  (rule "mul_literals" (formula "1") (term "0,0,1"))
                  (rule "polySimp_mulLiterals" (formula "1") (term "1,0,1"))
                  (rule "polySimp_elimOne" (formula "1") (term "1,0,1"))
                  (rule "pullOutSelect" (formula "3") (term "0") (inst "selectSK=arr_0"))
                  (rule "simplifySelectOfAnon" (formula "3"))
                   (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "37")) (ifInst ""  (formula "11")))
                  (rule "inEqSimp_homoInEq0" (formula "4"))
                  (rule "polySimp_addComm1" (formula "4") (term "0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "4"))
                  (rule "polySimp_mulComm0" (formula "4") (term "1"))
                  (rule "polySimp_rightDist" (formula "4") (term "1"))
                  (rule "polySimp_mulLiterals" (formula "4") (term "1,1"))
                  (rule "mul_literals" (formula "4") (term "0,1"))
                  (rule "polySimp_elimOne" (formula "4") (term "1,1"))
                  (rule "elementOfSetMinus" (formula "3") (term "0,0"))
                   (builtin "One Step Simplification" (formula "3"))
                  (rule "ifthenelse_negated" (formula "3") (term "0"))
                  (rule "elementOfUnion" (formula "3") (term "0,0"))
                  (rule "elementOfArrayRangeConcrete" (formula "3") (term "1,0,0"))
                   (builtin "One Step Simplification" (formula "3"))
                  (rule "inEqSimp_homoInEq0" (formula "3") (term "1,1,0,0"))
                  (rule "polySimp_mulComm0" (formula "3") (term "1,0,1,1,0,0"))
                  (rule "polySimp_rightDist" (formula "3") (term "1,0,1,1,0,0"))
                  (rule "mul_literals" (formula "3") (term "0,1,0,1,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "3") (term "0,1,1,0,0"))
                  (rule "polySimp_addComm1" (formula "3") (term "0,0,1,1,0,0"))
                  (rule "polySimp_addComm1" (formula "3") (term "0,0,0,1,1,0,0"))
                  (rule "add_literals" (formula "3") (term "0,0,0,0,1,1,0,0"))
                  (rule "inEqSimp_homoInEq0" (formula "3") (term "0,1,0,0"))
                  (rule "polySimp_mulComm0" (formula "3") (term "1,0,0,1,0,0"))
                  (rule "polySimp_rightDist" (formula "3") (term "1,0,0,1,0,0"))
                  (rule "polySimp_mulComm0" (formula "3") (term "0,1,0,0,1,0,0"))
                  (rule "polySimp_addComm1" (formula "3") (term "0,0,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "3") (term "0,0,0,1,0,0"))
                  (rule "inEqSimp_sepNegMonomial1" (formula "3") (term "1,1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "3") (term "0,1,1,0,0"))
                  (rule "polySimp_elimOne" (formula "3") (term "0,1,1,0,0"))
                  (rule "replace_known_left" (formula "3") (term "1,1,0,0") (ifseqformula "1"))
                   (builtin "One Step Simplification" (formula "3"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "3") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "3") (term "1,1,0,0"))
                  (rule "polySimp_rightDist" (formula "3") (term "1,1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "3") (term "1,1,1,0,0"))
                  (rule "polySimp_elimOne" (formula "3") (term "1,1,1,0,0"))
                  (rule "polySimp_rightDist" (formula "3") (term "0,1,1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "3") (term "1,0,1,1,0,0"))
                  (rule "mul_literals" (formula "3") (term "0,0,1,1,0,0"))
                  (rule "polySimp_elimOne" (formula "3") (term "1,0,1,1,0,0"))
                  (rule "inEqSimp_subsumption1" (formula "3") (term "1,0,0") (ifseqformula "2"))
                  (rule "inEqSimp_homoInEq0" (formula "3") (term "0,1,0,0"))
                  (rule "polySimp_mulComm0" (formula "3") (term "1,0,0,1,0,0"))
                  (rule "polySimp_rightDist" (formula "3") (term "1,0,0,1,0,0"))
                  (rule "polySimp_rightDist" (formula "3") (term "0,1,0,0,1,0,0"))
                  (rule "mul_literals" (formula "3") (term "0,0,1,0,0,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "3") (term "0,0,1,0,0"))
                  (rule "polySimp_addComm1" (formula "3") (term "0,0,0,1,0,0"))
                  (rule "polySimp_pullOutFactor1b" (formula "3") (term "0,0,1,0,0"))
                  (rule "add_literals" (formula "3") (term "1,1,0,0,1,0,0"))
                  (rule "times_zero_1" (formula "3") (term "1,0,0,1,0,0"))
                  (rule "add_zero_right" (formula "3") (term "0,0,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "3") (term "0,0,1,0,0"))
                  (rule "polySimp_addComm0" (formula "3") (term "0,0,0,1,0,0"))
                  (rule "polySimp_pullOutFactor1b" (formula "3") (term "0,0,1,0,0"))
                  (rule "add_literals" (formula "3") (term "1,1,0,0,1,0,0"))
                  (rule "times_zero_1" (formula "3") (term "1,0,0,1,0,0"))
                  (rule "add_zero_right" (formula "3") (term "0,0,1,0,0"))
                  (rule "qeq_literals" (formula "3") (term "0,1,0,0"))
                   (builtin "One Step Simplification" (formula "3"))
                  (rule "applyEqReverse" (formula "4") (term "1,1") (ifseqformula "3"))
                  (rule "hideAuxiliaryEq" (formula "3"))
                  (rule "pullOutSelect" (formula "3") (term "0") (inst "selectSK=arr_1"))
                  (rule "simplifySelectOfAnon" (formula "3"))
                   (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "37")) (ifInst ""  (formula "11")))
                  (rule "inEqSimp_homoInEq1" (formula "4"))
                  (rule "polySimp_addComm1" (formula "4") (term "0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "4"))
                  (rule "polySimp_mulComm0" (formula "4") (term "1"))
                  (rule "polySimp_rightDist" (formula "4") (term "1"))
                  (rule "polySimp_mulLiterals" (formula "4") (term "1,1"))
                  (rule "mul_literals" (formula "4") (term "0,1"))
                  (rule "polySimp_elimOne" (formula "4") (term "1,1"))
                  (rule "elementOfSetMinus" (formula "3") (term "0,0"))
                   (builtin "One Step Simplification" (formula "3"))
                  (rule "ifthenelse_negated" (formula "3") (term "0"))
                  (rule "elementOfUnion" (formula "3") (term "0,0"))
                  (rule "elementOfArrayRangeConcrete" (formula "3") (term "1,0,0"))
                   (builtin "One Step Simplification" (formula "3"))
                  (rule "inEqSimp_commuteLeq" (formula "3") (term "0,1,0,0"))
                  (rule "replace_known_left" (formula "3") (term "0,1,0,0") (ifseqformula "2"))
                   (builtin "One Step Simplification" (formula "3"))
                  (rule "inEqSimp_subsumption0" (formula "3") (term "1,0,0") (ifseqformula "1"))
                  (rule "inEqSimp_homoInEq0" (formula "3") (term "0,1,0,0"))
                  (rule "polySimp_mulComm0" (formula "3") (term "1,0,0,1,0,0"))
                  (rule "polySimp_rightDist" (formula "3") (term "1,0,0,1,0,0"))
                  (rule "polySimp_rightDist" (formula "3") (term "0,1,0,0,1,0,0"))
                  (rule "mul_literals" (formula "3") (term "0,0,1,0,0,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "3") (term "0,0,1,0,0"))
                  (rule "polySimp_addComm1" (formula "3") (term "0,0,0,1,0,0"))
                  (rule "polySimp_pullOutFactor1b" (formula "3") (term "0,0,1,0,0"))
                  (rule "add_literals" (formula "3") (term "1,1,0,0,1,0,0"))
                  (rule "times_zero_1" (formula "3") (term "1,0,0,1,0,0"))
                  (rule "add_zero_right" (formula "3") (term "0,0,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "3") (term "0,0,1,0,0"))
                  (rule "polySimp_addComm1" (formula "3") (term "0,0,0,1,0,0"))
                  (rule "add_literals" (formula "3") (term "0,0,0,0,1,0,0"))
                  (rule "polySimp_pullOutFactor1b" (formula "3") (term "0,0,1,0,0"))
                  (rule "add_literals" (formula "3") (term "1,1,0,0,1,0,0"))
                  (rule "times_zero_1" (formula "3") (term "1,0,0,1,0,0"))
                  (rule "add_zero_right" (formula "3") (term "0,0,1,0,0"))
                  (rule "qeq_literals" (formula "3") (term "0,1,0,0"))
                   (builtin "One Step Simplification" (formula "3"))
                  (rule "applyEqReverse" (formula "4") (term "1,1") (ifseqformula "3"))
                  (rule "hideAuxiliaryEq" (formula "3"))
                  (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "1"))
                  (rule "polySimp_rightDist" (formula "2") (term "0,0"))
                  (rule "polySimp_mulComm0" (formula "2") (term "0,0,0"))
                  (rule "polySimp_addAssoc" (formula "2") (term "0"))
                  (rule "polySimp_addComm1" (formula "2") (term "0,0"))
                  (rule "polySimp_addAssoc" (formula "2") (term "0,0,0"))
                  (rule "polySimp_addComm0" (formula "2") (term "0,0,0,0"))
                  (rule "polySimp_pullOutFactor2b" (formula "2") (term "0,0,0"))
                  (rule "add_literals" (formula "2") (term "1,1,0,0,0"))
                  (rule "times_zero_1" (formula "2") (term "1,0,0,0"))
                  (rule "add_zero_right" (formula "2") (term "0,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                  (rule "polySimp_mulComm0" (formula "2") (term "1"))
                  (rule "polySimp_rightDist" (formula "2") (term "1"))
                  (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
                  (rule "mul_literals" (formula "2") (term "0,1"))
                  (rule "polySimp_elimOne" (formula "2") (term "1,1"))
                  (rule "equalityToElementOfRight" (formula "33") (inst "ov=ov") (inst "fv=fv"))
                   (builtin "One Step Simplification" (formula "33"))
                  (rule "allRight" (formula "33") (inst "sk=ov_0"))
                  (rule "allRight" (formula "33") (inst "sk=fv_0"))
                  (rule "notRight" (formula "33"))
                  (rule "elementOfIntersect" (formula "1"))
                  (rule "andLeft" (formula "1"))
                  (rule "elementOfSetMinus" (formula "2"))
                   (builtin "One Step Simplification" (formula "2"))
                  (rule "notLeft" (formula "2"))
                  (rule "elementOfArrayRange" (formula "1") (inst "iv=iv"))
                  (rule "andLeft" (formula "1"))
                  (rule "exLeft" (formula "2") (inst "sk=iv_0"))
                  (rule "andLeft" (formula "2"))
                  (rule "andLeft" (formula "2"))
                  (rule "inEqSimp_commuteLeq" (formula "3"))
                  (rule "applyEq" (formula "37") (term "1") (ifseqformula "2"))
                  (rule "applyEq" (formula "37") (term "0") (ifseqformula "1"))
                  (rule "elementOfUnion" (formula "37"))
                  (rule "orRight" (formula "37"))
                  (rule "elementOfArrayRangeConcrete" (formula "38"))
                   (builtin "One Step Simplification" (formula "38") (ifInst ""  (formula "4")))
                  (rule "inEqSimp_leqRight" (formula "38"))
                  (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                  (rule "polySimp_addComm1" (formula "1") (term "0"))
                  (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                  (rule "inEqSimp_sepNegMonomial1" (formula "1"))
                  (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                  (rule "polySimp_elimOne" (formula "1") (term "0"))
                  (rule "inEqSimp_contradInEq0" (formula "4") (ifseqformula "1"))
                  (rule "andLeft" (formula "4"))
                  (rule "inEqSimp_homoInEq1" (formula "4"))
                  (rule "polySimp_mulComm0" (formula "4") (term "1,0"))
                  (rule "polySimp_rightDist" (formula "4") (term "1,0"))
                  (rule "polySimp_rightDist" (formula "4") (term "0,1,0"))
                  (rule "mul_literals" (formula "4") (term "0,0,1,0"))
                  (rule "polySimp_addAssoc" (formula "4") (term "0"))
                  (rule "polySimp_addComm1" (formula "4") (term "0,0"))
                  (rule "polySimp_pullOutFactor1b" (formula "4") (term "0"))
                  (rule "add_literals" (formula "4") (term "1,1,0"))
                  (rule "times_zero_1" (formula "4") (term "1,0"))
                  (rule "add_zero_right" (formula "4") (term "0"))
                  (rule "polySimp_addAssoc" (formula "4") (term "0"))
                  (rule "polySimp_addComm0" (formula "4") (term "0,0"))
                  (rule "polySimp_pullOutFactor1b" (formula "4") (term "0"))
                  (rule "add_literals" (formula "4") (term "1,1,0"))
                  (rule "times_zero_1" (formula "4") (term "1,0"))
                  (rule "add_literals" (formula "4") (term "0"))
                  (rule "leq_literals" (formula "4"))
                  (rule "closeFalse" (formula "4"))
               )
            )
            (branch "Case '<-'"
               (rule "andLeft" (formula "1"))
               (rule "andRight" (formula "34"))
               (branch "Case 1"
                  (rule "allRight" (formula "34") (inst "sk=i_0"))
                  (rule "orRight" (formula "34"))
                  (rule "orRight" (formula "34"))
                  (rule "inEqSimp_leqRight" (formula "34"))
                  (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                  (rule "polySimp_rightDist" (formula "1") (term "0,1,0,0"))
                  (rule "mul_literals" (formula "1") (term "0,0,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                  (rule "polySimp_addAssoc" (formula "1") (term "0,0,0"))
                  (rule "add_literals" (formula "1") (term "0,0,0,0"))
                  (rule "add_zero_left" (formula "1") (term "0,0,0"))
                  (rule "inEqSimp_geqRight" (formula "35"))
                  (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "1") (term "0,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                  (rule "polySimp_mulComm0" (formula "2") (term "1"))
                  (rule "polySimp_rightDist" (formula "2") (term "1"))
                  (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
                  (rule "polySimp_elimOne" (formula "2") (term "1,1"))
                  (rule "polySimp_mulAssoc" (formula "2") (term "0,1"))
                  (rule "polySimp_mulComm0" (formula "2") (term "0,0,1"))
                  (rule "polySimp_mulLiterals" (formula "2") (term "0,1"))
                  (rule "polySimp_elimOne" (formula "2") (term "0,1"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                  (rule "polySimp_mulComm0" (formula "1") (term "1"))
                  (rule "polySimp_rightDist" (formula "1") (term "1"))
                  (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                  (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                  (rule "polySimp_rightDist" (formula "1") (term "0,1"))
                  (rule "mul_literals" (formula "1") (term "0,0,1"))
                  (rule "polySimp_mulLiterals" (formula "1") (term "1,0,1"))
                  (rule "polySimp_elimOne" (formula "1") (term "1,0,1"))
                  (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "1"))
                  (rule "polySimp_rightDist" (formula "2") (term "0,0"))
                  (rule "polySimp_mulComm0" (formula "2") (term "0,0,0"))
                  (rule "polySimp_addAssoc" (formula "2") (term "0"))
                  (rule "polySimp_addComm1" (formula "2") (term "0,0"))
                  (rule "polySimp_addAssoc" (formula "2") (term "0,0,0"))
                  (rule "polySimp_addComm0" (formula "2") (term "0,0,0,0"))
                  (rule "polySimp_pullOutFactor2b" (formula "2") (term "0,0,0"))
                  (rule "add_literals" (formula "2") (term "1,1,0,0,0"))
                  (rule "times_zero_1" (formula "2") (term "1,0,0,0"))
                  (rule "add_zero_right" (formula "2") (term "0,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                  (rule "polySimp_mulComm0" (formula "2") (term "1"))
                  (rule "polySimp_rightDist" (formula "2") (term "1"))
                  (rule "mul_literals" (formula "2") (term "0,1"))
                  (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
                  (rule "polySimp_elimOne" (formula "2") (term "1,1"))
                  (rule "equalityToElementOfRight" (formula "31") (inst "ov=ov") (inst "fv=fv"))
                   (builtin "One Step Simplification" (formula "31"))
                  (rule "allRight" (formula "31") (inst "sk=ov_0"))
                  (rule "allRight" (formula "31") (inst "sk=fv_0"))
                  (rule "notRight" (formula "31"))
                  (rule "elementOfIntersect" (formula "1"))
                  (rule "andLeft" (formula "1"))
                  (rule "elementOfArrayRange" (formula "1") (inst "iv=iv"))
                  (rule "andLeft" (formula "1"))
                  (rule "exLeft" (formula "2") (inst "sk=iv_0"))
                  (rule "andLeft" (formula "2"))
                  (rule "andLeft" (formula "2"))
                  (rule "inEqSimp_commuteLeq" (formula "3"))
                  (rule "applyEq" (formula "5") (term "0") (ifseqformula "1"))
                  (rule "applyEqRigid" (formula "5") (term "1") (ifseqformula "2"))
                  (rule "elementOfSetMinus" (formula "5"))
                   (builtin "One Step Simplification" (formula "5"))
                  (rule "notLeft" (formula "5"))
                  (rule "elementOfUnion" (formula "35"))
                  (rule "orRight" (formula "35"))
                  (rule "elementOfArrayRangeConcrete" (formula "36"))
                   (builtin "One Step Simplification" (formula "36") (ifInst ""  (formula "4")))
                  (rule "inEqSimp_leqRight" (formula "36"))
                  (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                  (rule "polySimp_addComm1" (formula "1") (term "0"))
                  (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                  (rule "inEqSimp_sepNegMonomial1" (formula "1"))
                  (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                  (rule "polySimp_elimOne" (formula "1") (term "0"))
                  (rule "inEqSimp_contradInEq0" (formula "4") (ifseqformula "1"))
                  (rule "andLeft" (formula "4"))
                  (rule "inEqSimp_homoInEq1" (formula "4"))
                  (rule "polySimp_mulComm0" (formula "4") (term "1,0"))
                  (rule "polySimp_rightDist" (formula "4") (term "1,0"))
                  (rule "polySimp_rightDist" (formula "4") (term "0,1,0"))
                  (rule "mul_literals" (formula "4") (term "0,0,1,0"))
                  (rule "polySimp_addAssoc" (formula "4") (term "0"))
                  (rule "polySimp_addComm1" (formula "4") (term "0,0"))
                  (rule "polySimp_pullOutFactor1b" (formula "4") (term "0"))
                  (rule "add_literals" (formula "4") (term "1,1,0"))
                  (rule "times_zero_1" (formula "4") (term "1,0"))
                  (rule "add_zero_right" (formula "4") (term "0"))
                  (rule "polySimp_addAssoc" (formula "4") (term "0"))
                  (rule "polySimp_addComm0" (formula "4") (term "0,0"))
                  (rule "polySimp_pullOutFactor1b" (formula "4") (term "0"))
                  (rule "add_literals" (formula "4") (term "1,1,0"))
                  (rule "times_zero_1" (formula "4") (term "1,0"))
                  (rule "add_zero_right" (formula "4") (term "0"))
                  (rule "leq_literals" (formula "4"))
                  (rule "closeFalse" (formula "4"))
               )
               (branch "Case 2"
                  (rule "impRight" (formula "34"))
                  (rule "allRight" (formula "35") (inst "sk=i_0"))
                  (rule "orRight" (formula "35"))
                  (rule "orRight" (formula "35"))
                  (rule "replace_known_left" (formula "3") (term "0") (ifseqformula "1"))
                   (builtin "One Step Simplification" (formula "3"))
                  (rule "inEqSimp_geqRight" (formula "37"))
                  (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                  (rule "inEqSimp_leqRight" (formula "36"))
                  (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                  (rule "polySimp_rightDist" (formula "1") (term "0,1,0,0"))
                  (rule "mul_literals" (formula "1") (term "0,0,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                  (rule "polySimp_addAssoc" (formula "1") (term "0,0,0"))
                  (rule "add_literals" (formula "1") (term "0,0,0,0"))
                  (rule "add_zero_left" (formula "1") (term "0,0,0"))
                  (rule "inEqSimp_geqRight" (formula "37"))
                  (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                  (rule "polySimp_rightDist" (formula "1") (term "0,1,0,0"))
                  (rule "mul_literals" (formula "1") (term "0,0,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                  (rule "polySimp_addAssoc" (formula "1") (term "0,0,0"))
                  (rule "add_literals" (formula "1") (term "0,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "3"))
                  (rule "polySimp_mulComm0" (formula "3") (term "1"))
                  (rule "polySimp_rightDist" (formula "3") (term "1"))
                  (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
                  (rule "mul_literals" (formula "3") (term "0,1"))
                  (rule "polySimp_elimOne" (formula "3") (term "1,1"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                  (rule "polySimp_mulComm0" (formula "2") (term "1"))
                  (rule "polySimp_rightDist" (formula "2") (term "1"))
                  (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
                  (rule "polySimp_elimOne" (formula "2") (term "1,1"))
                  (rule "polySimp_mulAssoc" (formula "2") (term "0,1"))
                  (rule "polySimp_mulComm0" (formula "2") (term "0,0,1"))
                  (rule "polySimp_mulLiterals" (formula "2") (term "0,1"))
                  (rule "polySimp_elimOne" (formula "2") (term "0,1"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                  (rule "polySimp_mulComm0" (formula "1") (term "1"))
                  (rule "polySimp_rightDist" (formula "1") (term "1"))
                  (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                  (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                  (rule "polySimp_rightDist" (formula "1") (term "0,1"))
                  (rule "polySimp_mulLiterals" (formula "1") (term "1,0,1"))
                  (rule "mul_literals" (formula "1") (term "0,0,1"))
                  (rule "polySimp_elimOne" (formula "1") (term "1,0,1"))
                  (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "1"))
                  (rule "polySimp_rightDist" (formula "2") (term "0,0"))
                  (rule "polySimp_mulComm0" (formula "2") (term "0,0,0"))
                  (rule "polySimp_addAssoc" (formula "2") (term "0"))
                  (rule "polySimp_addComm1" (formula "2") (term "0,0"))
                  (rule "polySimp_addAssoc" (formula "2") (term "0,0,0"))
                  (rule "polySimp_addComm0" (formula "2") (term "0,0,0,0"))
                  (rule "polySimp_pullOutFactor2b" (formula "2") (term "0,0,0"))
                  (rule "add_literals" (formula "2") (term "1,1,0,0,0"))
                  (rule "times_zero_1" (formula "2") (term "1,0,0,0"))
                  (rule "add_zero_right" (formula "2") (term "0,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                  (rule "polySimp_mulComm0" (formula "2") (term "1"))
                  (rule "polySimp_rightDist" (formula "2") (term "1"))
                  (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
                  (rule "mul_literals" (formula "2") (term "0,1"))
                  (rule "polySimp_elimOne" (formula "2") (term "1,1"))
                  (rule "equalityToElementOfRight" (formula "33") (inst "ov=ov") (inst "fv=fv"))
                   (builtin "One Step Simplification" (formula "33"))
                  (rule "allRight" (formula "33") (inst "sk=ov_0"))
                  (rule "allRight" (formula "33") (inst "sk=fv_0"))
                  (rule "notRight" (formula "33"))
                  (rule "elementOfIntersect" (formula "1"))
                  (rule "andLeft" (formula "1"))
                  (rule "elementOfSetMinus" (formula "2"))
                   (builtin "One Step Simplification" (formula "2"))
                  (rule "notLeft" (formula "2"))
                  (rule "elementOfArrayRange" (formula "1") (inst "iv=iv"))
                  (rule "andLeft" (formula "1"))
                  (rule "exLeft" (formula "2") (inst "sk=iv_0"))
                  (rule "andLeft" (formula "2"))
                  (rule "andLeft" (formula "2"))
                  (rule "inEqSimp_commuteLeq" (formula "3"))
                  (rule "applyEq" (formula "37") (term "0") (ifseqformula "1"))
                  (rule "applyEqRigid" (formula "37") (term "1") (ifseqformula "2"))
                  (rule "elementOfUnion" (formula "37"))
                  (rule "orRight" (formula "37"))
                  (rule "elementOfArrayRangeConcrete" (formula "38"))
                   (builtin "One Step Simplification" (formula "38") (ifInst ""  (formula "4")))
                  (rule "inEqSimp_leqRight" (formula "38"))
                  (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                  (rule "polySimp_addComm1" (formula "1") (term "0"))
                  (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                  (rule "inEqSimp_sepNegMonomial1" (formula "1"))
                  (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                  (rule "polySimp_elimOne" (formula "1") (term "0"))
                  (rule "inEqSimp_contradInEq0" (formula "4") (ifseqformula "1"))
                  (rule "andLeft" (formula "4"))
                  (rule "inEqSimp_homoInEq1" (formula "4"))
                  (rule "polySimp_mulComm0" (formula "4") (term "1,0"))
                  (rule "polySimp_rightDist" (formula "4") (term "1,0"))
                  (rule "polySimp_rightDist" (formula "4") (term "0,1,0"))
                  (rule "mul_literals" (formula "4") (term "0,0,1,0"))
                  (rule "polySimp_addAssoc" (formula "4") (term "0"))
                  (rule "polySimp_addComm1" (formula "4") (term "0,0"))
                  (rule "polySimp_pullOutFactor1b" (formula "4") (term "0"))
                  (rule "add_literals" (formula "4") (term "1,1,0"))
                  (rule "times_zero_1" (formula "4") (term "1,0"))
                  (rule "add_zero_right" (formula "4") (term "0"))
                  (rule "polySimp_addAssoc" (formula "4") (term "0"))
                  (rule "polySimp_addComm0" (formula "4") (term "0,0"))
                  (rule "polySimp_pullOutFactor1b" (formula "4") (term "0"))
                  (rule "add_literals" (formula "4") (term "1,1,0"))
                  (rule "times_zero_1" (formula "4") (term "1,0"))
                  (rule "add_literals" (formula "4") (term "0"))
                  (rule "leq_literals" (formula "4"))
                  (rule "closeFalse" (formula "4"))
               )
            )
         )
      )
      (branch "CUT: classifier.sorted_splitters.* cap allLocs setMinus classifier.sorted_splitters.* cup classifier.tree.tree.* cup arrayRange(values_0, begin + bucket_begin, -1 + begin + bucket_end) = {} FALSE"
          (builtin "One Step Simplification" (formula "28"))
         (rule "false_right" (formula "28"))
         (rule "arrayLengthNotNegative" (formula "18") (term "0"))
         (rule "arrayLengthIsAShort" (formula "19") (term "0"))
          (builtin "One Step Simplification" (formula "19"))
         (rule "true_left" (formula "19"))
         (rule "arrayLengthIsAShort" (formula "16") (term "0"))
          (builtin "One Step Simplification" (formula "16"))
         (rule "true_left" (formula "16"))
         (rule "arrayLengthNotNegative" (formula "16") (term "0"))
         (rule "inEqSimp_subsumption1" (formula "16") (ifseqformula "17"))
         (rule "leq_literals" (formula "16") (term "0"))
          (builtin "One Step Simplification" (formula "16"))
         (rule "true_left" (formula "16"))
         (rule "Definition_axiom_for_isClassOfSlice_in_de_wiesler_Classifier" (formula "31") (term "0,0,1") (inst "i=i"))
          (builtin "One Step Simplification" (formula "31"))
         (rule "inEqSimp_ltToLeq" (formula "31") (term "1,0,0,0,1"))
         (rule "polySimp_rightDist" (formula "31") (term "1,0,0,1,0,0,0,1"))
         (rule "polySimp_mulComm0" (formula "31") (term "0,1,0,0,1,0,0,0,1"))
         (rule "polySimp_addAssoc" (formula "31") (term "0,0,1,0,0,0,1"))
         (rule "inEqSimp_commuteLeq" (formula "31") (term "0,0,0,0,1"))
         (rule "inEqSimp_sepPosMonomial0" (formula "31") (term "1,0,0,0,1"))
         (rule "polySimp_mulComm0" (formula "31") (term "1,1,0,0,0,1"))
         (rule "polySimp_rightDist" (formula "31") (term "1,1,0,0,0,1"))
         (rule "polySimp_mulLiterals" (formula "31") (term "1,1,1,0,0,0,1"))
         (rule "polySimp_elimOne" (formula "31") (term "1,1,1,0,0,0,1"))
         (rule "polySimp_rightDist" (formula "31") (term "0,1,1,0,0,0,1"))
         (rule "mul_literals" (formula "31") (term "0,0,1,1,0,0,0,1"))
         (rule "polySimp_mulLiterals" (formula "31") (term "1,0,1,1,0,0,0,1"))
         (rule "polySimp_elimOne" (formula "31") (term "1,0,1,1,0,0,0,1"))
         (rule "nnf_imp2or" (formula "31") (term "0,0,1"))
         (rule "nnf_notAnd" (formula "31") (term "0,0,0,1"))
         (rule "inEqSimp_notGeq" (formula "31") (term "0,0,0,0,1"))
         (rule "polySimp_rightDist" (formula "31") (term "1,0,0,0,0,0,0,1"))
         (rule "polySimp_mulComm0" (formula "31") (term "0,1,0,0,0,0,0,0,1"))
         (rule "polySimp_addAssoc" (formula "31") (term "0,0,0,0,0,0,1"))
         (rule "inEqSimp_sepPosMonomial0" (formula "31") (term "0,0,0,0,1"))
         (rule "polySimp_mulComm0" (formula "31") (term "1,0,0,0,0,1"))
         (rule "polySimp_rightDist" (formula "31") (term "1,0,0,0,0,1"))
         (rule "polySimp_mulLiterals" (formula "31") (term "1,1,0,0,0,0,1"))
         (rule "polySimp_elimOne" (formula "31") (term "1,1,0,0,0,0,1"))
         (rule "polySimp_rightDist" (formula "31") (term "0,1,0,0,0,0,1"))
         (rule "mul_literals" (formula "31") (term "0,0,1,0,0,0,0,1"))
         (rule "polySimp_mulLiterals" (formula "31") (term "1,0,1,0,0,0,0,1"))
         (rule "polySimp_elimOne" (formula "31") (term "1,0,1,0,0,0,0,1"))
         (rule "inEqSimp_notLeq" (formula "31") (term "1,0,0,0,1"))
         (rule "polySimp_rightDist" (formula "31") (term "1,0,0,1,0,0,0,1"))
         (rule "polySimp_rightDist" (formula "31") (term "0,1,0,0,1,0,0,0,1"))
         (rule "mul_literals" (formula "31") (term "0,0,1,0,0,1,0,0,0,1"))
         (rule "polySimp_addAssoc" (formula "31") (term "0,0,1,0,0,0,1"))
         (rule "polySimp_addAssoc" (formula "31") (term "0,0,0,1,0,0,0,1"))
         (rule "add_literals" (formula "31") (term "0,0,0,0,1,0,0,0,1"))
         (rule "add_zero_left" (formula "31") (term "0,0,0,1,0,0,0,1"))
         (rule "inEqSimp_sepPosMonomial1" (formula "31") (term "1,0,0,0,1"))
         (rule "polySimp_mulComm0" (formula "31") (term "1,1,0,0,0,1"))
         (rule "polySimp_rightDist" (formula "31") (term "1,1,0,0,0,1"))
         (rule "polySimp_mulLiterals" (formula "31") (term "1,1,1,0,0,0,1"))
         (rule "polySimp_elimOne" (formula "31") (term "1,1,1,0,0,0,1"))
         (rule "polySimp_mulAssoc" (formula "31") (term "0,1,1,0,0,0,1"))
         (rule "polySimp_mulComm0" (formula "31") (term "0,0,1,1,0,0,0,1"))
         (rule "polySimp_mulLiterals" (formula "31") (term "0,1,1,0,0,0,1"))
         (rule "polySimp_elimOne" (formula "31") (term "0,1,1,0,0,0,1"))
         (rule "cut_direct" (formula "24") (term "0"))
         (branch "CUT: arrayRange(values_0, begin + bucket_begin, -1 + begin + bucket_end) cap allLocs setMinus classifier.sorted_splitters.* cup classifier.tree.tree.* cup arrayRange(values_0, begin + bucket_begin, -1 + begin + bucket_end) = {} TRUE"
             (builtin "One Step Simplification" (formula "25"))
            (rule "Definition_axiom_for_classOf_in_de_wiesler_Classifier" (formula "32") (term "0,1,0,0,0"))
            (rule "Definition_axiom_for_classOf_in_de_wiesler_Classifier" (formula "32") (term "0,1,0,0,1"))
            (rule "commute_or" (formula "11") (term "0,0,1,0"))
            (rule "commute_or" (formula "21") (term "0,0,1,0"))
            (rule "cnf_rightDist" (formula "22") (term "0"))
            (rule "distr_forallAnd" (formula "22"))
            (rule "andLeft" (formula "22"))
            (rule "commute_or" (formula "23") (term "0"))
            (rule "equiv_left" (formula "26"))
            (branch "Case 1"
               (rule "replace_known_left" (formula "34") (term "1,1,0") (ifseqformula "26"))
                (builtin "One Step Simplification" (formula "34") (ifInst ""  (formula "27")))
               (rule "equalityToElementOfRight" (formula "31") (inst "ov=ov") (inst "fv=fv"))
                (builtin "One Step Simplification" (formula "31"))
               (rule "allRight" (formula "31") (inst "sk=ov_0"))
               (rule "allRight" (formula "31") (inst "sk=fv_0"))
               (rule "notRight" (formula "31"))
               (rule "elementOfIntersect" (formula "1"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "andLeft" (formula "1"))
               (rule "applyEq" (formula "2") (term "0") (ifseqformula "1"))
               (rule "elementOfSetMinus" (formula "2"))
                (builtin "One Step Simplification" (formula "2"))
               (rule "notLeft" (formula "2"))
               (rule "elementOfUnion" (formula "29"))
               (rule "orRight" (formula "29"))
               (rule "elementOfArrayRange" (formula "30") (inst "iv=iv"))
               (rule "eqSymm" (formula "30") (term "0,0,0,1"))
               (rule "inEqSimp_commuteLeq" (formula "30") (term "1,0,0,1"))
               (rule "elementOfUnion" (formula "29"))
                (builtin "One Step Simplification" (formula "29"))
               (rule "closeTrue" (formula "29"))
            )
            (branch "Case 2"
               (rule "allRight" (formula "27") (inst "sk=i_0"))
               (rule "orRight" (formula "27"))
               (rule "orRight" (formula "27"))
               (rule "allRight" (formula "26") (inst "sk=i_1"))
               (rule "orRight" (formula "26"))
               (rule "orRight" (formula "26"))
               (rule "inEqSimp_geqRight" (formula "31"))
               (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
               (rule "inEqSimp_geqRight" (formula "31"))
               (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
               (rule "polySimp_rightDist" (formula "1") (term "0,1,0,0"))
               (rule "mul_literals" (formula "1") (term "0,0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
               (rule "polySimp_addAssoc" (formula "1") (term "0,0,0"))
               (rule "add_literals" (formula "1") (term "0,0,0,0"))
               (rule "inEqSimp_leqRight" (formula "31"))
               (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
               (rule "polySimp_rightDist" (formula "1") (term "0,1,0,0"))
               (rule "mul_literals" (formula "1") (term "0,0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
               (rule "polySimp_addAssoc" (formula "1") (term "0,0,0"))
               (rule "add_literals" (formula "1") (term "0,0,0,0"))
               (rule "add_zero_left" (formula "1") (term "0,0,0"))
               (rule "inEqSimp_geqRight" (formula "31"))
               (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
               (rule "inEqSimp_geqRight" (formula "31"))
               (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
               (rule "polySimp_rightDist" (formula "1") (term "0,1,0,0"))
               (rule "mul_literals" (formula "1") (term "0,0,1,0,0"))
               (rule "inEqSimp_leqRight" (formula "31"))
               (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
               (rule "polySimp_rightDist" (formula "1") (term "0,1,0,0"))
               (rule "mul_literals" (formula "1") (term "0,0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "2") (term "0,0"))
               (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
               (rule "polySimp_addAssoc" (formula "2") (term "0,0,0"))
               (rule "add_literals" (formula "2") (term "0,0,0,0"))
               (rule "polySimp_addAssoc" (formula "1") (term "0,0,0"))
               (rule "add_literals" (formula "1") (term "0,0,0,0"))
               (rule "add_zero_left" (formula "1") (term "0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "6"))
               (rule "polySimp_mulComm0" (formula "6") (term "1"))
               (rule "polySimp_rightDist" (formula "6") (term "1"))
               (rule "polySimp_mulLiterals" (formula "6") (term "1,1"))
               (rule "mul_literals" (formula "6") (term "0,1"))
               (rule "polySimp_elimOne" (formula "6") (term "1,1"))
               (rule "inEqSimp_sepPosMonomial0" (formula "5"))
               (rule "polySimp_mulComm0" (formula "5") (term "1"))
               (rule "polySimp_rightDist" (formula "5") (term "1"))
               (rule "polySimp_mulLiterals" (formula "5") (term "1,1"))
               (rule "polySimp_elimOne" (formula "5") (term "1,1"))
               (rule "polySimp_rightDist" (formula "5") (term "0,1"))
               (rule "mul_literals" (formula "5") (term "0,0,1"))
               (rule "polySimp_mulLiterals" (formula "5") (term "1,0,1"))
               (rule "polySimp_elimOne" (formula "5") (term "1,0,1"))
               (rule "inEqSimp_sepPosMonomial1" (formula "4"))
               (rule "polySimp_mulComm0" (formula "4") (term "1"))
               (rule "polySimp_rightDist" (formula "4") (term "1"))
               (rule "polySimp_mulLiterals" (formula "4") (term "1,1"))
               (rule "polySimp_elimOne" (formula "4") (term "1,1"))
               (rule "polySimp_mulAssoc" (formula "4") (term "0,1"))
               (rule "polySimp_mulComm0" (formula "4") (term "0,0,1"))
               (rule "polySimp_mulLiterals" (formula "4") (term "0,1"))
               (rule "polySimp_elimOne" (formula "4") (term "0,1"))
               (rule "inEqSimp_sepPosMonomial0" (formula "3"))
               (rule "polySimp_mulComm0" (formula "3") (term "1"))
               (rule "polySimp_rightDist" (formula "3") (term "1"))
               (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
               (rule "mul_literals" (formula "3") (term "0,1"))
               (rule "polySimp_elimOne" (formula "3") (term "1,1"))
               (rule "inEqSimp_sepPosMonomial0" (formula "2"))
               (rule "polySimp_mulComm0" (formula "2") (term "1"))
               (rule "polySimp_rightDist" (formula "2") (term "1"))
               (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
               (rule "polySimp_elimOne" (formula "2") (term "1,1"))
               (rule "polySimp_rightDist" (formula "2") (term "0,1"))
               (rule "mul_literals" (formula "2") (term "0,0,1"))
               (rule "polySimp_mulLiterals" (formula "2") (term "1,0,1"))
               (rule "polySimp_elimOne" (formula "2") (term "1,0,1"))
               (rule "inEqSimp_sepPosMonomial1" (formula "1"))
               (rule "polySimp_mulComm0" (formula "1") (term "1"))
               (rule "polySimp_rightDist" (formula "1") (term "1"))
               (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
               (rule "polySimp_elimOne" (formula "1") (term "1,1"))
               (rule "polySimp_mulAssoc" (formula "1") (term "0,1"))
               (rule "polySimp_mulComm0" (formula "1") (term "0,0,1"))
               (rule "polySimp_mulLiterals" (formula "1") (term "0,1"))
               (rule "polySimp_elimOne" (formula "1") (term "0,1"))
               (rule "pullOutSelect" (formula "6") (term "0") (inst "selectSK=arr_0"))
               (rule "simplifySelectOfAnon" (formula "6"))
                (builtin "One Step Simplification" (formula "6") (ifInst ""  (formula "37")) (ifInst ""  (formula "10")))
               (rule "inEqSimp_homoInEq0" (formula "7"))
               (rule "polySimp_addComm1" (formula "7") (term "0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "7"))
               (rule "polySimp_mulComm0" (formula "7") (term "1"))
               (rule "polySimp_rightDist" (formula "7") (term "1"))
               (rule "polySimp_mulLiterals" (formula "7") (term "1,1"))
               (rule "mul_literals" (formula "7") (term "0,1"))
               (rule "polySimp_elimOne" (formula "7") (term "1,1"))
               (rule "elementOfSetMinus" (formula "6") (term "0,0"))
                (builtin "One Step Simplification" (formula "6"))
               (rule "ifthenelse_negated" (formula "6") (term "0"))
               (rule "elementOfUnion" (formula "6") (term "0,0"))
               (rule "elementOfArrayRangeConcrete" (formula "6") (term "1,0,0"))
                (builtin "One Step Simplification" (formula "6"))
               (rule "inEqSimp_homoInEq0" (formula "6") (term "0,1,0,0"))
               (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,1,0,0"))
               (rule "polySimp_rightDist" (formula "6") (term "1,0,0,1,0,0"))
               (rule "polySimp_mulComm0" (formula "6") (term "0,1,0,0,1,0,0"))
               (rule "polySimp_addComm1" (formula "6") (term "0,0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "6") (term "0,0,0,1,0,0"))
               (rule "inEqSimp_homoInEq0" (formula "6") (term "1,1,0,0"))
               (rule "polySimp_mulComm0" (formula "6") (term "1,0,1,1,0,0"))
               (rule "polySimp_rightDist" (formula "6") (term "1,0,1,1,0,0"))
               (rule "mul_literals" (formula "6") (term "0,1,0,1,1,0,0"))
               (rule "polySimp_addAssoc" (formula "6") (term "0,1,1,0,0"))
               (rule "polySimp_addComm1" (formula "6") (term "0,0,1,1,0,0"))
               (rule "polySimp_addComm1" (formula "6") (term "0,0,0,1,1,0,0"))
               (rule "add_literals" (formula "6") (term "0,0,0,0,1,1,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "6") (term "0,1,0,0"))
               (rule "polySimp_mulComm0" (formula "6") (term "1,0,1,0,0"))
               (rule "polySimp_rightDist" (formula "6") (term "1,0,1,0,0"))
               (rule "polySimp_mulLiterals" (formula "6") (term "1,1,0,1,0,0"))
               (rule "polySimp_elimOne" (formula "6") (term "1,1,0,1,0,0"))
               (rule "polySimp_rightDist" (formula "6") (term "0,1,0,1,0,0"))
               (rule "polySimp_mulLiterals" (formula "6") (term "1,0,1,0,1,0,0"))
               (rule "mul_literals" (formula "6") (term "0,0,1,0,1,0,0"))
               (rule "polySimp_elimOne" (formula "6") (term "1,0,1,0,1,0,0"))
               (rule "inEqSimp_sepNegMonomial1" (formula "6") (term "1,1,0,0"))
               (rule "polySimp_mulLiterals" (formula "6") (term "0,1,1,0,0"))
               (rule "polySimp_elimOne" (formula "6") (term "0,1,1,0,0"))
               (rule "replace_known_left" (formula "6") (term "1,1,0,0") (ifseqformula "5"))
                (builtin "One Step Simplification" (formula "6"))
               (rule "inEqSimp_subsumption1" (formula "6") (term "1,0,0") (ifseqformula "4"))
               (rule "inEqSimp_homoInEq0" (formula "6") (term "0,1,0,0"))
               (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,1,0,0"))
               (rule "polySimp_rightDist" (formula "6") (term "1,0,0,1,0,0"))
               (rule "polySimp_rightDist" (formula "6") (term "0,1,0,0,1,0,0"))
               (rule "mul_literals" (formula "6") (term "0,0,1,0,0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "6") (term "0,0,1,0,0"))
               (rule "polySimp_addComm1" (formula "6") (term "0,0,0,1,0,0"))
               (rule "polySimp_pullOutFactor1b" (formula "6") (term "0,0,1,0,0"))
               (rule "add_literals" (formula "6") (term "1,1,0,0,1,0,0"))
               (rule "times_zero_1" (formula "6") (term "1,0,0,1,0,0"))
               (rule "add_zero_right" (formula "6") (term "0,0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "6") (term "0,0,1,0,0"))
               (rule "polySimp_addComm0" (formula "6") (term "0,0,0,1,0,0"))
               (rule "polySimp_pullOutFactor1b" (formula "6") (term "0,0,1,0,0"))
               (rule "add_literals" (formula "6") (term "1,1,0,0,1,0,0"))
               (rule "times_zero_1" (formula "6") (term "1,0,0,1,0,0"))
               (rule "add_zero_right" (formula "6") (term "0,0,1,0,0"))
               (rule "qeq_literals" (formula "6") (term "0,1,0,0"))
                (builtin "One Step Simplification" (formula "6"))
               (rule "applyEqReverse" (formula "7") (term "1,1") (ifseqformula "6"))
               (rule "hideAuxiliaryEq" (formula "6"))
               (rule "pullOutSelect" (formula "6") (term "0") (inst "selectSK=arr_1"))
               (rule "simplifySelectOfAnon" (formula "6"))
                (builtin "One Step Simplification" (formula "6") (ifInst ""  (formula "37")) (ifInst ""  (formula "10")))
               (rule "inEqSimp_homoInEq1" (formula "7"))
               (rule "polySimp_addComm1" (formula "7") (term "0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "7"))
               (rule "polySimp_mulComm0" (formula "7") (term "1"))
               (rule "polySimp_rightDist" (formula "7") (term "1"))
               (rule "polySimp_mulLiterals" (formula "7") (term "1,1"))
               (rule "mul_literals" (formula "7") (term "0,1"))
               (rule "polySimp_elimOne" (formula "7") (term "1,1"))
               (rule "elementOfSetMinus" (formula "6") (term "0,0"))
                (builtin "One Step Simplification" (formula "6"))
               (rule "ifthenelse_negated" (formula "6") (term "0"))
               (rule "elementOfUnion" (formula "6") (term "0,0"))
               (rule "elementOfArrayRangeConcrete" (formula "6") (term "1,0,0"))
                (builtin "One Step Simplification" (formula "6"))
               (rule "inEqSimp_commuteLeq" (formula "6") (term "0,1,0,0"))
               (rule "replace_known_left" (formula "6") (term "0,1,0,0") (ifseqformula "4"))
                (builtin "One Step Simplification" (formula "6"))
               (rule "inEqSimp_subsumption0" (formula "6") (term "1,0,0") (ifseqformula "5"))
               (rule "inEqSimp_homoInEq0" (formula "6") (term "0,1,0,0"))
               (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,1,0,0"))
               (rule "polySimp_rightDist" (formula "6") (term "1,0,0,1,0,0"))
               (rule "polySimp_rightDist" (formula "6") (term "0,1,0,0,1,0,0"))
               (rule "mul_literals" (formula "6") (term "0,0,1,0,0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "6") (term "0,0,1,0,0"))
               (rule "polySimp_addComm1" (formula "6") (term "0,0,0,1,0,0"))
               (rule "polySimp_pullOutFactor1b" (formula "6") (term "0,0,1,0,0"))
               (rule "add_literals" (formula "6") (term "1,1,0,0,1,0,0"))
               (rule "times_zero_1" (formula "6") (term "1,0,0,1,0,0"))
               (rule "add_zero_right" (formula "6") (term "0,0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "6") (term "0,0,1,0,0"))
               (rule "polySimp_addComm1" (formula "6") (term "0,0,0,1,0,0"))
               (rule "add_literals" (formula "6") (term "0,0,0,0,1,0,0"))
               (rule "polySimp_pullOutFactor1b" (formula "6") (term "0,0,1,0,0"))
               (rule "add_literals" (formula "6") (term "1,1,0,0,1,0,0"))
               (rule "times_zero_1" (formula "6") (term "1,0,0,1,0,0"))
               (rule "add_zero_right" (formula "6") (term "0,0,1,0,0"))
               (rule "qeq_literals" (formula "6") (term "0,1,0,0"))
                (builtin "One Step Simplification" (formula "6"))
               (rule "applyEqReverse" (formula "7") (term "1,1") (ifseqformula "6"))
               (rule "hideAuxiliaryEq" (formula "6"))
               (rule "inEqSimp_exactShadow3" (formula "4") (ifseqformula "5"))
               (rule "polySimp_rightDist" (formula "4") (term "0,0"))
               (rule "polySimp_mulComm0" (formula "4") (term "0,0,0"))
               (rule "polySimp_addAssoc" (formula "4") (term "0"))
               (rule "polySimp_addComm1" (formula "4") (term "0,0"))
               (rule "polySimp_addAssoc" (formula "4") (term "0,0,0"))
               (rule "polySimp_addComm0" (formula "4") (term "0,0,0,0"))
               (rule "polySimp_pullOutFactor2b" (formula "4") (term "0,0,0"))
               (rule "add_literals" (formula "4") (term "1,1,0,0,0"))
               (rule "times_zero_1" (formula "4") (term "1,0,0,0"))
               (rule "add_literals" (formula "4") (term "0,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "4"))
               (rule "polySimp_mulComm0" (formula "4") (term "1"))
               (rule "polySimp_rightDist" (formula "4") (term "1"))
               (rule "mul_literals" (formula "4") (term "0,1"))
               (rule "polySimp_mulLiterals" (formula "4") (term "1,1"))
               (rule "polySimp_elimOne" (formula "4") (term "1,1"))
               (rule "inEqSimp_exactShadow3" (formula "1") (ifseqformula "2"))
               (rule "polySimp_rightDist" (formula "1") (term "0,0"))
               (rule "polySimp_mulComm0" (formula "1") (term "0,0,0"))
               (rule "polySimp_addAssoc" (formula "1") (term "0"))
               (rule "polySimp_addComm1" (formula "1") (term "0,0"))
               (rule "polySimp_addAssoc" (formula "1") (term "0,0,0"))
               (rule "polySimp_addComm0" (formula "1") (term "0,0,0,0"))
               (rule "polySimp_pullOutFactor2b" (formula "1") (term "0,0,0"))
               (rule "add_literals" (formula "1") (term "1,1,0,0,0"))
               (rule "times_zero_1" (formula "1") (term "1,0,0,0"))
               (rule "add_literals" (formula "1") (term "0,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "1"))
               (rule "polySimp_mulComm0" (formula "1") (term "1"))
               (rule "polySimp_rightDist" (formula "1") (term "1"))
               (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
               (rule "mul_literals" (formula "1") (term "0,1"))
               (rule "polySimp_elimOne" (formula "1") (term "1,1"))
               (rule "equalityToElementOfRight" (formula "36") (inst "ov=ov") (inst "fv=fv"))
                (builtin "One Step Simplification" (formula "36"))
               (rule "allRight" (formula "36") (inst "sk=ov_0"))
               (rule "allRight" (formula "36") (inst "sk=fv_0"))
               (rule "notRight" (formula "36"))
               (rule "elementOfIntersect" (formula "1"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "andLeft" (formula "1"))
               (rule "applyEq" (formula "2") (term "0") (ifseqformula "1"))
               (rule "elementOfSetMinus" (formula "2"))
                (builtin "One Step Simplification" (formula "2"))
               (rule "notLeft" (formula "2"))
               (rule "elementOfUnion" (formula "34"))
               (rule "orRight" (formula "34"))
               (rule "elementOfArrayRange" (formula "35") (inst "iv=iv"))
               (rule "eqSymm" (formula "35") (term "0,0,0,1"))
               (rule "inEqSimp_commuteLeq" (formula "35") (term "1,0,0,1"))
               (rule "elementOfUnion" (formula "34"))
                (builtin "One Step Simplification" (formula "34"))
               (rule "closeTrue" (formula "34"))
            )
         )
         (branch "CUT: arrayRange(values_0, begin + bucket_begin, -1 + begin + bucket_end) cap allLocs setMinus classifier.sorted_splitters.* cup classifier.tree.tree.* cup arrayRange(values_0, begin + bucket_begin, -1 + begin + bucket_end) = {} FALSE"
             (builtin "One Step Simplification" (formula "24"))
            (rule "true_left" (formula "24"))
            (rule "Definition_axiom_for_classOf_in_de_wiesler_Classifier" (formula "31") (term "0,1,0,0,0"))
            (rule "Definition_axiom_for_classOf_in_de_wiesler_Classifier" (formula "31") (term "0,1,0,0,1"))
            (rule "commute_or" (formula "11") (term "0,0,1,0"))
            (rule "commute_or" (formula "21") (term "0,0,1,0"))
            (rule "cnf_rightDist" (formula "22") (term "0"))
            (rule "distr_forallAnd" (formula "22"))
            (rule "andLeft" (formula "22"))
            (rule "commute_or" (formula "23") (term "0"))
            (rule "equalityToElementOfRight" (formula "29") (inst "ov=ov") (inst "fv=fv"))
             (builtin "One Step Simplification" (formula "29"))
            (rule "allRight" (formula "29") (inst "sk=ov_0"))
            (rule "allRight" (formula "29") (inst "sk=fv_0"))
            (rule "notRight" (formula "29"))
            (rule "elementOfIntersect" (formula "1"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "andLeft" (formula "1"))
            (rule "applyEq" (formula "2") (term "0") (ifseqformula "1"))
            (rule "elementOfSetMinus" (formula "2"))
             (builtin "One Step Simplification" (formula "2"))
            (rule "notLeft" (formula "2"))
            (rule "elementOfUnion" (formula "26"))
            (rule "orRight" (formula "26"))
            (rule "elementOfUnion" (formula "26"))
             (builtin "One Step Simplification" (formula "26"))
            (rule "closeTrue" (formula "26"))
         )
      )
   )
   (branch "classifier.equal_buckets = TRUE FALSE"
      (rule "applyEq" (formula "11") (term "1,0,2,0") (ifseqformula "8"))
      (rule "eqSymm" (formula "11"))
      (rule "applyEq" (formula "16") (term "0") (ifseqformula "8"))
      (rule "applyEq" (formula "18") (term "1,1,1,0,0") (ifseqformula "8"))
      (rule "applyEq" (formula "16") (term "1") (ifseqformula "8"))
      (rule "applyEq" (formula "10") (term "1,1,0,0,1,0") (ifseqformula "8"))
      (rule "applyEq" (formula "10") (term "1,1,0,0") (ifseqformula "8"))
      (rule "applyEq" (formula "20") (term "1,1,0,0") (ifseqformula "8"))
      (rule "applyEq" (formula "17") (term "0") (ifseqformula "8"))
      (rule "inEqSimp_commuteLeq" (formula "17"))
      (rule "applyEq" (formula "19") (term "1,1,0,0") (ifseqformula "8"))
      (rule "applyEq" (formula "18") (term "1,1,1,0,0,1,0") (ifseqformula "8"))
      (rule "applyEq" (formula "11") (term "1,0,2,0") (ifseqformula "8"))
      (rule "eqSymm" (formula "11"))
      (rule "applyEq" (formula "14") (term "1") (ifseqformula "8"))
      (rule "applyEq" (formula "19") (term "0,1,0,0,1,1,1,0") (ifseqformula "8"))
      (rule "cut_direct" (formula "26") (term "0,0"))
      (branch "CUT: classifier.sorted_splitters.* cap allLocs setMinus classifier.sorted_splitters.* cup classifier.tree.tree.* cup arrayRange(values_0, begin + bucket_begin, -1 + begin + bucket_end) = {} TRUE"
          (builtin "One Step Simplification" (formula "27"))
         (rule "arrayLengthIsAShort" (formula "17") (term "0"))
          (builtin "One Step Simplification" (formula "17"))
         (rule "true_left" (formula "17"))
         (rule "arrayLengthNotNegative" (formula "17") (term "0"))
         (rule "arrayLengthNotNegative" (formula "16") (term "0"))
         (rule "inEqSimp_subsumption1" (formula "16") (ifseqformula "17"))
         (rule "leq_literals" (formula "16") (term "0"))
          (builtin "One Step Simplification" (formula "16"))
         (rule "true_left" (formula "16"))
         (rule "arrayLengthIsAShort" (formula "16") (term "0"))
          (builtin "One Step Simplification" (formula "16"))
         (rule "true_left" (formula "16"))
         (rule "Definition_axiom_for_isClassOfSlice_in_de_wiesler_Classifier" (formula "31") (term "0,0,1") (inst "i=i"))
          (builtin "One Step Simplification" (formula "31"))
         (rule "inEqSimp_ltToLeq" (formula "31") (term "1,0,0,0,1"))
         (rule "polySimp_rightDist" (formula "31") (term "1,0,0,1,0,0,0,1"))
         (rule "polySimp_mulComm0" (formula "31") (term "0,1,0,0,1,0,0,0,1"))
         (rule "polySimp_addAssoc" (formula "31") (term "0,0,1,0,0,0,1"))
         (rule "inEqSimp_commuteLeq" (formula "31") (term "0,0,0,0,1"))
         (rule "inEqSimp_sepPosMonomial0" (formula "31") (term "1,0,0,0,1"))
         (rule "polySimp_mulComm0" (formula "31") (term "1,1,0,0,0,1"))
         (rule "polySimp_rightDist" (formula "31") (term "1,1,0,0,0,1"))
         (rule "polySimp_mulLiterals" (formula "31") (term "1,1,1,0,0,0,1"))
         (rule "polySimp_elimOne" (formula "31") (term "1,1,1,0,0,0,1"))
         (rule "polySimp_rightDist" (formula "31") (term "0,1,1,0,0,0,1"))
         (rule "polySimp_mulLiterals" (formula "31") (term "1,0,1,1,0,0,0,1"))
         (rule "mul_literals" (formula "31") (term "0,0,1,1,0,0,0,1"))
         (rule "polySimp_elimOne" (formula "31") (term "1,0,1,1,0,0,0,1"))
         (rule "nnf_imp2or" (formula "31") (term "0,0,1"))
         (rule "nnf_notAnd" (formula "31") (term "0,0,0,1"))
         (rule "inEqSimp_notGeq" (formula "31") (term "0,0,0,0,1"))
         (rule "polySimp_rightDist" (formula "31") (term "1,0,0,0,0,0,0,1"))
         (rule "polySimp_mulComm0" (formula "31") (term "0,1,0,0,0,0,0,0,1"))
         (rule "polySimp_addAssoc" (formula "31") (term "0,0,0,0,0,0,1"))
         (rule "inEqSimp_sepPosMonomial0" (formula "31") (term "0,0,0,0,1"))
         (rule "polySimp_mulComm0" (formula "31") (term "1,0,0,0,0,1"))
         (rule "polySimp_rightDist" (formula "31") (term "1,0,0,0,0,1"))
         (rule "polySimp_mulLiterals" (formula "31") (term "1,1,0,0,0,0,1"))
         (rule "polySimp_elimOne" (formula "31") (term "1,1,0,0,0,0,1"))
         (rule "polySimp_rightDist" (formula "31") (term "0,1,0,0,0,0,1"))
         (rule "polySimp_mulLiterals" (formula "31") (term "1,0,1,0,0,0,0,1"))
         (rule "mul_literals" (formula "31") (term "0,0,1,0,0,0,0,1"))
         (rule "polySimp_elimOne" (formula "31") (term "1,0,1,0,0,0,0,1"))
         (rule "inEqSimp_notLeq" (formula "31") (term "1,0,0,0,1"))
         (rule "polySimp_rightDist" (formula "31") (term "1,0,0,1,0,0,0,1"))
         (rule "polySimp_rightDist" (formula "31") (term "0,1,0,0,1,0,0,0,1"))
         (rule "mul_literals" (formula "31") (term "0,0,1,0,0,1,0,0,0,1"))
         (rule "polySimp_addAssoc" (formula "31") (term "0,0,1,0,0,0,1"))
         (rule "polySimp_addAssoc" (formula "31") (term "0,0,0,1,0,0,0,1"))
         (rule "add_literals" (formula "31") (term "0,0,0,0,1,0,0,0,1"))
         (rule "add_zero_left" (formula "31") (term "0,0,0,1,0,0,0,1"))
         (rule "inEqSimp_sepPosMonomial1" (formula "31") (term "1,0,0,0,1"))
         (rule "polySimp_mulComm0" (formula "31") (term "1,1,0,0,0,1"))
         (rule "polySimp_rightDist" (formula "31") (term "1,1,0,0,0,1"))
         (rule "polySimp_mulLiterals" (formula "31") (term "1,1,1,0,0,0,1"))
         (rule "polySimp_elimOne" (formula "31") (term "1,1,1,0,0,0,1"))
         (rule "polySimp_mulAssoc" (formula "31") (term "0,1,1,0,0,0,1"))
         (rule "polySimp_mulComm0" (formula "31") (term "0,0,1,1,0,0,0,1"))
         (rule "polySimp_mulLiterals" (formula "31") (term "0,1,1,0,0,0,1"))
         (rule "polySimp_elimOne" (formula "31") (term "0,1,1,0,0,0,1"))
         (rule "cut_direct" (formula "23") (term "0"))
         (branch "CUT: arrayRange(values_0, begin + bucket_begin, -1 + begin + bucket_end) cap allLocs setMinus classifier.sorted_splitters.* cup classifier.tree.tree.* cup arrayRange(values_0, begin + bucket_begin, -1 + begin + bucket_end) = {} TRUE"
             (builtin "One Step Simplification" (formula "24"))
            (rule "replace_known_left" (formula "29") (term "1") (ifseqformula "23"))
             (builtin "One Step Simplification" (formula "29"))
            (rule "Definition_axiom_for_classOf_in_de_wiesler_Classifier" (formula "32") (term "0,1,0,0,0"))
            (rule "Definition_axiom_for_classOf_in_de_wiesler_Classifier" (formula "32") (term "0,1,0,0,1"))
            (rule "cnf_rightDist" (formula "21") (term "0"))
            (rule "distr_forallAnd" (formula "21"))
            (rule "andLeft" (formula "21"))
            (rule "commute_or" (formula "11") (term "0,0,1,0"))
            (rule "commute_or" (formula "20") (term "0,0,1,0"))
            (rule "commute_or" (formula "22") (term "0"))
            (rule "equiv_left" (formula "25"))
            (branch "Case 1"
               (rule "replace_known_left" (formula "34") (term "1,1,1") (ifseqformula "26"))
                (builtin "One Step Simplification" (formula "34") (ifInst ""  (formula "25")))
               (rule "equiv_right" (formula "34"))
               (branch "Case '->'"
                  (rule "allRight" (formula "35") (inst "sk=i_0"))
                  (rule "orRight" (formula "35"))
                  (rule "orRight" (formula "35"))
                  (rule "inEqSimp_geqRight" (formula "36"))
                  (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "1") (term "0,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                  (rule "inEqSimp_leqRight" (formula "36"))
                  (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                  (rule "polySimp_rightDist" (formula "1") (term "0,1,0,0"))
                  (rule "mul_literals" (formula "1") (term "0,0,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                  (rule "polySimp_addAssoc" (formula "1") (term "0,0,0"))
                  (rule "add_literals" (formula "1") (term "0,0,0,0"))
                  (rule "add_zero_left" (formula "1") (term "0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "2"))
                  (rule "polySimp_mulComm0" (formula "2") (term "1"))
                  (rule "polySimp_rightDist" (formula "2") (term "1"))
                  (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
                  (rule "polySimp_elimOne" (formula "2") (term "1,1"))
                  (rule "polySimp_rightDist" (formula "2") (term "0,1"))
                  (rule "polySimp_mulLiterals" (formula "2") (term "1,0,1"))
                  (rule "mul_literals" (formula "2") (term "0,0,1"))
                  (rule "polySimp_elimOne" (formula "2") (term "1,0,1"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                  (rule "polySimp_mulComm0" (formula "1") (term "1"))
                  (rule "polySimp_rightDist" (formula "1") (term "1"))
                  (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                  (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                  (rule "polySimp_mulAssoc" (formula "1") (term "0,1"))
                  (rule "polySimp_mulComm0" (formula "1") (term "0,0,1"))
                  (rule "polySimp_mulLiterals" (formula "1") (term "0,1"))
                  (rule "polySimp_elimOne" (formula "1") (term "0,1"))
                  (rule "pullOutSelect" (formula "37") (term "2,0") (inst "selectSK=arr_0"))
                  (rule "simplifySelectOfAnon" (formula "1"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "36")) (ifInst ""  (formula "8")))
                  (rule "elementOfSetMinus" (formula "1") (term "0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "ifthenelse_negated" (formula "1") (term "0"))
                  (rule "elementOfUnion" (formula "1") (term "0,0"))
                  (rule "elementOfArrayRangeConcrete" (formula "1") (term "1,0,0"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "3")))
                  (rule "inEqSimp_commuteLeq" (formula "1") (term "1,0,0"))
                  (rule "replace_known_left" (formula "1") (term "1,0,0") (ifseqformula "2"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "applyEqReverse" (formula "38") (term "2,0") (ifseqformula "1"))
                  (rule "hideAuxiliaryEq" (formula "1"))
                  (rule "inEqSimp_exactShadow3" (formula "1") (ifseqformula "2"))
                  (rule "polySimp_rightDist" (formula "1") (term "0,0"))
                  (rule "polySimp_mulComm0" (formula "1") (term "0,0,0"))
                  (rule "polySimp_addAssoc" (formula "1") (term "0"))
                  (rule "polySimp_addComm1" (formula "1") (term "0,0"))
                  (rule "polySimp_addAssoc" (formula "1") (term "0,0,0"))
                  (rule "polySimp_addComm0" (formula "1") (term "0,0,0,0"))
                  (rule "polySimp_pullOutFactor2b" (formula "1") (term "0,0,0"))
                  (rule "add_literals" (formula "1") (term "1,1,0,0,0"))
                  (rule "times_zero_1" (formula "1") (term "1,0,0,0"))
                  (rule "add_zero_right" (formula "1") (term "0,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                  (rule "polySimp_mulComm0" (formula "1") (term "1"))
                  (rule "polySimp_rightDist" (formula "1") (term "1"))
                  (rule "mul_literals" (formula "1") (term "0,1"))
                  (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                  (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                  (rule "equalityToElementOfRight" (formula "35") (inst "ov=ov") (inst "fv=fv"))
                   (builtin "One Step Simplification" (formula "35"))
                  (rule "allRight" (formula "35") (inst "sk=ov_0"))
                  (rule "allRight" (formula "35") (inst "sk=fv_0"))
                  (rule "notRight" (formula "35"))
                  (rule "elementOfIntersect" (formula "1"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "andLeft" (formula "1"))
                  (rule "applyEq" (formula "2") (term "0") (ifseqformula "1"))
                  (rule "elementOfSetMinus" (formula "2"))
                   (builtin "One Step Simplification" (formula "2"))
                  (rule "notLeft" (formula "2"))
                  (rule "elementOfUnion" (formula "32"))
                  (rule "orRight" (formula "32"))
                  (rule "elementOfArrayRange" (formula "33") (inst "iv=iv"))
                  (rule "eqSymm" (formula "33") (term "0,0,0,1"))
                  (rule "inEqSimp_commuteLeq" (formula "33") (term "1,0,0,1"))
                  (rule "elementOfUnion" (formula "32"))
                   (builtin "One Step Simplification" (formula "32"))
                  (rule "closeTrue" (formula "32"))
               )
               (branch "Case '<-'"
                  (rule "allRight" (formula "35") (inst "sk=i_0"))
                  (rule "orRight" (formula "35"))
                  (rule "orRight" (formula "35"))
                  (rule "inEqSimp_leqRight" (formula "35"))
                  (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                  (rule "polySimp_rightDist" (formula "1") (term "0,1,0,0"))
                  (rule "mul_literals" (formula "1") (term "0,0,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                  (rule "polySimp_addAssoc" (formula "1") (term "0,0,0"))
                  (rule "add_literals" (formula "1") (term "0,0,0,0"))
                  (rule "add_zero_left" (formula "1") (term "0,0,0"))
                  (rule "inEqSimp_geqRight" (formula "36"))
                  (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "1") (term "0,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                  (rule "polySimp_mulComm0" (formula "2") (term "1"))
                  (rule "polySimp_rightDist" (formula "2") (term "1"))
                  (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
                  (rule "polySimp_elimOne" (formula "2") (term "1,1"))
                  (rule "polySimp_mulAssoc" (formula "2") (term "0,1"))
                  (rule "polySimp_mulComm0" (formula "2") (term "0,0,1"))
                  (rule "polySimp_mulLiterals" (formula "2") (term "0,1"))
                  (rule "polySimp_elimOne" (formula "2") (term "0,1"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                  (rule "polySimp_mulComm0" (formula "1") (term "1"))
                  (rule "polySimp_rightDist" (formula "1") (term "1"))
                  (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                  (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                  (rule "polySimp_rightDist" (formula "1") (term "0,1"))
                  (rule "polySimp_mulLiterals" (formula "1") (term "1,0,1"))
                  (rule "mul_literals" (formula "1") (term "0,0,1"))
                  (rule "polySimp_elimOne" (formula "1") (term "1,0,1"))
                  (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "1"))
                  (rule "polySimp_rightDist" (formula "2") (term "0,0"))
                  (rule "polySimp_mulComm0" (formula "2") (term "0,0,0"))
                  (rule "polySimp_addAssoc" (formula "2") (term "0"))
                  (rule "polySimp_addComm1" (formula "2") (term "0,0"))
                  (rule "polySimp_addAssoc" (formula "2") (term "0,0,0"))
                  (rule "polySimp_addComm0" (formula "2") (term "0,0,0,0"))
                  (rule "polySimp_pullOutFactor2b" (formula "2") (term "0,0,0"))
                  (rule "add_literals" (formula "2") (term "1,1,0,0,0"))
                  (rule "times_zero_1" (formula "2") (term "1,0,0,0"))
                  (rule "add_zero_right" (formula "2") (term "0,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                  (rule "polySimp_mulComm0" (formula "2") (term "1"))
                  (rule "polySimp_rightDist" (formula "2") (term "1"))
                  (rule "mul_literals" (formula "2") (term "0,1"))
                  (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
                  (rule "polySimp_elimOne" (formula "2") (term "1,1"))
                  (rule "equalityToElementOfRight" (formula "35") (inst "ov=ov") (inst "fv=fv"))
                   (builtin "One Step Simplification" (formula "35"))
                  (rule "allRight" (formula "35") (inst "sk=ov_0"))
                  (rule "allRight" (formula "35") (inst "sk=fv_0"))
                  (rule "notRight" (formula "35"))
                  (rule "elementOfIntersect" (formula "1"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "andLeft" (formula "1"))
                  (rule "applyEq" (formula "2") (term "0") (ifseqformula "1"))
                  (rule "elementOfSetMinus" (formula "2"))
                   (builtin "One Step Simplification" (formula "2"))
                  (rule "notLeft" (formula "2"))
                  (rule "elementOfUnion" (formula "32"))
                  (rule "orRight" (formula "32"))
                  (rule "elementOfArrayRange" (formula "33") (inst "iv=iv"))
                  (rule "eqSymm" (formula "33") (term "0,0,0,1"))
                  (rule "inEqSimp_commuteLeq" (formula "33") (term "1,0,0,1"))
                  (rule "elementOfUnion" (formula "32"))
                   (builtin "One Step Simplification" (formula "32"))
                  (rule "closeTrue" (formula "32"))
               )
            )
            (branch "Case 2"
               (rule "allRight" (formula "26") (inst "sk=i_0"))
               (rule "orRight" (formula "26"))
               (rule "orRight" (formula "26"))
               (rule "allRight" (formula "25") (inst "sk=i_1"))
               (rule "orRight" (formula "25"))
               (rule "orRight" (formula "25"))
               (rule "inEqSimp_geqRight" (formula "30"))
               (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
               (rule "inEqSimp_leqRight" (formula "29"))
               (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
               (rule "polySimp_rightDist" (formula "1") (term "0,1,0,0"))
               (rule "mul_literals" (formula "1") (term "0,0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
               (rule "polySimp_addAssoc" (formula "1") (term "0,0,0"))
               (rule "add_literals" (formula "1") (term "0,0,0,0"))
               (rule "add_zero_left" (formula "1") (term "0,0,0"))
               (rule "inEqSimp_geqRight" (formula "30"))
               (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
               (rule "polySimp_rightDist" (formula "1") (term "0,1,0,0"))
               (rule "mul_literals" (formula "1") (term "0,0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
               (rule "polySimp_addAssoc" (formula "1") (term "0,0,0"))
               (rule "add_literals" (formula "1") (term "0,0,0,0"))
               (rule "inEqSimp_geqRight" (formula "30"))
               (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
               (rule "inEqSimp_geqRight" (formula "30"))
               (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
               (rule "polySimp_rightDist" (formula "1") (term "0,1,0,0"))
               (rule "mul_literals" (formula "1") (term "0,0,1,0,0"))
               (rule "inEqSimp_leqRight" (formula "30"))
               (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
               (rule "polySimp_rightDist" (formula "1") (term "0,1,0,0"))
               (rule "mul_literals" (formula "1") (term "0,0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "2") (term "0,0"))
               (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
               (rule "polySimp_addAssoc" (formula "2") (term "0,0,0"))
               (rule "add_literals" (formula "2") (term "0,0,0,0"))
               (rule "polySimp_addAssoc" (formula "1") (term "0,0,0"))
               (rule "add_literals" (formula "1") (term "0,0,0,0"))
               (rule "add_zero_left" (formula "1") (term "0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "6"))
               (rule "polySimp_mulComm0" (formula "6") (term "1"))
               (rule "polySimp_rightDist" (formula "6") (term "1"))
               (rule "polySimp_mulLiterals" (formula "6") (term "1,1"))
               (rule "mul_literals" (formula "6") (term "0,1"))
               (rule "polySimp_elimOne" (formula "6") (term "1,1"))
               (rule "inEqSimp_sepPosMonomial1" (formula "5"))
               (rule "polySimp_mulComm0" (formula "5") (term "1"))
               (rule "polySimp_rightDist" (formula "5") (term "1"))
               (rule "polySimp_mulLiterals" (formula "5") (term "1,1"))
               (rule "polySimp_elimOne" (formula "5") (term "1,1"))
               (rule "polySimp_mulAssoc" (formula "5") (term "0,1"))
               (rule "polySimp_mulComm0" (formula "5") (term "0,0,1"))
               (rule "polySimp_mulLiterals" (formula "5") (term "0,1"))
               (rule "polySimp_elimOne" (formula "5") (term "0,1"))
               (rule "inEqSimp_sepPosMonomial0" (formula "4"))
               (rule "polySimp_mulComm0" (formula "4") (term "1"))
               (rule "polySimp_rightDist" (formula "4") (term "1"))
               (rule "polySimp_mulLiterals" (formula "4") (term "1,1"))
               (rule "polySimp_elimOne" (formula "4") (term "1,1"))
               (rule "polySimp_rightDist" (formula "4") (term "0,1"))
               (rule "mul_literals" (formula "4") (term "0,0,1"))
               (rule "polySimp_mulLiterals" (formula "4") (term "1,0,1"))
               (rule "polySimp_elimOne" (formula "4") (term "1,0,1"))
               (rule "inEqSimp_sepPosMonomial0" (formula "3"))
               (rule "polySimp_mulComm0" (formula "3") (term "1"))
               (rule "polySimp_rightDist" (formula "3") (term "1"))
               (rule "mul_literals" (formula "3") (term "0,1"))
               (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
               (rule "polySimp_elimOne" (formula "3") (term "1,1"))
               (rule "inEqSimp_sepPosMonomial0" (formula "2"))
               (rule "polySimp_mulComm0" (formula "2") (term "1"))
               (rule "polySimp_rightDist" (formula "2") (term "1"))
               (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
               (rule "polySimp_elimOne" (formula "2") (term "1,1"))
               (rule "polySimp_rightDist" (formula "2") (term "0,1"))
               (rule "mul_literals" (formula "2") (term "0,0,1"))
               (rule "polySimp_mulLiterals" (formula "2") (term "1,0,1"))
               (rule "polySimp_elimOne" (formula "2") (term "1,0,1"))
               (rule "inEqSimp_sepPosMonomial1" (formula "1"))
               (rule "polySimp_mulComm0" (formula "1") (term "1"))
               (rule "polySimp_rightDist" (formula "1") (term "1"))
               (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
               (rule "polySimp_elimOne" (formula "1") (term "1,1"))
               (rule "polySimp_mulAssoc" (formula "1") (term "0,1"))
               (rule "polySimp_mulComm0" (formula "1") (term "0,0,1"))
               (rule "polySimp_mulLiterals" (formula "1") (term "0,1"))
               (rule "polySimp_elimOne" (formula "1") (term "0,1"))
               (rule "pullOutSelect" (formula "6") (term "0") (inst "selectSK=arr_0"))
               (rule "simplifySelectOfAnon" (formula "6"))
                (builtin "One Step Simplification" (formula "6") (ifInst ""  (formula "37")) (ifInst ""  (formula "11")))
               (rule "inEqSimp_homoInEq0" (formula "7"))
               (rule "polySimp_addComm1" (formula "7") (term "0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "7"))
               (rule "polySimp_mulComm0" (formula "7") (term "1"))
               (rule "polySimp_rightDist" (formula "7") (term "1"))
               (rule "mul_literals" (formula "7") (term "0,1"))
               (rule "polySimp_mulLiterals" (formula "7") (term "1,1"))
               (rule "polySimp_elimOne" (formula "7") (term "1,1"))
               (rule "elementOfSetMinus" (formula "6") (term "0,0"))
                (builtin "One Step Simplification" (formula "6"))
               (rule "ifthenelse_negated" (formula "6") (term "0"))
               (rule "elementOfUnion" (formula "6") (term "0,0"))
               (rule "elementOfArrayRangeConcrete" (formula "6") (term "1,0,0"))
                (builtin "One Step Simplification" (formula "6"))
               (rule "inEqSimp_homoInEq0" (formula "6") (term "0,1,0,0"))
               (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,1,0,0"))
               (rule "polySimp_rightDist" (formula "6") (term "1,0,0,1,0,0"))
               (rule "polySimp_mulComm0" (formula "6") (term "0,1,0,0,1,0,0"))
               (rule "polySimp_addComm1" (formula "6") (term "0,0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "6") (term "0,0,0,1,0,0"))
               (rule "inEqSimp_homoInEq0" (formula "6") (term "1,1,0,0"))
               (rule "polySimp_mulComm0" (formula "6") (term "1,0,1,1,0,0"))
               (rule "polySimp_rightDist" (formula "6") (term "1,0,1,1,0,0"))
               (rule "mul_literals" (formula "6") (term "0,1,0,1,1,0,0"))
               (rule "polySimp_addAssoc" (formula "6") (term "0,1,1,0,0"))
               (rule "polySimp_addComm1" (formula "6") (term "0,0,1,1,0,0"))
               (rule "polySimp_addComm1" (formula "6") (term "0,0,0,1,1,0,0"))
               (rule "add_literals" (formula "6") (term "0,0,0,0,1,1,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "6") (term "0,1,0,0"))
               (rule "polySimp_mulComm0" (formula "6") (term "1,0,1,0,0"))
               (rule "polySimp_rightDist" (formula "6") (term "1,0,1,0,0"))
               (rule "polySimp_mulLiterals" (formula "6") (term "1,1,0,1,0,0"))
               (rule "polySimp_elimOne" (formula "6") (term "1,1,0,1,0,0"))
               (rule "polySimp_rightDist" (formula "6") (term "0,1,0,1,0,0"))
               (rule "polySimp_mulLiterals" (formula "6") (term "1,0,1,0,1,0,0"))
               (rule "mul_literals" (formula "6") (term "0,0,1,0,1,0,0"))
               (rule "polySimp_elimOne" (formula "6") (term "1,0,1,0,1,0,0"))
               (rule "inEqSimp_sepNegMonomial1" (formula "6") (term "1,1,0,0"))
               (rule "polySimp_mulLiterals" (formula "6") (term "0,1,1,0,0"))
               (rule "polySimp_elimOne" (formula "6") (term "0,1,1,0,0"))
               (rule "replace_known_left" (formula "6") (term "1,1,0,0") (ifseqformula "4"))
                (builtin "One Step Simplification" (formula "6"))
               (rule "inEqSimp_subsumption1" (formula "6") (term "1,0,0") (ifseqformula "5"))
               (rule "inEqSimp_homoInEq0" (formula "6") (term "0,1,0,0"))
               (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,1,0,0"))
               (rule "polySimp_rightDist" (formula "6") (term "1,0,0,1,0,0"))
               (rule "polySimp_rightDist" (formula "6") (term "0,1,0,0,1,0,0"))
               (rule "mul_literals" (formula "6") (term "0,0,1,0,0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "6") (term "0,0,1,0,0"))
               (rule "polySimp_addComm1" (formula "6") (term "0,0,0,1,0,0"))
               (rule "polySimp_pullOutFactor1b" (formula "6") (term "0,0,1,0,0"))
               (rule "add_literals" (formula "6") (term "1,1,0,0,1,0,0"))
               (rule "times_zero_1" (formula "6") (term "1,0,0,1,0,0"))
               (rule "add_zero_right" (formula "6") (term "0,0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "6") (term "0,0,1,0,0"))
               (rule "polySimp_addComm0" (formula "6") (term "0,0,0,1,0,0"))
               (rule "polySimp_pullOutFactor1b" (formula "6") (term "0,0,1,0,0"))
               (rule "add_literals" (formula "6") (term "1,1,0,0,1,0,0"))
               (rule "times_zero_1" (formula "6") (term "1,0,0,1,0,0"))
               (rule "add_literals" (formula "6") (term "0,0,1,0,0"))
               (rule "qeq_literals" (formula "6") (term "0,1,0,0"))
                (builtin "One Step Simplification" (formula "6"))
               (rule "applyEqReverse" (formula "7") (term "1,1") (ifseqformula "6"))
               (rule "hideAuxiliaryEq" (formula "6"))
               (rule "pullOutSelect" (formula "6") (term "0") (inst "selectSK=arr_1"))
               (rule "simplifySelectOfAnon" (formula "6"))
                (builtin "One Step Simplification" (formula "6") (ifInst ""  (formula "37")) (ifInst ""  (formula "11")))
               (rule "inEqSimp_homoInEq1" (formula "7"))
               (rule "polySimp_addComm1" (formula "7") (term "0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "7"))
               (rule "polySimp_mulComm0" (formula "7") (term "1"))
               (rule "polySimp_rightDist" (formula "7") (term "1"))
               (rule "polySimp_mulLiterals" (formula "7") (term "1,1"))
               (rule "mul_literals" (formula "7") (term "0,1"))
               (rule "polySimp_elimOne" (formula "7") (term "1,1"))
               (rule "elementOfSetMinus" (formula "6") (term "0,0"))
                (builtin "One Step Simplification" (formula "6"))
               (rule "ifthenelse_negated" (formula "6") (term "0"))
               (rule "elementOfUnion" (formula "6") (term "0,0"))
               (rule "elementOfArrayRangeConcrete" (formula "6") (term "1,0,0"))
                (builtin "One Step Simplification" (formula "6"))
               (rule "inEqSimp_commuteLeq" (formula "6") (term "0,1,0,0"))
               (rule "replace_known_left" (formula "6") (term "0,1,0,0") (ifseqformula "5"))
                (builtin "One Step Simplification" (formula "6"))
               (rule "inEqSimp_subsumption0" (formula "6") (term "1,0,0") (ifseqformula "4"))
               (rule "inEqSimp_homoInEq0" (formula "6") (term "0,1,0,0"))
               (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,1,0,0"))
               (rule "polySimp_rightDist" (formula "6") (term "1,0,0,1,0,0"))
               (rule "polySimp_rightDist" (formula "6") (term "0,1,0,0,1,0,0"))
               (rule "mul_literals" (formula "6") (term "0,0,1,0,0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "6") (term "0,0,1,0,0"))
               (rule "polySimp_addComm1" (formula "6") (term "0,0,0,1,0,0"))
               (rule "polySimp_pullOutFactor1b" (formula "6") (term "0,0,1,0,0"))
               (rule "add_literals" (formula "6") (term "1,1,0,0,1,0,0"))
               (rule "times_zero_1" (formula "6") (term "1,0,0,1,0,0"))
               (rule "add_zero_right" (formula "6") (term "0,0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "6") (term "0,0,1,0,0"))
               (rule "polySimp_addComm1" (formula "6") (term "0,0,0,1,0,0"))
               (rule "add_literals" (formula "6") (term "0,0,0,0,1,0,0"))
               (rule "polySimp_pullOutFactor1b" (formula "6") (term "0,0,1,0,0"))
               (rule "add_literals" (formula "6") (term "1,1,0,0,1,0,0"))
               (rule "times_zero_1" (formula "6") (term "1,0,0,1,0,0"))
               (rule "add_literals" (formula "6") (term "0,0,1,0,0"))
               (rule "qeq_literals" (formula "6") (term "0,1,0,0"))
                (builtin "One Step Simplification" (formula "6"))
               (rule "applyEqReverse" (formula "7") (term "1,1") (ifseqformula "6"))
               (rule "hideAuxiliaryEq" (formula "6"))
               (rule "inEqSimp_exactShadow3" (formula "1") (ifseqformula "2"))
               (rule "polySimp_rightDist" (formula "1") (term "0,0"))
               (rule "polySimp_mulComm0" (formula "1") (term "0,0,0"))
               (rule "polySimp_addAssoc" (formula "1") (term "0"))
               (rule "polySimp_addComm1" (formula "1") (term "0,0"))
               (rule "polySimp_addAssoc" (formula "1") (term "0,0,0"))
               (rule "polySimp_addComm0" (formula "1") (term "0,0,0,0"))
               (rule "polySimp_pullOutFactor2b" (formula "1") (term "0,0,0"))
               (rule "add_literals" (formula "1") (term "1,1,0,0,0"))
               (rule "times_zero_1" (formula "1") (term "1,0,0,0"))
               (rule "add_zero_right" (formula "1") (term "0,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "1"))
               (rule "polySimp_mulComm0" (formula "1") (term "1"))
               (rule "polySimp_rightDist" (formula "1") (term "1"))
               (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
               (rule "mul_literals" (formula "1") (term "0,1"))
               (rule "polySimp_elimOne" (formula "1") (term "1,1"))
               (rule "inEqSimp_exactShadow3" (formula "6") (ifseqformula "5"))
               (rule "polySimp_rightDist" (formula "6") (term "0,0"))
               (rule "polySimp_mulComm0" (formula "6") (term "0,0,0"))
               (rule "polySimp_addAssoc" (formula "6") (term "0"))
               (rule "polySimp_addComm1" (formula "6") (term "0,0"))
               (rule "polySimp_addAssoc" (formula "6") (term "0,0,0"))
               (rule "polySimp_addComm0" (formula "6") (term "0,0,0,0"))
               (rule "polySimp_pullOutFactor2b" (formula "6") (term "0,0,0"))
               (rule "add_literals" (formula "6") (term "1,1,0,0,0"))
               (rule "times_zero_1" (formula "6") (term "1,0,0,0"))
               (rule "add_zero_right" (formula "6") (term "0,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "6"))
               (rule "polySimp_mulComm0" (formula "6") (term "1"))
               (rule "polySimp_rightDist" (formula "6") (term "1"))
               (rule "polySimp_mulLiterals" (formula "6") (term "1,1"))
               (rule "mul_literals" (formula "6") (term "0,1"))
               (rule "polySimp_elimOne" (formula "6") (term "1,1"))
               (rule "equiv_right" (formula "39"))
               (branch "Case '->'"
                  (rule "andLeft" (formula "1"))
                  (rule "equalityToElementOfRight" (formula "38") (inst "ov=ov") (inst "fv=fv"))
                   (builtin "One Step Simplification" (formula "38"))
                  (rule "allRight" (formula "38") (inst "sk=ov_0"))
                  (rule "allRight" (formula "38") (inst "sk=fv_0"))
                  (rule "notRight" (formula "38"))
                  (rule "elementOfIntersect" (formula "1"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "andLeft" (formula "1"))
                  (rule "applyEq" (formula "2") (term "0") (ifseqformula "1"))
                  (rule "elementOfSetMinus" (formula "2"))
                   (builtin "One Step Simplification" (formula "2"))
                  (rule "notLeft" (formula "2"))
                  (rule "elementOfUnion" (formula "35"))
                  (rule "orRight" (formula "35"))
                  (rule "elementOfArrayRange" (formula "36") (inst "iv=iv"))
                  (rule "eqSymm" (formula "36") (term "0,0,0,1"))
                  (rule "inEqSimp_commuteLeq" (formula "36") (term "1,0,0,1"))
                  (rule "elementOfUnion" (formula "35"))
                   (builtin "One Step Simplification" (formula "35"))
                  (rule "closeTrue" (formula "35"))
               )
               (branch "Case '<-'"
                  (rule "andLeft" (formula "1"))
                  (rule "equalityToElementOfRight" (formula "38") (inst "ov=ov") (inst "fv=fv"))
                   (builtin "One Step Simplification" (formula "38"))
                  (rule "allRight" (formula "38") (inst "sk=ov_0"))
                  (rule "allRight" (formula "38") (inst "sk=fv_0"))
                  (rule "notRight" (formula "38"))
                  (rule "elementOfIntersect" (formula "1"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "andLeft" (formula "1"))
                  (rule "applyEq" (formula "2") (term "0") (ifseqformula "1"))
                  (rule "elementOfSetMinus" (formula "2"))
                   (builtin "One Step Simplification" (formula "2"))
                  (rule "notLeft" (formula "2"))
                  (rule "elementOfUnion" (formula "35"))
                  (rule "orRight" (formula "35"))
                  (rule "elementOfArrayRange" (formula "36") (inst "iv=iv"))
                  (rule "eqSymm" (formula "36") (term "0,0,0,1"))
                  (rule "inEqSimp_commuteLeq" (formula "36") (term "1,0,0,1"))
                  (rule "elementOfUnion" (formula "35"))
                   (builtin "One Step Simplification" (formula "35"))
                  (rule "closeTrue" (formula "35"))
               )
            )
         )
         (branch "CUT: arrayRange(values_0, begin + bucket_begin, -1 + begin + bucket_end) cap allLocs setMinus classifier.sorted_splitters.* cup classifier.tree.tree.* cup arrayRange(values_0, begin + bucket_begin, -1 + begin + bucket_end) = {} FALSE"
             (builtin "One Step Simplification" (formula "23"))
            (rule "true_left" (formula "23"))
            (rule "replace_known_right" (formula "28") (term "1") (ifseqformula "23"))
             (builtin "One Step Simplification" (formula "28"))
            (rule "false_right" (formula "28"))
            (rule "Definition_axiom_for_classOf_in_de_wiesler_Classifier" (formula "30") (term "0,1,0,0,0"))
            (rule "Definition_axiom_for_classOf_in_de_wiesler_Classifier" (formula "30") (term "0,1,0,0,1"))
            (rule "cnf_rightDist" (formula "21") (term "0"))
            (rule "distr_forallAnd" (formula "21"))
            (rule "andLeft" (formula "21"))
            (rule "commute_or" (formula "11") (term "0,0,1,0"))
            (rule "commute_or" (formula "20") (term "0,0,1,0"))
            (rule "commute_or" (formula "22") (term "0"))
            (rule "equiv_right" (formula "31"))
            (branch "Case '->'"
               (rule "andLeft" (formula "1"))
               (rule "andRight" (formula "33"))
               (branch "Case 1"
                  (rule "allRight" (formula "33") (inst "sk=i_0"))
                  (rule "orRight" (formula "33"))
                  (rule "orRight" (formula "33"))
                  (rule "inEqSimp_geqRight" (formula "34"))
                  (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "1") (term "0,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                  (rule "inEqSimp_leqRight" (formula "34"))
                  (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                  (rule "polySimp_rightDist" (formula "1") (term "0,1,0,0"))
                  (rule "mul_literals" (formula "1") (term "0,0,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                  (rule "polySimp_addAssoc" (formula "1") (term "0,0,0"))
                  (rule "add_literals" (formula "1") (term "0,0,0,0"))
                  (rule "add_zero_left" (formula "1") (term "0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "2"))
                  (rule "polySimp_mulComm0" (formula "2") (term "1"))
                  (rule "polySimp_rightDist" (formula "2") (term "1"))
                  (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
                  (rule "polySimp_elimOne" (formula "2") (term "1,1"))
                  (rule "polySimp_rightDist" (formula "2") (term "0,1"))
                  (rule "mul_literals" (formula "2") (term "0,0,1"))
                  (rule "polySimp_mulLiterals" (formula "2") (term "1,0,1"))
                  (rule "polySimp_elimOne" (formula "2") (term "1,0,1"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                  (rule "polySimp_mulComm0" (formula "1") (term "1"))
                  (rule "polySimp_rightDist" (formula "1") (term "1"))
                  (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                  (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                  (rule "polySimp_mulAssoc" (formula "1") (term "0,1"))
                  (rule "polySimp_mulComm0" (formula "1") (term "0,0,1"))
                  (rule "polySimp_mulLiterals" (formula "1") (term "0,1"))
                  (rule "polySimp_elimOne" (formula "1") (term "0,1"))
                  (rule "pullOutSelect" (formula "35") (term "2,0") (inst "selectSK=arr_0"))
                  (rule "simplifySelectOfAnon" (formula "1"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "34")) (ifInst ""  (formula "9")))
                  (rule "elementOfSetMinus" (formula "1") (term "0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "ifthenelse_negated" (formula "1") (term "0"))
                  (rule "elementOfUnion" (formula "1") (term "0,0"))
                  (rule "elementOfArrayRangeConcrete" (formula "1") (term "1,0,0"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "3")))
                  (rule "inEqSimp_commuteLeq" (formula "1") (term "1,0,0"))
                  (rule "replace_known_left" (formula "1") (term "1,0,0") (ifseqformula "2"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "applyEqReverse" (formula "36") (term "2,0") (ifseqformula "1"))
                  (rule "hideAuxiliaryEq" (formula "1"))
                  (rule "inEqSimp_exactShadow3" (formula "1") (ifseqformula "2"))
                  (rule "polySimp_rightDist" (formula "1") (term "0,0"))
                  (rule "polySimp_mulComm0" (formula "1") (term "0,0,0"))
                  (rule "polySimp_addAssoc" (formula "1") (term "0"))
                  (rule "polySimp_addComm1" (formula "1") (term "0,0"))
                  (rule "polySimp_addAssoc" (formula "1") (term "0,0,0"))
                  (rule "polySimp_addComm0" (formula "1") (term "0,0,0,0"))
                  (rule "polySimp_pullOutFactor2b" (formula "1") (term "0,0,0"))
                  (rule "add_literals" (formula "1") (term "1,1,0,0,0"))
                  (rule "times_zero_1" (formula "1") (term "1,0,0,0"))
                  (rule "add_zero_right" (formula "1") (term "0,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                  (rule "polySimp_mulComm0" (formula "1") (term "1"))
                  (rule "polySimp_rightDist" (formula "1") (term "1"))
                  (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                  (rule "mul_literals" (formula "1") (term "0,1"))
                  (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                  (rule "equalityToElementOfRight" (formula "29") (inst "ov=ov") (inst "fv=fv"))
                   (builtin "One Step Simplification" (formula "29"))
                  (rule "allRight" (formula "29") (inst "sk=ov_0"))
                  (rule "allRight" (formula "29") (inst "sk=fv_0"))
                  (rule "notRight" (formula "29"))
                  (rule "elementOfIntersect" (formula "1"))
                  (rule "andLeft" (formula "1"))
                  (rule "elementOfArrayRange" (formula "1") (inst "iv=iv"))
                  (rule "andLeft" (formula "1"))
                  (rule "exLeft" (formula "2") (inst "sk=iv_0"))
                  (rule "andLeft" (formula "2"))
                  (rule "andLeft" (formula "2"))
                  (rule "inEqSimp_commuteLeq" (formula "3"))
                  (rule "applyEq" (formula "5") (term "0") (ifseqformula "1"))
                  (rule "applyEq" (formula "5") (term "1") (ifseqformula "2"))
                  (rule "elementOfSetMinus" (formula "5"))
                   (builtin "One Step Simplification" (formula "5"))
                  (rule "notLeft" (formula "5"))
                  (rule "elementOfUnion" (formula "33"))
                  (rule "orRight" (formula "33"))
                  (rule "elementOfArrayRangeConcrete" (formula "34"))
                   (builtin "One Step Simplification" (formula "34") (ifInst ""  (formula "4")))
                  (rule "inEqSimp_leqRight" (formula "34"))
                  (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                  (rule "polySimp_addComm1" (formula "1") (term "0"))
                  (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                  (rule "inEqSimp_sepNegMonomial1" (formula "1"))
                  (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                  (rule "polySimp_elimOne" (formula "1") (term "0"))
                  (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "4"))
                  (rule "andLeft" (formula "1"))
                  (rule "inEqSimp_homoInEq1" (formula "1"))
                  (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
                  (rule "polySimp_rightDist" (formula "1") (term "1,0"))
                  (rule "polySimp_rightDist" (formula "1") (term "0,1,0"))
                  (rule "mul_literals" (formula "1") (term "0,0,1,0"))
                  (rule "polySimp_addAssoc" (formula "1") (term "0"))
                  (rule "polySimp_addComm1" (formula "1") (term "0,0"))
                  (rule "polySimp_pullOutFactor1b" (formula "1") (term "0"))
                  (rule "add_literals" (formula "1") (term "1,1,0"))
                  (rule "times_zero_1" (formula "1") (term "1,0"))
                  (rule "add_zero_right" (formula "1") (term "0"))
                  (rule "polySimp_addAssoc" (formula "1") (term "0"))
                  (rule "polySimp_addComm0" (formula "1") (term "0,0"))
                  (rule "polySimp_pullOutFactor1b" (formula "1") (term "0"))
                  (rule "add_literals" (formula "1") (term "1,1,0"))
                  (rule "times_zero_1" (formula "1") (term "1,0"))
                  (rule "add_zero_right" (formula "1") (term "0"))
                  (rule "leq_literals" (formula "1"))
                  (rule "closeFalse" (formula "1"))
               )
               (branch "Case 2"
                  (rule "impRight" (formula "33"))
                  (rule "allRight" (formula "34") (inst "sk=i_0"))
                  (rule "orRight" (formula "34"))
                  (rule "orRight" (formula "34"))
                  (rule "replace_known_left" (formula "3") (term "0") (ifseqformula "1"))
                   (builtin "One Step Simplification" (formula "3"))
                  (rule "inEqSimp_geqRight" (formula "36"))
                  (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                  (rule "inEqSimp_geqRight" (formula "36"))
                  (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                  (rule "polySimp_rightDist" (formula "1") (term "0,1,0,0"))
                  (rule "mul_literals" (formula "1") (term "0,0,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                  (rule "polySimp_addAssoc" (formula "1") (term "0,0,0"))
                  (rule "add_literals" (formula "1") (term "0,0,0,0"))
                  (rule "inEqSimp_leqRight" (formula "36"))
                  (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                  (rule "polySimp_rightDist" (formula "1") (term "0,1,0,0"))
                  (rule "mul_literals" (formula "1") (term "0,0,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                  (rule "polySimp_addAssoc" (formula "1") (term "0,0,0"))
                  (rule "add_literals" (formula "1") (term "0,0,0,0"))
                  (rule "add_zero_left" (formula "1") (term "0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "3"))
                  (rule "polySimp_mulComm0" (formula "3") (term "1"))
                  (rule "polySimp_rightDist" (formula "3") (term "1"))
                  (rule "mul_literals" (formula "3") (term "0,1"))
                  (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
                  (rule "polySimp_elimOne" (formula "3") (term "1,1"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "2"))
                  (rule "polySimp_mulComm0" (formula "2") (term "1"))
                  (rule "polySimp_rightDist" (formula "2") (term "1"))
                  (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
                  (rule "polySimp_elimOne" (formula "2") (term "1,1"))
                  (rule "polySimp_rightDist" (formula "2") (term "0,1"))
                  (rule "polySimp_mulLiterals" (formula "2") (term "1,0,1"))
                  (rule "mul_literals" (formula "2") (term "0,0,1"))
                  (rule "polySimp_elimOne" (formula "2") (term "1,0,1"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                  (rule "polySimp_mulComm0" (formula "1") (term "1"))
                  (rule "polySimp_rightDist" (formula "1") (term "1"))
                  (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                  (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                  (rule "polySimp_mulAssoc" (formula "1") (term "0,1"))
                  (rule "polySimp_mulComm0" (formula "1") (term "0,0,1"))
                  (rule "polySimp_mulLiterals" (formula "1") (term "0,1"))
                  (rule "polySimp_elimOne" (formula "1") (term "0,1"))
                  (rule "pullOutSelect" (formula "3") (term "0") (inst "selectSK=arr_0"))
                  (rule "simplifySelectOfAnon" (formula "3"))
                   (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "36")) (ifInst ""  (formula "11")))
                  (rule "inEqSimp_homoInEq0" (formula "4"))
                  (rule "polySimp_addComm1" (formula "4") (term "0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "4"))
                  (rule "polySimp_mulComm0" (formula "4") (term "1"))
                  (rule "polySimp_rightDist" (formula "4") (term "1"))
                  (rule "polySimp_mulLiterals" (formula "4") (term "1,1"))
                  (rule "mul_literals" (formula "4") (term "0,1"))
                  (rule "polySimp_elimOne" (formula "4") (term "1,1"))
                  (rule "elementOfSetMinus" (formula "3") (term "0,0"))
                   (builtin "One Step Simplification" (formula "3"))
                  (rule "ifthenelse_negated" (formula "3") (term "0"))
                  (rule "elementOfUnion" (formula "3") (term "0,0"))
                  (rule "elementOfArrayRangeConcrete" (formula "3") (term "1,0,0"))
                   (builtin "One Step Simplification" (formula "3"))
                  (rule "inEqSimp_homoInEq0" (formula "3") (term "0,1,0,0"))
                  (rule "polySimp_mulComm0" (formula "3") (term "1,0,0,1,0,0"))
                  (rule "polySimp_rightDist" (formula "3") (term "1,0,0,1,0,0"))
                  (rule "polySimp_mulComm0" (formula "3") (term "0,1,0,0,1,0,0"))
                  (rule "polySimp_addComm1" (formula "3") (term "0,0,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "3") (term "0,0,0,1,0,0"))
                  (rule "inEqSimp_homoInEq0" (formula "3") (term "1,1,0,0"))
                  (rule "polySimp_mulComm0" (formula "3") (term "1,0,1,1,0,0"))
                  (rule "polySimp_rightDist" (formula "3") (term "1,0,1,1,0,0"))
                  (rule "mul_literals" (formula "3") (term "0,1,0,1,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "3") (term "0,1,1,0,0"))
                  (rule "polySimp_addComm1" (formula "3") (term "0,0,1,1,0,0"))
                  (rule "polySimp_addComm1" (formula "3") (term "0,0,0,1,1,0,0"))
                  (rule "add_literals" (formula "3") (term "0,0,0,0,1,1,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "3") (term "0,1,0,0"))
                  (rule "polySimp_mulComm0" (formula "3") (term "1,0,1,0,0"))
                  (rule "polySimp_rightDist" (formula "3") (term "1,0,1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "3") (term "1,1,0,1,0,0"))
                  (rule "polySimp_elimOne" (formula "3") (term "1,1,0,1,0,0"))
                  (rule "polySimp_rightDist" (formula "3") (term "0,1,0,1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "3") (term "1,0,1,0,1,0,0"))
                  (rule "mul_literals" (formula "3") (term "0,0,1,0,1,0,0"))
                  (rule "polySimp_elimOne" (formula "3") (term "1,0,1,0,1,0,0"))
                  (rule "inEqSimp_sepNegMonomial1" (formula "3") (term "1,1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "3") (term "0,1,1,0,0"))
                  (rule "polySimp_elimOne" (formula "3") (term "0,1,1,0,0"))
                  (rule "replace_known_left" (formula "3") (term "1,1,0,0") (ifseqformula "2"))
                   (builtin "One Step Simplification" (formula "3"))
                  (rule "inEqSimp_subsumption1" (formula "3") (term "1,0,0") (ifseqformula "1"))
                  (rule "inEqSimp_homoInEq0" (formula "3") (term "0,1,0,0"))
                  (rule "polySimp_mulComm0" (formula "3") (term "1,0,0,1,0,0"))
                  (rule "polySimp_rightDist" (formula "3") (term "1,0,0,1,0,0"))
                  (rule "polySimp_rightDist" (formula "3") (term "0,1,0,0,1,0,0"))
                  (rule "mul_literals" (formula "3") (term "0,0,1,0,0,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "3") (term "0,0,1,0,0"))
                  (rule "polySimp_addComm1" (formula "3") (term "0,0,0,1,0,0"))
                  (rule "polySimp_pullOutFactor1b" (formula "3") (term "0,0,1,0,0"))
                  (rule "add_literals" (formula "3") (term "1,1,0,0,1,0,0"))
                  (rule "times_zero_1" (formula "3") (term "1,0,0,1,0,0"))
                  (rule "add_zero_right" (formula "3") (term "0,0,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "3") (term "0,0,1,0,0"))
                  (rule "polySimp_addComm0" (formula "3") (term "0,0,0,1,0,0"))
                  (rule "polySimp_pullOutFactor1b" (formula "3") (term "0,0,1,0,0"))
                  (rule "add_literals" (formula "3") (term "1,1,0,0,1,0,0"))
                  (rule "times_zero_1" (formula "3") (term "1,0,0,1,0,0"))
                  (rule "add_zero_right" (formula "3") (term "0,0,1,0,0"))
                  (rule "qeq_literals" (formula "3") (term "0,1,0,0"))
                   (builtin "One Step Simplification" (formula "3"))
                  (rule "applyEqReverse" (formula "4") (term "1,1") (ifseqformula "3"))
                  (rule "hideAuxiliaryEq" (formula "3"))
                  (rule "pullOutSelect" (formula "3") (term "0") (inst "selectSK=arr_1"))
                  (rule "simplifySelectOfAnon" (formula "3"))
                   (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "36")) (ifInst ""  (formula "11")))
                  (rule "inEqSimp_homoInEq1" (formula "4"))
                  (rule "polySimp_addComm1" (formula "4") (term "0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "4"))
                  (rule "polySimp_mulComm0" (formula "4") (term "1"))
                  (rule "polySimp_rightDist" (formula "4") (term "1"))
                  (rule "mul_literals" (formula "4") (term "0,1"))
                  (rule "polySimp_mulLiterals" (formula "4") (term "1,1"))
                  (rule "polySimp_elimOne" (formula "4") (term "1,1"))
                  (rule "elementOfSetMinus" (formula "3") (term "0,0"))
                   (builtin "One Step Simplification" (formula "3"))
                  (rule "ifthenelse_negated" (formula "3") (term "0"))
                  (rule "elementOfUnion" (formula "3") (term "0,0"))
                  (rule "elementOfArrayRangeConcrete" (formula "3") (term "1,0,0"))
                   (builtin "One Step Simplification" (formula "3"))
                  (rule "inEqSimp_commuteLeq" (formula "3") (term "0,1,0,0"))
                  (rule "replace_known_left" (formula "3") (term "0,1,0,0") (ifseqformula "1"))
                   (builtin "One Step Simplification" (formula "3"))
                  (rule "inEqSimp_subsumption0" (formula "3") (term "1,0,0") (ifseqformula "2"))
                  (rule "inEqSimp_homoInEq0" (formula "3") (term "0,1,0,0"))
                  (rule "polySimp_mulComm0" (formula "3") (term "1,0,0,1,0,0"))
                  (rule "polySimp_rightDist" (formula "3") (term "1,0,0,1,0,0"))
                  (rule "polySimp_rightDist" (formula "3") (term "0,1,0,0,1,0,0"))
                  (rule "mul_literals" (formula "3") (term "0,0,1,0,0,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "3") (term "0,0,1,0,0"))
                  (rule "polySimp_addComm1" (formula "3") (term "0,0,0,1,0,0"))
                  (rule "polySimp_pullOutFactor1b" (formula "3") (term "0,0,1,0,0"))
                  (rule "add_literals" (formula "3") (term "1,1,0,0,1,0,0"))
                  (rule "times_zero_1" (formula "3") (term "1,0,0,1,0,0"))
                  (rule "add_zero_right" (formula "3") (term "0,0,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "3") (term "0,0,1,0,0"))
                  (rule "polySimp_addComm1" (formula "3") (term "0,0,0,1,0,0"))
                  (rule "add_literals" (formula "3") (term "0,0,0,0,1,0,0"))
                  (rule "polySimp_pullOutFactor1b" (formula "3") (term "0,0,1,0,0"))
                  (rule "add_literals" (formula "3") (term "1,1,0,0,1,0,0"))
                  (rule "times_zero_1" (formula "3") (term "1,0,0,1,0,0"))
                  (rule "add_zero_right" (formula "3") (term "0,0,1,0,0"))
                  (rule "qeq_literals" (formula "3") (term "0,1,0,0"))
                   (builtin "One Step Simplification" (formula "3"))
                  (rule "applyEqReverse" (formula "4") (term "1,1") (ifseqformula "3"))
                  (rule "hideAuxiliaryEq" (formula "3"))
                  (rule "inEqSimp_exactShadow3" (formula "1") (ifseqformula "2"))
                  (rule "polySimp_rightDist" (formula "1") (term "0,0"))
                  (rule "polySimp_mulComm0" (formula "1") (term "0,0,0"))
                  (rule "polySimp_addAssoc" (formula "1") (term "0"))
                  (rule "polySimp_addComm1" (formula "1") (term "0,0"))
                  (rule "polySimp_addAssoc" (formula "1") (term "0,0,0"))
                  (rule "polySimp_addComm0" (formula "1") (term "0,0,0,0"))
                  (rule "polySimp_pullOutFactor2b" (formula "1") (term "0,0,0"))
                  (rule "add_literals" (formula "1") (term "1,1,0,0,0"))
                  (rule "times_zero_1" (formula "1") (term "1,0,0,0"))
                  (rule "add_literals" (formula "1") (term "0,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                  (rule "polySimp_mulComm0" (formula "1") (term "1"))
                  (rule "polySimp_rightDist" (formula "1") (term "1"))
                  (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                  (rule "mul_literals" (formula "1") (term "0,1"))
                  (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                  (rule "equalityToElementOfRight" (formula "31") (inst "ov=ov") (inst "fv=fv"))
                   (builtin "One Step Simplification" (formula "31"))
                  (rule "allRight" (formula "31") (inst "sk=ov_0"))
                  (rule "allRight" (formula "31") (inst "sk=fv_0"))
                  (rule "notRight" (formula "31"))
                  (rule "elementOfIntersect" (formula "1"))
                  (rule "andLeft" (formula "1"))
                  (rule "elementOfArrayRange" (formula "1") (inst "iv=iv"))
                  (rule "andLeft" (formula "1"))
                  (rule "exLeft" (formula "2") (inst "sk=iv_0"))
                  (rule "andLeft" (formula "2"))
                  (rule "andLeft" (formula "2"))
                  (rule "inEqSimp_commuteLeq" (formula "3"))
                  (rule "applyEqRigid" (formula "5") (term "1") (ifseqformula "2"))
                  (rule "applyEq" (formula "5") (term "0") (ifseqformula "1"))
                  (rule "elementOfSetMinus" (formula "5"))
                   (builtin "One Step Simplification" (formula "5"))
                  (rule "notLeft" (formula "5"))
                  (rule "elementOfUnion" (formula "35"))
                  (rule "orRight" (formula "35"))
                  (rule "elementOfArrayRangeConcrete" (formula "36"))
                   (builtin "One Step Simplification" (formula "36") (ifInst ""  (formula "4")))
                  (rule "inEqSimp_leqRight" (formula "36"))
                  (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                  (rule "polySimp_addComm1" (formula "1") (term "0"))
                  (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                  (rule "inEqSimp_sepNegMonomial1" (formula "1"))
                  (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                  (rule "polySimp_elimOne" (formula "1") (term "0"))
                  (rule "inEqSimp_contradInEq0" (formula "4") (ifseqformula "1"))
                  (rule "andLeft" (formula "4"))
                  (rule "inEqSimp_homoInEq1" (formula "4"))
                  (rule "polySimp_mulComm0" (formula "4") (term "1,0"))
                  (rule "polySimp_rightDist" (formula "4") (term "1,0"))
                  (rule "polySimp_rightDist" (formula "4") (term "0,1,0"))
                  (rule "mul_literals" (formula "4") (term "0,0,1,0"))
                  (rule "polySimp_addAssoc" (formula "4") (term "0"))
                  (rule "polySimp_addComm1" (formula "4") (term "0,0"))
                  (rule "polySimp_pullOutFactor1b" (formula "4") (term "0"))
                  (rule "add_literals" (formula "4") (term "1,1,0"))
                  (rule "times_zero_1" (formula "4") (term "1,0"))
                  (rule "add_zero_right" (formula "4") (term "0"))
                  (rule "polySimp_addAssoc" (formula "4") (term "0"))
                  (rule "polySimp_addComm0" (formula "4") (term "0,0"))
                  (rule "polySimp_pullOutFactor1b" (formula "4") (term "0"))
                  (rule "add_literals" (formula "4") (term "1,1,0"))
                  (rule "times_zero_1" (formula "4") (term "1,0"))
                  (rule "add_zero_right" (formula "4") (term "0"))
                  (rule "leq_literals" (formula "4"))
                  (rule "closeFalse" (formula "4"))
               )
            )
            (branch "Case '<-'"
               (rule "andLeft" (formula "1"))
               (rule "andRight" (formula "33"))
               (branch "Case 1"
                  (rule "allRight" (formula "33") (inst "sk=i_0"))
                  (rule "orRight" (formula "33"))
                  (rule "orRight" (formula "33"))
                  (rule "inEqSimp_geqRight" (formula "34"))
                  (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "1") (term "0,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                  (rule "inEqSimp_leqRight" (formula "34"))
                  (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                  (rule "polySimp_rightDist" (formula "1") (term "0,1,0,0"))
                  (rule "mul_literals" (formula "1") (term "0,0,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                  (rule "polySimp_addAssoc" (formula "1") (term "0,0,0"))
                  (rule "add_literals" (formula "1") (term "0,0,0,0"))
                  (rule "add_zero_left" (formula "1") (term "0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "2"))
                  (rule "polySimp_mulComm0" (formula "2") (term "1"))
                  (rule "polySimp_rightDist" (formula "2") (term "1"))
                  (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
                  (rule "polySimp_elimOne" (formula "2") (term "1,1"))
                  (rule "polySimp_rightDist" (formula "2") (term "0,1"))
                  (rule "polySimp_mulLiterals" (formula "2") (term "1,0,1"))
                  (rule "mul_literals" (formula "2") (term "0,0,1"))
                  (rule "polySimp_elimOne" (formula "2") (term "1,0,1"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                  (rule "polySimp_mulComm0" (formula "1") (term "1"))
                  (rule "polySimp_rightDist" (formula "1") (term "1"))
                  (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                  (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                  (rule "polySimp_mulAssoc" (formula "1") (term "0,1"))
                  (rule "polySimp_mulComm0" (formula "1") (term "0,0,1"))
                  (rule "polySimp_mulLiterals" (formula "1") (term "0,1"))
                  (rule "polySimp_elimOne" (formula "1") (term "0,1"))
                  (rule "inEqSimp_exactShadow3" (formula "1") (ifseqformula "2"))
                  (rule "polySimp_rightDist" (formula "1") (term "0,0"))
                  (rule "polySimp_mulComm0" (formula "1") (term "0,0,0"))
                  (rule "polySimp_addAssoc" (formula "1") (term "0"))
                  (rule "polySimp_addComm1" (formula "1") (term "0,0"))
                  (rule "polySimp_addAssoc" (formula "1") (term "0,0,0"))
                  (rule "polySimp_addComm0" (formula "1") (term "0,0,0,0"))
                  (rule "polySimp_pullOutFactor2b" (formula "1") (term "0,0,0"))
                  (rule "add_literals" (formula "1") (term "1,1,0,0,0"))
                  (rule "times_zero_1" (formula "1") (term "1,0,0,0"))
                  (rule "add_zero_right" (formula "1") (term "0,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                  (rule "polySimp_mulComm0" (formula "1") (term "1"))
                  (rule "polySimp_rightDist" (formula "1") (term "1"))
                  (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                  (rule "mul_literals" (formula "1") (term "0,1"))
                  (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                  (rule "equalityToElementOfRight" (formula "29") (inst "ov=ov") (inst "fv=fv"))
                   (builtin "One Step Simplification" (formula "29"))
                  (rule "allRight" (formula "29") (inst "sk=ov_0"))
                  (rule "allRight" (formula "29") (inst "sk=fv_0"))
                  (rule "notRight" (formula "29"))
                  (rule "elementOfIntersect" (formula "1"))
                  (rule "andLeft" (formula "1"))
                  (rule "elementOfArrayRange" (formula "1") (inst "iv=iv"))
                  (rule "andLeft" (formula "1"))
                  (rule "exLeft" (formula "2") (inst "sk=iv_0"))
                  (rule "andLeft" (formula "2"))
                  (rule "andLeft" (formula "2"))
                  (rule "inEqSimp_commuteLeq" (formula "3"))
                  (rule "applyEqRigid" (formula "5") (term "1") (ifseqformula "2"))
                  (rule "applyEq" (formula "5") (term "0") (ifseqformula "1"))
                  (rule "elementOfSetMinus" (formula "5"))
                   (builtin "One Step Simplification" (formula "5"))
                  (rule "notLeft" (formula "5"))
                  (rule "elementOfUnion" (formula "33"))
                  (rule "orRight" (formula "33"))
                  (rule "elementOfArrayRangeConcrete" (formula "34"))
                   (builtin "One Step Simplification" (formula "34") (ifInst ""  (formula "4")))
                  (rule "inEqSimp_leqRight" (formula "34"))
                  (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                  (rule "polySimp_addComm1" (formula "1") (term "0"))
                  (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                  (rule "inEqSimp_sepNegMonomial1" (formula "1"))
                  (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                  (rule "polySimp_elimOne" (formula "1") (term "0"))
                  (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "4"))
                  (rule "andLeft" (formula "1"))
                  (rule "inEqSimp_homoInEq1" (formula "1"))
                  (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
                  (rule "polySimp_rightDist" (formula "1") (term "1,0"))
                  (rule "polySimp_rightDist" (formula "1") (term "0,1,0"))
                  (rule "mul_literals" (formula "1") (term "0,0,1,0"))
                  (rule "polySimp_addAssoc" (formula "1") (term "0"))
                  (rule "polySimp_addComm1" (formula "1") (term "0,0"))
                  (rule "polySimp_pullOutFactor1b" (formula "1") (term "0"))
                  (rule "add_literals" (formula "1") (term "1,1,0"))
                  (rule "times_zero_1" (formula "1") (term "1,0"))
                  (rule "add_zero_right" (formula "1") (term "0"))
                  (rule "polySimp_addAssoc" (formula "1") (term "0"))
                  (rule "polySimp_addComm0" (formula "1") (term "0,0"))
                  (rule "polySimp_pullOutFactor1b" (formula "1") (term "0"))
                  (rule "add_literals" (formula "1") (term "1,1,0"))
                  (rule "times_zero_1" (formula "1") (term "1,0"))
                  (rule "add_zero_right" (formula "1") (term "0"))
                  (rule "leq_literals" (formula "1"))
                  (rule "closeFalse" (formula "1"))
               )
               (branch "Case 2"
                  (rule "impRight" (formula "33"))
                  (rule "allRight" (formula "34") (inst "sk=i_0"))
                  (rule "orRight" (formula "34"))
                  (rule "orRight" (formula "34"))
                  (rule "replace_known_left" (formula "3") (term "0") (ifseqformula "1"))
                   (builtin "One Step Simplification" (formula "3"))
                  (rule "inEqSimp_geqRight" (formula "36"))
                  (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                  (rule "inEqSimp_geqRight" (formula "36"))
                  (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                  (rule "polySimp_rightDist" (formula "1") (term "0,1,0,0"))
                  (rule "mul_literals" (formula "1") (term "0,0,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                  (rule "polySimp_addAssoc" (formula "1") (term "0,0,0"))
                  (rule "add_literals" (formula "1") (term "0,0,0,0"))
                  (rule "inEqSimp_leqRight" (formula "36"))
                  (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                  (rule "polySimp_rightDist" (formula "1") (term "0,1,0,0"))
                  (rule "mul_literals" (formula "1") (term "0,0,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                  (rule "polySimp_addAssoc" (formula "1") (term "0,0,0"))
                  (rule "add_literals" (formula "1") (term "0,0,0,0"))
                  (rule "add_zero_left" (formula "1") (term "0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "3"))
                  (rule "polySimp_mulComm0" (formula "3") (term "1"))
                  (rule "polySimp_rightDist" (formula "3") (term "1"))
                  (rule "mul_literals" (formula "3") (term "0,1"))
                  (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
                  (rule "polySimp_elimOne" (formula "3") (term "1,1"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "2"))
                  (rule "polySimp_mulComm0" (formula "2") (term "1"))
                  (rule "polySimp_rightDist" (formula "2") (term "1"))
                  (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
                  (rule "polySimp_elimOne" (formula "2") (term "1,1"))
                  (rule "polySimp_rightDist" (formula "2") (term "0,1"))
                  (rule "mul_literals" (formula "2") (term "0,0,1"))
                  (rule "polySimp_mulLiterals" (formula "2") (term "1,0,1"))
                  (rule "polySimp_elimOne" (formula "2") (term "1,0,1"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                  (rule "polySimp_mulComm0" (formula "1") (term "1"))
                  (rule "polySimp_rightDist" (formula "1") (term "1"))
                  (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                  (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                  (rule "polySimp_mulAssoc" (formula "1") (term "0,1"))
                  (rule "polySimp_mulComm0" (formula "1") (term "0,0,1"))
                  (rule "polySimp_mulLiterals" (formula "1") (term "0,1"))
                  (rule "polySimp_elimOne" (formula "1") (term "0,1"))
                  (rule "inEqSimp_exactShadow3" (formula "1") (ifseqformula "2"))
                  (rule "polySimp_rightDist" (formula "1") (term "0,0"))
                  (rule "polySimp_mulComm0" (formula "1") (term "0,0,0"))
                  (rule "polySimp_addAssoc" (formula "1") (term "0"))
                  (rule "polySimp_addComm1" (formula "1") (term "0,0"))
                  (rule "polySimp_addAssoc" (formula "1") (term "0,0,0"))
                  (rule "polySimp_addComm0" (formula "1") (term "0,0,0,0"))
                  (rule "polySimp_pullOutFactor2b" (formula "1") (term "0,0,0"))
                  (rule "add_literals" (formula "1") (term "1,1,0,0,0"))
                  (rule "times_zero_1" (formula "1") (term "1,0,0,0"))
                  (rule "add_literals" (formula "1") (term "0,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                  (rule "polySimp_mulComm0" (formula "1") (term "1"))
                  (rule "polySimp_rightDist" (formula "1") (term "1"))
                  (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                  (rule "mul_literals" (formula "1") (term "0,1"))
                  (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                  (rule "equalityToElementOfRight" (formula "31") (inst "ov=ov") (inst "fv=fv"))
                   (builtin "One Step Simplification" (formula "31"))
                  (rule "allRight" (formula "31") (inst "sk=ov_0"))
                  (rule "allRight" (formula "31") (inst "sk=fv_0"))
                  (rule "notRight" (formula "31"))
                  (rule "elementOfIntersect" (formula "1"))
                  (rule "andLeft" (formula "1"))
                  (rule "elementOfArrayRange" (formula "1") (inst "iv=iv"))
                  (rule "andLeft" (formula "1"))
                  (rule "exLeft" (formula "2") (inst "sk=iv_0"))
                  (rule "andLeft" (formula "2"))
                  (rule "andLeft" (formula "2"))
                  (rule "inEqSimp_commuteLeq" (formula "3"))
                  (rule "applyEq" (formula "5") (term "0") (ifseqformula "1"))
                  (rule "applyEqRigid" (formula "5") (term "1") (ifseqformula "2"))
                  (rule "elementOfSetMinus" (formula "5"))
                   (builtin "One Step Simplification" (formula "5"))
                  (rule "notLeft" (formula "5"))
                  (rule "elementOfUnion" (formula "35"))
                  (rule "orRight" (formula "35"))
                  (rule "elementOfArrayRangeConcrete" (formula "36"))
                   (builtin "One Step Simplification" (formula "36") (ifInst ""  (formula "4")))
                  (rule "inEqSimp_leqRight" (formula "36"))
                  (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                  (rule "polySimp_addComm1" (formula "1") (term "0"))
                  (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                  (rule "inEqSimp_sepNegMonomial1" (formula "1"))
                  (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                  (rule "polySimp_elimOne" (formula "1") (term "0"))
                  (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "4"))
                  (rule "andLeft" (formula "1"))
                  (rule "inEqSimp_homoInEq1" (formula "1"))
                  (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
                  (rule "polySimp_rightDist" (formula "1") (term "1,0"))
                  (rule "polySimp_rightDist" (formula "1") (term "0,1,0"))
                  (rule "mul_literals" (formula "1") (term "0,0,1,0"))
                  (rule "polySimp_addAssoc" (formula "1") (term "0"))
                  (rule "polySimp_addComm1" (formula "1") (term "0,0"))
                  (rule "polySimp_pullOutFactor1b" (formula "1") (term "0"))
                  (rule "add_literals" (formula "1") (term "1,1,0"))
                  (rule "times_zero_1" (formula "1") (term "1,0"))
                  (rule "add_zero_right" (formula "1") (term "0"))
                  (rule "polySimp_addAssoc" (formula "1") (term "0"))
                  (rule "polySimp_addComm0" (formula "1") (term "0,0"))
                  (rule "polySimp_pullOutFactor1b" (formula "1") (term "0"))
                  (rule "add_literals" (formula "1") (term "1,1,0"))
                  (rule "times_zero_1" (formula "1") (term "1,0"))
                  (rule "add_zero_right" (formula "1") (term "0"))
                  (rule "leq_literals" (formula "1"))
                  (rule "closeFalse" (formula "1"))
               )
            )
         )
      )
      (branch "CUT: classifier.sorted_splitters.* cap allLocs setMinus classifier.sorted_splitters.* cup classifier.tree.tree.* cup arrayRange(values_0, begin + bucket_begin, -1 + begin + bucket_end) = {} FALSE"
          (builtin "One Step Simplification" (formula "27"))
         (rule "false_right" (formula "27"))
         (rule "arrayLengthIsAShort" (formula "16") (term "0"))
          (builtin "One Step Simplification" (formula "16"))
         (rule "true_left" (formula "16"))
         (rule "arrayLengthNotNegative" (formula "16") (term "0"))
         (rule "arrayLengthIsAShort" (formula "15") (term "0"))
          (builtin "One Step Simplification" (formula "15"))
         (rule "true_left" (formula "15"))
         (rule "arrayLengthNotNegative" (formula "15") (term "0"))
         (rule "inEqSimp_subsumption1" (formula "15") (ifseqformula "16"))
         (rule "leq_literals" (formula "15") (term "0"))
          (builtin "One Step Simplification" (formula "15"))
         (rule "true_left" (formula "15"))
         (rule "Definition_axiom_for_isClassOfSlice_in_de_wiesler_Classifier" (formula "30") (term "0,0,1") (inst "i=i"))
          (builtin "One Step Simplification" (formula "30"))
         (rule "inEqSimp_ltToLeq" (formula "30") (term "1,0,0,0,1"))
         (rule "polySimp_rightDist" (formula "30") (term "1,0,0,1,0,0,0,1"))
         (rule "polySimp_mulComm0" (formula "30") (term "0,1,0,0,1,0,0,0,1"))
         (rule "polySimp_addAssoc" (formula "30") (term "0,0,1,0,0,0,1"))
         (rule "inEqSimp_commuteLeq" (formula "30") (term "0,0,0,0,1"))
         (rule "inEqSimp_sepPosMonomial0" (formula "30") (term "1,0,0,0,1"))
         (rule "polySimp_mulComm0" (formula "30") (term "1,1,0,0,0,1"))
         (rule "polySimp_rightDist" (formula "30") (term "1,1,0,0,0,1"))
         (rule "polySimp_mulLiterals" (formula "30") (term "1,1,1,0,0,0,1"))
         (rule "polySimp_elimOne" (formula "30") (term "1,1,1,0,0,0,1"))
         (rule "polySimp_rightDist" (formula "30") (term "0,1,1,0,0,0,1"))
         (rule "polySimp_mulLiterals" (formula "30") (term "1,0,1,1,0,0,0,1"))
         (rule "mul_literals" (formula "30") (term "0,0,1,1,0,0,0,1"))
         (rule "polySimp_elimOne" (formula "30") (term "1,0,1,1,0,0,0,1"))
         (rule "nnf_imp2or" (formula "30") (term "0,0,1"))
         (rule "nnf_notAnd" (formula "30") (term "0,0,0,1"))
         (rule "inEqSimp_notLeq" (formula "30") (term "1,0,0,0,1"))
         (rule "polySimp_rightDist" (formula "30") (term "1,0,0,1,0,0,0,1"))
         (rule "polySimp_rightDist" (formula "30") (term "0,1,0,0,1,0,0,0,1"))
         (rule "mul_literals" (formula "30") (term "0,0,1,0,0,1,0,0,0,1"))
         (rule "polySimp_addAssoc" (formula "30") (term "0,0,1,0,0,0,1"))
         (rule "polySimp_addAssoc" (formula "30") (term "0,0,0,1,0,0,0,1"))
         (rule "add_literals" (formula "30") (term "0,0,0,0,1,0,0,0,1"))
         (rule "add_zero_left" (formula "30") (term "0,0,0,1,0,0,0,1"))
         (rule "inEqSimp_sepPosMonomial1" (formula "30") (term "1,0,0,0,1"))
         (rule "polySimp_mulComm0" (formula "30") (term "1,1,0,0,0,1"))
         (rule "polySimp_rightDist" (formula "30") (term "1,1,0,0,0,1"))
         (rule "polySimp_mulLiterals" (formula "30") (term "1,1,1,0,0,0,1"))
         (rule "polySimp_elimOne" (formula "30") (term "1,1,1,0,0,0,1"))
         (rule "polySimp_mulAssoc" (formula "30") (term "0,1,1,0,0,0,1"))
         (rule "polySimp_mulComm0" (formula "30") (term "0,0,1,1,0,0,0,1"))
         (rule "polySimp_mulLiterals" (formula "30") (term "0,1,1,0,0,0,1"))
         (rule "polySimp_elimOne" (formula "30") (term "0,1,1,0,0,0,1"))
         (rule "inEqSimp_notGeq" (formula "30") (term "0,0,0,0,1"))
         (rule "polySimp_rightDist" (formula "30") (term "1,0,0,0,0,0,0,1"))
         (rule "polySimp_mulComm0" (formula "30") (term "0,1,0,0,0,0,0,0,1"))
         (rule "polySimp_addAssoc" (formula "30") (term "0,0,0,0,0,0,1"))
         (rule "inEqSimp_sepPosMonomial0" (formula "30") (term "0,0,0,0,1"))
         (rule "polySimp_mulComm0" (formula "30") (term "1,0,0,0,0,1"))
         (rule "polySimp_rightDist" (formula "30") (term "1,0,0,0,0,1"))
         (rule "polySimp_mulLiterals" (formula "30") (term "1,1,0,0,0,0,1"))
         (rule "polySimp_elimOne" (formula "30") (term "1,1,0,0,0,0,1"))
         (rule "polySimp_rightDist" (formula "30") (term "0,1,0,0,0,0,1"))
         (rule "polySimp_mulLiterals" (formula "30") (term "1,0,1,0,0,0,0,1"))
         (rule "mul_literals" (formula "30") (term "0,0,1,0,0,0,0,1"))
         (rule "polySimp_elimOne" (formula "30") (term "1,0,1,0,0,0,0,1"))
         (rule "cut_direct" (formula "22") (term "0"))
         (branch "CUT: arrayRange(values_0, begin + bucket_begin, -1 + begin + bucket_end) cap allLocs setMinus classifier.sorted_splitters.* cup classifier.tree.tree.* cup arrayRange(values_0, begin + bucket_begin, -1 + begin + bucket_end) = {} TRUE"
             (builtin "One Step Simplification" (formula "23"))
            (rule "Definition_axiom_for_classOf_in_de_wiesler_Classifier" (formula "31") (term "0,1,0,0,0"))
            (rule "Definition_axiom_for_classOf_in_de_wiesler_Classifier" (formula "31") (term "0,1,0,0,1"))
            (rule "cnf_rightDist" (formula "20") (term "0"))
            (rule "distr_forallAnd" (formula "20"))
            (rule "andLeft" (formula "20"))
            (rule "commute_or" (formula "10") (term "0,0,1,0"))
            (rule "commute_or" (formula "19") (term "0,0,1,0"))
            (rule "commute_or" (formula "21") (term "0"))
            (rule "equiv_left" (formula "24"))
            (branch "Case 1"
               (rule "replace_known_left" (formula "33") (term "1,1,0") (ifseqformula "24"))
                (builtin "One Step Simplification" (formula "33") (ifInst ""  (formula "25")))
               (rule "equalityToElementOfRight" (formula "30") (inst "ov=ov") (inst "fv=fv"))
                (builtin "One Step Simplification" (formula "30"))
               (rule "allRight" (formula "30") (inst "sk=ov_0"))
               (rule "allRight" (formula "30") (inst "sk=fv_0"))
               (rule "notRight" (formula "30"))
               (rule "elementOfIntersect" (formula "1"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "andLeft" (formula "1"))
               (rule "applyEq" (formula "2") (term "0") (ifseqformula "1"))
               (rule "elementOfSetMinus" (formula "2"))
                (builtin "One Step Simplification" (formula "2"))
               (rule "notLeft" (formula "2"))
               (rule "elementOfUnion" (formula "27"))
               (rule "orRight" (formula "27"))
               (rule "elementOfArrayRange" (formula "28") (inst "iv=iv"))
               (rule "eqSymm" (formula "28") (term "0,0,0,1"))
               (rule "inEqSimp_commuteLeq" (formula "28") (term "1,0,0,1"))
               (rule "elementOfUnion" (formula "27"))
                (builtin "One Step Simplification" (formula "27"))
               (rule "closeTrue" (formula "27"))
            )
            (branch "Case 2"
               (rule "allRight" (formula "24") (inst "sk=i_0"))
               (rule "orRight" (formula "24"))
               (rule "orRight" (formula "24"))
               (rule "allRight" (formula "27") (inst "sk=i_1"))
               (rule "orRight" (formula "27"))
               (rule "orRight" (formula "27"))
               (rule "inEqSimp_geqRight" (formula "26"))
               (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
               (rule "inEqSimp_geqRight" (formula "26"))
               (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
               (rule "polySimp_rightDist" (formula "1") (term "0,1,0,0"))
               (rule "mul_literals" (formula "1") (term "0,0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
               (rule "polySimp_addAssoc" (formula "1") (term "0,0,0"))
               (rule "add_literals" (formula "1") (term "0,0,0,0"))
               (rule "inEqSimp_leqRight" (formula "26"))
               (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
               (rule "polySimp_rightDist" (formula "1") (term "0,1,0,0"))
               (rule "mul_literals" (formula "1") (term "0,0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
               (rule "polySimp_addAssoc" (formula "1") (term "0,0,0"))
               (rule "add_literals" (formula "1") (term "0,0,0,0"))
               (rule "add_zero_left" (formula "1") (term "0,0,0"))
               (rule "inEqSimp_geqRight" (formula "29"))
               (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
               (rule "inEqSimp_geqRight" (formula "29"))
               (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
               (rule "polySimp_rightDist" (formula "1") (term "0,1,0,0"))
               (rule "mul_literals" (formula "1") (term "0,0,1,0,0"))
               (rule "inEqSimp_leqRight" (formula "29"))
               (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
               (rule "polySimp_rightDist" (formula "1") (term "0,1,0,0"))
               (rule "mul_literals" (formula "1") (term "0,0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "2") (term "0,0"))
               (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
               (rule "polySimp_addAssoc" (formula "2") (term "0,0,0"))
               (rule "add_literals" (formula "2") (term "0,0,0,0"))
               (rule "polySimp_addAssoc" (formula "1") (term "0,0,0"))
               (rule "add_literals" (formula "1") (term "0,0,0,0"))
               (rule "add_zero_left" (formula "1") (term "0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "6"))
               (rule "polySimp_mulComm0" (formula "6") (term "1"))
               (rule "polySimp_rightDist" (formula "6") (term "1"))
               (rule "mul_literals" (formula "6") (term "0,1"))
               (rule "polySimp_mulLiterals" (formula "6") (term "1,1"))
               (rule "polySimp_elimOne" (formula "6") (term "1,1"))
               (rule "inEqSimp_sepPosMonomial0" (formula "5"))
               (rule "polySimp_mulComm0" (formula "5") (term "1"))
               (rule "polySimp_rightDist" (formula "5") (term "1"))
               (rule "polySimp_mulLiterals" (formula "5") (term "1,1"))
               (rule "polySimp_elimOne" (formula "5") (term "1,1"))
               (rule "polySimp_rightDist" (formula "5") (term "0,1"))
               (rule "polySimp_mulLiterals" (formula "5") (term "1,0,1"))
               (rule "mul_literals" (formula "5") (term "0,0,1"))
               (rule "polySimp_elimOne" (formula "5") (term "1,0,1"))
               (rule "inEqSimp_sepPosMonomial1" (formula "4"))
               (rule "polySimp_mulComm0" (formula "4") (term "1"))
               (rule "polySimp_rightDist" (formula "4") (term "1"))
               (rule "polySimp_mulLiterals" (formula "4") (term "1,1"))
               (rule "polySimp_elimOne" (formula "4") (term "1,1"))
               (rule "polySimp_mulAssoc" (formula "4") (term "0,1"))
               (rule "polySimp_mulComm0" (formula "4") (term "0,0,1"))
               (rule "polySimp_mulLiterals" (formula "4") (term "0,1"))
               (rule "polySimp_elimOne" (formula "4") (term "0,1"))
               (rule "inEqSimp_sepPosMonomial0" (formula "3"))
               (rule "polySimp_mulComm0" (formula "3") (term "1"))
               (rule "polySimp_rightDist" (formula "3") (term "1"))
               (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
               (rule "mul_literals" (formula "3") (term "0,1"))
               (rule "polySimp_elimOne" (formula "3") (term "1,1"))
               (rule "inEqSimp_sepPosMonomial0" (formula "2"))
               (rule "polySimp_mulComm0" (formula "2") (term "1"))
               (rule "polySimp_rightDist" (formula "2") (term "1"))
               (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
               (rule "polySimp_elimOne" (formula "2") (term "1,1"))
               (rule "polySimp_rightDist" (formula "2") (term "0,1"))
               (rule "mul_literals" (formula "2") (term "0,0,1"))
               (rule "polySimp_mulLiterals" (formula "2") (term "1,0,1"))
               (rule "polySimp_elimOne" (formula "2") (term "1,0,1"))
               (rule "inEqSimp_sepPosMonomial1" (formula "1"))
               (rule "polySimp_mulComm0" (formula "1") (term "1"))
               (rule "polySimp_rightDist" (formula "1") (term "1"))
               (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
               (rule "polySimp_elimOne" (formula "1") (term "1,1"))
               (rule "polySimp_mulAssoc" (formula "1") (term "0,1"))
               (rule "polySimp_mulComm0" (formula "1") (term "0,0,1"))
               (rule "polySimp_mulLiterals" (formula "1") (term "0,1"))
               (rule "polySimp_elimOne" (formula "1") (term "0,1"))
               (rule "pullOutSelect" (formula "3") (term "0") (inst "selectSK=arr_0"))
               (rule "simplifySelectOfAnon" (formula "3"))
                (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "36")) (ifInst ""  (formula "10")))
               (rule "inEqSimp_homoInEq0" (formula "4"))
               (rule "polySimp_addComm1" (formula "4") (term "0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "4"))
               (rule "polySimp_mulComm0" (formula "4") (term "1"))
               (rule "polySimp_rightDist" (formula "4") (term "1"))
               (rule "polySimp_mulLiterals" (formula "4") (term "1,1"))
               (rule "mul_literals" (formula "4") (term "0,1"))
               (rule "polySimp_elimOne" (formula "4") (term "1,1"))
               (rule "elementOfSetMinus" (formula "3") (term "0,0"))
                (builtin "One Step Simplification" (formula "3"))
               (rule "ifthenelse_negated" (formula "3") (term "0"))
               (rule "elementOfUnion" (formula "3") (term "0,0"))
               (rule "elementOfArrayRangeConcrete" (formula "3") (term "1,0,0"))
                (builtin "One Step Simplification" (formula "3"))
               (rule "inEqSimp_homoInEq0" (formula "3") (term "1,1,0,0"))
               (rule "polySimp_mulComm0" (formula "3") (term "1,0,1,1,0,0"))
               (rule "polySimp_rightDist" (formula "3") (term "1,0,1,1,0,0"))
               (rule "mul_literals" (formula "3") (term "0,1,0,1,1,0,0"))
               (rule "polySimp_addAssoc" (formula "3") (term "0,1,1,0,0"))
               (rule "polySimp_addComm1" (formula "3") (term "0,0,1,1,0,0"))
               (rule "polySimp_addComm1" (formula "3") (term "0,0,0,1,1,0,0"))
               (rule "add_literals" (formula "3") (term "0,0,0,0,1,1,0,0"))
               (rule "inEqSimp_homoInEq0" (formula "3") (term "0,1,0,0"))
               (rule "polySimp_mulComm0" (formula "3") (term "1,0,0,1,0,0"))
               (rule "polySimp_rightDist" (formula "3") (term "1,0,0,1,0,0"))
               (rule "polySimp_mulComm0" (formula "3") (term "0,1,0,0,1,0,0"))
               (rule "polySimp_addComm1" (formula "3") (term "0,0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "3") (term "0,0,0,1,0,0"))
               (rule "inEqSimp_sepNegMonomial1" (formula "3") (term "1,1,0,0"))
               (rule "polySimp_mulLiterals" (formula "3") (term "0,1,1,0,0"))
               (rule "polySimp_elimOne" (formula "3") (term "0,1,1,0,0"))
               (rule "replace_known_left" (formula "3") (term "1,1,0,0") (ifseqformula "2"))
                (builtin "One Step Simplification" (formula "3"))
               (rule "inEqSimp_sepPosMonomial1" (formula "3") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "3") (term "1,1,0,0"))
               (rule "polySimp_rightDist" (formula "3") (term "1,1,0,0"))
               (rule "polySimp_mulLiterals" (formula "3") (term "1,1,1,0,0"))
               (rule "polySimp_elimOne" (formula "3") (term "1,1,1,0,0"))
               (rule "polySimp_rightDist" (formula "3") (term "0,1,1,0,0"))
               (rule "polySimp_mulLiterals" (formula "3") (term "1,0,1,1,0,0"))
               (rule "mul_literals" (formula "3") (term "0,0,1,1,0,0"))
               (rule "polySimp_elimOne" (formula "3") (term "1,0,1,1,0,0"))
               (rule "inEqSimp_subsumption1" (formula "3") (term "1,0,0") (ifseqformula "1"))
               (rule "inEqSimp_homoInEq0" (formula "3") (term "0,1,0,0"))
               (rule "polySimp_mulComm0" (formula "3") (term "1,0,0,1,0,0"))
               (rule "polySimp_rightDist" (formula "3") (term "1,0,0,1,0,0"))
               (rule "polySimp_rightDist" (formula "3") (term "0,1,0,0,1,0,0"))
               (rule "mul_literals" (formula "3") (term "0,0,1,0,0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "3") (term "0,0,1,0,0"))
               (rule "polySimp_addComm1" (formula "3") (term "0,0,0,1,0,0"))
               (rule "polySimp_pullOutFactor1b" (formula "3") (term "0,0,1,0,0"))
               (rule "add_literals" (formula "3") (term "1,1,0,0,1,0,0"))
               (rule "times_zero_1" (formula "3") (term "1,0,0,1,0,0"))
               (rule "add_zero_right" (formula "3") (term "0,0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "3") (term "0,0,1,0,0"))
               (rule "polySimp_addComm0" (formula "3") (term "0,0,0,1,0,0"))
               (rule "polySimp_pullOutFactor1b" (formula "3") (term "0,0,1,0,0"))
               (rule "add_literals" (formula "3") (term "1,1,0,0,1,0,0"))
               (rule "times_zero_1" (formula "3") (term "1,0,0,1,0,0"))
               (rule "add_literals" (formula "3") (term "0,0,1,0,0"))
               (rule "qeq_literals" (formula "3") (term "0,1,0,0"))
                (builtin "One Step Simplification" (formula "3"))
               (rule "applyEqReverse" (formula "4") (term "1,1") (ifseqformula "3"))
               (rule "hideAuxiliaryEq" (formula "3"))
               (rule "inEqSimp_exactShadow3" (formula "4") (ifseqformula "5"))
               (rule "polySimp_rightDist" (formula "4") (term "0,0"))
               (rule "polySimp_mulComm0" (formula "4") (term "0,0,0"))
               (rule "polySimp_addAssoc" (formula "4") (term "0"))
               (rule "polySimp_addComm1" (formula "4") (term "0,0"))
               (rule "polySimp_addAssoc" (formula "4") (term "0,0,0"))
               (rule "polySimp_addComm0" (formula "4") (term "0,0,0,0"))
               (rule "polySimp_pullOutFactor2b" (formula "4") (term "0,0,0"))
               (rule "add_literals" (formula "4") (term "1,1,0,0,0"))
               (rule "times_zero_1" (formula "4") (term "1,0,0,0"))
               (rule "add_zero_right" (formula "4") (term "0,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "4"))
               (rule "polySimp_mulComm0" (formula "4") (term "1"))
               (rule "polySimp_rightDist" (formula "4") (term "1"))
               (rule "mul_literals" (formula "4") (term "0,1"))
               (rule "polySimp_mulLiterals" (formula "4") (term "1,1"))
               (rule "polySimp_elimOne" (formula "4") (term "1,1"))
               (rule "pullOutSelect" (formula "3") (term "0") (inst "selectSK=arr_1"))
               (rule "simplifySelectOfAnon" (formula "3"))
                (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "37")) (ifInst ""  (formula "11")))
               (rule "inEqSimp_homoInEq1" (formula "4"))
               (rule "polySimp_addComm1" (formula "4") (term "0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "4"))
               (rule "polySimp_mulComm0" (formula "4") (term "1"))
               (rule "polySimp_rightDist" (formula "4") (term "1"))
               (rule "polySimp_mulLiterals" (formula "4") (term "1,1"))
               (rule "mul_literals" (formula "4") (term "0,1"))
               (rule "polySimp_elimOne" (formula "4") (term "1,1"))
               (rule "elementOfSetMinus" (formula "3") (term "0,0"))
                (builtin "One Step Simplification" (formula "3"))
               (rule "ifthenelse_negated" (formula "3") (term "0"))
               (rule "elementOfUnion" (formula "3") (term "0,0"))
               (rule "elementOfArrayRangeConcrete" (formula "3") (term "1,0,0"))
                (builtin "One Step Simplification" (formula "3"))
               (rule "inEqSimp_commuteLeq" (formula "3") (term "0,1,0,0"))
               (rule "replace_known_left" (formula "3") (term "0,1,0,0") (ifseqformula "1"))
                (builtin "One Step Simplification" (formula "3"))
               (rule "inEqSimp_subsumption0" (formula "3") (term "1,0,0") (ifseqformula "2"))
               (rule "inEqSimp_homoInEq0" (formula "3") (term "0,1,0,0"))
               (rule "polySimp_mulComm0" (formula "3") (term "1,0,0,1,0,0"))
               (rule "polySimp_rightDist" (formula "3") (term "1,0,0,1,0,0"))
               (rule "polySimp_rightDist" (formula "3") (term "0,1,0,0,1,0,0"))
               (rule "mul_literals" (formula "3") (term "0,0,1,0,0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "3") (term "0,0,1,0,0"))
               (rule "polySimp_addComm1" (formula "3") (term "0,0,0,1,0,0"))
               (rule "polySimp_pullOutFactor1b" (formula "3") (term "0,0,1,0,0"))
               (rule "add_literals" (formula "3") (term "1,1,0,0,1,0,0"))
               (rule "times_zero_1" (formula "3") (term "1,0,0,1,0,0"))
               (rule "add_zero_right" (formula "3") (term "0,0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "3") (term "0,0,1,0,0"))
               (rule "polySimp_addComm1" (formula "3") (term "0,0,0,1,0,0"))
               (rule "add_literals" (formula "3") (term "0,0,0,0,1,0,0"))
               (rule "polySimp_pullOutFactor1b" (formula "3") (term "0,0,1,0,0"))
               (rule "add_literals" (formula "3") (term "1,1,0,0,1,0,0"))
               (rule "times_zero_1" (formula "3") (term "1,0,0,1,0,0"))
               (rule "add_literals" (formula "3") (term "0,0,1,0,0"))
               (rule "qeq_literals" (formula "3") (term "0,1,0,0"))
                (builtin "One Step Simplification" (formula "3"))
               (rule "applyEqReverse" (formula "4") (term "1,1") (ifseqformula "3"))
               (rule "hideAuxiliaryEq" (formula "3"))
               (rule "inEqSimp_exactShadow3" (formula "1") (ifseqformula "2"))
               (rule "polySimp_rightDist" (formula "1") (term "0,0"))
               (rule "polySimp_mulComm0" (formula "1") (term "0,0,0"))
               (rule "polySimp_addAssoc" (formula "1") (term "0"))
               (rule "polySimp_addComm1" (formula "1") (term "0,0"))
               (rule "polySimp_addAssoc" (formula "1") (term "0,0,0"))
               (rule "polySimp_addComm0" (formula "1") (term "0,0,0,0"))
               (rule "polySimp_pullOutFactor2b" (formula "1") (term "0,0,0"))
               (rule "add_literals" (formula "1") (term "1,1,0,0,0"))
               (rule "times_zero_1" (formula "1") (term "1,0,0,0"))
               (rule "add_zero_right" (formula "1") (term "0,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "1"))
               (rule "polySimp_mulComm0" (formula "1") (term "1"))
               (rule "polySimp_rightDist" (formula "1") (term "1"))
               (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
               (rule "mul_literals" (formula "1") (term "0,1"))
               (rule "polySimp_elimOne" (formula "1") (term "1,1"))
               (rule "equalityToElementOfRight" (formula "35") (inst "ov=ov") (inst "fv=fv"))
                (builtin "One Step Simplification" (formula "35"))
               (rule "allRight" (formula "35") (inst "sk=ov_0"))
               (rule "allRight" (formula "35") (inst "sk=fv_0"))
               (rule "notRight" (formula "35"))
               (rule "elementOfIntersect" (formula "1"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "andLeft" (formula "1"))
               (rule "applyEq" (formula "2") (term "0") (ifseqformula "1"))
               (rule "elementOfSetMinus" (formula "2"))
                (builtin "One Step Simplification" (formula "2"))
               (rule "notLeft" (formula "2"))
               (rule "elementOfUnion" (formula "32"))
               (rule "orRight" (formula "32"))
               (rule "elementOfArrayRange" (formula "33") (inst "iv=iv"))
               (rule "eqSymm" (formula "33") (term "0,0,0,1"))
               (rule "inEqSimp_commuteLeq" (formula "33") (term "1,0,0,1"))
               (rule "elementOfUnion" (formula "32"))
                (builtin "One Step Simplification" (formula "32"))
               (rule "closeTrue" (formula "32"))
            )
         )
         (branch "CUT: arrayRange(values_0, begin + bucket_begin, -1 + begin + bucket_end) cap allLocs setMinus classifier.sorted_splitters.* cup classifier.tree.tree.* cup arrayRange(values_0, begin + bucket_begin, -1 + begin + bucket_end) = {} FALSE"
             (builtin "One Step Simplification" (formula "22"))
            (rule "true_left" (formula "22"))
            (rule "Definition_axiom_for_classOf_in_de_wiesler_Classifier" (formula "30") (term "0,1,0,0,0"))
            (rule "Definition_axiom_for_classOf_in_de_wiesler_Classifier" (formula "30") (term "0,1,0,0,1"))
            (rule "cnf_rightDist" (formula "20") (term "0"))
            (rule "distr_forallAnd" (formula "20"))
            (rule "andLeft" (formula "20"))
            (rule "commute_or" (formula "10") (term "0,0,1,0"))
            (rule "commute_or" (formula "19") (term "0,0,1,0"))
            (rule "commute_or" (formula "21") (term "0"))
            (rule "equalityToElementOfRight" (formula "28") (inst "ov=ov") (inst "fv=fv"))
             (builtin "One Step Simplification" (formula "28"))
            (rule "allRight" (formula "28") (inst "sk=ov_0"))
            (rule "allRight" (formula "28") (inst "sk=fv_0"))
            (rule "notRight" (formula "28"))
            (rule "elementOfIntersect" (formula "1"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "andLeft" (formula "1"))
            (rule "applyEq" (formula "2") (term "0") (ifseqformula "1"))
            (rule "elementOfSetMinus" (formula "2"))
             (builtin "One Step Simplification" (formula "2"))
            (rule "notLeft" (formula "2"))
            (rule "elementOfUnion" (formula "24"))
            (rule "orRight" (formula "24"))
            (rule "elementOfUnion" (formula "24"))
             (builtin "One Step Simplification" (formula "24"))
            (rule "closeTrue" (formula "24"))
         )
      )
   )
)
(branch "Case 2"
   (rule "impLeft" (formula "13") (userinteraction))
   (branch "Case 1"
       (builtin "One Step Simplification" (formula "13") (ifInst ""  (formula "1")) (ifInst ""  (formula "3")) (ifInst ""  (formula "14")) (userinteraction))
      (rule "wellFormedAnon" (formula "13") (term "0"))
      (rule "translateJavaAddInt" (formula "13") (term "1,0,0,1,0,1"))
      (rule "translateJavaSubInt" (formula "13") (term "2,0,0,1,0,1"))
      (rule "translateJavaAddInt" (formula "13") (term "1,1,1"))
      (rule "translateJavaSubInt" (formula "13") (term "2,1,1"))
      (rule "translateJavaAddInt" (formula "13") (term "0,2,0,0,1,0,1"))
      (rule "translateJavaAddInt" (formula "13") (term "0,2,1,1"))
      (rule "replace_known_left" (formula "13") (term "1,0") (ifseqformula "2"))
       (builtin "One Step Simplification" (formula "13") (ifInst ""  (formula "1")))
      (rule "polySimp_elimSub" (formula "13") (term "2,1"))
      (rule "mul_literals" (formula "13") (term "1,2,1"))
      (rule "polySimp_elimSub" (formula "13") (term "2,0,0,1,0"))
      (rule "polySimp_elimOneLeft0" (formula "13") (term "1,2,0,0,1,0"))
      (rule "polySimp_addComm1" (formula "13") (term "2,1"))
      (rule "polySimp_addComm1" (formula "13") (term "2,0,0,1,0"))
      (rule "polySimp_addComm0" (formula "13") (term "0,2,1"))
      (rule "polySimp_addComm0" (formula "13") (term "0,2,0,0,1,0"))
      (rule "disjointDefinition" (formula "13"))
      (rule "commuteIntersection" (formula "13") (term "0"))
      (rule "commuteUnion" (formula "13") (term "0,1,1,0"))
      (rule "commuteUnion_2" (formula "13") (term "1,1,0"))
      (rule "equalityToElementOfRight" (formula "13") (inst "fv=fv") (inst "ov=ov"))
       (builtin "One Step Simplification" (formula "13"))
      (rule "allRight" (formula "13") (inst "sk=ov_0"))
      (rule "allRight" (formula "13") (inst "sk=fv_0"))
      (rule "notRight" (formula "13"))
      (rule "elementOfIntersect" (formula "1"))
      (rule "andLeft" (formula "1"))
      (rule "elementOfSetMinus" (formula "2"))
       (builtin "One Step Simplification" (formula "2"))
      (rule "notLeft" (formula "2"))
      (rule "elementOfArrayRange" (formula "1") (inst "iv=iv"))
      (rule "andLeft" (formula "1"))
      (rule "exLeft" (formula "2") (inst "sk=iv_0"))
      (rule "andLeft" (formula "2"))
      (rule "andLeft" (formula "2"))
      (rule "inEqSimp_commuteLeq" (formula "3"))
      (rule "applyEqRigid" (formula "17") (term "1") (ifseqformula "2"))
      (rule "applyEq" (formula "17") (term "0") (ifseqformula "1"))
      (rule "elementOfUnion" (formula "17"))
      (rule "orRight" (formula "17"))
      (rule "elementOfArrayRangeConcrete" (formula "18"))
       (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "4")))
      (rule "inEqSimp_leqRight" (formula "18"))
      (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
      (rule "polySimp_addComm1" (formula "1") (term "0"))
      (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
      (rule "inEqSimp_sepNegMonomial1" (formula "1"))
      (rule "polySimp_mulLiterals" (formula "1") (term "0"))
      (rule "polySimp_elimOne" (formula "1") (term "0"))
      (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "4"))
      (rule "andLeft" (formula "1"))
      (rule "inEqSimp_homoInEq1" (formula "1"))
      (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
      (rule "polySimp_rightDist" (formula "1") (term "1,0"))
      (rule "polySimp_rightDist" (formula "1") (term "0,1,0"))
      (rule "mul_literals" (formula "1") (term "0,0,1,0"))
      (rule "polySimp_addAssoc" (formula "1") (term "0"))
      (rule "polySimp_addComm1" (formula "1") (term "0,0"))
      (rule "polySimp_pullOutFactor1b" (formula "1") (term "0"))
      (rule "add_literals" (formula "1") (term "1,1,0"))
      (rule "times_zero_1" (formula "1") (term "1,0"))
      (rule "add_zero_right" (formula "1") (term "0"))
      (rule "polySimp_addAssoc" (formula "1") (term "0"))
      (rule "polySimp_addComm0" (formula "1") (term "0,0"))
      (rule "polySimp_pullOutFactor1b" (formula "1") (term "0"))
      (rule "add_literals" (formula "1") (term "1,1,0"))
      (rule "times_zero_1" (formula "1") (term "1,0"))
      (rule "add_literals" (formula "1") (term "0"))
      (rule "leq_literals" (formula "1"))
      (rule "closeFalse" (formula "1"))
   )
   (branch "Case 2"
       (builtin "One Step Simplification" (formula "9"))
       (builtin "One Step Simplification" (formula "7"))
       (builtin "One Step Simplification" (formula "6"))
       (builtin "One Step Simplification" (formula "5"))
       (builtin "One Step Simplification" (formula "4"))
       (builtin "One Step Simplification" (formula "12"))
      (rule "true_left" (formula "5"))
      (rule "translateJavaAddInt" (formula "7") (term "1,0,0,1,1,0,0"))
      (rule "translateJavaSubInt" (formula "7") (term "2,0,0,1,1,0,0"))
      (rule "translateJavaAddInt" (formula "7") (term "3,0"))
      (rule "translateJavaAddInt" (formula "7") (term "4,0"))
      (rule "translateJavaAddInt" (formula "7") (term "3,1"))
      (rule "translateJavaAddInt" (formula "7") (term "4,1"))
      (rule "translateJavaAddInt" (formula "8") (term "1,0,0,1,1,0,0"))
      (rule "translateJavaSubInt" (formula "8") (term "2,0,0,1,1,0,0"))
      (rule "translateJavaAddInt" (formula "8") (term "2,0"))
      (rule "translateJavaAddInt" (formula "8") (term "3,0"))
      (rule "translateJavaAddInt" (formula "8") (term "2,1"))
      (rule "translateJavaAddInt" (formula "8") (term "3,1"))
      (rule "translateJavaAddInt" (formula "11") (term "3,0,0,0"))
      (rule "translateJavaSubInt" (formula "11") (term "0,1,0,1,0"))
      (rule "translateJavaAddInt" (formula "11") (term "4,0,0,0"))
      (rule "translateJavaSubInt" (formula "11") (term "0,0,0,1,0"))
      (rule "translateJavaAddInt" (formula "11") (term "1,0,0,1,1,0,0,1,1,1"))
      (rule "translateJavaAddInt" (formula "11") (term "3,0,1,1,1"))
      (rule "translateJavaAddInt" (formula "11") (term "2,0,1,1,0"))
      (rule "translateJavaAddInt" (formula "11") (term "4,0,0,1"))
      (rule "translateJavaAddInt" (formula "11") (term "3,0,1,1,0"))
      (rule "translateJavaAddInt" (formula "11") (term "1,0,0,1,1,0,0,0,1"))
      (rule "translateJavaSubInt" (formula "11") (term "2,0,0,1,1,0,0,0,1"))
      (rule "translateJavaAddInt" (formula "11") (term "3,0,0,1"))
      (rule "translateJavaAddInt" (formula "11") (term "2,0,1,1,1"))
      (rule "translateJavaSubInt" (formula "11") (term "0,0,0,1,1"))
      (rule "translateJavaSubInt" (formula "11") (term "0,1,0,1,1"))
      (rule "translateJavaSubInt" (formula "11") (term "2,0,0,1,1,0,0,1,1,1"))
      (rule "translateJavaAddInt" (formula "7") (term "0,2,0,0,1,1,0,0"))
      (rule "translateJavaAddInt" (formula "8") (term "0,2,0,0,1,1,0,0"))
      (rule "translateJavaAddInt" (formula "11") (term "0,2,0,0,1,1,0,0,0,1"))
      (rule "translateJavaAddInt" (formula "11") (term "0,2,0,0,1,1,0,0,1,1,1"))
      (rule "replace_known_right" (formula "3") (term "0") (ifseqformula "9"))
       (builtin "One Step Simplification" (formula "3"))
      (rule "replace_known_right" (formula "4") (term "0") (ifseqformula "10"))
       (builtin "One Step Simplification" (formula "4"))
      (rule "polySimp_elimSub" (formula "11") (term "0,1,0,1,0"))
      (rule "polySimp_elimSub" (formula "11") (term "0,0,0,1,0"))
      (rule "polySimp_elimSub" (formula "11") (term "0,0,0,1,1"))
      (rule "polySimp_elimSub" (formula "11") (term "0,1,0,1,1"))
      (rule "polySimp_elimSub" (formula "7") (term "2,0,0,1,1,0,0"))
      (rule "mul_literals" (formula "7") (term "1,2,0,0,1,1,0,0"))
      (rule "polySimp_elimSub" (formula "8") (term "2,0,0,1,1,0,0"))
      (rule "mul_literals" (formula "8") (term "1,2,0,0,1,1,0,0"))
      (rule "polySimp_elimSub" (formula "11") (term "2,0,0,1,1,0,0,0,1"))
      (rule "mul_literals" (formula "11") (term "1,2,0,0,1,1,0,0,0,1"))
      (rule "polySimp_elimSub" (formula "11") (term "2,0,0,1,1,0,0,1,1,1"))
      (rule "mul_literals" (formula "11") (term "1,2,0,0,1,1,0,0,1,1,1"))
      (rule "polySimp_addComm0" (formula "11") (term "0,1,0,1,0"))
      (rule "polySimp_addComm0" (formula "11") (term "0,0,0,1,0"))
      (rule "polySimp_addComm0" (formula "11") (term "0,0,0,1,1"))
      (rule "polySimp_addComm0" (formula "11") (term "0,1,0,1,1"))
      (rule "polySimp_addComm1" (formula "7") (term "2,0,0,1,1,0,0"))
      (rule "polySimp_addComm1" (formula "8") (term "2,0,0,1,1,0,0"))
      (rule "polySimp_addComm1" (formula "11") (term "2,0,0,1,1,0,0,0,1"))
      (rule "polySimp_addComm1" (formula "11") (term "2,0,0,1,1,0,0,1,1,1"))
      (rule "polySimp_addComm0" (formula "7") (term "0,2,0,0,1,1,0,0"))
      (rule "polySimp_addComm0" (formula "8") (term "0,2,0,0,1,1,0,0"))
      (rule "polySimp_addComm0" (formula "11") (term "0,2,0,0,1,1,0,0,0,1"))
      (rule "polySimp_addComm0" (formula "11") (term "0,2,0,0,1,1,0,0,1,1,1"))
      (rule "inEqSimp_homoInEq0" (formula "11") (term "1,0,1,0"))
      (rule "polySimp_mulComm0" (formula "11") (term "1,0,1,0,1,0"))
      (rule "polySimp_rightDist" (formula "11") (term "1,0,1,0,1,0"))
      (rule "polySimp_mulAssoc" (formula "11") (term "0,1,0,1,0,1,0"))
      (rule "polySimp_mulComm0" (formula "11") (term "0,0,1,0,1,0,1,0"))
      (rule "polySimp_mulLiterals" (formula "11") (term "0,1,0,1,0,1,0"))
      (rule "polySimp_elimOne" (formula "11") (term "0,1,0,1,0,1,0"))
      (rule "polySimp_addAssoc" (formula "11") (term "0,1,0,1,0"))
      (rule "inEqSimp_homoInEq0" (formula "11") (term "0,0,1,0"))
      (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0,1,0"))
      (rule "polySimp_rightDist" (formula "11") (term "1,0,0,0,1,0"))
      (rule "polySimp_mulAssoc" (formula "11") (term "0,1,0,0,0,1,0"))
      (rule "polySimp_mulComm0" (formula "11") (term "0,0,1,0,0,0,1,0"))
      (rule "polySimp_mulLiterals" (formula "11") (term "0,1,0,0,0,1,0"))
      (rule "polySimp_elimOne" (formula "11") (term "0,1,0,0,0,1,0"))
      (rule "polySimp_addAssoc" (formula "11") (term "0,0,0,1,0"))
      (rule "inEqSimp_homoInEq0" (formula "11") (term "0,0,1,1"))
      (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0,1,1"))
      (rule "polySimp_rightDist" (formula "11") (term "1,0,0,0,1,1"))
      (rule "polySimp_mulAssoc" (formula "11") (term "0,1,0,0,0,1,1"))
      (rule "polySimp_mulComm0" (formula "11") (term "0,0,1,0,0,0,1,1"))
      (rule "polySimp_mulLiterals" (formula "11") (term "0,1,0,0,0,1,1"))
      (rule "polySimp_elimOne" (formula "11") (term "0,1,0,0,0,1,1"))
      (rule "polySimp_addAssoc" (formula "11") (term "0,0,0,1,1"))
      (rule "inEqSimp_homoInEq0" (formula "11") (term "1,0,1,1"))
      (rule "polySimp_mulComm0" (formula "11") (term "1,0,1,0,1,1"))
      (rule "polySimp_rightDist" (formula "11") (term "1,0,1,0,1,1"))
      (rule "polySimp_mulAssoc" (formula "11") (term "0,1,0,1,0,1,1"))
      (rule "polySimp_mulComm0" (formula "11") (term "0,0,1,0,1,0,1,1"))
      (rule "polySimp_mulLiterals" (formula "11") (term "0,1,0,1,0,1,1"))
      (rule "polySimp_elimOne" (formula "11") (term "0,1,0,1,0,1,1"))
      (rule "polySimp_addAssoc" (formula "11") (term "0,1,0,1,1"))
      (rule "applyEq" (formula "11") (term "0,1,1,1") (ifseqformula "8"))
      (rule "applyEq" (formula "11") (term "0,0,1") (ifseqformula "7"))
       (builtin "One Step Simplification" (formula "11"))
      (rule "closeTrue" (formula "11"))
   )
)
)
}
