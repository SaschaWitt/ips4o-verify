\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Fri Sep 02 11:04:44 CEST 2022
[NewSMT]NoTypeHierarchy=false
[Labels]UseOriginLabels=true
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[NewSMT]Presburger=false
[SMTSettings]invariantForall=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[Choice]DefaultChoices=JavaCard-JavaCard\\:on , Strings-Strings\\:on , assertions-assertions\\:safe , bigint-bigint\\:on , finalFields-finalFields\\:immutable , floatRules-floatRules\\:strictfpOnly , initialisation-initialisation\\:disableStaticInitialisation , intRules-intRules\\:arithmeticSemanticsIgnoringOF , integerSimplificationRules-integerSimplificationRules\\:full , javaLoopTreatment-javaLoopTreatment\\:efficient , mergeGenerateIsWeakeningGoal-mergeGenerateIsWeakeningGoal\\:off , methodExpansion-methodExpansion\\:modularOnly , modelFields-modelFields\\:treatAsAxiom , moreSeqRules-moreSeqRules\\:on , permissions-permissions\\:off , programRules-programRules\\:Java , reach-reach\\:on , runtimeExceptions-runtimeExceptions\\:ban , sequences-sequences\\:on , wdChecks-wdChecks\\:off , wdOperator-wdOperator\\:L
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_INVARIANT
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_DEF_OPS
[SMTSettings]SelectedTaclets=
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[Strategy]MaximumNumberOfAutomaticApplications=10000
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_DELAYED
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]MPS_OPTIONS_KEY=MPS_MERGE
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[Strategy]Timeout=-1
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_OFF
[SMTSettings]useUninterpretedMultiplication=true
[NewSMT]sqrtSMTTranslation=SMT
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT_INTERNAL
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[NewSMT]identifier=OPEN
[SMTSettings]maxGenericSorts=2
[StrategyProperty]OSS_OPTIONS_KEY=OSS_ON
[NewSMT]Axiomatisations=false
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
[SMTSettings]integersMinimum=-2147483645
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]integersMaximum=2147483645
"
}

\javaSource "../../src";

\proofObligation "#Proof Obligation Settings
#Fri Sep 02 11:04:44 CEST 2022
contract=de.wiesler.Classifier[java.lang.Object\\:\\:<inv>()].JML accessible clause.0
name=de.wiesler.Classifier[java.lang.Object\\:\\:<inv>()].JML accessible clause.0
class=de.uka.ilkd.key.proof.init.DependencyContractPO
";

\proof {
(keyLog "0" (keyUser "Julian" ) (keyVersion "802059dea3"))
(keyLog "1" (keyUser "Julian" ) (keyVersion "802059dea3"))
(keyLog "2" (keyUser "Julian" ) (keyVersion "e1a85b31e7"))
(keyLog "3" (keyUser "Julian" ) (keyVersion "e1a85b31e7"))

(autoModeTime "65560")

(branch "dummy ID"
(rule "impRight" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "3"))
 (builtin "One Step Simplification" (formula "8") (ifInst ""  (formula "6")))
(rule "Class_invariant_axiom_for_de_wiesler_Classifier" (formula "6") (userinteraction))
(rule "andLeft" (formula "6"))
(rule "andLeft" (formula "6"))
(rule "andLeft" (formula "6"))
(rule "andLeft" (formula "6"))
(rule "andLeft" (formula "6"))
(rule "andLeft" (formula "6"))
(rule "andLeft" (formula "7"))
(rule "andLeft" (formula "6"))
(rule "notLeft" (formula "7"))
(rule "notLeft" (formula "6"))
(rule "Class_invariant_axiom_for_de_wiesler_Classifier" (formula "16") (userinteraction))
(rule "andRight" (formula "16"))
(branch "Case 1"
   (rule "andRight" (formula "16"))
   (branch "Case 1"
      (rule "andRight" (formula "16"))
      (branch "Case 1"
         (rule "andRight" (formula "16"))
         (branch "Case 1"
            (rule "andRight" (formula "16"))
            (branch "Case 1"
               (rule "andRight" (formula "16"))
               (branch "Case 1"
                  (rule "andRight" (formula "16"))
                  (branch "Case 1"
                      (builtin "One Step Simplification" (formula "7"))
                     (rule "translateJavaMulInt" (formula "8") (term "1,1"))
                     (rule "translateJavaSubInt" (formula "11") (term "0,2,0"))
                     (rule "translateJavaSubInt" (formula "11") (term "0,2,1"))
                     (rule "notRight" (formula "16"))
                     (rule "close" (formula "14") (ifseqformula "1"))
                  )
                  (branch "Case 2"
                      (builtin "One Step Simplification" (formula "7"))
                     (rule "translateJavaMulInt" (formula "8") (term "1,1"))
                     (rule "translateJavaSubInt" (formula "11") (term "0,2,0"))
                     (rule "translateJavaSubInt" (formula "11") (term "0,2,1"))
                     (rule "notRight" (formula "16"))
                     (rule "close" (formula "15") (ifseqformula "1"))
                  )
               )
               (branch "Case 2"
                  (rule "andRight" (formula "16"))
                  (branch "Case 1"
                     (rule "close" (formula "16") (ifseqformula "6"))
                  )
                  (branch "Case 2"
                     (rule "close" (formula "16") (ifseqformula "7"))
                  )
               )
            )
            (branch "Case 2"
               (rule "close" (formula "16") (ifseqformula "8"))
            )
         )
         (branch "Case 2"
            (rule "close" (formula "16") (ifseqformula "9"))
         )
      )
      (branch "Case 2"
          (builtin "One Step Simplification" (formula "7"))
         (rule "translateJavaSubInt" (formula "11") (term "0,2,0"))
         (rule "translateJavaSubInt" (formula "11") (term "0,2,1"))
         (rule "translateJavaMulInt" (formula "8") (term "1,1"))
         (rule "eqSymm" (formula "11"))
         (rule "eqSymm" (formula "8"))
         (rule "polySimp_elimSub" (formula "11") (term "0,2,1"))
         (rule "mul_literals" (formula "11") (term "1,0,2,1"))
         (rule "polySimp_elimSub" (formula "11") (term "0,2,0"))
         (rule "mul_literals" (formula "11") (term "1,0,2,0"))
         (rule "polySimp_mulComm0" (formula "8") (term "1,0"))
         (rule "polySimp_addComm0" (formula "11") (term "0,2,1"))
         (rule "polySimp_addComm0" (formula "11") (term "0,2,0"))
         (rule "inEqSimp_commuteLeq" (formula "6"))
         (rule "Definition_axiom_for_isSortedSliceTransitive_in_de_wiesler_Functions" (formula "10") (term "0") (inst "i=i") (inst "j=j"))
          (builtin "One Step Simplification" (formula "10"))
         (rule "inEqSimp_ltToLeq" (formula "10") (term "1,0,0,1,0"))
         (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,1,0,0,1,0"))
         (rule "inEqSimp_ltToLeq" (formula "10") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,1,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "10") (term "0,0,0,1,0"))
         (rule "inEqSimp_commuteLeq" (formula "10") (term "0,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "10") (term "1,0,1,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "1,0,0,1,0"))
         (rule "polySimp_mulComm0" (formula "10") (term "1,1,0,0,1,0"))
         (rule "polySimp_rightDist" (formula "10") (term "1,1,0,0,1,0"))
         (rule "polySimp_mulLiterals" (formula "10") (term "1,1,1,0,0,1,0"))
         (rule "mul_literals" (formula "10") (term "0,1,1,0,0,1,0"))
         (rule "polySimp_elimOne" (formula "10") (term "1,1,1,0,0,1,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "10") (term "1,1,0,0"))
         (rule "polySimp_rightDist" (formula "10") (term "1,1,0,0"))
         (rule "polySimp_mulLiterals" (formula "10") (term "1,1,1,0,0"))
         (rule "mul_literals" (formula "10") (term "0,1,1,0,0"))
         (rule "polySimp_elimOne" (formula "10") (term "1,1,1,0,0"))
         (rule "nnf_imp2or" (formula "10") (term "0"))
         (rule "nnf_notAnd" (formula "10") (term "0,0"))
         (rule "inEqSimp_notGeq" (formula "10") (term "0,0,0"))
         (rule "times_zero_1" (formula "10") (term "1,0,0,0,0,0"))
         (rule "add_literals" (formula "10") (term "0,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "0,0,0"))
         (rule "mul_literals" (formula "10") (term "1,0,0,0"))
         (rule "inEqSimp_notLeq" (formula "10") (term "1,0,0"))
         (rule "polySimp_rightDist" (formula "10") (term "1,0,0,1,0,0"))
         (rule "mul_literals" (formula "10") (term "0,1,0,0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "10") (term "0,0,1,0,0"))
         (rule "add_literals" (formula "10") (term "0,0,0,1,0,0"))
         (rule "add_zero_left" (formula "10") (term "0,0,1,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "10") (term "1,0,0"))
         (rule "polySimp_mulLiterals" (formula "10") (term "1,1,0,0"))
         (rule "polySimp_elimOne" (formula "10") (term "1,1,0,0"))
         (rule "nnf_imp2or" (formula "10") (term "0,1,0"))
         (rule "nnf_notAnd" (formula "10") (term "0,0,1,0"))
         (rule "inEqSimp_notGeq" (formula "10") (term "0,0,0,1,0"))
         (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,0,0,0,1,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "0,0,0,1,0"))
         (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,0,1,0"))
         (rule "polySimp_rightDist" (formula "10") (term "1,0,0,0,1,0"))
         (rule "polySimp_mulLiterals" (formula "10") (term "1,1,0,0,0,1,0"))
         (rule "mul_literals" (formula "10") (term "0,1,0,0,0,1,0"))
         (rule "polySimp_elimOne" (formula "10") (term "1,1,0,0,0,1,0"))
         (rule "inEqSimp_notLeq" (formula "10") (term "1,0,0,1,0"))
         (rule "polySimp_rightDist" (formula "10") (term "1,0,0,1,0,0,1,0"))
         (rule "mul_literals" (formula "10") (term "0,1,0,0,1,0,0,1,0"))
         (rule "polySimp_addAssoc" (formula "10") (term "0,0,1,0,0,1,0"))
         (rule "add_literals" (formula "10") (term "0,0,0,1,0,0,1,0"))
         (rule "add_zero_left" (formula "10") (term "0,0,1,0,0,1,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "10") (term "1,0,0,1,0"))
         (rule "polySimp_mulLiterals" (formula "10") (term "1,1,0,0,1,0"))
         (rule "polySimp_elimOne" (formula "10") (term "1,1,0,0,1,0"))
         (rule "Definition_axiom_for_isSortedSliceTransitive_in_de_wiesler_Functions" (formula "16") (term "0") (inst "i=i") (inst "j=j"))
          (builtin "One Step Simplification" (formula "16"))
         (rule "allRight" (formula "16") (inst "sk=i_0"))
         (rule "impRight" (formula "16"))
         (rule "andLeft" (formula "1"))
         (rule "allRight" (formula "18") (inst "sk=j_0"))
         (rule "impRight" (formula "18"))
         (rule "andLeft" (formula "1"))
         (rule "inEqSimp_leqRight" (formula "20"))
         (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
         (rule "polySimp_addComm1" (formula "1") (term "0"))
         (rule "inEqSimp_ltToLeq" (formula "5"))
         (rule "polySimp_mulComm0" (formula "5") (term "1,0,0"))
         (rule "polySimp_addComm1" (formula "5") (term "0"))
         (rule "inEqSimp_ltToLeq" (formula "3"))
         (rule "polySimp_mulComm0" (formula "3") (term "1,0,0"))
         (rule "polySimp_addComm1" (formula "3") (term "0"))
         (rule "inEqSimp_commuteLeq" (formula "4"))
         (rule "inEqSimp_commuteLeq" (formula "2"))
         (rule "inEqSimp_sepNegMonomial1" (formula "1"))
         (rule "polySimp_mulLiterals" (formula "1") (term "0"))
         (rule "polySimp_elimOne" (formula "1") (term "0"))
         (rule "inEqSimp_sepNegMonomial0" (formula "5"))
         (rule "polySimp_mulLiterals" (formula "5") (term "0"))
         (rule "polySimp_elimOne" (formula "5") (term "0"))
         (rule "inEqSimp_sepNegMonomial0" (formula "3"))
         (rule "polySimp_mulLiterals" (formula "3") (term "0"))
         (rule "polySimp_elimOne" (formula "3") (term "0"))
         (rule "pullOutSelect" (formula "1") (term "1,1") (inst "selectSK=arr_0"))
         (rule "simplifySelectOfAnon" (formula "1"))
          (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "20")))
         (rule "elementOfSetMinus" (formula "1") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "elementOfUnion" (formula "1") (term "0,0,0,0"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "ifthenelse_negated" (formula "1") (term "0"))
         (rule "pullOutSelect" (formula "2") (term "0") (inst "selectSK=arr_1"))
         (rule "simplifySelectOfAnon" (formula "2"))
          (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "21")))
         (rule "elementOfSetMinus" (formula "2") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "2"))
         (rule "elementOfUnion" (formula "2") (term "0,0,0,0"))
          (builtin "One Step Simplification" (formula "2"))
         (rule "ifthenelse_negated" (formula "2") (term "0"))
         (rule "Class_invariant_axiom_for_de_wiesler_Tree" (formula "19") (inst "i=i") (inst "i_0=i_0"))
          (builtin "One Step Simplification" (formula "19"))
         (rule "translateJavaSubInt" (formula "19") (term "0,2,1,1,0,1"))
         (rule "translateJavaSubInt" (formula "19") (term "3,0,1,0,0"))
         (rule "andLeft" (formula "19"))
         (rule "andLeft" (formula "19"))
         (rule "andLeft" (formula "19"))
         (rule "andLeft" (formula "19"))
         (rule "andLeft" (formula "19"))
         (rule "andLeft" (formula "19"))
         (rule "andLeft" (formula "21"))
         (rule "andLeft" (formula "19"))
         (rule "andLeft" (formula "20"))
         (rule "andLeft" (formula "19"))
         (rule "notLeft" (formula "19"))
         (rule "notLeft" (formula "19"))
         (rule "eqSymm" (formula "27") (term "1,0"))
         (rule "polySimp_elimSub" (formula "25") (term "3,0"))
         (rule "mul_literals" (formula "25") (term "1,3,0"))
         (rule "polySimp_elimSub" (formula "27") (term "0,2,0,1,0"))
         (rule "mul_literals" (formula "27") (term "1,0,2,0,1,0"))
         (rule "polySimp_addComm0" (formula "25") (term "3,0"))
         (rule "polySimp_addComm0" (formula "27") (term "0,2,0,1,0"))
         (rule "inEqSimp_ltToLeq" (formula "27") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "27") (term "1,0,0,1,0,0"))
         (rule "inEqSimp_ltToLeq" (formula "26") (term "1,1,0"))
         (rule "polySimp_mulComm0" (formula "26") (term "1,0,0,1,1,0"))
         (rule "inEqSimp_ltToLeq" (formula "26") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "26") (term "1,0,0,1,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "27") (term "0,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "26") (term "0,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "26") (term "0,1,0"))
         (rule "inEqSimp_commuteLeq" (formula "24"))
         (rule "inEqSimp_commuteLeq" (formula "23"))
         (rule "inEqSimp_commuteLeq" (formula "22"))
         (rule "inEqSimp_commuteLeq" (formula "19"))
         (rule "applyEq" (formula "22") (term "0") (ifseqformula "21"))
         (rule "applyEq" (formula "15") (term "2,0") (ifseqformula "21"))
         (rule "applyEq" (formula "29") (term "0") (ifseqformula "16"))
         (rule "applyEq" (formula "25") (term "1,0") (ifseqformula "16"))
         (rule "applyEq" (formula "18") (term "1,0,2,0") (ifseqformula "21"))
         (rule "eqSymm" (formula "18"))
         (rule "applyEq" (formula "7") (term "0") (ifseqformula "21"))
         (rule "applyEq" (formula "17") (term "1,1,0,0") (ifseqformula "21"))
         (rule "applyEq" (formula "24") (term "0,0") (ifseqformula "16"))
         (rule "inEqSimp_commuteGeq" (formula "24"))
         (rule "applyEq" (formula "15") (term "0,1,0") (ifseqformula "21"))
         (rule "applyEq" (formula "5") (term "0") (ifseqformula "21"))
         (rule "applyEq" (formula "23") (term "1") (ifseqformula "21"))
         (rule "applyEq" (formula "17") (term "1,1,0,0,1,0") (ifseqformula "21"))
         (rule "applyEq" (formula "27") (term "1,0,1,0") (ifseqformula "16"))
         (rule "applyEq" (formula "25") (term "1,3,0") (ifseqformula "21"))
         (rule "applyEq" (formula "26") (term "0,1,0,0,1,0,0") (ifseqformula "21"))
         (rule "applyEq" (formula "27") (term "0,1,0,0,1,0,0") (ifseqformula "21"))
         (rule "applyEq" (formula "26") (term "0,1,0,0,1,1,0") (ifseqformula "21"))
         (rule "applyEq" (formula "18") (term "1,0,2,0") (ifseqformula "21"))
         (rule "eqSymm" (formula "18"))
         (rule "applyEq" (formula "24") (term "0") (ifseqformula "21"))
         (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "26") (term "1,1,0,0"))
         (rule "polySimp_rightDist" (formula "26") (term "1,1,0,0"))
         (rule "polySimp_mulLiterals" (formula "26") (term "1,1,1,0,0"))
         (rule "mul_literals" (formula "26") (term "0,1,1,0,0"))
         (rule "polySimp_elimOne" (formula "26") (term "1,1,1,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "27") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "27") (term "1,1,0,0"))
         (rule "polySimp_rightDist" (formula "27") (term "1,1,0,0"))
         (rule "polySimp_mulLiterals" (formula "27") (term "1,1,1,0,0"))
         (rule "mul_literals" (formula "27") (term "0,1,1,0,0"))
         (rule "polySimp_elimOne" (formula "27") (term "1,1,1,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "1,1,0"))
         (rule "polySimp_mulComm0" (formula "26") (term "1,1,1,0"))
         (rule "polySimp_rightDist" (formula "26") (term "1,1,1,0"))
         (rule "mul_literals" (formula "26") (term "0,1,1,1,0"))
         (rule "polySimp_mulLiterals" (formula "26") (term "1,1,1,1,0"))
         (rule "polySimp_elimOne" (formula "26") (term "1,1,1,1,0"))
         (rule "inEqSimp_exactShadow3" (formula "22") (ifseqformula "24"))
         (rule "mul_literals" (formula "22") (term "0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "22"))
         (rule "mul_literals" (formula "22") (term "1"))
         (rule "inEqSimp_exactShadow3" (formula "5") (ifseqformula "25"))
         (rule "polySimp_rightDist" (formula "5") (term "0,0"))
         (rule "mul_literals" (formula "5") (term "0,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "5"))
         (rule "polySimp_mulComm0" (formula "5") (term "1"))
         (rule "polySimp_rightDist" (formula "5") (term "1"))
         (rule "polySimp_mulLiterals" (formula "5") (term "1,1"))
         (rule "mul_literals" (formula "5") (term "0,1"))
         (rule "polySimp_elimOne" (formula "5") (term "1,1"))
         (rule "inEqSimp_exactShadow3" (formula "8") (ifseqformula "26"))
         (rule "polySimp_rightDist" (formula "8") (term "0,0"))
         (rule "mul_literals" (formula "8") (term "0,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "8"))
         (rule "polySimp_mulComm0" (formula "8") (term "1"))
         (rule "polySimp_rightDist" (formula "8") (term "1"))
         (rule "mul_literals" (formula "8") (term "0,1"))
         (rule "polySimp_mulLiterals" (formula "8") (term "1,1"))
         (rule "polySimp_elimOne" (formula "8") (term "1,1"))
         (rule "nnf_imp2or" (formula "30") (term "0"))
         (rule "nnf_imp2or" (formula "29") (term "0"))
         (rule "nnf_notAnd" (formula "30") (term "0,0"))
         (rule "inEqSimp_notGeq" (formula "30") (term "0,0,0"))
         (rule "mul_literals" (formula "30") (term "1,0,0,0,0,0"))
         (rule "add_literals" (formula "30") (term "0,0,0,0,0"))
         (rule "add_zero_left" (formula "30") (term "0,0,0,0"))
         (rule "inEqSimp_notLeq" (formula "30") (term "1,0,0"))
         (rule "polySimp_rightDist" (formula "30") (term "1,0,0,1,0,0"))
         (rule "mul_literals" (formula "30") (term "0,1,0,0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "30") (term "0,0,1,0,0"))
         (rule "add_literals" (formula "30") (term "0,0,0,1,0,0"))
         (rule "add_zero_left" (formula "30") (term "0,0,1,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "30") (term "1,0,0"))
         (rule "polySimp_mulLiterals" (formula "30") (term "1,1,0,0"))
         (rule "polySimp_elimOne" (formula "30") (term "1,1,0,0"))
         (rule "nnf_notAnd" (formula "29") (term "0,0"))
         (rule "inEqSimp_notGeq" (formula "29") (term "0,0,0"))
         (rule "mul_literals" (formula "29") (term "1,0,0,0,0,0"))
         (rule "add_literals" (formula "29") (term "0,0,0,0,0"))
         (rule "add_zero_left" (formula "29") (term "0,0,0,0"))
         (rule "inEqSimp_notLeq" (formula "29") (term "1,0,0"))
         (rule "polySimp_rightDist" (formula "29") (term "1,0,0,1,0,0"))
         (rule "mul_literals" (formula "29") (term "0,1,0,0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "29") (term "0,0,1,0,0"))
         (rule "add_literals" (formula "29") (term "0,0,0,1,0,0"))
         (rule "add_zero_left" (formula "29") (term "0,0,1,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "29") (term "1,0,0"))
         (rule "polySimp_mulLiterals" (formula "29") (term "1,1,0,0"))
         (rule "polySimp_elimOne" (formula "29") (term "1,1,0,0"))
         (rule "Contract_axiom_for_isSortedSliceTransitive_in_Functions" (formula "28") (term "0"))
         (rule "replace_known_right" (formula "28") (term "0,0,0") (ifseqformula "34"))
          (builtin "One Step Simplification" (formula "28") (ifInst ""  (formula "10")) (ifInst ""  (formula "29")))
         (rule "Definition_axiom_for_isSortedSliceTransitive_in_de_wiesler_Functions" (formula "29") (term "0") (inst "i=i") (inst "j=j"))
          (builtin "One Step Simplification" (formula "29"))
         (rule "inEqSimp_ltToLeq" (formula "29") (term "1,0,0"))
         (rule "polySimp_rightDist" (formula "29") (term "1,0,0,1,0,0"))
         (rule "mul_literals" (formula "29") (term "0,1,0,0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "29") (term "0,0,1,0,0"))
         (rule "add_literals" (formula "29") (term "0,0,0,1,0,0"))
         (rule "inEqSimp_ltToLeq" (formula "29") (term "1,0,0,1,0"))
         (rule "polySimp_rightDist" (formula "29") (term "1,0,0,1,0,0,1,0"))
         (rule "mul_literals" (formula "29") (term "0,1,0,0,1,0,0,1,0"))
         (rule "polySimp_addAssoc" (formula "29") (term "0,0,1,0,0,1,0"))
         (rule "add_literals" (formula "29") (term "0,0,0,1,0,0,1,0"))
         (rule "inEqSimp_commuteLeq" (formula "29") (term "0,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "29") (term "0,0,0,1,0"))
         (rule "inEqSimp_commuteLeq" (formula "29") (term "1,0,1,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "29") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "29") (term "1,1,0,0"))
         (rule "polySimp_rightDist" (formula "29") (term "1,1,0,0"))
         (rule "polySimp_mulLiterals" (formula "29") (term "1,1,1,0,0"))
         (rule "mul_literals" (formula "29") (term "0,1,1,0,0"))
         (rule "polySimp_elimOne" (formula "29") (term "1,1,1,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "29") (term "1,0,0,1,0"))
         (rule "polySimp_mulComm0" (formula "29") (term "1,1,0,0,1,0"))
         (rule "polySimp_rightDist" (formula "29") (term "1,1,0,0,1,0"))
         (rule "polySimp_mulLiterals" (formula "29") (term "1,1,1,0,0,1,0"))
         (rule "mul_literals" (formula "29") (term "0,1,1,0,0,1,0"))
         (rule "polySimp_elimOne" (formula "29") (term "1,1,1,0,0,1,0"))
         (rule "nnf_imp2or" (formula "29") (term "0"))
         (rule "nnf_notAnd" (formula "29") (term "0,0"))
         (rule "inEqSimp_notGeq" (formula "29") (term "0,0,0"))
         (rule "times_zero_1" (formula "29") (term "1,0,0,0,0,0"))
         (rule "add_zero_right" (formula "29") (term "0,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "29") (term "0,0,0"))
         (rule "mul_literals" (formula "29") (term "1,0,0,0"))
         (rule "inEqSimp_notLeq" (formula "29") (term "1,0,0"))
         (rule "polySimp_rightDist" (formula "29") (term "1,0,0,1,0,0"))
         (rule "mul_literals" (formula "29") (term "0,1,0,0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "29") (term "0,0,1,0,0"))
         (rule "add_literals" (formula "29") (term "0,0,0,1,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "29") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "29") (term "1,1,0,0"))
         (rule "polySimp_rightDist" (formula "29") (term "1,1,0,0"))
         (rule "polySimp_mulLiterals" (formula "29") (term "1,1,1,0,0"))
         (rule "mul_literals" (formula "29") (term "0,1,1,0,0"))
         (rule "polySimp_elimOne" (formula "29") (term "1,1,1,0,0"))
         (rule "nnf_imp2or" (formula "29") (term "0,1,0"))
         (rule "nnf_notAnd" (formula "29") (term "0,0,1,0"))
         (rule "inEqSimp_notGeq" (formula "29") (term "0,0,0,1,0"))
         (rule "polySimp_mulComm0" (formula "29") (term "1,0,0,0,0,0,1,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "29") (term "0,0,0,1,0"))
         (rule "polySimp_mulComm0" (formula "29") (term "1,0,0,0,1,0"))
         (rule "polySimp_rightDist" (formula "29") (term "1,0,0,0,1,0"))
         (rule "mul_literals" (formula "29") (term "0,1,0,0,0,1,0"))
         (rule "polySimp_mulLiterals" (formula "29") (term "1,1,0,0,0,1,0"))
         (rule "polySimp_elimOne" (formula "29") (term "1,1,0,0,0,1,0"))
         (rule "inEqSimp_notLeq" (formula "29") (term "1,0,0,1,0"))
         (rule "polySimp_rightDist" (formula "29") (term "1,0,0,1,0,0,1,0"))
         (rule "mul_literals" (formula "29") (term "0,1,0,0,1,0,0,1,0"))
         (rule "polySimp_addAssoc" (formula "29") (term "0,0,1,0,0,1,0"))
         (rule "add_literals" (formula "29") (term "0,0,0,1,0,0,1,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "29") (term "1,0,0,1,0"))
         (rule "polySimp_mulComm0" (formula "29") (term "1,1,0,0,1,0"))
         (rule "polySimp_rightDist" (formula "29") (term "1,1,0,0,1,0"))
         (rule "mul_literals" (formula "29") (term "0,1,1,0,0,1,0"))
         (rule "polySimp_mulLiterals" (formula "29") (term "1,1,1,0,0,1,0"))
         (rule "polySimp_elimOne" (formula "29") (term "1,1,1,0,0,1,0"))
         (rule "Definition_axiom_for_pi_in_de_wiesler_Tree" (formula "31") (term "1,0,2,0,1,0"))
         (rule "translateJavaSubInt" (formula "31") (term "0,1,1,1,0,2,0,1,0"))
         (rule "polySimp_elimSub" (formula "31") (term "1,0,0,1,0,2,0,1,0"))
         (rule "polySimp_elimSub" (formula "31") (term "0,1,1,1,0,2,0,1,0"))
         (rule "mul_literals" (formula "31") (term "1,0,1,1,1,0,2,0,1,0"))
         (rule "polySimp_elimSub" (formula "31") (term "1,1,1,0,2,0,1,0"))
         (rule "polySimp_mulComm0" (formula "31") (term "1,0,2,0,1,0"))
         (rule "polySimp_addComm0" (formula "31") (term "0,1,0,1,0,2,0,1,0"))
         (rule "polySimp_rightDist" (formula "31") (term "0,1,1,0,2,0,1,0"))
         (rule "polySimp_mulLiterals" (formula "31") (term "1,0,1,1,0,2,0,1,0"))
         (rule "polySimp_mulComm0" (formula "31") (term "0,0,1,1,0,2,0,1,0"))
         (rule "polySimp_addComm1" (formula "31") (term "1,1,0,2,0,1,0"))
         (rule "polySimp_addComm0" (formula "31") (term "0,1,1,0,2,0,1,0"))
         (rule "polySimp_rightDist" (formula "31") (term "1,0,2,0,1,0"))
         (rule "polySimp_mulComm1" (formula "31") (term "1,1,0,2,0,1,0"))
         (rule "polySimp_mulComm0" (formula "31") (term "0,1,1,0,2,0,1,0"))
         (rule "polySimp_rightDist" (formula "31") (term "0,1,0,2,0,1,0"))
         (rule "polySimp_elimOne" (formula "31") (term "0,0,1,0,2,0,1,0"))
         (rule "polySimp_mulComm1" (formula "31") (term "1,0,1,0,2,0,1,0"))
         (rule "polySimp_mulComm0" (formula "31") (term "0,1,0,1,0,2,0,1,0"))
         (rule "polySimp_addAssoc" (formula "31") (term "0,2,0,1,0"))
         (rule "polySimp_addAssoc" (formula "31") (term "0,0,2,0,1,0"))
         (rule "Definition_axiom_for_pi_in_de_wiesler_Tree" (formula "30") (term "0,1,1,0"))
         (rule "translateJavaSubInt" (formula "30") (term "0,1,1,0,1,1,0"))
         (rule "polySimp_elimSub" (formula "30") (term "1,0,0,0,1,1,0"))
         (rule "polySimp_elimSub" (formula "30") (term "0,1,1,0,1,1,0"))
         (rule "mul_literals" (formula "30") (term "1,0,1,1,0,1,1,0"))
         (rule "polySimp_elimSub" (formula "30") (term "1,1,0,1,1,0"))
         (rule "polySimp_mulComm0" (formula "30") (term "0,1,1,0"))
         (rule "polySimp_addComm0" (formula "30") (term "0,1,0,0,1,1,0"))
         (rule "polySimp_rightDist" (formula "30") (term "0,1,0,1,1,0"))
         (rule "polySimp_mulLiterals" (formula "30") (term "1,0,1,0,1,1,0"))
         (rule "polySimp_mulComm0" (formula "30") (term "0,0,1,0,1,1,0"))
         (rule "polySimp_addComm1" (formula "30") (term "1,0,1,1,0"))
         (rule "polySimp_addComm0" (formula "30") (term "0,1,0,1,1,0"))
         (rule "polySimp_rightDist" (formula "30") (term "0,1,1,0"))
         (rule "polySimp_mulComm1" (formula "30") (term "1,0,1,1,0"))
         (rule "polySimp_mulComm0" (formula "30") (term "0,1,0,1,1,0"))
         (rule "polySimp_rightDist" (formula "30") (term "0,0,1,1,0"))
         (rule "polySimp_elimOne" (formula "30") (term "0,0,0,1,1,0"))
         (rule "polySimp_mulComm1" (formula "30") (term "1,0,0,1,1,0"))
         (rule "polySimp_mulComm0" (formula "30") (term "0,1,0,0,1,1,0"))
         (rule "inEqSimp_homoInEq0" (formula "30") (term "1,1,0"))
         (rule "polySimp_mulComm0" (formula "30") (term "1,0,1,1,0"))
         (rule "polySimp_rightDist" (formula "30") (term "1,0,1,1,0"))
         (rule "polySimp_mulLiterals" (formula "30") (term "1,1,0,1,1,0"))
         (rule "polySimp_rightDist" (formula "30") (term "0,1,0,1,1,0"))
         (rule "polySimp_mulLiterals" (formula "30") (term "1,0,1,0,1,1,0"))
         (rule "polySimp_mulComm0" (formula "30") (term "0,0,1,0,1,1,0"))
         (rule "polySimp_addAssoc" (formula "30") (term "0,1,1,0"))
         (rule "polySimp_addAssoc" (formula "30") (term "0,0,1,1,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "30") (term "1,1,0"))
         (rule "polySimp_mulComm0" (formula "30") (term "1,1,1,0"))
         (rule "polySimp_rightDist" (formula "30") (term "1,1,1,0"))
         (rule "polySimp_mulLiterals" (formula "30") (term "1,1,1,1,0"))
         (rule "polySimp_rightDist" (formula "30") (term "0,1,1,1,0"))
         (rule "polySimp_mulLiterals" (formula "30") (term "1,0,1,1,1,0"))
         (rule "polySimp_elimOne" (formula "30") (term "1,0,1,1,1,0"))
         (rule "polySimp_rightDist" (formula "30") (term "0,0,1,1,1,0"))
         (rule "mul_literals" (formula "30") (term "0,0,0,1,1,1,0"))
         (rule "Definition_axiom_for_pi_in_de_wiesler_Tree" (formula "30") (term "0,0,1,0"))
         (rule "translateJavaSubInt" (formula "30") (term "0,1,1,0,0,1,0"))
         (rule "polySimp_elimSub" (formula "30") (term "1,0,0,0,0,1,0"))
         (rule "polySimp_elimSub" (formula "30") (term "0,1,1,0,0,1,0"))
         (rule "mul_literals" (formula "30") (term "1,0,1,1,0,0,1,0"))
         (rule "polySimp_elimSub" (formula "30") (term "1,1,0,0,1,0"))
         (rule "polySimp_mulComm0" (formula "30") (term "0,0,1,0"))
         (rule "polySimp_addComm0" (formula "30") (term "0,1,0,0,0,1,0"))
         (rule "polySimp_rightDist" (formula "30") (term "0,1,0,0,1,0"))
         (rule "polySimp_mulLiterals" (formula "30") (term "1,0,1,0,0,1,0"))
         (rule "polySimp_mulComm0" (formula "30") (term "0,0,1,0,0,1,0"))
         (rule "polySimp_addComm1" (formula "30") (term "1,0,0,1,0"))
         (rule "polySimp_addComm0" (formula "30") (term "0,1,0,0,1,0"))
         (rule "polySimp_rightDist" (formula "30") (term "0,0,1,0"))
         (rule "polySimp_mulComm1" (formula "30") (term "1,0,0,1,0"))
         (rule "polySimp_mulComm0" (formula "30") (term "0,1,0,0,1,0"))
         (rule "polySimp_rightDist" (formula "30") (term "0,0,0,1,0"))
         (rule "polySimp_elimOne" (formula "30") (term "0,0,0,0,1,0"))
         (rule "polySimp_mulComm1" (formula "30") (term "1,0,0,0,1,0"))
         (rule "polySimp_mulComm0" (formula "30") (term "0,1,0,0,0,1,0"))
         (rule "inEqSimp_homoInEq1" (formula "30") (term "0,1,0"))
         (rule "polySimp_mulComm0" (formula "30") (term "1,0,0,1,0"))
         (rule "polySimp_rightDist" (formula "30") (term "1,0,0,1,0"))
         (rule "polySimp_mulLiterals" (formula "30") (term "1,1,0,0,1,0"))
         (rule "polySimp_rightDist" (formula "30") (term "0,1,0,0,1,0"))
         (rule "polySimp_mulLiterals" (formula "30") (term "1,0,1,0,0,1,0"))
         (rule "polySimp_mulComm0" (formula "30") (term "0,0,1,0,0,1,0"))
         (rule "polySimp_addAssoc" (formula "30") (term "0,0,1,0"))
         (rule "polySimp_addAssoc" (formula "30") (term "0,0,0,1,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "30") (term "0,1,0"))
         (rule "polySimp_mulComm0" (formula "30") (term "1,0,1,0"))
         (rule "polySimp_rightDist" (formula "30") (term "1,0,1,0"))
         (rule "polySimp_mulLiterals" (formula "30") (term "1,1,0,1,0"))
         (rule "polySimp_rightDist" (formula "30") (term "0,1,0,1,0"))
         (rule "mul_literals" (formula "30") (term "0,0,1,0,1,0"))
         (rule "polySimp_mulLiterals" (formula "30") (term "1,0,1,0,1,0"))
         (rule "polySimp_elimOne" (formula "30") (term "1,0,1,0,1,0"))
         (rule "commute_or" (formula "19") (term "0,0,1,0"))
         (rule "Definition_axiom_for_isSortedSlice_in_de_wiesler_Functions" (formula "28") (term "0") (inst "i=i"))
          (builtin "One Step Simplification" (formula "28"))
         (rule "translateJavaSubInt" (formula "28") (term "1,1,0,0"))
         (rule "translateJavaAddInt" (formula "28") (term "0,2,1,1,0"))
         (rule "polySimp_elimSub" (formula "28") (term "1,1,0,0"))
         (rule "mul_literals" (formula "28") (term "1,1,1,0,0"))
         (rule "polySimp_addComm0" (formula "28") (term "0,2,1,1,0"))
         (rule "polySimp_addComm1" (formula "28") (term "1,1,0,0"))
         (rule "add_literals" (formula "28") (term "0,1,1,0,0"))
         (rule "inEqSimp_ltToLeq" (formula "28") (term "1,0,0"))
         (rule "polySimp_rightDist" (formula "28") (term "1,0,0,1,0,0"))
         (rule "mul_literals" (formula "28") (term "0,1,0,0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "28") (term "0,0,1,0,0"))
         (rule "add_literals" (formula "28") (term "0,0,0,1,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "28") (term "0,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "28") (term "1,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "28") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "28") (term "1,1,0,0"))
         (rule "polySimp_rightDist" (formula "28") (term "1,1,0,0"))
         (rule "polySimp_mulLiterals" (formula "28") (term "1,1,1,0,0"))
         (rule "mul_literals" (formula "28") (term "0,1,1,0,0"))
         (rule "polySimp_elimOne" (formula "28") (term "1,1,1,0,0"))
         (rule "nnf_imp2or" (formula "28") (term "0"))
         (rule "nnf_notAnd" (formula "28") (term "0,0"))
         (rule "inEqSimp_notGeq" (formula "28") (term "0,0,0"))
         (rule "times_zero_1" (formula "28") (term "1,0,0,0,0,0"))
         (rule "add_zero_right" (formula "28") (term "0,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "28") (term "0,0,0"))
         (rule "mul_literals" (formula "28") (term "1,0,0,0"))
         (rule "inEqSimp_notLeq" (formula "28") (term "1,0,0"))
         (rule "polySimp_rightDist" (formula "28") (term "1,0,0,1,0,0"))
         (rule "mul_literals" (formula "28") (term "0,1,0,0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "28") (term "0,0,1,0,0"))
         (rule "add_literals" (formula "28") (term "0,0,0,1,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "28") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "28") (term "1,1,0,0"))
         (rule "polySimp_rightDist" (formula "28") (term "1,1,0,0"))
         (rule "polySimp_mulLiterals" (formula "28") (term "1,1,1,0,0"))
         (rule "mul_literals" (formula "28") (term "0,1,1,0,0"))
         (rule "polySimp_elimOne" (formula "28") (term "1,1,1,0,0"))
         (rule "ifthenelse_split" (formula "2") (term "0"))
         (branch "self.sorted_splitters.<created> = TRUE TRUE"
            (rule "applyEqReverse" (formula "4") (term "0") (ifseqformula "3"))
            (rule "hideAuxiliaryEq" (formula "3"))
            (rule "replace_known_left" (formula "1") (term "0,0") (ifseqformula "2"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "applyEqReverse" (formula "3") (term "1,1") (ifseqformula "1"))
            (rule "hideAuxiliaryEq" (formula "1"))
            (rule "commute_or" (formula "28") (term "0,0,1,0"))
            (rule "ifthenelse_split" (formula "16") (term "0"))
            (branch "self.equal_buckets = TRUE TRUE"
               (rule "newSym_eq" (formula "17") (inst "l=l_0") (inst "newSymDef=mul(int::final(self,
               de.wiesler.Classifier::$num_buckets),
    Z(0(#)))"))
               (rule "times_zero_1" (formula "17") (term "1,1"))
               (rule "add_zero_right" (formula "17") (term "1"))
               (rule "applyEq" (formula "8") (term "0") (ifseqformula "17"))
               (rule "inEqSimp_homoInEq1" (formula "8"))
               (rule "polySimp_addComm1" (formula "8") (term "0"))
               (rule "applyEq" (formula "20") (term "1,1,0,0") (ifseqformula "17"))
               (rule "applyEq" (formula "28") (term "0") (ifseqformula "17"))
               (rule "inEqSimp_commuteLeq" (formula "28"))
               (rule "applyEq" (formula "30") (term "1,1,1,0,0") (ifseqformula "17"))
               (rule "applyEq" (formula "26") (term "0") (ifseqformula "17"))
               (rule "applyEq" (formula "27") (term "1") (ifseqformula "17"))
               (rule "applyEq" (formula "21") (term "1,0,2,0") (ifseqformula "17"))
               (rule "eqSymm" (formula "21"))
               (rule "applyEq" (formula "5") (term "0") (ifseqformula "17"))
               (rule "inEqSimp_homoInEq1" (formula "5"))
               (rule "polySimp_addComm1" (formula "5") (term "0"))
               (rule "applyEq" (formula "30") (term "1,1,0,0,0,1,0") (ifseqformula "17"))
               (rule "applyEq" (formula "31") (term "1,1,0,0") (ifseqformula "17"))
               (rule "applyEq" (formula "32") (term "1,1,0,0") (ifseqformula "17"))
               (rule "applyEq" (formula "18") (term "0,0") (ifseqformula "17"))
               (rule "eqSymm" (formula "18"))
               (rule "applyEq" (formula "29") (term "1,1,1,0,0") (ifseqformula "17"))
               (rule "applyEq" (formula "20") (term "1,0,0,0,1,0") (ifseqformula "17"))
               (rule "applyEq" (formula "15") (term "0") (ifseqformula "18"))
               (rule "applyEq" (formula "14") (term "0") (ifseqformula "18"))
               (rule "applyEq" (formula "21") (term "1,0,2,0") (ifseqformula "17"))
               (rule "eqSymm" (formula "21"))
               (rule "applyEq" (formula "24") (term "1") (ifseqformula "17"))
               (rule "applyEq" (formula "31") (term "0,1,0,0,1,1,1,0") (ifseqformula "17"))
               (rule "inEqSimp_sepPosMonomial0" (formula "8"))
               (rule "polySimp_mulComm0" (formula "8") (term "1"))
               (rule "polySimp_rightDist" (formula "8") (term "1"))
               (rule "mul_literals" (formula "8") (term "0,1"))
               (rule "polySimp_mulLiterals" (formula "8") (term "1,1"))
               (rule "polySimp_elimOne" (formula "8") (term "1,1"))
               (rule "inEqSimp_sepPosMonomial0" (formula "5"))
               (rule "polySimp_mulComm0" (formula "5") (term "1"))
               (rule "polySimp_rightDist" (formula "5") (term "1"))
               (rule "mul_literals" (formula "5") (term "0,1"))
               (rule "polySimp_mulLiterals" (formula "5") (term "1,1"))
               (rule "polySimp_elimOne" (formula "5") (term "1,1"))
               (rule "inEqSimp_subsumption6" (formula "14") (ifseqformula "26"))
               (rule "mul_literals" (formula "14") (term "1,1,0"))
               (rule "greater_literals" (formula "14") (term "0,0"))
                (builtin "One Step Simplification" (formula "14"))
               (rule "leq_literals" (formula "14") (term "0"))
                (builtin "One Step Simplification" (formula "14"))
               (rule "true_left" (formula "14"))
               (rule "elimGcdLeq_antec" (formula "14") (inst "elimGcdRightDiv=Z(4(6(#)))") (inst "elimGcdLeftDiv=l_0") (inst "elimGcd=Z(2(#))"))
               (rule "polySimp_mulLiterals" (formula "14") (term "1,0,1,0"))
               (rule "polySimp_mulLiterals" (formula "14") (term "1,0,0,0,0,1,0"))
               (rule "neg_literal" (formula "14") (term "0,0,0,0,0,1,0"))
               (rule "leq_literals" (formula "14") (term "0,0"))
                (builtin "One Step Simplification" (formula "14"))
               (rule "mul_literals" (formula "14") (term "1,0,0,0,0,0"))
               (rule "polySimp_addLiterals" (formula "14") (term "0,0,0,0"))
               (rule "add_zero_right" (formula "14") (term "0,0,0,0"))
               (rule "polySimp_pullOutFactor0b" (formula "14") (term "0,0"))
               (rule "add_literals" (formula "14") (term "1,1,0,0"))
               (rule "times_zero_1" (formula "14") (term "1,0,0"))
               (rule "add_zero_right" (formula "14") (term "0,0"))
               (rule "qeq_literals" (formula "14") (term "0"))
                (builtin "One Step Simplification" (formula "14"))
               (rule "inEqSimp_exactShadow3" (formula "3") (ifseqformula "5"))
               (rule "polySimp_mulComm0" (formula "3") (term "0,0"))
               (rule "polySimp_addComm0" (formula "3") (term "0"))
               (rule "inEqSimp_sepNegMonomial1" (formula "3"))
               (rule "polySimp_mulLiterals" (formula "3") (term "0"))
               (rule "polySimp_elimOne" (formula "3") (term "0"))
               (rule "inEqSimp_exactShadow3" (formula "6") (ifseqformula "8"))
               (rule "times_zero_1" (formula "6") (term "0,0"))
               (rule "add_zero_left" (formula "6") (term "0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "6"))
               (rule "mul_literals" (formula "6") (term "1"))
               (rule "inEqSimp_subsumption1" (formula "6") (ifseqformula "26"))
               (rule "leq_literals" (formula "6") (term "0"))
                (builtin "One Step Simplification" (formula "6"))
               (rule "true_left" (formula "6"))
               (rule "arrayLengthNotNegative" (formula "26") (term "0"))
               (rule "arrayLengthIsAShort" (formula "27") (term "0"))
                (builtin "One Step Simplification" (formula "27"))
               (rule "true_left" (formula "27"))
               (rule "arrayLengthNotNegative" (formula "24") (term "0"))
               (rule "inEqSimp_subsumption1" (formula "24") (ifseqformula "25"))
               (rule "leq_literals" (formula "24") (term "0"))
                (builtin "One Step Simplification" (formula "24"))
               (rule "true_left" (formula "24"))
               (rule "arrayLengthIsAShort" (formula "24") (term "0"))
                (builtin "One Step Simplification" (formula "24"))
               (rule "true_left" (formula "24"))
               (rule "cnf_rightDist" (formula "31") (term "0"))
               (rule "distr_forallAnd" (formula "31"))
               (rule "andLeft" (formula "31"))
               (rule "commute_or" (formula "32") (term "0"))
               (rule "all_pull_out3" (formula "30") (term "0"))
               (rule "shift_paren_or" (formula "30") (term "0,0"))
               (rule "shift_paren_or" (formula "30") (term "0,0,0"))
               (rule "all_pull_out3" (formula "19") (term "0"))
               (rule "shift_paren_or" (formula "19") (term "0,0"))
               (rule "shift_paren_or" (formula "19") (term "0,0,0"))
               (rule "onlyCreatedObjectsAreReferencedFinal" (formula "18") (term "1") (ifseqformula "9") (ifseqformula "11"))
               (rule "replace_known_left" (formula "18") (term "1") (ifseqformula "1"))
                (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "37")))
               (rule "true_left" (formula "18"))
               (rule "onlyCreatedObjectsAreReferencedFinal" (formula "35") (term "0") (ifseqformula "9") (ifseqformula "11"))
               (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "36"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "allLeft" (formula "20") (inst "t=i_0"))
               (rule "inEqSimp_contradInEq0" (formula "20") (term "1,0,0,0,0") (ifseqformula "9"))
               (rule "inEqSimp_homoInEq1" (formula "20") (term "0,1,0,0,0,0"))
               (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,1,0,0,0,0"))
               (rule "polySimp_rightDist" (formula "20") (term "1,0,0,1,0,0,0,0"))
               (rule "mul_literals" (formula "20") (term "0,1,0,0,1,0,0,0,0"))
               (rule "polySimp_addAssoc" (formula "20") (term "0,0,1,0,0,0,0"))
               (rule "polySimp_addComm0" (formula "20") (term "0,0,0,1,0,0,0,0"))
               (rule "polySimp_pullOutFactor1b" (formula "20") (term "0,0,1,0,0,0,0"))
               (rule "add_literals" (formula "20") (term "1,1,0,0,1,0,0,0,0"))
               (rule "times_zero_1" (formula "20") (term "1,0,0,1,0,0,0,0"))
               (rule "add_zero_right" (formula "20") (term "0,0,1,0,0,0,0"))
               (rule "leq_literals" (formula "20") (term "0,1,0,0,0,0"))
                (builtin "One Step Simplification" (formula "20"))
               (rule "inEqSimp_contradInEq1" (formula "20") (term "0,0,0,0") (ifseqformula "7"))
               (rule "qeq_literals" (formula "20") (term "0,0,0,0,0"))
                (builtin "One Step Simplification" (formula "20"))
               (rule "commute_or" (formula "20") (term "0,0"))
               (rule "allLeft" (formula "35") (inst "t=add(Z(neglit(1(#))), l_0)"))
               (rule "polySimp_mulComm1" (formula "35") (term "1,0,0,2,0,1"))
               (rule "polySimp_addComm1" (formula "35") (term "1,0,0,1,0,2,0,1"))
               (rule "polySimp_addComm1" (formula "35") (term "1,1,0,0,0,2,0,1"))
               (rule "polySimp_addComm1" (formula "35") (term "1,0,0,1,0,0,2,0,1"))
               (rule "polySimp_rightDist" (formula "35") (term "1,0,0,2,0,1"))
               (rule "polySimp_mulLiterals" (formula "35") (term "0,1,0,0,2,0,1"))
               (rule "polySimp_mulAssoc" (formula "35") (term "1,1,0,0,2,0,1"))
               (rule "polySimp_mulComm0" (formula "35") (term "0,1,1,0,0,2,0,1"))
               (rule "polySimp_addAssoc" (formula "35") (term "0,0,2,0,1"))
               (rule "polySimp_pullOutFactor1b" (formula "35") (term "0,0,0,2,0,1"))
               (rule "add_literals" (formula "35") (term "1,1,0,0,0,2,0,1"))
               (rule "inEqSimp_homoInEq1" (formula "35") (term "1,0"))
               (rule "polySimp_mulComm0" (formula "35") (term "1,0,1,0"))
               (rule "polySimp_rightDist" (formula "35") (term "1,0,1,0"))
               (rule "mul_literals" (formula "35") (term "0,1,0,1,0"))
               (rule "polySimp_addAssoc" (formula "35") (term "0,1,0"))
               (rule "polySimp_addComm0" (formula "35") (term "0,0,1,0"))
               (rule "polySimp_pullOutFactor1b" (formula "35") (term "0,1,0"))
               (rule "add_literals" (formula "35") (term "1,1,0,1,0"))
               (rule "times_zero_1" (formula "35") (term "1,0,1,0"))
               (rule "add_zero_right" (formula "35") (term "0,1,0"))
               (rule "leq_literals" (formula "35") (term "1,0"))
                (builtin "One Step Simplification" (formula "35"))
               (rule "inEqSimp_sepPosMonomial0" (formula "35") (term "0"))
               (rule "mul_literals" (formula "35") (term "1,0"))
               (rule "inEqSimp_contradInEq1" (formula "35") (term "0") (ifseqformula "27"))
               (rule "qeq_literals" (formula "35") (term "0,0"))
                (builtin "One Step Simplification" (formula "35"))
               (rule "allLeft" (formula "21") (inst "t=add(Z(neglit(2(#))), l_0)"))
               (rule "polySimp_addAssoc" (formula "21") (term "1,1,0,0"))
               (rule "add_literals" (formula "21") (term "0,1,1,0,0"))
               (rule "inEqSimp_homoInEq1" (formula "21") (term "1,0,0,0,0"))
               (rule "polySimp_mulComm0" (formula "21") (term "1,0,1,0,0,0,0"))
               (rule "polySimp_rightDist" (formula "21") (term "1,0,1,0,0,0,0"))
               (rule "mul_literals" (formula "21") (term "0,1,0,1,0,0,0,0"))
               (rule "polySimp_addAssoc" (formula "21") (term "0,1,0,0,0,0"))
               (rule "polySimp_addComm0" (formula "21") (term "0,0,1,0,0,0,0"))
               (rule "polySimp_pullOutFactor1b" (formula "21") (term "0,1,0,0,0,0"))
               (rule "add_literals" (formula "21") (term "1,1,0,1,0,0,0,0"))
               (rule "times_zero_1" (formula "21") (term "1,0,1,0,0,0,0"))
               (rule "add_zero_right" (formula "21") (term "0,1,0,0,0,0"))
               (rule "leq_literals" (formula "21") (term "1,0,0,0,0"))
                (builtin "One Step Simplification" (formula "21"))
               (rule "inEqSimp_homoInEq0" (formula "21") (term "0,0,0,0"))
               (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,0,0,0"))
               (rule "polySimp_rightDist" (formula "21") (term "1,0,0,0,0,0"))
               (rule "mul_literals" (formula "21") (term "0,1,0,0,0,0,0"))
               (rule "polySimp_addAssoc" (formula "21") (term "0,0,0,0,0"))
               (rule "add_literals" (formula "21") (term "0,0,0,0,0,0"))
               (rule "applyEq" (formula "21") (term "1,1,0") (ifseqformula "23"))
               (rule "inEqSimp_sepNegMonomial1" (formula "21") (term "0,0,0,0"))
               (rule "polySimp_mulLiterals" (formula "21") (term "0,0,0,0,0"))
               (rule "polySimp_elimOne" (formula "21") (term "0,0,0,0,0"))
               (rule "inEqSimp_contradInEq1" (formula "21") (term "0,0,0,0") (ifseqformula "28"))
               (rule "qeq_literals" (formula "21") (term "0,0,0,0,0"))
                (builtin "One Step Simplification" (formula "21"))
               (rule "commute_or" (formula "21") (term "0,0"))
               (rule "allLeft" (formula "20") (inst "t=j_0"))
               (rule "inEqSimp_contradInEq1" (formula "20") (term "0,0") (ifseqformula "4"))
               (rule "inEqSimp_homoInEq1" (formula "20") (term "0,0,0"))
               (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,0,0"))
               (rule "polySimp_rightDist" (formula "20") (term "1,0,0,0,0"))
               (rule "mul_literals" (formula "20") (term "0,1,0,0,0,0"))
               (rule "polySimp_addAssoc" (formula "20") (term "0,0,0,0"))
               (rule "polySimp_addComm0" (formula "20") (term "0,0,0,0,0"))
               (rule "polySimp_pullOutFactor1b" (formula "20") (term "0,0,0,0"))
               (rule "add_literals" (formula "20") (term "1,1,0,0,0,0"))
               (rule "times_zero_1" (formula "20") (term "1,0,0,0,0"))
               (rule "add_zero_right" (formula "20") (term "0,0,0,0"))
               (rule "leq_literals" (formula "20") (term "0,0,0"))
                (builtin "One Step Simplification" (formula "20"))
               (rule "inEqSimp_contradInEq0" (formula "20") (term "0") (ifseqformula "6"))
               (rule "inEqSimp_homoInEq1" (formula "20") (term "0,0"))
               (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,0"))
               (rule "polySimp_rightDist" (formula "20") (term "1,0,0,0"))
               (rule "mul_literals" (formula "20") (term "0,1,0,0,0"))
               (rule "polySimp_addAssoc" (formula "20") (term "0,0,0"))
               (rule "polySimp_addComm0" (formula "20") (term "0,0,0,0"))
               (rule "polySimp_pullOutFactor1b" (formula "20") (term "0,0,0"))
               (rule "add_literals" (formula "20") (term "1,1,0,0,0"))
               (rule "times_zero_1" (formula "20") (term "1,0,0,0"))
               (rule "add_zero_right" (formula "20") (term "0,0,0"))
               (rule "leq_literals" (formula "20") (term "0,0"))
                (builtin "One Step Simplification" (formula "20"))
               (rule "inEqSimp_contradInEq0" (formula "20") (ifseqformula "3"))
               (rule "andLeft" (formula "20"))
               (rule "inEqSimp_homoInEq1" (formula "20"))
               (rule "polySimp_mulComm0" (formula "20") (term "1,0"))
               (rule "polySimp_rightDist" (formula "20") (term "1,0"))
               (rule "mul_literals" (formula "20") (term "0,1,0"))
               (rule "polySimp_addAssoc" (formula "20") (term "0"))
               (rule "polySimp_addComm0" (formula "20") (term "0,0"))
               (rule "polySimp_pullOutFactor1b" (formula "20") (term "0"))
               (rule "add_literals" (formula "20") (term "1,1,0"))
               (rule "times_zero_1" (formula "20") (term "1,0"))
               (rule "add_literals" (formula "20") (term "0"))
               (rule "leq_literals" (formula "20"))
               (rule "closeFalse" (formula "20"))
            )
            (branch "self.equal_buckets = TRUE FALSE"
               (rule "applyEq" (formula "25") (term "1") (ifseqformula "16"))
               (rule "applyEq" (formula "28") (term "1,1,0,0,0,1,0") (ifseqformula "16"))
               (rule "applyEq" (formula "5") (term "0") (ifseqformula "16"))
               (rule "applyEq" (formula "18") (term "1,0,0,0,1,0") (ifseqformula "16"))
               (rule "applyEq" (formula "29") (term "1,1,0,0") (ifseqformula "16"))
               (rule "applyEq" (formula "8") (term "0") (ifseqformula "16"))
               (rule "applyEq" (formula "26") (term "0") (ifseqformula "16"))
               (rule "inEqSimp_commuteLeq" (formula "26"))
               (rule "applyEq" (formula "28") (term "1,1,1,0,0") (ifseqformula "16"))
               (rule "applyEq" (formula "24") (term "0") (ifseqformula "16"))
               (rule "applyEq" (formula "29") (term "1,1,0,0") (ifseqformula "16"))
               (rule "applyEq" (formula "18") (term "1,1,0,0") (ifseqformula "16"))
               (rule "applyEq" (formula "19") (term "1,0,2,0") (ifseqformula "16"))
               (rule "eqSymm" (formula "19"))
               (rule "applyEq" (formula "26") (term "1,1,1,0,0") (ifseqformula "16"))
               (rule "applyEq" (formula "19") (term "1,0,2,0") (ifseqformula "16"))
               (rule "eqSymm" (formula "19"))
               (rule "applyEq" (formula "22") (term "1") (ifseqformula "16"))
               (rule "applyEq" (formula "28") (term "0,1,0,0,1,1,1,0") (ifseqformula "16"))
               (rule "inEqSimp_exactShadow3" (formula "5") (ifseqformula "15"))
               (rule "polySimp_rightDist" (formula "5") (term "0,0"))
               (rule "mul_literals" (formula "5") (term "0,0,0"))
               (rule "polySimp_addComm1" (formula "5") (term "0"))
               (rule "add_literals" (formula "5") (term "0,0"))
               (rule "inEqSimp_sepNegMonomial1" (formula "5"))
               (rule "polySimp_mulLiterals" (formula "5") (term "0"))
               (rule "polySimp_elimOne" (formula "5") (term "0"))
               (rule "inEqSimp_exactShadow3" (formula "9") (ifseqformula "16"))
               (rule "polySimp_rightDist" (formula "9") (term "0,0"))
               (rule "mul_literals" (formula "9") (term "0,0,0"))
               (rule "polySimp_addComm1" (formula "9") (term "0"))
               (rule "add_literals" (formula "9") (term "0,0"))
               (rule "inEqSimp_sepNegMonomial1" (formula "9"))
               (rule "polySimp_mulLiterals" (formula "9") (term "0"))
               (rule "polySimp_elimOne" (formula "9") (term "0"))
               (rule "inEqSimp_exactShadow3" (formula "3") (ifseqformula "5"))
               (rule "polySimp_mulComm0" (formula "3") (term "0,0"))
               (rule "polySimp_addComm0" (formula "3") (term "0"))
               (rule "inEqSimp_sepNegMonomial1" (formula "3"))
               (rule "polySimp_mulLiterals" (formula "3") (term "0"))
               (rule "polySimp_elimOne" (formula "3") (term "0"))
               (rule "arrayLengthIsAShort" (formula "26") (term "0"))
                (builtin "One Step Simplification" (formula "26"))
               (rule "true_left" (formula "26"))
               (rule "arrayLengthNotNegative" (formula "26") (term "0"))
               (rule "arrayLengthNotNegative" (formula "25") (term "0"))
               (rule "inEqSimp_subsumption1" (formula "25") (ifseqformula "26"))
               (rule "leq_literals" (formula "25") (term "0"))
                (builtin "One Step Simplification" (formula "25"))
               (rule "true_left" (formula "25"))
               (rule "arrayLengthIsAShort" (formula "25") (term "0"))
                (builtin "One Step Simplification" (formula "25"))
               (rule "true_left" (formula "25"))
               (rule "cnf_rightDist" (formula "31") (term "0"))
               (rule "distr_forallAnd" (formula "31"))
               (rule "andLeft" (formula "31"))
               (rule "commute_or" (formula "32") (term "0"))
               (rule "all_pull_out3" (formula "30") (term "0"))
               (rule "shift_paren_or" (formula "30") (term "0,0"))
               (rule "shift_paren_or" (formula "30") (term "0,0,0"))
               (rule "all_pull_out3" (formula "20") (term "0"))
               (rule "shift_paren_or" (formula "20") (term "0,0"))
               (rule "shift_paren_or" (formula "20") (term "0,0,0"))
               (rule "allLeft" (formula "20") (inst "t=i_0"))
               (rule "inEqSimp_commuteGeq" (formula "20") (term "1,0,0,0,0"))
               (rule "inEqSimp_contradInEq1" (formula "20") (term "0,0,0,0,0") (ifseqformula "7"))
               (rule "qeq_literals" (formula "20") (term "0,0,0,0,0,0"))
                (builtin "One Step Simplification" (formula "20"))
               (rule "inEqSimp_contradInEq1" (formula "20") (term "0,0,0,0") (ifseqformula "10"))
               (rule "inEqSimp_homoInEq1" (formula "20") (term "0,0,0,0,0"))
               (rule "polySimp_pullOutFactor1b" (formula "20") (term "0,0,0,0,0,0"))
               (rule "add_literals" (formula "20") (term "1,1,0,0,0,0,0,0"))
               (rule "times_zero_1" (formula "20") (term "1,0,0,0,0,0,0"))
               (rule "add_zero_right" (formula "20") (term "0,0,0,0,0,0"))
               (rule "leq_literals" (formula "20") (term "0,0,0,0,0"))
                (builtin "One Step Simplification" (formula "20"))
               (rule "commute_or" (formula "20") (term "0,0"))
               (rule "allLeft" (formula "34") (inst "t=add(Z(neglit(1(#))),
    int::final(self,
               de.wiesler.Classifier::$num_buckets))"))
               (rule "polySimp_mulComm1" (formula "34") (term "1,0,0,2,0,1"))
               (rule "polySimp_addComm1" (formula "34") (term "1,0,0,1,0,2,0,1"))
               (rule "polySimp_addComm1" (formula "34") (term "1,1,0,0,0,2,0,1"))
               (rule "polySimp_addComm1" (formula "34") (term "1,0,0,1,0,0,2,0,1"))
               (rule "polySimp_rightDist" (formula "34") (term "1,0,0,2,0,1"))
               (rule "polySimp_mulLiterals" (formula "34") (term "0,1,0,0,2,0,1"))
               (rule "polySimp_mulAssoc" (formula "34") (term "1,1,0,0,2,0,1"))
               (rule "polySimp_mulComm0" (formula "34") (term "0,1,1,0,0,2,0,1"))
               (rule "polySimp_addAssoc" (formula "34") (term "0,0,2,0,1"))
               (rule "polySimp_pullOutFactor1b" (formula "34") (term "0,0,0,2,0,1"))
               (rule "add_literals" (formula "34") (term "1,1,0,0,0,2,0,1"))
               (rule "inEqSimp_homoInEq1" (formula "34") (term "1,0"))
               (rule "polySimp_mulComm0" (formula "34") (term "1,0,1,0"))
               (rule "polySimp_rightDist" (formula "34") (term "1,0,1,0"))
               (rule "mul_literals" (formula "34") (term "0,1,0,1,0"))
               (rule "polySimp_addAssoc" (formula "34") (term "0,1,0"))
               (rule "polySimp_addComm0" (formula "34") (term "0,0,1,0"))
               (rule "polySimp_pullOutFactor1b" (formula "34") (term "0,1,0"))
               (rule "add_literals" (formula "34") (term "1,1,0,1,0"))
               (rule "times_zero_1" (formula "34") (term "1,0,1,0"))
               (rule "add_zero_right" (formula "34") (term "0,1,0"))
               (rule "leq_literals" (formula "34") (term "1,0"))
                (builtin "One Step Simplification" (formula "34"))
               (rule "inEqSimp_sepPosMonomial0" (formula "34") (term "0"))
               (rule "mul_literals" (formula "34") (term "1,0"))
               (rule "inEqSimp_contradInEq1" (formula "34") (term "0") (ifseqformula "16"))
               (rule "qeq_literals" (formula "34") (term "0,0"))
                (builtin "One Step Simplification" (formula "34"))
               (rule "allLeft" (formula "21") (inst "t=add(Z(neglit(2(#))),
    int::final(self,
               de.wiesler.Classifier::$num_buckets))"))
               (rule "polySimp_addAssoc" (formula "21") (term "1,1,0,0"))
               (rule "add_literals" (formula "21") (term "0,1,1,0,0"))
               (rule "inEqSimp_homoInEq1" (formula "21") (term "1,0,0,0,0"))
               (rule "polySimp_mulComm0" (formula "21") (term "1,0,1,0,0,0,0"))
               (rule "polySimp_rightDist" (formula "21") (term "1,0,1,0,0,0,0"))
               (rule "mul_literals" (formula "21") (term "0,1,0,1,0,0,0,0"))
               (rule "polySimp_addAssoc" (formula "21") (term "0,1,0,0,0,0"))
               (rule "polySimp_addComm0" (formula "21") (term "0,0,1,0,0,0,0"))
               (rule "polySimp_pullOutFactor1b" (formula "21") (term "0,1,0,0,0,0"))
               (rule "add_literals" (formula "21") (term "1,1,0,1,0,0,0,0"))
               (rule "times_zero_1" (formula "21") (term "1,0,1,0,0,0,0"))
               (rule "add_zero_right" (formula "21") (term "0,1,0,0,0,0"))
               (rule "leq_literals" (formula "21") (term "1,0,0,0,0"))
                (builtin "One Step Simplification" (formula "21"))
               (rule "inEqSimp_homoInEq0" (formula "21") (term "0,0,0,0"))
               (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,0,0,0"))
               (rule "polySimp_rightDist" (formula "21") (term "1,0,0,0,0,0"))
               (rule "mul_literals" (formula "21") (term "0,1,0,0,0,0,0"))
               (rule "polySimp_addAssoc" (formula "21") (term "0,0,0,0,0"))
               (rule "add_literals" (formula "21") (term "0,0,0,0,0,0"))
               (rule "applyEq" (formula "21") (term "1,1,0") (ifseqformula "23"))
               (rule "inEqSimp_sepNegMonomial1" (formula "21") (term "0,0,0,0"))
               (rule "polySimp_mulLiterals" (formula "21") (term "0,0,0,0,0"))
               (rule "polySimp_elimOne" (formula "21") (term "0,0,0,0,0"))
               (rule "inEqSimp_contradInEq1" (formula "21") (term "0,0,0,0") (ifseqformula "16"))
               (rule "qeq_literals" (formula "21") (term "0,0,0,0,0"))
                (builtin "One Step Simplification" (formula "21"))
               (rule "commute_or" (formula "21") (term "0,0"))
               (rule "allLeft" (formula "20") (inst "t=j_0"))
               (rule "inEqSimp_commuteGeq" (formula "20") (term "1,0"))
               (rule "inEqSimp_contradInEq1" (formula "20") (term "1,0") (ifseqformula "6"))
               (rule "inEqSimp_homoInEq1" (formula "20") (term "0,1,0"))
               (rule "polySimp_pullOutFactor1b" (formula "20") (term "0,0,1,0"))
               (rule "add_literals" (formula "20") (term "1,1,0,0,1,0"))
               (rule "times_zero_1" (formula "20") (term "1,0,0,1,0"))
               (rule "add_zero_right" (formula "20") (term "0,0,1,0"))
               (rule "leq_literals" (formula "20") (term "0,1,0"))
                (builtin "One Step Simplification" (formula "20"))
               (rule "inEqSimp_contradInEq0" (formula "20") (term "1") (ifseqformula "2"))
               (rule "inEqSimp_homoInEq1" (formula "20") (term "0,1"))
               (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,1"))
               (rule "polySimp_rightDist" (formula "20") (term "1,0,0,1"))
               (rule "mul_literals" (formula "20") (term "0,1,0,0,1"))
               (rule "polySimp_addAssoc" (formula "20") (term "0,0,1"))
               (rule "polySimp_addComm0" (formula "20") (term "0,0,0,1"))
               (rule "polySimp_pullOutFactor1b" (formula "20") (term "0,0,1"))
               (rule "add_literals" (formula "20") (term "1,1,0,0,1"))
               (rule "times_zero_1" (formula "20") (term "1,0,0,1"))
               (rule "add_zero_right" (formula "20") (term "0,0,1"))
               (rule "leq_literals" (formula "20") (term "0,1"))
                (builtin "One Step Simplification" (formula "20"))
               (rule "inEqSimp_contradInEq1" (formula "20") (ifseqformula "3"))
               (rule "andLeft" (formula "20"))
               (rule "inEqSimp_homoInEq1" (formula "20"))
               (rule "polySimp_mulComm0" (formula "20") (term "1,0"))
               (rule "polySimp_rightDist" (formula "20") (term "1,0"))
               (rule "mul_literals" (formula "20") (term "0,1,0"))
               (rule "polySimp_addAssoc" (formula "20") (term "0"))
               (rule "polySimp_addComm0" (formula "20") (term "0,0"))
               (rule "polySimp_pullOutFactor1b" (formula "20") (term "0"))
               (rule "add_literals" (formula "20") (term "1,1,0"))
               (rule "times_zero_1" (formula "20") (term "1,0"))
               (rule "add_zero_right" (formula "20") (term "0"))
               (rule "leq_literals" (formula "20"))
               (rule "closeFalse" (formula "20"))
            )
         )
         (branch "self.sorted_splitters.<created> = TRUE FALSE"
            (rule "applyEqReverse" (formula "3") (term "0") (ifseqformula "2"))
            (rule "hideAuxiliaryEq" (formula "2"))
            (rule "replace_known_right" (formula "1") (term "0,0") (ifseqformula "31"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "applyEqReverse" (formula "2") (term "1,1") (ifseqformula "1"))
            (rule "hideAuxiliaryEq" (formula "1"))
            (rule "commute_or" (formula "27") (term "0,0,1,0"))
            (rule "ifthenelse_split" (formula "15") (term "0"))
            (branch "self.equal_buckets = TRUE TRUE"
               (rule "newSym_eq" (formula "16") (inst "l=l_0") (inst "newSymDef=mul(int::final(self,
               de.wiesler.Classifier::$num_buckets),
    Z(0(#)))"))
               (rule "times_zero_1" (formula "16") (term "1,1"))
               (rule "add_zero_right" (formula "16") (term "1"))
               (rule "applyEq" (formula "30") (term "1,1,0,0") (ifseqformula "16"))
               (rule "applyEq" (formula "27") (term "0") (ifseqformula "16"))
               (rule "inEqSimp_commuteLeq" (formula "27"))
               (rule "applyEq" (formula "26") (term "1") (ifseqformula "16"))
               (rule "applyEq" (formula "29") (term "1,1,0,0,0,1,0") (ifseqformula "16"))
               (rule "applyEq" (formula "31") (term "1,1,0,0") (ifseqformula "16"))
               (rule "applyEq" (formula "25") (term "0") (ifseqformula "16"))
               (rule "applyEq" (formula "29") (term "1,1,1,0,0") (ifseqformula "16"))
               (rule "applyEq" (formula "4") (term "0") (ifseqformula "16"))
               (rule "inEqSimp_homoInEq1" (formula "4"))
               (rule "polySimp_addComm1" (formula "4") (term "0"))
               (rule "applyEq" (formula "17") (term "0,0") (ifseqformula "16"))
               (rule "eqSymm" (formula "17"))
               (rule "applyEq" (formula "28") (term "1,1,1,0,0") (ifseqformula "16"))
               (rule "applyEq" (formula "20") (term "1,0,2,0") (ifseqformula "16"))
               (rule "eqSymm" (formula "20"))
               (rule "applyEq" (formula "19") (term "1,0,0,0,1,0") (ifseqformula "16"))
               (rule "applyEq" (formula "19") (term "1,1,0,0") (ifseqformula "16"))
               (rule "applyEq" (formula "7") (term "0") (ifseqformula "16"))
               (rule "inEqSimp_homoInEq1" (formula "7"))
               (rule "polySimp_addComm1" (formula "7") (term "0"))
               (rule "applyEq" (formula "20") (term "1,0,2,0") (ifseqformula "16"))
               (rule "eqSymm" (formula "20"))
               (rule "applyEq" (formula "13") (term "0") (ifseqformula "17"))
               (rule "applyEq" (formula "14") (term "0") (ifseqformula "17"))
               (rule "applyEq" (formula "23") (term "1") (ifseqformula "16"))
               (rule "applyEq" (formula "30") (term "0,1,0,0,1,1,1,0") (ifseqformula "16"))
               (rule "inEqSimp_sepPosMonomial0" (formula "4"))
               (rule "polySimp_mulComm0" (formula "4") (term "1"))
               (rule "polySimp_rightDist" (formula "4") (term "1"))
               (rule "polySimp_mulLiterals" (formula "4") (term "1,1"))
               (rule "mul_literals" (formula "4") (term "0,1"))
               (rule "polySimp_elimOne" (formula "4") (term "1,1"))
               (rule "inEqSimp_sepPosMonomial0" (formula "7"))
               (rule "polySimp_mulComm0" (formula "7") (term "1"))
               (rule "polySimp_rightDist" (formula "7") (term "1"))
               (rule "mul_literals" (formula "7") (term "0,1"))
               (rule "polySimp_mulLiterals" (formula "7") (term "1,1"))
               (rule "polySimp_elimOne" (formula "7") (term "1,1"))
               (rule "inEqSimp_subsumption6" (formula "13") (ifseqformula "25"))
               (rule "mul_literals" (formula "13") (term "1,1,0"))
               (rule "greater_literals" (formula "13") (term "0,0"))
                (builtin "One Step Simplification" (formula "13"))
               (rule "leq_literals" (formula "13") (term "0"))
                (builtin "One Step Simplification" (formula "13"))
               (rule "true_left" (formula "13"))
               (rule "elimGcdLeq_antec" (formula "13") (inst "elimGcdRightDiv=Z(4(6(#)))") (inst "elimGcdLeftDiv=l_0") (inst "elimGcd=Z(2(#))"))
               (rule "leq_literals" (formula "13") (term "0,0"))
                (builtin "One Step Simplification" (formula "13"))
               (rule "polySimp_mulLiterals" (formula "13") (term "1,0,0"))
               (rule "neg_literal" (formula "13") (term "0,0,0,0,0,0"))
               (rule "polySimp_mulLiterals" (formula "13") (term "1,0,0,0,0,0"))
               (rule "mul_literals" (formula "13") (term "1,0,0,0,0,0"))
               (rule "polySimp_addLiterals" (formula "13") (term "0,0,0,0"))
               (rule "add_zero_right" (formula "13") (term "0,0,0,0"))
               (rule "polySimp_pullOutFactor0b" (formula "13") (term "0,0"))
               (rule "add_literals" (formula "13") (term "1,1,0,0"))
               (rule "times_zero_1" (formula "13") (term "1,0,0"))
               (rule "add_zero_right" (formula "13") (term "0,0"))
               (rule "qeq_literals" (formula "13") (term "0"))
                (builtin "One Step Simplification" (formula "13"))
               (rule "inEqSimp_exactShadow3" (formula "5") (ifseqformula "7"))
               (rule "times_zero_1" (formula "5") (term "0,0"))
               (rule "add_zero_left" (formula "5") (term "0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "5"))
               (rule "mul_literals" (formula "5") (term "1"))
               (rule "inEqSimp_subsumption1" (formula "5") (ifseqformula "25"))
               (rule "leq_literals" (formula "5") (term "0"))
                (builtin "One Step Simplification" (formula "5"))
               (rule "true_left" (formula "5"))
               (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "4"))
               (rule "polySimp_mulComm0" (formula "2") (term "0,0"))
               (rule "polySimp_addComm0" (formula "2") (term "0"))
               (rule "inEqSimp_sepNegMonomial1" (formula "2"))
               (rule "polySimp_mulLiterals" (formula "2") (term "0"))
               (rule "polySimp_elimOne" (formula "2") (term "0"))
               (rule "arrayLengthIsAShort" (formula "25") (term "0"))
                (builtin "One Step Simplification" (formula "25"))
               (rule "true_left" (formula "25"))
               (rule "arrayLengthNotNegative" (formula "25") (term "0"))
               (rule "arrayLengthNotNegative" (formula "23") (term "0"))
               (rule "inEqSimp_subsumption1" (formula "23") (ifseqformula "24"))
               (rule "leq_literals" (formula "23") (term "0"))
                (builtin "One Step Simplification" (formula "23"))
               (rule "true_left" (formula "23"))
               (rule "arrayLengthIsAShort" (formula "23") (term "0"))
                (builtin "One Step Simplification" (formula "23"))
               (rule "true_left" (formula "23"))
               (rule "cnf_rightDist" (formula "30") (term "0"))
               (rule "distr_forallAnd" (formula "30"))
               (rule "andLeft" (formula "30"))
               (rule "commute_or" (formula "31") (term "0"))
               (rule "all_pull_out3" (formula "29") (term "0"))
               (rule "shift_paren_or" (formula "29") (term "0,0"))
               (rule "shift_paren_or" (formula "29") (term "0,0,0"))
               (rule "all_pull_out3" (formula "18") (term "0"))
               (rule "shift_paren_or" (formula "18") (term "0,0"))
               (rule "shift_paren_or" (formula "18") (term "0,0,0"))
               (rule "onlyCreatedObjectsAreReferencedFinal" (formula "17") (term "0,0") (ifseqformula "8") (ifseqformula "10"))
               (rule "replace_known_right" (formula "17") (term "0") (ifseqformula "36"))
                (builtin "One Step Simplification" (formula "17"))
               (rule "onlyCreatedObjectsAreReferencedFinal" (formula "18") (term "1") (ifseqformula "8") (ifseqformula "10"))
               (rule "replace_known_right" (formula "18") (term "1") (ifseqformula "35"))
                (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "38")))
               (rule "closeFalse" (formula "18"))
            )
            (branch "self.equal_buckets = TRUE FALSE"
               (rule "applyEq" (formula "27") (term "1,1,0,0,0,1,0") (ifseqformula "15"))
               (rule "applyEq" (formula "26") (term "1,1,1,0,0") (ifseqformula "15"))
               (rule "applyEq" (formula "25") (term "0") (ifseqformula "15"))
               (rule "inEqSimp_commuteLeq" (formula "25"))
               (rule "applyEq" (formula "4") (term "0") (ifseqformula "15"))
               (rule "applyEq" (formula "7") (term "0") (ifseqformula "15"))
               (rule "applyEq" (formula "24") (term "1") (ifseqformula "15"))
               (rule "applyEq" (formula "29") (term "1,1,0,0") (ifseqformula "15"))
               (rule "applyEq" (formula "28") (term "1,1,0,0") (ifseqformula "15"))
               (rule "applyEq" (formula "27") (term "1,1,1,0,0") (ifseqformula "15"))
               (rule "applyEq" (formula "17") (term "1,0,0,0,1,0") (ifseqformula "15"))
               (rule "applyEq" (formula "23") (term "0") (ifseqformula "15"))
               (rule "applyEq" (formula "17") (term "1,1,0,0") (ifseqformula "15"))
               (rule "applyEq" (formula "18") (term "1,0,2,0") (ifseqformula "15"))
               (rule "eqSymm" (formula "18"))
               (rule "applyEq" (formula "18") (term "1,0,2,0") (ifseqformula "15"))
               (rule "eqSymm" (formula "18"))
               (rule "applyEq" (formula "21") (term "1") (ifseqformula "15"))
               (rule "applyEq" (formula "27") (term "0,1,0,0,1,1,1,0") (ifseqformula "15"))
               (rule "inEqSimp_exactShadow3" (formula "4") (ifseqformula "14"))
               (rule "polySimp_rightDist" (formula "4") (term "0,0"))
               (rule "mul_literals" (formula "4") (term "0,0,0"))
               (rule "polySimp_addComm1" (formula "4") (term "0"))
               (rule "add_literals" (formula "4") (term "0,0"))
               (rule "inEqSimp_sepNegMonomial1" (formula "4"))
               (rule "polySimp_mulLiterals" (formula "4") (term "0"))
               (rule "polySimp_elimOne" (formula "4") (term "0"))
               (rule "inEqSimp_exactShadow3" (formula "8") (ifseqformula "15"))
               (rule "polySimp_rightDist" (formula "8") (term "0,0"))
               (rule "mul_literals" (formula "8") (term "0,0,0"))
               (rule "polySimp_addComm1" (formula "8") (term "0"))
               (rule "add_literals" (formula "8") (term "0,0"))
               (rule "inEqSimp_sepNegMonomial1" (formula "8"))
               (rule "polySimp_mulLiterals" (formula "8") (term "0"))
               (rule "polySimp_elimOne" (formula "8") (term "0"))
               (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "4"))
               (rule "polySimp_mulComm0" (formula "2") (term "0,0"))
               (rule "polySimp_addComm0" (formula "2") (term "0"))
               (rule "inEqSimp_sepNegMonomial1" (formula "2"))
               (rule "polySimp_mulLiterals" (formula "2") (term "0"))
               (rule "polySimp_elimOne" (formula "2") (term "0"))
               (rule "arrayLengthIsAShort" (formula "25") (term "0"))
                (builtin "One Step Simplification" (formula "25"))
               (rule "true_left" (formula "25"))
               (rule "arrayLengthNotNegative" (formula "25") (term "0"))
               (rule "arrayLengthNotNegative" (formula "24") (term "0"))
               (rule "inEqSimp_subsumption1" (formula "24") (ifseqformula "25"))
               (rule "leq_literals" (formula "24") (term "0"))
                (builtin "One Step Simplification" (formula "24"))
               (rule "true_left" (formula "24"))
               (rule "arrayLengthIsAShort" (formula "24") (term "0"))
                (builtin "One Step Simplification" (formula "24"))
               (rule "true_left" (formula "24"))
               (rule "cnf_rightDist" (formula "30") (term "0"))
               (rule "distr_forallAnd" (formula "30"))
               (rule "andLeft" (formula "30"))
               (rule "commute_or" (formula "31") (term "0"))
               (rule "all_pull_out3" (formula "29") (term "0"))
               (rule "shift_paren_or" (formula "29") (term "0,0"))
               (rule "shift_paren_or" (formula "29") (term "0,0,0"))
               (rule "all_pull_out3" (formula "19") (term "0"))
               (rule "shift_paren_or" (formula "19") (term "0,0"))
               (rule "shift_paren_or" (formula "19") (term "0,0,0"))
               (rule "allLeft" (formula "19") (inst "t=add(Z(neglit(2(#))),
    int::final(self,
               de.wiesler.Classifier::$num_buckets))"))
               (rule "polySimp_addAssoc" (formula "19") (term "1,1,0,0"))
               (rule "add_literals" (formula "19") (term "0,1,1,0,0"))
               (rule "inEqSimp_homoInEq0" (formula "19") (term "0,0,0,0,0"))
               (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,0,0,0,0"))
               (rule "polySimp_rightDist" (formula "19") (term "1,0,0,0,0,0,0"))
               (rule "mul_literals" (formula "19") (term "0,1,0,0,0,0,0,0"))
               (rule "polySimp_addAssoc" (formula "19") (term "0,0,0,0,0,0"))
               (rule "add_literals" (formula "19") (term "0,0,0,0,0,0,0"))
               (rule "inEqSimp_homoInEq1" (formula "19") (term "1,0,0,0,0"))
               (rule "polySimp_mulComm0" (formula "19") (term "1,0,1,0,0,0,0"))
               (rule "polySimp_rightDist" (formula "19") (term "1,0,1,0,0,0,0"))
               (rule "mul_literals" (formula "19") (term "0,1,0,1,0,0,0,0"))
               (rule "polySimp_addAssoc" (formula "19") (term "0,1,0,0,0,0"))
               (rule "polySimp_addComm0" (formula "19") (term "0,0,1,0,0,0,0"))
               (rule "polySimp_pullOutFactor1b" (formula "19") (term "0,1,0,0,0,0"))
               (rule "add_literals" (formula "19") (term "1,1,0,1,0,0,0,0"))
               (rule "times_zero_1" (formula "19") (term "1,0,1,0,0,0,0"))
               (rule "add_zero_right" (formula "19") (term "0,1,0,0,0,0"))
               (rule "leq_literals" (formula "19") (term "1,0,0,0,0"))
                (builtin "One Step Simplification" (formula "19"))
               (rule "applyEq" (formula "19") (term "1,1,0") (ifseqformula "21"))
               (rule "inEqSimp_sepNegMonomial1" (formula "19") (term "0,0,0,0"))
               (rule "polySimp_mulLiterals" (formula "19") (term "0,0,0,0,0"))
               (rule "polySimp_elimOne" (formula "19") (term "0,0,0,0,0"))
               (rule "inEqSimp_contradInEq1" (formula "19") (term "0,0,0,0") (ifseqformula "15"))
               (rule "qeq_literals" (formula "19") (term "0,0,0,0,0"))
                (builtin "One Step Simplification" (formula "19"))
               (rule "commute_or" (formula "19") (term "0,0"))
               (rule "allLeft" (formula "20") (inst "t=i_0"))
               (rule "inEqSimp_commuteGeq" (formula "20") (term "1,0,0,0,0"))
               (rule "inEqSimp_contradInEq1" (formula "20") (term "0,0,0,0,0") (ifseqformula "6"))
               (rule "qeq_literals" (formula "20") (term "0,0,0,0,0,0"))
                (builtin "One Step Simplification" (formula "20"))
               (rule "inEqSimp_contradInEq1" (formula "20") (term "0,0,0,0") (ifseqformula "9"))
               (rule "inEqSimp_homoInEq1" (formula "20") (term "0,0,0,0,0"))
               (rule "polySimp_pullOutFactor1b" (formula "20") (term "0,0,0,0,0,0"))
               (rule "add_literals" (formula "20") (term "1,1,0,0,0,0,0,0"))
               (rule "times_zero_1" (formula "20") (term "1,0,0,0,0,0,0"))
               (rule "add_zero_right" (formula "20") (term "0,0,0,0,0,0"))
               (rule "leq_literals" (formula "20") (term "0,0,0,0,0"))
                (builtin "One Step Simplification" (formula "20"))
               (rule "commute_or" (formula "20") (term "0,0"))
               (rule "allLeft" (formula "34") (inst "t=add(Z(neglit(1(#))),
    int::final(self,
               de.wiesler.Classifier::$num_buckets))"))
               (rule "polySimp_mulComm1" (formula "34") (term "1,0,0,2,0,1"))
               (rule "polySimp_addComm1" (formula "34") (term "1,0,0,1,0,2,0,1"))
               (rule "polySimp_addComm1" (formula "34") (term "1,1,0,0,0,2,0,1"))
               (rule "polySimp_addComm1" (formula "34") (term "1,0,0,1,0,0,2,0,1"))
               (rule "polySimp_rightDist" (formula "34") (term "1,0,0,2,0,1"))
               (rule "polySimp_mulLiterals" (formula "34") (term "0,1,0,0,2,0,1"))
               (rule "polySimp_mulAssoc" (formula "34") (term "1,1,0,0,2,0,1"))
               (rule "polySimp_mulComm0" (formula "34") (term "0,1,1,0,0,2,0,1"))
               (rule "polySimp_addAssoc" (formula "34") (term "0,0,2,0,1"))
               (rule "polySimp_pullOutFactor1b" (formula "34") (term "0,0,0,2,0,1"))
               (rule "add_literals" (formula "34") (term "1,1,0,0,0,2,0,1"))
               (rule "inEqSimp_homoInEq1" (formula "34") (term "1,0"))
               (rule "polySimp_mulComm0" (formula "34") (term "1,0,1,0"))
               (rule "polySimp_rightDist" (formula "34") (term "1,0,1,0"))
               (rule "mul_literals" (formula "34") (term "0,1,0,1,0"))
               (rule "polySimp_addAssoc" (formula "34") (term "0,1,0"))
               (rule "polySimp_addComm0" (formula "34") (term "0,0,1,0"))
               (rule "polySimp_pullOutFactor1b" (formula "34") (term "0,1,0"))
               (rule "add_literals" (formula "34") (term "1,1,0,1,0"))
               (rule "times_zero_1" (formula "34") (term "1,0,1,0"))
               (rule "add_zero_right" (formula "34") (term "0,1,0"))
               (rule "leq_literals" (formula "34") (term "1,0"))
                (builtin "One Step Simplification" (formula "34"))
               (rule "inEqSimp_sepPosMonomial0" (formula "34") (term "0"))
               (rule "mul_literals" (formula "34") (term "1,0"))
               (rule "inEqSimp_contradInEq1" (formula "34") (term "0") (ifseqformula "15"))
               (rule "qeq_literals" (formula "34") (term "0,0"))
                (builtin "One Step Simplification" (formula "34"))
               (rule "onlyCreatedObjectsAreReferencedFinal" (formula "18") (term "1") (ifseqformula "10") (ifseqformula "12"))
               (rule "replace_known_right" (formula "18") (term "0") (ifseqformula "41"))
                (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "38")))
               (rule "closeFalse" (formula "18"))
            )
         )
      )
   )
   (branch "Case 2"
       (builtin "One Step Simplification" (formula "7"))
      (rule "translateJavaMulInt" (formula "8") (term "1,1"))
      (rule "translateJavaSubInt" (formula "11") (term "0,2,0"))
      (rule "translateJavaSubInt" (formula "11") (term "0,2,1"))
      (rule "translateJavaSubInt" (formula "16") (term "0,2,0"))
      (rule "translateJavaSubInt" (formula "16") (term "0,2,1"))
      (rule "eqSymm" (formula "8"))
      (rule "eqSymm" (formula "11"))
      (rule "eqSymm" (formula "16"))
      (rule "polySimp_elimSub" (formula "11") (term "0,2,0"))
      (rule "mul_literals" (formula "11") (term "1,0,2,0"))
      (rule "eqSymm" (formula "11"))
      (rule "polySimp_elimSub" (formula "16") (term "0,2,1"))
      (rule "mul_literals" (formula "16") (term "1,0,2,1"))
      (rule "polySimp_elimSub" (formula "16") (term "0,2,0"))
      (rule "mul_literals" (formula "16") (term "1,0,2,0"))
      (rule "polySimp_elimSub" (formula "11") (term "0,2,0"))
      (rule "mul_literals" (formula "11") (term "1,0,2,0"))
      (rule "eqSymm" (formula "11"))
      (rule "polySimp_mulComm0" (formula "8") (term "1,0"))
      (rule "polySimp_addComm0" (formula "16") (term "0,2,1"))
      (rule "polySimp_addComm0" (formula "16") (term "0,2,0"))
      (rule "polySimp_addComm0" (formula "11") (term "0,2,1"))
      (rule "polySimp_addComm0" (formula "11") (term "0,2,0"))
      (rule "inEqSimp_commuteLeq" (formula "6"))
      (rule "pullOutSelect" (formula "16") (term "1") (inst "selectSK=arr_0"))
      (rule "simplifySelectOfAnon" (formula "1"))
       (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "15")))
      (rule "elementOfSetMinus" (formula "1") (term "0,0,0"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "elementOfUnion" (formula "1") (term "0,0,0,0"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "ifthenelse_negated" (formula "1") (term "0"))
      (rule "pullOutSelect" (formula "17") (term "0") (inst "selectSK=arr_1"))
      (rule "simplifySelectOfAnon" (formula "1"))
       (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "16")))
      (rule "applyEq" (formula "1") (term "2,0") (ifseqformula "13"))
      (rule "elementOfSetMinus" (formula "1") (term "0,0,0"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "elementOfUnion" (formula "1") (term "0,0,0,0"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "ifthenelse_negated" (formula "1") (term "0"))
      (rule "Class_invariant_axiom_for_de_wiesler_Tree" (formula "14") (inst "i=i") (inst "i_0=i_0"))
       (builtin "One Step Simplification" (formula "14"))
      (rule "translateJavaSubInt" (formula "14") (term "0,2,1,1,0,1"))
      (rule "translateJavaSubInt" (formula "14") (term "3,0,1,0,0"))
      (rule "andLeft" (formula "14"))
      (rule "andLeft" (formula "14"))
      (rule "andLeft" (formula "14"))
      (rule "andLeft" (formula "14"))
      (rule "andLeft" (formula "14"))
      (rule "andLeft" (formula "14"))
      (rule "andLeft" (formula "16"))
      (rule "andLeft" (formula "14"))
      (rule "andLeft" (formula "14"))
      (rule "andLeft" (formula "16"))
      (rule "notLeft" (formula "14"))
      (rule "notLeft" (formula "14"))
      (rule "eqSymm" (formula "22") (term "1,0"))
      (rule "polySimp_elimSub" (formula "20") (term "3,0"))
      (rule "mul_literals" (formula "20") (term "1,3,0"))
      (rule "polySimp_elimSub" (formula "22") (term "0,2,0,1,0"))
      (rule "mul_literals" (formula "22") (term "1,0,2,0,1,0"))
      (rule "polySimp_addComm0" (formula "20") (term "3,0"))
      (rule "polySimp_addComm0" (formula "22") (term "0,2,0,1,0"))
      (rule "inEqSimp_ltToLeq" (formula "22") (term "1,0,0"))
      (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,1,0,0"))
      (rule "inEqSimp_ltToLeq" (formula "21") (term "1,1,0"))
      (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,1,1,0"))
      (rule "inEqSimp_ltToLeq" (formula "21") (term "1,0,0"))
      (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,1,0,0"))
      (rule "inEqSimp_commuteLeq" (formula "22") (term "0,0,0"))
      (rule "inEqSimp_commuteLeq" (formula "21") (term "0,0,0"))
      (rule "inEqSimp_commuteLeq" (formula "21") (term "0,1,0"))
      (rule "inEqSimp_commuteLeq" (formula "19"))
      (rule "inEqSimp_commuteLeq" (formula "18"))
      (rule "inEqSimp_commuteLeq" (formula "17"))
      (rule "inEqSimp_commuteLeq" (formula "14"))
      (rule "applyEq" (formula "18") (term "1") (ifseqformula "16"))
      (rule "applyEq" (formula "2") (term "1,0,2,1,0") (ifseqformula "16"))
      (rule "applyEq" (formula "19") (term "0,0") (ifseqformula "11"))
      (rule "inEqSimp_commuteGeq" (formula "19"))
      (rule "applyEq" (formula "12") (term "3,0") (ifseqformula "16"))
      (rule "applyEq" (formula "2") (term "1,0,2,2,0") (ifseqformula "16"))
      (rule "applyEq" (formula "22") (term "1,0,1,0") (ifseqformula "11"))
      (rule "applyEq" (formula "1") (term "1,0,2,2,0") (ifseqformula "16"))
      (rule "applyEq" (formula "10") (term "0,1,0") (ifseqformula "16"))
      (rule "applyEq" (formula "20") (term "1,3,0") (ifseqformula "16"))
      (rule "applyEq" (formula "20") (term "1,0") (ifseqformula "11"))
      (rule "applyEq" (formula "10") (term "2,0") (ifseqformula "16"))
      (rule "applyEq" (formula "13") (term "1,0,2,0") (ifseqformula "16"))
      (rule "eqSymm" (formula "13"))
      (rule "applyEq" (formula "1") (term "1,0,2,1,0") (ifseqformula "16"))
      (rule "applyEq" (formula "17") (term "0") (ifseqformula "16"))
      (rule "applyEq" (formula "24") (term "0") (ifseqformula "11"))
      (rule "applyEq" (formula "21") (term "0,1,0,0,1,0,0") (ifseqformula "16"))
      (rule "applyEq" (formula "21") (term "0,1,0,0,1,1,0") (ifseqformula "16"))
      (rule "applyEq" (formula "22") (term "0,1,0,0,1,0,0") (ifseqformula "16"))
      (rule "applyEq" (formula "19") (term "0") (ifseqformula "16"))
      (rule "applyEq" (formula "13") (term "1,0,2,0") (ifseqformula "16"))
      (rule "eqSymm" (formula "13"))
      (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "1,0,0"))
      (rule "polySimp_mulComm0" (formula "21") (term "1,1,0,0"))
      (rule "polySimp_rightDist" (formula "21") (term "1,1,0,0"))
      (rule "polySimp_mulLiterals" (formula "21") (term "1,1,1,0,0"))
      (rule "mul_literals" (formula "21") (term "0,1,1,0,0"))
      (rule "polySimp_elimOne" (formula "21") (term "1,1,1,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "1,1,0"))
      (rule "polySimp_mulComm0" (formula "21") (term "1,1,1,0"))
      (rule "polySimp_rightDist" (formula "21") (term "1,1,1,0"))
      (rule "mul_literals" (formula "21") (term "0,1,1,1,0"))
      (rule "polySimp_mulLiterals" (formula "21") (term "1,1,1,1,0"))
      (rule "polySimp_elimOne" (formula "21") (term "1,1,1,1,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "1,0,0"))
      (rule "polySimp_mulComm0" (formula "22") (term "1,1,0,0"))
      (rule "polySimp_rightDist" (formula "22") (term "1,1,0,0"))
      (rule "polySimp_mulLiterals" (formula "22") (term "1,1,1,0,0"))
      (rule "mul_literals" (formula "22") (term "0,1,1,0,0"))
      (rule "polySimp_elimOne" (formula "22") (term "1,1,1,0,0"))
      (rule "inEqSimp_exactShadow3" (formula "17") (ifseqformula "19"))
      (rule "mul_literals" (formula "17") (term "0,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "17"))
      (rule "mul_literals" (formula "17") (term "1"))
      (rule "nnf_imp2or" (formula "22") (term "0"))
      (rule "nnf_imp2or" (formula "23") (term "0"))
      (rule "nnf_notAnd" (formula "22") (term "0,0"))
      (rule "inEqSimp_notLeq" (formula "22") (term "1,0,0"))
      (rule "polySimp_rightDist" (formula "22") (term "1,0,0,1,0,0"))
      (rule "mul_literals" (formula "22") (term "0,1,0,0,1,0,0"))
      (rule "polySimp_addAssoc" (formula "22") (term "0,0,1,0,0"))
      (rule "add_literals" (formula "22") (term "0,0,0,1,0,0"))
      (rule "add_zero_left" (formula "22") (term "0,0,1,0,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "22") (term "1,0,0"))
      (rule "polySimp_mulLiterals" (formula "22") (term "1,1,0,0"))
      (rule "polySimp_elimOne" (formula "22") (term "1,1,0,0"))
      (rule "inEqSimp_notGeq" (formula "22") (term "0,0,0"))
      (rule "mul_literals" (formula "22") (term "1,0,0,0,0,0"))
      (rule "add_literals" (formula "22") (term "0,0,0,0,0"))
      (rule "add_zero_left" (formula "22") (term "0,0,0,0"))
      (rule "nnf_notAnd" (formula "23") (term "0,0"))
      (rule "inEqSimp_notGeq" (formula "23") (term "0,0,0"))
      (rule "mul_literals" (formula "23") (term "1,0,0,0,0,0"))
      (rule "add_literals" (formula "23") (term "0,0,0,0,0"))
      (rule "add_zero_left" (formula "23") (term "0,0,0,0"))
      (rule "inEqSimp_notLeq" (formula "23") (term "1,0,0"))
      (rule "polySimp_rightDist" (formula "23") (term "1,0,0,1,0,0"))
      (rule "mul_literals" (formula "23") (term "0,1,0,0,1,0,0"))
      (rule "polySimp_addAssoc" (formula "23") (term "0,0,1,0,0"))
      (rule "add_literals" (formula "23") (term "0,0,0,1,0,0"))
      (rule "add_zero_left" (formula "23") (term "0,0,1,0,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "23") (term "1,0,0"))
      (rule "polySimp_mulLiterals" (formula "23") (term "1,1,0,0"))
      (rule "polySimp_elimOne" (formula "23") (term "1,1,0,0"))
      (rule "Contract_axiom_for_isSortedSliceTransitive_in_Functions" (formula "12") (term "0"))
      (rule "replace_known_left" (formula "12") (term "0,1") (ifseqformula "13"))
       (builtin "One Step Simplification" (formula "12") (ifInst ""  (formula "27")) (ifInst ""  (formula "3")))
      (rule "Definition_axiom_for_isSortedSliceTransitive_in_de_wiesler_Functions" (formula "13") (term "0") (inst "i=i") (inst "j=j"))
       (builtin "One Step Simplification" (formula "13"))
      (rule "inEqSimp_ltToLeq" (formula "13") (term "1,0,0,1,0"))
      (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,1,0,0,1,0"))
      (rule "inEqSimp_ltToLeq" (formula "13") (term "1,0,0"))
      (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,1,0,0"))
      (rule "inEqSimp_commuteLeq" (formula "13") (term "0,0,0,1,0"))
      (rule "inEqSimp_commuteLeq" (formula "13") (term "1,0,1,0"))
      (rule "inEqSimp_commuteLeq" (formula "13") (term "0,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "1,0,0,1,0"))
      (rule "polySimp_mulComm0" (formula "13") (term "1,1,0,0,1,0"))
      (rule "polySimp_rightDist" (formula "13") (term "1,1,0,0,1,0"))
      (rule "polySimp_mulLiterals" (formula "13") (term "1,1,1,0,0,1,0"))
      (rule "mul_literals" (formula "13") (term "0,1,1,0,0,1,0"))
      (rule "polySimp_elimOne" (formula "13") (term "1,1,1,0,0,1,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "1,0,0"))
      (rule "polySimp_mulComm0" (formula "13") (term "1,1,0,0"))
      (rule "polySimp_rightDist" (formula "13") (term "1,1,0,0"))
      (rule "polySimp_mulLiterals" (formula "13") (term "1,1,1,0,0"))
      (rule "mul_literals" (formula "13") (term "0,1,1,0,0"))
      (rule "polySimp_elimOne" (formula "13") (term "1,1,1,0,0"))
      (rule "nnf_imp2or" (formula "13") (term "0"))
      (rule "nnf_notAnd" (formula "13") (term "0,0"))
      (rule "inEqSimp_notGeq" (formula "13") (term "0,0,0"))
      (rule "times_zero_1" (formula "13") (term "1,0,0,0,0,0"))
      (rule "add_zero_right" (formula "13") (term "0,0,0,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "0,0,0"))
      (rule "mul_literals" (formula "13") (term "1,0,0,0"))
      (rule "inEqSimp_notLeq" (formula "13") (term "1,0,0"))
      (rule "polySimp_rightDist" (formula "13") (term "1,0,0,1,0,0"))
      (rule "mul_literals" (formula "13") (term "0,1,0,0,1,0,0"))
      (rule "polySimp_addAssoc" (formula "13") (term "0,0,1,0,0"))
      (rule "add_literals" (formula "13") (term "0,0,0,1,0,0"))
      (rule "add_zero_left" (formula "13") (term "0,0,1,0,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "13") (term "1,0,0"))
      (rule "polySimp_mulLiterals" (formula "13") (term "1,1,0,0"))
      (rule "polySimp_elimOne" (formula "13") (term "1,1,0,0"))
      (rule "nnf_imp2or" (formula "13") (term "0,1,0"))
      (rule "nnf_notAnd" (formula "13") (term "0,0,1,0"))
      (rule "inEqSimp_notLeq" (formula "13") (term "1,0,0,1,0"))
      (rule "polySimp_rightDist" (formula "13") (term "1,0,0,1,0,0,1,0"))
      (rule "mul_literals" (formula "13") (term "0,1,0,0,1,0,0,1,0"))
      (rule "polySimp_addAssoc" (formula "13") (term "0,0,1,0,0,1,0"))
      (rule "add_literals" (formula "13") (term "0,0,0,1,0,0,1,0"))
      (rule "add_zero_left" (formula "13") (term "0,0,1,0,0,1,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "13") (term "1,0,0,1,0"))
      (rule "polySimp_mulLiterals" (formula "13") (term "1,1,0,0,1,0"))
      (rule "polySimp_elimOne" (formula "13") (term "1,1,0,0,1,0"))
      (rule "inEqSimp_notGeq" (formula "13") (term "0,0,0,1,0"))
      (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,0,0,0,1,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "0,0,0,1,0"))
      (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,0,1,0"))
      (rule "polySimp_rightDist" (formula "13") (term "1,0,0,0,1,0"))
      (rule "polySimp_mulLiterals" (formula "13") (term "1,1,0,0,0,1,0"))
      (rule "mul_literals" (formula "13") (term "0,1,0,0,0,1,0"))
      (rule "polySimp_elimOne" (formula "13") (term "1,1,0,0,0,1,0"))
      (rule "Definition_axiom_for_isSortedSliceTransitive_in_de_wiesler_Functions" (formula "22") (term "0") (inst "i=i") (inst "j=j"))
       (builtin "One Step Simplification" (formula "22"))
      (rule "inEqSimp_ltToLeq" (formula "22") (term "1,0,0,1,0"))
      (rule "polySimp_rightDist" (formula "22") (term "1,0,0,1,0,0,1,0"))
      (rule "mul_literals" (formula "22") (term "0,1,0,0,1,0,0,1,0"))
      (rule "polySimp_addAssoc" (formula "22") (term "0,0,1,0,0,1,0"))
      (rule "add_literals" (formula "22") (term "0,0,0,1,0,0,1,0"))
      (rule "inEqSimp_ltToLeq" (formula "22") (term "1,0,0"))
      (rule "polySimp_rightDist" (formula "22") (term "1,0,0,1,0,0"))
      (rule "mul_literals" (formula "22") (term "0,1,0,0,1,0,0"))
      (rule "polySimp_addAssoc" (formula "22") (term "0,0,1,0,0"))
      (rule "add_literals" (formula "22") (term "0,0,0,1,0,0"))
      (rule "inEqSimp_commuteLeq" (formula "22") (term "1,0,1,0"))
      (rule "inEqSimp_commuteLeq" (formula "22") (term "0,0,0,1,0"))
      (rule "inEqSimp_commuteLeq" (formula "22") (term "0,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "1,0,0,1,0"))
      (rule "polySimp_mulComm0" (formula "22") (term "1,1,0,0,1,0"))
      (rule "polySimp_rightDist" (formula "22") (term "1,1,0,0,1,0"))
      (rule "polySimp_mulLiterals" (formula "22") (term "1,1,1,0,0,1,0"))
      (rule "mul_literals" (formula "22") (term "0,1,1,0,0,1,0"))
      (rule "polySimp_elimOne" (formula "22") (term "1,1,1,0,0,1,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "1,0,0"))
      (rule "polySimp_mulComm0" (formula "22") (term "1,1,0,0"))
      (rule "polySimp_rightDist" (formula "22") (term "1,1,0,0"))
      (rule "polySimp_mulLiterals" (formula "22") (term "1,1,1,0,0"))
      (rule "mul_literals" (formula "22") (term "0,1,1,0,0"))
      (rule "polySimp_elimOne" (formula "22") (term "1,1,1,0,0"))
      (rule "nnf_imp2or" (formula "22") (term "0"))
      (rule "nnf_notAnd" (formula "22") (term "0,0"))
      (rule "inEqSimp_notGeq" (formula "22") (term "0,0,0"))
      (rule "times_zero_1" (formula "22") (term "1,0,0,0,0,0"))
      (rule "add_zero_right" (formula "22") (term "0,0,0,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "0,0,0"))
      (rule "mul_literals" (formula "22") (term "1,0,0,0"))
      (rule "inEqSimp_notLeq" (formula "22") (term "1,0,0"))
      (rule "polySimp_rightDist" (formula "22") (term "1,0,0,1,0,0"))
      (rule "mul_literals" (formula "22") (term "0,1,0,0,1,0,0"))
      (rule "polySimp_addAssoc" (formula "22") (term "0,0,1,0,0"))
      (rule "add_literals" (formula "22") (term "0,0,0,1,0,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "22") (term "1,0,0"))
      (rule "polySimp_mulComm0" (formula "22") (term "1,1,0,0"))
      (rule "polySimp_rightDist" (formula "22") (term "1,1,0,0"))
      (rule "polySimp_mulLiterals" (formula "22") (term "1,1,1,0,0"))
      (rule "mul_literals" (formula "22") (term "0,1,1,0,0"))
      (rule "polySimp_elimOne" (formula "22") (term "1,1,1,0,0"))
      (rule "nnf_imp2or" (formula "22") (term "0,1,0"))
      (rule "nnf_notAnd" (formula "22") (term "0,0,1,0"))
      (rule "inEqSimp_notGeq" (formula "22") (term "0,0,0,1,0"))
      (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,0,0,0,1,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "0,0,0,1,0"))
      (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,0,1,0"))
      (rule "polySimp_rightDist" (formula "22") (term "1,0,0,0,1,0"))
      (rule "polySimp_mulLiterals" (formula "22") (term "1,1,0,0,0,1,0"))
      (rule "mul_literals" (formula "22") (term "0,1,0,0,0,1,0"))
      (rule "polySimp_elimOne" (formula "22") (term "1,1,0,0,0,1,0"))
      (rule "inEqSimp_notLeq" (formula "22") (term "1,0,0,1,0"))
      (rule "polySimp_rightDist" (formula "22") (term "1,0,0,1,0,0,1,0"))
      (rule "mul_literals" (formula "22") (term "0,1,0,0,1,0,0,1,0"))
      (rule "polySimp_addAssoc" (formula "22") (term "0,0,1,0,0,1,0"))
      (rule "add_literals" (formula "22") (term "0,0,0,1,0,0,1,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "22") (term "1,0,0,1,0"))
      (rule "polySimp_mulComm0" (formula "22") (term "1,1,0,0,1,0"))
      (rule "polySimp_rightDist" (formula "22") (term "1,1,0,0,1,0"))
      (rule "polySimp_mulLiterals" (formula "22") (term "1,1,1,0,0,1,0"))
      (rule "mul_literals" (formula "22") (term "0,1,1,0,0,1,0"))
      (rule "polySimp_elimOne" (formula "22") (term "1,1,1,0,0,1,0"))
      (rule "Definition_axiom_for_pi_in_de_wiesler_Tree" (formula "23") (term "0,1,1,0"))
      (rule "translateJavaSubInt" (formula "23") (term "0,1,1,0,1,1,0"))
      (rule "polySimp_elimSub" (formula "23") (term "1,0,0,0,1,1,0"))
      (rule "polySimp_elimSub" (formula "23") (term "1,1,0,1,1,0"))
      (rule "polySimp_elimSub" (formula "23") (term "0,1,1,0,1,1,0"))
      (rule "mul_literals" (formula "23") (term "1,0,1,1,0,1,1,0"))
      (rule "polySimp_mulComm0" (formula "23") (term "0,1,1,0"))
      (rule "polySimp_addComm0" (formula "23") (term "0,1,0,0,1,1,0"))
      (rule "polySimp_rightDist" (formula "23") (term "0,1,0,1,1,0"))
      (rule "polySimp_mulLiterals" (formula "23") (term "1,0,1,0,1,1,0"))
      (rule "polySimp_mulComm0" (formula "23") (term "0,0,1,0,1,1,0"))
      (rule "polySimp_addComm1" (formula "23") (term "1,0,1,1,0"))
      (rule "polySimp_addComm0" (formula "23") (term "0,1,0,1,1,0"))
      (rule "polySimp_rightDist" (formula "23") (term "0,1,1,0"))
      (rule "polySimp_mulComm1" (formula "23") (term "1,0,1,1,0"))
      (rule "polySimp_mulComm0" (formula "23") (term "0,1,0,1,1,0"))
      (rule "polySimp_rightDist" (formula "23") (term "0,0,1,1,0"))
      (rule "polySimp_elimOne" (formula "23") (term "0,0,0,1,1,0"))
      (rule "polySimp_mulComm1" (formula "23") (term "1,0,0,1,1,0"))
      (rule "polySimp_mulComm0" (formula "23") (term "0,1,0,0,1,1,0"))
      (rule "inEqSimp_homoInEq0" (formula "23") (term "1,1,0"))
      (rule "polySimp_mulComm0" (formula "23") (term "1,0,1,1,0"))
      (rule "polySimp_rightDist" (formula "23") (term "1,0,1,1,0"))
      (rule "polySimp_mulLiterals" (formula "23") (term "1,1,0,1,1,0"))
      (rule "polySimp_rightDist" (formula "23") (term "0,1,0,1,1,0"))
      (rule "polySimp_mulLiterals" (formula "23") (term "1,0,1,0,1,1,0"))
      (rule "polySimp_mulComm0" (formula "23") (term "0,0,1,0,1,1,0"))
      (rule "polySimp_addAssoc" (formula "23") (term "0,1,1,0"))
      (rule "polySimp_addAssoc" (formula "23") (term "0,0,1,1,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "23") (term "1,1,0"))
      (rule "polySimp_mulComm0" (formula "23") (term "1,1,1,0"))
      (rule "polySimp_rightDist" (formula "23") (term "1,1,1,0"))
      (rule "polySimp_mulLiterals" (formula "23") (term "1,1,1,1,0"))
      (rule "polySimp_rightDist" (formula "23") (term "0,1,1,1,0"))
      (rule "polySimp_mulLiterals" (formula "23") (term "1,0,1,1,1,0"))
      (rule "polySimp_elimOne" (formula "23") (term "1,0,1,1,1,0"))
      (rule "polySimp_rightDist" (formula "23") (term "0,0,1,1,1,0"))
      (rule "mul_literals" (formula "23") (term "0,0,0,1,1,1,0"))
      (rule "Definition_axiom_for_pi_in_de_wiesler_Tree" (formula "23") (term "0,0,1,0"))
      (rule "translateJavaSubInt" (formula "23") (term "0,1,1,0,0,1,0"))
      (rule "polySimp_elimSub" (formula "23") (term "1,0,0,0,0,1,0"))
      (rule "polySimp_elimSub" (formula "23") (term "1,1,0,0,1,0"))
      (rule "polySimp_elimSub" (formula "23") (term "0,1,1,0,0,1,0"))
      (rule "mul_literals" (formula "23") (term "1,0,1,1,0,0,1,0"))
      (rule "polySimp_mulComm0" (formula "23") (term "0,0,1,0"))
      (rule "polySimp_addComm0" (formula "23") (term "0,1,0,0,0,1,0"))
      (rule "polySimp_rightDist" (formula "23") (term "0,1,0,0,1,0"))
      (rule "polySimp_mulLiterals" (formula "23") (term "1,0,1,0,0,1,0"))
      (rule "polySimp_mulComm0" (formula "23") (term "0,0,1,0,0,1,0"))
      (rule "polySimp_addComm1" (formula "23") (term "1,0,0,1,0"))
      (rule "polySimp_addComm0" (formula "23") (term "0,1,0,0,1,0"))
      (rule "polySimp_rightDist" (formula "23") (term "0,0,1,0"))
      (rule "polySimp_mulComm1" (formula "23") (term "1,0,0,1,0"))
      (rule "polySimp_mulComm0" (formula "23") (term "0,1,0,0,1,0"))
      (rule "polySimp_rightDist" (formula "23") (term "0,0,0,1,0"))
      (rule "polySimp_elimOne" (formula "23") (term "0,0,0,0,1,0"))
      (rule "polySimp_mulComm1" (formula "23") (term "1,0,0,0,1,0"))
      (rule "polySimp_mulComm0" (formula "23") (term "0,1,0,0,0,1,0"))
      (rule "inEqSimp_homoInEq1" (formula "23") (term "0,1,0"))
      (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,1,0"))
      (rule "polySimp_rightDist" (formula "23") (term "1,0,0,1,0"))
      (rule "polySimp_mulLiterals" (formula "23") (term "1,1,0,0,1,0"))
      (rule "polySimp_rightDist" (formula "23") (term "0,1,0,0,1,0"))
      (rule "polySimp_mulLiterals" (formula "23") (term "1,0,1,0,0,1,0"))
      (rule "polySimp_mulComm0" (formula "23") (term "0,0,1,0,0,1,0"))
      (rule "polySimp_addAssoc" (formula "23") (term "0,0,1,0"))
      (rule "polySimp_addAssoc" (formula "23") (term "0,0,0,1,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "0,1,0"))
      (rule "polySimp_mulComm0" (formula "23") (term "1,0,1,0"))
      (rule "polySimp_rightDist" (formula "23") (term "1,0,1,0"))
      (rule "polySimp_mulLiterals" (formula "23") (term "1,1,0,1,0"))
      (rule "polySimp_rightDist" (formula "23") (term "0,1,0,1,0"))
      (rule "polySimp_mulLiterals" (formula "23") (term "1,0,1,0,1,0"))
      (rule "mul_literals" (formula "23") (term "0,0,1,0,1,0"))
      (rule "polySimp_elimOne" (formula "23") (term "1,0,1,0,1,0"))
      (rule "Definition_axiom_for_pi_in_de_wiesler_Tree" (formula "24") (term "1,0,2,0,1,0"))
      (rule "translateJavaSubInt" (formula "24") (term "0,1,1,1,0,2,0,1,0"))
      (rule "polySimp_elimSub" (formula "24") (term "1,0,0,1,0,2,0,1,0"))
      (rule "polySimp_elimSub" (formula "24") (term "1,1,1,0,2,0,1,0"))
      (rule "polySimp_elimSub" (formula "24") (term "0,1,1,1,0,2,0,1,0"))
      (rule "mul_literals" (formula "24") (term "1,0,1,1,1,0,2,0,1,0"))
      (rule "polySimp_mulComm0" (formula "24") (term "1,0,2,0,1,0"))
      (rule "polySimp_addComm0" (formula "24") (term "0,1,0,1,0,2,0,1,0"))
      (rule "polySimp_rightDist" (formula "24") (term "0,1,1,0,2,0,1,0"))
      (rule "polySimp_mulLiterals" (formula "24") (term "1,0,1,1,0,2,0,1,0"))
      (rule "polySimp_mulComm0" (formula "24") (term "0,0,1,1,0,2,0,1,0"))
      (rule "polySimp_addComm1" (formula "24") (term "1,1,0,2,0,1,0"))
      (rule "polySimp_addComm0" (formula "24") (term "0,1,1,0,2,0,1,0"))
      (rule "polySimp_rightDist" (formula "24") (term "1,0,2,0,1,0"))
      (rule "polySimp_mulComm1" (formula "24") (term "1,1,0,2,0,1,0"))
      (rule "polySimp_mulComm0" (formula "24") (term "0,1,1,0,2,0,1,0"))
      (rule "polySimp_rightDist" (formula "24") (term "0,1,0,2,0,1,0"))
      (rule "polySimp_elimOne" (formula "24") (term "0,0,1,0,2,0,1,0"))
      (rule "polySimp_mulComm1" (formula "24") (term "1,0,1,0,2,0,1,0"))
      (rule "polySimp_mulComm0" (formula "24") (term "0,1,0,1,0,2,0,1,0"))
      (rule "polySimp_addAssoc" (formula "24") (term "0,2,0,1,0"))
      (rule "polySimp_addAssoc" (formula "24") (term "0,0,2,0,1,0"))
      (rule "Definition_axiom_for_isSortedSlice_in_de_wiesler_Functions" (formula "12") (term "0") (inst "i=i"))
       (builtin "One Step Simplification" (formula "12"))
      (rule "translateJavaAddInt" (formula "12") (term "0,2,1,1,0"))
      (rule "translateJavaSubInt" (formula "12") (term "1,1,0,0"))
      (rule "polySimp_elimSub" (formula "12") (term "1,1,0,0"))
      (rule "mul_literals" (formula "12") (term "1,1,1,0,0"))
      (rule "polySimp_addComm0" (formula "12") (term "0,2,1,1,0"))
      (rule "polySimp_addComm0" (formula "12") (term "1,1,0,0"))
      (rule "inEqSimp_ltToLeq" (formula "12") (term "1,0,0"))
      (rule "polySimp_rightDist" (formula "12") (term "1,0,0,1,0,0"))
      (rule "mul_literals" (formula "12") (term "0,1,0,0,1,0,0"))
      (rule "polySimp_addAssoc" (formula "12") (term "0,0,1,0,0"))
      (rule "add_literals" (formula "12") (term "0,0,0,1,0,0"))
      (rule "inEqSimp_commuteLeq" (formula "12") (term "0,0,0"))
      (rule "inEqSimp_commuteLeq" (formula "12") (term "1,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "1,0,0"))
      (rule "polySimp_mulComm0" (formula "12") (term "1,1,0,0"))
      (rule "polySimp_rightDist" (formula "12") (term "1,1,0,0"))
      (rule "polySimp_mulLiterals" (formula "12") (term "1,1,1,0,0"))
      (rule "mul_literals" (formula "12") (term "0,1,1,0,0"))
      (rule "polySimp_elimOne" (formula "12") (term "1,1,1,0,0"))
      (rule "nnf_imp2or" (formula "12") (term "0"))
      (rule "nnf_notAnd" (formula "12") (term "0,0"))
      (rule "inEqSimp_notLeq" (formula "12") (term "1,0,0"))
      (rule "polySimp_rightDist" (formula "12") (term "1,0,0,1,0,0"))
      (rule "mul_literals" (formula "12") (term "0,1,0,0,1,0,0"))
      (rule "polySimp_addAssoc" (formula "12") (term "0,0,1,0,0"))
      (rule "add_literals" (formula "12") (term "0,0,0,1,0,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "12") (term "1,0,0"))
      (rule "polySimp_mulComm0" (formula "12") (term "1,1,0,0"))
      (rule "polySimp_rightDist" (formula "12") (term "1,1,0,0"))
      (rule "polySimp_mulLiterals" (formula "12") (term "1,1,1,0,0"))
      (rule "mul_literals" (formula "12") (term "0,1,1,0,0"))
      (rule "polySimp_elimOne" (formula "12") (term "1,1,1,0,0"))
      (rule "inEqSimp_notGeq" (formula "12") (term "0,0,0"))
      (rule "times_zero_1" (formula "12") (term "1,0,0,0,0,0"))
      (rule "add_zero_right" (formula "12") (term "0,0,0,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "0,0,0"))
      (rule "mul_literals" (formula "12") (term "1,0,0,0"))
      (rule "commute_or" (formula "13") (term "0,0,1,0"))
      (rule "ifthenelse_split" (formula "2") (term "0"))
      (branch "self.sorted_splitters.<created> = TRUE TRUE"
         (rule "applyEqReverse" (formula "30") (term "1") (ifseqformula "3"))
         (rule "hideAuxiliaryEq" (formula "3"))
         (rule "eqSymm" (formula "29"))
         (rule "replace_known_left" (formula "1") (term "0,0") (ifseqformula "2"))
          (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "29")))
         (rule "closeFalse" (formula "1"))
      )
      (branch "self.sorted_splitters.<created> = TRUE FALSE"
         (rule "applyEqReverse" (formula "30") (term "1") (ifseqformula "2"))
         (rule "hideAuxiliaryEq" (formula "2"))
         (rule "eqSymm" (formula "29"))
         (rule "replace_known_right" (formula "1") (term "0,0") (ifseqformula "24"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "applyEqReverse" (formula "29") (term "1") (ifseqformula "1"))
         (rule "hideAuxiliaryEq" (formula "1"))
         (rule "eqSymm" (formula "28"))
         (rule "commute_or" (formula "20") (term "0,0,1,0"))
         (rule "ifthenelse_split" (formula "8") (term "0"))
         (branch "self.equal_buckets = TRUE TRUE"
            (rule "newSym_eq" (formula "9") (inst "l=l_0") (inst "newSymDef=mul(int::final(self,
               de.wiesler.Classifier::$num_buckets),
    Z(0(#)))"))
            (rule "times_zero_1" (formula "9") (term "1,1"))
            (rule "add_zero_right" (formula "9") (term "1"))
            (rule "applyEq" (formula "22") (term "1,1,0,0,0,1,0") (ifseqformula "9"))
            (rule "applyEq" (formula "13") (term "1,0,0,0,1,0") (ifseqformula "9"))
            (rule "applyEq" (formula "30") (term "1,0,2,0") (ifseqformula "9"))
            (rule "eqSymm" (formula "30"))
            (rule "applyEq" (formula "21") (term "0") (ifseqformula "9"))
            (rule "inEqSimp_commuteLeq" (formula "21"))
            (rule "applyEq" (formula "23") (term "1,1,0,0") (ifseqformula "9"))
            (rule "applyEq" (formula "19") (term "0") (ifseqformula "9"))
            (rule "applyEq" (formula "12") (term "1,1,1,0,0") (ifseqformula "9"))
            (rule "applyEq" (formula "13") (term "1,1,0,0") (ifseqformula "9"))
            (rule "applyEq" (formula "22") (term "1,1,1,0,0") (ifseqformula "9"))
            (rule "applyEq" (formula "20") (term "1") (ifseqformula "9"))
            (rule "applyEq" (formula "14") (term "1,0,2,0") (ifseqformula "9"))
            (rule "eqSymm" (formula "14"))
            (rule "applyEq" (formula "10") (term "0,0") (ifseqformula "9"))
            (rule "eqSymm" (formula "10"))
            (rule "applyEq" (formula "24") (term "1,1,0,0") (ifseqformula "9"))
            (rule "applyEq" (formula "6") (term "0") (ifseqformula "10"))
            (rule "applyEq" (formula "30") (term "1,0,2,0") (ifseqformula "9"))
            (rule "eqSymm" (formula "30"))
            (rule "applyEq" (formula "7") (term "0") (ifseqformula "10"))
            (rule "applyEq" (formula "14") (term "1,0,2,0") (ifseqformula "9"))
            (rule "eqSymm" (formula "14"))
            (rule "applyEq" (formula "17") (term "1") (ifseqformula "9"))
            (rule "applyEq" (formula "23") (term "0,1,0,0,1,1,1,0") (ifseqformula "9"))
            (rule "inEqSimp_subsumption6" (formula "6") (ifseqformula "19"))
            (rule "greater_literals" (formula "6") (term "0,0"))
             (builtin "One Step Simplification" (formula "6"))
            (rule "mul_literals" (formula "6") (term "1,0"))
            (rule "leq_literals" (formula "6") (term "0"))
             (builtin "One Step Simplification" (formula "6"))
            (rule "true_left" (formula "6"))
            (rule "elimGcdLeq_antec" (formula "6") (inst "elimGcdRightDiv=Z(4(6(#)))") (inst "elimGcdLeftDiv=l_0") (inst "elimGcd=Z(2(#))"))
            (rule "polySimp_mulLiterals" (formula "6") (term "1,0,0,0,0,1,0"))
            (rule "polySimp_mulLiterals" (formula "6") (term "1,0,1,0"))
            (rule "leq_literals" (formula "6") (term "0,0"))
             (builtin "One Step Simplification" (formula "6"))
            (rule "mul_literals" (formula "6") (term "1,0,0,0,0,0"))
            (rule "neg_literal" (formula "6") (term "0,0,0,0,0,0"))
            (rule "polySimp_addLiterals" (formula "6") (term "0,0,0,0"))
            (rule "add_zero_right" (formula "6") (term "0,0,0,0"))
            (rule "polySimp_pullOutFactor0b" (formula "6") (term "0,0"))
            (rule "add_literals" (formula "6") (term "1,1,0,0"))
            (rule "times_zero_1" (formula "6") (term "1,0,0"))
            (rule "add_zero_right" (formula "6") (term "0,0"))
            (rule "qeq_literals" (formula "6") (term "0"))
             (builtin "One Step Simplification" (formula "6"))
            (rule "arrayLengthNotNegative" (formula "19") (term "0"))
            (rule "arrayLengthIsAShort" (formula "20") (term "0"))
             (builtin "One Step Simplification" (formula "20"))
            (rule "true_left" (formula "20"))
            (rule "arrayLengthNotNegative" (formula "17") (term "0"))
            (rule "inEqSimp_subsumption1" (formula "17") (ifseqformula "18"))
            (rule "leq_literals" (formula "17") (term "0"))
             (builtin "One Step Simplification" (formula "17"))
            (rule "true_left" (formula "17"))
            (rule "arrayLengthIsAShort" (formula "17") (term "0"))
             (builtin "One Step Simplification" (formula "17"))
            (rule "true_left" (formula "17"))
            (rule "cnf_rightDist" (formula "23") (term "0"))
            (rule "distr_forallAnd" (formula "23"))
            (rule "andLeft" (formula "23"))
            (rule "commute_or" (formula "24") (term "0"))
            (rule "all_pull_out3" (formula "12") (term "0"))
            (rule "shift_paren_or" (formula "12") (term "0,0"))
            (rule "shift_paren_or" (formula "12") (term "0,0,0"))
            (rule "all_pull_out3" (formula "22") (term "0"))
            (rule "shift_paren_or" (formula "22") (term "0,0"))
            (rule "shift_paren_or" (formula "22") (term "0,0,0"))
            (rule "allLeft" (formula "11") (inst "t=add(Z(neglit(2(#))), l_0)"))
            (rule "polySimp_addAssoc" (formula "11") (term "0,2,0,1"))
            (rule "add_literals" (formula "11") (term "0,0,2,0,1"))
            (rule "inEqSimp_commuteGeq" (formula "11") (term "1"))
            (rule "inEqSimp_homoInEq1" (formula "11") (term "1,0"))
            (rule "polySimp_mulComm0" (formula "11") (term "1,0,1,0"))
            (rule "polySimp_rightDist" (formula "11") (term "1,0,1,0"))
            (rule "mul_literals" (formula "11") (term "0,1,0,1,0"))
            (rule "polySimp_addAssoc" (formula "11") (term "0,1,0"))
            (rule "polySimp_addComm1" (formula "11") (term "0,0,1,0"))
            (rule "add_literals" (formula "11") (term "0,0,0,1,0"))
            (rule "polySimp_pullOutFactor1b" (formula "11") (term "0,1,0"))
            (rule "add_literals" (formula "11") (term "1,1,0,1,0"))
            (rule "times_zero_1" (formula "11") (term "1,0,1,0"))
            (rule "add_zero_right" (formula "11") (term "0,1,0"))
            (rule "leq_literals" (formula "11") (term "1,0"))
             (builtin "One Step Simplification" (formula "11"))
            (rule "inEqSimp_homoInEq0" (formula "11") (term "0"))
            (rule "polySimp_mulComm0" (formula "11") (term "1,0,0"))
            (rule "polySimp_rightDist" (formula "11") (term "1,0,0"))
            (rule "mul_literals" (formula "11") (term "0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "11") (term "0,0"))
            (rule "add_literals" (formula "11") (term "0,0,0"))
            (rule "applyEq" (formula "11") (term "0,1") (ifseqformula "14"))
            (rule "inEqSimp_homoInEq0" (formula "11") (term "1"))
            (rule "polySimp_pullOutFactor1" (formula "11") (term "0,1"))
            (rule "add_literals" (formula "11") (term "1,0,1"))
            (rule "times_zero_1" (formula "11") (term "0,1"))
            (rule "qeq_literals" (formula "11") (term "1"))
             (builtin "One Step Simplification" (formula "11"))
            (rule "true_left" (formula "11"))
            (rule "allLeft" (formula "25") (inst "t=add(Z(neglit(1(#))), l_0)"))
            (rule "polySimp_mulComm1" (formula "25") (term "1,0,0,2,0,1"))
            (rule "polySimp_addComm1" (formula "25") (term "1,0,0,1,0,2,0,1"))
            (rule "polySimp_addComm1" (formula "25") (term "1,1,0,0,0,2,0,1"))
            (rule "polySimp_addComm1" (formula "25") (term "1,0,0,1,0,0,2,0,1"))
            (rule "polySimp_rightDist" (formula "25") (term "1,0,0,2,0,1"))
            (rule "polySimp_mulLiterals" (formula "25") (term "0,1,0,0,2,0,1"))
            (rule "polySimp_mulAssoc" (formula "25") (term "1,1,0,0,2,0,1"))
            (rule "polySimp_mulComm0" (formula "25") (term "0,1,1,0,0,2,0,1"))
            (rule "polySimp_addAssoc" (formula "25") (term "0,0,2,0,1"))
            (rule "polySimp_pullOutFactor1b" (formula "25") (term "0,0,0,2,0,1"))
            (rule "add_literals" (formula "25") (term "1,1,0,0,0,2,0,1"))
            (rule "inEqSimp_homoInEq1" (formula "25") (term "1,0"))
            (rule "polySimp_mulComm0" (formula "25") (term "1,0,1,0"))
            (rule "polySimp_rightDist" (formula "25") (term "1,0,1,0"))
            (rule "mul_literals" (formula "25") (term "0,1,0,1,0"))
            (rule "polySimp_addAssoc" (formula "25") (term "0,1,0"))
            (rule "polySimp_addComm0" (formula "25") (term "0,0,1,0"))
            (rule "polySimp_pullOutFactor1b" (formula "25") (term "0,1,0"))
            (rule "add_literals" (formula "25") (term "1,1,0,1,0"))
            (rule "times_zero_1" (formula "25") (term "1,0,1,0"))
            (rule "add_zero_right" (formula "25") (term "0,1,0"))
            (rule "leq_literals" (formula "25") (term "1,0"))
             (builtin "One Step Simplification" (formula "25"))
            (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "0"))
            (rule "mul_literals" (formula "25") (term "1,0"))
            (rule "inEqSimp_contradInEq1" (formula "25") (term "0") (ifseqformula "18"))
            (rule "qeq_literals" (formula "25") (term "0,0"))
             (builtin "One Step Simplification" (formula "25"))
            (rule "allLeft" (formula "12") (inst "t=add(Z(neglit(2(#))), l_0)"))
            (rule "polySimp_addAssoc" (formula "12") (term "1,1,0,0"))
            (rule "add_literals" (formula "12") (term "0,1,1,0,0"))
            (rule "inEqSimp_homoInEq0" (formula "12") (term "0,0,0,0,0"))
            (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0,0,0,0"))
            (rule "polySimp_rightDist" (formula "12") (term "1,0,0,0,0,0,0"))
            (rule "mul_literals" (formula "12") (term "0,1,0,0,0,0,0,0"))
            (rule "polySimp_addAssoc" (formula "12") (term "0,0,0,0,0,0"))
            (rule "add_literals" (formula "12") (term "0,0,0,0,0,0,0"))
            (rule "inEqSimp_homoInEq1" (formula "12") (term "1,0,0,0,0"))
            (rule "polySimp_mulComm0" (formula "12") (term "1,0,1,0,0,0,0"))
            (rule "polySimp_rightDist" (formula "12") (term "1,0,1,0,0,0,0"))
            (rule "mul_literals" (formula "12") (term "0,1,0,1,0,0,0,0"))
            (rule "polySimp_addAssoc" (formula "12") (term "0,1,0,0,0,0"))
            (rule "polySimp_addComm0" (formula "12") (term "0,0,1,0,0,0,0"))
            (rule "polySimp_pullOutFactor1b" (formula "12") (term "0,1,0,0,0,0"))
            (rule "add_literals" (formula "12") (term "1,1,0,1,0,0,0,0"))
            (rule "times_zero_1" (formula "12") (term "1,0,1,0,0,0,0"))
            (rule "add_zero_right" (formula "12") (term "0,1,0,0,0,0"))
            (rule "leq_literals" (formula "12") (term "1,0,0,0,0"))
             (builtin "One Step Simplification" (formula "12"))
            (rule "applyEq" (formula "12") (term "1,1,0") (ifseqformula "14"))
            (rule "inEqSimp_sepNegMonomial1" (formula "12") (term "0,0,0,0"))
            (rule "polySimp_mulLiterals" (formula "12") (term "0,0,0,0,0"))
            (rule "polySimp_elimOne" (formula "12") (term "0,0,0,0,0"))
            (rule "inEqSimp_contradInEq1" (formula "12") (term "0,0,0,0") (ifseqformula "19"))
            (rule "qeq_literals" (formula "12") (term "0,0,0,0,0"))
             (builtin "One Step Simplification" (formula "12"))
            (rule "commute_or" (formula "12") (term "0,0"))
            (rule "onlyCreatedObjectsAreReferencedFinal" (formula "10") (term "0,0") (ifseqformula "1") (ifseqformula "3"))
            (rule "replace_known_right" (formula "10") (term "0") (ifseqformula "31"))
             (builtin "One Step Simplification" (formula "10"))
            (rule "onlyCreatedObjectsAreReferencedFinal" (formula "32") (term "0") (ifseqformula "1") (ifseqformula "3"))
            (rule "replace_known_right" (formula "1") (term "1") (ifseqformula "30"))
             (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "33")))
            (rule "closeFalse" (formula "1"))
         )
         (branch "self.equal_buckets = TRUE FALSE"
            (rule "applyEq" (formula "20") (term "1,1,1,0,0") (ifseqformula "8"))
            (rule "applyEq" (formula "11") (term "1,0,0,0,1,0") (ifseqformula "8"))
            (rule "applyEq" (formula "10") (term "1,1,1,0,0") (ifseqformula "8"))
            (rule "applyEq" (formula "29") (term "1,0,2,0") (ifseqformula "8"))
            (rule "eqSymm" (formula "29"))
            (rule "applyEq" (formula "12") (term "1,0,2,0") (ifseqformula "8"))
            (rule "eqSymm" (formula "12"))
            (rule "applyEq" (formula "19") (term "0") (ifseqformula "8"))
            (rule "inEqSimp_commuteLeq" (formula "19"))
            (rule "applyEq" (formula "20") (term "1,1,0,0,0,1,0") (ifseqformula "8"))
            (rule "applyEq" (formula "11") (term "1,1,0,0") (ifseqformula "8"))
            (rule "applyEq" (formula "21") (term "1,1,0,0") (ifseqformula "8"))
            (rule "applyEq" (formula "22") (term "1,1,0,0") (ifseqformula "8"))
            (rule "applyEq" (formula "18") (term "1") (ifseqformula "8"))
            (rule "applyEq" (formula "17") (term "0") (ifseqformula "8"))
            (rule "applyEq" (formula "28") (term "1,0,2,0") (ifseqformula "8"))
            (rule "eqSymm" (formula "28"))
            (rule "applyEq" (formula "12") (term "1,0,2,0") (ifseqformula "8"))
            (rule "eqSymm" (formula "12"))
            (rule "applyEq" (formula "15") (term "1") (ifseqformula "8"))
            (rule "applyEq" (formula "20") (term "0,1,0,0,1,1,1,0") (ifseqformula "8"))
            (rule "arrayLengthNotNegative" (formula "17") (term "0"))
            (rule "arrayLengthIsAShort" (formula "18") (term "0"))
             (builtin "One Step Simplification" (formula "18"))
            (rule "true_left" (formula "18"))
            (rule "arrayLengthIsAShort" (formula "16") (term "0"))
             (builtin "One Step Simplification" (formula "16"))
            (rule "true_left" (formula "16"))
            (rule "arrayLengthNotNegative" (formula "16") (term "0"))
            (rule "inEqSimp_subsumption1" (formula "16") (ifseqformula "17"))
            (rule "leq_literals" (formula "16") (term "0"))
             (builtin "One Step Simplification" (formula "16"))
            (rule "true_left" (formula "16"))
            (rule "cnf_rightDist" (formula "21") (term "0"))
            (rule "distr_forallAnd" (formula "21"))
            (rule "andLeft" (formula "21"))
            (rule "commute_or" (formula "22") (term "0"))
            (rule "all_pull_out3" (formula "20") (term "0"))
            (rule "shift_paren_or" (formula "20") (term "0,0"))
            (rule "shift_paren_or" (formula "20") (term "0,0,0"))
            (rule "all_pull_out3" (formula "11") (term "0"))
            (rule "shift_paren_or" (formula "11") (term "0,0"))
            (rule "shift_paren_or" (formula "11") (term "0,0,0"))
            (rule "allLeft" (formula "11") (inst "t=add(Z(neglit(2(#))),
    int::final(self,
               de.wiesler.Classifier::$num_buckets))"))
            (rule "polySimp_addAssoc" (formula "11") (term "1,1,0,0"))
            (rule "add_literals" (formula "11") (term "0,1,1,0,0"))
            (rule "inEqSimp_homoInEq1" (formula "11") (term "1,0,0,0,0"))
            (rule "polySimp_mulComm0" (formula "11") (term "1,0,1,0,0,0,0"))
            (rule "polySimp_rightDist" (formula "11") (term "1,0,1,0,0,0,0"))
            (rule "mul_literals" (formula "11") (term "0,1,0,1,0,0,0,0"))
            (rule "polySimp_addAssoc" (formula "11") (term "0,1,0,0,0,0"))
            (rule "polySimp_addComm0" (formula "11") (term "0,0,1,0,0,0,0"))
            (rule "polySimp_pullOutFactor1b" (formula "11") (term "0,1,0,0,0,0"))
            (rule "add_literals" (formula "11") (term "1,1,0,1,0,0,0,0"))
            (rule "times_zero_1" (formula "11") (term "1,0,1,0,0,0,0"))
            (rule "add_zero_right" (formula "11") (term "0,1,0,0,0,0"))
            (rule "leq_literals" (formula "11") (term "1,0,0,0,0"))
             (builtin "One Step Simplification" (formula "11"))
            (rule "inEqSimp_homoInEq0" (formula "11") (term "0,0,0,0"))
            (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0,0,0"))
            (rule "polySimp_rightDist" (formula "11") (term "1,0,0,0,0,0"))
            (rule "mul_literals" (formula "11") (term "0,1,0,0,0,0,0"))
            (rule "polySimp_addAssoc" (formula "11") (term "0,0,0,0,0"))
            (rule "add_literals" (formula "11") (term "0,0,0,0,0,0"))
            (rule "applyEq" (formula "11") (term "1,1,0") (ifseqformula "13"))
            (rule "inEqSimp_sepNegMonomial1" (formula "11") (term "0,0,0,0"))
            (rule "polySimp_mulLiterals" (formula "11") (term "0,0,0,0,0"))
            (rule "polySimp_elimOne" (formula "11") (term "0,0,0,0,0"))
            (rule "inEqSimp_contradInEq1" (formula "11") (term "0,0,0,0") (ifseqformula "6"))
            (rule "qeq_literals" (formula "11") (term "0,0,0,0,0"))
             (builtin "One Step Simplification" (formula "11"))
            (rule "commute_or" (formula "11") (term "0,0"))
            (rule "allLeft" (formula "24") (inst "t=add(Z(neglit(1(#))),
    int::final(self,
               de.wiesler.Classifier::$num_buckets))"))
            (rule "polySimp_mulComm1" (formula "24") (term "1,0,0,2,0,1"))
            (rule "polySimp_addComm1" (formula "24") (term "1,0,0,1,0,2,0,1"))
            (rule "polySimp_addComm1" (formula "24") (term "1,1,0,0,0,2,0,1"))
            (rule "polySimp_addComm1" (formula "24") (term "1,0,0,1,0,0,2,0,1"))
            (rule "polySimp_rightDist" (formula "24") (term "1,0,0,2,0,1"))
            (rule "polySimp_mulLiterals" (formula "24") (term "0,1,0,0,2,0,1"))
            (rule "polySimp_mulAssoc" (formula "24") (term "1,1,0,0,2,0,1"))
            (rule "polySimp_mulComm0" (formula "24") (term "0,1,1,0,0,2,0,1"))
            (rule "polySimp_addAssoc" (formula "24") (term "0,0,2,0,1"))
            (rule "polySimp_pullOutFactor1b" (formula "24") (term "0,0,0,2,0,1"))
            (rule "add_literals" (formula "24") (term "1,1,0,0,0,2,0,1"))
            (rule "inEqSimp_homoInEq1" (formula "24") (term "1,0"))
            (rule "polySimp_mulComm0" (formula "24") (term "1,0,1,0"))
            (rule "polySimp_rightDist" (formula "24") (term "1,0,1,0"))
            (rule "mul_literals" (formula "24") (term "0,1,0,1,0"))
            (rule "polySimp_addAssoc" (formula "24") (term "0,1,0"))
            (rule "polySimp_addComm0" (formula "24") (term "0,0,1,0"))
            (rule "polySimp_pullOutFactor1b" (formula "24") (term "0,1,0"))
            (rule "add_literals" (formula "24") (term "1,1,0,1,0"))
            (rule "times_zero_1" (formula "24") (term "1,0,1,0"))
            (rule "add_zero_right" (formula "24") (term "0,1,0"))
            (rule "leq_literals" (formula "24") (term "1,0"))
             (builtin "One Step Simplification" (formula "24"))
            (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "0"))
            (rule "mul_literals" (formula "24") (term "1,0"))
            (rule "inEqSimp_contradInEq1" (formula "24") (term "0") (ifseqformula "6"))
            (rule "qeq_literals" (formula "24") (term "0,0"))
             (builtin "One Step Simplification" (formula "24"))
            (rule "allLeft" (formula "10") (inst "t=add(Z(neglit(2(#))),
    int::final(self,
               de.wiesler.Classifier::$num_buckets))"))
            (rule "polySimp_addAssoc" (formula "10") (term "0,2,0,1"))
            (rule "add_literals" (formula "10") (term "0,0,2,0,1"))
            (rule "inEqSimp_commuteGeq" (formula "10") (term "1"))
            (rule "inEqSimp_homoInEq0" (formula "10") (term "0,0"))
            (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,0"))
            (rule "polySimp_rightDist" (formula "10") (term "1,0,0,0"))
            (rule "mul_literals" (formula "10") (term "0,1,0,0,0"))
            (rule "polySimp_addAssoc" (formula "10") (term "0,0,0"))
            (rule "add_literals" (formula "10") (term "0,0,0,0"))
            (rule "inEqSimp_homoInEq1" (formula "10") (term "1,0"))
            (rule "polySimp_mulComm0" (formula "10") (term "1,0,1,0"))
            (rule "polySimp_rightDist" (formula "10") (term "1,0,1,0"))
            (rule "mul_literals" (formula "10") (term "0,1,0,1,0"))
            (rule "polySimp_addAssoc" (formula "10") (term "0,1,0"))
            (rule "polySimp_addComm1" (formula "10") (term "0,0,1,0"))
            (rule "add_literals" (formula "10") (term "0,0,0,1,0"))
            (rule "polySimp_pullOutFactor1b" (formula "10") (term "0,1,0"))
            (rule "add_literals" (formula "10") (term "1,1,0,1,0"))
            (rule "times_zero_1" (formula "10") (term "1,0,1,0"))
            (rule "add_zero_right" (formula "10") (term "0,1,0"))
            (rule "leq_literals" (formula "10") (term "1,0"))
             (builtin "One Step Simplification" (formula "10"))
            (rule "applyEq" (formula "10") (term "0,1") (ifseqformula "14"))
            (rule "inEqSimp_homoInEq0" (formula "10") (term "1"))
            (rule "polySimp_pullOutFactor1" (formula "10") (term "0,1"))
            (rule "add_literals" (formula "10") (term "1,0,1"))
            (rule "times_zero_1" (formula "10") (term "0,1"))
            (rule "qeq_literals" (formula "10") (term "1"))
             (builtin "One Step Simplification" (formula "10"))
            (rule "true_left" (formula "10"))
            (rule "onlyCreatedObjectsAreReferencedFinal" (formula "30") (term "0") (ifseqformula "1") (ifseqformula "3"))
            (rule "replace_known_right" (formula "1") (term "1") (ifseqformula "28"))
             (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "31")))
            (rule "closeFalse" (formula "1"))
         )
      )
   )
)
(branch "Case 2"
    (builtin "Use Dependency Contract" (formula "16") (ifInst ""  (formula "12")) (contract "de.wiesler.Tree[java.lang.Object::<inv>()].JML accessible clause.0") (userinteraction))
   (rule "impLeft" (formula "13") (userinteraction))
   (branch "Case 1"
      (rule "andRight" (formula "13"))
      (branch "Case 1"
         (rule "andRight" (formula "13"))
         (branch "Case 1"
            (rule "andRight" (formula "13"))
            (branch "Case 1"
               (rule "andRight" (formula "13"))
               (branch "Case 1"
                   (builtin "One Step Simplification" (formula "7"))
                  (rule "translateJavaMulInt" (formula "8") (term "1,1"))
                  (rule "translateJavaSubInt" (formula "11") (term "0,2,0"))
                  (rule "translateJavaSubInt" (formula "11") (term "0,2,1"))
                  (rule "notRight" (formula "13"))
                  (rule "close" (formula "14") (ifseqformula "1"))
               )
               (branch "Case 2"
                   (builtin "One Step Simplification" (formula "7"))
                  (rule "translateJavaSubInt" (formula "11") (term "0,2,0"))
                  (rule "translateJavaSubInt" (formula "11") (term "0,2,1"))
                  (rule "translateJavaMulInt" (formula "8") (term "1,1"))
                  (rule "eqSymm" (formula "11"))
                  (rule "eqSymm" (formula "8"))
                  (rule "polySimp_elimSub" (formula "11") (term "0,2,1"))
                  (rule "mul_literals" (formula "11") (term "1,0,2,1"))
                  (rule "polySimp_elimSub" (formula "11") (term "0,2,0"))
                  (rule "mul_literals" (formula "11") (term "1,0,2,0"))
                  (rule "polySimp_mulComm0" (formula "8") (term "1,0"))
                  (rule "polySimp_addComm0" (formula "11") (term "0,2,1"))
                  (rule "polySimp_addComm0" (formula "11") (term "0,2,0"))
                  (rule "inEqSimp_commuteLeq" (formula "6"))
                  (rule "Class_invariant_axiom_for_de_wiesler_Tree" (formula "12") (inst "i=i") (inst "i_0=i_0"))
                   (builtin "One Step Simplification" (formula "12"))
                  (rule "translateJavaSubInt" (formula "12") (term "0,2,1,1,0,1"))
                  (rule "translateJavaSubInt" (formula "12") (term "3,0,1,0,0"))
                  (rule "andLeft" (formula "12"))
                  (rule "andLeft" (formula "12"))
                  (rule "andLeft" (formula "12"))
                  (rule "andLeft" (formula "12"))
                  (rule "andLeft" (formula "12"))
                  (rule "andLeft" (formula "13"))
                  (rule "andLeft" (formula "12"))
                  (rule "andLeft" (formula "12"))
                  (rule "andLeft" (formula "12"))
                  (rule "andLeft" (formula "14"))
                  (rule "notLeft" (formula "13"))
                  (rule "notLeft" (formula "12"))
                  (rule "eqSymm" (formula "20") (term "1,0"))
                  (rule "polySimp_elimSub" (formula "18") (term "3,0"))
                  (rule "mul_literals" (formula "18") (term "1,3,0"))
                  (rule "polySimp_elimSub" (formula "20") (term "0,2,0,1,0"))
                  (rule "mul_literals" (formula "20") (term "1,0,2,0,1,0"))
                  (rule "polySimp_addComm0" (formula "18") (term "3,0"))
                  (rule "polySimp_addComm0" (formula "20") (term "0,2,0,1,0"))
                  (rule "inEqSimp_ltToLeq" (formula "20") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,1,0,0"))
                  (rule "inEqSimp_ltToLeq" (formula "19") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,1,0,0"))
                  (rule "inEqSimp_ltToLeq" (formula "19") (term "1,1,0"))
                  (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,1,1,0"))
                  (rule "inEqSimp_commuteLeq" (formula "20") (term "0,0,0"))
                  (rule "inEqSimp_commuteLeq" (formula "19") (term "0,0,0"))
                  (rule "inEqSimp_commuteLeq" (formula "19") (term "0,1,0"))
                  (rule "inEqSimp_commuteLeq" (formula "17"))
                  (rule "inEqSimp_commuteLeq" (formula "15"))
                  (rule "inEqSimp_commuteLeq" (formula "16"))
                  (rule "inEqSimp_commuteLeq" (formula "12"))
                  (rule "applyEq" (formula "17") (term "1") (ifseqformula "14"))
                  (rule "applyEq" (formula "15") (term "0") (ifseqformula "14"))
                  (rule "applyEq" (formula "20") (term "1,0,1,0") (ifseqformula "9"))
                  (rule "applyEq" (formula "10") (term "3,0") (ifseqformula "14"))
                  (rule "applyEq" (formula "16") (term "1") (ifseqformula "14"))
                  (rule "applyEq" (formula "18") (term "1,0") (ifseqformula "9"))
                  (rule "applyEq" (formula "8") (term "0,1,0") (ifseqformula "14"))
                  (rule "applyEq" (formula "11") (term "1,0,2,0") (ifseqformula "14"))
                  (rule "eqSymm" (formula "11"))
                  (rule "applyEq" (formula "18") (term "1,3,0") (ifseqformula "14"))
                  (rule "applyEq" (formula "17") (term "0,0") (ifseqformula "9"))
                  (rule "inEqSimp_commuteGeq" (formula "17"))
                  (rule "applyEq" (formula "8") (term "2,0") (ifseqformula "14"))
                  (rule "applyEq" (formula "21") (term "0") (ifseqformula "9"))
                  (rule "applyEq" (formula "19") (term "0,1,0,0,1,1,0") (ifseqformula "14"))
                  (rule "applyEq" (formula "19") (term "0,1,0,0,1,0,0") (ifseqformula "14"))
                  (rule "applyEq" (formula "20") (term "0,1,0,0,1,0,0") (ifseqformula "14"))
                  (rule "applyEq" (formula "11") (term "1,0,2,0") (ifseqformula "14"))
                  (rule "eqSymm" (formula "11"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "1,1,0"))
                  (rule "polySimp_mulComm0" (formula "19") (term "1,1,1,0"))
                  (rule "polySimp_rightDist" (formula "19") (term "1,1,1,0"))
                  (rule "polySimp_mulLiterals" (formula "19") (term "1,1,1,1,0"))
                  (rule "mul_literals" (formula "19") (term "0,1,1,1,0"))
                  (rule "polySimp_elimOne" (formula "19") (term "1,1,1,1,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "19") (term "1,1,0,0"))
                  (rule "polySimp_rightDist" (formula "19") (term "1,1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "19") (term "1,1,1,0,0"))
                  (rule "mul_literals" (formula "19") (term "0,1,1,0,0"))
                  (rule "polySimp_elimOne" (formula "19") (term "1,1,1,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "20") (term "1,1,0,0"))
                  (rule "polySimp_rightDist" (formula "20") (term "1,1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "20") (term "1,1,1,0,0"))
                  (rule "mul_literals" (formula "20") (term "0,1,1,0,0"))
                  (rule "polySimp_elimOne" (formula "20") (term "1,1,1,0,0"))
                  (rule "inEqSimp_exactShadow3" (formula "15") (ifseqformula "17"))
                  (rule "mul_literals" (formula "15") (term "0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "15"))
                  (rule "mul_literals" (formula "15") (term "1"))
                  (rule "nnf_imp2or" (formula "20") (term "0"))
                  (rule "nnf_imp2or" (formula "21") (term "0"))
                  (rule "nnf_notAnd" (formula "20") (term "0,0"))
                  (rule "inEqSimp_notGeq" (formula "20") (term "0,0,0"))
                  (rule "mul_literals" (formula "20") (term "1,0,0,0,0,0"))
                  (rule "add_literals" (formula "20") (term "0,0,0,0,0"))
                  (rule "add_zero_left" (formula "20") (term "0,0,0,0"))
                  (rule "inEqSimp_notLeq" (formula "20") (term "1,0,0"))
                  (rule "polySimp_rightDist" (formula "20") (term "1,0,0,1,0,0"))
                  (rule "mul_literals" (formula "20") (term "0,1,0,0,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "20") (term "0,0,1,0,0"))
                  (rule "add_literals" (formula "20") (term "0,0,0,1,0,0"))
                  (rule "add_zero_left" (formula "20") (term "0,0,1,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "20") (term "1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "20") (term "1,1,0,0"))
                  (rule "polySimp_elimOne" (formula "20") (term "1,1,0,0"))
                  (rule "nnf_notAnd" (formula "21") (term "0,0"))
                  (rule "inEqSimp_notGeq" (formula "21") (term "0,0,0"))
                  (rule "mul_literals" (formula "21") (term "1,0,0,0,0,0"))
                  (rule "add_literals" (formula "21") (term "0,0,0,0,0"))
                  (rule "add_zero_left" (formula "21") (term "0,0,0,0"))
                  (rule "inEqSimp_notLeq" (formula "21") (term "1,0,0"))
                  (rule "polySimp_rightDist" (formula "21") (term "1,0,0,1,0,0"))
                  (rule "mul_literals" (formula "21") (term "0,1,0,0,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "21") (term "0,0,1,0,0"))
                  (rule "add_literals" (formula "21") (term "0,0,0,1,0,0"))
                  (rule "add_zero_left" (formula "21") (term "0,0,1,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "21") (term "1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "21") (term "1,1,0,0"))
                  (rule "polySimp_elimOne" (formula "21") (term "1,1,0,0"))
                  (rule "Class_invariant_axiom_for_de_wiesler_Tree" (formula "27") (inst "i=i") (inst "i_0=i_0"))
                   (builtin "One Step Simplification" (formula "27") (ifInst ""  (formula "22")) (ifInst ""  (formula "14")) (ifInst ""  (formula "13")))
                  (rule "translateJavaSubInt" (formula "27") (term "3,0,1,0,0"))
                  (rule "translateJavaSubInt" (formula "27") (term "0,2,1,1,0,1"))
                  (rule "eqSymm" (formula "27") (term "1,0,1"))
                  (rule "polySimp_elimSub" (formula "27") (term "3,0,1,0,0"))
                  (rule "mul_literals" (formula "27") (term "1,3,0,1,0,0"))
                  (rule "polySimp_elimSub" (formula "27") (term "0,2,0,1,0,1"))
                  (rule "mul_literals" (formula "27") (term "1,0,2,0,1,0,1"))
                  (rule "polySimp_addComm0" (formula "27") (term "3,0,1,0,0"))
                  (rule "polySimp_addComm0" (formula "27") (term "0,2,0,1,0,1"))
                  (rule "inEqSimp_ltToLeq" (formula "27") (term "1,1,0,1,0"))
                  (rule "polySimp_mulComm0" (formula "27") (term "1,0,0,1,1,0,1,0"))
                  (rule "inEqSimp_ltToLeq" (formula "27") (term "1,0,0,1"))
                  (rule "polySimp_mulComm0" (formula "27") (term "1,0,0,1,0,0,1"))
                  (rule "inEqSimp_ltToLeq" (formula "27") (term "1,0,0,1,0"))
                  (rule "polySimp_mulComm0" (formula "27") (term "1,0,0,1,0,0,1,0"))
                  (rule "inEqSimp_commuteLeq" (formula "27") (term "0,0,0,1"))
                  (rule "inEqSimp_commuteLeq" (formula "27") (term "0,1,0,1,0"))
                  (rule "inEqSimp_commuteLeq" (formula "27") (term "0,1,0,0,0,0"))
                  (rule "inEqSimp_commuteLeq" (formula "27") (term "1,1,0,0,0,0"))
                  (rule "inEqSimp_commuteLeq" (formula "27") (term "0,0,0,1,0"))
                  (rule "inEqSimp_commuteLeq" (formula "27") (term "1,0,0,0"))
                  (rule "inEqSimp_commuteLeq" (formula "27") (term "1,0,0,0,0,0"))
                  (rule "replace_known_left" (formula "27") (term "1,0,0,0,0,0") (ifseqformula "12"))
                   (builtin "One Step Simplification" (formula "27"))
                  (rule "applyEq" (formula "27") (term "0,0,1,0,0,0,0") (ifseqformula "14"))
                  (rule "replace_known_left" (formula "27") (term "0,1,0,0,0,0") (ifseqformula "16"))
                   (builtin "One Step Simplification" (formula "27"))
                  (rule "applyEq" (formula "27") (term "0,0,0,0,0,0,0") (ifseqformula "9"))
                  (rule "replace_known_right" (formula "27") (term "0,0,0,0,0,0") (ifseqformula "25"))
                   (builtin "One Step Simplification" (formula "27"))
                  (rule "applyEq" (formula "27") (term "1,1,0,0,0") (ifseqformula "14"))
                  (rule "applyEq" (formula "27") (term "1,0,0,0,0") (ifseqformula "14"))
                  (rule "replace_known_left" (formula "27") (term "0,0,0,0") (ifseqformula "17"))
                   (builtin "One Step Simplification" (formula "27"))
                  (rule "applyEq" (formula "27") (term "1,0,1,0,1") (ifseqformula "9"))
                  (rule "applyEq" (formula "27") (term "1,0,1,0,0") (ifseqformula "9"))
                  (rule "applyEq" (formula "27") (term "1,3,0,1,0,0") (ifseqformula "14"))
                  (rule "applyEq" (formula "27") (term "0,0,0,0,0") (ifseqformula "9"))
                  (rule "inEqSimp_commuteGeq" (formula "27") (term "0,0,0"))
                  (rule "replace_known_left" (formula "27") (term "0,0,0") (ifseqformula "18"))
                   (builtin "One Step Simplification" (formula "27"))
                  (rule "applyEq" (formula "27") (term "0,1,0,0,1,0,0,1,0") (ifseqformula "14"))
                  (rule "applyEq" (formula "27") (term "0,1,0,0,1,0,0,1") (ifseqformula "14"))
                  (rule "applyEq" (formula "27") (term "0,1,0,0,1,1,0,1,0") (ifseqformula "14"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "27") (term "1,0,0,1,0"))
                  (rule "polySimp_mulComm0" (formula "27") (term "1,1,0,0,1,0"))
                  (rule "polySimp_rightDist" (formula "27") (term "1,1,0,0,1,0"))
                  (rule "polySimp_mulLiterals" (formula "27") (term "1,1,1,0,0,1,0"))
                  (rule "mul_literals" (formula "27") (term "0,1,1,0,0,1,0"))
                  (rule "polySimp_elimOne" (formula "27") (term "1,1,1,0,0,1,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "27") (term "1,0,0,1"))
                  (rule "polySimp_mulComm0" (formula "27") (term "1,1,0,0,1"))
                  (rule "polySimp_rightDist" (formula "27") (term "1,1,0,0,1"))
                  (rule "polySimp_mulLiterals" (formula "27") (term "1,1,1,0,0,1"))
                  (rule "mul_literals" (formula "27") (term "0,1,1,0,0,1"))
                  (rule "polySimp_elimOne" (formula "27") (term "1,1,1,0,0,1"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "27") (term "1,1,0,1,0"))
                  (rule "polySimp_mulComm0" (formula "27") (term "1,1,1,0,1,0"))
                  (rule "polySimp_rightDist" (formula "27") (term "1,1,1,0,1,0"))
                  (rule "polySimp_mulLiterals" (formula "27") (term "1,1,1,1,0,1,0"))
                  (rule "mul_literals" (formula "27") (term "0,1,1,1,0,1,0"))
                  (rule "polySimp_elimOne" (formula "27") (term "1,1,1,1,0,1,0"))
                  (rule "nnf_imp2or" (formula "27") (term "0,1"))
                  (rule "nnf_imp2or" (formula "27") (term "0,1,0"))
                  (rule "nnf_notAnd" (formula "27") (term "0,0,1"))
                  (rule "inEqSimp_notGeq" (formula "27") (term "0,0,0,1"))
                  (rule "mul_literals" (formula "27") (term "1,0,0,0,0,0,1"))
                  (rule "add_literals" (formula "27") (term "0,0,0,0,0,1"))
                  (rule "add_zero_left" (formula "27") (term "0,0,0,0,1"))
                  (rule "inEqSimp_notLeq" (formula "27") (term "1,0,0,1"))
                  (rule "polySimp_rightDist" (formula "27") (term "1,0,0,1,0,0,1"))
                  (rule "mul_literals" (formula "27") (term "0,1,0,0,1,0,0,1"))
                  (rule "polySimp_addAssoc" (formula "27") (term "0,0,1,0,0,1"))
                  (rule "add_literals" (formula "27") (term "0,0,0,1,0,0,1"))
                  (rule "add_zero_left" (formula "27") (term "0,0,1,0,0,1"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "27") (term "1,0,0,1"))
                  (rule "polySimp_mulLiterals" (formula "27") (term "1,1,0,0,1"))
                  (rule "polySimp_elimOne" (formula "27") (term "1,1,0,0,1"))
                  (rule "nnf_notAnd" (formula "27") (term "0,0,1,0"))
                  (rule "inEqSimp_notGeq" (formula "27") (term "0,0,0,1,0"))
                  (rule "mul_literals" (formula "27") (term "1,0,0,0,0,0,1,0"))
                  (rule "add_literals" (formula "27") (term "0,0,0,0,0,1,0"))
                  (rule "add_zero_left" (formula "27") (term "0,0,0,0,1,0"))
                  (rule "inEqSimp_notLeq" (formula "27") (term "1,0,0,1,0"))
                  (rule "polySimp_rightDist" (formula "27") (term "1,0,0,1,0,0,1,0"))
                  (rule "mul_literals" (formula "27") (term "0,1,0,0,1,0,0,1,0"))
                  (rule "polySimp_addAssoc" (formula "27") (term "0,0,1,0,0,1,0"))
                  (rule "add_literals" (formula "27") (term "0,0,0,1,0,0,1,0"))
                  (rule "add_zero_left" (formula "27") (term "0,0,1,0,0,1,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "27") (term "1,0,0,1,0"))
                  (rule "polySimp_mulLiterals" (formula "27") (term "1,1,0,0,1,0"))
                  (rule "polySimp_elimOne" (formula "27") (term "1,1,0,0,1,0"))
                  (rule "replace_known_left" (formula "27") (term "1,0") (ifseqformula "20"))
                   (builtin "One Step Simplification" (formula "27"))
                  (rule "Definition_axiom_for_isSortedSliceTransitive_in_de_wiesler_Functions" (formula "10") (term "0") (inst "i=i") (inst "j=j"))
                   (builtin "One Step Simplification" (formula "10"))
                  (rule "inEqSimp_ltToLeq" (formula "10") (term "1,0,0,1,0"))
                  (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,1,0,0,1,0"))
                  (rule "inEqSimp_ltToLeq" (formula "10") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,1,0,0"))
                  (rule "inEqSimp_commuteLeq" (formula "10") (term "0,0,0,1,0"))
                  (rule "inEqSimp_commuteLeq" (formula "10") (term "0,0,0"))
                  (rule "inEqSimp_commuteLeq" (formula "10") (term "1,0,1,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "1,0,0,1,0"))
                  (rule "polySimp_mulComm0" (formula "10") (term "1,1,0,0,1,0"))
                  (rule "polySimp_rightDist" (formula "10") (term "1,1,0,0,1,0"))
                  (rule "mul_literals" (formula "10") (term "0,1,1,0,0,1,0"))
                  (rule "polySimp_mulLiterals" (formula "10") (term "1,1,1,0,0,1,0"))
                  (rule "polySimp_elimOne" (formula "10") (term "1,1,1,0,0,1,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "10") (term "1,1,0,0"))
                  (rule "polySimp_rightDist" (formula "10") (term "1,1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "10") (term "1,1,1,0,0"))
                  (rule "mul_literals" (formula "10") (term "0,1,1,0,0"))
                  (rule "polySimp_elimOne" (formula "10") (term "1,1,1,0,0"))
                  (rule "nnf_imp2or" (formula "10") (term "0"))
                  (rule "nnf_notAnd" (formula "10") (term "0,0"))
                  (rule "inEqSimp_notLeq" (formula "10") (term "1,0,0"))
                  (rule "polySimp_rightDist" (formula "10") (term "1,0,0,1,0,0"))
                  (rule "mul_literals" (formula "10") (term "0,1,0,0,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "10") (term "0,0,1,0,0"))
                  (rule "add_literals" (formula "10") (term "0,0,0,1,0,0"))
                  (rule "add_zero_left" (formula "10") (term "0,0,1,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "10") (term "1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "10") (term "1,1,0,0"))
                  (rule "polySimp_elimOne" (formula "10") (term "1,1,0,0"))
                  (rule "inEqSimp_notGeq" (formula "10") (term "0,0,0"))
                  (rule "times_zero_1" (formula "10") (term "1,0,0,0,0,0"))
                  (rule "add_zero_right" (formula "10") (term "0,0,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "0,0,0"))
                  (rule "mul_literals" (formula "10") (term "1,0,0,0"))
                  (rule "nnf_imp2or" (formula "10") (term "0,1,0"))
                  (rule "nnf_notAnd" (formula "10") (term "0,0,1,0"))
                  (rule "inEqSimp_notLeq" (formula "10") (term "1,0,0,1,0"))
                  (rule "polySimp_rightDist" (formula "10") (term "1,0,0,1,0,0,1,0"))
                  (rule "mul_literals" (formula "10") (term "0,1,0,0,1,0,0,1,0"))
                  (rule "polySimp_addAssoc" (formula "10") (term "0,0,1,0,0,1,0"))
                  (rule "add_literals" (formula "10") (term "0,0,0,1,0,0,1,0"))
                  (rule "add_zero_left" (formula "10") (term "0,0,1,0,0,1,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "10") (term "1,0,0,1,0"))
                  (rule "polySimp_mulLiterals" (formula "10") (term "1,1,0,0,1,0"))
                  (rule "polySimp_elimOne" (formula "10") (term "1,1,0,0,1,0"))
                  (rule "inEqSimp_notGeq" (formula "10") (term "0,0,0,1,0"))
                  (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,0,0,0,1,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "0,0,0,1,0"))
                  (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,0,1,0"))
                  (rule "polySimp_rightDist" (formula "10") (term "1,0,0,0,1,0"))
                  (rule "polySimp_mulLiterals" (formula "10") (term "1,1,0,0,0,1,0"))
                  (rule "mul_literals" (formula "10") (term "0,1,0,0,0,1,0"))
                  (rule "polySimp_elimOne" (formula "10") (term "1,1,0,0,0,1,0"))
                  (rule "Contract_axiom_for_isSortedSliceTransitive_in_Functions" (formula "19") (term "0"))
                  (rule "replace_known_right" (formula "19") (term "0,0,0") (ifseqformula "26"))
                   (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "1")) (ifInst ""  (formula "20")))
                  (rule "Definition_axiom_for_isSortedSliceTransitive_in_de_wiesler_Functions" (formula "20") (term "0") (inst "i=i") (inst "j=j"))
                   (builtin "One Step Simplification" (formula "20"))
                  (rule "inEqSimp_ltToLeq" (formula "20") (term "1,0,0,1,0"))
                  (rule "polySimp_rightDist" (formula "20") (term "1,0,0,1,0,0,1,0"))
                  (rule "mul_literals" (formula "20") (term "0,1,0,0,1,0,0,1,0"))
                  (rule "polySimp_addAssoc" (formula "20") (term "0,0,1,0,0,1,0"))
                  (rule "add_literals" (formula "20") (term "0,0,0,1,0,0,1,0"))
                  (rule "inEqSimp_ltToLeq" (formula "20") (term "1,0,0"))
                  (rule "polySimp_rightDist" (formula "20") (term "1,0,0,1,0,0"))
                  (rule "mul_literals" (formula "20") (term "0,1,0,0,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "20") (term "0,0,1,0,0"))
                  (rule "add_literals" (formula "20") (term "0,0,0,1,0,0"))
                  (rule "inEqSimp_commuteLeq" (formula "20") (term "1,0,1,0"))
                  (rule "inEqSimp_commuteLeq" (formula "20") (term "0,0,0,1,0"))
                  (rule "inEqSimp_commuteLeq" (formula "20") (term "0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "1,0,0,1,0"))
                  (rule "polySimp_mulComm0" (formula "20") (term "1,1,0,0,1,0"))
                  (rule "polySimp_rightDist" (formula "20") (term "1,1,0,0,1,0"))
                  (rule "polySimp_mulLiterals" (formula "20") (term "1,1,1,0,0,1,0"))
                  (rule "mul_literals" (formula "20") (term "0,1,1,0,0,1,0"))
                  (rule "polySimp_elimOne" (formula "20") (term "1,1,1,0,0,1,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "20") (term "1,1,0,0"))
                  (rule "polySimp_rightDist" (formula "20") (term "1,1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "20") (term "1,1,1,0,0"))
                  (rule "mul_literals" (formula "20") (term "0,1,1,0,0"))
                  (rule "polySimp_elimOne" (formula "20") (term "1,1,1,0,0"))
                  (rule "nnf_imp2or" (formula "20") (term "0"))
                  (rule "nnf_notAnd" (formula "20") (term "0,0"))
                  (rule "inEqSimp_notLeq" (formula "20") (term "1,0,0"))
                  (rule "polySimp_rightDist" (formula "20") (term "1,0,0,1,0,0"))
                  (rule "mul_literals" (formula "20") (term "0,1,0,0,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "20") (term "0,0,1,0,0"))
                  (rule "add_literals" (formula "20") (term "0,0,0,1,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "20") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "20") (term "1,1,0,0"))
                  (rule "polySimp_rightDist" (formula "20") (term "1,1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "20") (term "1,1,1,0,0"))
                  (rule "mul_literals" (formula "20") (term "0,1,1,0,0"))
                  (rule "polySimp_elimOne" (formula "20") (term "1,1,1,0,0"))
                  (rule "inEqSimp_notGeq" (formula "20") (term "0,0,0"))
                  (rule "times_zero_1" (formula "20") (term "1,0,0,0,0,0"))
                  (rule "add_zero_right" (formula "20") (term "0,0,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "0,0,0"))
                  (rule "mul_literals" (formula "20") (term "1,0,0,0"))
                  (rule "nnf_imp2or" (formula "20") (term "0,1,0"))
                  (rule "Definition_axiom_for_pi_in_de_wiesler_Tree" (formula "21") (term "0,1,1,0"))
                  (rule "translateJavaSubInt" (formula "21") (term "0,1,1,0,1,1,0"))
                  (rule "polySimp_elimSub" (formula "21") (term "1,0,0,0,1,1,0"))
                  (rule "polySimp_elimSub" (formula "21") (term "0,1,1,0,1,1,0"))
                  (rule "mul_literals" (formula "21") (term "1,0,1,1,0,1,1,0"))
                  (rule "polySimp_elimSub" (formula "21") (term "1,1,0,1,1,0"))
                  (rule "polySimp_mulComm0" (formula "21") (term "0,1,1,0"))
                  (rule "polySimp_addComm0" (formula "21") (term "0,1,0,0,1,1,0"))
                  (rule "polySimp_rightDist" (formula "21") (term "0,1,0,1,1,0"))
                  (rule "polySimp_mulLiterals" (formula "21") (term "1,0,1,0,1,1,0"))
                  (rule "polySimp_mulComm0" (formula "21") (term "0,0,1,0,1,1,0"))
                  (rule "polySimp_addComm1" (formula "21") (term "1,0,1,1,0"))
                  (rule "polySimp_addComm0" (formula "21") (term "0,1,0,1,1,0"))
                  (rule "polySimp_rightDist" (formula "21") (term "0,1,1,0"))
                  (rule "polySimp_mulComm1" (formula "21") (term "1,0,1,1,0"))
                  (rule "polySimp_mulComm0" (formula "21") (term "0,1,0,1,1,0"))
                  (rule "polySimp_rightDist" (formula "21") (term "0,0,1,1,0"))
                  (rule "polySimp_elimOne" (formula "21") (term "0,0,0,1,1,0"))
                  (rule "polySimp_mulComm1" (formula "21") (term "1,0,0,1,1,0"))
                  (rule "polySimp_mulComm0" (formula "21") (term "0,1,0,0,1,1,0"))
                  (rule "inEqSimp_homoInEq0" (formula "21") (term "1,1,0"))
                  (rule "polySimp_mulComm0" (formula "21") (term "1,0,1,1,0"))
                  (rule "polySimp_rightDist" (formula "21") (term "1,0,1,1,0"))
                  (rule "polySimp_mulLiterals" (formula "21") (term "1,1,0,1,1,0"))
                  (rule "polySimp_rightDist" (formula "21") (term "0,1,0,1,1,0"))
                  (rule "polySimp_mulLiterals" (formula "21") (term "1,0,1,0,1,1,0"))
                  (rule "polySimp_mulComm0" (formula "21") (term "0,0,1,0,1,1,0"))
                  (rule "polySimp_addAssoc" (formula "21") (term "0,1,1,0"))
                  (rule "polySimp_addAssoc" (formula "21") (term "0,0,1,1,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "21") (term "1,1,0"))
                  (rule "polySimp_mulComm0" (formula "21") (term "1,1,1,0"))
                  (rule "polySimp_rightDist" (formula "21") (term "1,1,1,0"))
                  (rule "polySimp_mulLiterals" (formula "21") (term "1,1,1,1,0"))
                  (rule "polySimp_rightDist" (formula "21") (term "0,1,1,1,0"))
                  (rule "polySimp_mulLiterals" (formula "21") (term "1,0,1,1,1,0"))
                  (rule "polySimp_elimOne" (formula "21") (term "1,0,1,1,1,0"))
                  (rule "polySimp_rightDist" (formula "21") (term "0,0,1,1,1,0"))
                  (rule "mul_literals" (formula "21") (term "0,0,0,1,1,1,0"))
                  (rule "Definition_axiom_for_pi_in_de_wiesler_Tree" (formula "21") (term "0,0,1,0"))
                  (rule "translateJavaSubInt" (formula "21") (term "0,1,1,0,0,1,0"))
                  (rule "polySimp_elimSub" (formula "21") (term "1,0,0,0,0,1,0"))
                  (rule "polySimp_elimSub" (formula "21") (term "1,1,0,0,1,0"))
                  (rule "polySimp_elimSub" (formula "21") (term "0,1,1,0,0,1,0"))
                  (rule "mul_literals" (formula "21") (term "1,0,1,1,0,0,1,0"))
                  (rule "polySimp_mulComm0" (formula "21") (term "0,0,1,0"))
                  (rule "polySimp_addComm0" (formula "21") (term "0,1,0,0,0,1,0"))
                  (rule "polySimp_rightDist" (formula "21") (term "0,1,0,0,1,0"))
                  (rule "polySimp_mulLiterals" (formula "21") (term "1,0,1,0,0,1,0"))
                  (rule "polySimp_mulComm0" (formula "21") (term "0,0,1,0,0,1,0"))
                  (rule "polySimp_addComm1" (formula "21") (term "1,0,0,1,0"))
                  (rule "polySimp_addComm0" (formula "21") (term "0,1,0,0,1,0"))
                  (rule "polySimp_rightDist" (formula "21") (term "0,0,1,0"))
                  (rule "polySimp_mulComm1" (formula "21") (term "1,0,0,1,0"))
                  (rule "polySimp_mulComm0" (formula "21") (term "0,1,0,0,1,0"))
                  (rule "polySimp_rightDist" (formula "21") (term "0,0,0,1,0"))
                  (rule "polySimp_elimOne" (formula "21") (term "0,0,0,0,1,0"))
                  (rule "polySimp_mulComm1" (formula "21") (term "1,0,0,0,1,0"))
                  (rule "polySimp_mulComm0" (formula "21") (term "0,1,0,0,0,1,0"))
                  (rule "inEqSimp_homoInEq1" (formula "21") (term "0,1,0"))
                  (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,1,0"))
                  (rule "polySimp_rightDist" (formula "21") (term "1,0,0,1,0"))
                  (rule "polySimp_mulLiterals" (formula "21") (term "1,1,0,0,1,0"))
                  (rule "polySimp_rightDist" (formula "21") (term "0,1,0,0,1,0"))
                  (rule "polySimp_mulLiterals" (formula "21") (term "1,0,1,0,0,1,0"))
                  (rule "polySimp_mulComm0" (formula "21") (term "0,0,1,0,0,1,0"))
                  (rule "polySimp_addAssoc" (formula "21") (term "0,0,1,0"))
                  (rule "polySimp_addAssoc" (formula "21") (term "0,0,0,1,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "0,1,0"))
                  (rule "polySimp_mulComm0" (formula "21") (term "1,0,1,0"))
                  (rule "polySimp_rightDist" (formula "21") (term "1,0,1,0"))
                  (rule "polySimp_mulLiterals" (formula "21") (term "1,1,0,1,0"))
                  (rule "polySimp_rightDist" (formula "21") (term "0,1,0,1,0"))
                  (rule "polySimp_mulLiterals" (formula "21") (term "1,0,1,0,1,0"))
                  (rule "mul_literals" (formula "21") (term "0,0,1,0,1,0"))
                  (rule "polySimp_elimOne" (formula "21") (term "1,0,1,0,1,0"))
                  (rule "Definition_axiom_for_pi_in_de_wiesler_Tree" (formula "22") (term "1,0,2,0,1,0"))
                  (rule "translateJavaSubInt" (formula "22") (term "0,1,1,1,0,2,0,1,0"))
                  (rule "polySimp_elimSub" (formula "22") (term "1,0,0,1,0,2,0,1,0"))
                  (rule "polySimp_elimSub" (formula "22") (term "1,1,1,0,2,0,1,0"))
                  (rule "polySimp_elimSub" (formula "22") (term "0,1,1,1,0,2,0,1,0"))
                  (rule "mul_literals" (formula "22") (term "1,0,1,1,1,0,2,0,1,0"))
                  (rule "polySimp_mulComm0" (formula "22") (term "1,0,2,0,1,0"))
                  (rule "polySimp_addComm0" (formula "22") (term "0,1,0,1,0,2,0,1,0"))
                  (rule "polySimp_rightDist" (formula "22") (term "0,1,1,0,2,0,1,0"))
                  (rule "polySimp_mulLiterals" (formula "22") (term "1,0,1,1,0,2,0,1,0"))
                  (rule "polySimp_mulComm0" (formula "22") (term "0,0,1,1,0,2,0,1,0"))
                  (rule "polySimp_addComm1" (formula "22") (term "1,1,0,2,0,1,0"))
                  (rule "polySimp_addComm0" (formula "22") (term "0,1,1,0,2,0,1,0"))
                  (rule "polySimp_rightDist" (formula "22") (term "1,0,2,0,1,0"))
                  (rule "polySimp_mulComm1" (formula "22") (term "1,1,0,2,0,1,0"))
                  (rule "polySimp_mulComm0" (formula "22") (term "0,1,1,0,2,0,1,0"))
                  (rule "polySimp_rightDist" (formula "22") (term "0,1,0,2,0,1,0"))
                  (rule "polySimp_elimOne" (formula "22") (term "0,0,1,0,2,0,1,0"))
                  (rule "polySimp_mulComm1" (formula "22") (term "1,0,1,0,2,0,1,0"))
                  (rule "polySimp_mulComm0" (formula "22") (term "0,1,0,1,0,2,0,1,0"))
                  (rule "polySimp_addAssoc" (formula "22") (term "0,2,0,1,0"))
                  (rule "polySimp_addAssoc" (formula "22") (term "0,0,2,0,1,0"))
                  (rule "nnf_notAnd" (formula "20") (term "0,0,1,0"))
                  (rule "inEqSimp_notGeq" (formula "20") (term "0,0,0,1,0"))
                  (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,0,0,0,1,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "0,0,0,1,0"))
                  (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,0,1,0"))
                  (rule "polySimp_rightDist" (formula "20") (term "1,0,0,0,1,0"))
                  (rule "mul_literals" (formula "20") (term "0,1,0,0,0,1,0"))
                  (rule "polySimp_mulLiterals" (formula "20") (term "1,1,0,0,0,1,0"))
                  (rule "polySimp_elimOne" (formula "20") (term "1,1,0,0,0,1,0"))
                  (rule "inEqSimp_notLeq" (formula "20") (term "1,0,0,1,0"))
                  (rule "polySimp_rightDist" (formula "20") (term "1,0,0,1,0,0,1,0"))
                  (rule "mul_literals" (formula "20") (term "0,1,0,0,1,0,0,1,0"))
                  (rule "polySimp_addAssoc" (formula "20") (term "0,0,1,0,0,1,0"))
                  (rule "add_literals" (formula "20") (term "0,0,0,1,0,0,1,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "20") (term "1,0,0,1,0"))
                  (rule "polySimp_mulComm0" (formula "20") (term "1,1,0,0,1,0"))
                  (rule "polySimp_rightDist" (formula "20") (term "1,1,0,0,1,0"))
                  (rule "polySimp_mulLiterals" (formula "20") (term "1,1,1,0,0,1,0"))
                  (rule "mul_literals" (formula "20") (term "0,1,1,0,0,1,0"))
                  (rule "polySimp_elimOne" (formula "20") (term "1,1,1,0,0,1,0"))
                  (rule "Contract_axiom_for_isSortedSliceTransitive_in_Functions" (formula "28") (term "0,0"))
                  (rule "wellFormedAnon" (formula "1") (term "1,0"))
                  (rule "replace_known_right" (formula "1") (term "0,0,0") (ifseqformula "27"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "2")) (ifInst ""  (formula "3")))
                  (rule "Definition_axiom_for_pi_in_de_wiesler_Tree" (formula "29") (term "1,0,2,0,1,0,1"))
                  (rule "translateJavaSubInt" (formula "29") (term "0,1,1,1,0,2,0,1,0,1"))
                  (rule "polySimp_elimSub" (formula "29") (term "1,0,0,1,0,2,0,1,0,1"))
                  (rule "polySimp_elimSub" (formula "29") (term "0,1,1,1,0,2,0,1,0,1"))
                  (rule "mul_literals" (formula "29") (term "1,0,1,1,1,0,2,0,1,0,1"))
                  (rule "polySimp_elimSub" (formula "29") (term "1,1,1,0,2,0,1,0,1"))
                  (rule "polySimp_mulComm0" (formula "29") (term "1,0,2,0,1,0,1"))
                  (rule "polySimp_addComm0" (formula "29") (term "0,1,0,1,0,2,0,1,0,1"))
                  (rule "polySimp_rightDist" (formula "29") (term "0,1,1,0,2,0,1,0,1"))
                  (rule "polySimp_mulLiterals" (formula "29") (term "1,0,1,1,0,2,0,1,0,1"))
                  (rule "polySimp_mulComm0" (formula "29") (term "0,0,1,1,0,2,0,1,0,1"))
                  (rule "polySimp_addComm1" (formula "29") (term "1,1,0,2,0,1,0,1"))
                  (rule "polySimp_addComm0" (formula "29") (term "0,1,1,0,2,0,1,0,1"))
                  (rule "polySimp_rightDist" (formula "29") (term "1,0,2,0,1,0,1"))
                  (rule "polySimp_mulComm1" (formula "29") (term "1,1,0,2,0,1,0,1"))
                  (rule "polySimp_mulComm0" (formula "29") (term "0,1,1,0,2,0,1,0,1"))
                  (rule "polySimp_rightDist" (formula "29") (term "0,1,0,2,0,1,0,1"))
                  (rule "polySimp_elimOne" (formula "29") (term "0,0,1,0,2,0,1,0,1"))
                  (rule "polySimp_mulComm1" (formula "29") (term "1,0,1,0,2,0,1,0,1"))
                  (rule "polySimp_mulComm0" (formula "29") (term "0,1,0,1,0,2,0,1,0,1"))
                  (rule "polySimp_addAssoc" (formula "29") (term "0,2,0,1,0,1"))
                  (rule "polySimp_addAssoc" (formula "29") (term "0,0,2,0,1,0,1"))
                  (rule "Definition_axiom_for_isSortedSliceTransitive_in_de_wiesler_Functions" (formula "29") (term "0,0") (inst "i=i") (inst "j=j"))
                   (builtin "One Step Simplification" (formula "29"))
                  (rule "inEqSimp_ltToLeq" (formula "29") (term "1,0,0,1,0,0"))
                  (rule "polySimp_rightDist" (formula "29") (term "1,0,0,1,0,0,1,0,0"))
                  (rule "mul_literals" (formula "29") (term "0,1,0,0,1,0,0,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "29") (term "0,0,1,0,0,1,0,0"))
                  (rule "add_literals" (formula "29") (term "0,0,0,1,0,0,1,0,0"))
                  (rule "inEqSimp_ltToLeq" (formula "29") (term "1,0,0,0"))
                  (rule "polySimp_rightDist" (formula "29") (term "1,0,0,1,0,0,0"))
                  (rule "mul_literals" (formula "29") (term "0,1,0,0,1,0,0,0"))
                  (rule "polySimp_addAssoc" (formula "29") (term "0,0,1,0,0,0"))
                  (rule "add_literals" (formula "29") (term "0,0,0,1,0,0,0"))
                  (rule "inEqSimp_commuteLeq" (formula "29") (term "0,0,0,0"))
                  (rule "inEqSimp_commuteLeq" (formula "29") (term "1,0,1,0,0"))
                  (rule "inEqSimp_commuteLeq" (formula "29") (term "0,0,0,1,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "29") (term "1,0,0,1,0,0"))
                  (rule "polySimp_mulComm0" (formula "29") (term "1,1,0,0,1,0,0"))
                  (rule "polySimp_rightDist" (formula "29") (term "1,1,0,0,1,0,0"))
                  (rule "mul_literals" (formula "29") (term "0,1,1,0,0,1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "29") (term "1,1,1,0,0,1,0,0"))
                  (rule "polySimp_elimOne" (formula "29") (term "1,1,1,0,0,1,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "29") (term "1,0,0,0"))
                  (rule "polySimp_mulComm0" (formula "29") (term "1,1,0,0,0"))
                  (rule "polySimp_rightDist" (formula "29") (term "1,1,0,0,0"))
                  (rule "mul_literals" (formula "29") (term "0,1,1,0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "29") (term "1,1,1,0,0,0"))
                  (rule "polySimp_elimOne" (formula "29") (term "1,1,1,0,0,0"))
                  (rule "nnf_imp2or" (formula "29") (term "0,0"))
                  (rule "nnf_notAnd" (formula "29") (term "0,0,0"))
                  (rule "inEqSimp_notLeq" (formula "29") (term "1,0,0,0"))
                  (rule "polySimp_rightDist" (formula "29") (term "1,0,0,1,0,0,0"))
                  (rule "mul_literals" (formula "29") (term "0,1,0,0,1,0,0,0"))
                  (rule "polySimp_addAssoc" (formula "29") (term "0,0,1,0,0,0"))
                  (rule "add_literals" (formula "29") (term "0,0,0,1,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "29") (term "1,0,0,0"))
                  (rule "polySimp_mulComm0" (formula "29") (term "1,1,0,0,0"))
                  (rule "polySimp_rightDist" (formula "29") (term "1,1,0,0,0"))
                  (rule "mul_literals" (formula "29") (term "0,1,1,0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "29") (term "1,1,1,0,0,0"))
                  (rule "polySimp_elimOne" (formula "29") (term "1,1,1,0,0,0"))
                  (rule "inEqSimp_notGeq" (formula "29") (term "0,0,0,0"))
                  (rule "times_zero_1" (formula "29") (term "1,0,0,0,0,0,0"))
                  (rule "add_zero_right" (formula "29") (term "0,0,0,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "29") (term "0,0,0,0"))
                  (rule "mul_literals" (formula "29") (term "1,0,0,0,0"))
                  (rule "Definition_axiom_for_isSortedSlice_in_de_wiesler_Functions" (formula "20") (term "0") (inst "i=i"))
                   (builtin "One Step Simplification" (formula "20"))
                  (rule "translateJavaAddInt" (formula "20") (term "0,2,1,1,0"))
                  (rule "translateJavaSubInt" (formula "20") (term "1,1,0,0"))
                  (rule "polySimp_elimSub" (formula "20") (term "1,1,0,0"))
                  (rule "mul_literals" (formula "20") (term "1,1,1,0,0"))
                  (rule "polySimp_addComm0" (formula "20") (term "0,2,1,1,0"))
                  (rule "polySimp_addComm1" (formula "20") (term "1,1,0,0"))
                  (rule "add_literals" (formula "20") (term "0,1,1,0,0"))
                  (rule "inEqSimp_ltToLeq" (formula "20") (term "1,0,0"))
                  (rule "polySimp_rightDist" (formula "20") (term "1,0,0,1,0,0"))
                  (rule "mul_literals" (formula "20") (term "0,1,0,0,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "20") (term "0,0,1,0,0"))
                  (rule "add_literals" (formula "20") (term "0,0,0,1,0,0"))
                  (rule "inEqSimp_commuteLeq" (formula "20") (term "0,0,0"))
                  (rule "inEqSimp_commuteLeq" (formula "20") (term "1,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "20") (term "1,1,0,0"))
                  (rule "polySimp_rightDist" (formula "20") (term "1,1,0,0"))
                  (rule "mul_literals" (formula "20") (term "0,1,1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "20") (term "1,1,1,0,0"))
                  (rule "polySimp_elimOne" (formula "20") (term "1,1,1,0,0"))
                  (rule "nnf_imp2or" (formula "29") (term "0,1,0,0"))
                  (rule "nnf_imp2or" (formula "20") (term "0"))
                  (rule "nnf_notAnd" (formula "20") (term "0,0"))
                  (rule "inEqSimp_notLeq" (formula "20") (term "1,0,0"))
                  (rule "polySimp_rightDist" (formula "20") (term "1,0,0,1,0,0"))
                  (rule "mul_literals" (formula "20") (term "0,1,0,0,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "20") (term "0,0,1,0,0"))
                  (rule "add_literals" (formula "20") (term "0,0,0,1,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "20") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "20") (term "1,1,0,0"))
                  (rule "polySimp_rightDist" (formula "20") (term "1,1,0,0"))
                  (rule "mul_literals" (formula "20") (term "0,1,1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "20") (term "1,1,1,0,0"))
                  (rule "polySimp_elimOne" (formula "20") (term "1,1,1,0,0"))
                  (rule "inEqSimp_notGeq" (formula "20") (term "0,0,0"))
                  (rule "times_zero_1" (formula "20") (term "1,0,0,0,0,0"))
                  (rule "add_zero_right" (formula "20") (term "0,0,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "0,0,0"))
                  (rule "mul_literals" (formula "20") (term "1,0,0,0"))
                  (rule "nnf_notAnd" (formula "29") (term "0,0,1,0,0"))
                  (rule "inEqSimp_notLeq" (formula "29") (term "1,0,0,1,0,0"))
                  (rule "polySimp_rightDist" (formula "29") (term "1,0,0,1,0,0,1,0,0"))
                  (rule "mul_literals" (formula "29") (term "0,1,0,0,1,0,0,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "29") (term "0,0,1,0,0,1,0,0"))
                  (rule "add_literals" (formula "29") (term "0,0,0,1,0,0,1,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "29") (term "1,0,0,1,0,0"))
                  (rule "polySimp_mulComm0" (formula "29") (term "1,1,0,0,1,0,0"))
                  (rule "polySimp_rightDist" (formula "29") (term "1,1,0,0,1,0,0"))
                  (rule "mul_literals" (formula "29") (term "0,1,1,0,0,1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "29") (term "1,1,1,0,0,1,0,0"))
                  (rule "polySimp_elimOne" (formula "29") (term "1,1,1,0,0,1,0,0"))
                  (rule "inEqSimp_notGeq" (formula "29") (term "0,0,0,1,0,0"))
                  (rule "polySimp_mulComm0" (formula "29") (term "1,0,0,0,0,0,1,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "29") (term "0,0,0,1,0,0"))
                  (rule "polySimp_mulComm0" (formula "29") (term "1,0,0,0,1,0,0"))
                  (rule "polySimp_rightDist" (formula "29") (term "1,0,0,0,1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "29") (term "1,1,0,0,0,1,0,0"))
                  (rule "mul_literals" (formula "29") (term "0,1,0,0,0,1,0,0"))
                  (rule "polySimp_elimOne" (formula "29") (term "1,1,0,0,0,1,0,0"))
                  (rule "ifthenelse_split" (formula "9") (term "0"))
                  (branch "self.equal_buckets = TRUE TRUE"
                     (rule "newSym_eq" (formula "10") (inst "l=l_0") (inst "newSymDef=mul(int::final(self,
               de.wiesler.Classifier::$num_buckets),
    Z(0(#)))"))
                     (rule "times_zero_1" (formula "10") (term "1,1"))
                     (rule "add_zero_right" (formula "10") (term "1"))
                     (rule "applyEq" (formula "11") (term "0,0") (ifseqformula "10"))
                     (rule "eqSymm" (formula "11"))
                     (rule "applyEq" (formula "25") (term "1,1,0,0") (ifseqformula "10"))
                     (rule "applyEq" (formula "13") (term "1,1,0,0,1,0") (ifseqformula "10"))
                     (rule "applyEq" (formula "23") (term "1,1,1,0,0,1,0") (ifseqformula "10"))
                     (rule "applyEq" (formula "31") (term "1,1,1,0,0,1,0,0") (ifseqformula "10"))
                     (rule "applyEq" (formula "1") (term "1,3,0,0") (ifseqformula "10"))
                     (rule "applyEq" (formula "14") (term "1,0,2,0") (ifseqformula "10"))
                     (rule "eqSymm" (formula "14"))
                     (rule "applyEq" (formula "23") (term "1,1,1,0,0") (ifseqformula "10"))
                     (rule "applyEq" (formula "22") (term "1,1,1,0,0") (ifseqformula "10"))
                     (rule "applyEq" (formula "24") (term "1,1,0,0") (ifseqformula "10"))
                     (rule "applyEq" (formula "19") (term "0") (ifseqformula "10"))
                     (rule "applyEq" (formula "21") (term "0") (ifseqformula "10"))
                     (rule "inEqSimp_commuteLeq" (formula "21"))
                     (rule "applyEq" (formula "1") (term "1,3,0,1") (ifseqformula "10"))
                     (rule "applyEq" (formula "20") (term "1") (ifseqformula "10"))
                     (rule "applyEq" (formula "31") (term "1,1,0,0,1") (ifseqformula "10"))
                     (rule "applyEq" (formula "13") (term "1,1,0,0") (ifseqformula "10"))
                     (rule "applyEq" (formula "31") (term "1,1,1,0,0,0") (ifseqformula "10"))
                     (rule "applyEq" (formula "7") (term "0") (ifseqformula "11"))
                     (rule "applyEq" (formula "8") (term "0") (ifseqformula "11"))
                     (rule "applyEq" (formula "14") (term "1,0,2,0") (ifseqformula "10"))
                     (rule "eqSymm" (formula "14"))
                     (rule "applyEq" (formula "17") (term "1") (ifseqformula "10"))
                     (rule "applyEq" (formula "24") (term "0,1,0,0,1,1,1,0") (ifseqformula "10"))
                     (rule "inEqSimp_subsumption6" (formula "7") (ifseqformula "19"))
                     (rule "mul_literals" (formula "7") (term "1,1,0"))
                     (rule "greater_literals" (formula "7") (term "0,0"))
                      (builtin "One Step Simplification" (formula "7"))
                     (rule "leq_literals" (formula "7") (term "0"))
                      (builtin "One Step Simplification" (formula "7"))
                     (rule "true_left" (formula "7"))
                     (rule "elimGcdLeq_antec" (formula "7") (inst "elimGcdRightDiv=Z(4(6(#)))") (inst "elimGcdLeftDiv=l_0") (inst "elimGcd=Z(2(#))"))
                     (rule "neg_literal" (formula "7") (term "0,0,0,0,0,1,0"))
                     (rule "polySimp_mulLiterals" (formula "7") (term "1,0,0,0,0,1,0"))
                     (rule "polySimp_mulLiterals" (formula "7") (term "1,0,1,0"))
                     (rule "leq_literals" (formula "7") (term "0,0"))
                      (builtin "One Step Simplification" (formula "7"))
                     (rule "mul_literals" (formula "7") (term "1,0,0,0,0,0"))
                     (rule "polySimp_addLiterals" (formula "7") (term "0,0,0,0"))
                     (rule "add_zero_right" (formula "7") (term "0,0,0,0"))
                     (rule "polySimp_pullOutFactor0b" (formula "7") (term "0,0"))
                     (rule "add_literals" (formula "7") (term "1,1,0,0"))
                     (rule "times_zero_1" (formula "7") (term "1,0,0"))
                     (rule "add_zero_right" (formula "7") (term "0,0"))
                     (rule "qeq_literals" (formula "7") (term "0"))
                      (builtin "One Step Simplification" (formula "7"))
                     (rule "arrayLengthIsAShort" (formula "19") (term "0"))
                      (builtin "One Step Simplification" (formula "19"))
                     (rule "true_left" (formula "19"))
                     (rule "arrayLengthNotNegative" (formula "19") (term "0"))
                     (rule "arrayLengthNotNegative" (formula "17") (term "0"))
                     (rule "inEqSimp_subsumption1" (formula "17") (ifseqformula "18"))
                     (rule "leq_literals" (formula "17") (term "0"))
                      (builtin "One Step Simplification" (formula "17"))
                     (rule "true_left" (formula "17"))
                     (rule "arrayLengthIsAShort" (formula "17") (term "0"))
                      (builtin "One Step Simplification" (formula "17"))
                     (rule "true_left" (formula "17"))
                     (rule "Definition_axiom_for_isSortedSliceTransitive_in_de_wiesler_Functions" (formula "1") (term "0,0") (inst "i=i") (inst "j=j"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "inEqSimp_ltToLeq" (formula "1") (term "1,0,0,1,0,0"))
                     (rule "polySimp_rightDist" (formula "1") (term "1,0,0,1,0,0,1,0,0"))
                     (rule "mul_literals" (formula "1") (term "0,1,0,0,1,0,0,1,0,0"))
                     (rule "polySimp_addAssoc" (formula "1") (term "0,0,1,0,0,1,0,0"))
                     (rule "add_literals" (formula "1") (term "0,0,0,1,0,0,1,0,0"))
                     (rule "inEqSimp_ltToLeq" (formula "1") (term "1,0,0,0"))
                     (rule "polySimp_rightDist" (formula "1") (term "1,0,0,1,0,0,0"))
                     (rule "mul_literals" (formula "1") (term "0,1,0,0,1,0,0,0"))
                     (rule "polySimp_addAssoc" (formula "1") (term "0,0,1,0,0,0"))
                     (rule "add_literals" (formula "1") (term "0,0,0,1,0,0,0"))
                     (rule "inEqSimp_commuteLeq" (formula "1") (term "1,0,1,0,0"))
                     (rule "inEqSimp_commuteLeq" (formula "1") (term "0,0,0,0"))
                     (rule "inEqSimp_commuteLeq" (formula "1") (term "0,0,0,1,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1,0,0,1,0,0"))
                     (rule "polySimp_mulComm0" (formula "1") (term "1,1,0,0,1,0,0"))
                     (rule "polySimp_rightDist" (formula "1") (term "1,1,0,0,1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,0,0,1,0,0"))
                     (rule "mul_literals" (formula "1") (term "0,1,1,0,0,1,0,0"))
                     (rule "polySimp_elimOne" (formula "1") (term "1,1,1,0,0,1,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1,0,0,0"))
                     (rule "polySimp_mulComm0" (formula "1") (term "1,1,0,0,0"))
                     (rule "polySimp_rightDist" (formula "1") (term "1,1,0,0,0"))
                     (rule "mul_literals" (formula "1") (term "0,1,1,0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,0,0,0"))
                     (rule "polySimp_elimOne" (formula "1") (term "1,1,1,0,0,0"))
                     (rule "nnf_imp2or" (formula "1") (term "0,0"))
                     (rule "nnf_notAnd" (formula "1") (term "0,0,0"))
                     (rule "inEqSimp_notLeq" (formula "1") (term "1,0,0,0"))
                     (rule "polySimp_rightDist" (formula "1") (term "1,0,0,1,0,0,0"))
                     (rule "mul_literals" (formula "1") (term "0,1,0,0,1,0,0,0"))
                     (rule "polySimp_addAssoc" (formula "1") (term "0,0,1,0,0,0"))
                     (rule "add_literals" (formula "1") (term "0,0,0,1,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0,0,0"))
                     (rule "polySimp_mulComm0" (formula "1") (term "1,1,0,0,0"))
                     (rule "polySimp_rightDist" (formula "1") (term "1,1,0,0,0"))
                     (rule "mul_literals" (formula "1") (term "0,1,1,0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,0,0,0"))
                     (rule "polySimp_elimOne" (formula "1") (term "1,1,1,0,0,0"))
                     (rule "inEqSimp_notGeq" (formula "1") (term "0,0,0,0"))
                     (rule "times_zero_1" (formula "1") (term "1,0,0,0,0,0,0"))
                     (rule "add_zero_right" (formula "1") (term "0,0,0,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "0,0,0,0"))
                     (rule "mul_literals" (formula "1") (term "1,0,0,0,0"))
                     (rule "nnf_imp2or" (formula "1") (term "0,1,0,0"))
                     (rule "nnf_notAnd" (formula "1") (term "0,0,1,0,0"))
                     (rule "inEqSimp_notLeq" (formula "1") (term "1,0,0,1,0,0"))
                     (rule "polySimp_rightDist" (formula "1") (term "1,0,0,1,0,0,1,0,0"))
                     (rule "mul_literals" (formula "1") (term "0,1,0,0,1,0,0,1,0,0"))
                     (rule "polySimp_addAssoc" (formula "1") (term "0,0,1,0,0,1,0,0"))
                     (rule "add_literals" (formula "1") (term "0,0,0,1,0,0,1,0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0,0,1,0,0"))
                     (rule "polySimp_mulComm0" (formula "1") (term "1,1,0,0,1,0,0"))
                     (rule "polySimp_rightDist" (formula "1") (term "1,1,0,0,1,0,0"))
                     (rule "mul_literals" (formula "1") (term "0,1,1,0,0,1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,0,0,1,0,0"))
                     (rule "polySimp_elimOne" (formula "1") (term "1,1,1,0,0,1,0,0"))
                     (rule "inEqSimp_notGeq" (formula "1") (term "0,0,0,1,0,0"))
                     (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,0,0,0,1,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "0,0,0,1,0,0"))
                     (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,0,1,0,0"))
                     (rule "polySimp_rightDist" (formula "1") (term "1,0,0,0,1,0,0"))
                     (rule "mul_literals" (formula "1") (term "0,1,0,0,0,1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0,0,1,0,0"))
                     (rule "polySimp_elimOne" (formula "1") (term "1,1,0,0,0,1,0,0"))
                     (rule "Contract_axiom_for_isSortedSlice_in_Functions" (formula "1") (term "0,1"))
                     (rule "wellFormedAnon" (formula "1") (term "1,0"))
                     (rule "replace_known_left" (formula "1") (term "1,1,0") (ifseqformula "4"))
                      (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "30")) (ifInst ""  (formula "3")))
                     (rule "Definition_axiom_for_isSortedSlice_in_de_wiesler_Functions" (formula "2") (term "0,1") (inst "i=i"))
                      (builtin "One Step Simplification" (formula "2"))
                     (rule "translateJavaSubInt" (formula "2") (term "1,1,0,0,1"))
                     (rule "translateJavaAddInt" (formula "2") (term "0,2,1,1,0,1"))
                     (rule "polySimp_elimSub" (formula "2") (term "1,1,0,0,1"))
                     (rule "mul_literals" (formula "2") (term "1,1,1,0,0,1"))
                     (rule "polySimp_addComm0" (formula "2") (term "0,2,1,1,0,1"))
                     (rule "polySimp_addComm1" (formula "2") (term "1,1,0,0,1"))
                     (rule "add_literals" (formula "2") (term "0,1,1,0,0,1"))
                     (rule "inEqSimp_ltToLeq" (formula "2") (term "1,0,0,1"))
                     (rule "polySimp_rightDist" (formula "2") (term "1,0,0,1,0,0,1"))
                     (rule "mul_literals" (formula "2") (term "0,1,0,0,1,0,0,1"))
                     (rule "polySimp_addAssoc" (formula "2") (term "0,0,1,0,0,1"))
                     (rule "add_literals" (formula "2") (term "0,0,0,1,0,0,1"))
                     (rule "inEqSimp_commuteLeq" (formula "2") (term "0,0,0,1"))
                     (rule "inEqSimp_commuteLeq" (formula "2") (term "1,0,1"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "2") (term "1,0,0,1"))
                     (rule "polySimp_mulComm0" (formula "2") (term "1,1,0,0,1"))
                     (rule "polySimp_rightDist" (formula "2") (term "1,1,0,0,1"))
                     (rule "polySimp_mulLiterals" (formula "2") (term "1,1,1,0,0,1"))
                     (rule "mul_literals" (formula "2") (term "0,1,1,0,0,1"))
                     (rule "polySimp_elimOne" (formula "2") (term "1,1,1,0,0,1"))
                     (rule "nnf_imp2or" (formula "2") (term "0,1"))
                     (rule "nnf_notAnd" (formula "2") (term "0,0,1"))
                     (rule "inEqSimp_notGeq" (formula "2") (term "0,0,0,1"))
                     (rule "mul_literals" (formula "2") (term "1,0,0,0,0,0,1"))
                     (rule "add_literals" (formula "2") (term "0,0,0,0,0,1"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "2") (term "0,0,0,1"))
                     (rule "mul_literals" (formula "2") (term "1,0,0,0,1"))
                     (rule "inEqSimp_notLeq" (formula "2") (term "1,0,0,1"))
                     (rule "polySimp_rightDist" (formula "2") (term "1,0,0,1,0,0,1"))
                     (rule "mul_literals" (formula "2") (term "0,1,0,0,1,0,0,1"))
                     (rule "polySimp_addAssoc" (formula "2") (term "0,0,1,0,0,1"))
                     (rule "add_literals" (formula "2") (term "0,0,0,1,0,0,1"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "2") (term "1,0,0,1"))
                     (rule "polySimp_mulComm0" (formula "2") (term "1,1,0,0,1"))
                     (rule "polySimp_rightDist" (formula "2") (term "1,1,0,0,1"))
                     (rule "mul_literals" (formula "2") (term "0,1,1,0,0,1"))
                     (rule "polySimp_mulLiterals" (formula "2") (term "1,1,1,0,0,1"))
                     (rule "polySimp_elimOne" (formula "2") (term "1,1,1,0,0,1"))
                     (rule "commute_or" (formula "13") (term "0,0,1,0"))
                     (rule "commute_or" (formula "24") (term "0,0,1,0"))
                     (rule "cnf_rightDist" (formula "25") (term "0"))
                     (rule "andRight" (formula "32"))
                     (branch "Case 1"
                        (rule "allRight" (formula "32") (inst "sk=i_0"))
                        (rule "orRight" (formula "32"))
                        (rule "orRight" (formula "32"))
                        (rule "allRight" (formula "34") (inst "sk=j_0"))
                        (rule "orRight" (formula "34"))
                        (rule "orRight" (formula "34"))
                        (rule "inEqSimp_geqRight" (formula "33"))
                        (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                        (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                        (rule "add_literals" (formula "1") (term "0,0,0"))
                        (rule "inEqSimp_leqRight" (formula "33"))
                        (rule "mul_literals" (formula "1") (term "1,0,0"))
                        (rule "add_literals" (formula "1") (term "0,0"))
                        (rule "add_zero_left" (formula "1") (term "0"))
                        (rule "inEqSimp_geqRight" (formula "36"))
                        (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                        (rule "inEqSimp_geqRight" (formula "36"))
                        (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                        (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                        (rule "add_literals" (formula "1") (term "0,0,0"))
                        (rule "inEqSimp_leqRight" (formula "36"))
                        (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                        (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                        (rule "add_literals" (formula "1") (term "0,0,0"))
                        (rule "add_zero_left" (formula "1") (term "0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "5"))
                        (rule "polySimp_mulComm0" (formula "5") (term "1"))
                        (rule "polySimp_rightDist" (formula "5") (term "1"))
                        (rule "polySimp_mulLiterals" (formula "5") (term "1,1"))
                        (rule "mul_literals" (formula "5") (term "0,1"))
                        (rule "polySimp_elimOne" (formula "5") (term "1,1"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "3"))
                        (rule "polySimp_mulComm0" (formula "3") (term "1"))
                        (rule "polySimp_rightDist" (formula "3") (term "1"))
                        (rule "mul_literals" (formula "3") (term "0,1"))
                        (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
                        (rule "polySimp_elimOne" (formula "3") (term "1,1"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "2"))
                        (rule "polySimp_mulComm0" (formula "2") (term "1"))
                        (rule "polySimp_rightDist" (formula "2") (term "1"))
                        (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
                        (rule "mul_literals" (formula "2") (term "0,1"))
                        (rule "polySimp_elimOne" (formula "2") (term "1,1"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "1"))
                        (rule "polySimp_elimOne" (formula "1") (term "1"))
                        (rule "pullOutSelect" (formula "3") (term "0") (inst "selectSK=arr_0"))
                        (rule "simplifySelectOfAnon" (formula "3"))
                         (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "36")))
                        (rule "inEqSimp_homoInEq0" (formula "4"))
                        (rule "polySimp_addComm1" (formula "4") (term "0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "4"))
                        (rule "polySimp_mulComm0" (formula "4") (term "1"))
                        (rule "polySimp_rightDist" (formula "4") (term "1"))
                        (rule "mul_literals" (formula "4") (term "0,1"))
                        (rule "polySimp_mulLiterals" (formula "4") (term "1,1"))
                        (rule "polySimp_elimOne" (formula "4") (term "1,1"))
                        (rule "elementOfSetMinus" (formula "3") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "3"))
                        (rule "elementOfUnion" (formula "3") (term "0,0,0,0"))
                         (builtin "One Step Simplification" (formula "3"))
                        (rule "ifthenelse_negated" (formula "3") (term "0"))
                        (rule "inEqSimp_exactShadow3" (formula "5") (ifseqformula "6"))
                        (rule "times_zero_1" (formula "5") (term "0,0"))
                        (rule "add_zero_left" (formula "5") (term "0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "5"))
                        (rule "mul_literals" (formula "5") (term "1"))
                        (rule "pullOutSelect" (formula "4") (term "0") (inst "selectSK=arr_1"))
                        (rule "simplifySelectOfAnon" (formula "4"))
                         (builtin "One Step Simplification" (formula "4") (ifInst ""  (formula "37")))
                        (rule "elementOfSetMinus" (formula "4") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "4"))
                        (rule "elementOfUnion" (formula "4") (term "0,0,0,0"))
                         (builtin "One Step Simplification" (formula "4"))
                        (rule "ifthenelse_negated" (formula "4") (term "0"))
                        (rule "inEqSimp_exactShadow3" (formula "1") (ifseqformula "2"))
                        (rule "polySimp_mulComm0" (formula "1") (term "0,0"))
                        (rule "polySimp_addComm0" (formula "1") (term "0"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "1"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                        (rule "polySimp_elimOne" (formula "1") (term "0"))
                        (rule "distr_forallAnd" (formula "32"))
                        (rule "andLeft" (formula "32"))
                        (rule "Definition_axiom_for_isSortedSlice_in_de_wiesler_Functions" (formula "8") (term "0,0") (inst "i=i"))
                         (builtin "One Step Simplification" (formula "8"))
                        (rule "translateJavaAddInt" (formula "8") (term "0,2,1,1,0,0"))
                        (rule "translateJavaSubInt" (formula "8") (term "1,1,0,0,0"))
                        (rule "polySimp_elimSub" (formula "8") (term "1,1,0,0,0"))
                        (rule "mul_literals" (formula "8") (term "1,1,1,0,0,0"))
                        (rule "polySimp_addComm0" (formula "8") (term "0,2,1,1,0,0"))
                        (rule "polySimp_addComm1" (formula "8") (term "1,1,0,0,0"))
                        (rule "add_literals" (formula "8") (term "0,1,1,0,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "8") (term "1,0,0,0"))
                        (rule "polySimp_rightDist" (formula "8") (term "1,0,0,1,0,0,0"))
                        (rule "mul_literals" (formula "8") (term "0,1,0,0,1,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "8") (term "0,0,1,0,0,0"))
                        (rule "add_literals" (formula "8") (term "0,0,0,1,0,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "8") (term "0,0,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "8") (term "1,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "1,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "8") (term "1,1,0,0,0"))
                        (rule "polySimp_rightDist" (formula "8") (term "1,1,0,0,0"))
                        (rule "mul_literals" (formula "8") (term "0,1,1,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "8") (term "1,1,1,0,0,0"))
                        (rule "polySimp_elimOne" (formula "8") (term "1,1,1,0,0,0"))
                        (rule "nnf_imp2or" (formula "8") (term "0,0"))
                        (rule "nnf_notAnd" (formula "8") (term "0,0,0"))
                        (rule "inEqSimp_notLeq" (formula "8") (term "1,0,0,0"))
                        (rule "polySimp_rightDist" (formula "8") (term "1,0,0,1,0,0,0"))
                        (rule "mul_literals" (formula "8") (term "0,1,0,0,1,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "8") (term "0,0,1,0,0,0"))
                        (rule "add_literals" (formula "8") (term "0,0,0,1,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "8") (term "1,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "8") (term "1,1,0,0,0"))
                        (rule "polySimp_rightDist" (formula "8") (term "1,1,0,0,0"))
                        (rule "mul_literals" (formula "8") (term "0,1,1,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "8") (term "1,1,1,0,0,0"))
                        (rule "polySimp_elimOne" (formula "8") (term "1,1,1,0,0,0"))
                        (rule "inEqSimp_notGeq" (formula "8") (term "0,0,0,0"))
                        (rule "mul_literals" (formula "8") (term "1,0,0,0,0,0,0"))
                        (rule "add_zero_right" (formula "8") (term "0,0,0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "0,0,0,0"))
                        (rule "mul_literals" (formula "8") (term "1,0,0,0,0"))
                        (rule "commute_or" (formula "9") (term "0,0,1,0,0"))
                        (rule "Definition_axiom_for_isSortedSliceTransitive_in_de_wiesler_Functions" (formula "8") (term "0,1") (inst "i=i") (inst "j=j"))
                         (builtin "One Step Simplification" (formula "8"))
                        (rule "inEqSimp_ltToLeq" (formula "8") (term "1,0,0,1,0,1"))
                        (rule "polySimp_rightDist" (formula "8") (term "1,0,0,1,0,0,1,0,1"))
                        (rule "mul_literals" (formula "8") (term "0,1,0,0,1,0,0,1,0,1"))
                        (rule "polySimp_addAssoc" (formula "8") (term "0,0,1,0,0,1,0,1"))
                        (rule "add_literals" (formula "8") (term "0,0,0,1,0,0,1,0,1"))
                        (rule "inEqSimp_ltToLeq" (formula "8") (term "1,0,0,1"))
                        (rule "polySimp_rightDist" (formula "8") (term "1,0,0,1,0,0,1"))
                        (rule "mul_literals" (formula "8") (term "0,1,0,0,1,0,0,1"))
                        (rule "polySimp_addAssoc" (formula "8") (term "0,0,1,0,0,1"))
                        (rule "add_literals" (formula "8") (term "0,0,0,1,0,0,1"))
                        (rule "inEqSimp_commuteLeq" (formula "8") (term "1,0,1,0,1"))
                        (rule "inEqSimp_commuteLeq" (formula "8") (term "0,0,0,1"))
                        (rule "inEqSimp_commuteLeq" (formula "8") (term "0,0,0,1,0,1"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "1,0,0,1,0,1"))
                        (rule "polySimp_mulComm0" (formula "8") (term "1,1,0,0,1,0,1"))
                        (rule "polySimp_rightDist" (formula "8") (term "1,1,0,0,1,0,1"))
                        (rule "polySimp_mulLiterals" (formula "8") (term "1,1,1,0,0,1,0,1"))
                        (rule "mul_literals" (formula "8") (term "0,1,1,0,0,1,0,1"))
                        (rule "polySimp_elimOne" (formula "8") (term "1,1,1,0,0,1,0,1"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "1,0,0,1"))
                        (rule "polySimp_mulComm0" (formula "8") (term "1,1,0,0,1"))
                        (rule "polySimp_rightDist" (formula "8") (term "1,1,0,0,1"))
                        (rule "polySimp_mulLiterals" (formula "8") (term "1,1,1,0,0,1"))
                        (rule "mul_literals" (formula "8") (term "0,1,1,0,0,1"))
                        (rule "polySimp_elimOne" (formula "8") (term "1,1,1,0,0,1"))
                        (rule "nnf_imp2or" (formula "8") (term "0,1"))
                        (rule "nnf_notAnd" (formula "8") (term "0,0,1"))
                        (rule "inEqSimp_notLeq" (formula "8") (term "1,0,0,1"))
                        (rule "polySimp_rightDist" (formula "8") (term "1,0,0,1,0,0,1"))
                        (rule "mul_literals" (formula "8") (term "0,1,0,0,1,0,0,1"))
                        (rule "polySimp_addAssoc" (formula "8") (term "0,0,1,0,0,1"))
                        (rule "add_literals" (formula "8") (term "0,0,0,1,0,0,1"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "8") (term "1,0,0,1"))
                        (rule "polySimp_mulComm0" (formula "8") (term "1,1,0,0,1"))
                        (rule "polySimp_rightDist" (formula "8") (term "1,1,0,0,1"))
                        (rule "mul_literals" (formula "8") (term "0,1,1,0,0,1"))
                        (rule "polySimp_mulLiterals" (formula "8") (term "1,1,1,0,0,1"))
                        (rule "polySimp_elimOne" (formula "8") (term "1,1,1,0,0,1"))
                        (rule "inEqSimp_notGeq" (formula "8") (term "0,0,0,1"))
                        (rule "times_zero_1" (formula "8") (term "1,0,0,0,0,0,1"))
                        (rule "add_zero_right" (formula "8") (term "0,0,0,0,0,1"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "0,0,0,1"))
                        (rule "mul_literals" (formula "8") (term "1,0,0,0,1"))
                        (rule "nnf_imp2or" (formula "8") (term "0,1,0,1"))
                        (rule "nnf_notAnd" (formula "8") (term "0,0,1,0,1"))
                        (rule "inEqSimp_notGeq" (formula "8") (term "0,0,0,1,0,1"))
                        (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,0,0,0,1,0,1"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "0,0,0,1,0,1"))
                        (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,0,1,0,1"))
                        (rule "polySimp_rightDist" (formula "8") (term "1,0,0,0,1,0,1"))
                        (rule "polySimp_mulLiterals" (formula "8") (term "1,1,0,0,0,1,0,1"))
                        (rule "mul_literals" (formula "8") (term "0,1,0,0,0,1,0,1"))
                        (rule "polySimp_elimOne" (formula "8") (term "1,1,0,0,0,1,0,1"))
                        (rule "inEqSimp_notLeq" (formula "8") (term "1,0,0,1,0,1"))
                        (rule "polySimp_rightDist" (formula "8") (term "1,0,0,1,0,0,1,0,1"))
                        (rule "mul_literals" (formula "8") (term "0,1,0,0,1,0,0,1,0,1"))
                        (rule "polySimp_addAssoc" (formula "8") (term "0,0,1,0,0,1,0,1"))
                        (rule "add_literals" (formula "8") (term "0,0,0,1,0,0,1,0,1"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "8") (term "1,0,0,1,0,1"))
                        (rule "polySimp_mulComm0" (formula "8") (term "1,1,0,0,1,0,1"))
                        (rule "polySimp_rightDist" (formula "8") (term "1,1,0,0,1,0,1"))
                        (rule "polySimp_mulLiterals" (formula "8") (term "1,1,1,0,0,1,0,1"))
                        (rule "mul_literals" (formula "8") (term "0,1,1,0,0,1,0,1"))
                        (rule "polySimp_elimOne" (formula "8") (term "1,1,1,0,0,1,0,1"))
                        (rule "commute_or" (formula "33") (term "0"))
                        (rule "impLeft" (formula "9"))
                        (branch "Case 1"
                           (rule "allRight" (formula "34") (inst "sk=i_1"))
                           (rule "orRight" (formula "34"))
                           (rule "orRight" (formula "34"))
                           (rule "allRight" (formula "36") (inst "sk=j_1"))
                           (rule "orRight" (formula "36"))
                           (rule "orRight" (formula "36"))
                           (rule "inEqSimp_geqRight" (formula "35"))
                           (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                           (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                           (rule "add_literals" (formula "1") (term "0,0,0"))
                           (rule "inEqSimp_leqRight" (formula "35"))
                           (rule "mul_literals" (formula "1") (term "1,0,0"))
                           (rule "add_literals" (formula "1") (term "0,0"))
                           (rule "add_zero_left" (formula "1") (term "0"))
                           (rule "inEqSimp_geqRight" (formula "38"))
                           (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                           (rule "inEqSimp_geqRight" (formula "37"))
                           (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                           (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                           (rule "add_literals" (formula "1") (term "0,0,0"))
                           (rule "inEqSimp_leqRight" (formula "38"))
                           (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                           (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                           (rule "add_literals" (formula "1") (term "0,0,0"))
                           (rule "add_zero_left" (formula "1") (term "0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "5"))
                           (rule "polySimp_mulComm0" (formula "5") (term "1"))
                           (rule "polySimp_rightDist" (formula "5") (term "1"))
                           (rule "polySimp_mulLiterals" (formula "5") (term "1,1"))
                           (rule "mul_literals" (formula "5") (term "0,1"))
                           (rule "polySimp_elimOne" (formula "5") (term "1,1"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "3"))
                           (rule "polySimp_mulComm0" (formula "3") (term "1"))
                           (rule "polySimp_rightDist" (formula "3") (term "1"))
                           (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
                           (rule "mul_literals" (formula "3") (term "0,1"))
                           (rule "polySimp_elimOne" (formula "3") (term "1,1"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "2"))
                           (rule "polySimp_mulComm0" (formula "2") (term "1"))
                           (rule "polySimp_rightDist" (formula "2") (term "1"))
                           (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
                           (rule "mul_literals" (formula "2") (term "0,1"))
                           (rule "polySimp_elimOne" (formula "2") (term "1,1"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                           (rule "polySimp_mulLiterals" (formula "1") (term "1"))
                           (rule "polySimp_elimOne" (formula "1") (term "1"))
                           (rule "pullOutSelect" (formula "3") (term "0") (inst "selectSK=arr_2"))
                           (rule "simplifySelectOfAnon" (formula "3"))
                            (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "43")))
                           (rule "inEqSimp_homoInEq0" (formula "4"))
                           (rule "polySimp_addComm1" (formula "4") (term "0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "4"))
                           (rule "polySimp_mulComm0" (formula "4") (term "1"))
                           (rule "polySimp_rightDist" (formula "4") (term "1"))
                           (rule "polySimp_mulLiterals" (formula "4") (term "1,1"))
                           (rule "mul_literals" (formula "4") (term "0,1"))
                           (rule "polySimp_elimOne" (formula "4") (term "1,1"))
                           (rule "elementOfSetMinus" (formula "3") (term "0,0,0"))
                            (builtin "One Step Simplification" (formula "3"))
                           (rule "elementOfUnion" (formula "3") (term "0,0,0,0"))
                            (builtin "One Step Simplification" (formula "3"))
                           (rule "ifthenelse_negated" (formula "3") (term "0"))
                           (rule "inEqSimp_exactShadow3" (formula "5") (ifseqformula "6"))
                           (rule "times_zero_1" (formula "5") (term "0,0"))
                           (rule "add_zero_left" (formula "5") (term "0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "5"))
                           (rule "mul_literals" (formula "5") (term "1"))
                           (rule "pullOutSelect" (formula "4") (term "0") (inst "selectSK=arr_3"))
                           (rule "simplifySelectOfAnon" (formula "4"))
                            (builtin "One Step Simplification" (formula "4") (ifInst ""  (formula "44")))
                           (rule "elementOfSetMinus" (formula "4") (term "0,0,0"))
                            (builtin "One Step Simplification" (formula "4"))
                           (rule "elementOfUnion" (formula "4") (term "0,0,0,0"))
                            (builtin "One Step Simplification" (formula "4"))
                           (rule "ifthenelse_negated" (formula "4") (term "0"))
                           (rule "inEqSimp_exactShadow3" (formula "1") (ifseqformula "2"))
                           (rule "polySimp_mulComm0" (formula "1") (term "0,0"))
                           (rule "polySimp_addComm0" (formula "1") (term "0"))
                           (rule "inEqSimp_sepNegMonomial1" (formula "1"))
                           (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                           (rule "polySimp_elimOne" (formula "1") (term "0"))
                           (rule "onlyCreatedObjectsAreReferencedFinal" (formula "41") (term "0,0") (ifseqformula "16") (ifseqformula "18"))
                           (rule "replace_known_right" (formula "1") (term "1") (ifseqformula "43"))
                            (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "44")))
                           (rule "closeFalse" (formula "1"))
                        )
                        (branch "Case 2"
                           (rule "replace_known_left" (formula "8") (term "0") (ifseqformula "9"))
                            (builtin "One Step Simplification" (formula "8"))
                           (rule "onlyCreatedObjectsAreReferencedFinal" (formula "23") (term "0,0") (ifseqformula "10") (ifseqformula "12"))
                           (rule "replace_known_right" (formula "23") (term "1") (ifseqformula "37"))
                            (builtin "One Step Simplification" (formula "23") (ifInst ""  (formula "38")))
                           (rule "closeFalse" (formula "23"))
                        )
                     )
                     (branch "Case 2"
                        (rule "allRight" (formula "32") (inst "sk=i_0"))
                        (rule "orRight" (formula "32"))
                        (rule "orRight" (formula "32"))
                        (rule "polySimp_addComm1" (formula "34") (term "1,1,0,0,0,2,0"))
                        (rule "polySimp_addComm1" (formula "34") (term "1,0,0,1,0,2,0"))
                        (rule "polySimp_addComm1" (formula "34") (term "1,0,0,1,0,0,2,0"))
                        (rule "inEqSimp_geqRight" (formula "33"))
                        (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                        (rule "inEqSimp_leqRight" (formula "33"))
                        (rule "times_zero_1" (formula "1") (term "1,0,0"))
                        (rule "add_zero_right" (formula "1") (term "0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "2"))
                        (rule "polySimp_mulComm0" (formula "2") (term "1"))
                        (rule "polySimp_rightDist" (formula "2") (term "1"))
                        (rule "mul_literals" (formula "2") (term "0,1"))
                        (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
                        (rule "polySimp_elimOne" (formula "2") (term "1,1"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                        (rule "mul_literals" (formula "1") (term "1"))
                        (rule "pullOutSelect" (formula "34") (term "1") (inst "selectSK=arr_0"))
                        (rule "simplifySelectOfAnon" (formula "1"))
                         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "30")))
                        (rule "elementOfSetMinus" (formula "1") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "elementOfUnion" (formula "1") (term "0,0,0,0"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "ifthenelse_negated" (formula "1") (term "0"))
                        (rule "pullOutSelect" (formula "35") (term "0") (inst "selectSK=arr_1"))
                        (rule "simplifySelectOfAnon" (formula "1"))
                         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "34")))
                        (rule "elementOfSetMinus" (formula "1") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "elementOfUnion" (formula "1") (term "0,0,0,0"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "ifthenelse_negated" (formula "1") (term "0"))
                        (rule "inEqSimp_exactShadow3" (formula "3") (ifseqformula "4"))
                        (rule "mul_literals" (formula "3") (term "0,0"))
                        (rule "polySimp_addAssoc" (formula "3") (term "0"))
                        (rule "add_literals" (formula "3") (term "0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "3"))
                        (rule "mul_literals" (formula "3") (term "1"))
                        (rule "distr_forallAnd" (formula "29"))
                        (rule "andLeft" (formula "29"))
                        (rule "Definition_axiom_for_isSortedSliceTransitive_in_de_wiesler_Functions" (formula "5") (term "0,1") (inst "i=i") (inst "j=j"))
                         (builtin "One Step Simplification" (formula "5"))
                        (rule "inEqSimp_ltToLeq" (formula "5") (term "1,0,0,1,0,1"))
                        (rule "polySimp_rightDist" (formula "5") (term "1,0,0,1,0,0,1,0,1"))
                        (rule "mul_literals" (formula "5") (term "0,1,0,0,1,0,0,1,0,1"))
                        (rule "polySimp_addAssoc" (formula "5") (term "0,0,1,0,0,1,0,1"))
                        (rule "add_literals" (formula "5") (term "0,0,0,1,0,0,1,0,1"))
                        (rule "inEqSimp_ltToLeq" (formula "5") (term "1,0,0,1"))
                        (rule "polySimp_rightDist" (formula "5") (term "1,0,0,1,0,0,1"))
                        (rule "mul_literals" (formula "5") (term "0,1,0,0,1,0,0,1"))
                        (rule "polySimp_addAssoc" (formula "5") (term "0,0,1,0,0,1"))
                        (rule "add_literals" (formula "5") (term "0,0,0,1,0,0,1"))
                        (rule "inEqSimp_commuteLeq" (formula "5") (term "0,0,0,1"))
                        (rule "inEqSimp_commuteLeq" (formula "5") (term "0,0,0,1,0,1"))
                        (rule "inEqSimp_commuteLeq" (formula "5") (term "1,0,1,0,1"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "5") (term "1,0,0,1,0,1"))
                        (rule "polySimp_mulComm0" (formula "5") (term "1,1,0,0,1,0,1"))
                        (rule "polySimp_rightDist" (formula "5") (term "1,1,0,0,1,0,1"))
                        (rule "polySimp_mulLiterals" (formula "5") (term "1,1,1,0,0,1,0,1"))
                        (rule "mul_literals" (formula "5") (term "0,1,1,0,0,1,0,1"))
                        (rule "polySimp_elimOne" (formula "5") (term "1,1,1,0,0,1,0,1"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "5") (term "1,0,0,1"))
                        (rule "polySimp_mulComm0" (formula "5") (term "1,1,0,0,1"))
                        (rule "polySimp_rightDist" (formula "5") (term "1,1,0,0,1"))
                        (rule "polySimp_mulLiterals" (formula "5") (term "1,1,1,0,0,1"))
                        (rule "mul_literals" (formula "5") (term "0,1,1,0,0,1"))
                        (rule "polySimp_elimOne" (formula "5") (term "1,1,1,0,0,1"))
                        (rule "nnf_imp2or" (formula "5") (term "0,1"))
                        (rule "nnf_notAnd" (formula "5") (term "0,0,1"))
                        (rule "inEqSimp_notLeq" (formula "5") (term "1,0,0,1"))
                        (rule "polySimp_rightDist" (formula "5") (term "1,0,0,1,0,0,1"))
                        (rule "mul_literals" (formula "5") (term "0,1,0,0,1,0,0,1"))
                        (rule "polySimp_addAssoc" (formula "5") (term "0,0,1,0,0,1"))
                        (rule "add_literals" (formula "5") (term "0,0,0,1,0,0,1"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "5") (term "1,0,0,1"))
                        (rule "polySimp_mulComm0" (formula "5") (term "1,1,0,0,1"))
                        (rule "polySimp_rightDist" (formula "5") (term "1,1,0,0,1"))
                        (rule "mul_literals" (formula "5") (term "0,1,1,0,0,1"))
                        (rule "polySimp_mulLiterals" (formula "5") (term "1,1,1,0,0,1"))
                        (rule "polySimp_elimOne" (formula "5") (term "1,1,1,0,0,1"))
                        (rule "inEqSimp_notGeq" (formula "5") (term "0,0,0,1"))
                        (rule "times_zero_1" (formula "5") (term "1,0,0,0,0,0,1"))
                        (rule "add_zero_right" (formula "5") (term "0,0,0,0,0,1"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "5") (term "0,0,0,1"))
                        (rule "mul_literals" (formula "5") (term "1,0,0,0,1"))
                        (rule "nnf_imp2or" (formula "5") (term "0,1,0,1"))
                        (rule "nnf_notAnd" (formula "5") (term "0,0,1,0,1"))
                        (rule "inEqSimp_notLeq" (formula "5") (term "1,0,0,1,0,1"))
                        (rule "polySimp_rightDist" (formula "5") (term "1,0,0,1,0,0,1,0,1"))
                        (rule "mul_literals" (formula "5") (term "0,1,0,0,1,0,0,1,0,1"))
                        (rule "polySimp_addAssoc" (formula "5") (term "0,0,1,0,0,1,0,1"))
                        (rule "add_literals" (formula "5") (term "0,0,0,1,0,0,1,0,1"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "5") (term "1,0,0,1,0,1"))
                        (rule "polySimp_mulComm0" (formula "5") (term "1,1,0,0,1,0,1"))
                        (rule "polySimp_rightDist" (formula "5") (term "1,1,0,0,1,0,1"))
                        (rule "polySimp_mulLiterals" (formula "5") (term "1,1,1,0,0,1,0,1"))
                        (rule "mul_literals" (formula "5") (term "0,1,1,0,0,1,0,1"))
                        (rule "polySimp_elimOne" (formula "5") (term "1,1,1,0,0,1,0,1"))
                        (rule "inEqSimp_notGeq" (formula "5") (term "0,0,0,1,0,1"))
                        (rule "polySimp_mulComm0" (formula "5") (term "1,0,0,0,0,0,1,0,1"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "5") (term "0,0,0,1,0,1"))
                        (rule "polySimp_mulComm0" (formula "5") (term "1,0,0,0,1,0,1"))
                        (rule "polySimp_rightDist" (formula "5") (term "1,0,0,0,1,0,1"))
                        (rule "polySimp_mulLiterals" (formula "5") (term "1,1,0,0,0,1,0,1"))
                        (rule "mul_literals" (formula "5") (term "0,1,0,0,0,1,0,1"))
                        (rule "polySimp_elimOne" (formula "5") (term "1,1,0,0,0,1,0,1"))
                        (rule "Definition_axiom_for_isSortedSlice_in_de_wiesler_Functions" (formula "5") (term "0,0") (inst "i=i"))
                         (builtin "One Step Simplification" (formula "5"))
                        (rule "translateJavaSubInt" (formula "5") (term "1,1,0,0,0"))
                        (rule "translateJavaAddInt" (formula "5") (term "0,2,1,1,0,0"))
                        (rule "polySimp_elimSub" (formula "5") (term "1,1,0,0,0"))
                        (rule "mul_literals" (formula "5") (term "1,1,1,0,0,0"))
                        (rule "polySimp_addComm0" (formula "5") (term "0,2,1,1,0,0"))
                        (rule "polySimp_addComm1" (formula "5") (term "1,1,0,0,0"))
                        (rule "add_literals" (formula "5") (term "0,1,1,0,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "5") (term "1,0,0,0"))
                        (rule "polySimp_rightDist" (formula "5") (term "1,0,0,1,0,0,0"))
                        (rule "mul_literals" (formula "5") (term "0,1,0,0,1,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "5") (term "0,0,1,0,0,0"))
                        (rule "add_literals" (formula "5") (term "0,0,0,1,0,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "5") (term "0,0,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "5") (term "1,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "5") (term "1,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "5") (term "1,1,0,0,0"))
                        (rule "polySimp_rightDist" (formula "5") (term "1,1,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "5") (term "1,1,1,0,0,0"))
                        (rule "mul_literals" (formula "5") (term "0,1,1,0,0,0"))
                        (rule "polySimp_elimOne" (formula "5") (term "1,1,1,0,0,0"))
                        (rule "nnf_imp2or" (formula "5") (term "0,0"))
                        (rule "nnf_notAnd" (formula "5") (term "0,0,0"))
                        (rule "inEqSimp_notGeq" (formula "5") (term "0,0,0,0"))
                        (rule "times_zero_1" (formula "5") (term "1,0,0,0,0,0,0"))
                        (rule "add_zero_right" (formula "5") (term "0,0,0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "5") (term "0,0,0,0"))
                        (rule "mul_literals" (formula "5") (term "1,0,0,0,0"))
                        (rule "inEqSimp_notLeq" (formula "5") (term "1,0,0,0"))
                        (rule "polySimp_rightDist" (formula "5") (term "1,0,0,1,0,0,0"))
                        (rule "mul_literals" (formula "5") (term "0,1,0,0,1,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "5") (term "0,0,1,0,0,0"))
                        (rule "add_literals" (formula "5") (term "0,0,0,1,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "5") (term "1,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "5") (term "1,1,0,0,0"))
                        (rule "polySimp_rightDist" (formula "5") (term "1,1,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "5") (term "1,1,1,0,0,0"))
                        (rule "mul_literals" (formula "5") (term "0,1,1,0,0,0"))
                        (rule "polySimp_elimOne" (formula "5") (term "1,1,1,0,0,0"))
                        (rule "commute_or" (formula "6") (term "0,0,1,0,0"))
                        (rule "commute_or" (formula "30") (term "0"))
                        (rule "commute_or" (formula "5") (term "0,0,1,0,1"))
                        (rule "onlyCreatedObjectsAreReferencedFinal" (formula "20") (term "0,0") (ifseqformula "7") (ifseqformula "9"))
                        (rule "replace_known_right" (formula "20") (term "0") (ifseqformula "35"))
                         (builtin "One Step Simplification" (formula "20") (ifInst ""  (formula "34")))
                        (rule "closeFalse" (formula "20"))
                     )
                  )
                  (branch "self.equal_buckets = TRUE FALSE"
                     (rule "applyEq" (formula "19") (term "0") (ifseqformula "9"))
                     (rule "inEqSimp_commuteLeq" (formula "19"))
                     (rule "applyEq" (formula "21") (term "1,1,1,0,0") (ifseqformula "9"))
                     (rule "applyEq" (formula "1") (term "1,3,0,0") (ifseqformula "9"))
                     (rule "applyEq" (formula "21") (term "1,1,1,0,0,1,0") (ifseqformula "9"))
                     (rule "applyEq" (formula "30") (term "1,1,1,0,0,0") (ifseqformula "9"))
                     (rule "applyEq" (formula "22") (term "1,1,0,0") (ifseqformula "9"))
                     (rule "applyEq" (formula "18") (term "1") (ifseqformula "9"))
                     (rule "applyEq" (formula "12") (term "1,0,2,0") (ifseqformula "9"))
                     (rule "eqSymm" (formula "12"))
                     (rule "applyEq" (formula "30") (term "1,1,0,0,1") (ifseqformula "9"))
                     (rule "applyEq" (formula "23") (term "1,1,0,0") (ifseqformula "9"))
                     (rule "applyEq" (formula "30") (term "1,1,1,0,0,1,0,0") (ifseqformula "9"))
                     (rule "applyEq" (formula "11") (term "1,1,0,0") (ifseqformula "9"))
                     (rule "applyEq" (formula "1") (term "1,3,0,1") (ifseqformula "9"))
                     (rule "applyEq" (formula "20") (term "1,1,1,0,0") (ifseqformula "9"))
                     (rule "applyEq" (formula "11") (term "1,1,0,0,1,0") (ifseqformula "9"))
                     (rule "applyEq" (formula "17") (term "0") (ifseqformula "9"))
                     (rule "applyEq" (formula "12") (term "1,0,2,0") (ifseqformula "9"))
                     (rule "eqSymm" (formula "12"))
                     (rule "applyEq" (formula "15") (term "1") (ifseqformula "9"))
                     (rule "applyEq" (formula "21") (term "0,1,0,0,1,1,1,0") (ifseqformula "9"))
                     (rule "arrayLengthIsAShort" (formula "17") (term "0"))
                      (builtin "One Step Simplification" (formula "17"))
                     (rule "true_left" (formula "17"))
                     (rule "arrayLengthNotNegative" (formula "17") (term "0"))
                     (rule "arrayLengthIsAShort" (formula "16") (term "0"))
                      (builtin "One Step Simplification" (formula "16"))
                     (rule "true_left" (formula "16"))
                     (rule "arrayLengthNotNegative" (formula "16") (term "0"))
                     (rule "inEqSimp_subsumption1" (formula "16") (ifseqformula "17"))
                     (rule "leq_literals" (formula "16") (term "0"))
                      (builtin "One Step Simplification" (formula "16"))
                     (rule "true_left" (formula "16"))
                     (rule "Definition_axiom_for_isSortedSliceTransitive_in_de_wiesler_Functions" (formula "1") (term "0,0") (inst "i=i") (inst "j=j"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "inEqSimp_ltToLeq" (formula "1") (term "1,0,0,1,0,0"))
                     (rule "polySimp_rightDist" (formula "1") (term "1,0,0,1,0,0,1,0,0"))
                     (rule "mul_literals" (formula "1") (term "0,1,0,0,1,0,0,1,0,0"))
                     (rule "polySimp_addAssoc" (formula "1") (term "0,0,1,0,0,1,0,0"))
                     (rule "add_literals" (formula "1") (term "0,0,0,1,0,0,1,0,0"))
                     (rule "inEqSimp_ltToLeq" (formula "1") (term "1,0,0,0"))
                     (rule "polySimp_rightDist" (formula "1") (term "1,0,0,1,0,0,0"))
                     (rule "mul_literals" (formula "1") (term "0,1,0,0,1,0,0,0"))
                     (rule "polySimp_addAssoc" (formula "1") (term "0,0,1,0,0,0"))
                     (rule "add_literals" (formula "1") (term "0,0,0,1,0,0,0"))
                     (rule "inEqSimp_commuteLeq" (formula "1") (term "0,0,0,0"))
                     (rule "inEqSimp_commuteLeq" (formula "1") (term "0,0,0,1,0,0"))
                     (rule "inEqSimp_commuteLeq" (formula "1") (term "1,0,1,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1,0,0,1,0,0"))
                     (rule "polySimp_mulComm0" (formula "1") (term "1,1,0,0,1,0,0"))
                     (rule "polySimp_rightDist" (formula "1") (term "1,1,0,0,1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,0,0,1,0,0"))
                     (rule "mul_literals" (formula "1") (term "0,1,1,0,0,1,0,0"))
                     (rule "polySimp_elimOne" (formula "1") (term "1,1,1,0,0,1,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1,0,0,0"))
                     (rule "polySimp_mulComm0" (formula "1") (term "1,1,0,0,0"))
                     (rule "polySimp_rightDist" (formula "1") (term "1,1,0,0,0"))
                     (rule "mul_literals" (formula "1") (term "0,1,1,0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,0,0,0"))
                     (rule "polySimp_elimOne" (formula "1") (term "1,1,1,0,0,0"))
                     (rule "nnf_imp2or" (formula "1") (term "0,0"))
                     (rule "nnf_notAnd" (formula "1") (term "0,0,0"))
                     (rule "inEqSimp_notGeq" (formula "1") (term "0,0,0,0"))
                     (rule "times_zero_1" (formula "1") (term "1,0,0,0,0,0,0"))
                     (rule "add_zero_right" (formula "1") (term "0,0,0,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "0,0,0,0"))
                     (rule "mul_literals" (formula "1") (term "1,0,0,0,0"))
                     (rule "inEqSimp_notLeq" (formula "1") (term "1,0,0,0"))
                     (rule "polySimp_rightDist" (formula "1") (term "1,0,0,1,0,0,0"))
                     (rule "mul_literals" (formula "1") (term "0,1,0,0,1,0,0,0"))
                     (rule "polySimp_addAssoc" (formula "1") (term "0,0,1,0,0,0"))
                     (rule "add_literals" (formula "1") (term "0,0,0,1,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0,0,0"))
                     (rule "polySimp_mulComm0" (formula "1") (term "1,1,0,0,0"))
                     (rule "polySimp_rightDist" (formula "1") (term "1,1,0,0,0"))
                     (rule "mul_literals" (formula "1") (term "0,1,1,0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,0,0,0"))
                     (rule "polySimp_elimOne" (formula "1") (term "1,1,1,0,0,0"))
                     (rule "nnf_imp2or" (formula "1") (term "0,1,0,0"))
                     (rule "nnf_notAnd" (formula "1") (term "0,0,1,0,0"))
                     (rule "inEqSimp_notLeq" (formula "1") (term "1,0,0,1,0,0"))
                     (rule "polySimp_rightDist" (formula "1") (term "1,0,0,1,0,0,1,0,0"))
                     (rule "mul_literals" (formula "1") (term "0,1,0,0,1,0,0,1,0,0"))
                     (rule "polySimp_addAssoc" (formula "1") (term "0,0,1,0,0,1,0,0"))
                     (rule "add_literals" (formula "1") (term "0,0,0,1,0,0,1,0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0,0,1,0,0"))
                     (rule "polySimp_mulComm0" (formula "1") (term "1,1,0,0,1,0,0"))
                     (rule "polySimp_rightDist" (formula "1") (term "1,1,0,0,1,0,0"))
                     (rule "mul_literals" (formula "1") (term "0,1,1,0,0,1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,0,0,1,0,0"))
                     (rule "polySimp_elimOne" (formula "1") (term "1,1,1,0,0,1,0,0"))
                     (rule "inEqSimp_notGeq" (formula "1") (term "0,0,0,1,0,0"))
                     (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,0,0,0,1,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "0,0,0,1,0,0"))
                     (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,0,1,0,0"))
                     (rule "polySimp_rightDist" (formula "1") (term "1,0,0,0,1,0,0"))
                     (rule "mul_literals" (formula "1") (term "0,1,0,0,0,1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0,0,1,0,0"))
                     (rule "polySimp_elimOne" (formula "1") (term "1,1,0,0,0,1,0,0"))
                     (rule "Contract_axiom_for_isSortedSlice_in_Functions" (formula "1") (term "0,1"))
                     (rule "wellFormedAnon" (formula "1") (term "1,0"))
                     (rule "replace_known_right" (formula "1") (term "0,0,0") (ifseqformula "29"))
                      (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "3")) (ifInst ""  (formula "4")))
                     (rule "Definition_axiom_for_isSortedSlice_in_de_wiesler_Functions" (formula "2") (term "0,1") (inst "i=i"))
                      (builtin "One Step Simplification" (formula "2"))
                     (rule "translateJavaAddInt" (formula "2") (term "0,2,1,1,0,1"))
                     (rule "translateJavaSubInt" (formula "2") (term "1,1,0,0,1"))
                     (rule "polySimp_elimSub" (formula "2") (term "1,1,0,0,1"))
                     (rule "mul_literals" (formula "2") (term "1,1,1,0,0,1"))
                     (rule "polySimp_addComm0" (formula "2") (term "0,2,1,1,0,1"))
                     (rule "polySimp_addComm1" (formula "2") (term "1,1,0,0,1"))
                     (rule "add_literals" (formula "2") (term "0,1,1,0,0,1"))
                     (rule "inEqSimp_ltToLeq" (formula "2") (term "1,0,0,1"))
                     (rule "polySimp_rightDist" (formula "2") (term "1,0,0,1,0,0,1"))
                     (rule "mul_literals" (formula "2") (term "0,1,0,0,1,0,0,1"))
                     (rule "polySimp_addAssoc" (formula "2") (term "0,0,1,0,0,1"))
                     (rule "add_literals" (formula "2") (term "0,0,0,1,0,0,1"))
                     (rule "inEqSimp_commuteLeq" (formula "2") (term "0,0,0,1"))
                     (rule "inEqSimp_commuteLeq" (formula "2") (term "1,0,1"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "2") (term "1,0,0,1"))
                     (rule "polySimp_mulComm0" (formula "2") (term "1,1,0,0,1"))
                     (rule "polySimp_rightDist" (formula "2") (term "1,1,0,0,1"))
                     (rule "mul_literals" (formula "2") (term "0,1,1,0,0,1"))
                     (rule "polySimp_mulLiterals" (formula "2") (term "1,1,1,0,0,1"))
                     (rule "polySimp_elimOne" (formula "2") (term "1,1,1,0,0,1"))
                     (rule "nnf_imp2or" (formula "2") (term "0,1"))
                     (rule "nnf_notAnd" (formula "2") (term "0,0,1"))
                     (rule "inEqSimp_notGeq" (formula "2") (term "0,0,0,1"))
                     (rule "times_zero_1" (formula "2") (term "1,0,0,0,0,0,1"))
                     (rule "add_zero_right" (formula "2") (term "0,0,0,0,0,1"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "2") (term "0,0,0,1"))
                     (rule "mul_literals" (formula "2") (term "1,0,0,0,1"))
                     (rule "inEqSimp_notLeq" (formula "2") (term "1,0,0,1"))
                     (rule "polySimp_rightDist" (formula "2") (term "1,0,0,1,0,0,1"))
                     (rule "mul_literals" (formula "2") (term "0,1,0,0,1,0,0,1"))
                     (rule "polySimp_addAssoc" (formula "2") (term "0,0,1,0,0,1"))
                     (rule "add_literals" (formula "2") (term "0,0,0,1,0,0,1"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "2") (term "1,0,0,1"))
                     (rule "polySimp_mulComm0" (formula "2") (term "1,1,0,0,1"))
                     (rule "polySimp_rightDist" (formula "2") (term "1,1,0,0,1"))
                     (rule "polySimp_mulLiterals" (formula "2") (term "1,1,1,0,0,1"))
                     (rule "mul_literals" (formula "2") (term "0,1,1,0,0,1"))
                     (rule "polySimp_elimOne" (formula "2") (term "1,1,1,0,0,1"))
                     (rule "commute_or" (formula "22") (term "0,0,1,0"))
                     (rule "cnf_rightDist" (formula "23") (term "0"))
                     (rule "distr_forallAnd" (formula "23"))
                     (rule "andLeft" (formula "23"))
                     (rule "andRight" (formula "32"))
                     (branch "Case 1"
                        (rule "allRight" (formula "32") (inst "sk=i_0"))
                        (rule "orRight" (formula "32"))
                        (rule "orRight" (formula "32"))
                        (rule "allRight" (formula "34") (inst "sk=j_0"))
                        (rule "orRight" (formula "34"))
                        (rule "orRight" (formula "34"))
                        (rule "inEqSimp_geqRight" (formula "33"))
                        (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                        (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                        (rule "add_literals" (formula "1") (term "0,0,0"))
                        (rule "polySimp_addComm1" (formula "1") (term "0"))
                        (rule "inEqSimp_leqRight" (formula "33"))
                        (rule "mul_literals" (formula "1") (term "1,0,0"))
                        (rule "add_literals" (formula "1") (term "0,0"))
                        (rule "add_zero_left" (formula "1") (term "0"))
                        (rule "inEqSimp_geqRight" (formula "36"))
                        (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                        (rule "inEqSimp_geqRight" (formula "36"))
                        (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                        (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                        (rule "add_literals" (formula "1") (term "0,0,0"))
                        (rule "polySimp_addComm1" (formula "1") (term "0"))
                        (rule "inEqSimp_leqRight" (formula "36"))
                        (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                        (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                        (rule "add_literals" (formula "1") (term "0,0,0"))
                        (rule "add_zero_left" (formula "1") (term "0,0"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "5"))
                        (rule "polySimp_mulLiterals" (formula "5") (term "0"))
                        (rule "polySimp_elimOne" (formula "5") (term "0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "3"))
                        (rule "polySimp_mulComm0" (formula "3") (term "1"))
                        (rule "polySimp_rightDist" (formula "3") (term "1"))
                        (rule "mul_literals" (formula "3") (term "0,1"))
                        (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
                        (rule "polySimp_elimOne" (formula "3") (term "1,1"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                        (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                        (rule "polySimp_elimOne" (formula "2") (term "0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "1"))
                        (rule "polySimp_elimOne" (formula "1") (term "1"))
                        (rule "pullOutSelect" (formula "3") (term "0") (inst "selectSK=arr_0"))
                        (rule "simplifySelectOfAnon" (formula "3"))
                         (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "36")))
                        (rule "inEqSimp_homoInEq0" (formula "4"))
                        (rule "polySimp_addComm1" (formula "4") (term "0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "4"))
                        (rule "polySimp_mulComm0" (formula "4") (term "1"))
                        (rule "polySimp_rightDist" (formula "4") (term "1"))
                        (rule "mul_literals" (formula "4") (term "0,1"))
                        (rule "polySimp_mulLiterals" (formula "4") (term "1,1"))
                        (rule "polySimp_elimOne" (formula "4") (term "1,1"))
                        (rule "elementOfSetMinus" (formula "3") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "3"))
                        (rule "elementOfUnion" (formula "3") (term "0,0,0,0"))
                         (builtin "One Step Simplification" (formula "3"))
                        (rule "ifthenelse_negated" (formula "3") (term "0"))
                        (rule "inEqSimp_exactShadow3" (formula "6") (ifseqformula "15"))
                        (rule "polySimp_rightDist" (formula "6") (term "0,0"))
                        (rule "mul_literals" (formula "6") (term "0,0,0"))
                        (rule "polySimp_addComm1" (formula "6") (term "0"))
                        (rule "add_literals" (formula "6") (term "0,0"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "6"))
                        (rule "polySimp_mulLiterals" (formula "6") (term "0"))
                        (rule "polySimp_elimOne" (formula "6") (term "0"))
                        (rule "pullOutSelect" (formula "4") (term "0") (inst "selectSK=arr_1"))
                        (rule "simplifySelectOfAnon" (formula "4"))
                         (builtin "One Step Simplification" (formula "4") (ifInst ""  (formula "38")))
                        (rule "elementOfSetMinus" (formula "4") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "4"))
                        (rule "elementOfUnion" (formula "4") (term "0,0,0,0"))
                         (builtin "One Step Simplification" (formula "4"))
                        (rule "ifthenelse_negated" (formula "4") (term "0"))
                        (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "17"))
                        (rule "polySimp_rightDist" (formula "2") (term "0,0"))
                        (rule "mul_literals" (formula "2") (term "0,0,0"))
                        (rule "polySimp_addComm1" (formula "2") (term "0"))
                        (rule "add_literals" (formula "2") (term "0,0"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "2"))
                        (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                        (rule "polySimp_elimOne" (formula "2") (term "0"))
                        (rule "inEqSimp_exactShadow3" (formula "1") (ifseqformula "2"))
                        (rule "polySimp_mulComm0" (formula "1") (term "0,0"))
                        (rule "polySimp_addComm0" (formula "1") (term "0"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "1"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                        (rule "polySimp_elimOne" (formula "1") (term "0"))
                        (rule "commute_or" (formula "21") (term "0,0,1,0"))
                        (rule "Contract_axiom_for_isSortedSlice_in_Functions" (formula "10") (term "0,0"))
                        (rule "wellFormedAnon" (formula "10") (term "1,0"))
                        (rule "replace_known_right" (formula "10") (term "0,0,0") (ifseqformula "40"))
                         (builtin "One Step Simplification" (formula "10") (ifInst ""  (formula "13")) (ifInst ""  (formula "14")) (ifInst ""  (formula "11")))
                        (rule "true_left" (formula "10"))
                        (rule "Definition_axiom_for_isSortedSlice_in_de_wiesler_Functions" (formula "10") (term "0,0") (inst "i=i"))
                         (builtin "One Step Simplification" (formula "10"))
                        (rule "translateJavaAddInt" (formula "10") (term "0,2,1,1,0,0"))
                        (rule "translateJavaSubInt" (formula "10") (term "1,1,0,0,0"))
                        (rule "polySimp_elimSub" (formula "10") (term "1,1,0,0,0"))
                        (rule "mul_literals" (formula "10") (term "1,1,1,0,0,0"))
                        (rule "polySimp_addComm0" (formula "10") (term "0,2,1,1,0,0"))
                        (rule "polySimp_addComm1" (formula "10") (term "1,1,0,0,0"))
                        (rule "add_literals" (formula "10") (term "0,1,1,0,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "10") (term "1,0,0,0"))
                        (rule "polySimp_rightDist" (formula "10") (term "1,0,0,1,0,0,0"))
                        (rule "mul_literals" (formula "10") (term "0,1,0,0,1,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "10") (term "0,0,1,0,0,0"))
                        (rule "add_literals" (formula "10") (term "0,0,0,1,0,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "10") (term "0,0,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "10") (term "1,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "1,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "10") (term "1,1,0,0,0"))
                        (rule "polySimp_rightDist" (formula "10") (term "1,1,0,0,0"))
                        (rule "mul_literals" (formula "10") (term "0,1,1,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "10") (term "1,1,1,0,0,0"))
                        (rule "polySimp_elimOne" (formula "10") (term "1,1,1,0,0,0"))
                        (rule "nnf_imp2or" (formula "10") (term "0,0"))
                        (rule "nnf_notAnd" (formula "10") (term "0,0,0"))
                        (rule "inEqSimp_notGeq" (formula "10") (term "0,0,0,0"))
                        (rule "times_zero_1" (formula "10") (term "1,0,0,0,0,0,0"))
                        (rule "add_zero_right" (formula "10") (term "0,0,0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "0,0,0,0"))
                        (rule "mul_literals" (formula "10") (term "1,0,0,0,0"))
                        (rule "inEqSimp_notLeq" (formula "10") (term "1,0,0,0"))
                        (rule "polySimp_rightDist" (formula "10") (term "1,0,0,1,0,0,0"))
                        (rule "mul_literals" (formula "10") (term "0,1,0,0,1,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "10") (term "0,0,1,0,0,0"))
                        (rule "add_literals" (formula "10") (term "0,0,0,1,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "10") (term "1,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "10") (term "1,1,0,0,0"))
                        (rule "polySimp_rightDist" (formula "10") (term "1,1,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "10") (term "1,1,1,0,0,0"))
                        (rule "mul_literals" (formula "10") (term "0,1,1,0,0,0"))
                        (rule "polySimp_elimOne" (formula "10") (term "1,1,1,0,0,0"))
                        (rule "commute_or" (formula "33") (term "0"))
                        (rule "commute_or" (formula "11") (term "0,0,1,0,0"))
                        (rule "Contract_axiom_for_isSortedSliceTransitive_in_Functions" (formula "10") (term "0,1"))
                        (rule "wellFormedAnon" (formula "10") (term "1,0"))
                        (rule "replace_known_right" (formula "10") (term "0,0,0") (ifseqformula "40"))
                         (builtin "One Step Simplification" (formula "10") (ifInst ""  (formula "13")) (ifInst ""  (formula "14")))
                        (rule "Definition_axiom_for_isSortedSliceTransitive_in_de_wiesler_Functions" (formula "11") (term "0,1") (inst "i=i") (inst "j=j"))
                         (builtin "One Step Simplification" (formula "11"))
                        (rule "inEqSimp_ltToLeq" (formula "11") (term "1,0,0,1"))
                        (rule "polySimp_rightDist" (formula "11") (term "1,0,0,1,0,0,1"))
                        (rule "mul_literals" (formula "11") (term "0,1,0,0,1,0,0,1"))
                        (rule "polySimp_addAssoc" (formula "11") (term "0,0,1,0,0,1"))
                        (rule "add_literals" (formula "11") (term "0,0,0,1,0,0,1"))
                        (rule "inEqSimp_ltToLeq" (formula "11") (term "1,0,0,1,0,1"))
                        (rule "polySimp_rightDist" (formula "11") (term "1,0,0,1,0,0,1,0,1"))
                        (rule "mul_literals" (formula "11") (term "0,1,0,0,1,0,0,1,0,1"))
                        (rule "polySimp_addAssoc" (formula "11") (term "0,0,1,0,0,1,0,1"))
                        (rule "add_literals" (formula "11") (term "0,0,0,1,0,0,1,0,1"))
                        (rule "inEqSimp_commuteLeq" (formula "11") (term "0,0,0,1"))
                        (rule "inEqSimp_commuteLeq" (formula "11") (term "0,0,0,1,0,1"))
                        (rule "inEqSimp_commuteLeq" (formula "11") (term "1,0,1,0,1"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "1,0,0,1"))
                        (rule "polySimp_mulComm0" (formula "11") (term "1,1,0,0,1"))
                        (rule "polySimp_rightDist" (formula "11") (term "1,1,0,0,1"))
                        (rule "mul_literals" (formula "11") (term "0,1,1,0,0,1"))
                        (rule "polySimp_mulLiterals" (formula "11") (term "1,1,1,0,0,1"))
                        (rule "polySimp_elimOne" (formula "11") (term "1,1,1,0,0,1"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "1,0,0,1,0,1"))
                        (rule "polySimp_mulComm0" (formula "11") (term "1,1,0,0,1,0,1"))
                        (rule "polySimp_rightDist" (formula "11") (term "1,1,0,0,1,0,1"))
                        (rule "mul_literals" (formula "11") (term "0,1,1,0,0,1,0,1"))
                        (rule "polySimp_mulLiterals" (formula "11") (term "1,1,1,0,0,1,0,1"))
                        (rule "polySimp_elimOne" (formula "11") (term "1,1,1,0,0,1,0,1"))
                        (rule "nnf_imp2or" (formula "11") (term "0,1"))
                        (rule "nnf_notAnd" (formula "11") (term "0,0,1"))
                        (rule "inEqSimp_notLeq" (formula "11") (term "1,0,0,1"))
                        (rule "polySimp_rightDist" (formula "11") (term "1,0,0,1,0,0,1"))
                        (rule "mul_literals" (formula "11") (term "0,1,0,0,1,0,0,1"))
                        (rule "polySimp_addAssoc" (formula "11") (term "0,0,1,0,0,1"))
                        (rule "add_literals" (formula "11") (term "0,0,0,1,0,0,1"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "11") (term "1,0,0,1"))
                        (rule "polySimp_mulComm0" (formula "11") (term "1,1,0,0,1"))
                        (rule "polySimp_rightDist" (formula "11") (term "1,1,0,0,1"))
                        (rule "polySimp_mulLiterals" (formula "11") (term "1,1,1,0,0,1"))
                        (rule "mul_literals" (formula "11") (term "0,1,1,0,0,1"))
                        (rule "polySimp_elimOne" (formula "11") (term "1,1,1,0,0,1"))
                        (rule "inEqSimp_notGeq" (formula "11") (term "0,0,0,1"))
                        (rule "times_zero_1" (formula "11") (term "1,0,0,0,0,0,1"))
                        (rule "add_zero_right" (formula "11") (term "0,0,0,0,0,1"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,0,0,1"))
                        (rule "mul_literals" (formula "11") (term "1,0,0,0,1"))
                        (rule "nnf_imp2or" (formula "11") (term "0,1,0,1"))
                        (rule "nnf_notAnd" (formula "11") (term "0,0,1,0,1"))
                        (rule "inEqSimp_notLeq" (formula "11") (term "1,0,0,1,0,1"))
                        (rule "polySimp_rightDist" (formula "11") (term "1,0,0,1,0,0,1,0,1"))
                        (rule "mul_literals" (formula "11") (term "0,1,0,0,1,0,0,1,0,1"))
                        (rule "polySimp_addAssoc" (formula "11") (term "0,0,1,0,0,1,0,1"))
                        (rule "add_literals" (formula "11") (term "0,0,0,1,0,0,1,0,1"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "11") (term "1,0,0,1,0,1"))
                        (rule "polySimp_mulComm0" (formula "11") (term "1,1,0,0,1,0,1"))
                        (rule "polySimp_rightDist" (formula "11") (term "1,1,0,0,1,0,1"))
                        (rule "mul_literals" (formula "11") (term "0,1,1,0,0,1,0,1"))
                        (rule "polySimp_mulLiterals" (formula "11") (term "1,1,1,0,0,1,0,1"))
                        (rule "polySimp_elimOne" (formula "11") (term "1,1,1,0,0,1,0,1"))
                        (rule "inEqSimp_notGeq" (formula "11") (term "0,0,0,1,0,1"))
                        (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0,0,0,1,0,1"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,0,0,1,0,1"))
                        (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0,1,0,1"))
                        (rule "polySimp_rightDist" (formula "11") (term "1,0,0,0,1,0,1"))
                        (rule "mul_literals" (formula "11") (term "0,1,0,0,0,1,0,1"))
                        (rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,0,0,1,0,1"))
                        (rule "polySimp_elimOne" (formula "11") (term "1,1,0,0,0,1,0,1"))
                        (rule "Contract_axiom_for_isSortedSliceTransitive_in_Functions" (formula "10") (term "0,0"))
                        (rule "wellFormedAnon" (formula "10") (term "1,0"))
                        (rule "replace_known_left" (formula "10") (term "1") (ifseqformula "11"))
                         (builtin "One Step Simplification" (formula "10") (ifInst ""  (formula "41")) (ifInst ""  (formula "14")) (ifInst ""  (formula "15")))
                        (rule "true_left" (formula "10"))
                        (rule "Contract_axiom_for_isSortedSlice_in_Functions" (formula "10") (term "0,1"))
                        (rule "wellFormedAnon" (formula "10") (term "1,0"))
                        (rule "replace_known_left" (formula "10") (term "1,1,0") (ifseqformula "15"))
                         (builtin "One Step Simplification" (formula "10") (ifInst ""  (formula "41")) (ifInst ""  (formula "14")))
                        (rule "Definition_axiom_for_isSortedSliceTransitive_in_de_wiesler_Functions" (formula "11") (term "0,0") (inst "i=i") (inst "j=j"))
                         (builtin "One Step Simplification" (formula "11"))
                        (rule "inEqSimp_ltToLeq" (formula "11") (term "1,0,0,0"))
                        (rule "polySimp_rightDist" (formula "11") (term "1,0,0,1,0,0,0"))
                        (rule "mul_literals" (formula "11") (term "0,1,0,0,1,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "11") (term "0,0,1,0,0,0"))
                        (rule "add_literals" (formula "11") (term "0,0,0,1,0,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "11") (term "1,0,0,1,0,0"))
                        (rule "polySimp_rightDist" (formula "11") (term "1,0,0,1,0,0,1,0,0"))
                        (rule "mul_literals" (formula "11") (term "0,1,0,0,1,0,0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "11") (term "0,0,1,0,0,1,0,0"))
                        (rule "add_literals" (formula "11") (term "0,0,0,1,0,0,1,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "11") (term "1,0,1,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "11") (term "0,0,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "11") (term "0,0,0,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "1,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "11") (term "1,1,0,0,0"))
                        (rule "polySimp_rightDist" (formula "11") (term "1,1,0,0,0"))
                        (rule "mul_literals" (formula "11") (term "0,1,1,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "11") (term "1,1,1,0,0,0"))
                        (rule "polySimp_elimOne" (formula "11") (term "1,1,1,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "1,0,0,1,0,0"))
                        (rule "polySimp_mulComm0" (formula "11") (term "1,1,0,0,1,0,0"))
                        (rule "polySimp_rightDist" (formula "11") (term "1,1,0,0,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "11") (term "1,1,1,0,0,1,0,0"))
                        (rule "mul_literals" (formula "11") (term "0,1,1,0,0,1,0,0"))
                        (rule "polySimp_elimOne" (formula "11") (term "1,1,1,0,0,1,0,0"))
                        (rule "nnf_imp2or" (formula "11") (term "0,0"))
                        (rule "nnf_notAnd" (formula "11") (term "0,0,0"))
                        (rule "inEqSimp_notLeq" (formula "11") (term "1,0,0,0"))
                        (rule "polySimp_rightDist" (formula "11") (term "1,0,0,1,0,0,0"))
                        (rule "mul_literals" (formula "11") (term "0,1,0,0,1,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "11") (term "0,0,1,0,0,0"))
                        (rule "add_literals" (formula "11") (term "0,0,0,1,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "11") (term "1,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "11") (term "1,1,0,0,0"))
                        (rule "polySimp_rightDist" (formula "11") (term "1,1,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "11") (term "1,1,1,0,0,0"))
                        (rule "mul_literals" (formula "11") (term "0,1,1,0,0,0"))
                        (rule "polySimp_elimOne" (formula "11") (term "1,1,1,0,0,0"))
                        (rule "inEqSimp_notGeq" (formula "11") (term "0,0,0,0"))
                        (rule "times_zero_1" (formula "11") (term "1,0,0,0,0,0,0"))
                        (rule "add_zero_right" (formula "11") (term "0,0,0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,0,0,0"))
                        (rule "mul_literals" (formula "11") (term "1,0,0,0,0"))
                        (rule "nnf_imp2or" (formula "11") (term "0,1,0,0"))
                        (rule "nnf_notAnd" (formula "11") (term "0,0,1,0,0"))
                        (rule "inEqSimp_notLeq" (formula "11") (term "1,0,0,1,0,0"))
                        (rule "polySimp_rightDist" (formula "11") (term "1,0,0,1,0,0,1,0,0"))
                        (rule "mul_literals" (formula "11") (term "0,1,0,0,1,0,0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "11") (term "0,0,1,0,0,1,0,0"))
                        (rule "add_literals" (formula "11") (term "0,0,0,1,0,0,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "11") (term "1,0,0,1,0,0"))
                        (rule "polySimp_mulComm0" (formula "11") (term "1,1,0,0,1,0,0"))
                        (rule "polySimp_rightDist" (formula "11") (term "1,1,0,0,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "11") (term "1,1,1,0,0,1,0,0"))
                        (rule "mul_literals" (formula "11") (term "0,1,1,0,0,1,0,0"))
                        (rule "polySimp_elimOne" (formula "11") (term "1,1,1,0,0,1,0,0"))
                        (rule "inEqSimp_notGeq" (formula "11") (term "0,0,0,1,0,0"))
                        (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0,0,0,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,0,0,1,0,0"))
                        (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0,1,0,0"))
                        (rule "polySimp_rightDist" (formula "11") (term "1,0,0,0,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,0,0,1,0,0"))
                        (rule "mul_literals" (formula "11") (term "0,1,0,0,0,1,0,0"))
                        (rule "polySimp_elimOne" (formula "11") (term "1,1,0,0,0,1,0,0"))
                        (rule "Definition_axiom_for_isSortedSlice_in_de_wiesler_Functions" (formula "10") (term "0,0") (inst "i=i"))
                         (builtin "One Step Simplification" (formula "10"))
                        (rule "translateJavaAddInt" (formula "10") (term "0,2,1,1,0,0"))
                        (rule "translateJavaSubInt" (formula "10") (term "1,1,0,0,0"))
                        (rule "polySimp_elimSub" (formula "10") (term "1,1,0,0,0"))
                        (rule "mul_literals" (formula "10") (term "1,1,1,0,0,0"))
                        (rule "polySimp_addComm0" (formula "10") (term "0,2,1,1,0,0"))
                        (rule "polySimp_addComm1" (formula "10") (term "1,1,0,0,0"))
                        (rule "add_literals" (formula "10") (term "0,1,1,0,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "10") (term "1,0,0,0"))
                        (rule "polySimp_rightDist" (formula "10") (term "1,0,0,1,0,0,0"))
                        (rule "mul_literals" (formula "10") (term "0,1,0,0,1,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "10") (term "0,0,1,0,0,0"))
                        (rule "add_literals" (formula "10") (term "0,0,0,1,0,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "10") (term "0,0,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "10") (term "1,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "1,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "10") (term "1,1,0,0,0"))
                        (rule "polySimp_rightDist" (formula "10") (term "1,1,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "10") (term "1,1,1,0,0,0"))
                        (rule "mul_literals" (formula "10") (term "0,1,1,0,0,0"))
                        (rule "polySimp_elimOne" (formula "10") (term "1,1,1,0,0,0"))
                        (rule "nnf_imp2or" (formula "10") (term "0,0"))
                        (rule "nnf_notAnd" (formula "10") (term "0,0,0"))
                        (rule "inEqSimp_notLeq" (formula "10") (term "1,0,0,0"))
                        (rule "polySimp_rightDist" (formula "10") (term "1,0,0,1,0,0,0"))
                        (rule "mul_literals" (formula "10") (term "0,1,0,0,1,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "10") (term "0,0,1,0,0,0"))
                        (rule "add_literals" (formula "10") (term "0,0,0,1,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "10") (term "1,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "10") (term "1,1,0,0,0"))
                        (rule "polySimp_rightDist" (formula "10") (term "1,1,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "10") (term "1,1,1,0,0,0"))
                        (rule "mul_literals" (formula "10") (term "0,1,1,0,0,0"))
                        (rule "polySimp_elimOne" (formula "10") (term "1,1,1,0,0,0"))
                        (rule "inEqSimp_notGeq" (formula "10") (term "0,0,0,0"))
                        (rule "times_zero_1" (formula "10") (term "1,0,0,0,0,0,0"))
                        (rule "add_zero_right" (formula "10") (term "0,0,0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "0,0,0,0"))
                        (rule "mul_literals" (formula "10") (term "1,0,0,0,0"))
                        (rule "Definition_axiom_for_isSortedSlice_in_de_wiesler_Functions" (formula "11") (term "0,1") (inst "i=i"))
                         (builtin "One Step Simplification" (formula "11"))
                        (rule "translateJavaAddInt" (formula "11") (term "0,2,1,1,0,1"))
                        (rule "translateJavaSubInt" (formula "11") (term "1,1,0,0,1"))
                        (rule "polySimp_elimSub" (formula "11") (term "1,1,0,0,1"))
                        (rule "mul_literals" (formula "11") (term "1,1,1,0,0,1"))
                        (rule "polySimp_addComm0" (formula "11") (term "0,2,1,1,0,1"))
                        (rule "polySimp_addComm1" (formula "11") (term "1,1,0,0,1"))
                        (rule "add_literals" (formula "11") (term "0,1,1,0,0,1"))
                        (rule "inEqSimp_ltToLeq" (formula "11") (term "1,0,0,1"))
                        (rule "polySimp_rightDist" (formula "11") (term "1,0,0,1,0,0,1"))
                        (rule "mul_literals" (formula "11") (term "0,1,0,0,1,0,0,1"))
                        (rule "polySimp_addAssoc" (formula "11") (term "0,0,1,0,0,1"))
                        (rule "add_literals" (formula "11") (term "0,0,0,1,0,0,1"))
                        (rule "inEqSimp_commuteLeq" (formula "11") (term "0,0,0,1"))
                        (rule "inEqSimp_commuteLeq" (formula "11") (term "1,0,1"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "1,0,0,1"))
                        (rule "polySimp_mulComm0" (formula "11") (term "1,1,0,0,1"))
                        (rule "polySimp_rightDist" (formula "11") (term "1,1,0,0,1"))
                        (rule "mul_literals" (formula "11") (term "0,1,1,0,0,1"))
                        (rule "polySimp_mulLiterals" (formula "11") (term "1,1,1,0,0,1"))
                        (rule "polySimp_elimOne" (formula "11") (term "1,1,1,0,0,1"))
                        (rule "nnf_imp2or" (formula "11") (term "0,1"))
                        (rule "nnf_notAnd" (formula "11") (term "0,0,1"))
                        (rule "inEqSimp_notLeq" (formula "11") (term "1,0,0,1"))
                        (rule "polySimp_rightDist" (formula "11") (term "1,0,0,1,0,0,1"))
                        (rule "mul_literals" (formula "11") (term "0,1,0,0,1,0,0,1"))
                        (rule "polySimp_addAssoc" (formula "11") (term "0,0,1,0,0,1"))
                        (rule "add_literals" (formula "11") (term "0,0,0,1,0,0,1"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "11") (term "1,0,0,1"))
                        (rule "polySimp_mulComm0" (formula "11") (term "1,1,0,0,1"))
                        (rule "polySimp_rightDist" (formula "11") (term "1,1,0,0,1"))
                        (rule "polySimp_mulLiterals" (formula "11") (term "1,1,1,0,0,1"))
                        (rule "mul_literals" (formula "11") (term "0,1,1,0,0,1"))
                        (rule "polySimp_elimOne" (formula "11") (term "1,1,1,0,0,1"))
                        (rule "inEqSimp_notGeq" (formula "11") (term "0,0,0,1"))
                        (rule "times_zero_1" (formula "11") (term "1,0,0,0,0,0,1"))
                        (rule "add_zero_right" (formula "11") (term "0,0,0,0,0,1"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,0,0,1"))
                        (rule "mul_literals" (formula "11") (term "1,0,0,0,1"))
                        (rule "impLeft" (formula "13"))
                        (branch "Case 1"
                           (rule "allRight" (formula "36") (inst "sk=i_1"))
                           (rule "orRight" (formula "36"))
                           (rule "orRight" (formula "36"))
                           (rule "allRight" (formula "38") (inst "sk=j_1"))
                           (rule "orRight" (formula "38"))
                           (rule "orRight" (formula "38"))
                           (rule "inEqSimp_geqRight" (formula "37"))
                           (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                           (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                           (rule "add_literals" (formula "1") (term "0,0,0"))
                           (rule "polySimp_addComm1" (formula "1") (term "0"))
                           (rule "inEqSimp_leqRight" (formula "37"))
                           (rule "mul_literals" (formula "1") (term "1,0,0"))
                           (rule "add_literals" (formula "1") (term "0,0"))
                           (rule "add_zero_left" (formula "1") (term "0"))
                           (rule "inEqSimp_geqRight" (formula "40"))
                           (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                           (rule "inEqSimp_leqRight" (formula "40"))
                           (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                           (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                           (rule "add_literals" (formula "1") (term "0,0,0"))
                           (rule "add_zero_left" (formula "1") (term "0,0"))
                           (rule "inEqSimp_geqRight" (formula "40"))
                           (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                           (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                           (rule "add_literals" (formula "1") (term "0,0,0"))
                           (rule "polySimp_addComm1" (formula "1") (term "0"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "5"))
                           (rule "polySimp_mulLiterals" (formula "5") (term "0"))
                           (rule "polySimp_elimOne" (formula "5") (term "0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "3"))
                           (rule "polySimp_mulComm0" (formula "3") (term "1"))
                           (rule "polySimp_rightDist" (formula "3") (term "1"))
                           (rule "mul_literals" (formula "3") (term "0,1"))
                           (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
                           (rule "polySimp_elimOne" (formula "3") (term "1,1"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                           (rule "polySimp_mulLiterals" (formula "2") (term "1"))
                           (rule "polySimp_elimOne" (formula "2") (term "1"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "1"))
                           (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                           (rule "polySimp_elimOne" (formula "1") (term "0"))
                           (rule "pullOutSelect" (formula "3") (term "0") (inst "selectSK=arr_2"))
                           (rule "simplifySelectOfAnon" (formula "3"))
                            (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "46")))
                           (rule "inEqSimp_homoInEq0" (formula "4"))
                           (rule "polySimp_addComm1" (formula "4") (term "0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "4"))
                           (rule "polySimp_mulComm0" (formula "4") (term "1"))
                           (rule "polySimp_rightDist" (formula "4") (term "1"))
                           (rule "polySimp_mulLiterals" (formula "4") (term "1,1"))
                           (rule "mul_literals" (formula "4") (term "0,1"))
                           (rule "polySimp_elimOne" (formula "4") (term "1,1"))
                           (rule "elementOfSetMinus" (formula "3") (term "0,0,0"))
                            (builtin "One Step Simplification" (formula "3"))
                           (rule "elementOfUnion" (formula "3") (term "0,0,0,0"))
                            (builtin "One Step Simplification" (formula "3"))
                           (rule "ifthenelse_negated" (formula "3") (term "0"))
                           (rule "inEqSimp_exactShadow3" (formula "6") (ifseqformula "25"))
                           (rule "polySimp_rightDist" (formula "6") (term "0,0"))
                           (rule "mul_literals" (formula "6") (term "0,0,0"))
                           (rule "polySimp_addComm1" (formula "6") (term "0"))
                           (rule "add_literals" (formula "6") (term "0,0"))
                           (rule "inEqSimp_sepNegMonomial1" (formula "6"))
                           (rule "polySimp_mulLiterals" (formula "6") (term "0"))
                           (rule "polySimp_elimOne" (formula "6") (term "0"))
                           (rule "pullOutSelect" (formula "4") (term "0") (inst "selectSK=arr_3"))
                           (rule "simplifySelectOfAnon" (formula "4"))
                            (builtin "One Step Simplification" (formula "4") (ifInst ""  (formula "48")))
                           (rule "elementOfSetMinus" (formula "4") (term "0,0,0"))
                            (builtin "One Step Simplification" (formula "4"))
                           (rule "elementOfUnion" (formula "4") (term "0,0,0,0"))
                            (builtin "One Step Simplification" (formula "4"))
                           (rule "ifthenelse_negated" (formula "4") (term "0"))
                           (rule "inEqSimp_exactShadow3" (formula "1") (ifseqformula "27"))
                           (rule "polySimp_rightDist" (formula "1") (term "0,0"))
                           (rule "mul_literals" (formula "1") (term "0,0,0"))
                           (rule "polySimp_addComm1" (formula "1") (term "0"))
                           (rule "add_literals" (formula "1") (term "0,0"))
                           (rule "inEqSimp_sepNegMonomial1" (formula "1"))
                           (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                           (rule "polySimp_elimOne" (formula "1") (term "0"))
                           (rule "inEqSimp_exactShadow3" (formula "3") (ifseqformula "1"))
                           (rule "polySimp_mulComm0" (formula "3") (term "0,0"))
                           (rule "polySimp_addComm0" (formula "3") (term "0"))
                           (rule "inEqSimp_sepNegMonomial1" (formula "3"))
                           (rule "polySimp_mulLiterals" (formula "3") (term "0"))
                           (rule "polySimp_elimOne" (formula "3") (term "0"))
                           (rule "onlyCreatedObjectsAreReferencedFinal" (formula "34") (term "0,0") (ifseqformula "22") (ifseqformula "24"))
                           (rule "replace_known_right" (formula "34") (term "1") (ifseqformula "48"))
                            (builtin "One Step Simplification" (formula "34") (ifInst ""  (formula "49")))
                           (rule "closeFalse" (formula "34"))
                        )
                        (branch "Case 2"
                           (rule "replace_known_left" (formula "11") (term "1") (ifseqformula "13"))
                            (builtin "One Step Simplification" (formula "11"))
                           (rule "true_left" (formula "11"))
                           (rule "replace_known_left" (formula "10") (term "0") (ifseqformula "12"))
                            (builtin "One Step Simplification" (formula "10"))
                           (rule "replace_known_left" (formula "11") (term "0") (ifseqformula "12"))
                            (builtin "One Step Simplification" (formula "11"))
                           (rule "onlyCreatedObjectsAreReferencedFinal" (formula "25") (term "0,0") (ifseqformula "13") (ifseqformula "15"))
                           (rule "replace_known_right" (formula "25") (term "0") (ifseqformula "40"))
                            (builtin "One Step Simplification" (formula "25") (ifInst ""  (formula "39")))
                           (rule "closeFalse" (formula "25"))
                        )
                     )
                     (branch "Case 2"
                        (rule "allRight" (formula "32") (inst "sk=i_0"))
                        (rule "orRight" (formula "32"))
                        (rule "orRight" (formula "32"))
                        (rule "polySimp_addComm1" (formula "34") (term "1,1,0,0,0,2,0"))
                        (rule "polySimp_addComm1" (formula "34") (term "1,0,0,1,0,0,2,0"))
                        (rule "polySimp_addComm1" (formula "34") (term "1,0,0,1,0,2,0"))
                        (rule "inEqSimp_geqRight" (formula "33"))
                        (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                        (rule "polySimp_addComm1" (formula "1") (term "0"))
                        (rule "inEqSimp_leqRight" (formula "33"))
                        (rule "times_zero_1" (formula "1") (term "1,0,0"))
                        (rule "add_zero_right" (formula "1") (term "0,0"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                        (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                        (rule "polySimp_elimOne" (formula "2") (term "0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                        (rule "mul_literals" (formula "1") (term "1"))
                        (rule "pullOutSelect" (formula "34") (term "1") (inst "selectSK=arr_0"))
                        (rule "simplifySelectOfAnon" (formula "1"))
                         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "30")))
                        (rule "elementOfSetMinus" (formula "1") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "elementOfUnion" (formula "1") (term "0,0,0,0"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "ifthenelse_negated" (formula "1") (term "0"))
                        (rule "pullOutSelect" (formula "35") (term "0") (inst "selectSK=arr_1"))
                        (rule "simplifySelectOfAnon" (formula "1"))
                         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "34")))
                        (rule "elementOfSetMinus" (formula "1") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "elementOfUnion" (formula "1") (term "0,0,0,0"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "ifthenelse_negated" (formula "1") (term "0"))
                        (rule "inEqSimp_exactShadow3" (formula "4") (ifseqformula "13"))
                        (rule "polySimp_rightDist" (formula "4") (term "0,0"))
                        (rule "mul_literals" (formula "4") (term "0,0,0"))
                        (rule "polySimp_addComm1" (formula "4") (term "0"))
                        (rule "add_literals" (formula "4") (term "0,0"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "4"))
                        (rule "polySimp_mulLiterals" (formula "4") (term "0"))
                        (rule "polySimp_elimOne" (formula "4") (term "0"))
                        (rule "commute_or" (formula "17") (term "0,0,1,0"))
                        (rule "Contract_axiom_for_isSortedSlice_in_Functions" (formula "6") (term "0,0"))
                        (rule "wellFormedAnon" (formula "6") (term "1,0"))
                        (rule "replace_known_right" (formula "6") (term "0,0,0") (ifseqformula "36"))
                         (builtin "One Step Simplification" (formula "6") (ifInst ""  (formula "9")) (ifInst ""  (formula "10")) (ifInst ""  (formula "7")))
                        (rule "true_left" (formula "6"))
                        (rule "Definition_axiom_for_isSortedSliceTransitive_in_de_wiesler_Functions" (formula "6") (term "0,1") (inst "i=i") (inst "j=j"))
                         (builtin "One Step Simplification" (formula "6"))
                        (rule "inEqSimp_ltToLeq" (formula "6") (term "1,0,0,1"))
                        (rule "polySimp_rightDist" (formula "6") (term "1,0,0,1,0,0,1"))
                        (rule "mul_literals" (formula "6") (term "0,1,0,0,1,0,0,1"))
                        (rule "polySimp_addAssoc" (formula "6") (term "0,0,1,0,0,1"))
                        (rule "add_literals" (formula "6") (term "0,0,0,1,0,0,1"))
                        (rule "inEqSimp_ltToLeq" (formula "6") (term "1,0,0,1,0,1"))
                        (rule "polySimp_rightDist" (formula "6") (term "1,0,0,1,0,0,1,0,1"))
                        (rule "mul_literals" (formula "6") (term "0,1,0,0,1,0,0,1,0,1"))
                        (rule "polySimp_addAssoc" (formula "6") (term "0,0,1,0,0,1,0,1"))
                        (rule "add_literals" (formula "6") (term "0,0,0,1,0,0,1,0,1"))
                        (rule "inEqSimp_commuteLeq" (formula "6") (term "0,0,0,1"))
                        (rule "inEqSimp_commuteLeq" (formula "6") (term "1,0,1,0,1"))
                        (rule "inEqSimp_commuteLeq" (formula "6") (term "0,0,0,1,0,1"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "6") (term "1,0,0,1"))
                        (rule "polySimp_mulComm0" (formula "6") (term "1,1,0,0,1"))
                        (rule "polySimp_rightDist" (formula "6") (term "1,1,0,0,1"))
                        (rule "mul_literals" (formula "6") (term "0,1,1,0,0,1"))
                        (rule "polySimp_mulLiterals" (formula "6") (term "1,1,1,0,0,1"))
                        (rule "polySimp_elimOne" (formula "6") (term "1,1,1,0,0,1"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "6") (term "1,0,0,1,0,1"))
                        (rule "polySimp_mulComm0" (formula "6") (term "1,1,0,0,1,0,1"))
                        (rule "polySimp_rightDist" (formula "6") (term "1,1,0,0,1,0,1"))
                        (rule "mul_literals" (formula "6") (term "0,1,1,0,0,1,0,1"))
                        (rule "polySimp_mulLiterals" (formula "6") (term "1,1,1,0,0,1,0,1"))
                        (rule "polySimp_elimOne" (formula "6") (term "1,1,1,0,0,1,0,1"))
                        (rule "nnf_imp2or" (formula "6") (term "0,1"))
                        (rule "nnf_notAnd" (formula "6") (term "0,0,1"))
                        (rule "inEqSimp_notGeq" (formula "6") (term "0,0,0,1"))
                        (rule "times_zero_1" (formula "6") (term "1,0,0,0,0,0,1"))
                        (rule "add_zero_right" (formula "6") (term "0,0,0,0,0,1"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "6") (term "0,0,0,1"))
                        (rule "mul_literals" (formula "6") (term "1,0,0,0,1"))
                        (rule "inEqSimp_notLeq" (formula "6") (term "1,0,0,1"))
                        (rule "polySimp_rightDist" (formula "6") (term "1,0,0,1,0,0,1"))
                        (rule "mul_literals" (formula "6") (term "0,1,0,0,1,0,0,1"))
                        (rule "polySimp_addAssoc" (formula "6") (term "0,0,1,0,0,1"))
                        (rule "add_literals" (formula "6") (term "0,0,0,1,0,0,1"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "6") (term "1,0,0,1"))
                        (rule "polySimp_mulComm0" (formula "6") (term "1,1,0,0,1"))
                        (rule "polySimp_rightDist" (formula "6") (term "1,1,0,0,1"))
                        (rule "mul_literals" (formula "6") (term "0,1,1,0,0,1"))
                        (rule "polySimp_mulLiterals" (formula "6") (term "1,1,1,0,0,1"))
                        (rule "polySimp_elimOne" (formula "6") (term "1,1,1,0,0,1"))
                        (rule "nnf_imp2or" (formula "6") (term "0,1,0,1"))
                        (rule "nnf_notAnd" (formula "6") (term "0,0,1,0,1"))
                        (rule "inEqSimp_notGeq" (formula "6") (term "0,0,0,1,0,1"))
                        (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,0,0,0,1,0,1"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "6") (term "0,0,0,1,0,1"))
                        (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,0,1,0,1"))
                        (rule "polySimp_rightDist" (formula "6") (term "1,0,0,0,1,0,1"))
                        (rule "polySimp_mulLiterals" (formula "6") (term "1,1,0,0,0,1,0,1"))
                        (rule "mul_literals" (formula "6") (term "0,1,0,0,0,1,0,1"))
                        (rule "polySimp_elimOne" (formula "6") (term "1,1,0,0,0,1,0,1"))
                        (rule "inEqSimp_notLeq" (formula "6") (term "1,0,0,1,0,1"))
                        (rule "polySimp_rightDist" (formula "6") (term "1,0,0,1,0,0,1,0,1"))
                        (rule "mul_literals" (formula "6") (term "0,1,0,0,1,0,0,1,0,1"))
                        (rule "polySimp_addAssoc" (formula "6") (term "0,0,1,0,0,1,0,1"))
                        (rule "add_literals" (formula "6") (term "0,0,0,1,0,0,1,0,1"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "6") (term "1,0,0,1,0,1"))
                        (rule "polySimp_mulComm0" (formula "6") (term "1,1,0,0,1,0,1"))
                        (rule "polySimp_rightDist" (formula "6") (term "1,1,0,0,1,0,1"))
                        (rule "polySimp_mulLiterals" (formula "6") (term "1,1,1,0,0,1,0,1"))
                        (rule "mul_literals" (formula "6") (term "0,1,1,0,0,1,0,1"))
                        (rule "polySimp_elimOne" (formula "6") (term "1,1,1,0,0,1,0,1"))
                        (rule "commute_or" (formula "29") (term "0"))
                        (rule "Contract_axiom_for_isSortedSlice_in_Functions" (formula "6") (term "0,0"))
                        (rule "wellFormedAnon" (formula "6") (term "1,0"))
                        (rule "replace_known_left" (formula "6") (term "1,1,0") (ifseqformula "10"))
                         (builtin "One Step Simplification" (formula "6") (ifInst ""  (formula "36")) (ifInst ""  (formula "9")))
                        (rule "Definition_axiom_for_isSortedSlice_in_de_wiesler_Functions" (formula "7") (term "0,0") (inst "i=i"))
                         (builtin "One Step Simplification" (formula "7"))
                        (rule "translateJavaAddInt" (formula "7") (term "0,2,1,1,0,0"))
                        (rule "translateJavaSubInt" (formula "7") (term "1,1,0,0,0"))
                        (rule "polySimp_elimSub" (formula "7") (term "1,1,0,0,0"))
                        (rule "mul_literals" (formula "7") (term "1,1,1,0,0,0"))
                        (rule "polySimp_addComm0" (formula "7") (term "0,2,1,1,0,0"))
                        (rule "polySimp_addComm1" (formula "7") (term "1,1,0,0,0"))
                        (rule "add_literals" (formula "7") (term "0,1,1,0,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "7") (term "1,0,0,0"))
                        (rule "polySimp_rightDist" (formula "7") (term "1,0,0,1,0,0,0"))
                        (rule "mul_literals" (formula "7") (term "0,1,0,0,1,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "7") (term "0,0,1,0,0,0"))
                        (rule "add_literals" (formula "7") (term "0,0,0,1,0,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "7") (term "0,0,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "7") (term "1,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "7") (term "1,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "7") (term "1,1,0,0,0"))
                        (rule "polySimp_rightDist" (formula "7") (term "1,1,0,0,0"))
                        (rule "mul_literals" (formula "7") (term "0,1,1,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "7") (term "1,1,1,0,0,0"))
                        (rule "polySimp_elimOne" (formula "7") (term "1,1,1,0,0,0"))
                        (rule "nnf_imp2or" (formula "7") (term "0,0"))
                        (rule "nnf_notAnd" (formula "7") (term "0,0,0"))
                        (rule "inEqSimp_notGeq" (formula "7") (term "0,0,0,0"))
                        (rule "times_zero_1" (formula "7") (term "1,0,0,0,0,0,0"))
                        (rule "add_zero_right" (formula "7") (term "0,0,0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "7") (term "0,0,0,0"))
                        (rule "mul_literals" (formula "7") (term "1,0,0,0,0"))
                        (rule "inEqSimp_notLeq" (formula "7") (term "1,0,0,0"))
                        (rule "polySimp_rightDist" (formula "7") (term "1,0,0,1,0,0,0"))
                        (rule "mul_literals" (formula "7") (term "0,1,0,0,1,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "7") (term "0,0,1,0,0,0"))
                        (rule "add_literals" (formula "7") (term "0,0,0,1,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "7") (term "1,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "7") (term "1,1,0,0,0"))
                        (rule "polySimp_rightDist" (formula "7") (term "1,1,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "7") (term "1,1,1,0,0,0"))
                        (rule "mul_literals" (formula "7") (term "0,1,1,0,0,0"))
                        (rule "polySimp_elimOne" (formula "7") (term "1,1,1,0,0,0"))
                        (rule "commute_or" (formula "8") (term "0,0,1,0,0"))
                        (rule "Definition_axiom_for_isSortedSlice_in_de_wiesler_Functions" (formula "6") (term "0,0") (inst "i=i"))
                         (builtin "One Step Simplification" (formula "6"))
                        (rule "translateJavaAddInt" (formula "6") (term "0,2,1,1,0,0"))
                        (rule "translateJavaSubInt" (formula "6") (term "1,1,0,0,0"))
                        (rule "polySimp_elimSub" (formula "6") (term "1,1,0,0,0"))
                        (rule "mul_literals" (formula "6") (term "1,1,1,0,0,0"))
                        (rule "polySimp_addComm0" (formula "6") (term "0,2,1,1,0,0"))
                        (rule "polySimp_addComm1" (formula "6") (term "1,1,0,0,0"))
                        (rule "add_literals" (formula "6") (term "0,1,1,0,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "6") (term "1,0,0,0"))
                        (rule "polySimp_rightDist" (formula "6") (term "1,0,0,1,0,0,0"))
                        (rule "mul_literals" (formula "6") (term "0,1,0,0,1,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "6") (term "0,0,1,0,0,0"))
                        (rule "add_literals" (formula "6") (term "0,0,0,1,0,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "6") (term "0,0,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "6") (term "1,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "6") (term "1,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "6") (term "1,1,0,0,0"))
                        (rule "polySimp_rightDist" (formula "6") (term "1,1,0,0,0"))
                        (rule "mul_literals" (formula "6") (term "0,1,1,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "6") (term "1,1,1,0,0,0"))
                        (rule "polySimp_elimOne" (formula "6") (term "1,1,1,0,0,0"))
                        (rule "nnf_imp2or" (formula "6") (term "0,0"))
                        (rule "nnf_notAnd" (formula "6") (term "0,0,0"))
                        (rule "inEqSimp_notGeq" (formula "6") (term "0,0,0,0"))
                        (rule "times_zero_1" (formula "6") (term "1,0,0,0,0,0,0"))
                        (rule "add_zero_right" (formula "6") (term "0,0,0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "6") (term "0,0,0,0"))
                        (rule "mul_literals" (formula "6") (term "1,0,0,0,0"))
                        (rule "inEqSimp_notLeq" (formula "6") (term "1,0,0,0"))
                        (rule "polySimp_rightDist" (formula "6") (term "1,0,0,1,0,0,0"))
                        (rule "mul_literals" (formula "6") (term "0,1,0,0,1,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "6") (term "0,0,1,0,0,0"))
                        (rule "add_literals" (formula "6") (term "0,0,0,1,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "6") (term "1,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "6") (term "1,1,0,0,0"))
                        (rule "polySimp_rightDist" (formula "6") (term "1,1,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "6") (term "1,1,1,0,0,0"))
                        (rule "mul_literals" (formula "6") (term "0,1,1,0,0,0"))
                        (rule "polySimp_elimOne" (formula "6") (term "1,1,1,0,0,0"))
                        (rule "Contract_axiom_for_isSortedSliceTransitive_in_Functions" (formula "6") (term "0,1"))
                        (rule "wellFormedAnon" (formula "6") (term "1,0"))
                        (rule "replace_known_right" (formula "6") (term "0,0,0") (ifseqformula "37"))
                         (builtin "One Step Simplification" (formula "6") (ifInst ""  (formula "10")) (ifInst ""  (formula "11")))
                        (rule "Definition_axiom_for_isSortedSliceTransitive_in_de_wiesler_Functions" (formula "7") (term "0,1") (inst "i=i") (inst "j=j"))
                         (builtin "One Step Simplification" (formula "7"))
                        (rule "inEqSimp_ltToLeq" (formula "7") (term "1,0,0,1"))
                        (rule "polySimp_rightDist" (formula "7") (term "1,0,0,1,0,0,1"))
                        (rule "mul_literals" (formula "7") (term "0,1,0,0,1,0,0,1"))
                        (rule "polySimp_addAssoc" (formula "7") (term "0,0,1,0,0,1"))
                        (rule "add_literals" (formula "7") (term "0,0,0,1,0,0,1"))
                        (rule "inEqSimp_ltToLeq" (formula "7") (term "1,0,0,1,0,1"))
                        (rule "polySimp_rightDist" (formula "7") (term "1,0,0,1,0,0,1,0,1"))
                        (rule "mul_literals" (formula "7") (term "0,1,0,0,1,0,0,1,0,1"))
                        (rule "polySimp_addAssoc" (formula "7") (term "0,0,1,0,0,1,0,1"))
                        (rule "add_literals" (formula "7") (term "0,0,0,1,0,0,1,0,1"))
                        (rule "inEqSimp_commuteLeq" (formula "7") (term "0,0,0,1"))
                        (rule "inEqSimp_commuteLeq" (formula "7") (term "0,0,0,1,0,1"))
                        (rule "inEqSimp_commuteLeq" (formula "7") (term "1,0,1,0,1"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "7") (term "1,0,0,1"))
                        (rule "polySimp_mulComm0" (formula "7") (term "1,1,0,0,1"))
                        (rule "polySimp_rightDist" (formula "7") (term "1,1,0,0,1"))
                        (rule "mul_literals" (formula "7") (term "0,1,1,0,0,1"))
                        (rule "polySimp_mulLiterals" (formula "7") (term "1,1,1,0,0,1"))
                        (rule "polySimp_elimOne" (formula "7") (term "1,1,1,0,0,1"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "7") (term "1,0,0,1,0,1"))
                        (rule "polySimp_mulComm0" (formula "7") (term "1,1,0,0,1,0,1"))
                        (rule "polySimp_rightDist" (formula "7") (term "1,1,0,0,1,0,1"))
                        (rule "polySimp_mulLiterals" (formula "7") (term "1,1,1,0,0,1,0,1"))
                        (rule "mul_literals" (formula "7") (term "0,1,1,0,0,1,0,1"))
                        (rule "polySimp_elimOne" (formula "7") (term "1,1,1,0,0,1,0,1"))
                        (rule "nnf_imp2or" (formula "7") (term "0,1"))
                        (rule "nnf_notAnd" (formula "7") (term "0,0,1"))
                        (rule "inEqSimp_notLeq" (formula "7") (term "1,0,0,1"))
                        (rule "polySimp_rightDist" (formula "7") (term "1,0,0,1,0,0,1"))
                        (rule "mul_literals" (formula "7") (term "0,1,0,0,1,0,0,1"))
                        (rule "polySimp_addAssoc" (formula "7") (term "0,0,1,0,0,1"))
                        (rule "add_literals" (formula "7") (term "0,0,0,1,0,0,1"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "7") (term "1,0,0,1"))
                        (rule "polySimp_mulComm0" (formula "7") (term "1,1,0,0,1"))
                        (rule "polySimp_rightDist" (formula "7") (term "1,1,0,0,1"))
                        (rule "mul_literals" (formula "7") (term "0,1,1,0,0,1"))
                        (rule "polySimp_mulLiterals" (formula "7") (term "1,1,1,0,0,1"))
                        (rule "polySimp_elimOne" (formula "7") (term "1,1,1,0,0,1"))
                        (rule "inEqSimp_notGeq" (formula "7") (term "0,0,0,1"))
                        (rule "times_zero_1" (formula "7") (term "1,0,0,0,0,0,1"))
                        (rule "add_zero_right" (formula "7") (term "0,0,0,0,0,1"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "7") (term "0,0,0,1"))
                        (rule "mul_literals" (formula "7") (term "1,0,0,0,1"))
                        (rule "nnf_imp2or" (formula "7") (term "0,1,0,1"))
                        (rule "nnf_notAnd" (formula "7") (term "0,0,1,0,1"))
                        (rule "inEqSimp_notLeq" (formula "7") (term "1,0,0,1,0,1"))
                        (rule "polySimp_rightDist" (formula "7") (term "1,0,0,1,0,0,1,0,1"))
                        (rule "mul_literals" (formula "7") (term "0,1,0,0,1,0,0,1,0,1"))
                        (rule "polySimp_addAssoc" (formula "7") (term "0,0,1,0,0,1,0,1"))
                        (rule "add_literals" (formula "7") (term "0,0,0,1,0,0,1,0,1"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "7") (term "1,0,0,1,0,1"))
                        (rule "polySimp_mulComm0" (formula "7") (term "1,1,0,0,1,0,1"))
                        (rule "polySimp_rightDist" (formula "7") (term "1,1,0,0,1,0,1"))
                        (rule "mul_literals" (formula "7") (term "0,1,1,0,0,1,0,1"))
                        (rule "polySimp_mulLiterals" (formula "7") (term "1,1,1,0,0,1,0,1"))
                        (rule "polySimp_elimOne" (formula "7") (term "1,1,1,0,0,1,0,1"))
                        (rule "inEqSimp_notGeq" (formula "7") (term "0,0,0,1,0,1"))
                        (rule "polySimp_mulComm0" (formula "7") (term "1,0,0,0,0,0,1,0,1"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "7") (term "0,0,0,1,0,1"))
                        (rule "polySimp_mulComm0" (formula "7") (term "1,0,0,0,1,0,1"))
                        (rule "polySimp_rightDist" (formula "7") (term "1,0,0,0,1,0,1"))
                        (rule "mul_literals" (formula "7") (term "0,1,0,0,0,1,0,1"))
                        (rule "polySimp_mulLiterals" (formula "7") (term "1,1,0,0,0,1,0,1"))
                        (rule "polySimp_elimOne" (formula "7") (term "1,1,0,0,0,1,0,1"))
                        (rule "Definition_axiom_for_isSortedSlice_in_de_wiesler_Functions" (formula "6") (term "0,1") (inst "i=i"))
                         (builtin "One Step Simplification" (formula "6"))
                        (rule "translateJavaSubInt" (formula "6") (term "1,1,0,0,1"))
                        (rule "translateJavaAddInt" (formula "6") (term "0,2,1,1,0,1"))
                        (rule "polySimp_elimSub" (formula "6") (term "1,1,0,0,1"))
                        (rule "mul_literals" (formula "6") (term "1,1,1,0,0,1"))
                        (rule "polySimp_addComm0" (formula "6") (term "0,2,1,1,0,1"))
                        (rule "polySimp_addComm1" (formula "6") (term "1,1,0,0,1"))
                        (rule "add_literals" (formula "6") (term "0,1,1,0,0,1"))
                        (rule "inEqSimp_ltToLeq" (formula "6") (term "1,0,0,1"))
                        (rule "polySimp_rightDist" (formula "6") (term "1,0,0,1,0,0,1"))
                        (rule "mul_literals" (formula "6") (term "0,1,0,0,1,0,0,1"))
                        (rule "polySimp_addAssoc" (formula "6") (term "0,0,1,0,0,1"))
                        (rule "add_literals" (formula "6") (term "0,0,0,1,0,0,1"))
                        (rule "inEqSimp_commuteLeq" (formula "6") (term "0,0,0,1"))
                        (rule "inEqSimp_commuteLeq" (formula "6") (term "1,0,1"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "6") (term "1,0,0,1"))
                        (rule "polySimp_mulComm0" (formula "6") (term "1,1,0,0,1"))
                        (rule "polySimp_rightDist" (formula "6") (term "1,1,0,0,1"))
                        (rule "mul_literals" (formula "6") (term "0,1,1,0,0,1"))
                        (rule "polySimp_mulLiterals" (formula "6") (term "1,1,1,0,0,1"))
                        (rule "polySimp_elimOne" (formula "6") (term "1,1,1,0,0,1"))
                        (rule "nnf_imp2or" (formula "6") (term "0,1"))
                        (rule "nnf_notAnd" (formula "6") (term "0,0,1"))
                        (rule "inEqSimp_notGeq" (formula "6") (term "0,0,0,1"))
                        (rule "times_zero_1" (formula "6") (term "1,0,0,0,0,0,1"))
                        (rule "add_zero_right" (formula "6") (term "0,0,0,0,0,1"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "6") (term "0,0,0,1"))
                        (rule "mul_literals" (formula "6") (term "1,0,0,0,1"))
                        (rule "inEqSimp_notLeq" (formula "6") (term "1,0,0,1"))
                        (rule "polySimp_rightDist" (formula "6") (term "1,0,0,1,0,0,1"))
                        (rule "mul_literals" (formula "6") (term "0,1,0,0,1,0,0,1"))
                        (rule "polySimp_addAssoc" (formula "6") (term "0,0,1,0,0,1"))
                        (rule "add_literals" (formula "6") (term "0,0,0,1,0,0,1"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "6") (term "1,0,0,1"))
                        (rule "polySimp_mulComm0" (formula "6") (term "1,1,0,0,1"))
                        (rule "polySimp_rightDist" (formula "6") (term "1,1,0,0,1"))
                        (rule "polySimp_mulLiterals" (formula "6") (term "1,1,1,0,0,1"))
                        (rule "mul_literals" (formula "6") (term "0,1,1,0,0,1"))
                        (rule "polySimp_elimOne" (formula "6") (term "1,1,1,0,0,1"))
                        (rule "commute_or" (formula "7") (term "0,0,1,0,1"))
                        (rule "onlyCreatedObjectsAreReferencedFinal" (formula "34") (term "1,0") (ifseqformula "9") (ifseqformula "11"))
                        (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "36"))
                         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "35")))
                        (rule "closeFalse" (formula "1"))
                     )
                  )
               )
            )
            (branch "Case 2"
               (rule "andRight" (formula "13"))
               (branch "Case 1"
                  (rule "close" (formula "13") (ifseqformula "1"))
               )
               (branch "Case 2"
                   (builtin "One Step Simplification" (formula "7"))
                  (rule "wellFormedAnon" (formula "13"))
                  (rule "translateJavaMulInt" (formula "8") (term "1,1"))
                  (rule "translateJavaSubInt" (formula "11") (term "0,2,0"))
                  (rule "translateJavaSubInt" (formula "11") (term "0,2,1"))
                  (rule "eqSymm" (formula "8"))
                  (rule "eqSymm" (formula "11"))
                  (rule "replace_known_left" (formula "13") (term "1") (ifseqformula "2"))
                   (builtin "One Step Simplification" (formula "13") (ifInst ""  (formula "1")))
                  (rule "closeTrue" (formula "13"))
               )
            )
         )
         (branch "Case 2"
            (rule "close" (formula "13") (ifseqformula "12"))
         )
      )
      (branch "Case 2"
         (rule "disjointDefinition" (formula "13"))
         (rule "applyEq" (formula "13") (term "0,1,1,0") (ifseqformula "9"))
         (rule "distributeIntersection" (formula "13") (term "0"))
         (rule "unionEqualsEmpty" (formula "13"))
         (rule "commuteIntersection" (formula "13") (term "0,0"))
         (rule "commuteIntersection" (formula "13") (term "0,1"))
         (rule "commute_and" (formula "13"))
         (rule "cut_direct" (formula "13") (term "0"))
         (branch "CUT: self.sorted_splitters.* cap allLocs setMinus self.sorted_splitters.* cup self.tree.tree.* = {} TRUE"
             (builtin "One Step Simplification" (formula "14"))
            (rule "equalityToElementOfRight" (formula "14") (inst "ov=ov") (inst "fv=fv"))
             (builtin "One Step Simplification" (formula "14"))
            (rule "allRight" (formula "14") (inst "sk=ov_0"))
            (rule "allRight" (formula "14") (inst "sk=fv_0"))
            (rule "notRight" (formula "14"))
            (rule "elementOfIntersect" (formula "1"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "andLeft" (formula "1"))
            (rule "applyEq" (formula "2") (term "0") (ifseqformula "1"))
            (rule "elementOfSetMinus" (formula "2"))
             (builtin "One Step Simplification" (formula "2"))
            (rule "notLeft" (formula "2"))
            (rule "elementOfUnion" (formula "15"))
             (builtin "One Step Simplification" (formula "15"))
            (rule "closeTrue" (formula "15"))
         )
         (branch "CUT: self.sorted_splitters.* cap allLocs setMinus self.sorted_splitters.* cup self.tree.tree.* = {} FALSE"
             (builtin "One Step Simplification" (formula "14"))
            (rule "false_right" (formula "14"))
            (rule "equalityToElementOfRight" (formula "13") (inst "ov=ov") (inst "fv=fv"))
             (builtin "One Step Simplification" (formula "13"))
            (rule "allRight" (formula "13") (inst "sk=ov_0"))
            (rule "allRight" (formula "13") (inst "sk=fv_0"))
            (rule "notRight" (formula "13"))
            (rule "elementOfIntersect" (formula "1"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "andLeft" (formula "1"))
            (rule "applyEq" (formula "2") (term "0") (ifseqformula "1"))
            (rule "elementOfSetMinus" (formula "2"))
             (builtin "One Step Simplification" (formula "2"))
            (rule "notLeft" (formula "2"))
            (rule "elementOfUnion" (formula "14"))
             (builtin "One Step Simplification" (formula "14"))
            (rule "closeTrue" (formula "14"))
         )
      )
   )
   (branch "Case 2"
       (builtin "One Step Simplification" (formula "7"))
      (rule "translateJavaMulInt" (formula "8") (term "1,1"))
      (rule "translateJavaSubInt" (formula "11") (term "0,2,0"))
      (rule "translateJavaSubInt" (formula "11") (term "0,2,1"))
      (rule "eqSymm" (formula "8"))
      (rule "eqSymm" (formula "11"))
      (rule "replace_known_left" (formula "13") (term "1") (ifseqformula "12"))
       (builtin "One Step Simplification" (formula "13") (ifInst ""  (formula "17")))
      (rule "closeFalse" (formula "13"))
   )
)
)
}
