\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Sun Jun 05 14:44:35 CEST 2022
[NewSMT]NoTypeHierarchy=false
[Labels]UseOriginLabels=true
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[NewSMT]Presburger=false
[SMTSettings]invariantForall=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[Choice]DefaultChoices=JavaCard-JavaCard\\:on , Strings-Strings\\:on , assertions-assertions\\:safe , bigint-bigint\\:on , finalFields-finalFields\\:immutable , floatRules-floatRules\\:strictfpOnly , initialisation-initialisation\\:disableStaticInitialisation , intRules-intRules\\:arithmeticSemanticsCheckingOF , integerSimplificationRules-integerSimplificationRules\\:full , javaLoopTreatment-javaLoopTreatment\\:efficient , mergeGenerateIsWeakeningGoal-mergeGenerateIsWeakeningGoal\\:off , methodExpansion-methodExpansion\\:modularOnly , modelFields-modelFields\\:treatAsAxiom , moreSeqRules-moreSeqRules\\:on , permissions-permissions\\:off , programRules-programRules\\:Java , reach-reach\\:on , runtimeExceptions-runtimeExceptions\\:ban , sequences-sequences\\:on , wdChecks-wdChecks\\:off , wdOperator-wdOperator\\:L
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_SCOPE_INV_TACLET
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_DEF_OPS
[SMTSettings]SelectedTaclets=
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[Strategy]MaximumNumberOfAutomaticApplications=10000
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_DELAYED
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]MPS_OPTIONS_KEY=MPS_MERGE
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[Strategy]Timeout=-1
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_OFF
[SMTSettings]useUninterpretedMultiplication=true
[NewSMT]sqrtSMTTranslation=SMT
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT_INTERNAL
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[NewSMT]identifier=OPEN
[SMTSettings]maxGenericSorts=2
[StrategyProperty]OSS_OPTIONS_KEY=OSS_ON
[NewSMT]Axiomatisations=false
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
[SMTSettings]integersMinimum=-2147483645
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]integersMaximum=2147483645
"
}

\javaSource "../../src";

\proofObligation "#Proof Obligation Settings
#Sun Jun 05 14:44:35 CEST 2022
contract=de.wiesler.Classifier[de.wiesler.Classifier\\:\\:from_sorted_samples([I,[I,int,int)].JML normal_behavior operation contract.0
name=de.wiesler.Classifier[de.wiesler.Classifier\\:\\:from_sorted_samples([I,[I,int,int)].JML normal_behavior operation contract.0
class=de.uka.ilkd.key.proof.init.FunctionalOperationContractPO
";

\proof {
(keyLog "0" (keyUser "Julian" ) (keyVersion "e1a85b31e7"))

(autoModeTime "1624")

(branch "dummy ID"
 (builtin "One Step Simplification" (formula "1") (newnames "heapAtPre_0,o,f"))
(rule "expand_inInt" (formula "1") (term "1,0,0,0,1,1,1,0"))
(rule "expand_inInt" (formula "1") (term "1,0,1,0,0,0"))
(rule "expand_inInt" (formula "1") (term "1,1,0,0,0"))
(rule "replace_int_MAX" (formula "1") (term "1,0,1,0,0,0,1,1,1,0"))
(rule "replace_int_MIN" (formula "1") (term "0,1,1,0,0,0,1,1,1,0"))
(rule "replace_int_MIN" (formula "1") (term "0,1,1,0,1,0,0,0"))
(rule "replace_int_MAX" (formula "1") (term "1,0,1,0,1,0,0,0"))
(rule "replace_int_MAX" (formula "1") (term "1,0,1,1,0,0,0"))
(rule "replace_int_MIN" (formula "1") (term "0,1,1,1,0,0,0"))
(rule "impRight" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "2"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "3"))
(rule "andLeft" (formula "5"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "4"))
(rule "notLeft" (formula "4"))
(rule "andLeft" (formula "5"))
(rule "andLeft" (formula "4"))
(rule "andLeft" (formula "2"))
(rule "andLeft" (formula "8"))
(rule "andLeft" (formula "2"))
(rule "andLeft" (formula "4"))
(rule "andLeft" (formula "11"))
(rule "andLeft" (formula "2"))
(rule "andLeft" (formula "4"))
(rule "andLeft" (formula "13"))
(rule "andLeft" (formula "15"))
(rule "andLeft" (formula "16"))
(rule "andLeft" (formula "15"))
(rule "translateJavaSubInt" (formula "11") (term "1,1,0,0,0"))
(rule "translateJavaAddInt" (formula "11") (term "0,2,1,1,0"))
(rule "translateJavaSubInt" (formula "14") (term "1"))
(rule "replace_known_right" (formula "3") (term "0") (ifseqformula "19"))
 (builtin "One Step Simplification" (formula "3"))
(rule "replace_known_right" (formula "2") (term "0") (ifseqformula "20"))
 (builtin "One Step Simplification" (formula "2"))
(rule "polySimp_elimSub" (formula "11") (term "1,1,0,0,0"))
(rule "mul_literals" (formula "11") (term "1,1,1,0,0,0"))
(rule "polySimp_elimSub" (formula "14") (term "1"))
(rule "mul_literals" (formula "14") (term "1,1"))
(rule "polySimp_addComm0" (formula "11") (term "0,2,1,1,0"))
(rule "polySimp_addComm0" (formula "11") (term "1,1,0,0,0"))
(rule "polySimp_addComm0" (formula "14") (term "1"))
(rule "disjointDefinition" (formula "12"))
 (builtin "One Step Simplification" (formula "12"))
(rule "notLeft" (formula "12"))
(rule "eqSymm" (formula "18"))
(rule "inEqSimp_commuteLeq" (formula "11") (term "0,0,0,0"))
(rule "inEqSimp_commuteLeq" (formula "11") (term "1,1,0,0"))
(rule "inEqSimp_commuteLeq" (formula "10"))
(rule "inEqSimp_commuteLeq" (formula "9"))
(rule "inEqSimp_commuteLeq" (formula "7"))
(rule "inEqSimp_commuteLeq" (formula "5"))
(rule "inEqSimp_commuteLeq" (formula "12"))
(rule "inEqSimp_commuteLeq" (formula "14"))
(rule "inEqSimp_commuteLeq" (formula "15"))
(rule "assignment" (formula "21") (term "1"))
 (builtin "One Step Simplification" (formula "21"))
(rule "applyEq" (formula "10") (term "0") (ifseqformula "16"))
(rule "inEqSimp_commuteGeq" (formula "10"))
(rule "commute_and" (formula "11") (term "0,0,0"))
(rule "commute_and" (formula "11") (term "1,0,0"))
(rule "shift_paren_and" (formula "11") (term "0,0"))
(rule "commute_and_2" (formula "11") (term "0,0,0"))
(rule "methodBodyExpand" (formula "21") (term "1") (newnames "heapBefore_from_sorted_samples,savedHeapBefore_from_sorted_samples,_num_bucketsBefore_from_sorted_samples,_num_splittersBefore_from_sorted_samples,_splittersBefore_from_sorted_samples,_treeBefore_from_sorted_samples"))
 (builtin "One Step Simplification" (formula "21"))
(rule "variableDeclarationAssign" (formula "21") (term "1"))
(rule "variableDeclaration" (formula "21") (term "1") (newnames "use_equal_buckets"))
(rule "compound_greater_equal_than_comparison_1" (formula "21") (term "1") (inst "#v0=x"))
(rule "variableDeclarationAssign" (formula "21") (term "1"))
(rule "variableDeclaration" (formula "21") (term "1") (newnames "x"))
(rule "remove_parentheses_right" (formula "21") (term "1"))
(rule "compound_subtraction_1" (formula "21") (term "1") (inst "#v=x_1"))
(rule "variableDeclarationAssign" (formula "21") (term "1"))
(rule "variableDeclaration" (formula "21") (term "1") (newnames "x_1"))
(rule "assignmentSubtractionInt" (formula "21") (term "1"))
(branch "Overflow check"
    (builtin "One Step Simplification" (formula "21"))
   (rule "expand_inInt" (formula "21"))
   (rule "replace_int_MIN" (formula "21") (term "0,1"))
   (rule "replace_int_MAX" (formula "21") (term "1,0"))
   (rule "polySimp_elimSub" (formula "21") (term "1,1"))
   (rule "mul_literals" (formula "21") (term "1,1,1"))
   (rule "polySimp_elimSub" (formula "21") (term "0,0"))
   (rule "mul_literals" (formula "21") (term "1,0,0"))
   (rule "polySimp_addComm0" (formula "21") (term "1,1"))
   (rule "polySimp_addComm0" (formula "21") (term "0,0"))
   (rule "inEqSimp_ltToLeq" (formula "11") (term "0,0,0,0,0"))
   (rule "polySimp_rightDist" (formula "11") (term "1,0,0,0,0,0,0,0"))
   (rule "mul_literals" (formula "11") (term "0,1,0,0,0,0,0,0,0"))
   (rule "polySimp_addAssoc" (formula "11") (term "0,0,0,0,0,0,0"))
   (rule "add_literals" (formula "11") (term "0,0,0,0,0,0,0,0"))
   (rule "inEqSimp_ltToLeq" (formula "11") (term "1,0"))
   (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,1,0"))
   (rule "polySimp_addComm1" (formula "11") (term "0,1,0"))
   (rule "inEqSimp_homoInEq0" (formula "21") (term "1"))
   (rule "mul_literals" (formula "21") (term "1,0,1"))
   (rule "polySimp_addComm1" (formula "21") (term "0,1"))
   (rule "add_literals" (formula "21") (term "0,0,1"))
   (rule "inEqSimp_homoInEq0" (formula "21") (term "0"))
   (rule "polySimp_mulComm0" (formula "21") (term "1,0,0"))
   (rule "polySimp_rightDist" (formula "21") (term "1,0,0"))
   (rule "mul_literals" (formula "21") (term "0,1,0,0"))
   (rule "polySimp_addAssoc" (formula "21") (term "0,0"))
   (rule "add_literals" (formula "21") (term "0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,0,0,0,0"))
   (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0,0,0"))
   (rule "polySimp_rightDist" (formula "11") (term "1,0,0,0,0,0"))
   (rule "mul_literals" (formula "11") (term "0,1,0,0,0,0,0"))
   (rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,0,0,0,0"))
   (rule "polySimp_elimOne" (formula "11") (term "1,1,0,0,0,0,0"))
   (rule "inEqSimp_sepNegMonomial0" (formula "11") (term "1,0"))
   (rule "polySimp_mulLiterals" (formula "11") (term "0,1,0"))
   (rule "polySimp_elimOne" (formula "11") (term "0,1,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "21") (term "1"))
   (rule "mul_literals" (formula "21") (term "1,1"))
   (rule "inEqSimp_sepNegMonomial1" (formula "21") (term "0"))
   (rule "polySimp_mulLiterals" (formula "21") (term "0,0"))
   (rule "polySimp_elimOne" (formula "21") (term "0,0"))
   (rule "inEqSimp_subsumption0" (formula "21") (term "0") (ifseqformula "6"))
   (rule "leq_literals" (formula "21") (term "0,0"))
    (builtin "One Step Simplification" (formula "21"))
   (rule "inEqSimp_geqRight" (formula "21"))
   (rule "mul_literals" (formula "1") (term "1,0,0"))
   (rule "add_literals" (formula "1") (term "0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "1"))
   (rule "mul_literals" (formula "1") (term "1"))
   (rule "inEqSimp_subsumption0" (formula "5") (ifseqformula "11"))
   (rule "leq_literals" (formula "5") (term "0"))
    (builtin "One Step Simplification" (formula "5"))
   (rule "true_left" (formula "5"))
   (rule "inEqSimp_subsumption1" (formula "5") (ifseqformula "12"))
   (rule "leq_literals" (formula "5") (term "0"))
    (builtin "One Step Simplification" (formula "5"))
   (rule "true_left" (formula "5"))
   (rule "inEqSimp_subsumption1" (formula "8") (ifseqformula "11"))
   (rule "leq_literals" (formula "8") (term "0"))
    (builtin "One Step Simplification" (formula "8"))
   (rule "true_left" (formula "8"))
   (rule "inEqSimp_subsumption1" (formula "6") (ifseqformula "12"))
   (rule "leq_literals" (formula "6") (term "0"))
    (builtin "One Step Simplification" (formula "6"))
   (rule "true_left" (formula "6"))
   (rule "inEqSimp_contradInEq0" (formula "11") (ifseqformula "1"))
   (rule "qeq_literals" (formula "11") (term "0"))
    (builtin "One Step Simplification" (formula "11"))
   (rule "closeFalse" (formula "11"))
)
(branch "Usage"
    (builtin "One Step Simplification" (formula "21"))
   (rule "translateJavaSubInt" (formula "21") (term "0,1,0"))
   (rule "polySimp_elimSub" (formula "21") (term "0,1,0"))
   (rule "mul_literals" (formula "21") (term "1,0,1,0"))
   (rule "polySimp_addComm0" (formula "21") (term "0,1,0"))
   (rule "assignmentSubtractionInt" (formula "21") (term "1"))
   (branch "Overflow check"
       (builtin "One Step Simplification" (formula "21"))
      (rule "expand_inInt" (formula "21"))
      (rule "replace_int_MAX" (formula "21") (term "1,0"))
      (rule "replace_int_MIN" (formula "21") (term "0,1"))
      (rule "polySimp_elimSub" (formula "21") (term "1,1"))
      (rule "polySimp_elimSub" (formula "21") (term "0,0"))
      (rule "inEqSimp_ltToLeq" (formula "11") (term "0,0,0,0,0"))
      (rule "polySimp_rightDist" (formula "11") (term "1,0,0,0,0,0,0,0"))
      (rule "mul_literals" (formula "11") (term "0,1,0,0,0,0,0,0,0"))
      (rule "polySimp_addAssoc" (formula "11") (term "0,0,0,0,0,0,0"))
      (rule "add_literals" (formula "11") (term "0,0,0,0,0,0,0,0"))
      (rule "inEqSimp_ltToLeq" (formula "11") (term "1,0"))
      (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,1,0"))
      (rule "polySimp_addComm1" (formula "11") (term "0,1,0"))
      (rule "inEqSimp_homoInEq0" (formula "21") (term "1"))
      (rule "mul_literals" (formula "21") (term "1,0,1"))
      (rule "polySimp_addComm1" (formula "21") (term "0,1"))
      (rule "polySimp_addComm1" (formula "21") (term "0,0,1"))
      (rule "add_literals" (formula "21") (term "0,0,0,1"))
      (rule "inEqSimp_homoInEq0" (formula "21") (term "0"))
      (rule "polySimp_mulComm0" (formula "21") (term "1,0,0"))
      (rule "polySimp_rightDist" (formula "21") (term "1,0,0"))
      (rule "polySimp_mulLiterals" (formula "21") (term "1,1,0,0"))
      (rule "polySimp_elimOne" (formula "21") (term "1,1,0,0"))
      (rule "polySimp_rightDist" (formula "21") (term "0,1,0,0"))
      (rule "mul_literals" (formula "21") (term "0,0,1,0,0"))
      (rule "polySimp_addAssoc" (formula "21") (term "0,0"))
      (rule "polySimp_addAssoc" (formula "21") (term "0,0,0"))
      (rule "add_literals" (formula "21") (term "0,0,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,0,0,0,0"))
      (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0,0,0"))
      (rule "polySimp_rightDist" (formula "11") (term "1,0,0,0,0,0"))
      (rule "mul_literals" (formula "11") (term "0,1,0,0,0,0,0"))
      (rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,0,0,0,0"))
      (rule "polySimp_elimOne" (formula "11") (term "1,1,0,0,0,0,0"))
      (rule "inEqSimp_sepNegMonomial0" (formula "11") (term "1,0"))
      (rule "polySimp_mulLiterals" (formula "11") (term "0,1,0"))
      (rule "polySimp_elimOne" (formula "11") (term "0,1,0"))
      (rule "inEqSimp_sepNegMonomial1" (formula "21") (term "1"))
      (rule "polySimp_mulLiterals" (formula "21") (term "0,1"))
      (rule "polySimp_elimOne" (formula "21") (term "0,1"))
      (rule "inEqSimp_sepPosMonomial1" (formula "21") (term "0"))
      (rule "polySimp_mulComm0" (formula "21") (term "1,0"))
      (rule "polySimp_rightDist" (formula "21") (term "1,0"))
      (rule "polySimp_mulLiterals" (formula "21") (term "1,1,0"))
      (rule "mul_literals" (formula "21") (term "0,1,0"))
      (rule "polySimp_elimOne" (formula "21") (term "1,1,0"))
      (rule "inEqSimp_subsumption1" (formula "9") (ifseqformula "12"))
      (rule "leq_literals" (formula "9") (term "0"))
       (builtin "One Step Simplification" (formula "9"))
      (rule "true_left" (formula "9"))
      (rule "inEqSimp_subsumption0" (formula "20") (term "1") (ifseqformula "12"))
      (rule "inEqSimp_homoInEq0" (formula "20") (term "0,1"))
      (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,1"))
      (rule "polySimp_rightDist" (formula "20") (term "1,0,0,1"))
      (rule "mul_literals" (formula "20") (term "0,1,0,0,1"))
      (rule "polySimp_addAssoc" (formula "20") (term "0,0,1"))
      (rule "polySimp_addComm1" (formula "20") (term "0,0,0,1"))
      (rule "add_literals" (formula "20") (term "0,0,0,0,1"))
      (rule "polySimp_pullOutFactor1b" (formula "20") (term "0,0,1"))
      (rule "add_literals" (formula "20") (term "1,1,0,0,1"))
      (rule "times_zero_1" (formula "20") (term "1,0,0,1"))
      (rule "add_zero_right" (formula "20") (term "0,0,1"))
      (rule "qeq_literals" (formula "20") (term "0,1"))
       (builtin "One Step Simplification" (formula "20"))
      (rule "inEqSimp_geqRight" (formula "20"))
      (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
      (rule "mul_literals" (formula "1") (term "0,1,0,0"))
      (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
      (rule "add_literals" (formula "1") (term "0,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "1"))
      (rule "polySimp_mulComm0" (formula "1") (term "1"))
      (rule "polySimp_rightDist" (formula "1") (term "1"))
      (rule "mul_literals" (formula "1") (term "0,1"))
      (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
      (rule "polySimp_elimOne" (formula "1") (term "1,1"))
      (rule "inEqSimp_subsumption1" (formula "6") (ifseqformula "12"))
      (rule "leq_literals" (formula "6") (term "0"))
       (builtin "One Step Simplification" (formula "6"))
      (rule "true_left" (formula "6"))
      (rule "inEqSimp_subsumption0" (formula "5") (ifseqformula "9"))
      (rule "leq_literals" (formula "5") (term "0"))
       (builtin "One Step Simplification" (formula "5"))
      (rule "true_left" (formula "5"))
      (rule "inEqSimp_subsumption1" (formula "6") (ifseqformula "12"))
      (rule "leq_literals" (formula "6") (term "0"))
       (builtin "One Step Simplification" (formula "6"))
      (rule "true_left" (formula "6"))
      (rule "inEqSimp_subsumption0" (formula "10") (ifseqformula "1"))
      (rule "inEqSimp_homoInEq0" (formula "10") (term "0"))
      (rule "polySimp_mulComm0" (formula "10") (term "1,0,0"))
      (rule "polySimp_rightDist" (formula "10") (term "1,0,0"))
      (rule "mul_literals" (formula "10") (term "0,1,0,0"))
      (rule "polySimp_addAssoc" (formula "10") (term "0,0"))
      (rule "polySimp_addComm1" (formula "10") (term "0,0,0"))
      (rule "add_literals" (formula "10") (term "0,0,0,0"))
      (rule "polySimp_pullOutFactor1b" (formula "10") (term "0,0"))
      (rule "add_literals" (formula "10") (term "1,1,0,0"))
      (rule "times_zero_1" (formula "10") (term "1,0,0"))
      (rule "add_zero_right" (formula "10") (term "0,0"))
      (rule "qeq_literals" (formula "10") (term "0"))
       (builtin "One Step Simplification" (formula "10"))
      (rule "true_left" (formula "10"))
      (rule "inEqSimp_exactShadow3" (formula "9") (ifseqformula "1"))
      (rule "mul_literals" (formula "9") (term "0,0"))
      (rule "polySimp_addAssoc" (formula "9") (term "0"))
      (rule "add_literals" (formula "9") (term "0,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "9"))
      (rule "mul_literals" (formula "9") (term "1"))
      (rule "inEqSimp_subsumption1" (formula "11") (ifseqformula "9"))
      (rule "leq_literals" (formula "11") (term "0"))
       (builtin "One Step Simplification" (formula "11"))
      (rule "true_left" (formula "11"))
      (rule "inEqSimp_contradInEq1" (formula "5") (ifseqformula "9"))
      (rule "qeq_literals" (formula "5") (term "0"))
       (builtin "One Step Simplification" (formula "5"))
      (rule "closeFalse" (formula "5"))
   )
   (branch "Usage"
       (builtin "One Step Simplification" (formula "21"))
      (rule "translateJavaSubInt" (formula "21") (term "0,1,0"))
      (rule "polySimp_elimSub" (formula "21") (term "0,1,0"))
      (rule "greater_equal_than_comparison_simple" (formula "21") (term "1"))
       (builtin "One Step Simplification" (formula "21"))
      (rule "variableDeclarationAssign" (formula "21") (term "1"))
      (rule "variableDeclaration" (formula "21") (term "1") (newnames "log_buckets"))
      (rule "compound_addition_1" (formula "21") (term "1") (inst "#v=x"))
      (rule "variableDeclarationAssign" (formula "21") (term "1"))
      (rule "variableDeclaration" (formula "21") (term "1") (newnames "x_2"))
       (builtin "Use Operation Contract" (formula "21") (newnames "heapBefore_log2,result_21,exc_25") (contract "de.wiesler.Constants[de.wiesler.Constants::log2(int)].JML normal_behavior operation contract.0"))
      (branch "Post (log2)"
          (builtin "One Step Simplification" (formula "18"))
         (rule "expand_inInt" (formula "18") (term "0,1,0"))
         (rule "replace_int_MAX" (formula "18") (term "1,0,0,1,0"))
         (rule "replace_int_MIN" (formula "18") (term "0,1,0,1,0"))
         (rule "andLeft" (formula "18"))
         (rule "andLeft" (formula "18"))
         (rule "andLeft" (formula "18"))
         (rule "andLeft" (formula "18"))
         (rule "inEqSimp_commuteLeq" (formula "19"))
         (rule "assignment" (formula "25") (term "1"))
          (builtin "One Step Simplification" (formula "25"))
         (rule "assignmentAdditionInt" (formula "25") (term "1"))
         (branch "Overflow check"
             (builtin "One Step Simplification" (formula "25"))
            (rule "expand_inInt" (formula "25"))
            (rule "replace_int_MIN" (formula "25") (term "0,1"))
            (rule "replace_int_MAX" (formula "25") (term "1,0"))
            (rule "polySimp_addComm0" (formula "25") (term "1,1"))
            (rule "polySimp_addComm0" (formula "25") (term "0,0"))
            (rule "inEqSimp_ltToLeq" (formula "11") (term "0,0,0,0,0"))
            (rule "polySimp_rightDist" (formula "11") (term "1,0,0,0,0,0,0,0"))
            (rule "mul_literals" (formula "11") (term "0,1,0,0,0,0,0,0,0"))
            (rule "polySimp_addAssoc" (formula "11") (term "0,0,0,0,0,0,0"))
            (rule "add_literals" (formula "11") (term "0,0,0,0,0,0,0,0"))
            (rule "inEqSimp_ltToLeq" (formula "11") (term "1,0"))
            (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,1,0"))
            (rule "polySimp_addComm1" (formula "11") (term "0,1,0"))
            (rule "inEqSimp_homoInEq0" (formula "25") (term "1"))
            (rule "mul_literals" (formula "25") (term "1,0,1"))
            (rule "polySimp_addComm1" (formula "25") (term "0,1"))
            (rule "add_literals" (formula "25") (term "0,0,1"))
            (rule "inEqSimp_homoInEq0" (formula "25") (term "0"))
            (rule "polySimp_mulComm0" (formula "25") (term "1,0,0"))
            (rule "polySimp_rightDist" (formula "25") (term "1,0,0"))
            (rule "mul_literals" (formula "25") (term "0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "25") (term "0,0"))
            (rule "add_literals" (formula "25") (term "0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,0,0,0,0"))
            (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0,0,0"))
            (rule "polySimp_rightDist" (formula "11") (term "1,0,0,0,0,0"))
            (rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,0,0,0,0"))
            (rule "mul_literals" (formula "11") (term "0,1,0,0,0,0,0"))
            (rule "polySimp_elimOne" (formula "11") (term "1,1,0,0,0,0,0"))
            (rule "inEqSimp_sepNegMonomial0" (formula "11") (term "1,0"))
            (rule "polySimp_mulLiterals" (formula "11") (term "0,1,0"))
            (rule "polySimp_elimOne" (formula "11") (term "0,1,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "25") (term "1"))
            (rule "mul_literals" (formula "25") (term "1,1"))
            (rule "inEqSimp_sepNegMonomial1" (formula "25") (term "0"))
            (rule "polySimp_mulLiterals" (formula "25") (term "0,0"))
            (rule "polySimp_elimOne" (formula "25") (term "0,0"))
            (rule "inEqSimp_subsumption1" (formula "9") (ifseqformula "12"))
            (rule "leq_literals" (formula "9") (term "0"))
             (builtin "One Step Simplification" (formula "9"))
            (rule "true_left" (formula "9"))
            (rule "inEqSimp_subsumption1" (formula "7") (ifseqformula "13"))
            (rule "leq_literals" (formula "7") (term "0"))
             (builtin "One Step Simplification" (formula "7"))
            (rule "true_left" (formula "7"))
            (rule "inEqSimp_subsumption1" (formula "23") (term "1") (ifseqformula "17"))
            (rule "leq_literals" (formula "23") (term "0,1"))
             (builtin "One Step Simplification" (formula "23"))
            (rule "inEqSimp_leqRight" (formula "23"))
            (rule "mul_literals" (formula "1") (term "1,0,0"))
            (rule "add_literals" (formula "1") (term "0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "1"))
            (rule "mul_literals" (formula "1") (term "1"))
            (rule "inEqSimp_subsumption1" (formula "6") (ifseqformula "11"))
            (rule "leq_literals" (formula "6") (term "0"))
             (builtin "One Step Simplification" (formula "6"))
            (rule "true_left" (formula "6"))
            (rule "inEqSimp_subsumption0" (formula "5") (ifseqformula "8"))
            (rule "leq_literals" (formula "5") (term "0"))
             (builtin "One Step Simplification" (formula "5"))
            (rule "true_left" (formula "5"))
            (rule "inEqSimp_subsumption1" (formula "16") (ifseqformula "1"))
            (rule "leq_literals" (formula "16") (term "0"))
             (builtin "One Step Simplification" (formula "16"))
            (rule "true_left" (formula "16"))
            (rule "inEqSimp_antiSymm" (formula "1") (ifseqformula "15"))
            (rule "applyEq" (formula "2") (term "0") (ifseqformula "1"))
            (rule "qeq_literals" (formula "2"))
            (rule "true_left" (formula "2"))
            (rule "applyEq" (formula "16") (term "1,0") (ifseqformula "1"))
            (rule "applyEq" (formula "15") (term "0") (ifseqformula "1"))
            (rule "leq_literals" (formula "15"))
            (rule "true_left" (formula "15"))
            (rule "inEqSimp_exactShadow3" (formula "9") (ifseqformula "10"))
            (rule "mul_literals" (formula "9") (term "0,0"))
            (rule "polySimp_addAssoc" (formula "9") (term "0"))
            (rule "add_literals" (formula "9") (term "0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "9"))
            (rule "mul_literals" (formula "9") (term "1"))
            (rule "inEqSimp_subsumption1" (formula "12") (ifseqformula "9"))
            (rule "leq_literals" (formula "12") (term "0"))
             (builtin "One Step Simplification" (formula "12"))
            (rule "true_left" (formula "12"))
            (rule "inEqSimp_and_subsumption3" (formula "8") (term "0,0,0"))
            (rule "leq_literals" (formula "8") (term "0,1,0,0,0,0"))
             (builtin "One Step Simplification" (formula "8"))
            (rule "nnf_imp2or" (formula "8") (term "0"))
            (rule "nnf_notAnd" (formula "8") (term "0,0"))
            (rule "inEqSimp_notLeq" (formula "8") (term "1,0,0"))
            (rule "mul_literals" (formula "8") (term "1,0,0,1,0,0"))
            (rule "add_literals" (formula "8") (term "0,0,1,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "8") (term "1,0,0"))
            (rule "mul_literals" (formula "8") (term "1,1,0,0"))
            (rule "nnf_notAnd" (formula "8") (term "0,0,0"))
            (rule "inEqSimp_notLeq" (formula "8") (term "0,0,0,0"))
            (rule "polySimp_rightDist" (formula "8") (term "1,0,0,0,0,0,0"))
            (rule "mul_literals" (formula "8") (term "0,1,0,0,0,0,0,0"))
            (rule "polySimp_addAssoc" (formula "8") (term "0,0,0,0,0,0"))
            (rule "add_literals" (formula "8") (term "0,0,0,0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "8") (term "0,0,0,0"))
            (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,0,0"))
            (rule "polySimp_rightDist" (formula "8") (term "1,0,0,0,0"))
            (rule "polySimp_mulLiterals" (formula "8") (term "1,1,0,0,0,0"))
            (rule "mul_literals" (formula "8") (term "0,1,0,0,0,0"))
            (rule "polySimp_elimOne" (formula "8") (term "1,1,0,0,0,0"))
            (rule "inEqSimp_notGeq" (formula "8") (term "1,0,0,0"))
            (rule "times_zero_1" (formula "8") (term "1,0,0,1,0,0,0"))
            (rule "add_literals" (formula "8") (term "0,0,1,0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "1,0,0,0"))
            (rule "mul_literals" (formula "8") (term "1,1,0,0,0"))
            (rule "Definition_axiom_for_isLog2Of_in_de_wiesler_Constants" (formula "15") (term "0"))
             (builtin "One Step Simplification" (formula "15"))
            (rule "qeq_literals" (formula "15") (term "0,0,0"))
             (builtin "One Step Simplification" (formula "15"))
            (rule "equal_literals" (formula "15") (term "0,0,1"))
             (builtin "One Step Simplification" (formula "15"))
            (rule "leq_literals" (formula "15") (term "0,0"))
             (builtin "One Step Simplification" (formula "15"))
            (rule "closeFalse" (formula "15"))
         )
         (branch "Usage"
             (builtin "One Step Simplification" (formula "25"))
             (builtin "Block Contract (Internal)" (formula "25") (newnames "result_22,exc_26,heap_Before_BLOCK,savedHeap_Before_BLOCK,o,f"))
            (branch "Validity"
                (builtin "One Step Simplification" (formula "26"))
                (builtin "One Step Simplification" (formula "22") (ifInst ""  (formula "8")) (ifInst ""  (formula "1")))
               (rule "true_left" (formula "22"))
               (rule "eqSymm" (formula "25") (term "0,0,1,0,1"))
               (rule "translateJavaAddInt" (formula "25") (term "0,0,0"))
               (rule "polySimp_addComm0" (formula "25") (term "0,0,0"))
               (rule "variableDeclarationAssign" (formula "25") (term "1"))
               (rule "variableDeclaration" (formula "25") (term "1") (newnames "exc_26_1"))
               (rule "assignment" (formula "25") (term "1"))
                (builtin "One Step Simplification" (formula "25"))
               (rule "emptyStatement" (formula "25") (term "1"))
                (builtin "One Step Simplification" (formula "25"))
               (rule "emptyStatement" (formula "25") (term "1"))
               (rule "tryEmpty" (formula "25") (term "1"))
               (rule "blockEmptyLabel" (formula "25") (term "1"))
               (rule "blockEmpty" (formula "25") (term "1"))
               (rule "methodCallEmpty" (formula "25") (term "1"))
               (rule "emptyModality" (formula "25") (term "1"))
               (rule "andRight" (formula "25"))
               (branch "Case 1"
                   (builtin "One Step Simplification" (formula "25"))
                  (rule "closeTrue" (formula "25"))
               )
               (branch "Case 2"
                   (builtin "One Step Simplification" (formula "25"))
                  (rule "closeTrue" (formula "25"))
               )
            )
            (branch "Precondition"
               (rule "andRight" (formula "25"))
               (branch "Case 1"
                   (builtin "One Step Simplification" (formula "25") (ifInst ""  (formula "8")))
                  (rule "closeTrue" (formula "25"))
               )
               (branch "Case 2"
                   (builtin "One Step Simplification" (formula "25") (ifInst ""  (formula "1")))
                  (rule "closeTrue" (formula "25"))
               )
            )
            (branch "Usage"
                (builtin "One Step Simplification" (formula "22"))
                (builtin "One Step Simplification" (formula "26"))
               (rule "andLeft" (formula "22"))
               (rule "andLeft" (formula "22"))
               (rule "andLeft" (formula "23"))
               (rule "translateJavaAddInt" (formula "29") (term "0,1,0"))
               (rule "translateJavaAddInt" (formula "25") (term "0"))
               (rule "replace_known_left" (formula "24") (term "0") (ifseqformula "22"))
                (builtin "One Step Simplification" (formula "24"))
               (rule "true_left" (formula "24"))
               (rule "polySimp_addComm0" (formula "28") (term "0,1,0"))
               (rule "polySimp_addComm0" (formula "24") (term "0"))
               (rule "elim_double_block_2" (formula "28") (term "1"))
               (rule "ifUnfold" (formula "28") (term "1") (inst "#boolv=x"))
               (rule "variableDeclaration" (formula "28") (term "1") (newnames "x_3"))
               (rule "inequality_comparison_simple" (formula "28") (term "1"))
                (builtin "One Step Simplification" (formula "28"))
               (rule "replace_known_left" (formula "28") (term "0,0,1,0") (ifseqformula "22"))
                (builtin "One Step Simplification" (formula "28"))
               (rule "arrayLengthNotNegative" (formula "16") (term "0"))
               (rule "applyEq" (formula "16") (term "0") (ifseqformula "17"))
               (rule "qeq_literals" (formula "16"))
               (rule "true_left" (formula "16"))
               (rule "arrayLengthNotNegative" (formula "17") (term "0"))
               (rule "applyEq" (formula "17") (term "0") (ifseqformula "18"))
               (rule "qeq_literals" (formula "17"))
               (rule "true_left" (formula "17"))
               (rule "arrayLengthIsAShort" (formula "17") (term "0"))
               (rule "expand_inShort" (formula "17"))
               (rule "replace_short_MIN" (formula "17") (term "0,1"))
               (rule "replace_short_MAX" (formula "17") (term "1,0"))
               (rule "andLeft" (formula "17"))
               (rule "inEqSimp_commuteLeq" (formula "18"))
               (rule "applyEq" (formula "18") (term "0") (ifseqformula "19"))
               (rule "qeq_literals" (formula "18"))
               (rule "true_left" (formula "18"))
               (rule "applyEq" (formula "17") (term "0") (ifseqformula "18"))
               (rule "leq_literals" (formula "17"))
               (rule "true_left" (formula "17"))
               (rule "arrayLengthIsAShort" (formula "16") (term "0"))
               (rule "expand_inShort" (formula "16"))
               (rule "replace_short_MIN" (formula "16") (term "0,1"))
               (rule "replace_short_MAX" (formula "16") (term "1,0"))
               (rule "andLeft" (formula "16"))
               (rule "inEqSimp_commuteLeq" (formula "17"))
               (rule "applyEq" (formula "17") (term "0") (ifseqformula "18"))
               (rule "qeq_literals" (formula "17"))
               (rule "true_left" (formula "17"))
               (rule "applyEq" (formula "16") (term "0") (ifseqformula "17"))
               (rule "leq_literals" (formula "16"))
               (rule "true_left" (formula "16"))
               (rule "ifSplit" (formula "28"))
               (branch "if x_3 true"
                   (builtin "One Step Simplification" (formula "29"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "closeFalse" (formula "1"))
               )
               (branch "if x_3 false"
                   (builtin "One Step Simplification" (formula "29"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "true_left" (formula "1"))
                  (rule "blockEmpty" (formula "28") (term "1"))
                  (rule "variableDeclarationAssign" (formula "28") (term "1"))
                  (rule "variableDeclaration" (formula "28") (term "1") (newnames "actual_num_buckets"))
                  (rule "assignmentShiftLeftInt" (formula "28") (term "1"))
                   (builtin "One Step Simplification" (formula "28"))
                   (builtin "Block Contract (Internal)" (formula "28") (newnames "result_23,exc_27,heap_Before_BLOCK_0,savedHeap_Before_BLOCK_0,o,f"))
                  (branch "Validity"
                      (builtin "One Step Simplification" (formula "29"))
                      (builtin "One Step Simplification" (formula "25") (ifInst ""  (formula "8")) (ifInst ""  (formula "1")))
                     (rule "true_left" (formula "25"))
                     (rule "eqSymm" (formula "28") (term "0,0,1,0,1"))
                     (rule "variableDeclarationAssign" (formula "28") (term "1"))
                     (rule "variableDeclaration" (formula "28") (term "1") (newnames "exc_27_1"))
                     (rule "assignment" (formula "28") (term "1"))
                      (builtin "One Step Simplification" (formula "28"))
                     (rule "emptyStatement" (formula "28") (term "1"))
                      (builtin "One Step Simplification" (formula "28"))
                     (rule "emptyStatement" (formula "28") (term "1"))
                     (rule "tryEmpty" (formula "28") (term "1"))
                     (rule "blockEmptyLabel" (formula "28") (term "1"))
                     (rule "blockEmpty" (formula "28") (term "1"))
                     (rule "methodCallEmpty" (formula "28") (term "1"))
                     (rule "emptyModality" (formula "28") (term "1"))
                     (rule "andRight" (formula "28"))
                     (branch "Case 1"
                         (builtin "One Step Simplification" (formula "28"))
                        (rule "closeTrue" (formula "28"))
                     )
                     (branch "Case 2"
                         (builtin "One Step Simplification" (formula "28"))
                        (rule "closeTrue" (formula "28"))
                     )
                  )
                  (branch "Precondition"
                     (rule "andRight" (formula "28"))
                     (branch "Case 1"
                         (builtin "One Step Simplification" (formula "28") (ifInst ""  (formula "8")))
                        (rule "closeTrue" (formula "28"))
                     )
                     (branch "Case 2"
                         (builtin "One Step Simplification" (formula "28") (ifInst ""  (formula "1")))
                        (rule "closeTrue" (formula "28"))
                     )
                  )
                  (branch "Usage"
                      (builtin "One Step Simplification" (formula "29"))
                      (builtin "One Step Simplification" (formula "25"))
                     (rule "andLeft" (formula "25"))
                     (rule "andLeft" (formula "25"))
                     (rule "andLeft" (formula "27"))
                     (rule "andLeft" (formula "26"))
                     (rule "replace_known_left" (formula "27") (term "0") (ifseqformula "25"))
                      (builtin "One Step Simplification" (formula "27"))
                     (rule "true_left" (formula "27"))
                     (rule "inEqSimp_commuteLeq" (formula "27"))
                     (rule "applyEq" (formula "27") (term "0") (ifseqformula "16"))
                     (rule "inEqSimp_commuteGeq" (formula "27"))
                     (rule "elim_double_block_2" (formula "32") (term "1"))
                     (rule "ifUnfold" (formula "32") (term "1") (inst "#boolv=x"))
                     (rule "variableDeclaration" (formula "32") (term "1") (newnames "x_4"))
                     (rule "inequality_comparison_simple" (formula "32") (term "1"))
                      (builtin "One Step Simplification" (formula "32"))
                     (rule "replace_known_left" (formula "32") (term "0,0,1,0") (ifseqformula "25"))
                      (builtin "One Step Simplification" (formula "32"))
                     (rule "ifSplit" (formula "32"))
                     (branch "if x_4 true"
                         (builtin "One Step Simplification" (formula "33"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "closeFalse" (formula "1"))
                     )
                     (branch "if x_4 false"
                         (builtin "One Step Simplification" (formula "33"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "true_left" (formula "1"))
                        (rule "blockEmpty" (formula "32") (term "1"))
                        (rule "for_to_while" (formula "32") (term "1") (inst "#outerLabel=_label1") (inst "#innerLabel=_label0"))
                        (rule "variableDeclarationAssign" (formula "32") (term "1"))
                        (rule "variableDeclaration" (formula "32") (term "1") (newnames "i"))
                        (rule "assignment" (formula "32") (term "1"))
                         (builtin "One Step Simplification" (formula "32"))
                        (rule "elim_double_block_3" (formula "32") (term "1"))
                        (rule "loopScopeInvDia" (formula "32") (term "1") (newnames "i_0,o,f") (inst "#x=x_1") (inst "#variant=x") (inst "#permissionsBefore_LOOP=h_2") (inst "#savedHeapBefore_LOOP=h_1") (inst "#heapBefore_LOOP=h") (inst "anon_permissions_LOOP=anon_permissions_LOOP_0") (inst "anon_savedHeap_LOOP=anon_savedHeap_LOOP_0") (inst "anon_heap_LOOP=anon_heap_LOOP_0"))
                        (branch "Invariant Initially Valid"
                           (rule "closeTrue" (formula "32"))
                        )
                        (branch "Invariant Preserved and Used"
                            (builtin "One Step Simplification" (formula "33"))
                           (rule "expand_inInt" (formula "33") (term "1,0,0,1,0,0,0,0"))
                           (rule "expand_inInt" (formula "33") (term "1,0,0,1,0,0,0"))
                           (rule "replace_int_MIN" (formula "33") (term "0,1,1,0,0,1,0,0,0,0"))
                           (rule "replace_int_MAX" (formula "33") (term "1,0,1,0,0,1,0,0,0,0"))
                           (rule "replace_int_MIN" (formula "33") (term "0,1,1,0,0,1,0,0,0"))
                           (rule "replace_int_MAX" (formula "33") (term "1,0,1,0,0,1,0,0,0"))
                           (rule "impRight" (formula "33"))
                           (rule "andLeft" (formula "1"))
                           (rule "andLeft" (formula "1"))
                           (rule "andLeft" (formula "1"))
                           (rule "andLeft" (formula "3"))
                           (rule "andLeft" (formula "1"))
                           (rule "andLeft" (formula "1"))
                           (rule "translateJavaSubInt" (formula "40") (term "2,1,0,1,0,1,0"))
                           (rule "translateJavaSubInt" (formula "40") (term "0,1,1,0,1"))
                           (rule "translateJavaSubInt" (formula "40") (term "0,1,1,0"))
                           (rule "translateJavaSubInt" (formula "7") (term "2,1,0,0"))
                           (rule "translateJavaSubInt" (formula "4") (term "2,1,0,0,1,0"))
                           (rule "translateJavaSubInt" (formula "4") (term "2,1,0,1,1,0"))
                           (rule "translateJavaSubInt" (formula "4") (term "0,2,1,1,0"))
                           (rule "translateJavaSubInt" (formula "3") (term "2,1,0,0,1,0"))
                           (rule "polySimp_elimSub" (formula "40") (term "2,1,0,1,0,1,0"))
                           (rule "mul_literals" (formula "40") (term "1,2,1,0,1,0,1,0"))
                           (rule "polySimp_elimSub" (formula "40") (term "0,1,1,0,1"))
                           (rule "polySimp_elimSub" (formula "40") (term "0,1,1,0"))
                           (rule "polySimp_elimSub" (formula "7") (term "2,1,0,0"))
                           (rule "mul_literals" (formula "7") (term "1,2,1,0,0"))
                           (rule "polySimp_elimSub" (formula "4") (term "2,1,0,0,1,0"))
                           (rule "mul_literals" (formula "4") (term "1,2,1,0,0,1,0"))
                           (rule "polySimp_elimSub" (formula "4") (term "2,1,0,1,1,0"))
                           (rule "mul_literals" (formula "4") (term "1,2,1,0,1,1,0"))
                           (rule "polySimp_elimSub" (formula "4") (term "0,2,1,1,0"))
                           (rule "mul_literals" (formula "4") (term "1,0,2,1,1,0"))
                           (rule "polySimp_elimSub" (formula "3") (term "2,1,0,0,1,0"))
                           (rule "mul_literals" (formula "3") (term "1,2,1,0,0,1,0"))
                           (rule "polySimp_addComm0" (formula "40") (term "2,1,0,1,0,1,0"))
                           (rule "polySimp_addComm0" (formula "40") (term "0,1,1,0"))
                           (rule "polySimp_addComm0" (formula "7") (term "2,1,0,0"))
                           (rule "polySimp_addComm0" (formula "4") (term "2,1,0,0,1,0"))
                           (rule "polySimp_addComm0" (formula "4") (term "2,1,0,1,1,0"))
                           (rule "polySimp_addComm0" (formula "4") (term "0,2,1,1,0"))
                           (rule "polySimp_addComm0" (formula "3") (term "2,1,0,0,1,0"))
                           (rule "inEqSimp_commuteLeq" (formula "4") (term "0,0,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "4") (term "1,1,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "6"))
                           (rule "inEqSimp_commuteLeq" (formula "5"))
                           (rule "inEqSimp_commuteLeq" (formula "3") (term "0,0,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "3") (term "1,1,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "2"))
                           (rule "variableDeclaration" (formula "40") (term "1") (newnames "x_5"))
                           (rule "applyEq" (formula "6") (term "0") (ifseqformula "24"))
                           (rule "inEqSimp_commuteGeq" (formula "6"))
                           (rule "pullOutSelect" (formula "4") (term "1,1,0") (inst "selectSK=arr_0"))
                           (rule "simplifySelectOfAnon" (formula "4"))
                            (builtin "One Step Simplification" (formula "4") (ifInst ""  (formula "40")) (ifInst ""  (formula "11")))
                           (rule "elementOfArrayRangeConcrete" (formula "4") (term "0,0"))
                            (builtin "One Step Simplification" (formula "4"))
                           (rule "commute_and" (formula "5") (term "0,0,0"))
                           (rule "commute_and_2" (formula "5") (term "0,0"))
                           (rule "commute_and" (formula "3") (term "0,0,0"))
                           (rule "commute_and" (formula "3") (term "1,0,0"))
                           (rule "commute_and" (formula "5") (term "1,0,0,0"))
                           (rule "shift_paren_and" (formula "3") (term "0,0"))
                           (rule "commute_and_2" (formula "3") (term "0,0,0"))
                           (rule "shift_paren_and" (formula "5") (term "0,0,0"))
                           (rule "ifElseUnfold" (formula "41") (term "1") (inst "#boolv=x_6"))
                           (rule "variableDeclaration" (formula "41") (term "1") (newnames "x_6"))
                           (rule "less_than_comparison_simple" (formula "41") (term "1"))
                            (builtin "One Step Simplification" (formula "41"))
                           (rule "ifElseSplit" (formula "41"))
                           (branch "if x_6 true"
                               (builtin "One Step Simplification" (formula "42"))
                               (builtin "One Step Simplification" (formula "1"))
                              (rule "eval_order_array_access3" (formula "42") (term "1") (inst "#v1=x_7") (inst "#v2=x_6") (inst "#v0=x_arr"))
                              (rule "variableDeclarationAssign" (formula "42") (term "1"))
                              (rule "variableDeclaration" (formula "42") (term "1") (newnames "x_arr"))
                              (rule "assignment" (formula "42") (term "1"))
                               (builtin "One Step Simplification" (formula "42"))
                              (rule "variableDeclarationAssign" (formula "42") (term "1"))
                              (rule "variableDeclaration" (formula "42") (term "1") (newnames "x_8"))
                              (rule "assignment" (formula "42") (term "1"))
                               (builtin "One Step Simplification" (formula "42"))
                              (rule "variableDeclarationAssign" (formula "42") (term "1"))
                              (rule "variableDeclaration" (formula "42") (term "1") (newnames "x_7"))
                              (rule "eval_order_array_access5" (formula "42") (term "1") (inst "#v1=x_9") (inst "#ar1=x_arr_1"))
                              (rule "variableDeclarationAssign" (formula "42") (term "1"))
                              (rule "variableDeclaration" (formula "42") (term "1") (newnames "x_arr_1"))
                              (rule "assignment" (formula "42") (term "1"))
                               (builtin "One Step Simplification" (formula "42"))
                              (rule "variableDeclarationAssign" (formula "42") (term "1"))
                              (rule "variableDeclaration" (formula "42") (term "1") (newnames "x_9"))
                              (rule "assignmentSubtractionInt" (formula "42") (term "1"))
                              (branch "Overflow check"
                                  (builtin "One Step Simplification" (formula "42"))
                                 (rule "expand_inInt" (formula "42"))
                                 (rule "replace_int_MAX" (formula "42") (term "1,0"))
                                 (rule "replace_int_MIN" (formula "42") (term "0,1"))
                                 (rule "polySimp_elimSub" (formula "42") (term "0,0"))
                                 (rule "mul_literals" (formula "42") (term "1,0,0"))
                                 (rule "polySimp_elimSub" (formula "42") (term "1,1"))
                                 (rule "mul_literals" (formula "42") (term "1,1,1"))
                                 (rule "polySimp_addComm0" (formula "42") (term "0,0"))
                                 (rule "polySimp_addComm0" (formula "42") (term "1,1"))
                                 (rule "inEqSimp_ltToLeq" (formula "1"))
                                 (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                 (rule "polySimp_addComm1" (formula "1") (term "0"))
                                 (rule "inEqSimp_ltToLeq" (formula "21") (term "1,0"))
                                 (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,1,0"))
                                 (rule "polySimp_addComm1" (formula "21") (term "0,1,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "4") (term "0,0,0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "4") (term "1,0,0,0,0,0,0,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "38"))
                                 (rule "polySimp_mulComm0" (formula "38") (term "1,0,0"))
                                 (rule "polySimp_addComm1" (formula "38") (term "0"))
                                 (rule "inEqSimp_ltToLeq" (formula "21") (term "0,0,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "21") (term "1,0,0,0,0,0,0,0"))
                                 (rule "mul_literals" (formula "21") (term "0,1,0,0,0,0,0,0,0"))
                                 (rule "polySimp_addAssoc" (formula "21") (term "0,0,0,0,0,0,0"))
                                 (rule "add_literals" (formula "21") (term "0,0,0,0,0,0,0,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "6") (term "0,0,0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,0,0,0,0,0"))
                                 (rule "inEqSimp_homoInEq0" (formula "5") (term "0,0,0"))
                                 (rule "polySimp_pullOutFactor1b" (formula "5") (term "0,0,0,0"))
                                 (rule "add_literals" (formula "5") (term "1,1,0,0,0,0"))
                                 (rule "times_zero_1" (formula "5") (term "1,0,0,0,0"))
                                 (rule "add_zero_right" (formula "5") (term "0,0,0,0"))
                                 (rule "qeq_literals" (formula "5") (term "0,0,0"))
                                  (builtin "One Step Simplification" (formula "5"))
                                 (rule "applyEqReverse" (formula "6") (term "1,1,0") (ifseqformula "5"))
                                 (rule "hideAuxiliaryEq" (formula "5"))
                                 (rule "inEqSimp_homoInEq0" (formula "33"))
                                 (rule "polySimp_mulComm0" (formula "33") (term "1,0"))
                                 (rule "polySimp_rightDist" (formula "33") (term "1,0"))
                                 (rule "mul_literals" (formula "33") (term "0,1,0"))
                                 (rule "polySimp_addAssoc" (formula "33") (term "0"))
                                 (rule "add_literals" (formula "33") (term "0,0"))
                                 (rule "inEqSimp_homoInEq0" (formula "41") (term "0"))
                                 (rule "polySimp_mulComm0" (formula "41") (term "1,0,0"))
                                 (rule "polySimp_rightDist" (formula "41") (term "1,0,0"))
                                 (rule "mul_literals" (formula "41") (term "0,1,0,0"))
                                 (rule "polySimp_addAssoc" (formula "41") (term "0,0"))
                                 (rule "add_literals" (formula "41") (term "0,0,0"))
                                 (rule "inEqSimp_homoInEq0" (formula "41") (term "1"))
                                 (rule "mul_literals" (formula "41") (term "1,0,1"))
                                 (rule "polySimp_addComm1" (formula "41") (term "0,1"))
                                 (rule "add_literals" (formula "41") (term "0,0,1"))
                                 (rule "inEqSimp_sepNegMonomial0" (formula "1"))
                                 (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                                 (rule "polySimp_elimOne" (formula "1") (term "0"))
                                 (rule "inEqSimp_sepNegMonomial0" (formula "20") (term "1,0"))
                                 (rule "polySimp_mulLiterals" (formula "20") (term "0,1,0"))
                                 (rule "polySimp_elimOne" (formula "20") (term "0,1,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "4") (term "0,0,0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "4") (term "1,0,0,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "4") (term "1,0,0,0,0,0"))
                                 (rule "mul_literals" (formula "4") (term "0,1,0,0,0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "4") (term "1,1,0,0,0,0,0"))
                                 (rule "polySimp_elimOne" (formula "4") (term "1,1,0,0,0,0,0"))
                                 (rule "inEqSimp_sepNegMonomial0" (formula "37"))
                                 (rule "polySimp_mulLiterals" (formula "37") (term "0"))
                                 (rule "polySimp_elimOne" (formula "37") (term "0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "0,0,0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "20") (term "1,0,0,0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "20") (term "1,1,0,0,0,0,0"))
                                 (rule "mul_literals" (formula "20") (term "0,1,0,0,0,0,0"))
                                 (rule "polySimp_elimOne" (formula "20") (term "1,1,0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "5") (term "0,0,0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "5") (term "1,0,0,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "5") (term "1,0,0,0,0,0"))
                                 (rule "mul_literals" (formula "5") (term "0,1,0,0,0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "5") (term "1,1,0,0,0,0,0"))
                                 (rule "polySimp_elimOne" (formula "5") (term "1,1,0,0,0,0,0"))
                                 (rule "inEqSimp_sepNegMonomial1" (formula "33"))
                                 (rule "polySimp_mulLiterals" (formula "33") (term "0"))
                                 (rule "polySimp_elimOne" (formula "33") (term "0"))
                                 (rule "inEqSimp_sepNegMonomial1" (formula "41") (term "0"))
                                 (rule "polySimp_mulLiterals" (formula "41") (term "0,0"))
                                 (rule "polySimp_elimOne" (formula "41") (term "0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "41") (term "1"))
                                 (rule "mul_literals" (formula "41") (term "1,1"))
                                 (rule "inEqSimp_subsumption1" (formula "3") (ifseqformula "1"))
                                 (rule "inEqSimp_homoInEq0" (formula "3") (term "0"))
                                 (rule "polySimp_pullOutFactor1b" (formula "3") (term "0,0"))
                                 (rule "add_literals" (formula "3") (term "1,1,0,0"))
                                 (rule "times_zero_1" (formula "3") (term "1,0,0"))
                                 (rule "add_zero_right" (formula "3") (term "0,0"))
                                 (rule "qeq_literals" (formula "3") (term "0"))
                                  (builtin "One Step Simplification" (formula "3"))
                                 (rule "true_left" (formula "3"))
                                 (rule "inEqSimp_subsumption1" (formula "15") (ifseqformula "22"))
                                 (rule "leq_literals" (formula "15") (term "0"))
                                  (builtin "One Step Simplification" (formula "15"))
                                 (rule "true_left" (formula "15"))
                                 (rule "inEqSimp_subsumption1" (formula "13") (ifseqformula "16"))
                                 (rule "leq_literals" (formula "13") (term "0"))
                                  (builtin "One Step Simplification" (formula "13"))
                                 (rule "true_left" (formula "13"))
                                 (rule "inEqSimp_subsumption0" (formula "24") (ifseqformula "30"))
                                 (rule "leq_literals" (formula "24") (term "0"))
                                  (builtin "One Step Simplification" (formula "24"))
                                 (rule "true_left" (formula "24"))
                                 (rule "inEqSimp_subsumption1" (formula "15") (ifseqformula "18"))
                                 (rule "leq_literals" (formula "15") (term "0"))
                                  (builtin "One Step Simplification" (formula "15"))
                                 (rule "true_left" (formula "15"))
                                 (rule "inEqSimp_subsumption0" (formula "36") (term "0") (ifseqformula "15"))
                                 (rule "leq_literals" (formula "36") (term "0,0"))
                                  (builtin "One Step Simplification" (formula "36"))
                                 (rule "inEqSimp_geqRight" (formula "36"))
                                 (rule "mul_literals" (formula "1") (term "1,0,0"))
                                 (rule "add_literals" (formula "1") (term "0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                 (rule "mul_literals" (formula "1") (term "1"))
                                 (rule "inEqSimp_subsumption0" (formula "13") (ifseqformula "16"))
                                 (rule "leq_literals" (formula "13") (term "0"))
                                  (builtin "One Step Simplification" (formula "13"))
                                 (rule "true_left" (formula "13"))
                                 (rule "inEqSimp_subsumption0" (formula "15") (ifseqformula "1"))
                                 (rule "leq_literals" (formula "15") (term "0"))
                                  (builtin "One Step Simplification" (formula "15"))
                                 (rule "true_left" (formula "15"))
                                 (rule "inEqSimp_contradInEq0" (formula "16") (ifseqformula "1"))
                                 (rule "qeq_literals" (formula "16") (term "0"))
                                  (builtin "One Step Simplification" (formula "16"))
                                 (rule "closeFalse" (formula "16"))
                              )
                              (branch "Usage"
                                  (builtin "One Step Simplification" (formula "42"))
                                 (rule "translateJavaSubInt" (formula "42") (term "0,1,0"))
                                 (rule "polySimp_elimSub" (formula "42") (term "0,1,0"))
                                 (rule "mul_literals" (formula "42") (term "1,0,1,0"))
                                 (rule "polySimp_addComm0" (formula "42") (term "0,1,0"))
                                 (rule "assignment_array2" (formula "42"))
                                 (branch "Normal Execution (x_arr_1 != null)"
                                     (builtin "One Step Simplification" (formula "42"))
                                    (rule "replaceKnownSelect_taclet112121011_0" (formula "42") (term "0,1,0"))
                                    (rule "assignment_to_primitive_array_component" (formula "42"))
                                    (branch "Normal Execution (x_arr != null)"
                                        (builtin "One Step Simplification" (formula "42"))
                                       (rule "blockEmpty" (formula "42") (term "1"))
                                       (rule "preincrement" (formula "42") (term "1"))
                                       (rule "compound_int_cast_expression" (formula "42") (term "1") (inst "#v=x_6"))
                                       (rule "variableDeclarationAssign" (formula "42") (term "1"))
                                       (rule "variableDeclaration" (formula "42") (term "1") (newnames "x_10"))
                                       (rule "remove_parentheses_right" (formula "42") (term "1"))
                                       (rule "assignmentAdditionInt" (formula "42") (term "1"))
                                       (branch "Overflow check"
                                           (builtin "One Step Simplification" (formula "42"))
                                          (rule "expand_inInt" (formula "42"))
                                          (rule "replace_int_MAX" (formula "42") (term "1,0"))
                                          (rule "replace_int_MIN" (formula "42") (term "0,1"))
                                          (rule "polySimp_addComm0" (formula "42") (term "0,0"))
                                          (rule "polySimp_addComm0" (formula "42") (term "1,1"))
                                          (rule "inEqSimp_ltToLeq" (formula "6") (term "0,0,0,0,0"))
                                          (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,0,0,0,0,0"))
                                          (rule "inEqSimp_ltToLeq" (formula "38"))
                                          (rule "polySimp_mulComm0" (formula "38") (term "1,0,0"))
                                          (rule "polySimp_addComm1" (formula "38") (term "0"))
                                          (rule "inEqSimp_ltToLeq" (formula "21") (term "0,0,0,0,0"))
                                          (rule "polySimp_rightDist" (formula "21") (term "1,0,0,0,0,0,0,0"))
                                          (rule "mul_literals" (formula "21") (term "0,1,0,0,0,0,0,0,0"))
                                          (rule "polySimp_addAssoc" (formula "21") (term "0,0,0,0,0,0,0"))
                                          (rule "add_literals" (formula "21") (term "0,0,0,0,0,0,0,0"))
                                          (rule "inEqSimp_ltToLeq" (formula "1"))
                                          (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                          (rule "polySimp_addComm1" (formula "1") (term "0"))
                                          (rule "inEqSimp_ltToLeq" (formula "21") (term "1,0"))
                                          (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,1,0"))
                                          (rule "polySimp_addComm1" (formula "21") (term "0,1,0"))
                                          (rule "inEqSimp_ltToLeq" (formula "4") (term "0,0,0,0,0"))
                                          (rule "polySimp_mulComm0" (formula "4") (term "1,0,0,0,0,0,0,0"))
                                          (rule "inEqSimp_homoInEq0" (formula "5") (term "1,0,0"))
                                          (rule "polySimp_mulComm0" (formula "5") (term "1,0,1,0,0"))
                                          (rule "polySimp_rightDist" (formula "5") (term "1,0,1,0,0"))
                                          (rule "mul_literals" (formula "5") (term "0,1,0,1,0,0"))
                                          (rule "polySimp_addComm1" (formula "5") (term "0,1,0,0"))
                                          (rule "polySimp_addAssoc" (formula "5") (term "0,0,1,0,0"))
                                          (rule "add_literals" (formula "5") (term "0,0,0,1,0,0"))
                                          (rule "add_zero_left" (formula "5") (term "0,0,1,0,0"))
                                          (rule "inEqSimp_homoInEq0" (formula "5") (term "0,0,0"))
                                          (rule "polySimp_pullOutFactor1b" (formula "5") (term "0,0,0,0"))
                                          (rule "add_literals" (formula "5") (term "1,1,0,0,0,0"))
                                          (rule "times_zero_1" (formula "5") (term "1,0,0,0,0"))
                                          (rule "add_zero_right" (formula "5") (term "0,0,0,0"))
                                          (rule "qeq_literals" (formula "5") (term "0,0,0"))
                                           (builtin "One Step Simplification" (formula "5"))
                                          (rule "applyEqReverse" (formula "6") (term "1,1,0") (ifseqformula "5"))
                                          (rule "hideAuxiliaryEq" (formula "5"))
                                          (rule "inEqSimp_homoInEq0" (formula "33"))
                                          (rule "polySimp_mulComm0" (formula "33") (term "1,0"))
                                          (rule "polySimp_rightDist" (formula "33") (term "1,0"))
                                          (rule "mul_literals" (formula "33") (term "0,1,0"))
                                          (rule "polySimp_addAssoc" (formula "33") (term "0"))
                                          (rule "add_literals" (formula "33") (term "0,0"))
                                          (rule "inEqSimp_homoInEq0" (formula "41") (term "0"))
                                          (rule "polySimp_mulComm0" (formula "41") (term "1,0,0"))
                                          (rule "polySimp_rightDist" (formula "41") (term "1,0,0"))
                                          (rule "mul_literals" (formula "41") (term "0,1,0,0"))
                                          (rule "polySimp_addAssoc" (formula "41") (term "0,0"))
                                          (rule "add_literals" (formula "41") (term "0,0,0"))
                                          (rule "inEqSimp_homoInEq0" (formula "41") (term "1"))
                                          (rule "mul_literals" (formula "41") (term "1,0,1"))
                                          (rule "polySimp_addComm1" (formula "41") (term "0,1"))
                                          (rule "add_literals" (formula "41") (term "0,0,1"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "5") (term "0,0,0,0,0"))
                                          (rule "polySimp_mulComm0" (formula "5") (term "1,0,0,0,0,0"))
                                          (rule "polySimp_rightDist" (formula "5") (term "1,0,0,0,0,0"))
                                          (rule "mul_literals" (formula "5") (term "0,1,0,0,0,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "5") (term "1,1,0,0,0,0,0"))
                                          (rule "polySimp_elimOne" (formula "5") (term "1,1,0,0,0,0,0"))
                                          (rule "inEqSimp_sepNegMonomial0" (formula "37"))
                                          (rule "polySimp_mulLiterals" (formula "37") (term "0"))
                                          (rule "polySimp_elimOne" (formula "37") (term "0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "0,0,0,0,0"))
                                          (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,0,0,0"))
                                          (rule "polySimp_rightDist" (formula "20") (term "1,0,0,0,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "20") (term "1,1,0,0,0,0,0"))
                                          (rule "mul_literals" (formula "20") (term "0,1,0,0,0,0,0"))
                                          (rule "polySimp_elimOne" (formula "20") (term "1,1,0,0,0,0,0"))
                                          (rule "inEqSimp_sepNegMonomial0" (formula "1"))
                                          (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                                          (rule "polySimp_elimOne" (formula "1") (term "0"))
                                          (rule "inEqSimp_sepNegMonomial0" (formula "20") (term "1,0"))
                                          (rule "polySimp_mulLiterals" (formula "20") (term "0,1,0"))
                                          (rule "polySimp_elimOne" (formula "20") (term "0,1,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "4") (term "0,0,0,0,0"))
                                          (rule "polySimp_mulComm0" (formula "4") (term "1,0,0,0,0,0"))
                                          (rule "polySimp_rightDist" (formula "4") (term "1,0,0,0,0,0"))
                                          (rule "mul_literals" (formula "4") (term "0,1,0,0,0,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "4") (term "1,1,0,0,0,0,0"))
                                          (rule "polySimp_elimOne" (formula "4") (term "1,1,0,0,0,0,0"))
                                          (rule "inEqSimp_sepNegMonomial1" (formula "33"))
                                          (rule "polySimp_mulLiterals" (formula "33") (term "0"))
                                          (rule "polySimp_elimOne" (formula "33") (term "0"))
                                          (rule "inEqSimp_sepNegMonomial1" (formula "41") (term "0"))
                                          (rule "polySimp_mulLiterals" (formula "41") (term "0,0"))
                                          (rule "polySimp_elimOne" (formula "41") (term "0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "41") (term "1"))
                                          (rule "mul_literals" (formula "41") (term "1,1"))
                                          (rule "inEqSimp_subsumption1" (formula "14") (ifseqformula "21"))
                                          (rule "leq_literals" (formula "14") (term "0"))
                                           (builtin "One Step Simplification" (formula "14"))
                                          (rule "true_left" (formula "14"))
                                          (rule "inEqSimp_subsumption0" (formula "13") (ifseqformula "18"))
                                          (rule "leq_literals" (formula "13") (term "0"))
                                           (builtin "One Step Simplification" (formula "13"))
                                          (rule "true_left" (formula "13"))
                                          (rule "inEqSimp_subsumption1" (formula "39") (term "1") (ifseqformula "6"))
                                          (rule "leq_literals" (formula "39") (term "0,1"))
                                           (builtin "One Step Simplification" (formula "39"))
                                          (rule "inEqSimp_leqRight" (formula "39"))
                                          (rule "mul_literals" (formula "1") (term "1,0,0"))
                                          (rule "add_literals" (formula "1") (term "0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                                          (rule "mul_literals" (formula "1") (term "1"))
                                          (rule "inEqSimp_subsumption1" (formula "17") (ifseqformula "20"))
                                          (rule "leq_literals" (formula "17") (term "0"))
                                           (builtin "One Step Simplification" (formula "17"))
                                          (rule "true_left" (formula "17"))
                                          (rule "inEqSimp_subsumption1" (formula "15") (ifseqformula "21"))
                                          (rule "leq_literals" (formula "15") (term "0"))
                                           (builtin "One Step Simplification" (formula "15"))
                                          (rule "true_left" (formula "15"))
                                          (rule "inEqSimp_subsumption1" (formula "4") (ifseqformula "2"))
                                          (rule "inEqSimp_homoInEq0" (formula "4") (term "0"))
                                          (rule "polySimp_pullOutFactor1b" (formula "4") (term "0,0"))
                                          (rule "add_literals" (formula "4") (term "1,1,0,0"))
                                          (rule "times_zero_1" (formula "4") (term "1,0,0"))
                                          (rule "add_zero_right" (formula "4") (term "0,0"))
                                          (rule "qeq_literals" (formula "4") (term "0"))
                                           (builtin "One Step Simplification" (formula "4"))
                                          (rule "true_left" (formula "4"))
                                          (rule "inEqSimp_subsumption0" (formula "23") (ifseqformula "29"))
                                          (rule "leq_literals" (formula "23") (term "0"))
                                           (builtin "One Step Simplification" (formula "23"))
                                          (rule "true_left" (formula "23"))
                                          (rule "inEqSimp_subsumption1" (formula "6") (ifseqformula "1"))
                                          (rule "leq_literals" (formula "6") (term "0"))
                                           (builtin "One Step Simplification" (formula "6"))
                                          (rule "true_left" (formula "6"))
                                          (rule "inEqSimp_contradInEq1" (formula "6") (ifseqformula "1"))
                                          (rule "qeq_literals" (formula "6") (term "0"))
                                           (builtin "One Step Simplification" (formula "6"))
                                          (rule "closeFalse" (formula "6"))
                                       )
                                       (branch "Usage"
                                           (builtin "One Step Simplification" (formula "42"))
                                          (rule "translateJavaAddInt" (formula "42") (term "0,1,0"))
                                          (rule "polySimp_addComm0" (formula "42") (term "0,1,0"))
                                          (rule "widening_identity_cast_5" (formula "42") (term "1"))
                                          (rule "assignment" (formula "42") (term "1"))
                                           (builtin "One Step Simplification" (formula "42"))
                                          (rule "blockEmpty" (formula "42") (term "1"))
                                          (rule "lsContinue" (formula "42") (term "1"))
                                           (builtin "One Step Simplification" (formula "42"))
                                          (rule "polySimp_mulComm0" (formula "42") (term "1,0"))
                                          (rule "polySimp_rightDist" (formula "42") (term "1,0"))
                                          (rule "mul_literals" (formula "42") (term "0,1,0"))
                                          (rule "polySimp_addComm0" (formula "42") (term "0"))
                                          (rule "precOfInt" (formula "42"))
                                          (rule "inEqSimp_ltToLeq" (formula "38"))
                                          (rule "polySimp_mulComm0" (formula "38") (term "1,0,0"))
                                          (rule "polySimp_addComm1" (formula "38") (term "0"))
                                          (rule "inEqSimp_ltToLeq" (formula "1"))
                                          (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                          (rule "polySimp_addComm1" (formula "1") (term "0"))
                                          (rule "inEqSimp_ltToLeq" (formula "4") (term "0,0,0,0,0"))
                                          (rule "polySimp_mulComm0" (formula "4") (term "1,0,0,0,0,0,0,0"))
                                          (rule "inEqSimp_ltToLeq" (formula "6") (term "0,0,0,0,0"))
                                          (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,0,0,0,0,0"))
                                          (rule "inEqSimp_ltToLeq" (formula "21") (term "0,0,0,0,0"))
                                          (rule "polySimp_rightDist" (formula "21") (term "1,0,0,0,0,0,0,0"))
                                          (rule "mul_literals" (formula "21") (term "0,1,0,0,0,0,0,0,0"))
                                          (rule "polySimp_addAssoc" (formula "21") (term "0,0,0,0,0,0,0"))
                                          (rule "add_literals" (formula "21") (term "0,0,0,0,0,0,0,0"))
                                          (rule "inEqSimp_ltToLeq" (formula "21") (term "1,0"))
                                          (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,1,0"))
                                          (rule "polySimp_addComm1" (formula "21") (term "0,1,0"))
                                          (rule "inEqSimp_ltToLeq" (formula "42") (term "1"))
                                          (rule "polySimp_rightDist" (formula "42") (term "1,0,0,1"))
                                          (rule "polySimp_mulAssoc" (formula "42") (term "0,1,0,0,1"))
                                          (rule "polySimp_mulComm0" (formula "42") (term "0,0,1,0,0,1"))
                                          (rule "polySimp_mulLiterals" (formula "42") (term "0,1,0,0,1"))
                                          (rule "polySimp_elimOne" (formula "42") (term "0,1,0,0,1"))
                                          (rule "polySimp_addAssoc" (formula "42") (term "0,0,1"))
                                          (rule "polySimp_addAssoc" (formula "42") (term "0,1"))
                                          (rule "polySimp_addComm1" (formula "42") (term "0,0,1"))
                                          (rule "polySimp_pullOutFactor2b" (formula "42") (term "0,1"))
                                          (rule "add_literals" (formula "42") (term "1,1,0,1"))
                                          (rule "times_zero_1" (formula "42") (term "1,0,1"))
                                          (rule "add_zero_right" (formula "42") (term "0,1"))
                                          (rule "polySimp_addAssoc" (formula "42") (term "0,1"))
                                          (rule "polySimp_addComm1" (formula "42") (term "0,0,1"))
                                          (rule "add_literals" (formula "42") (term "0,0,0,1"))
                                          (rule "add_zero_left" (formula "42") (term "0,0,1"))
                                          (rule "polySimp_pullOutFactor1" (formula "42") (term "0,1"))
                                          (rule "add_literals" (formula "42") (term "1,0,1"))
                                          (rule "times_zero_1" (formula "42") (term "0,1"))
                                          (rule "leq_literals" (formula "42") (term "1"))
                                           (builtin "One Step Simplification" (formula "42"))
                                          (rule "inEqSimp_leqRight" (formula "42"))
                                          (rule "add_zero_right" (formula "1") (term "0"))
                                          (rule "polySimp_rightDist" (formula "1") (term "1,0"))
                                          (rule "polySimp_rightDist" (formula "1") (term "0,1,0"))
                                          (rule "polySimp_mulLiterals" (formula "1") (term "1,0,1,0"))
                                          (rule "mul_literals" (formula "1") (term "0,0,1,0"))
                                          (rule "polySimp_elimOne" (formula "1") (term "1,0,1,0"))
                                          (rule "polySimp_addAssoc" (formula "1") (term "0"))
                                          (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                                          (rule "add_literals" (formula "1") (term "0,0,0"))
                                          (rule "add_zero_left" (formula "1") (term "0,0"))
                                          (rule "inEqSimp_homoInEq0" (formula "6") (term "0,0,0"))
                                          (rule "polySimp_pullOutFactor1b" (formula "6") (term "0,0,0,0"))
                                          (rule "add_literals" (formula "6") (term "1,1,0,0,0,0"))
                                          (rule "times_zero_1" (formula "6") (term "1,0,0,0,0"))
                                          (rule "add_zero_right" (formula "6") (term "0,0,0,0"))
                                          (rule "qeq_literals" (formula "6") (term "0,0,0"))
                                           (builtin "One Step Simplification" (formula "6"))
                                          (rule "applyEqReverse" (formula "7") (term "1,1,0") (ifseqformula "6"))
                                          (rule "hideAuxiliaryEq" (formula "6"))
                                          (rule "inEqSimp_homoInEq0" (formula "34"))
                                          (rule "polySimp_mulComm0" (formula "34") (term "1,0"))
                                          (rule "polySimp_rightDist" (formula "34") (term "1,0"))
                                          (rule "mul_literals" (formula "34") (term "0,1,0"))
                                          (rule "polySimp_addAssoc" (formula "34") (term "0"))
                                          (rule "add_literals" (formula "34") (term "0,0"))
                                          (rule "inEqSimp_sepNegMonomial0" (formula "38"))
                                          (rule "polySimp_mulLiterals" (formula "38") (term "0"))
                                          (rule "polySimp_elimOne" (formula "38") (term "0"))
                                          (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                                          (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                                          (rule "polySimp_elimOne" (formula "2") (term "0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "5") (term "0,0,0,0,0"))
                                          (rule "polySimp_mulComm0" (formula "5") (term "1,0,0,0,0,0"))
                                          (rule "polySimp_rightDist" (formula "5") (term "1,0,0,0,0,0"))
                                          (rule "mul_literals" (formula "5") (term "0,1,0,0,0,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "5") (term "1,1,0,0,0,0,0"))
                                          (rule "polySimp_elimOne" (formula "5") (term "1,1,0,0,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "6") (term "0,0,0,0,0"))
                                          (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,0,0,0"))
                                          (rule "polySimp_rightDist" (formula "6") (term "1,0,0,0,0,0"))
                                          (rule "mul_literals" (formula "6") (term "0,1,0,0,0,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "6") (term "1,1,0,0,0,0,0"))
                                          (rule "polySimp_elimOne" (formula "6") (term "1,1,0,0,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "0,0,0,0,0"))
                                          (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,0,0,0"))
                                          (rule "polySimp_rightDist" (formula "21") (term "1,0,0,0,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "21") (term "1,1,0,0,0,0,0"))
                                          (rule "mul_literals" (formula "21") (term "0,1,0,0,0,0,0"))
                                          (rule "polySimp_elimOne" (formula "21") (term "1,1,0,0,0,0,0"))
                                          (rule "inEqSimp_sepNegMonomial0" (formula "21") (term "1,0"))
                                          (rule "polySimp_mulLiterals" (formula "21") (term "0,1,0"))
                                          (rule "polySimp_elimOne" (formula "21") (term "0,1,0"))
                                          (rule "inEqSimp_sepNegMonomial1" (formula "1"))
                                          (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                                          (rule "polySimp_elimOne" (formula "1") (term "0"))
                                          (rule "inEqSimp_sepNegMonomial1" (formula "34"))
                                          (rule "polySimp_mulLiterals" (formula "34") (term "0"))
                                          (rule "polySimp_elimOne" (formula "34") (term "0"))
                                          (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "2"))
                                          (rule "andLeft" (formula "1"))
                                          (rule "inEqSimp_homoInEq1" (formula "1"))
                                          (rule "polySimp_pullOutFactor1b" (formula "1") (term "0"))
                                          (rule "add_literals" (formula "1") (term "1,1,0"))
                                          (rule "times_zero_1" (formula "1") (term "1,0"))
                                          (rule "add_zero_right" (formula "1") (term "0"))
                                          (rule "leq_literals" (formula "1"))
                                          (rule "closeFalse" (formula "1"))
                                       )
                                    )
                                    (branch "Null Reference (x_arr = null)"
                                        (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "42")))
                                       (rule "closeFalse" (formula "1"))
                                    )
                                    (branch "Index Out of Bounds (x_arr != null, but x_8 Out of Bounds!)"
                                        (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "42")))
                                        (builtin "One Step Simplification" (formula "43"))
                                       (rule "false_right" (formula "43"))
                                       (rule "inEqSimp_ltToLeq" (formula "39"))
                                       (rule "polySimp_mulComm0" (formula "39") (term "1,0,0"))
                                       (rule "polySimp_addComm1" (formula "39") (term "0"))
                                       (rule "inEqSimp_ltToLeq" (formula "22") (term "0,0,0,0,0"))
                                       (rule "polySimp_rightDist" (formula "22") (term "1,0,0,0,0,0,0,0"))
                                       (rule "mul_literals" (formula "22") (term "0,1,0,0,0,0,0,0,0"))
                                       (rule "polySimp_addAssoc" (formula "22") (term "0,0,0,0,0,0,0"))
                                       (rule "add_literals" (formula "22") (term "0,0,0,0,0,0,0,0"))
                                       (rule "inEqSimp_ltToLeq" (formula "2"))
                                       (rule "polySimp_mulComm0" (formula "2") (term "1,0,0"))
                                       (rule "polySimp_addComm1" (formula "2") (term "0"))
                                       (rule "inEqSimp_ltToLeq" (formula "5") (term "0,0,0,0,0"))
                                       (rule "polySimp_mulComm0" (formula "5") (term "1,0,0,0,0,0,0,0"))
                                       (rule "inEqSimp_ltToLeq" (formula "22") (term "1,0"))
                                       (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,1,0"))
                                       (rule "polySimp_addComm1" (formula "22") (term "0,1,0"))
                                       (rule "inEqSimp_ltToLeq" (formula "7") (term "0,0,0,0,0"))
                                       (rule "polySimp_mulComm0" (formula "7") (term "1,0,0,0,0,0,0,0"))
                                       (rule "inEqSimp_ltToLeq" (formula "1") (term "1"))
                                       (rule "times_zero_1" (formula "1") (term "1,0,0,1"))
                                       (rule "add_zero_right" (formula "1") (term "0,0,1"))
                                       (rule "inEqSimp_homoInEq0" (formula "35"))
                                       (rule "polySimp_mulComm0" (formula "35") (term "1,0"))
                                       (rule "polySimp_rightDist" (formula "35") (term "1,0"))
                                       (rule "mul_literals" (formula "35") (term "0,1,0"))
                                       (rule "polySimp_addAssoc" (formula "35") (term "0"))
                                       (rule "add_literals" (formula "35") (term "0,0"))
                                       (rule "inEqSimp_homoInEq0" (formula "6") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "6") (term "1,0,1,0,0"))
                                       (rule "polySimp_rightDist" (formula "6") (term "1,0,1,0,0"))
                                       (rule "mul_literals" (formula "6") (term "0,1,0,1,0,0"))
                                       (rule "polySimp_addComm1" (formula "6") (term "0,1,0,0"))
                                       (rule "polySimp_addAssoc" (formula "6") (term "0,0,1,0,0"))
                                       (rule "add_literals" (formula "6") (term "0,0,0,1,0,0"))
                                       (rule "add_zero_left" (formula "6") (term "0,0,1,0,0"))
                                       (rule "inEqSimp_homoInEq0" (formula "6") (term "0,0,0"))
                                       (rule "polySimp_pullOutFactor1b" (formula "6") (term "0,0,0,0"))
                                       (rule "add_literals" (formula "6") (term "1,1,0,0,0,0"))
                                       (rule "times_zero_1" (formula "6") (term "1,0,0,0,0"))
                                       (rule "add_zero_right" (formula "6") (term "0,0,0,0"))
                                       (rule "qeq_literals" (formula "6") (term "0,0,0"))
                                        (builtin "One Step Simplification" (formula "6"))
                                       (rule "applyEqReverse" (formula "7") (term "1,1,0") (ifseqformula "6"))
                                       (rule "hideAuxiliaryEq" (formula "6"))
                                       (rule "applyEq" (formula "1") (term "0,0") (ifseqformula "26"))
                                       (rule "inEqSimp_commuteLeq" (formula "1") (term "0"))
                                       (rule "inEqSimp_sepNegMonomial0" (formula "38"))
                                       (rule "polySimp_mulLiterals" (formula "38") (term "0"))
                                       (rule "polySimp_elimOne" (formula "38") (term "0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "0,0,0,0,0"))
                                       (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,0,0,0"))
                                       (rule "polySimp_rightDist" (formula "21") (term "1,0,0,0,0,0"))
                                       (rule "mul_literals" (formula "21") (term "0,1,0,0,0,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "21") (term "1,1,0,0,0,0,0"))
                                       (rule "polySimp_elimOne" (formula "21") (term "1,1,0,0,0,0,0"))
                                       (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                                       (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                                       (rule "polySimp_elimOne" (formula "2") (term "0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "5") (term "0,0,0,0,0"))
                                       (rule "polySimp_mulComm0" (formula "5") (term "1,0,0,0,0,0"))
                                       (rule "polySimp_rightDist" (formula "5") (term "1,0,0,0,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "5") (term "1,1,0,0,0,0,0"))
                                       (rule "mul_literals" (formula "5") (term "0,1,0,0,0,0,0"))
                                       (rule "polySimp_elimOne" (formula "5") (term "1,1,0,0,0,0,0"))
                                       (rule "inEqSimp_sepNegMonomial0" (formula "21") (term "1,0"))
                                       (rule "polySimp_mulLiterals" (formula "21") (term "0,1,0"))
                                       (rule "polySimp_elimOne" (formula "21") (term "0,1,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "6") (term "0,0,0,0,0"))
                                       (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,0,0,0"))
                                       (rule "polySimp_rightDist" (formula "6") (term "1,0,0,0,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "6") (term "1,1,0,0,0,0,0"))
                                       (rule "mul_literals" (formula "6") (term "0,1,0,0,0,0,0"))
                                       (rule "polySimp_elimOne" (formula "6") (term "1,1,0,0,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1"))
                                       (rule "mul_literals" (formula "1") (term "1,1"))
                                       (rule "inEqSimp_sepNegMonomial1" (formula "34"))
                                       (rule "polySimp_mulLiterals" (formula "34") (term "0"))
                                       (rule "polySimp_elimOne" (formula "34") (term "0"))
                                       (rule "inEqSimp_subsumption0" (formula "28") (ifseqformula "34"))
                                       (rule "leq_literals" (formula "28") (term "0"))
                                        (builtin "One Step Simplification" (formula "28"))
                                       (rule "true_left" (formula "28"))
                                       (rule "inEqSimp_subsumption1" (formula "15") (ifseqformula "22"))
                                       (rule "leq_literals" (formula "15") (term "0"))
                                        (builtin "One Step Simplification" (formula "15"))
                                       (rule "true_left" (formula "15"))
                                       (rule "inEqSimp_contradInEq1" (formula "1") (term "1") (ifseqformula "7"))
                                       (rule "qeq_literals" (formula "1") (term "0,1"))
                                        (builtin "One Step Simplification" (formula "1"))
                                       (rule "inEqSimp_subsumption1" (formula "16") (ifseqformula "23"))
                                       (rule "leq_literals" (formula "16") (term "0"))
                                        (builtin "One Step Simplification" (formula "16"))
                                       (rule "true_left" (formula "16"))
                                       (rule "inEqSimp_subsumption1" (formula "4") (ifseqformula "2"))
                                       (rule "inEqSimp_homoInEq0" (formula "4") (term "0"))
                                       (rule "polySimp_pullOutFactor1b" (formula "4") (term "0,0"))
                                       (rule "add_literals" (formula "4") (term "1,1,0,0"))
                                       (rule "times_zero_1" (formula "4") (term "1,0,0"))
                                       (rule "add_zero_right" (formula "4") (term "0,0"))
                                       (rule "qeq_literals" (formula "4") (term "0"))
                                        (builtin "One Step Simplification" (formula "4"))
                                       (rule "true_left" (formula "4"))
                                       (rule "inEqSimp_subsumption1" (formula "16") (ifseqformula "19"))
                                       (rule "leq_literals" (formula "16") (term "0"))
                                        (builtin "One Step Simplification" (formula "16"))
                                       (rule "true_left" (formula "16"))
                                       (rule "inEqSimp_subsumption0" (formula "13") (ifseqformula "16"))
                                       (rule "leq_literals" (formula "13") (term "0"))
                                        (builtin "One Step Simplification" (formula "13"))
                                       (rule "true_left" (formula "13"))
                                       (rule "inEqSimp_subsumption1" (formula "6") (ifseqformula "1"))
                                       (rule "leq_literals" (formula "6") (term "0"))
                                        (builtin "One Step Simplification" (formula "6"))
                                       (rule "true_left" (formula "6"))
                                       (rule "inEqSimp_antiSymm" (formula "1") (ifseqformula "6"))
                                       (rule "applyEqRigid" (formula "6") (term "1,1,0,0,0,0,0") (ifseqformula "1"))
                                       (rule "add_literals" (formula "6") (term "1,0,0,0,0,0"))
                                       (rule "applyEq" (formula "8") (term "3,0") (ifseqformula "1"))
                                       (rule "applyEq" (formula "7") (term "0") (ifseqformula "1"))
                                       (rule "leq_literals" (formula "7"))
                                       (rule "true_left" (formula "7"))
                                       (rule "applyEq" (formula "3") (term "1,1") (ifseqformula "1"))
                                       (rule "add_literals" (formula "3") (term "1"))
                                       (rule "applyEq" (formula "4") (term "1") (ifseqformula "1"))
                                       (rule "applyEq" (formula "2") (term "0") (ifseqformula "1"))
                                       (rule "qeq_literals" (formula "2"))
                                       (rule "true_left" (formula "2"))
                                       (rule "inEqSimp_contradInEq0" (formula "2") (ifseqformula "28"))
                                       (rule "qeq_literals" (formula "2") (term "0"))
                                        (builtin "One Step Simplification" (formula "2"))
                                       (rule "closeFalse" (formula "2"))
                                    )
                                 )
                                 (branch "Null Reference (x_arr_1 = null)"
                                     (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "42")))
                                    (rule "closeFalse" (formula "1"))
                                 )
                                 (branch "Index Out of Bounds (x_arr_1 != null, but x_9 Out of Bounds!)"
                                     (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "42")))
                                    (rule "false_right" (formula "43"))
                                    (rule "inEqSimp_ltToLeq" (formula "7") (term "0,0,0,0,0"))
                                    (rule "polySimp_mulComm0" (formula "7") (term "1,0,0,0,0,0,0,0"))
                                    (rule "inEqSimp_ltToLeq" (formula "22") (term "0,0,0,0,0"))
                                    (rule "polySimp_rightDist" (formula "22") (term "1,0,0,0,0,0,0,0"))
                                    (rule "mul_literals" (formula "22") (term "0,1,0,0,0,0,0,0,0"))
                                    (rule "polySimp_addAssoc" (formula "22") (term "0,0,0,0,0,0,0"))
                                    (rule "add_literals" (formula "22") (term "0,0,0,0,0,0,0,0"))
                                    (rule "inEqSimp_ltToLeq" (formula "39"))
                                    (rule "polySimp_mulComm0" (formula "39") (term "1,0,0"))
                                    (rule "polySimp_addComm1" (formula "39") (term "0"))
                                    (rule "inEqSimp_ltToLeq" (formula "5") (term "0,0,0,0,0"))
                                    (rule "polySimp_mulComm0" (formula "5") (term "1,0,0,0,0,0,0,0"))
                                    (rule "inEqSimp_ltToLeq" (formula "2"))
                                    (rule "polySimp_mulComm0" (formula "2") (term "1,0,0"))
                                    (rule "polySimp_addComm1" (formula "2") (term "0"))
                                    (rule "inEqSimp_ltToLeq" (formula "22") (term "1,0"))
                                    (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,1,0"))
                                    (rule "polySimp_addComm1" (formula "22") (term "0,1,0"))
                                    (rule "inEqSimp_ltToLeq" (formula "1") (term "1"))
                                    (rule "mul_literals" (formula "1") (term "1,0,0,1"))
                                    (rule "add_zero_right" (formula "1") (term "0,0,1"))
                                    (rule "polySimp_addAssoc" (formula "1") (term "0,1"))
                                    (rule "add_literals" (formula "1") (term "0,0,1"))
                                    (rule "add_zero_left" (formula "1") (term "0,1"))
                                    (rule "inEqSimp_homoInEq0" (formula "6") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "6") (term "1,0,1,0,0"))
                                    (rule "polySimp_rightDist" (formula "6") (term "1,0,1,0,0"))
                                    (rule "mul_literals" (formula "6") (term "0,1,0,1,0,0"))
                                    (rule "polySimp_addComm1" (formula "6") (term "0,1,0,0"))
                                    (rule "polySimp_addAssoc" (formula "6") (term "0,0,1,0,0"))
                                    (rule "add_literals" (formula "6") (term "0,0,0,1,0,0"))
                                    (rule "add_zero_left" (formula "6") (term "0,0,1,0,0"))
                                    (rule "inEqSimp_homoInEq0" (formula "35"))
                                    (rule "polySimp_mulComm0" (formula "35") (term "1,0"))
                                    (rule "polySimp_rightDist" (formula "35") (term "1,0"))
                                    (rule "mul_literals" (formula "35") (term "0,1,0"))
                                    (rule "polySimp_addAssoc" (formula "35") (term "0"))
                                    (rule "add_literals" (formula "35") (term "0,0"))
                                    (rule "inEqSimp_homoInEq0" (formula "6") (term "0,0,0"))
                                    (rule "polySimp_pullOutFactor1b" (formula "6") (term "0,0,0,0"))
                                    (rule "add_literals" (formula "6") (term "1,1,0,0,0,0"))
                                    (rule "times_zero_1" (formula "6") (term "1,0,0,0,0"))
                                    (rule "add_zero_right" (formula "6") (term "0,0,0,0"))
                                    (rule "qeq_literals" (formula "6") (term "0,0,0"))
                                     (builtin "One Step Simplification" (formula "6"))
                                    (rule "applyEqReverse" (formula "7") (term "1,1,0") (ifseqformula "6"))
                                    (rule "hideAuxiliaryEq" (formula "6"))
                                    (rule "applyEq" (formula "1") (term "0,0") (ifseqformula "26"))
                                    (rule "inEqSimp_homoInEq0" (formula "1") (term "0"))
                                    (rule "mul_literals" (formula "1") (term "1,0,0"))
                                    (rule "polySimp_addComm1" (formula "1") (term "0,0"))
                                    (rule "add_literals" (formula "1") (term "0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "6") (term "0,0,0,0,0"))
                                    (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,0,0,0"))
                                    (rule "polySimp_rightDist" (formula "6") (term "1,0,0,0,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "6") (term "1,1,0,0,0,0,0"))
                                    (rule "mul_literals" (formula "6") (term "0,1,0,0,0,0,0"))
                                    (rule "polySimp_elimOne" (formula "6") (term "1,1,0,0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "0,0,0,0,0"))
                                    (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,0,0,0"))
                                    (rule "polySimp_rightDist" (formula "21") (term "1,0,0,0,0,0"))
                                    (rule "mul_literals" (formula "21") (term "0,1,0,0,0,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "21") (term "1,1,0,0,0,0,0"))
                                    (rule "polySimp_elimOne" (formula "21") (term "1,1,0,0,0,0,0"))
                                    (rule "inEqSimp_sepNegMonomial0" (formula "38"))
                                    (rule "polySimp_mulLiterals" (formula "38") (term "0"))
                                    (rule "polySimp_elimOne" (formula "38") (term "0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "5") (term "0,0,0,0,0"))
                                    (rule "polySimp_mulComm0" (formula "5") (term "1,0,0,0,0,0"))
                                    (rule "polySimp_rightDist" (formula "5") (term "1,0,0,0,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "5") (term "1,1,0,0,0,0,0"))
                                    (rule "mul_literals" (formula "5") (term "0,1,0,0,0,0,0"))
                                    (rule "polySimp_elimOne" (formula "5") (term "1,1,0,0,0,0,0"))
                                    (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                                    (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                                    (rule "polySimp_elimOne" (formula "2") (term "0"))
                                    (rule "inEqSimp_sepNegMonomial0" (formula "21") (term "1,0"))
                                    (rule "polySimp_mulLiterals" (formula "21") (term "0,1,0"))
                                    (rule "polySimp_elimOne" (formula "21") (term "0,1,0"))
                                    (rule "inEqSimp_sepNegMonomial1" (formula "34"))
                                    (rule "polySimp_mulLiterals" (formula "34") (term "0"))
                                    (rule "polySimp_elimOne" (formula "34") (term "0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "0"))
                                    (rule "mul_literals" (formula "1") (term "1,0"))
                                    (rule "inEqSimp_subsumption0" (formula "14") (ifseqformula "20"))
                                    (rule "leq_literals" (formula "14") (term "0"))
                                     (builtin "One Step Simplification" (formula "14"))
                                    (rule "true_left" (formula "14"))
                                    (rule "inEqSimp_subsumption0" (formula "27") (ifseqformula "33"))
                                    (rule "leq_literals" (formula "27") (term "0"))
                                     (builtin "One Step Simplification" (formula "27"))
                                    (rule "true_left" (formula "27"))
                                    (rule "inEqSimp_subsumption1" (formula "4") (ifseqformula "2"))
                                    (rule "inEqSimp_homoInEq0" (formula "4") (term "0"))
                                    (rule "polySimp_pullOutFactor1b" (formula "4") (term "0,0"))
                                    (rule "add_literals" (formula "4") (term "1,1,0,0"))
                                    (rule "times_zero_1" (formula "4") (term "1,0,0"))
                                    (rule "add_zero_right" (formula "4") (term "0,0"))
                                    (rule "qeq_literals" (formula "4") (term "0"))
                                     (builtin "One Step Simplification" (formula "4"))
                                    (rule "true_left" (formula "4"))
                                    (rule "inEqSimp_contradInEq0" (formula "1") (term "0") (ifseqformula "18"))
                                    (rule "qeq_literals" (formula "1") (term "0,0"))
                                     (builtin "One Step Simplification" (formula "1"))
                                    (rule "inEqSimp_subsumption1" (formula "13") (ifseqformula "17"))
                                    (rule "leq_literals" (formula "13") (term "0"))
                                     (builtin "One Step Simplification" (formula "13"))
                                    (rule "true_left" (formula "13"))
                                    (rule "inEqSimp_subsumption1" (formula "14") (ifseqformula "21"))
                                    (rule "leq_literals" (formula "14") (term "0"))
                                     (builtin "One Step Simplification" (formula "14"))
                                    (rule "true_left" (formula "14"))
                                    (rule "inEqSimp_subsumption1" (formula "15") (ifseqformula "18"))
                                    (rule "leq_literals" (formula "15") (term "0"))
                                     (builtin "One Step Simplification" (formula "15"))
                                    (rule "true_left" (formula "15"))
                                    (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "17"))
                                    (rule "qeq_literals" (formula "1") (term "0"))
                                     (builtin "One Step Simplification" (formula "1"))
                                    (rule "closeFalse" (formula "1"))
                                 )
                              )
                           )
                           (branch "if x_6 false"
                               (builtin "One Step Simplification" (formula "42"))
                               (builtin "One Step Simplification" (formula "1"))
                              (rule "notLeft" (formula "1"))
                              (rule "blockBreak" (formula "42") (term "1"))
                              (rule "lsBreak" (formula "42") (term "1"))
                              (rule "assignment" (formula "42") (term "1"))
                               (builtin "One Step Simplification" (formula "42"))
                              (rule "variableDeclarationAssign" (formula "42") (term "1"))
                              (rule "variableDeclaration" (formula "42") (term "1") (newnames "classifier"))
                               (builtin "Use Operation Contract" (formula "42") (newnames "heapBefore_Classifier,self_25,exc_28,heapAfter_Classifier,anon_heap_Classifier") (contract "de.wiesler.Classifier[de.wiesler.Classifier::Classifier([I,[I,int,boolean)].JML normal_behavior operation contract.0"))
                              (branch "Post (Classifier)"
                                  (builtin "One Step Simplification" (formula "39"))
                                  (builtin "One Step Simplification" (formula "44"))
                                 (rule "andLeft" (formula "39"))
                                 (rule "selectCreatedOfAnonAsFormulaEQ" (formula "40") (term "1,1,0,0,1,0") (ifseqformula "39"))
                                  (builtin "One Step Simplification" (formula "40"))
                                 (rule "andLeft" (formula "40"))
                                 (rule "andLeft" (formula "41"))
                                 (rule "andLeft" (formula "40"))
                                 (rule "andLeft" (formula "40"))
                                 (rule "andLeft" (formula "41"))
                                 (rule "andLeft" (formula "40"))
                                 (rule "andLeft" (formula "43"))
                                 (rule "andLeft" (formula "42"))
                                 (rule "andLeft" (formula "40"))
                                 (rule "andLeft" (formula "45"))
                                 (rule "andLeft" (formula "41"))
                                 (rule "notLeft" (formula "40"))
                                 (rule "andLeft" (formula "45"))
                                 (rule "notLeft" (formula "40"))
                                 (rule "orRight" (formula "50"))
                                 (rule "translateJavaMulInt" (formula "46") (term "1,1"))
                                 (rule "eqSymm" (formula "45"))
                                 (rule "eqSymm" (formula "46"))
                                 (rule "replace_known_right" (formula "40") (term "1,0") (ifseqformula "51"))
                                  (builtin "One Step Simplification" (formula "40") (ifInst ""  (formula "50")))
                                 (rule "polySimp_mulComm0" (formula "46") (term "1,0"))
                                 (rule "assignment" (formula "57") (term "1"))
                                  (builtin "One Step Simplification" (formula "57"))
                                  (builtin "Block Contract (Internal)" (formula "57") (newnames "result_24,exc_29,heap_Before_BLOCK_1,savedHeap_Before_BLOCK_1,o,f"))
                                 (branch "Validity"
                                     (builtin "One Step Simplification" (formula "58"))
                                     (builtin "One Step Simplification" (formula "50") (ifInst ""  (formula "17")))
                                    (rule "eqSymm" (formula "58") (term "0,0,1,0,1"))
                                    (rule "variableDeclarationAssign" (formula "58") (term "1"))
                                    (rule "variableDeclaration" (formula "58") (term "1") (newnames "exc_29_1"))
                                    (rule "assignment" (formula "58") (term "1"))
                                     (builtin "One Step Simplification" (formula "58"))
                                    (rule "emptyStatement" (formula "58") (term "1"))
                                     (builtin "One Step Simplification" (formula "58"))
                                    (rule "emptyStatement" (formula "58") (term "1"))
                                    (rule "tryEmpty" (formula "58") (term "1"))
                                    (rule "blockEmptyLabel" (formula "58") (term "1"))
                                    (rule "blockEmpty" (formula "58") (term "1"))
                                    (rule "methodCallEmpty" (formula "58") (term "1"))
                                    (rule "emptyModality" (formula "58") (term "1"))
                                    (rule "andRight" (formula "58"))
                                    (branch "Case 1"
                                        (builtin "One Step Simplification" (formula "58"))
                                       (rule "closeTrue" (formula "58"))
                                    )
                                    (branch "Case 2"
                                        (builtin "One Step Simplification" (formula "58"))
                                       (rule "closeTrue" (formula "58"))
                                    )
                                 )
                                 (branch "Precondition"
                                    (rule "andRight" (formula "57"))
                                    (branch "Case 1"
                                        (builtin "One Step Simplification" (formula "57") (ifInst ""  (formula "17")))
                                       (rule "closeTrue" (formula "57"))
                                    )
                                    (branch "Case 2"
                                        (builtin "One Step Simplification" (formula "57"))
                                       (rule "wellFormedAnonEQ" (formula "57") (ifseqformula "39"))
                                       (rule "wellFormedAnon" (formula "57") (term "0"))
                                       (rule "replace_known_left" (formula "57") (term "1") (ifseqformula "38"))
                                        (builtin "One Step Simplification" (formula "57") (ifInst ""  (formula "10")) (ifInst ""  (formula "9")))
                                       (rule "closeTrue" (formula "57"))
                                    )
                                 )
                                 (branch "Usage"
                                     (builtin "One Step Simplification" (formula "58"))
                                     (builtin "One Step Simplification" (formula "50"))
                                    (rule "selectCreatedOfAnonAsFormulaEQ" (formula "50") (term "1,0,1,0") (ifseqformula "39"))
                                     (builtin "One Step Simplification" (formula "50"))
                                    (rule "selectCreatedOfAnonAsFormulaEQ" (formula "50") (term "1,1,1,0") (ifseqformula "39"))
                                     (builtin "One Step Simplification" (formula "50"))
                                    (rule "andLeft" (formula "50"))
                                    (rule "andLeft" (formula "50"))
                                    (rule "andLeft" (formula "51"))
                                    (rule "replace_known_left" (formula "52") (term "0") (ifseqformula "50"))
                                     (builtin "One Step Simplification" (formula "52"))
                                    (rule "true_left" (formula "52"))
                                    (rule "commute_or_2" (formula "51") (term "1"))
                                    (rule "shift_paren_or" (formula "51"))
                                    (rule "shift_paren_or" (formula "51") (term "0"))
                                    (rule "elim_double_block_2" (formula "60") (term "1"))
                                    (rule "ifUnfold" (formula "60") (term "1") (inst "#boolv=x"))
                                    (rule "variableDeclaration" (formula "60") (term "1") (newnames "x_7"))
                                    (rule "inequality_comparison_simple" (formula "60") (term "1"))
                                     (builtin "One Step Simplification" (formula "60"))
                                    (rule "replace_known_left" (formula "60") (term "0,0,1,0") (ifseqformula "50"))
                                     (builtin "One Step Simplification" (formula "60"))
                                    (rule "ifSplit" (formula "60"))
                                    (branch "if x_7 true"
                                        (builtin "One Step Simplification" (formula "1"))
                                       (rule "closeFalse" (formula "1"))
                                    )
                                    (branch "if x_7 false"
                                        (builtin "One Step Simplification" (formula "1"))
                                        (builtin "One Step Simplification" (formula "61"))
                                       (rule "true_left" (formula "1"))
                                       (rule "blockEmpty" (formula "60") (term "1"))
                                       (rule "methodCallReturn" (formula "60") (term "1"))
                                       (rule "assignment" (formula "60") (term "1"))
                                        (builtin "One Step Simplification" (formula "60"))
                                       (rule "methodCallEmpty" (formula "60") (term "1"))
                                       (rule "tryEmpty" (formula "60") (term "1"))
                                       (rule "emptyModality" (formula "60") (term "1"))
                                       (rule "andRight" (formula "60"))
                                       (branch "Case 1"
                                          (rule "impRight" (formula "60"))
                                          (rule "andRight" (formula "61"))
                                          (branch "Case 1"
                                             (rule "andRight" (formula "61"))
                                             (branch "Case 1"
                                                 (builtin "One Step Simplification" (formula "61") (ifInst ""  (formula "49")))
                                                (rule "closeTrue" (formula "61"))
                                             )
                                             (branch "Case 2"
                                                 (builtin "One Step Simplification" (formula "1"))
                                                 (builtin "One Step Simplification" (formula "61") (ifInst ""  (formula "56")))
                                                (rule "closeTrue" (formula "61"))
                                             )
                                          )
                                          (branch "Case 2"
                                              (builtin "One Step Simplification" (formula "1"))
                                              (builtin "One Step Simplification" (formula "61"))
                                             (rule "closeTrue" (formula "61"))
                                          )
                                       )
                                       (branch "Case 2"
                                          (rule "impRight" (formula "60"))
                                           (builtin "One Step Simplification" (formula "1"))
                                          (rule "closeFalse" (formula "1"))
                                       )
                                    )
                                 )
                              )
                              (branch "Exceptional Post (Classifier)"
                                  (builtin "One Step Simplification" (formula "39"))
                                  (builtin "One Step Simplification" (formula "44"))
                                 (rule "andLeft" (formula "39"))
                                 (rule "selectCreatedOfAnonAsFormulaEQ" (formula "40") (term "1,0,0") (ifseqformula "39"))
                                  (builtin "One Step Simplification" (formula "40"))
                                 (rule "selectCreatedOfAnonAsFormulaEQ" (formula "40") (term "1,1,0,0,1,0") (ifseqformula "39"))
                                  (builtin "One Step Simplification" (formula "40"))
                                 (rule "andLeft" (formula "40"))
                                 (rule "andLeft" (formula "41"))
                                 (rule "andLeft" (formula "40"))
                                 (rule "andLeft" (formula "40"))
                                 (rule "andLeft" (formula "42"))
                                 (rule "notLeft" (formula "40"))
                                 (rule "close" (formula "45") (ifseqformula "44"))
                              )
                              (branch "Pre (Classifier)"
                                  (builtin "One Step Simplification" (formula "42") (ifInst ""  (formula "41")) (ifInst ""  (formula "40")) (ifInst ""  (formula "41")) (ifInst ""  (formula "11")) (ifInst ""  (formula "40")) (ifInst ""  (formula "12")))
                                 (rule "wellFormedAnon" (formula "42") (term "0"))
                                 (rule "expand_inInt" (formula "42") (term "1"))
                                 (rule "replace_int_MAX" (formula "42") (term "1,0,1"))
                                 (rule "replace_int_MIN" (formula "42") (term "0,1,1"))
                                 (rule "replace_known_left" (formula "42") (term "1,0") (ifseqformula "9"))
                                  (builtin "One Step Simplification" (formula "42") (ifInst ""  (formula "10")))
                                 (rule "inEqSimp_ltRight" (formula "38"))
                                 (rule "polySimp_mulComm0" (formula "1") (term "0,0"))
                                 (rule "polySimp_addComm0" (formula "1") (term "0"))
                                 (rule "inEqSimp_ltToLeq" (formula "4") (term "0,0,0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "4") (term "1,0,0,0,0,0,0,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "21") (term "1,0"))
                                 (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,1,0"))
                                 (rule "polySimp_addComm1" (formula "21") (term "0,1,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "38"))
                                 (rule "polySimp_mulComm0" (formula "38") (term "1,0,0"))
                                 (rule "polySimp_addComm1" (formula "38") (term "0"))
                                 (rule "inEqSimp_ltToLeq" (formula "6") (term "0,0,0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,0,0,0,0,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "21") (term "0,0,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "21") (term "1,0,0,0,0,0,0,0"))
                                 (rule "mul_literals" (formula "21") (term "0,1,0,0,0,0,0,0,0"))
                                 (rule "polySimp_addAssoc" (formula "21") (term "0,0,0,0,0,0,0"))
                                 (rule "add_literals" (formula "21") (term "0,0,0,0,0,0,0,0"))
                                 (rule "inEqSimp_homoInEq0" (formula "5") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "5") (term "1,0,1,0,0"))
                                 (rule "polySimp_rightDist" (formula "5") (term "1,0,1,0,0"))
                                 (rule "mul_literals" (formula "5") (term "0,1,0,1,0,0"))
                                 (rule "polySimp_addComm1" (formula "5") (term "0,1,0,0"))
                                 (rule "polySimp_addAssoc" (formula "5") (term "0,0,1,0,0"))
                                 (rule "add_literals" (formula "5") (term "0,0,0,1,0,0"))
                                 (rule "add_zero_left" (formula "5") (term "0,0,1,0,0"))
                                 (rule "inEqSimp_homoInEq0" (formula "5") (term "0,0,0"))
                                 (rule "polySimp_pullOutFactor1b" (formula "5") (term "0,0,0,0"))
                                 (rule "add_literals" (formula "5") (term "1,1,0,0,0,0"))
                                 (rule "times_zero_1" (formula "5") (term "1,0,0,0,0"))
                                 (rule "add_zero_right" (formula "5") (term "0,0,0,0"))
                                 (rule "qeq_literals" (formula "5") (term "0,0,0"))
                                  (builtin "One Step Simplification" (formula "5"))
                                 (rule "applyEqReverse" (formula "6") (term "1,1,0") (ifseqformula "5"))
                                 (rule "hideAuxiliaryEq" (formula "5"))
                                 (rule "inEqSimp_homoInEq0" (formula "33"))
                                 (rule "polySimp_mulComm0" (formula "33") (term "1,0"))
                                 (rule "polySimp_rightDist" (formula "33") (term "1,0"))
                                 (rule "mul_literals" (formula "33") (term "0,1,0"))
                                 (rule "polySimp_addAssoc" (formula "33") (term "0"))
                                 (rule "add_literals" (formula "33") (term "0,0"))
                                 (rule "inEqSimp_homoInEq0" (formula "41") (term "1"))
                                 (rule "mul_literals" (formula "41") (term "1,0,1"))
                                 (rule "polySimp_addComm1" (formula "41") (term "0,1"))
                                 (rule "add_literals" (formula "41") (term "0,0,1"))
                                 (rule "inEqSimp_homoInEq0" (formula "41") (term "0"))
                                 (rule "polySimp_mulComm0" (formula "41") (term "1,0,0"))
                                 (rule "polySimp_rightDist" (formula "41") (term "1,0,0"))
                                 (rule "mul_literals" (formula "41") (term "0,1,0,0"))
                                 (rule "polySimp_addAssoc" (formula "41") (term "0,0"))
                                 (rule "add_literals" (formula "41") (term "0,0,0"))
                                 (rule "inEqSimp_sepNegMonomial1" (formula "1"))
                                 (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                                 (rule "polySimp_elimOne" (formula "1") (term "0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "4") (term "0,0,0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "4") (term "1,0,0,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "4") (term "1,0,0,0,0,0"))
                                 (rule "mul_literals" (formula "4") (term "0,1,0,0,0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "4") (term "1,1,0,0,0,0,0"))
                                 (rule "polySimp_elimOne" (formula "4") (term "1,1,0,0,0,0,0"))
                                 (rule "inEqSimp_sepNegMonomial0" (formula "20") (term "1,0"))
                                 (rule "polySimp_mulLiterals" (formula "20") (term "0,1,0"))
                                 (rule "polySimp_elimOne" (formula "20") (term "0,1,0"))
                                 (rule "inEqSimp_sepNegMonomial0" (formula "37"))
                                 (rule "polySimp_mulLiterals" (formula "37") (term "0"))
                                 (rule "polySimp_elimOne" (formula "37") (term "0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "5") (term "0,0,0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "5") (term "1,0,0,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "5") (term "1,0,0,0,0,0"))
                                 (rule "mul_literals" (formula "5") (term "0,1,0,0,0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "5") (term "1,1,0,0,0,0,0"))
                                 (rule "polySimp_elimOne" (formula "5") (term "1,1,0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "0,0,0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "20") (term "1,0,0,0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "20") (term "1,1,0,0,0,0,0"))
                                 (rule "mul_literals" (formula "20") (term "0,1,0,0,0,0,0"))
                                 (rule "polySimp_elimOne" (formula "20") (term "1,1,0,0,0,0,0"))
                                 (rule "inEqSimp_sepNegMonomial1" (formula "33"))
                                 (rule "polySimp_mulLiterals" (formula "33") (term "0"))
                                 (rule "polySimp_elimOne" (formula "33") (term "0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "41") (term "1"))
                                 (rule "mul_literals" (formula "41") (term "1,1"))
                                 (rule "inEqSimp_sepNegMonomial1" (formula "41") (term "0"))
                                 (rule "polySimp_mulLiterals" (formula "41") (term "0,0"))
                                 (rule "polySimp_elimOne" (formula "41") (term "0,0"))
                                 (rule "inEqSimp_subsumption1" (formula "14") (ifseqformula "18"))
                                 (rule "leq_literals" (formula "14") (term "0"))
                                  (builtin "One Step Simplification" (formula "14"))
                                 (rule "true_left" (formula "14"))
                                 (rule "inEqSimp_subsumption0" (formula "26") (ifseqformula "32"))
                                 (rule "leq_literals" (formula "26") (term "0"))
                                  (builtin "One Step Simplification" (formula "26"))
                                 (rule "true_left" (formula "26"))
                                 (rule "inEqSimp_subsumption1" (formula "17") (ifseqformula "20"))
                                 (rule "leq_literals" (formula "17") (term "0"))
                                  (builtin "One Step Simplification" (formula "17"))
                                 (rule "true_left" (formula "17"))
                                 (rule "inEqSimp_subsumption1" (formula "15") (ifseqformula "21"))
                                 (rule "leq_literals" (formula "15") (term "0"))
                                  (builtin "One Step Simplification" (formula "15"))
                                 (rule "true_left" (formula "15"))
                                 (rule "inEqSimp_subsumption0" (formula "37") (term "0") (ifseqformula "29"))
                                 (rule "leq_literals" (formula "37") (term "0,0"))
                                  (builtin "One Step Simplification" (formula "37"))
                                 (rule "inEqSimp_geqRight" (formula "37"))
                                 (rule "mul_literals" (formula "1") (term "1,0,0"))
                                 (rule "add_literals" (formula "1") (term "0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                 (rule "mul_literals" (formula "1") (term "1"))
                                 (rule "inEqSimp_subsumption0" (formula "14") (ifseqformula "17"))
                                 (rule "leq_literals" (formula "14") (term "0"))
                                  (builtin "One Step Simplification" (formula "14"))
                                 (rule "true_left" (formula "14"))
                                 (rule "inEqSimp_contradInEq0" (formula "24") (ifseqformula "1"))
                                 (rule "qeq_literals" (formula "24") (term "0"))
                                  (builtin "One Step Simplification" (formula "24"))
                                 (rule "closeFalse" (formula "24"))
                              )
                           )
                        )
                     )
                  )
               )
            )
         )
      )
      (branch "Exceptional Post (log2)"
          (builtin "One Step Simplification" (formula "18"))
         (rule "andLeft" (formula "18"))
         (rule "andLeft" (formula "18"))
         (rule "notLeft" (formula "18"))
         (rule "close" (formula "20") (ifseqformula "19"))
      )
      (branch "Pre (log2)"
          (builtin "One Step Simplification" (formula "21") (ifInst ""  (formula "1")))
         (rule "expand_inInt" (formula "21"))
         (rule "replace_int_MIN" (formula "21") (term "0,1"))
         (rule "replace_int_MAX" (formula "21") (term "1,0"))
         (rule "replace_known_left" (formula "21") (term "0") (ifseqformula "4"))
          (builtin "One Step Simplification" (formula "21"))
         (rule "inEqSimp_leqRight" (formula "21"))
         (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
         (rule "polySimp_addComm1" (formula "1") (term "0"))
         (rule "add_literals" (formula "1") (term "0,0"))
         (rule "inEqSimp_ltToLeq" (formula "12") (term "0,0,0,0,0"))
         (rule "polySimp_rightDist" (formula "12") (term "1,0,0,0,0,0,0,0"))
         (rule "mul_literals" (formula "12") (term "0,1,0,0,0,0,0,0,0"))
         (rule "polySimp_addAssoc" (formula "12") (term "0,0,0,0,0,0,0"))
         (rule "add_literals" (formula "12") (term "0,0,0,0,0,0,0,0"))
         (rule "inEqSimp_ltToLeq" (formula "12") (term "1,0"))
         (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,1,0"))
         (rule "polySimp_addComm1" (formula "12") (term "0,1,0"))
         (rule "inEqSimp_sepNegMonomial1" (formula "1"))
         (rule "polySimp_mulLiterals" (formula "1") (term "0"))
         (rule "polySimp_elimOne" (formula "1") (term "0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "0,0,0,0,0"))
         (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0,0,0"))
         (rule "polySimp_rightDist" (formula "12") (term "1,0,0,0,0,0"))
         (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,0,0,0,0"))
         (rule "mul_literals" (formula "12") (term "0,1,0,0,0,0,0"))
         (rule "polySimp_elimOne" (formula "12") (term "1,1,0,0,0,0,0"))
         (rule "inEqSimp_sepNegMonomial0" (formula "12") (term "1,0"))
         (rule "polySimp_mulLiterals" (formula "12") (term "0,1,0"))
         (rule "polySimp_elimOne" (formula "12") (term "0,1,0"))
         (rule "inEqSimp_subsumption0" (formula "11") (ifseqformula "1"))
         (rule "leq_literals" (formula "11") (term "0"))
          (builtin "One Step Simplification" (formula "11"))
         (rule "true_left" (formula "11"))
         (rule "inEqSimp_subsumption1" (formula "6") (ifseqformula "10"))
         (rule "leq_literals" (formula "6") (term "0"))
          (builtin "One Step Simplification" (formula "6"))
         (rule "true_left" (formula "6"))
         (rule "inEqSimp_subsumption0" (formula "5") (ifseqformula "1"))
         (rule "leq_literals" (formula "5") (term "0"))
          (builtin "One Step Simplification" (formula "5"))
         (rule "true_left" (formula "5"))
         (rule "inEqSimp_subsumption1" (formula "6") (ifseqformula "12"))
         (rule "leq_literals" (formula "6") (term "0"))
          (builtin "One Step Simplification" (formula "6"))
         (rule "true_left" (formula "6"))
         (rule "inEqSimp_subsumption1" (formula "7") (ifseqformula "9"))
         (rule "leq_literals" (formula "7") (term "0"))
          (builtin "One Step Simplification" (formula "7"))
         (rule "true_left" (formula "7"))
         (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "8"))
         (rule "qeq_literals" (formula "1") (term "0"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "closeFalse" (formula "1"))
      )
   )
)
)
}
