\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Thu Jun 02 20:43:18 CEST 2022
[NewSMT]NoTypeHierarchy=false
[Labels]UseOriginLabels=true
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[NewSMT]Presburger=false
[SMTSettings]invariantForall=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[Choice]DefaultChoices=JavaCard-JavaCard\\:on , Strings-Strings\\:on , assertions-assertions\\:safe , bigint-bigint\\:on , finalFields-finalFields\\:immutable , floatRules-floatRules\\:strictfpOnly , initialisation-initialisation\\:disableStaticInitialisation , intRules-intRules\\:arithmeticSemanticsCheckingOF , integerSimplificationRules-integerSimplificationRules\\:full , javaLoopTreatment-javaLoopTreatment\\:efficient , mergeGenerateIsWeakeningGoal-mergeGenerateIsWeakeningGoal\\:off , methodExpansion-methodExpansion\\:modularOnly , modelFields-modelFields\\:treatAsAxiom , moreSeqRules-moreSeqRules\\:on , permissions-permissions\\:off , programRules-programRules\\:Java , reach-reach\\:on , runtimeExceptions-runtimeExceptions\\:ban , sequences-sequences\\:on , wdChecks-wdChecks\\:off , wdOperator-wdOperator\\:L
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_SCOPE_INV_TACLET
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_DEF_OPS
[SMTSettings]SelectedTaclets=
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[Strategy]MaximumNumberOfAutomaticApplications=10000
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_DELAYED
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]MPS_OPTIONS_KEY=MPS_MERGE
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[Strategy]Timeout=-1
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_OFF
[SMTSettings]useUninterpretedMultiplication=true
[NewSMT]sqrtSMTTranslation=SMT
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT_INTERNAL
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[NewSMT]identifier=OPEN
[SMTSettings]maxGenericSorts=2
[StrategyProperty]OSS_OPTIONS_KEY=OSS_ON
[NewSMT]Axiomatisations=false
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
[SMTSettings]integersMinimum=-2147483645
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]integersMaximum=2147483645
"
}

\javaSource "../../src";

\proofObligation "#Proof Obligation Settings
#Thu Jun 02 20:43:18 CEST 2022
contract=de.wiesler.Classifier[de.wiesler.Classifier\\:\\:calculate_bucket_starts([I,int,int,int,[I,de.wiesler.Buffers)].JML normal_behavior operation contract.0
name=de.wiesler.Classifier[de.wiesler.Classifier\\:\\:calculate_bucket_starts([I,int,int,int,[I,de.wiesler.Buffers)].JML normal_behavior operation contract.0
class=de.uka.ilkd.key.proof.init.FunctionalOperationContractPO
";

\proof {
(keyLog "0" (keyUser "Julian" ) (keyVersion "e1a85b31e7"))

(autoModeTime "24564")

(branch "dummy ID"
 (builtin "One Step Simplification" (formula "1") (newnames "heapAtPre_0,o,f"))
(rule "expand_inInt" (formula "1") (term "1,0,0,0,1,0,0,0"))
(rule "expand_inInt" (formula "1") (term "1,0,0,0,0,1,0,0,0"))
(rule "expand_inInt" (formula "1") (term "1,0,0,1,0,0,0"))
(rule "replace_int_MAX" (formula "1") (term "1,0,1,0,0,0,1,0,0,0"))
(rule "replace_int_MIN" (formula "1") (term "0,1,1,0,0,0,1,0,0,0"))
(rule "replace_int_MAX" (formula "1") (term "1,0,1,0,0,0,0,1,0,0,0"))
(rule "replace_int_MIN" (formula "1") (term "0,1,1,0,0,0,0,1,0,0,0"))
(rule "replace_int_MIN" (formula "1") (term "0,1,1,0,0,1,0,0,0"))
(rule "replace_int_MAX" (formula "1") (term "1,0,1,0,0,1,0,0,0"))
(rule "impRight" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "3"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "4"))
(rule "andLeft" (formula "6"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "3"))
(rule "andLeft" (formula "7"))
(rule "andLeft" (formula "10"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "4"))
(rule "andLeft" (formula "10"))
(rule "notLeft" (formula "9"))
(rule "andLeft" (formula "13"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "5"))
(rule "notLeft" (formula "12"))
(rule "notLeft" (formula "11"))
(rule "andLeft" (formula "14"))
(rule "andLeft" (formula "13"))
(rule "notLeft" (formula "2"))
(rule "andLeft" (formula "4"))
(rule "andLeft" (formula "6"))
(rule "andLeft" (formula "17"))
(rule "andLeft" (formula "16"))
(rule "andLeft" (formula "14"))
(rule "andLeft" (formula "5"))
(rule "andLeft" (formula "4"))
(rule "andLeft" (formula "22"))
(rule "andLeft" (formula "19"))
(rule "andLeft" (formula "5"))
(rule "andLeft" (formula "25"))
(rule "andLeft" (formula "20"))
(rule "andLeft" (formula "26"))
(rule "andLeft" (formula "28"))
(rule "andLeft" (formula "20"))
(rule "andLeft" (formula "20"))
(rule "andLeft" (formula "20"))
(rule "andLeft" (formula "20"))
(rule "andLeft" (formula "20"))
(rule "andLeft" (formula "20"))
(rule "andLeft" (formula "20"))
(rule "andLeft" (formula "20"))
(rule "andLeft" (formula "20"))
(rule "andLeft" (formula "20"))
(rule "andLeft" (formula "20"))
(rule "translateJavaAddInt" (formula "16") (term "1"))
(rule "eqSymm" (formula "35"))
(rule "translateJavaSubInt" (formula "39") (term "0,0"))
(rule "replace_known_right" (formula "12") (term "0") (ifseqformula "43"))
 (builtin "One Step Simplification" (formula "12"))
(rule "replace_known_right" (formula "11") (term "0") (ifseqformula "42"))
 (builtin "One Step Simplification" (formula "11"))
(rule "replace_known_right" (formula "4") (term "0") (ifseqformula "44"))
 (builtin "One Step Simplification" (formula "4"))
(rule "polySimp_elimSub" (formula "39") (term "0,0"))
(rule "polySimp_addComm0" (formula "16") (term "1"))
(rule "polySimp_addComm0" (formula "39") (term "0,0"))
(rule "disjointDefinition" (formula "34"))
 (builtin "One Step Simplification" (formula "34"))
(rule "notLeft" (formula "34"))
(rule "eqSymm" (formula "40"))
(rule "disjointDefinition" (formula "33"))
 (builtin "One Step Simplification" (formula "33"))
(rule "notLeft" (formula "33"))
(rule "eqSymm" (formula "39"))
(rule "disjointDefinition" (formula "32"))
 (builtin "One Step Simplification" (formula "32"))
(rule "notLeft" (formula "32"))
(rule "eqSymm" (formula "38"))
(rule "disjointDefinition" (formula "31"))
 (builtin "One Step Simplification" (formula "31"))
(rule "notLeft" (formula "31"))
(rule "eqSymm" (formula "37"))
(rule "disjointDefinition" (formula "30"))
 (builtin "One Step Simplification" (formula "30"))
(rule "notLeft" (formula "30"))
(rule "eqSymm" (formula "36"))
(rule "disjointDefinition" (formula "29"))
 (builtin "One Step Simplification" (formula "29"))
(rule "notLeft" (formula "29"))
(rule "eqSymm" (formula "35"))
(rule "disjointDefinition" (formula "28"))
 (builtin "One Step Simplification" (formula "28"))
(rule "notLeft" (formula "28"))
(rule "eqSymm" (formula "34"))
(rule "disjointDefinition" (formula "27"))
 (builtin "One Step Simplification" (formula "27"))
(rule "notLeft" (formula "27"))
(rule "eqSymm" (formula "33"))
(rule "disjointDefinition" (formula "26"))
 (builtin "One Step Simplification" (formula "26"))
(rule "notLeft" (formula "26"))
(rule "eqSymm" (formula "32"))
(rule "disjointDefinition" (formula "25"))
 (builtin "One Step Simplification" (formula "25"))
(rule "notLeft" (formula "25"))
(rule "eqSymm" (formula "31"))
(rule "disjointDefinition" (formula "24"))
 (builtin "One Step Simplification" (formula "24"))
(rule "notLeft" (formula "24"))
(rule "eqSymm" (formula "30"))
(rule "disjointDefinition" (formula "23"))
 (builtin "One Step Simplification" (formula "23"))
(rule "notLeft" (formula "23"))
(rule "eqSymm" (formula "29"))
(rule "disjointDefinition" (formula "22"))
 (builtin "One Step Simplification" (formula "22"))
(rule "notLeft" (formula "22"))
(rule "eqSymm" (formula "28"))
(rule "disjointDefinition" (formula "20"))
 (builtin "One Step Simplification" (formula "20"))
(rule "notLeft" (formula "20"))
(rule "disjointDefinition" (formula "20"))
 (builtin "One Step Simplification" (formula "20"))
(rule "notLeft" (formula "20"))
(rule "eqSymm" (formula "26"))
(rule "inEqSimp_commuteLeq" (formula "19"))
(rule "inEqSimp_commuteLeq" (formula "10"))
(rule "inEqSimp_commuteLeq" (formula "18"))
(rule "inEqSimp_commuteLeq" (formula "17"))
(rule "inEqSimp_commuteLeq" (formula "8"))
(rule "inEqSimp_commuteLeq" (formula "6"))
(rule "inEqSimp_commuteLeq" (formula "22"))
(rule "assignment" (formula "45") (term "1"))
 (builtin "One Step Simplification" (formula "45"))
(rule "applyEq" (formula "16") (term "1,1") (ifseqformula "20"))
(rule "methodBodyExpand" (formula "45") (term "1") (newnames "heapBefore_calculate_bucket_starts,savedHeapBefore_calculate_bucket_starts,_beginBefore_calculate_bucket_starts,_bucket_startsBefore_calculate_bucket_starts,_buffersBefore_calculate_bucket_starts,_endBefore_calculate_bucket_starts,_valuesBefore_calculate_bucket_starts,_writeBefore_calculate_bucket_starts"))
 (builtin "One Step Simplification" (formula "45"))
(rule "variableDeclarationAssign" (formula "45") (term "1"))
(rule "variableDeclaration" (formula "45") (term "1") (newnames "sum_1"))
(rule "assignment" (formula "45") (term "1"))
 (builtin "One Step Simplification" (formula "45"))
(rule "for_to_while" (formula "45") (term "1") (inst "#outerLabel=_label1") (inst "#innerLabel=_label0"))
(rule "variableDeclarationAssign" (formula "45") (term "1"))
(rule "variableDeclaration" (formula "45") (term "1") (newnames "j"))
(rule "assignment" (formula "45") (term "1"))
 (builtin "One Step Simplification" (formula "45"))
(rule "elim_double_block_3" (formula "45") (term "1"))
(rule "arrayLengthIsAShort" (formula "16") (term "0"))
(rule "expand_inShort" (formula "16"))
(rule "replace_short_MAX" (formula "16") (term "1,0"))
(rule "replace_short_MIN" (formula "16") (term "0,1"))
(rule "andLeft" (formula "16"))
(rule "inEqSimp_commuteLeq" (formula "17"))
(rule "arrayLengthNotNegative" (formula "18") (term "0"))
(rule "loopScopeInvDia" (formula "48") (term "1") (newnames "j_0,sum_1_0,o,f") (inst "#x=x_1") (inst "#variant=x") (inst "#permissionsBefore_LOOP=h_2") (inst "#savedHeapBefore_LOOP=h_1") (inst "#heapBefore_LOOP=h") (inst "anon_permissions_LOOP=anon_permissions_LOOP_0") (inst "anon_savedHeap_LOOP=anon_savedHeap_LOOP_0") (inst "anon_heap_LOOP=anon_heap_LOOP_0"))
(branch "Invariant Initially Valid"
   (rule "closeTrue" (formula "48"))
)
(branch "Invariant Preserved and Used"
    (builtin "One Step Simplification" (formula "49"))
   (rule "expand_inInt" (formula "49") (term "1,0,0,1,0"))
   (rule "expand_inInt" (formula "49") (term "1,0,0,1,0,0"))
   (rule "replace_int_MIN" (formula "49") (term "0,1,1,0,0,1,0"))
   (rule "replace_int_MAX" (formula "49") (term "1,0,1,0,0,1,0"))
   (rule "replace_int_MAX" (formula "49") (term "1,0,1,0,0,1,0,0"))
   (rule "replace_int_MIN" (formula "49") (term "0,1,1,0,0,1,0,0"))
   (rule "impRight" (formula "49"))
   (rule "andLeft" (formula "1"))
   (rule "andLeft" (formula "1"))
   (rule "andLeft" (formula "1"))
   (rule "andLeft" (formula "1"))
   (rule "andLeft" (formula "1"))
   (rule "andLeft" (formula "1"))
   (rule "translateJavaSubInt" (formula "56") (term "0,1,1,0"))
   (rule "translateJavaSubInt" (formula "56") (term "0,1,1,0,1"))
   (rule "translateJavaAddInt" (formula "7") (term "1,1,0"))
   (rule "translateJavaSubInt" (formula "7") (term "0,1,0"))
   (rule "eqSymm" (formula "4"))
   (rule "translateJavaSubInt" (formula "3") (term "0,2,0,0,1"))
   (rule "translateJavaAddInt" (formula "7") (term "0,0,0,0,1,0"))
   (rule "translateJavaAddInt" (formula "7") (term "0,2,2,0,0,1,0"))
   (rule "translateJavaCastInt" (formula "4") (term "0"))
   (rule "translateJavaAddInt" (formula "4") (term "2,0"))
   (rule "polySimp_elimSub" (formula "56") (term "0,1,1,0"))
   (rule "polySimp_elimSub" (formula "56") (term "0,1,1,0,1"))
   (rule "polySimp_elimSub" (formula "3") (term "0,2,0,0,1"))
   (rule "mul_literals" (formula "3") (term "1,0,2,0,0,1"))
   (rule "polySimp_elimSub" (formula "7") (term "0,1,0"))
   (rule "polySimp_addComm0" (formula "7") (term "1,1,0"))
   (rule "polySimp_addComm0" (formula "4") (term "2,0"))
   (rule "polySimp_addComm0" (formula "56") (term "0,1,1,0"))
   (rule "polySimp_addComm0" (formula "56") (term "0,1,1,0,1"))
   (rule "polySimp_addComm0" (formula "3") (term "0,2,0,0,1"))
   (rule "polySimp_addComm0" (formula "7") (term "0,1,0"))
   (rule "polySimp_addComm0" (formula "7") (term "0,2,2,1,0,1,0"))
   (rule "polySimp_addComm0" (formula "7") (term "0,0,1,0,1,0"))
   (rule "inEqSimp_commuteLeq" (formula "7") (term "0,0,0,0"))
   (rule "inEqSimp_commuteLeq" (formula "7") (term "1,1,0,0"))
   (rule "inEqSimp_commuteLeq" (formula "6") (term "1,1,0,0"))
   (rule "inEqSimp_commuteLeq" (formula "6") (term "0,0,0,0"))
   (rule "inEqSimp_commuteLeq" (formula "1"))
   (rule "inEqSimp_commuteLeq" (formula "2"))
   (rule "variableDeclaration" (formula "56") (term "1") (newnames "x_1"))
   (rule "applyEq" (formula "6") (term "1,1,0,0,0") (ifseqformula "31"))
   (rule "applyEq" (formula "56") (term "2,1,0,1,0,1,0") (ifseqformula "31"))
   (rule "applyEq" (formula "6") (term "2,1,0,0,1,0") (ifseqformula "31"))
   (rule "applyEq" (formula "56") (term "1,0,1,1,0") (ifseqformula "31"))
   (rule "applyEq" (formula "2") (term "0") (ifseqformula "31"))
   (rule "applyEq" (formula "5") (term "2,1,0,0") (ifseqformula "31"))
   (rule "applyEq" (formula "7") (term "2,1,0,2,1,0,1,0") (ifseqformula "31"))
   (rule "applyEq" (formula "3") (term "2,1,0,0,0,1") (ifseqformula "31"))
   (rule "applyEq" (formula "3") (term "2,1,0,0,1,1") (ifseqformula "31"))
   (rule "applyEq" (formula "7") (term "2,1,0,0,0,0,1,0") (ifseqformula "31"))
   (rule "pullOutSelect" (formula "3") (term "0,0,1") (inst "selectSK=arr_0"))
   (rule "simplifySelectOfAnon" (formula "3"))
    (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "54")) (ifInst ""  (formula "20")))
   (rule "elementOfArrayRangeConcrete" (formula "3") (term "0,0"))
    (builtin "One Step Simplification" (formula "3"))
   (rule "inEqSimp_commuteLeq" (formula "4") (term "0,1"))
   (rule "inEqSimp_commuteLeq" (formula "3") (term "1,0,0"))
   (rule "pullOutSelect" (formula "4") (term "0,1,1") (inst "selectSK=arr_1"))
   (rule "simplifySelectOfAnon" (formula "4"))
    (builtin "One Step Simplification" (formula "4") (ifInst ""  (formula "55")) (ifInst ""  (formula "21")))
   (rule "elementOfArrayRangeConcrete" (formula "4") (term "0,0"))
    (builtin "One Step Simplification" (formula "4"))
   (rule "leq_literals" (formula "4") (term "0,0,0"))
    (builtin "One Step Simplification" (formula "4"))
   (rule "inEqSimp_commuteLeq" (formula "4") (term "0,0"))
   (rule "commute_and" (formula "5") (term "1"))
   (rule "commute_and" (formula "9") (term "0,0,0"))
   (rule "commute_and" (formula "9") (term "1,0,0"))
   (rule "commute_and" (formula "8") (term "1,0,0"))
   (rule "commute_and" (formula "8") (term "0,0,0"))
   (rule "commute_and_2" (formula "8") (term "0,0"))
   (rule "shift_paren_and" (formula "9") (term "0,0"))
   (rule "commute_and_2" (formula "9") (term "0,0,0"))
   (rule "shift_paren_and" (formula "8") (term "0,0,0"))
   (rule "ifElseUnfold" (formula "58") (term "1") (inst "#boolv=x_2"))
   (rule "variableDeclaration" (formula "58") (term "1") (newnames "x_2"))
   (rule "compound_less_than_comparison_2" (formula "58") (term "1") (inst "#v1=x_4") (inst "#v0=x_3"))
   (rule "variableDeclarationAssign" (formula "58") (term "1"))
   (rule "variableDeclaration" (formula "58") (term "1") (newnames "x_3"))
   (rule "assignment" (formula "58") (term "1"))
    (builtin "One Step Simplification" (formula "58"))
   (rule "variableDeclarationAssign" (formula "58") (term "1"))
   (rule "variableDeclaration" (formula "58") (term "1") (newnames "x_4"))
   (rule "assignment_read_attribute_this_final" (formula "58"))
    (builtin "One Step Simplification" (formula "58"))
   (rule "applyEq" (formula "58") (term "0,1,0") (ifseqformula "33"))
   (rule "less_than_comparison_simple" (formula "58") (term "1"))
    (builtin "One Step Simplification" (formula "58"))
   (rule "arrayLengthIsAShort" (formula "32") (term "0"))
   (rule "expand_inShort" (formula "32"))
   (rule "replace_short_MAX" (formula "32") (term "1,0"))
   (rule "replace_short_MIN" (formula "32") (term "0,1"))
   (rule "andLeft" (formula "32"))
   (rule "inEqSimp_commuteLeq" (formula "33"))
   (rule "arrayLengthNotNegative" (formula "34") (term "0"))
   (rule "ifElseSplit" (formula "61"))
   (branch "if x_2 true"
       (builtin "Block Contract (Internal)" (formula "62") (newnames "exc_25,heap_Before_BLOCK,savedHeap_Before_BLOCK,o,f"))
      (branch "Validity"
          (builtin "One Step Simplification" (formula "1"))
          (builtin "One Step Simplification" (formula "43") (ifInst ""  (formula "24")) (ifInst ""  (formula "14")) (ifInst ""  (formula "59")) (ifInst ""  (formula "13")))
          (builtin "One Step Simplification" (formula "63"))
         (rule "eqSymm" (formula "63") (term "0,0,1,0,1"))
         (rule "variableDeclarationAssign" (formula "63") (term "1"))
         (rule "variableDeclaration" (formula "63") (term "1") (newnames "exc_25_1"))
         (rule "assignment" (formula "63") (term "1"))
          (builtin "One Step Simplification" (formula "63"))
         (rule "emptyStatement" (formula "63") (term "1"))
          (builtin "One Step Simplification" (formula "63"))
         (rule "emptyStatement" (formula "63") (term "1"))
         (rule "tryEmpty" (formula "63") (term "1"))
         (rule "blockEmptyLabel" (formula "63") (term "1"))
         (rule "blockEmpty" (formula "63") (term "1"))
         (rule "methodCallEmpty" (formula "63") (term "1"))
         (rule "emptyModality" (formula "63") (term "1"))
         (rule "andRight" (formula "63"))
         (branch "Case 1"
             (builtin "One Step Simplification" (formula "63"))
            (rule "closeTrue" (formula "63"))
         )
         (branch "Case 2"
             (builtin "One Step Simplification" (formula "63"))
            (rule "closeTrue" (formula "63"))
         )
      )
      (branch "Precondition"
         (rule "andRight" (formula "62"))
         (branch "Case 1"
            (rule "andRight" (formula "62"))
            (branch "Case 1"
                (builtin "One Step Simplification" (formula "1"))
                (builtin "One Step Simplification" (formula "62") (ifInst ""  (formula "24")))
               (rule "closeTrue" (formula "62"))
            )
            (branch "Case 2"
                (builtin "One Step Simplification" (formula "1"))
                (builtin "One Step Simplification" (formula "62"))
               (rule "wellFormedAnon" (formula "62"))
               (rule "replace_known_left" (formula "62") (term "1") (ifseqformula "11"))
                (builtin "One Step Simplification" (formula "62") (ifInst ""  (formula "12")))
               (rule "closeTrue" (formula "62"))
            )
         )
         (branch "Case 2"
            (rule "andRight" (formula "62"))
            (branch "Case 1"
               (rule "andRight" (formula "62"))
               (branch "Case 1"
                   (builtin "One Step Simplification" (formula "1"))
                   (builtin "One Step Simplification" (formula "62") (ifInst ""  (formula "58")))
                  (rule "closeTrue" (formula "62"))
               )
               (branch "Case 2"
                   (builtin "One Step Simplification" (formula "1"))
                   (builtin "One Step Simplification" (formula "62") (ifInst ""  (formula "13")))
                  (rule "closeTrue" (formula "62"))
               )
            )
            (branch "Case 2"
                (builtin "One Step Simplification" (formula "1"))
                (builtin "One Step Simplification" (formula "62") (ifInst ""  (formula "14")))
               (rule "closeTrue" (formula "62"))
            )
         )
      )
      (branch "Usage"
          (builtin "One Step Simplification" (formula "1"))
          (builtin "One Step Simplification" (formula "43"))
          (builtin "One Step Simplification" (formula "63"))
         (rule "andLeft" (formula "43"))
         (rule "andLeft" (formula "43"))
         (rule "replace_known_left" (formula "44") (term "0") (ifseqformula "43"))
          (builtin "One Step Simplification" (formula "44"))
         (rule "true_left" (formula "44"))
         (rule "elim_double_block_2" (formula "64") (term "1"))
         (rule "ifUnfold" (formula "64") (term "1") (inst "#boolv=x_2"))
         (rule "variableDeclaration" (formula "64") (term "1") (newnames "x_5"))
         (rule "inequality_comparison_simple" (formula "64") (term "1"))
          (builtin "One Step Simplification" (formula "64"))
         (rule "replace_known_left" (formula "64") (term "0,0,1,0") (ifseqformula "43"))
          (builtin "One Step Simplification" (formula "64"))
         (rule "ifSplit" (formula "64"))
         (branch "if x_5 true"
             (builtin "One Step Simplification" (formula "65"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "closeFalse" (formula "1"))
         )
         (branch "if x_5 false"
             (builtin "One Step Simplification" (formula "65"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "true_left" (formula "1"))
            (rule "blockEmpty" (formula "64") (term "1"))
             (builtin "Block Contract (Internal)" (formula "64") (newnames "exc_26,heap_Before_BLOCK_0,savedHeap_Before_BLOCK_0,o,f"))
            (branch "Validity"
                (builtin "One Step Simplification" (formula "45") (ifInst ""  (formula "24")) (ifInst ""  (formula "14")) (ifInst ""  (formula "61")) (ifInst ""  (formula "13")))
                (builtin "One Step Simplification" (formula "65"))
               (rule "eqSymm" (formula "65") (term "0,0,1,0,1"))
               (rule "variableDeclarationAssign" (formula "65") (term "1"))
               (rule "variableDeclaration" (formula "65") (term "1") (newnames "exc_26_1"))
               (rule "assignment" (formula "65") (term "1"))
                (builtin "One Step Simplification" (formula "65"))
               (rule "emptyStatement" (formula "65") (term "1"))
                (builtin "One Step Simplification" (formula "65"))
               (rule "emptyStatement" (formula "65") (term "1"))
               (rule "tryEmpty" (formula "65") (term "1"))
               (rule "blockEmptyLabel" (formula "65") (term "1"))
               (rule "blockEmpty" (formula "65") (term "1"))
               (rule "methodCallEmpty" (formula "65") (term "1"))
               (rule "emptyModality" (formula "65") (term "1"))
               (rule "andRight" (formula "65"))
               (branch "Case 1"
                   (builtin "One Step Simplification" (formula "65"))
                  (rule "closeTrue" (formula "65"))
               )
               (branch "Case 2"
                   (builtin "One Step Simplification" (formula "65"))
                  (rule "closeTrue" (formula "65"))
               )
            )
            (branch "Precondition"
               (rule "andRight" (formula "64"))
               (branch "Case 1"
                  (rule "andRight" (formula "64"))
                  (branch "Case 1"
                      (builtin "One Step Simplification" (formula "64") (ifInst ""  (formula "24")))
                     (rule "closeTrue" (formula "64"))
                  )
                  (branch "Case 2"
                      (builtin "One Step Simplification" (formula "64"))
                     (rule "wellFormedAnon" (formula "64"))
                     (rule "replace_known_left" (formula "64") (term "0") (ifseqformula "12"))
                      (builtin "One Step Simplification" (formula "64") (ifInst ""  (formula "11")))
                     (rule "closeTrue" (formula "64"))
                  )
               )
               (branch "Case 2"
                  (rule "andRight" (formula "64"))
                  (branch "Case 1"
                     (rule "andRight" (formula "64"))
                     (branch "Case 1"
                         (builtin "One Step Simplification" (formula "64") (ifInst ""  (formula "60")))
                        (rule "closeTrue" (formula "64"))
                     )
                     (branch "Case 2"
                         (builtin "One Step Simplification" (formula "64") (ifInst ""  (formula "13")))
                        (rule "closeTrue" (formula "64"))
                     )
                  )
                  (branch "Case 2"
                      (builtin "One Step Simplification" (formula "64") (ifInst ""  (formula "14")))
                     (rule "closeTrue" (formula "64"))
                  )
               )
            )
            (branch "Usage"
                (builtin "One Step Simplification" (formula "45"))
                (builtin "One Step Simplification" (formula "65"))
               (rule "andLeft" (formula "45"))
               (rule "andLeft" (formula "45"))
               (rule "andLeft" (formula "47"))
               (rule "replace_known_left" (formula "46") (term "0") (ifseqformula "45"))
                (builtin "One Step Simplification" (formula "46"))
               (rule "true_left" (formula "46"))
               (rule "pullOutSelect" (formula "46") (term "0") (inst "selectSK=arr_2"))
               (rule "simplifySelectOfAnon" (formula "46"))
                (builtin "One Step Simplification" (formula "46") (ifInst ""  (formula "65")) (ifInst ""  (formula "22")))
               (rule "eqSymm" (formula "47"))
               (rule "applyEqReverse" (formula "46") (term "1") (ifseqformula "47"))
               (rule "hideAuxiliaryEq" (formula "47"))
               (rule "elementOfArrayRangeConcrete" (formula "46") (term "0,0"))
                (builtin "One Step Simplification" (formula "46"))
               (rule "inEqSimp_commuteLeq" (formula "46") (term "0,0,0"))
               (rule "replace_known_left" (formula "46") (term "0,0,0") (ifseqformula "2"))
                (builtin "One Step Simplification" (formula "46"))
               (rule "inEqSimp_commuteLeq" (formula "46") (term "0,0"))
               (rule "replace_known_left" (formula "46") (term "0,0") (ifseqformula "3"))
                (builtin "One Step Simplification" (formula "46"))
               (rule "elim_double_block_2" (formula "67") (term "1"))
               (rule "ifUnfold" (formula "67") (term "1") (inst "#boolv=x_2"))
               (rule "variableDeclaration" (formula "67") (term "1") (newnames "x_6"))
               (rule "inequality_comparison_simple" (formula "67") (term "1"))
                (builtin "One Step Simplification" (formula "67"))
               (rule "replace_known_left" (formula "67") (term "0,0,1,0") (ifseqformula "45"))
                (builtin "One Step Simplification" (formula "67"))
               (rule "onlyCreatedObjectsAreReferencedFinal" (formula "62") (term "1") (ifseqformula "12") (ifseqformula "13"))
               (rule "onlyCreatedObjectsAreReferencedFinal" (formula "62") (term "0,0") (ifseqformula "13") (ifseqformula "14"))
               (rule "onlyCreatedObjectsAreReferencedFinal" (formula "62") (term "1") (ifseqformula "14") (ifseqformula "25"))
               (rule "onlyCreatedObjectsAreReferencedFinal" (formula "60") (term "1") (ifseqformula "15") (ifseqformula "26"))
               (rule "ifSplit" (formula "71"))
               (branch "if x_6 true"
                   (builtin "One Step Simplification" (formula "72"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "closeFalse" (formula "1"))
               )
               (branch "if x_6 false"
                   (builtin "One Step Simplification" (formula "72"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "true_left" (formula "1"))
                  (rule "blockEmpty" (formula "71") (term "1"))
                  (rule "variableDeclarationAssign" (formula "71") (term "1"))
                  (rule "variableDeclaration" (formula "71") (term "1") (newnames "size"))
                  (rule "compound_addition_2" (formula "71") (term "1") (inst "#v1=x_3") (inst "#v0=x_2"))
                  (rule "variableDeclarationAssign" (formula "71") (term "1"))
                  (rule "variableDeclaration" (formula "71") (term "1") (newnames "x_7"))
                  (rule "assignment_array2" (formula "71"))
                  (branch "Normal Execution (_bucket_starts != null)"
                      (builtin "One Step Simplification" (formula "71"))
                     (rule "replaceKnownSelect_taclet21201_2" (formula "71") (term "0,1,0"))
                     (rule "replaceKnownAuxiliaryConstant_taclet21201_3" (formula "71") (term "0,1,0"))
                     (rule "variableDeclarationAssign" (formula "71") (term "1"))
                     (rule "variableDeclaration" (formula "71") (term "1") (newnames "x_8"))
                      (builtin "Use Operation Contract" (formula "71") (newnames "heapBefore_len,result_21,exc_27") (contract "de.wiesler.Buffers[de.wiesler.Buffers::len(int)].JML normal_behavior operation contract.0"))
                     (branch "Post (len)"
                         (builtin "One Step Simplification" (formula "52") (ifInst ""  (formula "48")))
                         (builtin "One Step Simplification" (formula "72"))
                        (rule "expand_inInt" (formula "52") (term "0,1,0"))
                        (rule "replace_int_MIN" (formula "52") (term "0,1,0,1,0"))
                        (rule "replace_int_MAX" (formula "52") (term "1,0,0,1,0"))
                        (rule "andLeft" (formula "52"))
                        (rule "andLeft" (formula "52"))
                        (rule "andLeft" (formula "52"))
                        (rule "andLeft" (formula "53"))
                        (rule "andLeft" (formula "52"))
                        (rule "eqSymm" (formula "54"))
                        (rule "inEqSimp_commuteLeq" (formula "53"))
                        (rule "assignment" (formula "76") (term "1"))
                         (builtin "One Step Simplification" (formula "76"))
                        (rule "applyEq" (formula "54") (term "0") (ifseqformula "51"))
                        (rule "applyEq" (formula "51") (term "1") (ifseqformula "54"))
                        (rule "assignmentAdditionInt" (formula "76") (term "1"))
                        (branch "Overflow check"
                            (builtin "One Step Simplification" (formula "76"))
                           (rule "expand_inInt" (formula "76") (userinteraction))
                           (rule "andRight" (formula "76") (userinteraction))
                           (branch "Case 1"
                              (rule "replace_int_MAX" (formula "76") (term "1"))
                              (rule "polySimp_homoEq" (formula "14") (term "1,0"))
                              (rule "polySimp_homoEq" (formula "14") (term "0,1,0,1,0,1,0"))
                              (rule "polySimp_mulComm0" (formula "14") (term "1,0,1,0"))
                              (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,1,1,1,0,1,0"))
                              (rule "polySimp_addComm0" (formula "76") (term "0"))
                              (rule "polySimp_rightDist" (formula "14") (term "1,0,1,0"))
                              (rule "polySimp_mulAssoc" (formula "14") (term "0,1,0,1,0"))
                              (rule "polySimp_mulComm0" (formula "14") (term "0,0,1,0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "14") (term "0,1,0,1,0"))
                              (rule "polySimp_elimOne" (formula "14") (term "0,1,0,1,0"))
                              (rule "polySimp_rightDist" (formula "14") (term "1,0,0,0,1,1,0,1,0"))
                              (rule "mul_literals" (formula "14") (term "0,1,0,0,0,1,1,0,1,0"))
                              (rule "polySimp_addAssoc" (formula "14") (term "0,0,0,1,1,0,1,0"))
                              (rule "polySimp_addComm0" (formula "14") (term "0,0,0,0,1,1,0,1,0"))
                              (rule "polySimp_addAssoc" (formula "14") (term "0,1,0"))
                              (rule "inEqSimp_leqRight" (formula "76"))
                              (rule "mul_literals" (formula "1") (term "1,0,0"))
                              (rule "add_literals" (formula "1") (term "0,0"))
                              (rule "polySimp_addAssoc" (formula "1") (term "0"))
                              (rule "inEqSimp_ltToLeq" (formula "11") (term "0"))
                              (rule "add_zero_right" (formula "11") (term "0,0"))
                              (rule "polySimp_mulComm0" (formula "11") (term "1,0,0"))
                              (rule "inEqSimp_ltToLeq" (formula "6"))
                              (rule "polySimp_mulComm0" (formula "6") (term "1,0,0"))
                              (rule "polySimp_addComm1" (formula "6") (term "0"))
                              (rule "inEqSimp_ltToLeq" (formula "14") (term "0,0,0,0,0"))
                              (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,0,0,0,0,0"))
                              (rule "inEqSimp_ltToLeq" (formula "15") (term "0,0,0,0,0"))
                              (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,0,0,0,0,0"))
                              (rule "inEqSimp_homoInEq0" (formula "9") (term "0,0,0"))
                              (rule "times_zero_2" (formula "9") (term "1,0,0,0,0"))
                              (rule "add_zero_right" (formula "9") (term "0,0,0,0"))
                              (rule "inEqSimp_homoInEq1" (formula "35"))
                              (rule "polySimp_addComm1" (formula "35") (term "0"))
                              (rule "polySimp_sepNegMonomial" (formula "15") (term "1,0"))
                              (rule "polySimp_mulLiterals" (formula "15") (term "0,1,0"))
                              (rule "polySimp_elimOne" (formula "15") (term "0,1,0"))
                              (rule "polySimp_sepNegMonomial" (formula "15") (term "0,0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "15") (term "0,0,0,1,0"))
                              (rule "polySimp_elimOne" (formula "15") (term "0,0,0,1,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                              (rule "polySimp_mulComm0" (formula "1") (term "1"))
                              (rule "polySimp_rightDist" (formula "1") (term "1"))
                              (rule "mul_literals" (formula "1") (term "0,1"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "11") (term "0"))
                              (rule "polySimp_mulLiterals" (formula "11") (term "0,0"))
                              (rule "polySimp_elimOne" (formula "11") (term "0,0"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "6"))
                              (rule "polySimp_mulLiterals" (formula "6") (term "0"))
                              (rule "polySimp_elimOne" (formula "6") (term "0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "0,0,0,0,0"))
                              (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,0,0,0"))
                              (rule "polySimp_rightDist" (formula "14") (term "1,0,0,0,0,0"))
                              (rule "polySimp_mulLiterals" (formula "14") (term "1,1,0,0,0,0,0"))
                              (rule "mul_literals" (formula "14") (term "0,1,0,0,0,0,0"))
                              (rule "polySimp_elimOne" (formula "14") (term "1,1,0,0,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "0,0,0,0,0"))
                              (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,0,0,0"))
                              (rule "polySimp_rightDist" (formula "15") (term "1,0,0,0,0,0"))
                              (rule "polySimp_mulLiterals" (formula "15") (term "1,1,0,0,0,0,0"))
                              (rule "mul_literals" (formula "15") (term "0,1,0,0,0,0,0"))
                              (rule "polySimp_elimOne" (formula "15") (term "1,1,0,0,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "9") (term "0,0,0"))
                              (rule "mul_literals" (formula "9") (term "1,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "35"))
                              (rule "polySimp_mulComm0" (formula "35") (term "1"))
                              (rule "polySimp_rightDist" (formula "35") (term "1"))
                              (rule "polySimp_mulLiterals" (formula "35") (term "1,1"))
                              (rule "mul_literals" (formula "35") (term "0,1"))
                              (rule "polySimp_elimOne" (formula "35") (term "1,1"))
                              (rule "inEqSimp_subsumption1" (formula "22") (ifseqformula "36"))
                              (rule "leq_literals" (formula "22") (term "0"))
                               (builtin "One Step Simplification" (formula "22"))
                              (rule "true_left" (formula "22"))
                              (rule "inEqSimp_subsumption1" (formula "38") (ifseqformula "39"))
                              (rule "leq_literals" (formula "38") (term "0"))
                               (builtin "One Step Simplification" (formula "38"))
                              (rule "true_left" (formula "38"))
                              (rule "inEqSimp_subsumption1" (formula "9") (term "1,0,0") (ifseqformula "8"))
                              (rule "inEqSimp_homoInEq0" (formula "9") (term "0,1,0,0"))
                              (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,1,0,0"))
                              (rule "polySimp_rightDist" (formula "9") (term "1,0,0,1,0,0"))
                              (rule "mul_literals" (formula "9") (term "0,1,0,0,1,0,0"))
                              (rule "polySimp_addAssoc" (formula "9") (term "0,0,1,0,0"))
                              (rule "polySimp_addComm0" (formula "9") (term "0,0,0,1,0,0"))
                              (rule "polySimp_pullOutFactor1b" (formula "9") (term "0,0,1,0,0"))
                              (rule "add_literals" (formula "9") (term "1,1,0,0,1,0,0"))
                              (rule "times_zero_1" (formula "9") (term "1,0,0,1,0,0"))
                              (rule "add_zero_right" (formula "9") (term "0,0,1,0,0"))
                              (rule "qeq_literals" (formula "9") (term "0,1,0,0"))
                               (builtin "One Step Simplification" (formula "9"))
                              (rule "inEqSimp_subsumption1" (formula "8") (ifseqformula "6"))
                              (rule "inEqSimp_homoInEq0" (formula "8") (term "0"))
                              (rule "polySimp_pullOutFactor1b" (formula "8") (term "0,0"))
                              (rule "add_literals" (formula "8") (term "1,1,0,0"))
                              (rule "times_zero_1" (formula "8") (term "1,0,0"))
                              (rule "add_zero_right" (formula "8") (term "0,0"))
                              (rule "qeq_literals" (formula "8") (term "0"))
                               (builtin "One Step Simplification" (formula "8"))
                              (rule "true_left" (formula "8"))
                              (rule "inEqSimp_subsumption1" (formula "31") (ifseqformula "32"))
                              (rule "leq_literals" (formula "31") (term "0"))
                               (builtin "One Step Simplification" (formula "31"))
                              (rule "true_left" (formula "31"))
                              (rule "inEqSimp_exactShadow3" (formula "22") (ifseqformula "41"))
                              (rule "mul_literals" (formula "22") (term "0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "22"))
                              (rule "mul_literals" (formula "22") (term "1"))
                              (rule "inEqSimp_exactShadow3" (formula "34") (ifseqformula "23"))
                              (rule "polySimp_mulComm0" (formula "34") (term "0,0"))
                              (rule "polySimp_addComm0" (formula "34") (term "0"))
                              (rule "inEqSimp_sepNegMonomial1" (formula "34"))
                              (rule "polySimp_mulLiterals" (formula "34") (term "0"))
                              (rule "polySimp_elimOne" (formula "34") (term "0"))
                              (rule "inEqSimp_exactShadow3" (formula "40") (ifseqformula "21"))
                              (rule "polySimp_mulComm0" (formula "40") (term "0,0"))
                              (rule "polySimp_addComm0" (formula "40") (term "0"))
                              (rule "inEqSimp_sepNegMonomial1" (formula "40"))
                              (rule "polySimp_mulLiterals" (formula "40") (term "0"))
                              (rule "polySimp_elimOne" (formula "40") (term "0"))
                              (rule "inEqSimp_exactShadow3" (formula "37") (ifseqformula "35"))
                              (rule "polySimp_mulComm0" (formula "37") (term "0,0"))
                              (rule "polySimp_addComm0" (formula "37") (term "0"))
                              (rule "inEqSimp_sepNegMonomial1" (formula "37"))
                              (rule "polySimp_mulLiterals" (formula "37") (term "0"))
                              (rule "polySimp_elimOne" (formula "37") (term "0"))
                              (rule "inEqSimp_subsumption0" (formula "23") (ifseqformula "37"))
                              (rule "leq_literals" (formula "23") (term "0"))
                               (builtin "One Step Simplification" (formula "23"))
                              (rule "true_left" (formula "23"))
                              (rule "inEqSimp_exactShadow3" (formula "40") (ifseqformula "41"))
                              (rule "polySimp_mulComm0" (formula "40") (term "0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "40"))
                              (rule "polySimp_mulLiterals" (formula "40") (term "1"))
                              (rule "polySimp_elimOne" (formula "40") (term "1"))
                              (rule "inEqSimp_exactShadow3" (formula "6") (ifseqformula "31"))
                              (rule "polySimp_rightDist" (formula "6") (term "0,0"))
                              (rule "mul_literals" (formula "6") (term "0,0,0"))
                              (rule "polySimp_addAssoc" (formula "6") (term "0"))
                              (rule "polySimp_addComm1" (formula "6") (term "0,0"))
                              (rule "add_literals" (formula "6") (term "0,0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "6"))
                              (rule "polySimp_mulComm0" (formula "6") (term "1"))
                              (rule "polySimp_rightDist" (formula "6") (term "1"))
                              (rule "polySimp_mulLiterals" (formula "6") (term "1,1"))
                              (rule "mul_literals" (formula "6") (term "0,1"))
                              (rule "polySimp_elimOne" (formula "6") (term "1,1"))
                              (rule "inEqSimp_exactShadow3" (formula "34") (ifseqformula "37"))
                              (rule "polySimp_mulComm0" (formula "34") (term "0,0"))
                              (rule "polySimp_addComm0" (formula "34") (term "0"))
                              (rule "inEqSimp_sepNegMonomial1" (formula "34"))
                              (rule "polySimp_mulLiterals" (formula "34") (term "0"))
                              (rule "polySimp_elimOne" (formula "34") (term "0"))
                              (rule "inEqSimp_subsumption0" (formula "21") (ifseqformula "34"))
                              (rule "leq_literals" (formula "21") (term "0"))
                               (builtin "One Step Simplification" (formula "21"))
                              (rule "true_left" (formula "21"))
                              (rule "inEqSimp_exactShadow3" (formula "6") (ifseqformula "29"))
                              (rule "polySimp_rightDist" (formula "6") (term "0,0"))
                              (rule "mul_literals" (formula "6") (term "0,0,0"))
                              (rule "polySimp_addComm1" (formula "6") (term "0"))
                              (rule "add_literals" (formula "6") (term "0,0"))
                              (rule "inEqSimp_sepNegMonomial1" (formula "6"))
                              (rule "polySimp_mulLiterals" (formula "6") (term "0"))
                              (rule "polySimp_elimOne" (formula "6") (term "0"))
                              (rule "inEqSimp_and_subsumption3" (formula "16") (term "0,0,0"))
                              (rule "leq_literals" (formula "16") (term "0,1,0,0,0,0"))
                               (builtin "One Step Simplification" (formula "16"))
                              (rule "nnf_imp2or" (formula "15") (term "0"))
                              (rule "nnf_imp2or" (formula "16") (term "0"))
                              (rule "nnf_notAnd" (formula "15") (term "0,0"))
                              (rule "inEqSimp_notGeq" (formula "15") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,1,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "15") (term "1,1,0,0"))
                              (rule "polySimp_rightDist" (formula "15") (term "1,1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "15") (term "1,1,1,0,0"))
                              (rule "mul_literals" (formula "15") (term "0,1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "15") (term "1,1,1,0,0"))
                              (rule "nnf_notAnd" (formula "16") (term "0,0"))
                              (rule "inEqSimp_notLeq" (formula "16") (term "1,0,0"))
                              (rule "mul_literals" (formula "16") (term "1,0,0,1,0,0"))
                              (rule "add_literals" (formula "16") (term "0,0,1,0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "16") (term "1,0,0"))
                              (rule "mul_literals" (formula "16") (term "1,1,0,0"))
                              (rule "nnf_notAnd" (formula "15") (term "0,0,0"))
                              (rule "inEqSimp_notLeq" (formula "15") (term "1,0,0,0"))
                              (rule "mul_literals" (formula "15") (term "1,0,0,1,0,0,0"))
                              (rule "add_literals" (formula "15") (term "0,0,1,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "15") (term "1,0,0,0"))
                              (rule "mul_literals" (formula "15") (term "1,1,0,0,0"))
                              (rule "nnf_notAnd" (formula "16") (term "0,0,0"))
                              (rule "inEqSimp_notLeq" (formula "16") (term "0,0,0,0"))
                              (rule "polySimp_rightDist" (formula "16") (term "1,0,0,0,0,0,0"))
                              (rule "mul_literals" (formula "16") (term "0,1,0,0,0,0,0,0"))
                              (rule "polySimp_addAssoc" (formula "16") (term "0,0,0,0,0,0"))
                              (rule "add_literals" (formula "16") (term "0,0,0,0,0,0,0"))
                              (rule "add_zero_left" (formula "16") (term "0,0,0,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "16") (term "0,0,0,0"))
                              (rule "polySimp_mulLiterals" (formula "16") (term "1,0,0,0,0"))
                              (rule "polySimp_elimOne" (formula "16") (term "1,0,0,0,0"))
                              (rule "inEqSimp_notGeq" (formula "16") (term "1,0,0,0"))
                              (rule "times_zero_1" (formula "16") (term "1,0,0,1,0,0,0"))
                              (rule "add_literals" (formula "16") (term "0,0,1,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "1,0,0,0"))
                              (rule "mul_literals" (formula "16") (term "1,1,0,0,0"))
                              (rule "nnf_notAnd" (formula "15") (term "0,0,0,0"))
                              (rule "inEqSimp_notGeq" (formula "15") (term "1,0,0,0,0"))
                              (rule "mul_literals" (formula "15") (term "1,0,0,1,0,0,0,0"))
                              (rule "add_literals" (formula "15") (term "0,0,1,0,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "1,0,0,0,0"))
                              (rule "mul_literals" (formula "15") (term "1,1,0,0,0,0"))
                              (rule "inEqSimp_notLeq" (formula "15") (term "0,0,0,0,0"))
                              (rule "polySimp_rightDist" (formula "15") (term "1,0,0,0,0,0,0,0"))
                              (rule "mul_literals" (formula "15") (term "0,1,0,0,0,0,0,0,0"))
                              (rule "polySimp_addAssoc" (formula "15") (term "0,0,0,0,0,0,0"))
                              (rule "add_literals" (formula "15") (term "0,0,0,0,0,0,0,0"))
                              (rule "add_zero_left" (formula "15") (term "0,0,0,0,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "15") (term "0,0,0,0,0"))
                              (rule "polySimp_mulLiterals" (formula "15") (term "1,0,0,0,0,0"))
                              (rule "polySimp_elimOne" (formula "15") (term "1,0,0,0,0,0"))
                              (rule "Class_invariant_axiom_for_de_wiesler_Buffers" (formula "47"))
                              (rule "andLeft" (formula "47"))
                              (rule "notLeft" (formula "47"))
                              (rule "notLeft" (formula "47"))
                              (rule "replace_known_right" (formula "2") (term "0") (ifseqformula "56"))
                               (builtin "One Step Simplification" (formula "2"))
                              (rule "replace_known_right" (formula "3") (term "0") (ifseqformula "55"))
                               (builtin "One Step Simplification" (formula "3"))
                              (rule "Definition_axiom_for_bufferLen_in_de_wiesler_Buffers" (formula "52") (term "0"))
                              (rule "Contract_axiom_for_countClassOfSliceEq_in_Classifier" (formula "48") (term "1"))
                              (rule "replace_known_right" (formula "48") (term "0,1,0") (ifseqformula "73"))
                               (builtin "One Step Simplification" (formula "48") (ifInst ""  (formula "28")) (ifInst ""  (formula "76")) (ifInst ""  (formula "18")) (ifInst ""  (formula "19")) (ifInst ""  (formula "28")) (ifInst ""  (formula "45")))
                              (rule "true_left" (formula "48"))
                              (rule "Definition_axiom_for_countClassOfSliceEq_in_de_wiesler_Classifier" (formula "13") (term "1,2,0") (inst "i=i"))
                              (rule "Free_class_invariant_axiom_for_de_wiesler_Buffers" (formula "29") (inst "b=b"))
                               (builtin "One Step Simplification" (formula "29"))
                              (rule "expand_inInt" (formula "29") (term "1,0,0,1"))
                              (rule "replace_int_MAX" (formula "29") (term "1,0,1,0,0,1"))
                              (rule "replace_int_MIN" (formula "29") (term "0,1,1,0,0,1"))
                              (rule "andLeft" (formula "29"))
                              (rule "andLeft" (formula "29"))
                              (rule "andLeft" (formula "29"))
                              (rule "andLeft" (formula "31"))
                              (rule "andLeft" (formula "29"))
                              (rule "notLeft" (formula "29"))
                              (rule "translateJavaMulInt" (formula "29") (term "1"))
                              (rule "mul_literals" (formula "29") (term "1"))
                              (rule "eqSymm" (formula "59"))
                              (rule "inEqSimp_ltToLeq" (formula "33") (term "1,0,0,0"))
                              (rule "polySimp_mulComm0" (formula "33") (term "1,0,0,1,0,0,0"))
                              (rule "inEqSimp_commuteLeq" (formula "33") (term "0,1,0"))
                              (rule "inEqSimp_commuteLeq" (formula "33") (term "1,1,0,0"))
                              (rule "inEqSimp_commuteLeq" (formula "33") (term "0,0,0,0"))
                              (rule "inEqSimp_commuteLeq" (formula "31"))
                              (rule "replace_known_left" (formula "11") (term "0,0") (ifseqformula "31"))
                               (builtin "One Step Simplification" (formula "11"))
                              (rule "applyEqReverse" (formula "12") (term "0,0,1") (ifseqformula "11"))
                              (rule "hideAuxiliaryEq" (formula "11"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "32") (term "1,0,0,0"))
                              (rule "polySimp_mulComm0" (formula "32") (term "1,1,0,0,0"))
                              (rule "polySimp_rightDist" (formula "32") (term "1,1,0,0,0"))
                              (rule "polySimp_mulLiterals" (formula "32") (term "1,1,1,0,0,0"))
                              (rule "mul_literals" (formula "32") (term "0,1,1,0,0,0"))
                              (rule "polySimp_elimOne" (formula "32") (term "1,1,1,0,0,0"))
                              (rule "inEqSimp_exactShadow3" (formula "30") (ifseqformula "35"))
                              (rule "times_zero_1" (formula "30") (term "0,0"))
                              (rule "add_zero_left" (formula "30") (term "0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "30"))
                              (rule "mul_literals" (formula "30") (term "1"))
                              (rule "inEqSimp_subsumption1" (formula "35") (ifseqformula "30"))
                              (rule "leq_literals" (formula "35") (term "0"))
                               (builtin "One Step Simplification" (formula "35"))
                              (rule "true_left" (formula "35"))
                              (rule "inEqSimp_exactShadow3" (formula "8") (ifseqformula "32"))
                              (rule "polySimp_rightDist" (formula "8") (term "0,0"))
                              (rule "mul_literals" (formula "8") (term "0,0,0"))
                              (rule "polySimp_addComm1" (formula "8") (term "0"))
                              (rule "add_literals" (formula "8") (term "0,0"))
                              (rule "inEqSimp_sepNegMonomial1" (formula "8"))
                              (rule "polySimp_mulLiterals" (formula "8") (term "0"))
                              (rule "polySimp_elimOne" (formula "8") (term "0"))
                              (rule "inEqSimp_subsumption0" (formula "6") (ifseqformula "8"))
                              (rule "leq_literals" (formula "6") (term "0"))
                               (builtin "One Step Simplification" (formula "6"))
                              (rule "true_left" (formula "6"))
                              (rule "Free_class_invariant_axiom_for_de_wiesler_Buffers" (formula "56") (inst "b=b"))
                               (builtin "One Step Simplification" (formula "56") (ifInst ""  (formula "29")) (ifInst ""  (formula "32")))
                              (rule "expand_inInt" (formula "56") (term "1,0,0,1"))
                              (rule "replace_int_MAX" (formula "56") (term "1,0,1,0,0,1"))
                              (rule "replace_int_MIN" (formula "56") (term "0,1,1,0,0,1"))
                              (rule "andLeft" (formula "56"))
                              (rule "andLeft" (formula "56"))
                              (rule "andLeft" (formula "56"))
                              (rule "notLeft" (formula "56"))
                              (rule "translateJavaMulInt" (formula "56") (term "1"))
                              (rule "mul_literals" (formula "56") (term "1"))
                              (rule "eqSymm" (formula "59"))
                              (rule "inEqSimp_ltToLeq" (formula "57") (term "1,0,0,0"))
                              (rule "polySimp_mulComm0" (formula "57") (term "1,0,0,1,0,0,0"))
                              (rule "inEqSimp_commuteLeq" (formula "57") (term "1,1,0,0"))
                              (rule "inEqSimp_commuteLeq" (formula "57") (term "0,1,0"))
                              (rule "inEqSimp_commuteLeq" (formula "57") (term "0,0,0,0"))
                              (rule "inEqSimp_commuteLeq" (formula "56"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "56") (term "1,0,0,0"))
                              (rule "polySimp_mulComm0" (formula "56") (term "1,1,0,0,0"))
                              (rule "polySimp_rightDist" (formula "56") (term "1,1,0,0,0"))
                              (rule "polySimp_mulLiterals" (formula "56") (term "1,1,1,0,0,0"))
                              (rule "mul_literals" (formula "56") (term "0,1,1,0,0,0"))
                              (rule "polySimp_elimOne" (formula "56") (term "1,1,1,0,0,0"))
                              (rule "Definition_axiom_for_bufferLen_in_de_wiesler_Buffers" (formula "52") (term "0"))
                              (rule "pullOutSelect" (formula "52") (term "0") (inst "selectSK=arr_3"))
                              (rule "simplifySelectOfAnon" (formula "52"))
                               (builtin "One Step Simplification" (formula "52") (ifInst ""  (formula "59")) (ifInst ""  (formula "3")))
                              (rule "eqSymm" (formula "53"))
                              (rule "applyEqReverse" (formula "52") (term "1") (ifseqformula "53"))
                              (rule "hideAuxiliaryEq" (formula "53"))
                              (rule "elementOfArrayRangeConcrete" (formula "52") (term "0,0"))
                              (rule "replace_known_right" (formula "52") (term "0,0,0,0") (ifseqformula "66"))
                               (builtin "One Step Simplification" (formula "52") (ifInst ""  (formula "55")))
                              (rule "true_left" (formula "52"))
                              (rule "Definition_axiom_for_countClassOfSliceEq_in_de_wiesler_Classifier" (formula "51") (term "1") (inst "i=i"))
                              (rule "eqSymm" (formula "51"))
                              (rule "Definition_axiom_for_isSortedSlice_in_de_wiesler_Functions" (formula "13") (term "0") (inst "i=i"))
                               (builtin "One Step Simplification" (formula "13"))
                              (rule "expand_inInt" (formula "13") (term "1,0,0"))
                              (rule "replace_int_MAX" (formula "13") (term "1,0,1,0,0"))
                              (rule "replace_int_MIN" (formula "13") (term "0,1,1,0,0"))
                              (rule "translateJavaSubInt" (formula "13") (term "1,1,0,0,0"))
                              (rule "translateJavaAddInt" (formula "13") (term "0,2,1,1,0"))
                              (rule "polySimp_elimSub" (formula "13") (term "1,1,0,0,0"))
                              (rule "mul_literals" (formula "13") (term "1,1,1,0,0,0"))
                              (rule "polySimp_addComm0" (formula "13") (term "0,2,1,1,0"))
                              (rule "polySimp_addComm0" (formula "13") (term "1,1,0,0,0"))
                              (rule "inEqSimp_ltToLeq" (formula "13") (term "1,0,0,0"))
                              (rule "polySimp_rightDist" (formula "13") (term "1,0,0,1,0,0,0"))
                              (rule "mul_literals" (formula "13") (term "0,1,0,0,1,0,0,0"))
                              (rule "polySimp_addAssoc" (formula "13") (term "0,0,1,0,0,0"))
                              (rule "add_literals" (formula "13") (term "0,0,0,1,0,0,0"))
                              (rule "inEqSimp_commuteLeq" (formula "13") (term "0,0,0,0"))
                              (rule "inEqSimp_commuteLeq" (formula "13") (term "1,1,0,0"))
                              (rule "inEqSimp_commuteLeq" (formula "13") (term "1,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "1,0,0,0"))
                              (rule "polySimp_mulComm0" (formula "13") (term "1,1,0,0,0"))
                              (rule "polySimp_rightDist" (formula "13") (term "1,1,0,0,0"))
                              (rule "mul_literals" (formula "13") (term "0,1,1,0,0,0"))
                              (rule "polySimp_mulLiterals" (formula "13") (term "1,1,1,0,0,0"))
                              (rule "polySimp_elimOne" (formula "13") (term "1,1,1,0,0,0"))
                              (rule "Definition_axiom_for_bufferLen_in_de_wiesler_Buffers" (formula "12") (term "0,2,0"))
                              (rule "Definition_axiom_for_isClassifiedUntil_in_de_wiesler_Classifier" (formula "44") (term "0") (inst "b=b"))
                               (builtin "One Step Simplification" (formula "44"))
                              (rule "expand_inInt" (formula "44") (term "1,0,0,1,0"))
                              (rule "replace_int_MAX" (formula "44") (term "1,0,1,0,0,1,0"))
                              (rule "replace_int_MIN" (formula "44") (term "0,1,1,0,0,1,0"))
                              (rule "andLeft" (formula "44"))
                              (rule "andLeft" (formula "44"))
                              (rule "andLeft" (formula "44"))
                              (rule "andLeft" (formula "44"))
                              (rule "translateJavaSubInt" (formula "48") (term "1"))
                              (rule "polySimp_elimSub" (formula "48") (term "1"))
                              (rule "inEqSimp_ltToLeq" (formula "47") (term "1,0,0,0"))
                              (rule "polySimp_mulComm0" (formula "47") (term "1,0,0,1,0,0,0"))
                              (rule "inEqSimp_commuteLeq" (formula "47") (term "0,0,0,0"))
                              (rule "inEqSimp_commuteLeq" (formula "47") (term "1,1,0,0"))
                              (rule "applyEq" (formula "47") (term "0,1,0,0,1,0,0,0") (ifseqformula "43"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "47") (term "1,0,0,0"))
                              (rule "polySimp_mulComm0" (formula "47") (term "1,1,0,0,0"))
                              (rule "polySimp_rightDist" (formula "47") (term "1,1,0,0,0"))
                              (rule "polySimp_mulLiterals" (formula "47") (term "1,1,1,0,0,0"))
                              (rule "mul_literals" (formula "47") (term "0,1,1,0,0,0"))
                              (rule "polySimp_elimOne" (formula "47") (term "1,1,1,0,0,0"))
                              (rule "Class_invariant_axiom_for_de_wiesler_Classifier" (formula "27"))
                              (rule "andLeft" (formula "27"))
                              (rule "notLeft" (formula "28"))
                              (rule "notLeft" (formula "27"))
                              (rule "replace_known_right" (formula "5") (term "0") (ifseqformula "61"))
                               (builtin "One Step Simplification" (formula "5"))
                              (rule "replace_known_right" (formula "4") (term "0") (ifseqformula "60"))
                               (builtin "One Step Simplification" (formula "4"))
                              (rule "Definition_axiom_for_isBlockAligned_in_de_wiesler_Buffers" (formula "50") (term "0"))
                               (builtin "One Step Simplification" (formula "50"))
                              (rule "translateJavaMod" (formula "50") (term "0"))
                              (rule "jmod_axiom" (formula "50") (term "0"))
                              (rule "polySimp_mulLiterals" (formula "50") (term "1,0"))
                              (rule "polySimp_sepNegMonomial" (formula "50"))
                              (rule "polySimp_mulLiterals" (formula "50") (term "0"))
                              (rule "newSym_eq" (formula "50") (inst "l=l_0") (inst "newSymDef=add(mul(begin, Z(0(#))), mul(write, Z(0(#))))"))
                              (rule "times_zero_1" (formula "50") (term "1,1,1"))
                              (rule "times_zero_1" (formula "50") (term "0,1,1"))
                              (rule "add_zero_right" (formula "50") (term "1,1"))
                              (rule "add_zero_right" (formula "50") (term "1"))
                              (rule "applyEq" (formula "51") (term "0,0") (ifseqformula "50"))
                              (rule "polySimp_homoEq" (formula "51"))
                              (rule "polySimp_mulLiterals" (formula "51") (term "1,0"))
                              (rule "polySimp_addComm1" (formula "51") (term "0"))
                              (rule "polySimp_addComm0" (formula "51") (term "0,0"))
                              (rule "polySimp_sepPosMonomial" (formula "51"))
                              (rule "polySimp_mulComm0" (formula "51") (term "1"))
                              (rule "polySimp_rightDist" (formula "51") (term "1"))
                              (rule "polySimp_mulLiterals" (formula "51") (term "1,1"))
                              (rule "polySimp_elimOne" (formula "51") (term "1,1"))
                              (rule "polySimp_mulComm0" (formula "51") (term "0,1"))
                              (rule "polySimp_mulLiterals" (formula "51") (term "0,1"))
                              (rule "applyEq" (formula "22") (term "0") (ifseqformula "51"))
                              (rule "inEqSimp_homoInEq1" (formula "22"))
                              (rule "polySimp_mulComm0" (formula "22") (term "1,0"))
                              (rule "polySimp_rightDist" (formula "22") (term "1,0"))
                              (rule "polySimp_mulAssoc" (formula "22") (term "0,1,0"))
                              (rule "polySimp_mulComm0" (formula "22") (term "0,0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "22") (term "0,1,0"))
                              (rule "polySimp_addAssoc" (formula "22") (term "0"))
                              (rule "applyEq" (formula "12") (term "1,1,2,0") (ifseqformula "51"))
                              (rule "applyEq" (formula "49") (term "0") (ifseqformula "51"))
                              (rule "inEqSimp_commuteLeq" (formula "49"))
                              (rule "applyEq" (formula "43") (term "4,0") (ifseqformula "51"))
                              (rule "applyEq" (formula "48") (term "0") (ifseqformula "51"))
                              (rule "inEqSimp_homoInEq1" (formula "48"))
                              (rule "polySimp_mulComm0" (formula "48") (term "1,0"))
                              (rule "polySimp_rightDist" (formula "48") (term "1,0"))
                              (rule "polySimp_mulAssoc" (formula "48") (term "0,1,0"))
                              (rule "polySimp_mulComm0" (formula "48") (term "0,0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "48") (term "0,1,0"))
                              (rule "polySimp_addAssoc" (formula "48") (term "0"))
                              (rule "polySimp_addComm0" (formula "48") (term "0,0"))
                              (rule "polySimp_pullOutFactor1b" (formula "48") (term "0"))
                              (rule "add_literals" (formula "48") (term "1,1,0"))
                              (rule "times_zero_1" (formula "48") (term "1,0"))
                              (rule "add_zero_right" (formula "48") (term "0"))
                              (rule "applyEq" (formula "1") (term "4,0") (ifseqformula "51"))
                              (rule "applyEq" (formula "44") (term "4,0") (ifseqformula "51"))
                              (rule "applyEq" (formula "50") (term "1,0,0") (ifseqformula "51"))
                              (rule "polySimp_addAssoc" (formula "50") (term "0,0"))
                              (rule "polySimp_addComm0" (formula "50") (term "0,0,0"))
                              (rule "polySimp_pullOutFactor2b" (formula "50") (term "0,0"))
                              (rule "add_literals" (formula "50") (term "1,1,0,0"))
                              (rule "times_zero_1" (formula "50") (term "1,0,0"))
                              (rule "add_zero_right" (formula "50") (term "0,0"))
                              (rule "applyEq" (formula "55") (term "1,0") (ifseqformula "51"))
                              (rule "applyEq" (formula "21") (term "0") (ifseqformula "51"))
                              (rule "inEqSimp_homoInEq0" (formula "21"))
                              (rule "polySimp_mulComm0" (formula "21") (term "1,0"))
                              (rule "polySimp_rightDist" (formula "21") (term "1,0"))
                              (rule "polySimp_mulAssoc" (formula "21") (term "0,1,0"))
                              (rule "polySimp_mulComm0" (formula "21") (term "0,0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "21") (term "0,1,0"))
                              (rule "polySimp_addAssoc" (formula "21") (term "0"))
                              (rule "applyEq" (formula "14") (term "4,1,1,0") (ifseqformula "51"))
                              (rule "applyEq" (formula "47") (term "0,1,1") (ifseqformula "51"))
                              (rule "polySimp_mulComm0" (formula "47") (term "1,1"))
                              (rule "polySimp_rightDist" (formula "47") (term "1,1"))
                              (rule "polySimp_mulAssoc" (formula "47") (term "0,1,1"))
                              (rule "polySimp_mulComm0" (formula "47") (term "0,0,1,1"))
                              (rule "polySimp_mulLiterals" (formula "47") (term "0,1,1"))
                              (rule "polySimp_addComm0" (formula "47") (term "1"))
                              (rule "applyEq" (formula "15") (term "4,1,0,1,1,0") (ifseqformula "51"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "22"))
                              (rule "polySimp_mulLiterals" (formula "22") (term "0"))
                              (rule "polySimp_elimOne" (formula "22") (term "0"))
                              (rule "inEqSimp_invertInEq0" (formula "48"))
                              (rule "polySimp_mulLiterals" (formula "48") (term "0"))
                              (rule "times_zero_2" (formula "48") (term "1"))
                              (rule "inEqSimp_sepNegMonomial1" (formula "21"))
                              (rule "polySimp_mulLiterals" (formula "21") (term "0"))
                              (rule "polySimp_elimOne" (formula "21") (term "0"))
                              (rule "elimGcdGeq_antec" (formula "48") (inst "elimGcdRightDiv=Z(0(#))") (inst "elimGcdLeftDiv=l_0") (inst "elimGcd=Z(6(5(2(#))))"))
                              (rule "leq_literals" (formula "48") (term "0,0"))
                               (builtin "One Step Simplification" (formula "48"))
                              (rule "polySimp_mulLiterals" (formula "48") (term "1,0,0"))
                              (rule "mul_literals" (formula "48") (term "0,1,0,0,0,0,0"))
                              (rule "times_zero_1" (formula "48") (term "1,0,0,0,0,0"))
                              (rule "add_zero_right" (formula "48") (term "0,0,0,0"))
                              (rule "add_literals" (formula "48") (term "0,0,0,0"))
                              (rule "polySimp_pullOutFactor0b" (formula "48") (term "0,0"))
                              (rule "add_literals" (formula "48") (term "1,1,0,0"))
                              (rule "times_zero_1" (formula "48") (term "1,0,0"))
                              (rule "add_zero_right" (formula "48") (term "0,0"))
                              (rule "leq_literals" (formula "48") (term "0"))
                               (builtin "One Step Simplification" (formula "48"))
                              (rule "inEqSimp_exactShadow3" (formula "35") (ifseqformula "21"))
                              (rule "mul_literals" (formula "35") (term "0,0"))
                              (rule "add_zero_left" (formula "35") (term "0"))
                              (rule "inEqSimp_sepNegMonomial1" (formula "35"))
                              (rule "polySimp_mulLiterals" (formula "35") (term "0"))
                              (rule "elimGcdLeq_antec" (formula "35") (inst "elimGcdRightDiv=Z(7(0(6(8(8(3(8(#))))))))") (inst "elimGcdLeftDiv=l_0") (inst "elimGcd=Z(6(5(2(#))))"))
                              (rule "mul_literals" (formula "35") (term "0,1,0,0,0,0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "35") (term "1,0,1,0"))
                              (rule "neg_literal" (formula "35") (term "0,0,0,0,0,1,0"))
                              (rule "leq_literals" (formula "35") (term "0,0"))
                               (builtin "One Step Simplification" (formula "35"))
                              (rule "mul_literals" (formula "35") (term "1,0,0,0,0,0"))
                              (rule "add_literals" (formula "35") (term "0,0,0,0,0"))
                              (rule "add_literals" (formula "35") (term "0,0,0,0"))
                              (rule "polySimp_pullOutFactor0b" (formula "35") (term "0,0"))
                              (rule "add_literals" (formula "35") (term "1,1,0,0"))
                              (rule "times_zero_1" (formula "35") (term "1,0,0"))
                              (rule "add_zero_right" (formula "35") (term "0,0"))
                              (rule "qeq_literals" (formula "35") (term "0"))
                               (builtin "One Step Simplification" (formula "35"))
                              (rule "inEqSimp_exactShadow3" (formula "50") (ifseqformula "41"))
                              (rule "polySimp_rightDist" (formula "50") (term "0,0"))
                              (rule "polySimp_mulAssoc" (formula "50") (term "0,0,0"))
                              (rule "polySimp_mulComm0" (formula "50") (term "0,0,0,0"))
                              (rule "polySimp_mulLiterals" (formula "50") (term "0,0,0"))
                              (rule "polySimp_addComm1" (formula "50") (term "0"))
                              (rule "polySimp_addComm0" (formula "50") (term "0,0"))
                              (rule "inEqSimp_sepNegMonomial1" (formula "50"))
                              (rule "polySimp_mulLiterals" (formula "50") (term "0"))
                              (rule "polySimp_elimOne" (formula "50") (term "0"))
                              (rule "inEqSimp_subsumption0" (formula "21") (ifseqformula "50"))
                              (rule "inEqSimp_homoInEq0" (formula "21") (term "0"))
                              (rule "polySimp_mulComm0" (formula "21") (term "1,0,0"))
                              (rule "polySimp_rightDist" (formula "21") (term "1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "21") (term "1,1,0,0"))
                              (rule "mul_literals" (formula "21") (term "0,1,0,0"))
                              (rule "polySimp_addAssoc" (formula "21") (term "0,0"))
                              (rule "polySimp_addComm1" (formula "21") (term "0,0,0"))
                              (rule "add_literals" (formula "21") (term "0,0,0,0"))
                              (rule "polySimp_pullOutFactor0b" (formula "21") (term "0,0"))
                              (rule "add_literals" (formula "21") (term "1,1,0,0"))
                              (rule "times_zero_1" (formula "21") (term "1,0,0"))
                              (rule "add_zero_right" (formula "21") (term "0,0"))
                              (rule "qeq_literals" (formula "21") (term "0"))
                               (builtin "One Step Simplification" (formula "21"))
                              (rule "true_left" (formula "21"))
                              (rule "inEqSimp_exactShadow3" (formula "21") (ifseqformula "36"))
                              (rule "polySimp_rightDist" (formula "21") (term "0,0"))
                              (rule "polySimp_mulLiterals" (formula "21") (term "1,0,0"))
                              (rule "mul_literals" (formula "21") (term "0,0,0"))
                              (rule "polySimp_addComm1" (formula "21") (term "0"))
                              (rule "add_literals" (formula "21") (term "0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "21"))
                              (rule "mul_literals" (formula "21") (term "1"))
                              (rule "inEqSimp_subsumption6" (formula "21") (ifseqformula "49"))
                              (rule "mul_literals" (formula "21") (term "1,1,0"))
                              (rule "greater_literals" (formula "21") (term "0,0"))
                               (builtin "One Step Simplification" (formula "21"))
                              (rule "leq_literals" (formula "21") (term "0"))
                               (builtin "One Step Simplification" (formula "21"))
                              (rule "true_left" (formula "21"))
                              (rule "inEqSimp_exactShadow3" (formula "35") (ifseqformula "49"))
                              (rule "times_zero_1" (formula "35") (term "0,0"))
                              (rule "add_zero_left" (formula "35") (term "0"))
                              (rule "inEqSimp_sepNegMonomial1" (formula "35"))
                              (rule "polySimp_mulLiterals" (formula "35") (term "0"))
                              (rule "elimGcdLeq_antec" (formula "35") (inst "elimGcdRightDiv=Z(7(2(1(#))))") (inst "elimGcdLeftDiv=l_0") (inst "elimGcd=Z(6(5(2(#))))"))
                              (rule "polySimp_mulLiterals" (formula "35") (term "1,0,0,0,0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "35") (term "1,0,1,0"))
                              (rule "neg_literal" (formula "35") (term "0,0,0,0,0,1,0"))
                              (rule "leq_literals" (formula "35") (term "0,0"))
                               (builtin "One Step Simplification" (formula "35"))
                              (rule "mul_literals" (formula "35") (term "1,0,0,0,0,0"))
                              (rule "polySimp_addLiterals" (formula "35") (term "0,0,0,0"))
                              (rule "add_literals" (formula "35") (term "0,0,0,0"))
                              (rule "polySimp_pullOutFactor0b" (formula "35") (term "0,0"))
                              (rule "add_literals" (formula "35") (term "1,1,0,0"))
                              (rule "times_zero_1" (formula "35") (term "1,0,0"))
                              (rule "add_zero_right" (formula "35") (term "0,0"))
                              (rule "qeq_literals" (formula "35") (term "0"))
                               (builtin "One Step Simplification" (formula "35"))
                              (rule "inEqSimp_subsumption0" (formula "34") (ifseqformula "35"))
                              (rule "leq_literals" (formula "34") (term "0"))
                               (builtin "One Step Simplification" (formula "34"))
                              (rule "true_left" (formula "34"))
                              (rule "Free_class_invariant_axiom_for_de_wiesler_Classifier" (formula "53"))
                               (builtin "One Step Simplification" (formula "53"))
                              (rule "andLeft" (formula "53"))
                              (rule "andLeft" (formula "53"))
                              (rule "andLeft" (formula "53"))
                              (rule "andLeft" (formula "53"))
                              (rule "andLeft" (formula "53"))
                              (rule "andLeft" (formula "53"))
                              (rule "translateJavaSubInt" (formula "58") (term "0,2,0"))
                              (rule "translateJavaSubInt" (formula "58") (term "0,2,1"))
                              (rule "translateJavaMulInt" (formula "55") (term "1,1"))
                              (rule "eqSymm" (formula "58"))
                              (rule "eqSymm" (formula "55"))
                              (rule "polySimp_elimSub" (formula "58") (term "0,2,1"))
                              (rule "mul_literals" (formula "58") (term "1,0,2,1"))
                              (rule "polySimp_elimSub" (formula "58") (term "0,2,0"))
                              (rule "mul_literals" (formula "58") (term "1,0,2,0"))
                              (rule "polySimp_mulComm0" (formula "55") (term "1,0"))
                              (rule "polySimp_addComm0" (formula "58") (term "0,2,1"))
                              (rule "polySimp_addComm0" (formula "58") (term "0,2,0"))
                              (rule "inEqSimp_commuteLeq" (formula "53"))
                              (rule "applyEq" (formula "53") (term "0") (ifseqformula "42"))
                              (rule "applyEq" (formula "54") (term "0") (ifseqformula "42"))
                              (rule "applyEq" (formula "54") (term "1") (ifseqformula "42"))
                              (rule "inEqSimp_subsumption1" (formula "29") (ifseqformula "53"))
                              (rule "leq_literals" (formula "29") (term "0"))
                               (builtin "One Step Simplification" (formula "29"))
                              (rule "true_left" (formula "29"))
                              (rule "inEqSimp_exactShadow3" (formula "52") (ifseqformula "32"))
                              (rule "mul_literals" (formula "52") (term "0,0"))
                              (rule "polySimp_addAssoc" (formula "52") (term "0"))
                              (rule "add_literals" (formula "52") (term "0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "52"))
                              (rule "mul_literals" (formula "52") (term "1"))
                              (rule "inEqSimp_subsumption1" (formula "28") (ifseqformula "52"))
                              (rule "leq_literals" (formula "28") (term "0"))
                               (builtin "One Step Simplification" (formula "28"))
                              (rule "true_left" (formula "28"))
                              (rule "nnf_imp2or" (formula "29") (term "0"))
                              (rule "nnf_imp2or" (formula "64") (term "0"))
                              (rule "nnf_imp2or" (formula "13") (term "0"))
                              (rule "nnf_imp2or" (formula "44") (term "0"))
                              (rule "Definition_axiom_for_bufferLen_in_de_wiesler_Buffers" (formula "15") (term "0,0,1,1,0"))
                              (rule "polySimp_addComm0" (formula "15") (term "0,1,1,0"))
                              (rule "Definition_axiom_for_classOf_in_de_wiesler_Classifier" (formula "12") (term "0,0,2,1,2,0"))
                              (rule "commute_or" (formula "15") (term "0,0,0"))
                              (rule "commute_or" (formula "14") (term "0,0,0,0"))
                              (rule "commute_and" (formula "11") (term "1"))
                              (rule "Definition_axiom_for_classOf_in_de_wiesler_Classifier" (formula "60") (term "0,0,2,0"))
                              (rule "Definition_axiom_for_count_in_de_wiesler_Buffers" (formula "45") (term "0") (inst "b=b"))
                              (rule "translateJavaCastInt" (formula "45") (term "0"))
                              (rule "ifthenelse_split" (formula "10") (term "0"))
                              (branch "j_0 >= 1 TRUE"
                                 (rule "applyEqReverse" (formula "12") (term "1,0,1") (ifseqformula "11"))
                                 (rule "hideAuxiliaryEq" (formula "11"))
                                 (rule "replace_known_left" (formula "11") (term "0") (ifseqformula "10"))
                                  (builtin "One Step Simplification" (formula "11"))
                                 (rule "andLeft" (formula "11"))
                                 (rule "inEqSimp_commuteGeq" (formula "11"))
                                 (rule "inEqSimp_subsumption1" (formula "9") (ifseqformula "10"))
                                 (rule "leq_literals" (formula "9") (term "0"))
                                  (builtin "One Step Simplification" (formula "9"))
                                 (rule "true_left" (formula "9"))
                                 (rule "Definition_axiom_for_isClassifiedWith_in_de_wiesler_Buffers" (formula "43") (term "0") (inst "b=b"))
                                  (builtin "One Step Simplification" (formula "43"))
                                 (rule "expand_inInt" (formula "43") (term "1,0,0"))
                                 (rule "replace_int_MAX" (formula "43") (term "1,0,1,0,0"))
                                 (rule "replace_int_MIN" (formula "43") (term "0,1,1,0,0"))
                                 (rule "translateJavaAddInt" (formula "43") (term "4,0,1,0"))
                                 (rule "translateJavaMulInt" (formula "43") (term "3,0,1,0"))
                                 (rule "translateJavaMulInt" (formula "43") (term "0,4,0,1,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "43") (term "1,0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "43") (term "1,0,0,1,0,0,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "43") (term "0,0,0,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "43") (term "1,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "43") (term "1,0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "43") (term "1,1,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "43") (term "1,1,0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "43") (term "1,1,1,0,0,0"))
                                 (rule "mul_literals" (formula "43") (term "0,1,1,0,0,0"))
                                 (rule "polySimp_elimOne" (formula "43") (term "1,1,1,0,0,0"))
                                 (rule "nnf_notAnd" (formula "29") (term "0,0"))
                                 (rule "nnf_notAnd" (formula "64") (term "0,0"))
                                 (rule "nnf_notAnd" (formula "13") (term "0,0"))
                                 (rule "nnf_notAnd" (formula "44") (term "0,0"))
                                 (rule "nnf_imp2or" (formula "43") (term "0"))
                                 (rule "Definition_axiom_for_allElementsCounted_in_de_wiesler_Classifier" (formula "41") (term "0") (inst "b=b") (inst "b_0=b_0"))
                                  (builtin "One Step Simplification" (formula "41"))
                                 (rule "expand_inInt" (formula "41") (term "1,0,0,0"))
                                 (rule "replace_int_MAX" (formula "41") (term "1,0,1,0,0,0"))
                                 (rule "replace_int_MIN" (formula "41") (term "0,1,1,0,0,0"))
                                 (rule "andLeft" (formula "41"))
                                 (rule "translateJavaSubInt" (formula "42") (term "1"))
                                 (rule "translateJavaCastInt" (formula "42") (term "0"))
                                 (rule "polySimp_elimSub" (formula "42") (term "1"))
                                 (rule "polySimp_pullOutFactor1b" (formula "42") (term "1"))
                                 (rule "add_literals" (formula "42") (term "1,1,1"))
                                 (rule "times_zero_1" (formula "42") (term "1,1"))
                                 (rule "add_zero_right" (formula "42") (term "1"))
                                 (rule "inEqSimp_ltToLeq" (formula "41") (term "1,0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "41") (term "1,0,0,1,0,0,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "41") (term "0,0,0,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "41") (term "1,1,0,0"))
                                 (rule "applyEq" (formula "42") (term "1,0") (ifseqformula "40"))
                                 (rule "applyEq" (formula "41") (term "0,1,0,0,1,0,0,0") (ifseqformula "40"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "41") (term "1,0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "41") (term "1,1,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "41") (term "1,1,0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "41") (term "1,1,1,0,0,0"))
                                 (rule "mul_literals" (formula "41") (term "0,1,1,0,0,0"))
                                 (rule "polySimp_elimOne" (formula "41") (term "1,1,1,0,0,0"))
                                 (rule "nnf_notAnd" (formula "44") (term "0,0"))
                                 (rule "nnf_notAnd" (formula "29") (term "0,0,0"))
                                 (rule "inEqSimp_notGeq" (formula "29") (term "0,0,0,0"))
                                 (rule "mul_literals" (formula "29") (term "1,0,0,0,0,0,0"))
                                 (rule "add_zero_right" (formula "29") (term "0,0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "29") (term "0,0,0,0"))
                                 (rule "mul_literals" (formula "29") (term "1,0,0,0,0"))
                                 (rule "inEqSimp_notLeq" (formula "29") (term "1,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "29") (term "1,0,0,1,0,0,0"))
                                 (rule "mul_literals" (formula "29") (term "0,1,0,0,1,0,0,0"))
                                 (rule "polySimp_addAssoc" (formula "29") (term "0,0,1,0,0,0"))
                                 (rule "add_literals" (formula "29") (term "0,0,0,1,0,0,0"))
                                 (rule "add_zero_left" (formula "29") (term "0,0,1,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "29") (term "1,0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "29") (term "1,1,0,0,0"))
                                 (rule "polySimp_elimOne" (formula "29") (term "1,1,0,0,0"))
                                 (rule "nnf_notAnd" (formula "29") (term "1,0,0"))
                                 (rule "inEqSimp_notGeq" (formula "29") (term "1,1,0,0"))
                                 (rule "mul_literals" (formula "29") (term "1,0,0,1,1,0,0"))
                                 (rule "add_literals" (formula "29") (term "0,0,1,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "29") (term "1,1,0,0"))
                                 (rule "mul_literals" (formula "29") (term "1,1,1,0,0"))
                                 (rule "inEqSimp_notLeq" (formula "29") (term "0,1,0,0"))
                                 (rule "mul_literals" (formula "29") (term "1,0,0,0,1,0,0"))
                                 (rule "add_literals" (formula "29") (term "0,0,0,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "29") (term "0,1,0,0"))
                                 (rule "mul_literals" (formula "29") (term "1,0,1,0,0"))
                                 (rule "nnf_notAnd" (formula "65") (term "0,0,0"))
                                 (rule "inEqSimp_notGeq" (formula "65") (term "0,0,0,0"))
                                 (rule "mul_literals" (formula "65") (term "1,0,0,0,0,0,0"))
                                 (rule "add_literals" (formula "65") (term "0,0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "65") (term "0,0,0,0"))
                                 (rule "mul_literals" (formula "65") (term "1,0,0,0,0"))
                                 (rule "inEqSimp_notLeq" (formula "65") (term "1,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "65") (term "1,0,0,1,0,0,0"))
                                 (rule "mul_literals" (formula "65") (term "0,1,0,0,1,0,0,0"))
                                 (rule "polySimp_addAssoc" (formula "65") (term "0,0,1,0,0,0"))
                                 (rule "add_literals" (formula "65") (term "0,0,0,1,0,0,0"))
                                 (rule "add_zero_left" (formula "65") (term "0,0,1,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "65") (term "1,0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "65") (term "1,1,0,0,0"))
                                 (rule "polySimp_elimOne" (formula "65") (term "1,1,0,0,0"))
                                 (rule "nnf_notAnd" (formula "65") (term "1,0,0"))
                                 (rule "inEqSimp_notGeq" (formula "65") (term "1,1,0,0"))
                                 (rule "mul_literals" (formula "65") (term "1,0,0,1,1,0,0"))
                                 (rule "add_literals" (formula "65") (term "0,0,1,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "65") (term "1,1,0,0"))
                                 (rule "mul_literals" (formula "65") (term "1,1,1,0,0"))
                                 (rule "inEqSimp_notLeq" (formula "65") (term "0,1,0,0"))
                                 (rule "mul_literals" (formula "65") (term "1,0,0,0,1,0,0"))
                                 (rule "add_literals" (formula "65") (term "0,0,0,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "65") (term "0,1,0,0"))
                                 (rule "mul_literals" (formula "65") (term "1,0,1,0,0"))
                                 (rule "nnf_notAnd" (formula "13") (term "0,0,0"))
                                 (rule "inEqSimp_notGeq" (formula "13") (term "0,0,0,0"))
                                 (rule "mul_literals" (formula "13") (term "1,0,0,0,0,0,0"))
                                 (rule "add_zero_right" (formula "13") (term "0,0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "0,0,0,0"))
                                 (rule "mul_literals" (formula "13") (term "1,0,0,0,0"))
                                 (rule "inEqSimp_notLeq" (formula "13") (term "1,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "13") (term "1,0,0,1,0,0,0"))
                                 (rule "mul_literals" (formula "13") (term "0,1,0,0,1,0,0,0"))
                                 (rule "polySimp_addAssoc" (formula "13") (term "0,0,1,0,0,0"))
                                 (rule "add_literals" (formula "13") (term "0,0,0,1,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "13") (term "1,0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "13") (term "1,1,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "13") (term "1,1,0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "13") (term "1,1,1,0,0,0"))
                                 (rule "mul_literals" (formula "13") (term "0,1,1,0,0,0"))
                                 (rule "polySimp_elimOne" (formula "13") (term "1,1,1,0,0,0"))
                                 (rule "nnf_notAnd" (formula "13") (term "1,0,0"))
                                 (rule "inEqSimp_notGeq" (formula "13") (term "1,1,0,0"))
                                 (rule "mul_literals" (formula "13") (term "1,0,0,1,1,0,0"))
                                 (rule "add_literals" (formula "13") (term "0,0,1,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "1,1,0,0"))
                                 (rule "mul_literals" (formula "13") (term "1,1,1,0,0"))
                                 (rule "inEqSimp_notLeq" (formula "13") (term "0,1,0,0"))
                                 (rule "mul_literals" (formula "13") (term "1,0,0,0,1,0,0"))
                                 (rule "add_literals" (formula "13") (term "0,0,0,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "13") (term "0,1,0,0"))
                                 (rule "mul_literals" (formula "13") (term "1,0,1,0,0"))
                                 (rule "nnf_notAnd" (formula "45") (term "0,0,0"))
                                 (rule "inEqSimp_notLeq" (formula "45") (term "1,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "45") (term "1,0,0,1,0,0,0"))
                                 (rule "mul_literals" (formula "45") (term "0,1,0,0,1,0,0,0"))
                                 (rule "polySimp_addAssoc" (formula "45") (term "0,0,1,0,0,0"))
                                 (rule "add_literals" (formula "45") (term "0,0,0,1,0,0,0"))
                                 (rule "add_zero_left" (formula "45") (term "0,0,1,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "45") (term "1,0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "45") (term "1,1,0,0,0"))
                                 (rule "polySimp_elimOne" (formula "45") (term "1,1,0,0,0"))
                                 (rule "inEqSimp_notGeq" (formula "45") (term "0,0,0,0"))
                                 (rule "mul_literals" (formula "45") (term "1,0,0,0,0,0,0"))
                                 (rule "add_zero_right" (formula "45") (term "0,0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "45") (term "0,0,0,0"))
                                 (rule "mul_literals" (formula "45") (term "1,0,0,0,0"))
                                 (rule "nnf_notAnd" (formula "45") (term "1,0,0"))
                                 (rule "inEqSimp_notLeq" (formula "45") (term "0,1,0,0"))
                                 (rule "mul_literals" (formula "45") (term "1,0,0,0,1,0,0"))
                                 (rule "add_literals" (formula "45") (term "0,0,0,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "45") (term "0,1,0,0"))
                                 (rule "mul_literals" (formula "45") (term "1,0,1,0,0"))
                                 (rule "inEqSimp_notGeq" (formula "45") (term "1,1,0,0"))
                                 (rule "mul_literals" (formula "45") (term "1,0,0,1,1,0,0"))
                                 (rule "add_literals" (formula "45") (term "0,0,1,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "45") (term "1,1,0,0"))
                                 (rule "mul_literals" (formula "45") (term "1,1,1,0,0"))
                                 (rule "Contract_axiom_for_countClassOfSliceEq_in_Classifier" (formula "1") (term "0"))
                                 (rule "replace_known_right" (formula "1") (term "0,1,0") (ifseqformula "87"))
                                  (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "90")) (ifInst ""  (formula "18")) (ifInst ""  (formula "19")))
                                 (rule "Definition_axiom_for_countClassOfSliceEq_in_de_wiesler_Classifier" (formula "2") (term "0") (inst "i=i"))
                                 (rule "Contract_axiom_for_isClassifiedBlocksRange_in_Classifier" (formula "44") (term "0"))
                                 (rule "translateJavaSubInt" (formula "44") (term "0,0,0,0,0,0,0"))
                                 (rule "replace_known_left" (formula "44") (term "1,0,0,0") (ifseqformula "18"))
                                  (builtin "One Step Simplification" (formula "44") (ifInst ""  (formula "91")) (ifInst ""  (formula "19")) (ifInst ""  (formula "88")))
                                 (rule "polySimp_elimSub" (formula "44") (term "0,0,0,0"))
                                 (rule "polySimp_pullOutFactor1b" (formula "44") (term "0,0,0,0"))
                                 (rule "add_literals" (formula "44") (term "1,1,0,0,0,0"))
                                 (rule "times_zero_1" (formula "44") (term "1,0,0,0,0"))
                                 (rule "add_zero_right" (formula "44") (term "0,0,0,0"))
                                 (rule "Definition_axiom_for_isClassifiedBlocksRange_in_de_wiesler_Classifier" (formula "45") (term "0") (inst "block=block"))
                                  (builtin "One Step Simplification" (formula "45"))
                                 (rule "expand_inInt" (formula "45") (term "1,0,0"))
                                 (rule "replace_int_MIN" (formula "45") (term "0,1,1,0,0"))
                                 (rule "replace_int_MAX" (formula "45") (term "1,0,1,0,0"))
                                 (rule "translateJavaDivInt" (formula "45") (term "1,1,0,0,0"))
                                 (rule "translateJavaAddInt" (formula "45") (term "4,0,1,0"))
                                 (rule "translateJavaAddInt" (formula "45") (term "3,0,1,0"))
                                 (rule "translateJavaSubInt" (formula "45") (term "0,1,1,0,0,0"))
                                 (rule "translateJavaMulInt" (formula "45") (term "1,4,0,1,0"))
                                 (rule "translateJavaMulInt" (formula "45") (term "1,3,0,1,0"))
                                 (rule "translateJavaAddInt" (formula "45") (term "0,1,4,0,1,0"))
                                 (rule "polySimp_elimSub" (formula "45") (term "0,1,1,0,0,0"))
                                 (rule "polySimp_pullOutFactor1b" (formula "45") (term "0,1,1,0,0,0"))
                                 (rule "add_literals" (formula "45") (term "1,1,0,1,1,0,0,0"))
                                 (rule "times_zero_1" (formula "45") (term "1,0,1,1,0,0,0"))
                                 (rule "add_zero_right" (formula "45") (term "0,1,1,0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "45") (term "1,4,0,1,0"))
                                 (rule "polySimp_addComm0" (formula "45") (term "1,1,4,0,1,0"))
                                 (rule "polySimp_rightDist" (formula "45") (term "1,4,0,1,0"))
                                 (rule "mul_literals" (formula "45") (term "0,1,4,0,1,0"))
                                 (rule "polySimp_addAssoc" (formula "45") (term "4,0,1,0"))
                                 (rule "polySimp_addComm0" (formula "45") (term "0,4,0,1,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "45") (term "1,0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "45") (term "1,0,0,1,0,0,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "45") (term "0,0,0,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "45") (term "1,1,0,0"))
                                 (rule "applyEq" (formula "45") (term "0,1,0,0,1,0,0,0") (ifseqformula "52"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "45") (term "1,0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "45") (term "1,1,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "45") (term "1,1,0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "45") (term "1,1,1,0,0,0"))
                                 (rule "mul_literals" (formula "45") (term "0,1,1,0,0,0"))
                                 (rule "polySimp_elimOne" (formula "45") (term "1,1,1,0,0,0"))
                                 (rule "nnf_imp2or" (formula "42") (term "0"))
                                 (rule "Contract_axiom_for_countClassOfSliceEq_in_Classifier" (formula "15") (term "1,1,0"))
                                 (rule "replace_known_left" (formula "15") (term "1,0,0,0") (ifseqformula "19"))
                                  (builtin "One Step Simplification" (formula "15") (ifInst ""  (formula "92")) (ifInst ""  (formula "20")) (ifInst ""  (formula "89")) (ifInst ""  (formula "1")))
                                 (rule "true_left" (formula "15"))
                                 (rule "Definition_axiom_for_countClassOfSliceEq_in_de_wiesler_Classifier" (formula "15") (term "1,1,0") (inst "i=i"))
                                 (rule "eqSymm" (formula "15") (term "1,0"))
                                 (rule "nnf_notAnd" (formula "46") (term "0,0,0"))
                                 (rule "inEqSimp_notLeq" (formula "46") (term "1,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "46") (term "1,0,0,1,0,0,0"))
                                 (rule "mul_literals" (formula "46") (term "0,1,0,0,1,0,0,0"))
                                 (rule "polySimp_addAssoc" (formula "46") (term "0,0,1,0,0,0"))
                                 (rule "add_literals" (formula "46") (term "0,0,0,1,0,0,0"))
                                 (rule "add_zero_left" (formula "46") (term "0,0,1,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "46") (term "1,0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "46") (term "1,1,0,0,0"))
                                 (rule "polySimp_elimOne" (formula "46") (term "1,1,0,0,0"))
                                 (rule "inEqSimp_notGeq" (formula "46") (term "0,0,0,0"))
                                 (rule "mul_literals" (formula "46") (term "1,0,0,0,0,0,0"))
                                 (rule "add_zero_right" (formula "46") (term "0,0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "46") (term "0,0,0,0"))
                                 (rule "mul_literals" (formula "46") (term "1,0,0,0,0"))
                                 (rule "nnf_notAnd" (formula "46") (term "1,0,0"))
                                 (rule "inEqSimp_notGeq" (formula "46") (term "1,1,0,0"))
                                 (rule "mul_literals" (formula "46") (term "1,0,0,1,1,0,0"))
                                 (rule "add_literals" (formula "46") (term "0,0,1,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "46") (term "1,1,0,0"))
                                 (rule "mul_literals" (formula "46") (term "1,1,1,0,0"))
                                 (rule "inEqSimp_notLeq" (formula "46") (term "0,1,0,0"))
                                 (rule "mul_literals" (formula "46") (term "1,0,0,0,1,0,0"))
                                 (rule "add_literals" (formula "46") (term "0,0,0,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "46") (term "0,1,0,0"))
                                 (rule "mul_literals" (formula "46") (term "1,0,1,0,0"))
                                 (rule "Class_invariant_axiom_for_de_wiesler_Tree" (formula "60"))
                                 (rule "andLeft" (formula "60"))
                                 (rule "notLeft" (formula "60"))
                                 (rule "notLeft" (formula "60"))
                                 (rule "applyEq" (formula "69") (term "0") (ifseqformula "57"))
                                 (rule "Contract_axiom_for_isSortedSliceTransitive_in_Functions" (formula "58") (term "0"))
                                 (rule "replace_known_right" (formula "58") (term "0,0,0") (ifseqformula "71"))
                                  (builtin "One Step Simplification" (formula "58") (ifInst ""  (formula "18")) (ifInst ""  (formula "59")))
                                 (rule "Definition_axiom_for_isSortedSliceTransitive_in_de_wiesler_Functions" (formula "59") (term "0") (inst "i=i") (inst "j=j_1"))
                                  (builtin "One Step Simplification" (formula "59"))
                                 (rule "expand_inInt" (formula "59") (term "1,0,0"))
                                 (rule "expand_inInt" (formula "59") (term "1,0,0,1,0"))
                                 (rule "replace_int_MIN" (formula "59") (term "0,1,1,0,0"))
                                 (rule "replace_int_MAX" (formula "59") (term "1,0,1,0,0"))
                                 (rule "replace_int_MIN" (formula "59") (term "0,1,1,0,0,1,0"))
                                 (rule "replace_int_MAX" (formula "59") (term "1,0,1,0,0,1,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "59") (term "1,0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "59") (term "1,0,0,1,0,0,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "59") (term "1,0,0,0,1,0"))
                                 (rule "polySimp_mulComm0" (formula "59") (term "1,0,0,1,0,0,0,1,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "59") (term "0,0,0,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "59") (term "1,0,1,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "59") (term "0,0,0,0,1,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "59") (term "1,1,0,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "59") (term "1,1,0,0,1,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "59") (term "1,0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "59") (term "1,1,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "59") (term "1,1,0,0,0"))
                                 (rule "mul_literals" (formula "59") (term "0,1,1,0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "59") (term "1,1,1,0,0,0"))
                                 (rule "polySimp_elimOne" (formula "59") (term "1,1,1,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "59") (term "1,0,0,0,1,0"))
                                 (rule "polySimp_mulComm0" (formula "59") (term "1,1,0,0,0,1,0"))
                                 (rule "polySimp_rightDist" (formula "59") (term "1,1,0,0,0,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "59") (term "1,1,1,0,0,0,1,0"))
                                 (rule "mul_literals" (formula "59") (term "0,1,1,0,0,0,1,0"))
                                 (rule "polySimp_elimOne" (formula "59") (term "1,1,1,0,0,0,1,0"))
                                 (rule "nnf_imp2or" (formula "45") (term "0"))
                                 (rule "arrayLengthIsAShort" (formula "28") (term "0"))
                                 (rule "expand_inShort" (formula "28"))
                                 (rule "replace_short_MIN" (formula "28") (term "0,1"))
                                 (rule "replace_short_MAX" (formula "28") (term "1,0"))
                                 (rule "andLeft" (formula "28"))
                                 (rule "inEqSimp_commuteLeq" (formula "29"))
                                 (rule "applyEq" (formula "28") (term "0") (ifseqformula "30"))
                                 (rule "leq_literals" (formula "28"))
                                 (rule "true_left" (formula "28"))
                                 (rule "applyEq" (formula "28") (term "0") (ifseqformula "29"))
                                 (rule "qeq_literals" (formula "28"))
                                 (rule "true_left" (formula "28"))
                                 (rule "arrayLengthNotNegative" (formula "28") (term "0"))
                                 (rule "applyEq" (formula "28") (term "0") (ifseqformula "29"))
                                 (rule "qeq_literals" (formula "28"))
                                 (rule "true_left" (formula "28"))
                                 (rule "arrayLengthIsAShort" (formula "27") (term "0"))
                                 (rule "expand_inShort" (formula "27"))
                                 (rule "replace_short_MIN" (formula "27") (term "0,1"))
                                 (rule "replace_short_MAX" (formula "27") (term "1,0"))
                                 (rule "andLeft" (formula "27"))
                                 (rule "inEqSimp_commuteLeq" (formula "28"))
                                 (rule "applyEq" (formula "27") (term "0") (ifseqformula "29"))
                                 (rule "leq_literals" (formula "27"))
                                 (rule "closeFalse" (formula "27"))
                              )
                              (branch "j_0 >= 1 FALSE"
                                 (rule "applyEqReverse" (formula "11") (term "1,0,1") (ifseqformula "10"))
                                 (rule "hideAuxiliaryEq" (formula "10"))
                                 (rule "replace_known_right" (formula "10") (term "0") (ifseqformula "65"))
                                  (builtin "One Step Simplification" (formula "10"))
                                 (rule "true_left" (formula "10"))
                                 (rule "inEqSimp_geqRight" (formula "64"))
                                 (rule "mul_literals" (formula "1") (term "1,0,0"))
                                 (rule "add_literals" (formula "1") (term "0,0"))
                                 (rule "add_zero_left" (formula "1") (term "0"))
                                 (rule "inEqSimp_subsumption0" (formula "8") (ifseqformula "1"))
                                 (rule "leq_literals" (formula "8") (term "0"))
                                  (builtin "One Step Simplification" (formula "8"))
                                 (rule "true_left" (formula "8"))
                                 (rule "inEqSimp_antiSymm" (formula "9") (ifseqformula "1"))
                                 (rule "applyEqRigid" (formula "1") (term "0") (ifseqformula "9"))
                                 (rule "leq_literals" (formula "1"))
                                 (rule "true_left" (formula "1"))
                                 (rule "applyEqRigid" (formula "9") (term "0") (ifseqformula "8"))
                                 (rule "qeq_literals" (formula "9"))
                                 (rule "true_left" (formula "9"))
                                 (rule "applyEqRigid" (formula "7") (term "1,1") (ifseqformula "8"))
                                 (rule "add_zero_right" (formula "7") (term "1"))
                                 (rule "applyEqRigid" (formula "9") (term "1,0") (ifseqformula "8"))
                                 (rule "bsum_lower_equals_upper" (formula "9") (term "0"))
                                 (rule "eqSymm" (formula "9"))
                                 (rule "applyEq" (formula "1") (term "5,0") (ifseqformula "8"))
                                 (rule "applyEqRigid" (formula "11") (term "1,1,1,0,0") (ifseqformula "8"))
                                 (rule "add_literals" (formula "11") (term "1,1,0,0"))
                                 (rule "applyEqRigid" (formula "12") (term "1,1,0,0,0") (ifseqformula "8"))
                                 (rule "applyEq" (formula "6") (term "1,1") (ifseqformula "8"))
                                 (rule "add_zero_right" (formula "6") (term "1"))
                                 (rule "applyEq" (formula "10") (term "1,1,1,0,0,0,0") (ifseqformula "8"))
                                 (rule "add_literals" (formula "10") (term "1,1,0,0,0,0"))
                                 (rule "applyEqRigid" (formula "60") (term "0,2,0") (ifseqformula "8"))
                                 (rule "applyEqRigid" (formula "12") (term "1,0,1,0") (ifseqformula "9"))
                                 (rule "applyEqRigid" (formula "12") (term "1,1,0,0,1,0") (ifseqformula "8"))
                                 (rule "add_zero_right" (formula "12") (term "1,0,0,1,0"))
                                 (rule "applyEqRigid" (formula "57") (term "0,2,1") (ifseqformula "8"))
                                 (rule "applyEq" (formula "57") (term "1,0,2,0") (ifseqformula "8"))
                                 (rule "inEqSimp_subsumption1" (formula "6") (ifseqformula "48"))
                                 (rule "leq_literals" (formula "6") (term "0"))
                                  (builtin "One Step Simplification" (formula "6"))
                                 (rule "true_left" (formula "6"))
                                 (rule "inEqSimp_subsumption1" (formula "6") (ifseqformula "48"))
                                 (rule "leq_literals" (formula "6") (term "0"))
                                  (builtin "One Step Simplification" (formula "6"))
                                 (rule "true_left" (formula "6"))
                                 (rule "inEqSimp_or_tautInEq0" (formula "10") (term "0,0,0"))
                                 (rule "add_zero_right" (formula "10") (term "1,1,0,0,0"))
                                 (rule "qeq_literals" (formula "10") (term "1,0,0,0"))
                                  (builtin "One Step Simplification" (formula "10"))
                                 (rule "true_left" (formula "10"))
                                 (rule "Definition_axiom_for_isClassifiedWith_in_de_wiesler_Buffers" (formula "37") (term "0") (inst "b=b"))
                                  (builtin "One Step Simplification" (formula "37"))
                                 (rule "expand_inInt" (formula "37") (term "1,0,0"))
                                 (rule "replace_int_MIN" (formula "37") (term "0,1,1,0,0"))
                                 (rule "replace_int_MAX" (formula "37") (term "1,0,1,0,0"))
                                 (rule "translateJavaMulInt" (formula "37") (term "0,4,0,1,0"))
                                 (rule "translateJavaMulInt" (formula "37") (term "3,0,1,0"))
                                 (rule "translateJavaAddInt" (formula "37") (term "4,0,1,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "37") (term "1,0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "37") (term "1,0,0,1,0,0,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "37") (term "0,0,0,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "37") (term "1,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "37") (term "1,0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "37") (term "1,1,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "37") (term "1,1,0,0,0"))
                                 (rule "mul_literals" (formula "37") (term "0,1,1,0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "37") (term "1,1,1,0,0,0"))
                                 (rule "polySimp_elimOne" (formula "37") (term "1,1,1,0,0,0"))
                                 (rule "nnf_notAnd" (formula "23") (term "0,0"))
                                 (rule "nnf_notAnd" (formula "58") (term "0,0"))
                                 (rule "nnf_notAnd" (formula "38") (term "0,0"))
                                 (rule "Definition_axiom_for_allElementsCounted_in_de_wiesler_Classifier" (formula "35") (term "0") (inst "b=b") (inst "b_0=b_0"))
                                  (builtin "One Step Simplification" (formula "35"))
                                 (rule "expand_inInt" (formula "35") (term "1,0,0,0"))
                                 (rule "replace_int_MIN" (formula "35") (term "0,1,1,0,0,0"))
                                 (rule "replace_int_MAX" (formula "35") (term "1,0,1,0,0,0"))
                                 (rule "andLeft" (formula "35"))
                                 (rule "translateJavaSubInt" (formula "36") (term "1"))
                                 (rule "translateJavaCastInt" (formula "36") (term "0"))
                                 (rule "polySimp_elimSub" (formula "36") (term "1"))
                                 (rule "polySimp_pullOutFactor1b" (formula "36") (term "1"))
                                 (rule "add_literals" (formula "36") (term "1,1,1"))
                                 (rule "times_zero_1" (formula "36") (term "1,1"))
                                 (rule "add_zero_right" (formula "36") (term "1"))
                                 (rule "inEqSimp_ltToLeq" (formula "35") (term "1,0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "35") (term "1,0,0,1,0,0,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "35") (term "0,0,0,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "35") (term "1,1,0,0"))
                                 (rule "applyEq" (formula "36") (term "1,0") (ifseqformula "34"))
                                 (rule "applyEq" (formula "35") (term "0,1,0,0,1,0,0,0") (ifseqformula "34"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "35") (term "1,0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "35") (term "1,1,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "35") (term "1,1,0,0,0"))
                                 (rule "mul_literals" (formula "35") (term "0,1,1,0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "35") (term "1,1,1,0,0,0"))
                                 (rule "polySimp_elimOne" (formula "35") (term "1,1,1,0,0,0"))
                                 (rule "nnf_notAnd" (formula "8") (term "0,0"))
                                 (rule "Contract_axiom_for_isClassifiedBlocksRange_in_Classifier" (formula "37") (term "0"))
                                 (rule "translateJavaSubInt" (formula "37") (term "0,0,0,0,0,0,0"))
                                 (rule "replace_known_left" (formula "37") (term "1,0,0,0") (ifseqformula "11"))
                                  (builtin "One Step Simplification" (formula "37") (ifInst ""  (formula "84")) (ifInst ""  (formula "12")) (ifInst ""  (formula "81")))
                                 (rule "polySimp_elimSub" (formula "37") (term "0,0,0,0"))
                                 (rule "polySimp_pullOutFactor1b" (formula "37") (term "0,0,0,0"))
                                 (rule "add_literals" (formula "37") (term "1,1,0,0,0,0"))
                                 (rule "times_zero_1" (formula "37") (term "1,0,0,0,0"))
                                 (rule "add_zero_right" (formula "37") (term "0,0,0,0"))
                                 (rule "Definition_axiom_for_isClassifiedBlocksRange_in_de_wiesler_Classifier" (formula "38") (term "0") (inst "block=block"))
                                  (builtin "One Step Simplification" (formula "38"))
                                 (rule "expand_inInt" (formula "38") (term "1,0,0"))
                                 (rule "replace_int_MIN" (formula "38") (term "0,1,1,0,0"))
                                 (rule "replace_int_MAX" (formula "38") (term "1,0,1,0,0"))
                                 (rule "translateJavaAddInt" (formula "38") (term "3,0,1,0"))
                                 (rule "translateJavaAddInt" (formula "38") (term "0,1,4,0,1,0"))
                                 (rule "translateJavaSubInt" (formula "38") (term "0,1,1,0,0,0"))
                                 (rule "translateJavaMulInt" (formula "38") (term "1,3,0,1,0"))
                                 (rule "translateJavaMulInt" (formula "38") (term "1,4,0,1,0"))
                                 (rule "translateJavaDivInt" (formula "38") (term "1,1,0,0,0"))
                                 (rule "translateJavaAddInt" (formula "38") (term "4,0,1,0"))
                                 (rule "polySimp_elimSub" (formula "38") (term "0,1,1,0,0,0"))
                                 (rule "polySimp_pullOutFactor1b" (formula "38") (term "0,1,1,0,0,0"))
                                 (rule "add_literals" (formula "38") (term "1,1,0,1,1,0,0,0"))
                                 (rule "times_zero_1" (formula "38") (term "1,0,1,1,0,0,0"))
                                 (rule "add_zero_right" (formula "38") (term "0,1,1,0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "38") (term "1,4,0,1,0"))
                                 (rule "polySimp_addComm0" (formula "38") (term "1,1,4,0,1,0"))
                                 (rule "polySimp_rightDist" (formula "38") (term "1,4,0,1,0"))
                                 (rule "mul_literals" (formula "38") (term "0,1,4,0,1,0"))
                                 (rule "polySimp_addAssoc" (formula "38") (term "4,0,1,0"))
                                 (rule "polySimp_addComm0" (formula "38") (term "0,4,0,1,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "38") (term "1,0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "38") (term "1,0,0,1,0,0,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "38") (term "0,0,0,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "38") (term "1,1,0,0"))
                                 (rule "applyEq" (formula "38") (term "0,1,0,0,1,0,0,0") (ifseqformula "45"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "38") (term "1,0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "38") (term "1,1,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "38") (term "1,1,0,0,0"))
                                 (rule "mul_literals" (formula "38") (term "0,1,1,0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "38") (term "1,1,1,0,0,0"))
                                 (rule "polySimp_elimOne" (formula "38") (term "1,1,1,0,0,0"))
                                 (rule "nnf_imp2or" (formula "39") (term "0"))
                                 (rule "Contract_axiom_for_countClassOfSliceEq_in_Classifier" (formula "9") (term "1,1,0"))
                                 (rule "replace_known_right" (formula "9") (term "0,1,0") (ifseqformula "82"))
                                  (builtin "One Step Simplification" (formula "9") (ifInst ""  (formula "85")) (ifInst ""  (formula "12")) (ifInst ""  (formula "13")))
                                 (rule "Definition_axiom_for_countClassOfSliceEq_in_de_wiesler_Classifier" (formula "10") (term "1,1,0") (inst "i=i"))
                                 (rule "eqSymm" (formula "10") (term "1,0"))
                                 (rule "nnf_notAnd" (formula "24") (term "1,0,0"))
                                 (rule "inEqSimp_notLeq" (formula "24") (term "0,1,0,0"))
                                 (rule "mul_literals" (formula "24") (term "1,0,0,0,1,0,0"))
                                 (rule "add_literals" (formula "24") (term "0,0,0,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "24") (term "0,1,0,0"))
                                 (rule "mul_literals" (formula "24") (term "1,0,1,0,0"))
                                 (rule "inEqSimp_notGeq" (formula "24") (term "1,1,0,0"))
                                 (rule "mul_literals" (formula "24") (term "1,0,0,1,1,0,0"))
                                 (rule "add_literals" (formula "24") (term "0,0,1,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "1,1,0,0"))
                                 (rule "mul_literals" (formula "24") (term "1,1,1,0,0"))
                                 (rule "nnf_notAnd" (formula "24") (term "0,0,0"))
                                 (rule "inEqSimp_notLeq" (formula "24") (term "1,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "24") (term "1,0,0,1,0,0,0"))
                                 (rule "mul_literals" (formula "24") (term "0,1,0,0,1,0,0,0"))
                                 (rule "polySimp_addAssoc" (formula "24") (term "0,0,1,0,0,0"))
                                 (rule "add_literals" (formula "24") (term "0,0,0,1,0,0,0"))
                                 (rule "add_zero_left" (formula "24") (term "0,0,1,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "24") (term "1,0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "24") (term "1,1,0,0,0"))
                                 (rule "polySimp_elimOne" (formula "24") (term "1,1,0,0,0"))
                                 (rule "inEqSimp_notGeq" (formula "24") (term "0,0,0,0"))
                                 (rule "mul_literals" (formula "24") (term "1,0,0,0,0,0,0"))
                                 (rule "add_literals" (formula "24") (term "0,0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "0,0,0,0"))
                                 (rule "mul_literals" (formula "24") (term "1,0,0,0,0"))
                                 (rule "nnf_notAnd" (formula "61") (term "0,0,0"))
                                 (rule "inEqSimp_notLeq" (formula "61") (term "1,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "61") (term "1,0,0,1,0,0,0"))
                                 (rule "mul_literals" (formula "61") (term "0,1,0,0,1,0,0,0"))
                                 (rule "polySimp_addAssoc" (formula "61") (term "0,0,1,0,0,0"))
                                 (rule "add_literals" (formula "61") (term "0,0,0,1,0,0,0"))
                                 (rule "add_zero_left" (formula "61") (term "0,0,1,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "61") (term "1,0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "61") (term "1,1,0,0,0"))
                                 (rule "polySimp_elimOne" (formula "61") (term "1,1,0,0,0"))
                                 (rule "inEqSimp_notGeq" (formula "61") (term "0,0,0,0"))
                                 (rule "mul_literals" (formula "61") (term "1,0,0,0,0,0,0"))
                                 (rule "add_zero_right" (formula "61") (term "0,0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "61") (term "0,0,0,0"))
                                 (rule "mul_literals" (formula "61") (term "1,0,0,0,0"))
                                 (rule "nnf_notAnd" (formula "61") (term "1,0,0"))
                                 (rule "inEqSimp_notLeq" (formula "61") (term "0,1,0,0"))
                                 (rule "mul_literals" (formula "61") (term "1,0,0,0,1,0,0"))
                                 (rule "add_literals" (formula "61") (term "0,0,0,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "61") (term "0,1,0,0"))
                                 (rule "mul_literals" (formula "61") (term "1,0,1,0,0"))
                                 (rule "inEqSimp_notGeq" (formula "61") (term "1,1,0,0"))
                                 (rule "mul_literals" (formula "61") (term "1,0,0,1,1,0,0"))
                                 (rule "add_literals" (formula "61") (term "0,0,1,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "61") (term "1,1,0,0"))
                                 (rule "mul_literals" (formula "61") (term "1,1,1,0,0"))
                                 (rule "nnf_notAnd" (formula "41") (term "1,0,0"))
                                 (rule "inEqSimp_notLeq" (formula "41") (term "0,1,0,0"))
                                 (rule "mul_literals" (formula "41") (term "1,0,0,0,1,0,0"))
                                 (rule "add_literals" (formula "41") (term "0,0,0,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "41") (term "0,1,0,0"))
                                 (rule "mul_literals" (formula "41") (term "1,0,1,0,0"))
                                 (rule "inEqSimp_notGeq" (formula "41") (term "1,1,0,0"))
                                 (rule "mul_literals" (formula "41") (term "1,0,0,1,1,0,0"))
                                 (rule "add_literals" (formula "41") (term "0,0,1,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "41") (term "1,1,0,0"))
                                 (rule "mul_literals" (formula "41") (term "1,1,1,0,0"))
                                 (rule "nnf_notAnd" (formula "41") (term "0,0,0"))
                                 (rule "inEqSimp_notGeq" (formula "41") (term "0,0,0,0"))
                                 (rule "mul_literals" (formula "41") (term "1,0,0,0,0,0,0"))
                                 (rule "add_zero_right" (formula "41") (term "0,0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "41") (term "0,0,0,0"))
                                 (rule "mul_literals" (formula "41") (term "1,0,0,0,0"))
                                 (rule "inEqSimp_notLeq" (formula "41") (term "1,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "41") (term "1,0,0,1,0,0,0"))
                                 (rule "mul_literals" (formula "41") (term "0,1,0,0,1,0,0,0"))
                                 (rule "polySimp_addAssoc" (formula "41") (term "0,0,1,0,0,0"))
                                 (rule "add_literals" (formula "41") (term "0,0,0,1,0,0,0"))
                                 (rule "add_zero_left" (formula "41") (term "0,0,1,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "41") (term "1,0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "41") (term "1,1,0,0,0"))
                                 (rule "polySimp_elimOne" (formula "41") (term "1,1,0,0,0"))
                                 (rule "nnf_imp2or" (formula "36") (term "0"))
                                 (rule "nnf_notAnd" (formula "8") (term "0,0,0"))
                                 (rule "inEqSimp_notGeq" (formula "8") (term "0,0,0,0"))
                                 (rule "mul_literals" (formula "8") (term "1,0,0,0,0,0,0"))
                                 (rule "add_zero_right" (formula "8") (term "0,0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "0,0,0,0"))
                                 (rule "mul_literals" (formula "8") (term "1,0,0,0,0"))
                                 (rule "inEqSimp_notLeq" (formula "8") (term "1,0,0,0"))
                                 (rule "mul_literals" (formula "8") (term "1,0,0,1,0,0,0"))
                                 (rule "add_literals" (formula "8") (term "0,0,1,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "8") (term "1,0,0,0"))
                                 (rule "mul_literals" (formula "8") (term "1,1,0,0,0"))
                                 (rule "inEqSimp_or_tautInEq0" (formula "8") (term "0,0,0"))
                                 (rule "add_literals" (formula "8") (term "1,1,0,0,0"))
                                 (rule "qeq_literals" (formula "8") (term "1,0,0,0"))
                                  (builtin "One Step Simplification" (formula "8"))
                                 (rule "true_left" (formula "8"))
                                 (rule "nnf_imp2or" (formula "38") (term "0"))
                                 (rule "nnf_notAnd" (formula "39") (term "0,0"))
                                 (rule "Class_invariant_axiom_for_de_wiesler_Tree" (formula "53"))
                                 (rule "andLeft" (formula "53"))
                                 (rule "notLeft" (formula "53"))
                                 (rule "notLeft" (formula "53"))
                                 (rule "applyEq" (formula "62") (term "0") (ifseqformula "50"))
                                 (rule "Definition_axiom_for_isSortedSliceTransitive_in_de_wiesler_Functions" (formula "51") (term "0") (inst "i=i") (inst "j=j_1"))
                                  (builtin "One Step Simplification" (formula "51"))
                                 (rule "expand_inInt" (formula "51") (term "1,0,0"))
                                 (rule "expand_inInt" (formula "51") (term "1,0,0,1,0"))
                                 (rule "replace_int_MAX" (formula "51") (term "1,0,1,0,0"))
                                 (rule "replace_int_MIN" (formula "51") (term "0,1,1,0,0"))
                                 (rule "replace_int_MAX" (formula "51") (term "1,0,1,0,0,1,0"))
                                 (rule "replace_int_MIN" (formula "51") (term "0,1,1,0,0,1,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "51") (term "1,0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "51") (term "1,0,0,1,0,0,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "51") (term "1,0,0,0,1,0"))
                                 (rule "polySimp_mulComm0" (formula "51") (term "1,0,0,1,0,0,0,1,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "51") (term "1,0,1,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "51") (term "0,0,0,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "51") (term "0,0,0,0,1,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "51") (term "1,1,0,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "51") (term "1,1,0,0,1,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "51") (term "1,0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "51") (term "1,1,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "51") (term "1,1,0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "51") (term "1,1,1,0,0,0"))
                                 (rule "mul_literals" (formula "51") (term "0,1,1,0,0,0"))
                                 (rule "polySimp_elimOne" (formula "51") (term "1,1,1,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "51") (term "1,0,0,0,1,0"))
                                 (rule "polySimp_mulComm0" (formula "51") (term "1,1,0,0,0,1,0"))
                                 (rule "polySimp_rightDist" (formula "51") (term "1,1,0,0,0,1,0"))
                                 (rule "mul_literals" (formula "51") (term "0,1,1,0,0,0,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "51") (term "1,1,1,0,0,0,1,0"))
                                 (rule "polySimp_elimOne" (formula "51") (term "1,1,1,0,0,0,1,0"))
                                 (rule "arrayLengthNotNegative" (formula "21") (term "0"))
                                 (rule "applyEq" (formula "21") (term "0") (ifseqformula "22"))
                                 (rule "qeq_literals" (formula "21"))
                                 (rule "true_left" (formula "21"))
                                 (rule "arrayLengthIsAShort" (formula "21") (term "0"))
                                 (rule "expand_inShort" (formula "21"))
                                 (rule "replace_short_MAX" (formula "21") (term "1,0"))
                                 (rule "replace_short_MIN" (formula "21") (term "0,1"))
                                 (rule "andLeft" (formula "21"))
                                 (rule "inEqSimp_commuteLeq" (formula "22"))
                                 (rule "applyEq" (formula "21") (term "0") (ifseqformula "23"))
                                 (rule "leq_literals" (formula "21"))
                                 (rule "true_left" (formula "21"))
                                 (rule "applyEq" (formula "21") (term "0") (ifseqformula "22"))
                                 (rule "qeq_literals" (formula "21"))
                                 (rule "true_left" (formula "21"))
                                 (rule "arrayLengthIsAShort" (formula "20") (term "0"))
                                 (rule "expand_inShort" (formula "20"))
                                 (rule "replace_short_MAX" (formula "20") (term "1,0"))
                                 (rule "replace_short_MIN" (formula "20") (term "0,1"))
                                 (rule "andLeft" (formula "20"))
                                 (rule "inEqSimp_commuteLeq" (formula "21"))
                                 (rule "applyEq" (formula "21") (term "0") (ifseqformula "22"))
                                 (rule "qeq_literals" (formula "21"))
                                 (rule "true_left" (formula "21"))
                                 (rule "applyEq" (formula "20") (term "0") (ifseqformula "21"))
                                 (rule "leq_literals" (formula "20"))
                                 (rule "closeFalse" (formula "20"))
                              )
                           )
                           (branch "Case 2"
                              (rule "replace_int_MIN" (formula "76") (term "0"))
                              (rule "polySimp_homoEq" (formula "14") (term "1,0"))
                              (rule "polySimp_homoEq" (formula "14") (term "0,1,0,1,0,1,0"))
                              (rule "polySimp_mulComm0" (formula "14") (term "1,0,1,0"))
                              (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,1,1,1,0,1,0"))
                              (rule "polySimp_addComm0" (formula "76") (term "1"))
                              (rule "polySimp_rightDist" (formula "14") (term "1,0,1,0"))
                              (rule "polySimp_mulAssoc" (formula "14") (term "0,1,0,1,0"))
                              (rule "polySimp_mulComm0" (formula "14") (term "0,0,1,0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "14") (term "0,1,0,1,0"))
                              (rule "polySimp_elimOne" (formula "14") (term "0,1,0,1,0"))
                              (rule "polySimp_rightDist" (formula "14") (term "1,0,0,0,1,1,0,1,0"))
                              (rule "mul_literals" (formula "14") (term "0,1,0,0,0,1,1,0,1,0"))
                              (rule "polySimp_addAssoc" (formula "14") (term "0,0,0,1,1,0,1,0"))
                              (rule "polySimp_addComm0" (formula "14") (term "0,0,0,0,1,1,0,1,0"))
                              (rule "polySimp_addAssoc" (formula "14") (term "0,1,0"))
                              (rule "inEqSimp_leqRight" (formula "76"))
                              (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "1") (term "0,1,0,0"))
                              (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                              (rule "polySimp_addComm1" (formula "1") (term "0"))
                              (rule "polySimp_addComm1" (formula "1") (term "0,0"))
                              (rule "add_literals" (formula "1") (term "0,0,0"))
                              (rule "inEqSimp_ltToLeq" (formula "6"))
                              (rule "polySimp_mulComm0" (formula "6") (term "1,0,0"))
                              (rule "polySimp_addComm1" (formula "6") (term "0"))
                              (rule "inEqSimp_ltToLeq" (formula "14") (term "0,0,0,0,0"))
                              (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,0,0,0,0,0"))
                              (rule "inEqSimp_ltToLeq" (formula "15") (term "0,0,0,0,0"))
                              (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,0,0,0,0,0"))
                              (rule "inEqSimp_ltToLeq" (formula "11") (term "0"))
                              (rule "add_zero_right" (formula "11") (term "0,0"))
                              (rule "polySimp_mulComm0" (formula "11") (term "1,0,0"))
                              (rule "inEqSimp_homoInEq1" (formula "35"))
                              (rule "polySimp_addComm1" (formula "35") (term "0"))
                              (rule "inEqSimp_homoInEq0" (formula "9") (term "0,0,0"))
                              (rule "times_zero_2" (formula "9") (term "1,0,0,0,0"))
                              (rule "add_zero_right" (formula "9") (term "0,0,0,0"))
                              (rule "polySimp_sepNegMonomial" (formula "15") (term "0,0,1,0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "15") (term "0,0,0,1,0,1,0"))
                              (rule "polySimp_elimOne" (formula "15") (term "0,0,0,1,0,1,0"))
                              (rule "polySimp_sepNegMonomial" (formula "15") (term "1,0"))
                              (rule "polySimp_mulLiterals" (formula "15") (term "0,1,0"))
                              (rule "polySimp_elimOne" (formula "15") (term "0,1,0"))
                              (rule "inEqSimp_sepNegMonomial1" (formula "1"))
                              (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                              (rule "polySimp_elimOne" (formula "1") (term "0"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "6"))
                              (rule "polySimp_mulLiterals" (formula "6") (term "0"))
                              (rule "polySimp_elimOne" (formula "6") (term "0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "0,0,0,0,0"))
                              (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,0,0,0"))
                              (rule "polySimp_rightDist" (formula "14") (term "1,0,0,0,0,0"))
                              (rule "polySimp_mulLiterals" (formula "14") (term "1,1,0,0,0,0,0"))
                              (rule "mul_literals" (formula "14") (term "0,1,0,0,0,0,0"))
                              (rule "polySimp_elimOne" (formula "14") (term "1,1,0,0,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "0,0,0,0,0"))
                              (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,0,0,0"))
                              (rule "polySimp_rightDist" (formula "15") (term "1,0,0,0,0,0"))
                              (rule "polySimp_mulLiterals" (formula "15") (term "1,1,0,0,0,0,0"))
                              (rule "mul_literals" (formula "15") (term "0,1,0,0,0,0,0"))
                              (rule "polySimp_elimOne" (formula "15") (term "1,1,0,0,0,0,0"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "11") (term "0"))
                              (rule "polySimp_mulLiterals" (formula "11") (term "0,0"))
                              (rule "polySimp_elimOne" (formula "11") (term "0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "35"))
                              (rule "polySimp_mulComm0" (formula "35") (term "1"))
                              (rule "polySimp_rightDist" (formula "35") (term "1"))
                              (rule "polySimp_mulLiterals" (formula "35") (term "1,1"))
                              (rule "mul_literals" (formula "35") (term "0,1"))
                              (rule "polySimp_elimOne" (formula "35") (term "1,1"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "9") (term "0,0,0"))
                              (rule "mul_literals" (formula "9") (term "1,0,0,0"))
                              (rule "inEqSimp_subsumption1" (formula "9") (term "1,0,0") (ifseqformula "6"))
                              (rule "inEqSimp_homoInEq0" (formula "9") (term "0,1,0,0"))
                              (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,1,0,0"))
                              (rule "polySimp_rightDist" (formula "9") (term "1,0,0,1,0,0"))
                              (rule "mul_literals" (formula "9") (term "0,1,0,0,1,0,0"))
                              (rule "polySimp_addAssoc" (formula "9") (term "0,0,1,0,0"))
                              (rule "polySimp_addComm1" (formula "9") (term "0,0,0,1,0,0"))
                              (rule "add_literals" (formula "9") (term "0,0,0,0,1,0,0"))
                              (rule "polySimp_pullOutFactor1b" (formula "9") (term "0,0,1,0,0"))
                              (rule "add_literals" (formula "9") (term "1,1,0,0,1,0,0"))
                              (rule "times_zero_1" (formula "9") (term "1,0,0,1,0,0"))
                              (rule "add_zero_right" (formula "9") (term "0,0,1,0,0"))
                              (rule "qeq_literals" (formula "9") (term "0,1,0,0"))
                               (builtin "One Step Simplification" (formula "9"))
                              (rule "inEqSimp_subsumption1" (formula "33") (ifseqformula "34"))
                              (rule "leq_literals" (formula "33") (term "0"))
                               (builtin "One Step Simplification" (formula "33"))
                              (rule "true_left" (formula "33"))
                              (rule "inEqSimp_subsumption1" (formula "22") (ifseqformula "35"))
                              (rule "leq_literals" (formula "22") (term "0"))
                               (builtin "One Step Simplification" (formula "22"))
                              (rule "true_left" (formula "22"))
                              (rule "inEqSimp_subsumption1" (formula "8") (ifseqformula "6"))
                              (rule "inEqSimp_homoInEq0" (formula "8") (term "0"))
                              (rule "polySimp_pullOutFactor1b" (formula "8") (term "0,0"))
                              (rule "add_literals" (formula "8") (term "1,1,0,0"))
                              (rule "times_zero_1" (formula "8") (term "1,0,0"))
                              (rule "add_zero_right" (formula "8") (term "0,0"))
                              (rule "qeq_literals" (formula "8") (term "0"))
                               (builtin "One Step Simplification" (formula "8"))
                              (rule "true_left" (formula "8"))
                              (rule "inEqSimp_subsumption1" (formula "36") (ifseqformula "37"))
                              (rule "leq_literals" (formula "36") (term "0"))
                               (builtin "One Step Simplification" (formula "36"))
                              (rule "true_left" (formula "36"))
                              (rule "inEqSimp_exactShadow3" (formula "34") (ifseqformula "23"))
                              (rule "polySimp_mulComm0" (formula "34") (term "0,0"))
                              (rule "polySimp_addComm0" (formula "34") (term "0"))
                              (rule "inEqSimp_sepNegMonomial1" (formula "34"))
                              (rule "polySimp_mulLiterals" (formula "34") (term "0"))
                              (rule "polySimp_elimOne" (formula "34") (term "0"))
                              (rule "inEqSimp_exactShadow3" (formula "22") (ifseqformula "41"))
                              (rule "mul_literals" (formula "22") (term "0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "22"))
                              (rule "mul_literals" (formula "22") (term "1"))
                              (rule "inEqSimp_exactShadow3" (formula "40") (ifseqformula "41"))
                              (rule "polySimp_mulComm0" (formula "40") (term "0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "40"))
                              (rule "polySimp_mulLiterals" (formula "40") (term "1"))
                              (rule "polySimp_elimOne" (formula "40") (term "1"))
                              (rule "inEqSimp_exactShadow3" (formula "6") (ifseqformula "32"))
                              (rule "polySimp_rightDist" (formula "6") (term "0,0"))
                              (rule "mul_literals" (formula "6") (term "0,0,0"))
                              (rule "polySimp_addAssoc" (formula "6") (term "0"))
                              (rule "polySimp_addComm1" (formula "6") (term "0,0"))
                              (rule "add_literals" (formula "6") (term "0,0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "6"))
                              (rule "polySimp_mulComm0" (formula "6") (term "1"))
                              (rule "polySimp_rightDist" (formula "6") (term "1"))
                              (rule "polySimp_mulLiterals" (formula "6") (term "1,1"))
                              (rule "mul_literals" (formula "6") (term "0,1"))
                              (rule "polySimp_elimOne" (formula "6") (term "1,1"))
                              (rule "inEqSimp_exactShadow3" (formula "38") (ifseqformula "36"))
                              (rule "polySimp_mulComm0" (formula "38") (term "0,0"))
                              (rule "polySimp_addComm0" (formula "38") (term "0"))
                              (rule "inEqSimp_sepNegMonomial1" (formula "38"))
                              (rule "polySimp_mulLiterals" (formula "38") (term "0"))
                              (rule "polySimp_elimOne" (formula "38") (term "0"))
                              (rule "inEqSimp_subsumption0" (formula "24") (ifseqformula "38"))
                              (rule "leq_literals" (formula "24") (term "0"))
                               (builtin "One Step Simplification" (formula "24"))
                              (rule "true_left" (formula "24"))
                              (rule "inEqSimp_exactShadow3" (formula "41") (ifseqformula "22"))
                              (rule "polySimp_mulComm0" (formula "41") (term "0,0"))
                              (rule "polySimp_addComm0" (formula "41") (term "0"))
                              (rule "inEqSimp_sepNegMonomial1" (formula "41"))
                              (rule "polySimp_mulLiterals" (formula "41") (term "0"))
                              (rule "polySimp_elimOne" (formula "41") (term "0"))
                              (rule "inEqSimp_exactShadow3" (formula "6") (ifseqformula "30"))
                              (rule "polySimp_rightDist" (formula "6") (term "0,0"))
                              (rule "mul_literals" (formula "6") (term "0,0,0"))
                              (rule "polySimp_addComm1" (formula "6") (term "0"))
                              (rule "add_literals" (formula "6") (term "0,0"))
                              (rule "inEqSimp_sepNegMonomial1" (formula "6"))
                              (rule "polySimp_mulLiterals" (formula "6") (term "0"))
                              (rule "polySimp_elimOne" (formula "6") (term "0"))
                              (rule "inEqSimp_exactShadow3" (formula "35") (ifseqformula "38"))
                              (rule "polySimp_mulComm0" (formula "35") (term "0,0"))
                              (rule "polySimp_addComm0" (formula "35") (term "0"))
                              (rule "inEqSimp_sepNegMonomial1" (formula "35"))
                              (rule "polySimp_mulLiterals" (formula "35") (term "0"))
                              (rule "polySimp_elimOne" (formula "35") (term "0"))
                              (rule "inEqSimp_subsumption0" (formula "22") (ifseqformula "35"))
                              (rule "leq_literals" (formula "22") (term "0"))
                               (builtin "One Step Simplification" (formula "22"))
                              (rule "true_left" (formula "22"))
                              (rule "inEqSimp_and_subsumption3" (formula "16") (term "0,0,0"))
                              (rule "leq_literals" (formula "16") (term "0,1,0,0,0,0"))
                               (builtin "One Step Simplification" (formula "16"))
                              (rule "nnf_imp2or" (formula "15") (term "0"))
                              (rule "nnf_imp2or" (formula "16") (term "0"))
                              (rule "nnf_notAnd" (formula "15") (term "0,0"))
                              (rule "inEqSimp_notGeq" (formula "15") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,1,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "15") (term "1,1,0,0"))
                              (rule "polySimp_rightDist" (formula "15") (term "1,1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "15") (term "1,1,1,0,0"))
                              (rule "mul_literals" (formula "15") (term "0,1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "15") (term "1,1,1,0,0"))
                              (rule "nnf_notAnd" (formula "16") (term "0,0"))
                              (rule "inEqSimp_notLeq" (formula "16") (term "1,0,0"))
                              (rule "mul_literals" (formula "16") (term "1,0,0,1,0,0"))
                              (rule "add_literals" (formula "16") (term "0,0,1,0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "16") (term "1,0,0"))
                              (rule "mul_literals" (formula "16") (term "1,1,0,0"))
                              (rule "nnf_notAnd" (formula "15") (term "0,0,0"))
                              (rule "inEqSimp_notLeq" (formula "15") (term "1,0,0,0"))
                              (rule "mul_literals" (formula "15") (term "1,0,0,1,0,0,0"))
                              (rule "add_literals" (formula "15") (term "0,0,1,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "15") (term "1,0,0,0"))
                              (rule "mul_literals" (formula "15") (term "1,1,0,0,0"))
                              (rule "nnf_notAnd" (formula "16") (term "0,0,0"))
                              (rule "inEqSimp_notLeq" (formula "16") (term "0,0,0,0"))
                              (rule "polySimp_rightDist" (formula "16") (term "1,0,0,0,0,0,0"))
                              (rule "mul_literals" (formula "16") (term "0,1,0,0,0,0,0,0"))
                              (rule "polySimp_addAssoc" (formula "16") (term "0,0,0,0,0,0"))
                              (rule "add_literals" (formula "16") (term "0,0,0,0,0,0,0"))
                              (rule "add_zero_left" (formula "16") (term "0,0,0,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "16") (term "0,0,0,0"))
                              (rule "polySimp_mulLiterals" (formula "16") (term "1,0,0,0,0"))
                              (rule "polySimp_elimOne" (formula "16") (term "1,0,0,0,0"))
                              (rule "inEqSimp_notGeq" (formula "16") (term "1,0,0,0"))
                              (rule "times_zero_1" (formula "16") (term "1,0,0,1,0,0,0"))
                              (rule "add_literals" (formula "16") (term "0,0,1,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "1,0,0,0"))
                              (rule "mul_literals" (formula "16") (term "1,1,0,0,0"))
                              (rule "nnf_notAnd" (formula "15") (term "0,0,0,0"))
                              (rule "inEqSimp_notGeq" (formula "15") (term "1,0,0,0,0"))
                              (rule "mul_literals" (formula "15") (term "1,0,0,1,0,0,0,0"))
                              (rule "add_literals" (formula "15") (term "0,0,1,0,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "1,0,0,0,0"))
                              (rule "mul_literals" (formula "15") (term "1,1,0,0,0,0"))
                              (rule "inEqSimp_notLeq" (formula "15") (term "0,0,0,0,0"))
                              (rule "polySimp_rightDist" (formula "15") (term "1,0,0,0,0,0,0,0"))
                              (rule "mul_literals" (formula "15") (term "0,1,0,0,0,0,0,0,0"))
                              (rule "polySimp_addAssoc" (formula "15") (term "0,0,0,0,0,0,0"))
                              (rule "add_literals" (formula "15") (term "0,0,0,0,0,0,0,0"))
                              (rule "add_zero_left" (formula "15") (term "0,0,0,0,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "15") (term "0,0,0,0,0"))
                              (rule "polySimp_mulLiterals" (formula "15") (term "1,0,0,0,0,0"))
                              (rule "polySimp_elimOne" (formula "15") (term "1,0,0,0,0,0"))
                              (rule "Contract_axiom_for_countClassOfSliceEq_in_Classifier" (formula "49") (term "1"))
                              (rule "replace_known_left" (formula "49") (term "1,0,0") (ifseqformula "19"))
                               (builtin "One Step Simplification" (formula "49") (ifInst ""  (formula "28")) (ifInst ""  (formula "75")) (ifInst ""  (formula "18")) (ifInst ""  (formula "72")) (ifInst ""  (formula "28")) (ifInst ""  (formula "45")))
                              (rule "true_left" (formula "49"))
                              (rule "Definition_axiom_for_isClassifiedUntil_in_de_wiesler_Classifier" (formula "41") (term "0") (inst "b=b"))
                               (builtin "One Step Simplification" (formula "41"))
                              (rule "expand_inInt" (formula "41") (term "1,0,0,1,0"))
                              (rule "replace_int_MAX" (formula "41") (term "1,0,1,0,0,1,0"))
                              (rule "replace_int_MIN" (formula "41") (term "0,1,1,0,0,1,0"))
                              (rule "andLeft" (formula "41"))
                              (rule "andLeft" (formula "41"))
                              (rule "andLeft" (formula "41"))
                              (rule "andLeft" (formula "41"))
                              (rule "translateJavaSubInt" (formula "45") (term "1"))
                              (rule "polySimp_elimSub" (formula "45") (term "1"))
                              (rule "inEqSimp_ltToLeq" (formula "44") (term "1,0,0,0"))
                              (rule "polySimp_mulComm0" (formula "44") (term "1,0,0,1,0,0,0"))
                              (rule "inEqSimp_commuteLeq" (formula "44") (term "0,0,0,0"))
                              (rule "inEqSimp_commuteLeq" (formula "44") (term "1,1,0,0"))
                              (rule "applyEq" (formula "44") (term "0,1,0,0,1,0,0,0") (ifseqformula "40"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "44") (term "1,0,0,0"))
                              (rule "polySimp_mulComm0" (formula "44") (term "1,1,0,0,0"))
                              (rule "polySimp_rightDist" (formula "44") (term "1,1,0,0,0"))
                              (rule "polySimp_mulLiterals" (formula "44") (term "1,1,1,0,0,0"))
                              (rule "mul_literals" (formula "44") (term "0,1,1,0,0,0"))
                              (rule "polySimp_elimOne" (formula "44") (term "1,1,1,0,0,0"))
                              (rule "Contract_axiom_for_bufferLen_in_Buffers" (formula "54") (term "0"))
                               (builtin "One Step Simplification" (formula "54") (ifInst ""  (formula "51")) (ifInst ""  (formula "78")) (ifInst ""  (formula "51")) (ifInst ""  (formula "59")) (ifInst ""  (formula "26")))
                              (rule "wellFormedAnon" (formula "54") (term "1,0"))
                              (rule "replace_known_left" (formula "54") (term "1,1,0") (ifseqformula "17"))
                               (builtin "One Step Simplification" (formula "54") (ifInst ""  (formula "18")))
                              (rule "inEqSimp_ltToLeq" (formula "54") (term "1,0"))
                              (rule "polySimp_mulComm0" (formula "54") (term "1,0,0,1,0"))
                              (rule "polySimp_addComm1" (formula "54") (term "0,1,0"))
                              (rule "inEqSimp_commuteLeq" (formula "54") (term "0,1"))
                              (rule "inEqSimp_commuteLeq" (formula "54") (term "0,0"))
                              (rule "replace_known_left" (formula "54") (term "0,0") (ifseqformula "9"))
                               (builtin "One Step Simplification" (formula "54"))
                              (rule "applyEq" (formula "54") (term "0,0,1") (ifseqformula "55"))
                              (rule "applyEq" (formula "54") (term "0,1,1") (ifseqformula "55"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "54") (term "0"))
                              (rule "polySimp_mulLiterals" (formula "54") (term "0,0"))
                              (rule "polySimp_elimOne" (formula "54") (term "0,0"))
                              (rule "replace_known_left" (formula "54") (term "0") (ifseqformula "8"))
                               (builtin "One Step Simplification" (formula "54"))
                              (rule "andLeft" (formula "54"))
                              (rule "inEqSimp_subsumption0" (formula "57") (ifseqformula "55"))
                              (rule "leq_literals" (formula "57") (term "0"))
                               (builtin "One Step Simplification" (formula "57"))
                              (rule "true_left" (formula "57"))
                              (rule "inEqSimp_subsumption1" (formula "57") (ifseqformula "54"))
                              (rule "leq_literals" (formula "57") (term "0"))
                               (builtin "One Step Simplification" (formula "57"))
                              (rule "true_left" (formula "57"))
                              (rule "Definition_axiom_for_bufferLen_in_de_wiesler_Buffers" (formula "56") (term "0"))
                              (rule "pullOutSelect" (formula "56") (term "0") (inst "selectSK=arr_3"))
                              (rule "simplifySelectOfAnon" (formula "56"))
                               (builtin "One Step Simplification" (formula "56"))
                              (rule "eqSymm" (formula "57"))
                              (rule "applyEqReverse" (formula "56") (term "1") (ifseqformula "57"))
                              (rule "hideAuxiliaryEq" (formula "57"))
                              (rule "elementOfArrayRangeConcrete" (formula "56") (term "0,0,0"))
                              (rule "replace_known_right" (formula "56") (term "0,0,0,0,0") (ifseqformula "66"))
                               (builtin "One Step Simplification" (formula "56"))
                              (rule "Definition_axiom_for_isBlockAligned_in_de_wiesler_Buffers" (formula "48") (term "0"))
                               (builtin "One Step Simplification" (formula "48"))
                              (rule "translateJavaMod" (formula "48") (term "0"))
                              (rule "jmod_axiom" (formula "48") (term "0"))
                              (rule "polySimp_mulLiterals" (formula "48") (term "1,0"))
                              (rule "polySimp_sepNegMonomial" (formula "48"))
                              (rule "polySimp_mulLiterals" (formula "48") (term "0"))
                              (rule "newSym_eq" (formula "48") (inst "l=l_0") (inst "newSymDef=add(mul(begin, Z(0(#))), mul(write, Z(0(#))))"))
                              (rule "times_zero_1" (formula "48") (term "0,1,1"))
                              (rule "times_zero_1" (formula "48") (term "1,1,1"))
                              (rule "add_zero_left" (formula "48") (term "1,1"))
                              (rule "add_zero_right" (formula "48") (term "1"))
                              (rule "applyEq" (formula "49") (term "0,0") (ifseqformula "48"))
                              (rule "polySimp_homoEq" (formula "49"))
                              (rule "polySimp_mulLiterals" (formula "49") (term "1,0"))
                              (rule "polySimp_addComm1" (formula "49") (term "0"))
                              (rule "polySimp_addComm0" (formula "49") (term "0,0"))
                              (rule "polySimp_sepPosMonomial" (formula "49"))
                              (rule "polySimp_mulComm0" (formula "49") (term "1"))
                              (rule "polySimp_rightDist" (formula "49") (term "1"))
                              (rule "polySimp_mulLiterals" (formula "49") (term "1,1"))
                              (rule "polySimp_elimOne" (formula "49") (term "1,1"))
                              (rule "polySimp_mulComm0" (formula "49") (term "0,1"))
                              (rule "polySimp_mulLiterals" (formula "49") (term "0,1"))
                              (rule "applyEq" (formula "41") (term "4,0") (ifseqformula "49"))
                              (rule "applyEq" (formula "42") (term "4,0") (ifseqformula "49"))
                              (rule "applyEq" (formula "48") (term "1,0,0") (ifseqformula "49"))
                              (rule "polySimp_addAssoc" (formula "48") (term "0,0"))
                              (rule "polySimp_addComm0" (formula "48") (term "0,0,0"))
                              (rule "polySimp_pullOutFactor2b" (formula "48") (term "0,0"))
                              (rule "add_literals" (formula "48") (term "1,1,0,0"))
                              (rule "times_zero_1" (formula "48") (term "1,0,0"))
                              (rule "add_zero_right" (formula "48") (term "0,0"))
                              (rule "applyEq" (formula "46") (term "0") (ifseqformula "49"))
                              (rule "inEqSimp_homoInEq1" (formula "46"))
                              (rule "polySimp_mulComm0" (formula "46") (term "1,0"))
                              (rule "polySimp_rightDist" (formula "46") (term "1,0"))
                              (rule "polySimp_mulAssoc" (formula "46") (term "0,1,0"))
                              (rule "polySimp_mulComm0" (formula "46") (term "0,0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "46") (term "0,1,0"))
                              (rule "polySimp_addAssoc" (formula "46") (term "0"))
                              (rule "polySimp_addComm0" (formula "46") (term "0,0"))
                              (rule "polySimp_pullOutFactor1b" (formula "46") (term "0"))
                              (rule "add_literals" (formula "46") (term "1,1,0"))
                              (rule "times_zero_1" (formula "46") (term "1,0"))
                              (rule "add_zero_right" (formula "46") (term "0"))
                              (rule "applyEq" (formula "22") (term "0") (ifseqformula "49"))
                              (rule "inEqSimp_homoInEq0" (formula "22"))
                              (rule "polySimp_mulComm0" (formula "22") (term "1,0"))
                              (rule "polySimp_rightDist" (formula "22") (term "1,0"))
                              (rule "polySimp_mulAssoc" (formula "22") (term "0,1,0"))
                              (rule "polySimp_mulComm0" (formula "22") (term "0,0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "22") (term "0,1,0"))
                              (rule "polySimp_addAssoc" (formula "22") (term "0"))
                              (rule "applyEq" (formula "1") (term "4,0") (ifseqformula "49"))
                              (rule "applyEq" (formula "13") (term "4,1,2,0") (ifseqformula "49"))
                              (rule "applyEq" (formula "47") (term "0") (ifseqformula "49"))
                              (rule "inEqSimp_commuteLeq" (formula "47"))
                              (rule "applyEq" (formula "23") (term "0") (ifseqformula "49"))
                              (rule "inEqSimp_homoInEq1" (formula "23"))
                              (rule "polySimp_mulComm0" (formula "23") (term "1,0"))
                              (rule "polySimp_rightDist" (formula "23") (term "1,0"))
                              (rule "polySimp_mulAssoc" (formula "23") (term "0,1,0"))
                              (rule "polySimp_mulComm0" (formula "23") (term "0,0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "23") (term "0,1,0"))
                              (rule "polySimp_addAssoc" (formula "23") (term "0"))
                              (rule "applyEq" (formula "45") (term "0,1,1") (ifseqformula "49"))
                              (rule "polySimp_mulComm0" (formula "45") (term "1,1"))
                              (rule "polySimp_rightDist" (formula "45") (term "1,1"))
                              (rule "polySimp_mulAssoc" (formula "45") (term "0,1,1"))
                              (rule "polySimp_mulComm0" (formula "45") (term "0,0,1,1"))
                              (rule "polySimp_mulLiterals" (formula "45") (term "0,1,1"))
                              (rule "polySimp_addComm0" (formula "45") (term "1"))
                              (rule "applyEq" (formula "54") (term "4,1") (ifseqformula "49"))
                              (rule "applyEq" (formula "15") (term "4,1,1,0") (ifseqformula "49"))
                              (rule "applyEq" (formula "16") (term "4,1,0,1,1,0") (ifseqformula "49"))
                              (rule "inEqSimp_invertInEq0" (formula "46"))
                              (rule "times_zero_2" (formula "46") (term "1"))
                              (rule "polySimp_mulLiterals" (formula "46") (term "0"))
                              (rule "inEqSimp_sepNegMonomial1" (formula "22"))
                              (rule "polySimp_mulLiterals" (formula "22") (term "0"))
                              (rule "polySimp_elimOne" (formula "22") (term "0"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "23"))
                              (rule "polySimp_mulLiterals" (formula "23") (term "0"))
                              (rule "polySimp_elimOne" (formula "23") (term "0"))
                              (rule "elimGcdGeq_antec" (formula "46") (inst "elimGcdRightDiv=Z(0(#))") (inst "elimGcdLeftDiv=l_0") (inst "elimGcd=Z(6(5(2(#))))"))
                              (rule "leq_literals" (formula "46") (term "0,0"))
                               (builtin "One Step Simplification" (formula "46"))
                              (rule "add_zero_right" (formula "46") (term "0,0,0,0"))
                              (rule "polySimp_mulLiterals" (formula "46") (term "1,0,0"))
                              (rule "times_zero_1" (formula "46") (term "1,0,0,0,0"))
                              (rule "add_zero_right" (formula "46") (term "0,0,0,0"))
                              (rule "polySimp_pullOutFactor0b" (formula "46") (term "0,0"))
                              (rule "add_literals" (formula "46") (term "1,1,0,0"))
                              (rule "times_zero_1" (formula "46") (term "1,0,0"))
                              (rule "add_zero_right" (formula "46") (term "0,0"))
                              (rule "leq_literals" (formula "46") (term "0"))
                               (builtin "One Step Simplification" (formula "46"))
                              (rule "inEqSimp_exactShadow3" (formula "23") (ifseqformula "34"))
                              (rule "polySimp_rightDist" (formula "23") (term "0,0"))
                              (rule "polySimp_mulLiterals" (formula "23") (term "1,0,0"))
                              (rule "mul_literals" (formula "23") (term "0,0,0"))
                              (rule "polySimp_addComm1" (formula "23") (term "0"))
                              (rule "add_literals" (formula "23") (term "0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "23"))
                              (rule "mul_literals" (formula "23") (term "1"))
                              (rule "inEqSimp_subsumption6" (formula "23") (ifseqformula "47"))
                              (rule "greater_literals" (formula "23") (term "0,0"))
                               (builtin "One Step Simplification" (formula "23"))
                              (rule "times_zero_1" (formula "23") (term "1,0"))
                              (rule "leq_literals" (formula "23") (term "0"))
                               (builtin "One Step Simplification" (formula "23"))
                              (rule "true_left" (formula "23"))
                              (rule "inEqSimp_exactShadow3" (formula "47") (ifseqformula "38"))
                              (rule "polySimp_rightDist" (formula "47") (term "0,0"))
                              (rule "polySimp_mulAssoc" (formula "47") (term "0,0,0"))
                              (rule "polySimp_mulComm0" (formula "47") (term "0,0,0,0"))
                              (rule "polySimp_mulLiterals" (formula "47") (term "0,0,0"))
                              (rule "polySimp_addComm1" (formula "47") (term "0"))
                              (rule "polySimp_addComm0" (formula "47") (term "0,0"))
                              (rule "inEqSimp_sepNegMonomial1" (formula "47"))
                              (rule "polySimp_mulLiterals" (formula "47") (term "0"))
                              (rule "polySimp_elimOne" (formula "47") (term "0"))
                              (rule "inEqSimp_subsumption0" (formula "22") (ifseqformula "47"))
                              (rule "inEqSimp_homoInEq0" (formula "22") (term "0"))
                              (rule "polySimp_mulComm0" (formula "22") (term "1,0,0"))
                              (rule "polySimp_rightDist" (formula "22") (term "1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "22") (term "1,1,0,0"))
                              (rule "mul_literals" (formula "22") (term "0,1,0,0"))
                              (rule "polySimp_addAssoc" (formula "22") (term "0,0"))
                              (rule "polySimp_addComm1" (formula "22") (term "0,0,0"))
                              (rule "add_literals" (formula "22") (term "0,0,0,0"))
                              (rule "polySimp_pullOutFactor0b" (formula "22") (term "0,0"))
                              (rule "add_literals" (formula "22") (term "1,1,0,0"))
                              (rule "times_zero_1" (formula "22") (term "1,0,0"))
                              (rule "add_zero_right" (formula "22") (term "0,0"))
                              (rule "qeq_literals" (formula "22") (term "0"))
                               (builtin "One Step Simplification" (formula "22"))
                              (rule "true_left" (formula "22"))
                              (rule "inEqSimp_exactShadow3" (formula "32") (ifseqformula "46"))
                              (rule "times_zero_1" (formula "32") (term "0,0"))
                              (rule "add_zero_left" (formula "32") (term "0"))
                              (rule "inEqSimp_sepNegMonomial1" (formula "32"))
                              (rule "polySimp_mulLiterals" (formula "32") (term "0"))
                              (rule "elimGcdLeq_antec" (formula "32") (inst "elimGcdRightDiv=Z(7(2(1(#))))") (inst "elimGcdLeftDiv=l_0") (inst "elimGcd=Z(6(5(2(#))))"))
                              (rule "polySimp_mulLiterals" (formula "32") (term "1,0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "32") (term "1,0,0,0,0,1,0"))
                              (rule "neg_literal" (formula "32") (term "0,0,0,0,0,1,0"))
                              (rule "leq_literals" (formula "32") (term "0,0"))
                               (builtin "One Step Simplification" (formula "32"))
                              (rule "mul_literals" (formula "32") (term "1,0,0,0,0,0"))
                              (rule "polySimp_addLiterals" (formula "32") (term "0,0,0,0"))
                              (rule "add_literals" (formula "32") (term "0,0,0,0"))
                              (rule "polySimp_pullOutFactor0b" (formula "32") (term "0,0"))
                              (rule "add_literals" (formula "32") (term "1,1,0,0"))
                              (rule "times_zero_1" (formula "32") (term "1,0,0"))
                              (rule "add_zero_right" (formula "32") (term "0,0"))
                              (rule "qeq_literals" (formula "32") (term "0"))
                               (builtin "One Step Simplification" (formula "32"))
                              (rule "Free_class_invariant_axiom_for_de_wiesler_Classifier" (formula "51"))
                               (builtin "One Step Simplification" (formula "51"))
                              (rule "andLeft" (formula "51"))
                              (rule "andLeft" (formula "51"))
                              (rule "andLeft" (formula "51"))
                              (rule "andLeft" (formula "51"))
                              (rule "andLeft" (formula "51"))
                              (rule "andLeft" (formula "51"))
                              (rule "translateJavaSubInt" (formula "56") (term "0,2,1"))
                              (rule "translateJavaSubInt" (formula "56") (term "0,2,0"))
                              (rule "eqSymm" (formula "53"))
                              (rule "eqSymm" (formula "56"))
                              (rule "translateJavaMulInt" (formula "53") (term "1,0"))
                              (rule "polySimp_elimSub" (formula "56") (term "0,2,0"))
                              (rule "mul_literals" (formula "56") (term "1,0,2,0"))
                              (rule "eqSymm" (formula "56"))
                              (rule "polySimp_elimSub" (formula "56") (term "0,2,0"))
                              (rule "mul_literals" (formula "56") (term "1,0,2,0"))
                              (rule "eqSymm" (formula "56"))
                              (rule "polySimp_mulComm0" (formula "53") (term "1,0"))
                              (rule "polySimp_addComm0" (formula "56") (term "0,2,0"))
                              (rule "eqSymm" (formula "56"))
                              (rule "polySimp_addComm0" (formula "56") (term "0,2,0"))
                              (rule "eqSymm" (formula "56"))
                              (rule "inEqSimp_commuteLeq" (formula "51"))
                              (rule "applyEq" (formula "51") (term "0") (ifseqformula "40"))
                              (rule "applyEq" (formula "52") (term "0") (ifseqformula "40"))
                              (rule "applyEq" (formula "53") (term "1") (ifseqformula "40"))
                              (rule "inEqSimp_subsumption1" (formula "11") (term "0,0") (ifseqformula "51"))
                              (rule "leq_literals" (formula "11") (term "0,0,0"))
                               (builtin "One Step Simplification" (formula "11"))
                              (rule "applyEqReverse" (formula "12") (term "0,0,1") (ifseqformula "11"))
                              (rule "hideAuxiliaryEq" (formula "11"))
                              (rule "inEqSimp_exactShadow3" (formula "8") (ifseqformula "51"))
                              (rule "polySimp_rightDist" (formula "8") (term "0,0"))
                              (rule "mul_literals" (formula "8") (term "0,0,0"))
                              (rule "polySimp_addComm1" (formula "8") (term "0"))
                              (rule "add_literals" (formula "8") (term "0,0"))
                              (rule "inEqSimp_sepNegMonomial1" (formula "8"))
                              (rule "polySimp_mulLiterals" (formula "8") (term "0"))
                              (rule "polySimp_elimOne" (formula "8") (term "0"))
                              (rule "inEqSimp_subsumption0" (formula "6") (ifseqformula "8"))
                              (rule "leq_literals" (formula "6") (term "0"))
                               (builtin "One Step Simplification" (formula "6"))
                              (rule "true_left" (formula "6"))
                              (rule "inEqSimp_exactShadow3" (formula "50") (ifseqformula "30"))
                              (rule "mul_literals" (formula "50") (term "0,0"))
                              (rule "polySimp_addAssoc" (formula "50") (term "0"))
                              (rule "add_literals" (formula "50") (term "0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "50"))
                              (rule "mul_literals" (formula "50") (term "1"))
                              (rule "inEqSimp_subsumption1" (formula "29") (ifseqformula "50"))
                              (rule "leq_literals" (formula "29") (term "0"))
                               (builtin "One Step Simplification" (formula "29"))
                              (rule "true_left" (formula "29"))
                              (rule "Definition_axiom_for_bufferLen_in_de_wiesler_Buffers" (formula "64") (term "0"))
                              (rule "applyEq" (formula "63") (term "2,0") (ifseqformula "64"))
                               (builtin "One Step Simplification" (formula "63"))
                              (rule "Definition_axiom_for_isSortedSlice_in_de_wiesler_Functions" (formula "13") (term "0") (inst "i=i"))
                               (builtin "One Step Simplification" (formula "13"))
                              (rule "expand_inInt" (formula "13") (term "1,0,0"))
                              (rule "replace_int_MIN" (formula "13") (term "0,1,1,0,0"))
                              (rule "replace_int_MAX" (formula "13") (term "1,0,1,0,0"))
                              (rule "translateJavaSubInt" (formula "13") (term "1,1,0,0,0"))
                              (rule "translateJavaAddInt" (formula "13") (term "0,2,1,1,0"))
                              (rule "polySimp_elimSub" (formula "13") (term "1,1,0,0,0"))
                              (rule "mul_literals" (formula "13") (term "1,1,1,0,0,0"))
                              (rule "polySimp_addComm0" (formula "13") (term "0,2,1,1,0"))
                              (rule "polySimp_addComm0" (formula "13") (term "1,1,0,0,0"))
                              (rule "inEqSimp_ltToLeq" (formula "13") (term "1,0,0,0"))
                              (rule "polySimp_rightDist" (formula "13") (term "1,0,0,1,0,0,0"))
                              (rule "mul_literals" (formula "13") (term "0,1,0,0,1,0,0,0"))
                              (rule "polySimp_addAssoc" (formula "13") (term "0,0,1,0,0,0"))
                              (rule "add_literals" (formula "13") (term "0,0,0,1,0,0,0"))
                              (rule "inEqSimp_commuteLeq" (formula "13") (term "0,0,0,0"))
                              (rule "inEqSimp_commuteLeq" (formula "13") (term "1,1,0,0"))
                              (rule "inEqSimp_commuteLeq" (formula "13") (term "1,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "1,0,0,0"))
                              (rule "polySimp_mulComm0" (formula "13") (term "1,1,0,0,0"))
                              (rule "polySimp_rightDist" (formula "13") (term "1,1,0,0,0"))
                              (rule "mul_literals" (formula "13") (term "0,1,1,0,0,0"))
                              (rule "polySimp_mulLiterals" (formula "13") (term "1,1,1,0,0,0"))
                              (rule "polySimp_elimOne" (formula "13") (term "1,1,1,0,0,0"))
                              (rule "Class_invariant_axiom_for_de_wiesler_Classifier" (formula "26"))
                              (rule "andLeft" (formula "26"))
                              (rule "notLeft" (formula "27"))
                              (rule "notLeft" (formula "26"))
                              (rule "replace_known_right" (formula "4") (term "0") (ifseqformula "66"))
                               (builtin "One Step Simplification" (formula "4"))
                              (rule "replace_known_right" (formula "5") (term "0") (ifseqformula "67"))
                               (builtin "One Step Simplification" (formula "5"))
                              (rule "Class_invariant_axiom_for_de_wiesler_Buffers" (formula "57"))
                              (rule "andLeft" (formula "57"))
                              (rule "notLeft" (formula "58"))
                              (rule "notLeft" (formula "57"))
                              (rule "replace_known_right" (formula "2") (term "0") (ifseqformula "65"))
                               (builtin "One Step Simplification" (formula "2"))
                              (rule "replace_known_right" (formula "3") (term "0") (ifseqformula "66"))
                               (builtin "One Step Simplification" (formula "3"))
                              (rule "replace_known_right" (formula "61") (term "0,0,0,0") (ifseqformula "66"))
                               (builtin "One Step Simplification" (formula "61") (ifInst ""  (formula "3")))
                              (rule "true_left" (formula "61"))
                              (rule "Definition_axiom_for_bufferLen_in_de_wiesler_Buffers" (formula "12") (term "0,2,0"))
                              (rule "polySimp_addComm0" (formula "12") (term "2,0"))
                              (rule "Free_class_invariant_axiom_for_de_wiesler_Buffers" (formula "26") (inst "b=b"))
                               (builtin "One Step Simplification" (formula "26") (ifInst ""  (formula "50")))
                              (rule "expand_inInt" (formula "26") (term "1,0,0,1"))
                              (rule "replace_int_MIN" (formula "26") (term "0,1,1,0,0,1"))
                              (rule "replace_int_MAX" (formula "26") (term "1,0,1,0,0,1"))
                              (rule "andLeft" (formula "26"))
                              (rule "andLeft" (formula "26"))
                              (rule "andLeft" (formula "26"))
                              (rule "andLeft" (formula "26"))
                              (rule "notLeft" (formula "26"))
                              (rule "translateJavaMulInt" (formula "26") (term "1"))
                              (rule "mul_literals" (formula "26") (term "1"))
                              (rule "eqSymm" (formula "67"))
                              (rule "inEqSimp_ltToLeq" (formula "29") (term "1,0,0,0"))
                              (rule "polySimp_mulComm0" (formula "29") (term "1,0,0,1,0,0,0"))
                              (rule "inEqSimp_commuteLeq" (formula "29") (term "0,1,0"))
                              (rule "inEqSimp_commuteLeq" (formula "29") (term "1,1,0,0"))
                              (rule "inEqSimp_commuteLeq" (formula "29") (term "0,0,0,0"))
                              (rule "inEqSimp_commuteLeq" (formula "28"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "29") (term "1,0,0,0"))
                              (rule "polySimp_mulComm0" (formula "29") (term "1,1,0,0,0"))
                              (rule "polySimp_rightDist" (formula "29") (term "1,1,0,0,0"))
                              (rule "mul_literals" (formula "29") (term "0,1,1,0,0,0"))
                              (rule "polySimp_mulLiterals" (formula "29") (term "1,1,1,0,0,0"))
                              (rule "polySimp_elimOne" (formula "29") (term "1,1,1,0,0,0"))
                              (rule "inEqSimp_subsumption1" (formula "28") (ifseqformula "52"))
                              (rule "leq_literals" (formula "28") (term "0"))
                               (builtin "One Step Simplification" (formula "28"))
                              (rule "true_left" (formula "28"))
                              (rule "Free_class_invariant_axiom_for_de_wiesler_Buffers" (formula "64") (inst "b=b"))
                               (builtin "One Step Simplification" (formula "64") (ifInst ""  (formula "27")) (ifInst ""  (formula "52")))
                              (rule "expand_inInt" (formula "64") (term "1,0,0,1"))
                              (rule "replace_int_MIN" (formula "64") (term "0,1,1,0,0,1"))
                              (rule "replace_int_MAX" (formula "64") (term "1,0,1,0,0,1"))
                              (rule "andLeft" (formula "64"))
                              (rule "andLeft" (formula "64"))
                              (rule "andLeft" (formula "64"))
                              (rule "notLeft" (formula "64"))
                              (rule "translateJavaMulInt" (formula "64") (term "1"))
                              (rule "mul_literals" (formula "64") (term "1"))
                              (rule "eqSymm" (formula "67"))
                              (rule "inEqSimp_ltToLeq" (formula "65") (term "1,0,0,0"))
                              (rule "polySimp_mulComm0" (formula "65") (term "1,0,0,1,0,0,0"))
                              (rule "inEqSimp_commuteLeq" (formula "65") (term "1,1,0,0"))
                              (rule "inEqSimp_commuteLeq" (formula "65") (term "0,1,0"))
                              (rule "inEqSimp_commuteLeq" (formula "65") (term "0,0,0,0"))
                              (rule "inEqSimp_commuteLeq" (formula "64"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "65") (term "1,0,0,0"))
                              (rule "polySimp_mulComm0" (formula "65") (term "1,1,0,0,0"))
                              (rule "polySimp_rightDist" (formula "65") (term "1,1,0,0,0"))
                              (rule "mul_literals" (formula "65") (term "0,1,1,0,0,0"))
                              (rule "polySimp_mulLiterals" (formula "65") (term "1,1,1,0,0,0"))
                              (rule "polySimp_elimOne" (formula "65") (term "1,1,1,0,0,0"))
                              (rule "inEqSimp_subsumption1" (formula "64") (ifseqformula "51"))
                              (rule "leq_literals" (formula "64") (term "0"))
                               (builtin "One Step Simplification" (formula "64"))
                              (rule "true_left" (formula "64"))
                              (rule "nnf_imp2or" (formula "43") (term "0"))
                              (rule "Definition_axiom_for_bufferLen_in_de_wiesler_Buffers" (formula "15") (term "0,0,1,1,0"))
                              (rule "polySimp_addComm0" (formula "15") (term "0,1,1,0"))
                              (rule "Definition_axiom_for_count_in_de_wiesler_Buffers" (formula "44") (term "0") (inst "b=b"))
                              (rule "translateJavaCastInt" (formula "44") (term "0"))
                              (rule "Contract_axiom_for_isClassifiedWith_in_Buffers" (formula "42") (term "0"))
                              (rule "replace_known_left" (formula "42") (term "0,1,0,0,0,0") (ifseqformula "39"))
                               (builtin "One Step Simplification" (formula "42") (ifInst ""  (formula "86")) (ifInst ""  (formula "17")) (ifInst ""  (formula "24")) (ifInst ""  (formula "88")))
                              (rule "Definition_axiom_for_isClassifiedWith_in_de_wiesler_Buffers" (formula "43") (term "0") (inst "b=b"))
                               (builtin "One Step Simplification" (formula "43"))
                              (rule "expand_inInt" (formula "43") (term "1,0,0"))
                              (rule "replace_int_MIN" (formula "43") (term "0,1,1,0,0"))
                              (rule "replace_int_MAX" (formula "43") (term "1,0,1,0,0"))
                              (rule "translateJavaMulInt" (formula "43") (term "0,4,0,1,0"))
                              (rule "translateJavaMulInt" (formula "43") (term "3,0,1,0"))
                              (rule "translateJavaAddInt" (formula "43") (term "4,0,1,0"))
                              (rule "inEqSimp_ltToLeq" (formula "43") (term "1,0,0,0"))
                              (rule "polySimp_mulComm0" (formula "43") (term "1,0,0,1,0,0,0"))
                              (rule "inEqSimp_commuteLeq" (formula "43") (term "0,0,0,0"))
                              (rule "inEqSimp_commuteLeq" (formula "43") (term "1,1,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "43") (term "1,0,0,0"))
                              (rule "polySimp_mulComm0" (formula "43") (term "1,1,0,0,0"))
                              (rule "polySimp_rightDist" (formula "43") (term "1,1,0,0,0"))
                              (rule "mul_literals" (formula "43") (term "0,1,1,0,0,0"))
                              (rule "polySimp_mulLiterals" (formula "43") (term "1,1,1,0,0,0"))
                              (rule "polySimp_elimOne" (formula "43") (term "1,1,1,0,0,0"))
                              (rule "commute_or" (formula "15") (term "0,0,0"))
                              (rule "nnf_imp2or" (formula "13") (term "0"))
                              (rule "commute_or" (formula "14") (term "0,0,0,0"))
                              (rule "Definition_axiom_for_allElementsCounted_in_de_wiesler_Classifier" (formula "40") (term "0") (inst "b=b") (inst "b_0=b_0"))
                               (builtin "One Step Simplification" (formula "40"))
                              (rule "expand_inInt" (formula "40") (term "1,0,0,0"))
                              (rule "replace_int_MAX" (formula "40") (term "1,0,1,0,0,0"))
                              (rule "replace_int_MIN" (formula "40") (term "0,1,1,0,0,0"))
                              (rule "andLeft" (formula "40"))
                              (rule "translateJavaSubInt" (formula "41") (term "1"))
                              (rule "translateJavaCastInt" (formula "41") (term "0"))
                              (rule "polySimp_elimSub" (formula "41") (term "1"))
                              (rule "polySimp_pullOutFactor1b" (formula "41") (term "1"))
                              (rule "add_literals" (formula "41") (term "1,1,1"))
                              (rule "times_zero_1" (formula "41") (term "1,1"))
                              (rule "add_zero_right" (formula "41") (term "1"))
                              (rule "inEqSimp_ltToLeq" (formula "40") (term "1,0,0,0"))
                              (rule "polySimp_mulComm0" (formula "40") (term "1,0,0,1,0,0,0"))
                              (rule "inEqSimp_commuteLeq" (formula "40") (term "0,0,0,0"))
                              (rule "inEqSimp_commuteLeq" (formula "40") (term "1,1,0,0"))
                              (rule "applyEq" (formula "41") (term "1,0") (ifseqformula "39"))
                              (rule "applyEq" (formula "40") (term "0,1,0,0,1,0,0,0") (ifseqformula "39"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "40") (term "1,0,0,0"))
                              (rule "polySimp_mulComm0" (formula "40") (term "1,1,0,0,0"))
                              (rule "polySimp_rightDist" (formula "40") (term "1,1,0,0,0"))
                              (rule "mul_literals" (formula "40") (term "0,1,1,0,0,0"))
                              (rule "polySimp_mulLiterals" (formula "40") (term "1,1,1,0,0,0"))
                              (rule "polySimp_elimOne" (formula "40") (term "1,1,1,0,0,0"))
                              (rule "Contract_axiom_for_isClassifiedBlocksRange_in_Classifier" (formula "42") (term "0"))
                              (rule "translateJavaSubInt" (formula "42") (term "0,0,0,0,0,0,0"))
                              (rule "replace_known_left" (formula "42") (term "1,0,0") (ifseqformula "18"))
                               (builtin "One Step Simplification" (formula "42") (ifInst ""  (formula "91")) (ifInst ""  (formula "17")) (ifInst ""  (formula "88")))
                              (rule "polySimp_elimSub" (formula "42") (term "0,0,0,0"))
                              (rule "polySimp_pullOutFactor1b" (formula "42") (term "0,0,0,0"))
                              (rule "add_literals" (formula "42") (term "1,1,0,0,0,0"))
                              (rule "times_zero_1" (formula "42") (term "1,0,0,0,0"))
                              (rule "add_zero_right" (formula "42") (term "0,0,0,0"))
                              (rule "Definition_axiom_for_isClassifiedBlocksRange_in_de_wiesler_Classifier" (formula "43") (term "0") (inst "block=block"))
                               (builtin "One Step Simplification" (formula "43"))
                              (rule "expand_inInt" (formula "43") (term "1,0,0"))
                              (rule "replace_int_MAX" (formula "43") (term "1,0,1,0,0"))
                              (rule "replace_int_MIN" (formula "43") (term "0,1,1,0,0"))
                              (rule "translateJavaSubInt" (formula "43") (term "0,1,1,0,0,0"))
                              (rule "translateJavaAddInt" (formula "43") (term "0,1,4,0,1,0"))
                              (rule "translateJavaMulInt" (formula "43") (term "1,3,0,1,0"))
                              (rule "translateJavaDivInt" (formula "43") (term "1,1,0,0,0"))
                              (rule "translateJavaAddInt" (formula "43") (term "4,0,1,0"))
                              (rule "translateJavaAddInt" (formula "43") (term "3,0,1,0"))
                              (rule "translateJavaMulInt" (formula "43") (term "1,4,0,1,0"))
                              (rule "polySimp_elimSub" (formula "43") (term "0,1,1,0,0,0"))
                              (rule "polySimp_pullOutFactor1b" (formula "43") (term "0,1,1,0,0,0"))
                              (rule "add_literals" (formula "43") (term "1,1,0,1,1,0,0,0"))
                              (rule "times_zero_1" (formula "43") (term "1,0,1,1,0,0,0"))
                              (rule "add_zero_right" (formula "43") (term "0,1,1,0,0,0"))
                              (rule "polySimp_mulComm0" (formula "43") (term "1,4,0,1,0"))
                              (rule "polySimp_addComm0" (formula "43") (term "1,1,4,0,1,0"))
                              (rule "polySimp_rightDist" (formula "43") (term "1,4,0,1,0"))
                              (rule "mul_literals" (formula "43") (term "0,1,4,0,1,0"))
                              (rule "polySimp_addAssoc" (formula "43") (term "4,0,1,0"))
                              (rule "polySimp_addComm0" (formula "43") (term "0,4,0,1,0"))
                              (rule "inEqSimp_ltToLeq" (formula "43") (term "1,0,0,0"))
                              (rule "polySimp_mulComm0" (formula "43") (term "1,0,0,1,0,0,0"))
                              (rule "inEqSimp_commuteLeq" (formula "43") (term "0,0,0,0"))
                              (rule "inEqSimp_commuteLeq" (formula "43") (term "1,1,0,0"))
                              (rule "applyEq" (formula "43") (term "0,1,0,0,1,0,0,0") (ifseqformula "51"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "43") (term "1,0,0,0"))
                              (rule "polySimp_mulComm0" (formula "43") (term "1,1,0,0,0"))
                              (rule "polySimp_rightDist" (formula "43") (term "1,1,0,0,0"))
                              (rule "polySimp_mulLiterals" (formula "43") (term "1,1,1,0,0,0"))
                              (rule "mul_literals" (formula "43") (term "0,1,1,0,0,0"))
                              (rule "polySimp_elimOne" (formula "43") (term "1,1,1,0,0,0"))
                              (rule "nnf_imp2or" (formula "28") (term "0"))
                              (rule "Definition_axiom_for_countClassOfSliceEq_in_de_wiesler_Classifier" (formula "1") (term "0") (inst "i=i"))
                              (rule "ifthenelse_split" (formula "10") (term "0"))
                              (branch "j_0 >= 1 TRUE"
                                 (rule "applyEqReverse" (formula "12") (term "1,1,1") (ifseqformula "11"))
                                 (rule "hideAuxiliaryEq" (formula "11"))
                                 (rule "replace_known_left" (formula "11") (term "0") (ifseqformula "10"))
                                  (builtin "One Step Simplification" (formula "11"))
                                 (rule "andLeft" (formula "11"))
                                 (rule "inEqSimp_commuteGeq" (formula "12"))
                                 (rule "inEqSimp_subsumption1" (formula "9") (ifseqformula "10"))
                                 (rule "leq_literals" (formula "9") (term "0"))
                                  (builtin "One Step Simplification" (formula "9"))
                                 (rule "true_left" (formula "9"))
                                 (rule "Definition_axiom_for_countClassOfSliceEq_in_de_wiesler_Classifier" (formula "63") (term "1") (inst "i=i"))
                                 (rule "eqSymm" (formula "63"))
                                 (rule "applyEq" (formula "1") (term "0") (ifseqformula "63"))
                                 (rule "Definition_axiom_for_countClassOfSliceEq_in_de_wiesler_Classifier" (formula "14") (term "1,1,0") (inst "i=i"))
                                 (rule "eqSymm" (formula "14") (term "1,0"))
                                 (rule "nnf_imp2or" (formula "67") (term "0"))
                                 (rule "nnf_notAnd" (formula "46") (term "0,0"))
                                 (rule "nnf_imp2or" (formula "45") (term "0"))
                                 (rule "nnf_notAnd" (formula "13") (term "0,0"))
                                 (rule "nnf_imp2or" (formula "40") (term "0"))
                                 (rule "Class_invariant_axiom_for_de_wiesler_Tree" (formula "60"))
                                 (rule "andLeft" (formula "60"))
                                 (rule "notLeft" (formula "60"))
                                 (rule "notLeft" (formula "60"))
                                 (rule "applyEq" (formula "69") (term "0") (ifseqformula "57"))
                                 (rule "Definition_axiom_for_isSortedSliceTransitive_in_de_wiesler_Functions" (formula "58") (term "0") (inst "i=i") (inst "j=j_1"))
                                  (builtin "One Step Simplification" (formula "58"))
                                 (rule "expand_inInt" (formula "58") (term "1,0,0,1,0"))
                                 (rule "expand_inInt" (formula "58") (term "1,0,0"))
                                 (rule "replace_int_MIN" (formula "58") (term "0,1,1,0,0,1,0"))
                                 (rule "replace_int_MAX" (formula "58") (term "1,0,1,0,0,1,0"))
                                 (rule "replace_int_MAX" (formula "58") (term "1,0,1,0,0"))
                                 (rule "replace_int_MIN" (formula "58") (term "0,1,1,0,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "58") (term "1,0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "58") (term "1,0,0,1,0,0,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "58") (term "1,0,0,0,1,0"))
                                 (rule "polySimp_mulComm0" (formula "58") (term "1,0,0,1,0,0,0,1,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "58") (term "0,0,0,0,1,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "58") (term "1,0,1,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "58") (term "0,0,0,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "58") (term "1,1,0,0,1,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "58") (term "1,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "58") (term "1,0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "58") (term "1,1,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "58") (term "1,1,0,0,0"))
                                 (rule "mul_literals" (formula "58") (term "0,1,1,0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "58") (term "1,1,1,0,0,0"))
                                 (rule "polySimp_elimOne" (formula "58") (term "1,1,1,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "58") (term "1,0,0,0,1,0"))
                                 (rule "polySimp_mulComm0" (formula "58") (term "1,1,0,0,0,1,0"))
                                 (rule "polySimp_rightDist" (formula "58") (term "1,1,0,0,0,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "58") (term "1,1,1,0,0,0,1,0"))
                                 (rule "mul_literals" (formula "58") (term "0,1,1,0,0,0,1,0"))
                                 (rule "polySimp_elimOne" (formula "58") (term "1,1,1,0,0,0,1,0"))
                                 (rule "nnf_imp2or" (formula "43") (term "0"))
                                 (rule "nnf_notAnd" (formula "28") (term "0,0"))
                                 (rule "nnf_notAnd" (formula "66") (term "0,0"))
                                 (rule "nnf_notAnd" (formula "45") (term "0,0"))
                                 (rule "nnf_notAnd" (formula "40") (term "0,0"))
                                 (rule "nnf_notAnd" (formula "46") (term "0,0,0"))
                                 (rule "inEqSimp_notLeq" (formula "46") (term "1,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "46") (term "1,0,0,1,0,0,0"))
                                 (rule "mul_literals" (formula "46") (term "0,1,0,0,1,0,0,0"))
                                 (rule "polySimp_addAssoc" (formula "46") (term "0,0,1,0,0,0"))
                                 (rule "add_literals" (formula "46") (term "0,0,0,1,0,0,0"))
                                 (rule "add_zero_left" (formula "46") (term "0,0,1,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "46") (term "1,0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "46") (term "1,1,0,0,0"))
                                 (rule "polySimp_elimOne" (formula "46") (term "1,1,0,0,0"))
                                 (rule "inEqSimp_notGeq" (formula "46") (term "0,0,0,0"))
                                 (rule "mul_literals" (formula "46") (term "1,0,0,0,0,0,0"))
                                 (rule "add_literals" (formula "46") (term "0,0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "46") (term "0,0,0,0"))
                                 (rule "mul_literals" (formula "46") (term "1,0,0,0,0"))
                                 (rule "nnf_notAnd" (formula "46") (term "1,0,0"))
                                 (rule "inEqSimp_notGeq" (formula "46") (term "1,1,0,0"))
                                 (rule "mul_literals" (formula "46") (term "1,0,0,1,1,0,0"))
                                 (rule "add_literals" (formula "46") (term "0,0,1,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "46") (term "1,1,0,0"))
                                 (rule "mul_literals" (formula "46") (term "1,1,1,0,0"))
                                 (rule "inEqSimp_notLeq" (formula "46") (term "0,1,0,0"))
                                 (rule "mul_literals" (formula "46") (term "1,0,0,0,1,0,0"))
                                 (rule "add_literals" (formula "46") (term "0,0,0,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "46") (term "0,1,0,0"))
                                 (rule "mul_literals" (formula "46") (term "1,0,1,0,0"))
                                 (rule "nnf_notAnd" (formula "13") (term "1,0,0"))
                                 (rule "inEqSimp_notGeq" (formula "13") (term "1,1,0,0"))
                                 (rule "mul_literals" (formula "13") (term "1,0,0,1,1,0,0"))
                                 (rule "add_literals" (formula "13") (term "0,0,1,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "1,1,0,0"))
                                 (rule "mul_literals" (formula "13") (term "1,1,1,0,0"))
                                 (rule "inEqSimp_notLeq" (formula "13") (term "0,1,0,0"))
                                 (rule "mul_literals" (formula "13") (term "1,0,0,0,1,0,0"))
                                 (rule "add_literals" (formula "13") (term "0,0,0,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "13") (term "0,1,0,0"))
                                 (rule "mul_literals" (formula "13") (term "1,0,1,0,0"))
                                 (rule "nnf_notAnd" (formula "13") (term "0,0,0"))
                                 (rule "inEqSimp_notGeq" (formula "13") (term "0,0,0,0"))
                                 (rule "mul_literals" (formula "13") (term "1,0,0,0,0,0,0"))
                                 (rule "add_zero_right" (formula "13") (term "0,0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "0,0,0,0"))
                                 (rule "mul_literals" (formula "13") (term "1,0,0,0,0"))
                                 (rule "inEqSimp_notLeq" (formula "13") (term "1,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "13") (term "1,0,0,1,0,0,0"))
                                 (rule "mul_literals" (formula "13") (term "0,1,0,0,1,0,0,0"))
                                 (rule "polySimp_addAssoc" (formula "13") (term "0,0,1,0,0,0"))
                                 (rule "add_literals" (formula "13") (term "0,0,0,1,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "13") (term "1,0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "13") (term "1,1,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "13") (term "1,1,0,0,0"))
                                 (rule "mul_literals" (formula "13") (term "0,1,1,0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "13") (term "1,1,1,0,0,0"))
                                 (rule "polySimp_elimOne" (formula "13") (term "1,1,1,0,0,0"))
                                 (rule "nnf_imp2or" (formula "58") (term "0"))
                                 (rule "nnf_notAnd" (formula "43") (term "0,0"))
                                 (rule "nnf_notAnd" (formula "28") (term "1,0,0"))
                                 (rule "inEqSimp_notLeq" (formula "28") (term "0,1,0,0"))
                                 (rule "mul_literals" (formula "28") (term "1,0,0,0,1,0,0"))
                                 (rule "add_literals" (formula "28") (term "0,0,0,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "28") (term "0,1,0,0"))
                                 (rule "mul_literals" (formula "28") (term "1,0,1,0,0"))
                                 (rule "inEqSimp_notGeq" (formula "28") (term "1,1,0,0"))
                                 (rule "mul_literals" (formula "28") (term "1,0,0,1,1,0,0"))
                                 (rule "add_literals" (formula "28") (term "0,0,1,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "28") (term "1,1,0,0"))
                                 (rule "mul_literals" (formula "28") (term "1,1,1,0,0"))
                                 (rule "nnf_notAnd" (formula "28") (term "0,0,0"))
                                 (rule "inEqSimp_notGeq" (formula "28") (term "0,0,0,0"))
                                 (rule "times_zero_1" (formula "28") (term "1,0,0,0,0,0,0"))
                                 (rule "add_zero_right" (formula "28") (term "0,0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "28") (term "0,0,0,0"))
                                 (rule "mul_literals" (formula "28") (term "1,0,0,0,0"))
                                 (rule "inEqSimp_notLeq" (formula "28") (term "1,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "28") (term "1,0,0,1,0,0,0"))
                                 (rule "mul_literals" (formula "28") (term "0,1,0,0,1,0,0,0"))
                                 (rule "polySimp_addAssoc" (formula "28") (term "0,0,1,0,0,0"))
                                 (rule "add_literals" (formula "28") (term "0,0,0,1,0,0,0"))
                                 (rule "add_zero_left" (formula "28") (term "0,0,1,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "28") (term "1,0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "28") (term "1,1,0,0,0"))
                                 (rule "polySimp_elimOne" (formula "28") (term "1,1,0,0,0"))
                                 (rule "nnf_notAnd" (formula "66") (term "0,0,0"))
                                 (rule "inEqSimp_notGeq" (formula "66") (term "0,0,0,0"))
                                 (rule "mul_literals" (formula "66") (term "1,0,0,0,0,0,0"))
                                 (rule "add_zero_right" (formula "66") (term "0,0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "66") (term "0,0,0,0"))
                                 (rule "mul_literals" (formula "66") (term "1,0,0,0,0"))
                                 (rule "inEqSimp_notLeq" (formula "66") (term "1,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "66") (term "1,0,0,1,0,0,0"))
                                 (rule "mul_literals" (formula "66") (term "0,1,0,0,1,0,0,0"))
                                 (rule "polySimp_addAssoc" (formula "66") (term "0,0,1,0,0,0"))
                                 (rule "add_literals" (formula "66") (term "0,0,0,1,0,0,0"))
                                 (rule "add_zero_left" (formula "66") (term "0,0,1,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "66") (term "1,0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "66") (term "1,1,0,0,0"))
                                 (rule "polySimp_elimOne" (formula "66") (term "1,1,0,0,0"))
                                 (rule "nnf_notAnd" (formula "66") (term "1,0,0"))
                                 (rule "inEqSimp_notGeq" (formula "66") (term "1,1,0,0"))
                                 (rule "mul_literals" (formula "66") (term "1,0,0,1,1,0,0"))
                                 (rule "add_literals" (formula "66") (term "0,0,1,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "66") (term "1,1,0,0"))
                                 (rule "mul_literals" (formula "66") (term "1,1,1,0,0"))
                                 (rule "inEqSimp_notLeq" (formula "66") (term "0,1,0,0"))
                                 (rule "mul_literals" (formula "66") (term "1,0,0,0,1,0,0"))
                                 (rule "add_literals" (formula "66") (term "0,0,0,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "66") (term "0,1,0,0"))
                                 (rule "mul_literals" (formula "66") (term "1,0,1,0,0"))
                                 (rule "nnf_notAnd" (formula "45") (term "0,0,0"))
                                 (rule "inEqSimp_notLeq" (formula "45") (term "1,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "45") (term "1,0,0,1,0,0,0"))
                                 (rule "mul_literals" (formula "45") (term "0,1,0,0,1,0,0,0"))
                                 (rule "polySimp_addAssoc" (formula "45") (term "0,0,1,0,0,0"))
                                 (rule "add_literals" (formula "45") (term "0,0,0,1,0,0,0"))
                                 (rule "add_zero_left" (formula "45") (term "0,0,1,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "45") (term "1,0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "45") (term "1,1,0,0,0"))
                                 (rule "polySimp_elimOne" (formula "45") (term "1,1,0,0,0"))
                                 (rule "inEqSimp_notGeq" (formula "45") (term "0,0,0,0"))
                                 (rule "times_zero_1" (formula "45") (term "1,0,0,0,0,0,0"))
                                 (rule "add_zero_right" (formula "45") (term "0,0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "45") (term "0,0,0,0"))
                                 (rule "mul_literals" (formula "45") (term "1,0,0,0,0"))
                                 (rule "nnf_notAnd" (formula "45") (term "1,0,0"))
                                 (rule "inEqSimp_notLeq" (formula "45") (term "0,1,0,0"))
                                 (rule "mul_literals" (formula "45") (term "1,0,0,0,1,0,0"))
                                 (rule "add_literals" (formula "45") (term "0,0,0,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "45") (term "0,1,0,0"))
                                 (rule "mul_literals" (formula "45") (term "1,0,1,0,0"))
                                 (rule "inEqSimp_notGeq" (formula "45") (term "1,1,0,0"))
                                 (rule "mul_literals" (formula "45") (term "1,0,0,1,1,0,0"))
                                 (rule "add_literals" (formula "45") (term "0,0,1,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "45") (term "1,1,0,0"))
                                 (rule "mul_literals" (formula "45") (term "1,1,1,0,0"))
                                 (rule "nnf_notAnd" (formula "40") (term "0,0,0"))
                                 (rule "inEqSimp_notLeq" (formula "40") (term "1,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "40") (term "1,0,0,1,0,0,0"))
                                 (rule "mul_literals" (formula "40") (term "0,1,0,0,1,0,0,0"))
                                 (rule "polySimp_addAssoc" (formula "40") (term "0,0,1,0,0,0"))
                                 (rule "add_literals" (formula "40") (term "0,0,0,1,0,0,0"))
                                 (rule "add_zero_left" (formula "40") (term "0,0,1,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "40") (term "1,0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "40") (term "1,1,0,0,0"))
                                 (rule "polySimp_elimOne" (formula "40") (term "1,1,0,0,0"))
                                 (rule "inEqSimp_notGeq" (formula "40") (term "0,0,0,0"))
                                 (rule "mul_literals" (formula "40") (term "1,0,0,0,0,0,0"))
                                 (rule "add_literals" (formula "40") (term "0,0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "40") (term "0,0,0,0"))
                                 (rule "mul_literals" (formula "40") (term "1,0,0,0,0"))
                                 (rule "nnf_notAnd" (formula "40") (term "1,0,0"))
                                 (rule "inEqSimp_notGeq" (formula "40") (term "1,1,0,0"))
                                 (rule "mul_literals" (formula "40") (term "1,0,0,1,1,0,0"))
                                 (rule "add_literals" (formula "40") (term "0,0,1,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "40") (term "1,1,0,0"))
                                 (rule "mul_literals" (formula "40") (term "1,1,1,0,0"))
                                 (rule "inEqSimp_notLeq" (formula "40") (term "0,1,0,0"))
                                 (rule "mul_literals" (formula "40") (term "1,0,0,0,1,0,0"))
                                 (rule "add_literals" (formula "40") (term "0,0,0,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "40") (term "0,1,0,0"))
                                 (rule "mul_literals" (formula "40") (term "1,0,1,0,0"))
                                 (rule "Definition_axiom_for_countClassOfSliceEq_in_de_wiesler_Classifier" (formula "12") (term "0,2,0") (inst "i=i"))
                                 (rule "polySimp_addComm0" (formula "12") (term "2,0"))
                                 (rule "jdiv_axiom" (formula "51") (term "0"))
                                 (rule "polySimp_mulLiterals" (formula "51") (term "0,0,2,1"))
                                 (rule "eqSymm" (formula "51"))
                                 (rule "applyEq" (formula "51") (term "1") (ifseqformula "52"))
                                 (rule "inEqSimp_subsumption6" (formula "51") (term "0,0") (ifseqformula "48"))
                                 (rule "greater_literals" (formula "51") (term "0,0,0,0"))
                                  (builtin "One Step Simplification" (formula "51"))
                                 (rule "times_zero_1" (formula "51") (term "1,0,0,0"))
                                 (rule "leq_literals" (formula "51") (term "0,0,0"))
                                  (builtin "One Step Simplification" (formula "51"))
                                 (rule "polyDiv_pullOut" (formula "51") (term "0") (inst "polyDivCoeff=l_0"))
                                 (rule "polySimp_mulLiterals" (formula "51") (term "1,0,0,2,0"))
                                 (rule "equal_literals" (formula "51") (term "0,0"))
                                  (builtin "One Step Simplification" (formula "51"))
                                 (rule "polySimp_homoEq" (formula "51"))
                                 (rule "polySimp_pullOutFactor0" (formula "51") (term "0,0,0,1,0"))
                                 (rule "add_literals" (formula "51") (term "1,0,0,0,1,0"))
                                 (rule "times_zero_1" (formula "51") (term "0,0,0,1,0"))
                                 (rule "div_literals" (formula "51") (term "0,0,1,0"))
                                 (rule "add_zero_left" (formula "51") (term "0,1,0"))
                                 (rule "polySimp_pullOutFactor1" (formula "51") (term "0"))
                                 (rule "add_literals" (formula "51") (term "1,0"))
                                 (rule "times_zero_1" (formula "51") (term "0"))
                                  (builtin "One Step Simplification" (formula "51"))
                                 (rule "true_left" (formula "51"))
                                 (rule "nnf_notAnd" (formula "58") (term "0,0"))
                                 (rule "nnf_imp2or" (formula "58") (term "0,1,0"))
                                 (rule "nnf_notAnd" (formula "43") (term "0,0,0"))
                                 (rule "inEqSimp_notGeq" (formula "43") (term "0,0,0,0"))
                                 (rule "mul_literals" (formula "43") (term "1,0,0,0,0,0,0"))
                                 (rule "add_literals" (formula "43") (term "0,0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "43") (term "0,0,0,0"))
                                 (rule "mul_literals" (formula "43") (term "1,0,0,0,0"))
                                 (rule "inEqSimp_notLeq" (formula "43") (term "1,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "43") (term "1,0,0,1,0,0,0"))
                                 (rule "mul_literals" (formula "43") (term "0,1,0,0,1,0,0,0"))
                                 (rule "polySimp_addAssoc" (formula "43") (term "0,0,1,0,0,0"))
                                 (rule "add_literals" (formula "43") (term "0,0,0,1,0,0,0"))
                                 (rule "add_zero_left" (formula "43") (term "0,0,1,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "43") (term "1,0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "43") (term "1,1,0,0,0"))
                                 (rule "polySimp_elimOne" (formula "43") (term "1,1,0,0,0"))
                                 (rule "nnf_notAnd" (formula "43") (term "1,0,0"))
                                 (rule "inEqSimp_notLeq" (formula "43") (term "0,1,0,0"))
                                 (rule "mul_literals" (formula "43") (term "1,0,0,0,1,0,0"))
                                 (rule "add_literals" (formula "43") (term "0,0,0,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "43") (term "0,1,0,0"))
                                 (rule "mul_literals" (formula "43") (term "1,0,1,0,0"))
                                 (rule "inEqSimp_notGeq" (formula "43") (term "1,1,0,0"))
                                 (rule "mul_literals" (formula "43") (term "1,0,0,1,1,0,0"))
                                 (rule "add_literals" (formula "43") (term "0,0,1,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "43") (term "1,1,0,0"))
                                 (rule "mul_literals" (formula "43") (term "1,1,1,0,0"))
                                 (rule "Definition_axiom_for_isValidBufferLen_in_de_wiesler_Classifier" (formula "46") (term "0,1,0"))
                                  (builtin "One Step Simplification" (formula "46"))
                                 (rule "inEqSimp_ltToLeq" (formula "46") (term "0,1,1,0"))
                                 (rule "add_zero_right" (formula "46") (term "0,0,1,1,0"))
                                 (rule "polySimp_mulComm0" (formula "46") (term "1,0,0,1,1,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "46") (term "0,0,1,0"))
                                 (rule "inEqSimp_sepNegMonomial0" (formula "46") (term "0,1,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "46") (term "0,0,1,1,0"))
                                 (rule "polySimp_elimOne" (formula "46") (term "0,0,1,1,0"))
                                 (rule "Definition_axiom_for_countClassOfSliceEq_in_de_wiesler_Classifier" (formula "15") (term "0,0,1,1,0") (inst "i=i"))
                                 (rule "polySimp_homoEq" (formula "15") (term "1,0"))
                                 (rule "polySimp_addComm0" (formula "15") (term "0,0,0,1,0"))
                                 (rule "polySimp_addComm1" (formula "15") (term "0,0,1,0"))
                                 (rule "polySimp_addComm1" (formula "15") (term "0,1,0"))
                                 (rule "polySimp_sepPosMonomial" (formula "15") (term "1,0"))
                                 (rule "polySimp_mulComm0" (formula "15") (term "1,1,0"))
                                 (rule "polySimp_rightDist" (formula "15") (term "1,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "15") (term "1,1,1,0"))
                                 (rule "polySimp_elimOne" (formula "15") (term "1,1,1,0"))
                                 (rule "polySimp_rightDist" (formula "15") (term "0,1,1,0"))
                                 (rule "polySimp_mulComm0" (formula "15") (term "0,0,1,1,0"))
                                 (rule "Definition_axiom_for_bufferLen_in_de_wiesler_Buffers" (formula "47") (term "2,0"))
                                 (rule "Class_invariant_axiom_for_de_wiesler_Buffers" (formula "44") (term "0,1"))
                                 (rule "replace_known_right" (formula "44") (term "0,0,0,1") (ifseqformula "69"))
                                  (builtin "One Step Simplification" (formula "44") (ifInst ""  (formula "70")))
                                 (rule "Free_class_invariant_axiom_for_de_wiesler_Classifier" (formula "42") (term "1,1"))
                                  (builtin "One Step Simplification" (formula "42") (ifInst ""  (formula "57")))
                                 (rule "eqSymm" (formula "42") (term "1,0,1,1"))
                                 (rule "translateJavaMulInt" (formula "42") (term "1,1,1,0,0,0,1,1"))
                                 (rule "translateJavaSubInt" (formula "42") (term "0,2,1,1,0,1,1"))
                                 (rule "translateJavaSubInt" (formula "42") (term "0,2,0,1,0,1,1"))
                                 (rule "eqSymm" (formula "42") (term "1,0,0,0,1,1"))
                                 (rule "polySimp_elimSub" (formula "42") (term "0,2,1,1,0,1,1"))
                                 (rule "mul_literals" (formula "42") (term "1,0,2,1,1,0,1,1"))
                                 (rule "polySimp_elimSub" (formula "42") (term "0,2,0,1,0,1,1"))
                                 (rule "mul_literals" (formula "42") (term "1,0,2,0,1,0,1,1"))
                                 (rule "polySimp_mulComm0" (formula "42") (term "1,0,1,0,0,0,1,1"))
                                 (rule "polySimp_addComm0" (formula "42") (term "0,2,1,1,0,1,1"))
                                 (rule "polySimp_addComm0" (formula "42") (term "0,2,0,1,0,1,1"))
                                 (rule "replace_known_left" (formula "42") (term "1,0,1,1") (ifseqformula "59"))
                                  (builtin "One Step Simplification" (formula "42"))
                                 (rule "inEqSimp_commuteLeq" (formula "42") (term "0,0,0,0,1,1"))
                                 (rule "applyEq" (formula "42") (term "0,1,0,0,1,1") (ifseqformula "56"))
                                 (rule "eqSymm" (formula "42") (term "1,0,0,1,1"))
                                 (rule "replace_known_left" (formula "42") (term "1,0,0,1,1") (ifseqformula "39"))
                                  (builtin "One Step Simplification" (formula "42"))
                                 (rule "applyEq" (formula "42") (term "0,0,0,0,1,1") (ifseqformula "39"))
                                 (rule "replace_known_left" (formula "42") (term "0,0,0,1,1") (ifseqformula "54"))
                                  (builtin "One Step Simplification" (formula "42"))
                                 (rule "applyEq" (formula "42") (term "0,0,0,1,1") (ifseqformula "39"))
                                 (rule "replace_known_left" (formula "42") (term "0,0,1,1") (ifseqformula "55"))
                                  (builtin "One Step Simplification" (formula "42"))
                                 (rule "commute_or_2" (formula "15") (term "0,0"))
                                 (rule "commute_or_2" (formula "14") (term "0,0,0"))
                                 (rule "Definition_axiom_for_classOf_in_de_wiesler_Classifier" (formula "62") (term "0,0,2,0"))
                                 (rule "Definition_axiom_for_classOf_in_de_wiesler_Classifier" (formula "14") (term "0,0,2,0,1,0"))
                                 (rule "Definition_axiom_for_isClassOfSlice_in_de_wiesler_Classifier" (formula "45") (term "0,1,0") (inst "i=i"))
                                  (builtin "One Step Simplification" (formula "45"))
                                 (rule "expand_inInt" (formula "45") (term "1,0,0,1,0"))
                                 (rule "replace_int_MIN" (formula "45") (term "0,1,1,0,0,1,0"))
                                 (rule "replace_int_MAX" (formula "45") (term "1,0,1,0,0,1,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "45") (term "1,0,0,0,1,0"))
                                 (rule "polySimp_rightDist" (formula "45") (term "1,0,0,1,0,0,0,1,0"))
                                 (rule "polySimp_mulAssoc" (formula "45") (term "0,1,0,0,1,0,0,0,1,0"))
                                 (rule "polySimp_mulComm0" (formula "45") (term "0,0,1,0,0,1,0,0,0,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "45") (term "0,1,0,0,1,0,0,0,1,0"))
                                 (rule "polySimp_addAssoc" (formula "45") (term "0,0,1,0,0,0,1,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "45") (term "0,0,0,0,1,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "45") (term "1,1,0,0,1,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "45") (term "1,0,0,0,1,0"))
                                 (rule "polySimp_mulComm0" (formula "45") (term "1,1,0,0,0,1,0"))
                                 (rule "polySimp_rightDist" (formula "45") (term "1,1,0,0,0,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "45") (term "1,1,1,0,0,0,1,0"))
                                 (rule "polySimp_elimOne" (formula "45") (term "1,1,1,0,0,0,1,0"))
                                 (rule "polySimp_rightDist" (formula "45") (term "0,1,1,0,0,0,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "45") (term "1,0,1,1,0,0,0,1,0"))
                                 (rule "mul_literals" (formula "45") (term "0,0,1,1,0,0,0,1,0"))
                                 (rule "Definition_axiom_for_countClassOfSliceEq_in_de_wiesler_Classifier" (formula "40") (term "1,1,0") (inst "i=i"))
                                 (rule "eqSymm" (formula "40") (term "1,0"))
                                 (rule "nnf_notAnd" (formula "58") (term "0,0,0"))
                                 (rule "inEqSimp_notLeq" (formula "58") (term "1,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "58") (term "1,0,0,1,0,0,0"))
                                 (rule "mul_literals" (formula "58") (term "0,1,0,0,1,0,0,0"))
                                 (rule "polySimp_addAssoc" (formula "58") (term "0,0,1,0,0,0"))
                                 (rule "add_literals" (formula "58") (term "0,0,0,1,0,0,0"))
                                 (rule "add_zero_left" (formula "58") (term "0,0,1,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "58") (term "1,0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "58") (term "1,1,0,0,0"))
                                 (rule "polySimp_elimOne" (formula "58") (term "1,1,0,0,0"))
                                 (rule "inEqSimp_notGeq" (formula "58") (term "0,0,0,0"))
                                 (rule "mul_literals" (formula "58") (term "1,0,0,0,0,0,0"))
                                 (rule "add_zero_right" (formula "58") (term "0,0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "58") (term "0,0,0,0"))
                                 (rule "mul_literals" (formula "58") (term "1,0,0,0,0"))
                                 (rule "nnf_notAnd" (formula "58") (term "1,0,0"))
                                 (rule "inEqSimp_notLeq" (formula "58") (term "0,1,0,0"))
                                 (rule "mul_literals" (formula "58") (term "1,0,0,0,1,0,0"))
                                 (rule "add_literals" (formula "58") (term "0,0,0,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "58") (term "0,1,0,0"))
                                 (rule "mul_literals" (formula "58") (term "1,0,1,0,0"))
                                 (rule "inEqSimp_notGeq" (formula "58") (term "1,1,0,0"))
                                 (rule "mul_literals" (formula "58") (term "1,0,0,1,1,0,0"))
                                 (rule "add_literals" (formula "58") (term "0,0,1,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "58") (term "1,1,0,0"))
                                 (rule "mul_literals" (formula "58") (term "1,1,1,0,0"))
                                 (rule "ifthenelse_split" (formula "56") (term "0"))
                                 (branch "self.equal_buckets = TRUE TRUE"
                                    (rule "newSym_eq" (formula "57") (inst "l=l_1") (inst "newSymDef=mul(int::final(buffers,
               de.wiesler.Buffers::$num_buckets),
    Z(0(#)))"))
                                    (rule "times_zero_1" (formula "57") (term "1,1"))
                                    (rule "add_zero_right" (formula "57") (term "1"))
                                    (rule "applyEq" (formula "60") (term "1,1,1,0,0,0,0,1,0") (ifseqformula "57"))
                                    (rule "applyEq" (formula "61") (term "1,0,2,0") (ifseqformula "57"))
                                    (rule "eqSymm" (formula "61"))
                                    (rule "applyEq" (formula "58") (term "0,0") (ifseqformula "57"))
                                    (rule "eqSymm" (formula "58"))
                                    (rule "applyEq" (formula "42") (term "3,0,0,1,1") (ifseqformula "57"))
                                    (rule "applyEq" (formula "60") (term "1,1,0,0,0") (ifseqformula "57"))
                                    (rule "applyEq" (formula "68") (term "2,1,0,0,0,1,0") (ifseqformula "58"))
                                    (rule "applyEq" (formula "13") (term "2,1,0,1,1,0") (ifseqformula "58"))
                                    (rule "applyEq" (formula "46") (term "1,1,0,0,0") (ifseqformula "58"))
                                    (rule "applyEq" (formula "40") (term "1,1,0,0,0") (ifseqformula "58"))
                                    (rule "applyEq" (formula "68") (term "1,1,0,0,0") (ifseqformula "58"))
                                    (rule "applyEq" (formula "14") (term "1,1,0,0,0") (ifseqformula "58"))
                                    (rule "applyEq" (formula "8") (term "0") (ifseqformula "58"))
                                    (rule "inEqSimp_homoInEq1" (formula "8"))
                                    (rule "polySimp_mulLiterals" (formula "8") (term "1,0"))
                                    (rule "polySimp_addComm1" (formula "8") (term "0"))
                                    (rule "applyEq" (formula "41") (term "1,0") (ifseqformula "58"))
                                    (rule "applyEq" (formula "45") (term "1,1,0,0,0") (ifseqformula "58"))
                                    (rule "applyEq" (formula "68") (term "2,1,0,0,1,1,0") (ifseqformula "58"))
                                    (rule "applyEq" (formula "13") (term "2,1,0,0,1,0") (ifseqformula "58"))
                                    (rule "applyEq" (formula "61") (term "1,0,2,0") (ifseqformula "57"))
                                    (rule "eqSymm" (formula "61"))
                                    (rule "applyEq" (formula "28") (term "1,1,0,0,0") (ifseqformula "58"))
                                    (rule "applyEq" (formula "55") (term "0") (ifseqformula "58"))
                                    (rule "applyEq" (formula "30") (term "0") (ifseqformula "58"))
                                    (rule "inEqSimp_homoInEq0" (formula "30"))
                                    (rule "polySimp_mulLiterals" (formula "30") (term "1,0"))
                                    (rule "polySimp_addComm1" (formula "30") (term "0"))
                                    (rule "applyEq" (formula "47") (term "1,0") (ifseqformula "58"))
                                    (rule "applyEq" (formula "54") (term "0") (ifseqformula "58"))
                                    (rule "applyEq" (formula "39") (term "1") (ifseqformula "58"))
                                    (rule "applyEq" (formula "14") (term "2,1,0,1,1,0") (ifseqformula "58"))
                                    (rule "applyEq" (formula "15") (term "2,1,0,2,1,1,1,0") (ifseqformula "58"))
                                    (rule "applyEq" (formula "15") (term "2,1,0,0,1,0,1,1,0") (ifseqformula "58"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "8"))
                                    (rule "polySimp_mulComm0" (formula "8") (term "1"))
                                    (rule "polySimp_rightDist" (formula "8") (term "1"))
                                    (rule "mul_literals" (formula "8") (term "0,1"))
                                    (rule "polySimp_mulLiterals" (formula "8") (term "1,1"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "30"))
                                    (rule "polySimp_mulComm0" (formula "30") (term "1"))
                                    (rule "polySimp_rightDist" (formula "30") (term "1"))
                                    (rule "polySimp_mulLiterals" (formula "30") (term "1,1"))
                                    (rule "mul_literals" (formula "30") (term "0,1"))
                                    (rule "elimGcdGeq_antec" (formula "54") (inst "elimGcdRightDiv=Z(1(#))") (inst "elimGcdLeftDiv=l_1") (inst "elimGcd=Z(2(#))"))
                                    (rule "polySimp_mulLiterals" (formula "54") (term "1,0,0,0,0,1,0"))
                                    (rule "leq_literals" (formula "54") (term "0,0"))
                                     (builtin "One Step Simplification" (formula "54"))
                                    (rule "mul_literals" (formula "54") (term "1,0,0,0,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "54") (term "1,0,0"))
                                    (rule "polySimp_addLiterals" (formula "54") (term "0,0,0,0"))
                                    (rule "add_zero_right" (formula "54") (term "0,0,0,0"))
                                    (rule "polySimp_pullOutFactor0b" (formula "54") (term "0,0"))
                                    (rule "add_literals" (formula "54") (term "1,1,0,0"))
                                    (rule "times_zero_1" (formula "54") (term "1,0,0"))
                                    (rule "add_zero_right" (formula "54") (term "0,0"))
                                    (rule "leq_literals" (formula "54") (term "0"))
                                     (builtin "One Step Simplification" (formula "54"))
                                    (rule "elimGcdLeq_antec" (formula "55") (inst "elimGcdRightDiv=Z(4(6(#)))") (inst "elimGcdLeftDiv=l_1") (inst "elimGcd=Z(2(#))"))
                                    (rule "polySimp_mulLiterals" (formula "55") (term "1,0,0,0,0,1,0"))
                                    (rule "polySimp_mulLiterals" (formula "55") (term "1,0,1,0"))
                                    (rule "neg_literal" (formula "55") (term "0,0,0,0,0,1,0"))
                                    (rule "leq_literals" (formula "55") (term "0,0"))
                                     (builtin "One Step Simplification" (formula "55"))
                                    (rule "mul_literals" (formula "55") (term "1,0,0,0,0,0"))
                                    (rule "polySimp_addLiterals" (formula "55") (term "0,0,0,0"))
                                    (rule "add_literals" (formula "55") (term "0,0,0,0"))
                                    (rule "polySimp_pullOutFactor0b" (formula "55") (term "0,0"))
                                    (rule "add_literals" (formula "55") (term "1,1,0,0"))
                                    (rule "times_zero_1" (formula "55") (term "1,0,0"))
                                    (rule "add_zero_right" (formula "55") (term "0,0"))
                                    (rule "qeq_literals" (formula "55") (term "0"))
                                     (builtin "One Step Simplification" (formula "55"))
                                    (rule "inEqSimp_exactShadow3" (formula "30") (ifseqformula "29"))
                                    (rule "polySimp_rightDist" (formula "30") (term "0,0"))
                                    (rule "mul_literals" (formula "30") (term "0,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "30") (term "1,0,0"))
                                    (rule "polySimp_addComm1" (formula "30") (term "0"))
                                    (rule "add_literals" (formula "30") (term "0,0"))
                                    (rule "inEqSimp_sepNegMonomial1" (formula "30"))
                                    (rule "polySimp_mulLiterals" (formula "30") (term "0"))
                                    (rule "inEqSimp_subsumption4" (formula "30") (ifseqformula "56"))
                                    (rule "mul_literals" (formula "30") (term "0,1,0"))
                                    (rule "greater_literals" (formula "30") (term "0,0"))
                                     (builtin "One Step Simplification" (formula "30"))
                                    (rule "leq_literals" (formula "30") (term "0"))
                                     (builtin "One Step Simplification" (formula "30"))
                                    (rule "true_left" (formula "30"))
                                    (rule "inEqSimp_exactShadow3" (formula "9") (ifseqformula "8"))
                                    (rule "mul_literals" (formula "9") (term "0,0"))
                                    (rule "polySimp_addAssoc" (formula "9") (term "0"))
                                    (rule "add_literals" (formula "9") (term "0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "9"))
                                    (rule "mul_literals" (formula "9") (term "1"))
                                    (rule "inEqSimp_subsumption6" (formula "9") (ifseqformula "55"))
                                    (rule "greater_literals" (formula "9") (term "0,0"))
                                     (builtin "One Step Simplification" (formula "9"))
                                    (rule "mul_literals" (formula "9") (term "1,0"))
                                    (rule "leq_literals" (formula "9") (term "0"))
                                     (builtin "One Step Simplification" (formula "9"))
                                    (rule "true_left" (formula "9"))
                                    (rule "Definition_axiom_for_isClassifiedBlock_in_de_wiesler_Classifier" (formula "43") (term "0,1,0") (inst "bucket=bucket"))
                                     (builtin "One Step Simplification" (formula "43"))
                                    (rule "expand_inInt" (formula "43") (term "1,0,0,1,0"))
                                    (rule "replace_int_MIN" (formula "43") (term "0,1,1,0,0,1,0"))
                                    (rule "replace_int_MAX" (formula "43") (term "1,0,1,0,0,1,0"))
                                    (rule "inEqSimp_ltToLeq" (formula "43") (term "1,0,0,0,1,0"))
                                    (rule "polySimp_mulComm0" (formula "43") (term "1,0,0,1,0,0,0,1,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "43") (term "0,0,0,0,1,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "43") (term "1,1,0,0,1,0"))
                                    (rule "applyEq" (formula "43") (term "0,1,0,0,1,0,0,0,1,0") (ifseqformula "39"))
                                    (rule "polySimp_mulLiterals" (formula "43") (term "1,0,0,1,0,0,0,1,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "43") (term "1,0,0,0,1,0"))
                                    (rule "polySimp_mulComm0" (formula "43") (term "1,1,0,0,0,1,0"))
                                    (rule "polySimp_rightDist" (formula "43") (term "1,1,0,0,0,1,0"))
                                    (rule "mul_literals" (formula "43") (term "0,1,1,0,0,0,1,0"))
                                    (rule "polySimp_mulLiterals" (formula "43") (term "1,1,1,0,0,0,1,0"))
                                    (rule "nnf_imp2or" (formula "46") (term "1,1,0"))
                                    (rule "inEqSimp_notGeq" (formula "46") (term "0,1,1,0"))
                                    (rule "mul_literals" (formula "46") (term "1,0,0,0,1,1,0"))
                                    (rule "add_literals" (formula "46") (term "0,0,0,1,1,0"))
                                    (rule "add_zero_left" (formula "46") (term "0,0,1,1,0"))
                                    (rule "nnf_imp2or" (formula "45") (term "0,1,0"))
                                    (rule "commute_or_2" (formula "13") (term "0,0"))
                                    (rule "nnf_notAnd" (formula "60") (term "0,0,1,0"))
                                    (rule "commute_or" (formula "28") (term "1,0,0"))
                                    (rule "arrayLengthIsAShort" (formula "27") (term "0"))
                                    (rule "expand_inShort" (formula "27"))
                                    (rule "replace_short_MAX" (formula "27") (term "1,0"))
                                    (rule "replace_short_MIN" (formula "27") (term "0,1"))
                                    (rule "andLeft" (formula "27"))
                                    (rule "inEqSimp_commuteLeq" (formula "28"))
                                    (rule "applyEq" (formula "27") (term "0") (ifseqformula "29"))
                                    (rule "leq_literals" (formula "27"))
                                    (rule "true_left" (formula "27"))
                                    (rule "applyEq" (formula "27") (term "0") (ifseqformula "28"))
                                    (rule "qeq_literals" (formula "27"))
                                    (rule "true_left" (formula "27"))
                                    (rule "arrayLengthNotNegative" (formula "27") (term "0"))
                                    (rule "applyEq" (formula "27") (term "0") (ifseqformula "28"))
                                    (rule "qeq_literals" (formula "27"))
                                    (rule "true_left" (formula "27"))
                                    (rule "arrayLengthIsAShort" (formula "26") (term "0"))
                                    (rule "expand_inShort" (formula "26"))
                                    (rule "replace_short_MAX" (formula "26") (term "1,0"))
                                    (rule "replace_short_MIN" (formula "26") (term "0,1"))
                                    (rule "andLeft" (formula "26"))
                                    (rule "inEqSimp_commuteLeq" (formula "27"))
                                    (rule "applyEq" (formula "26") (term "0") (ifseqformula "28"))
                                    (rule "leq_literals" (formula "26"))
                                    (rule "closeFalse" (formula "26"))
                                 )
                                 (branch "self.equal_buckets = TRUE FALSE"
                                    (rule "applyEq" (formula "42") (term "3,0,0,1,1") (ifseqformula "56"))
                                    (rule "applyEq" (formula "58") (term "1,1,1,0,0,0,0,1,0") (ifseqformula "56"))
                                    (rule "applyEq" (formula "59") (term "1,0,2,0") (ifseqformula "56"))
                                    (rule "eqSymm" (formula "59"))
                                    (rule "applyEq" (formula "58") (term "1,1,0,0,0") (ifseqformula "56"))
                                    (rule "applyEq" (formula "59") (term "1,0,2,0") (ifseqformula "56"))
                                    (rule "eqSymm" (formula "59"))
                                    (rule "Definition_axiom_for_isClassifiedBlock_in_de_wiesler_Classifier" (formula "43") (term "0,1,0") (inst "bucket=bucket"))
                                     (builtin "One Step Simplification" (formula "43"))
                                    (rule "expand_inInt" (formula "43") (term "1,0,0,1,0"))
                                    (rule "replace_int_MAX" (formula "43") (term "1,0,1,0,0,1,0"))
                                    (rule "replace_int_MIN" (formula "43") (term "0,1,1,0,0,1,0"))
                                    (rule "inEqSimp_ltToLeq" (formula "43") (term "1,0,0,0,1,0"))
                                    (rule "polySimp_mulComm0" (formula "43") (term "1,0,0,1,0,0,0,1,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "43") (term "0,0,0,0,1,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "43") (term "1,1,0,0,1,0"))
                                    (rule "applyEq" (formula "43") (term "0,1,0,0,1,0,0,0,1,0") (ifseqformula "39"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "43") (term "1,0,0,0,1,0"))
                                    (rule "polySimp_mulComm0" (formula "43") (term "1,1,0,0,0,1,0"))
                                    (rule "polySimp_rightDist" (formula "43") (term "1,1,0,0,0,1,0"))
                                    (rule "mul_literals" (formula "43") (term "0,1,1,0,0,0,1,0"))
                                    (rule "polySimp_mulLiterals" (formula "43") (term "1,1,1,0,0,0,1,0"))
                                    (rule "polySimp_elimOne" (formula "43") (term "1,1,1,0,0,0,1,0"))
                                    (rule "nnf_imp2or" (formula "46") (term "1,1,0"))
                                    (rule "inEqSimp_notGeq" (formula "46") (term "0,1,1,0"))
                                    (rule "mul_literals" (formula "46") (term "1,0,0,0,1,1,0"))
                                    (rule "add_literals" (formula "46") (term "0,0,0,1,1,0"))
                                    (rule "add_zero_left" (formula "46") (term "0,0,1,1,0"))
                                    (rule "nnf_imp2or" (formula "45") (term "0,1,0"))
                                    (rule "commute_or_2" (formula "13") (term "0,0"))
                                    (rule "nnf_notAnd" (formula "58") (term "0,0,1,0"))
                                    (rule "commute_or_2" (formula "28") (term "0,0"))
                                    (rule "nnf_notAnd" (formula "45") (term "0,0,1,0"))
                                    (rule "arrayLengthNotNegative" (formula "27") (term "0"))
                                    (rule "applyEq" (formula "27") (term "0") (ifseqformula "28"))
                                    (rule "qeq_literals" (formula "27"))
                                    (rule "true_left" (formula "27"))
                                    (rule "arrayLengthIsAShort" (formula "27") (term "0"))
                                    (rule "expand_inShort" (formula "27"))
                                    (rule "replace_short_MIN" (formula "27") (term "0,1"))
                                    (rule "replace_short_MAX" (formula "27") (term "1,0"))
                                    (rule "andLeft" (formula "27"))
                                    (rule "inEqSimp_commuteLeq" (formula "28"))
                                    (rule "applyEq" (formula "28") (term "0") (ifseqformula "29"))
                                    (rule "qeq_literals" (formula "28"))
                                    (rule "true_left" (formula "28"))
                                    (rule "applyEq" (formula "27") (term "0") (ifseqformula "28"))
                                    (rule "leq_literals" (formula "27"))
                                    (rule "true_left" (formula "27"))
                                    (rule "arrayLengthIsAShort" (formula "26") (term "0"))
                                    (rule "expand_inShort" (formula "26"))
                                    (rule "replace_short_MIN" (formula "26") (term "0,1"))
                                    (rule "replace_short_MAX" (formula "26") (term "1,0"))
                                    (rule "andLeft" (formula "26"))
                                    (rule "inEqSimp_commuteLeq" (formula "27"))
                                    (rule "applyEq" (formula "26") (term "0") (ifseqformula "28"))
                                    (rule "leq_literals" (formula "26"))
                                    (rule "closeFalse" (formula "26"))
                                 )
                              )
                              (branch "j_0 >= 1 FALSE"
                                 (rule "applyEqReverse" (formula "11") (term "1,1,1") (ifseqformula "10"))
                                 (rule "hideAuxiliaryEq" (formula "10"))
                                 (rule "replace_known_right" (formula "10") (term "0") (ifseqformula "68"))
                                  (builtin "One Step Simplification" (formula "10"))
                                 (rule "true_left" (formula "10"))
                                 (rule "inEqSimp_geqRight" (formula "67"))
                                 (rule "mul_literals" (formula "1") (term "1,0,0"))
                                 (rule "add_literals" (formula "1") (term "0,0"))
                                 (rule "add_zero_left" (formula "1") (term "0"))
                                 (rule "inEqSimp_subsumption0" (formula "8") (ifseqformula "1"))
                                 (rule "leq_literals" (formula "8") (term "0"))
                                  (builtin "One Step Simplification" (formula "8"))
                                 (rule "true_left" (formula "8"))
                                 (rule "inEqSimp_antiSymm" (formula "9") (ifseqformula "1"))
                                 (rule "applyEq" (formula "1") (term "0") (ifseqformula "9"))
                                 (rule "leq_literals" (formula "1"))
                                 (rule "true_left" (formula "1"))
                                 (rule "applyEqRigid" (formula "61") (term "0,2,0") (ifseqformula "8"))
                                 (rule "applyEq" (formula "9") (term "0") (ifseqformula "8"))
                                 (rule "qeq_literals" (formula "9"))
                                 (rule "true_left" (formula "9"))
                                 (rule "applyEq" (formula "9") (term "1,0") (ifseqformula "8"))
                                 (rule "bsum_lower_equals_upper" (formula "9") (term "0"))
                                 (rule "eqSymm" (formula "9"))
                                 (rule "applyEq" (formula "11") (term "1,1,1,0,0") (ifseqformula "8"))
                                 (rule "add_zero_right" (formula "11") (term "1,1,0,0"))
                                 (rule "applyEqRigid" (formula "63") (term "0,2,0") (ifseqformula "8"))
                                 (rule "applyEq" (formula "12") (term "1,1,0,0,0") (ifseqformula "8"))
                                 (rule "applyEq" (formula "6") (term "1,1") (ifseqformula "8"))
                                 (rule "add_zero_right" (formula "6") (term "1"))
                                 (rule "applyEqRigid" (formula "10") (term "1,1,1,0,0,0,0") (ifseqformula "8"))
                                 (rule "add_zero_right" (formula "10") (term "1,1,0,0,0,0"))
                                 (rule "applyEq" (formula "7") (term "1,1") (ifseqformula "8"))
                                 (rule "add_zero_right" (formula "7") (term "1"))
                                 (rule "applyEq" (formula "12") (term "1,0,1,0") (ifseqformula "9"))
                                 (rule "applyEqRigid" (formula "12") (term "1,1,0,0,1,0") (ifseqformula "8"))
                                 (rule "add_zero_right" (formula "12") (term "1,0,0,1,0"))
                                 (rule "applyEq" (formula "60") (term "5,1") (ifseqformula "8"))
                                 (rule "applyEq" (formula "1") (term "1,0,2,0") (ifseqformula "8"))
                                 (rule "inEqSimp_subsumption1" (formula "6") (ifseqformula "50"))
                                 (rule "leq_literals" (formula "6") (term "0"))
                                  (builtin "One Step Simplification" (formula "6"))
                                 (rule "true_left" (formula "6"))
                                 (rule "inEqSimp_subsumption1" (formula "6") (ifseqformula "50"))
                                 (rule "leq_literals" (formula "6") (term "0"))
                                  (builtin "One Step Simplification" (formula "6"))
                                 (rule "true_left" (formula "6"))
                                 (rule "inEqSimp_or_subsumption3" (formula "10") (term "0,0"))
                                 (rule "qeq_literals" (formula "10") (term "0,1,0,0"))
                                  (builtin "One Step Simplification" (formula "10"))
                                 (rule "inEqSimp_or_tautInEq0" (formula "10") (term "0,0"))
                                 (rule "add_zero_right" (formula "10") (term "1,1,0,0"))
                                 (rule "qeq_literals" (formula "10") (term "1,0,0"))
                                  (builtin "One Step Simplification" (formula "10"))
                                 (rule "true_left" (formula "10"))
                                 (rule "Contract_axiom_for_countClassOfSliceEq_in_Classifier" (formula "9") (term "1,1,0"))
                                 (rule "replace_known_left" (formula "9") (term "1,0,0") (ifseqformula "13"))
                                  (builtin "One Step Simplification" (formula "9") (ifInst ""  (formula "86")) (ifInst ""  (formula "12")) (ifInst ""  (formula "83")))
                                 (rule "Definition_axiom_for_countClassOfSliceEq_in_de_wiesler_Classifier" (formula "10") (term "1,1,0") (inst "i=i"))
                                 (rule "eqSymm" (formula "10") (term "1,0"))
                                 (rule "nnf_imp2or" (formula "62") (term "0"))
                                 (rule "nnf_notAnd" (formula "41") (term "0,0"))
                                 (rule "nnf_imp2or" (formula "40") (term "0"))
                                 (rule "nnf_imp2or" (formula "35") (term "0"))
                                 (rule "Class_invariant_axiom_for_de_wiesler_Tree" (formula "55"))
                                 (rule "andLeft" (formula "55"))
                                 (rule "notLeft" (formula "56"))
                                 (rule "notLeft" (formula "55"))
                                 (rule "applyEq" (formula "63") (term "0") (ifseqformula "52"))
                                 (rule "Contract_axiom_for_isSortedSliceTransitive_in_Functions" (formula "53") (term "0"))
                                 (rule "replace_known_right" (formula "53") (term "0,0,0") (ifseqformula "68"))
                                  (builtin "One Step Simplification" (formula "53") (ifInst ""  (formula "12")) (ifInst ""  (formula "54")))
                                 (rule "Definition_axiom_for_isSortedSliceTransitive_in_de_wiesler_Functions" (formula "54") (term "0") (inst "i=i") (inst "j=j_1"))
                                  (builtin "One Step Simplification" (formula "54"))
                                 (rule "expand_inInt" (formula "54") (term "1,0,0"))
                                 (rule "expand_inInt" (formula "54") (term "1,0,0,1,0"))
                                 (rule "replace_int_MAX" (formula "54") (term "1,0,1,0,0"))
                                 (rule "replace_int_MIN" (formula "54") (term "0,1,1,0,0"))
                                 (rule "replace_int_MAX" (formula "54") (term "1,0,1,0,0,1,0"))
                                 (rule "replace_int_MIN" (formula "54") (term "0,1,1,0,0,1,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "54") (term "1,0,0,0,1,0"))
                                 (rule "polySimp_mulComm0" (formula "54") (term "1,0,0,1,0,0,0,1,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "54") (term "1,0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "54") (term "1,0,0,1,0,0,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "54") (term "0,0,0,0,1,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "54") (term "0,0,0,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "54") (term "1,0,1,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "54") (term "1,1,0,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "54") (term "1,1,0,0,1,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "54") (term "1,0,0,0,1,0"))
                                 (rule "polySimp_mulComm0" (formula "54") (term "1,1,0,0,0,1,0"))
                                 (rule "polySimp_rightDist" (formula "54") (term "1,1,0,0,0,1,0"))
                                 (rule "mul_literals" (formula "54") (term "0,1,1,0,0,0,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "54") (term "1,1,1,0,0,0,1,0"))
                                 (rule "polySimp_elimOne" (formula "54") (term "1,1,1,0,0,0,1,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "54") (term "1,0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "54") (term "1,1,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "54") (term "1,1,0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "54") (term "1,1,1,0,0,0"))
                                 (rule "mul_literals" (formula "54") (term "0,1,1,0,0,0"))
                                 (rule "polySimp_elimOne" (formula "54") (term "1,1,1,0,0,0"))
                                 (rule "nnf_imp2or" (formula "38") (term "0"))
                                 (rule "nnf_notAnd" (formula "23") (term "0,0"))
                                 (rule "nnf_notAnd" (formula "8") (term "0,0"))
                                 (rule "nnf_notAnd" (formula "62") (term "0,0"))
                                 (rule "nnf_notAnd" (formula "40") (term "0,0"))
                                 (rule "nnf_notAnd" (formula "35") (term "0,0"))
                                 (rule "nnf_notAnd" (formula "41") (term "0,0,0"))
                                 (rule "inEqSimp_notGeq" (formula "41") (term "0,0,0,0"))
                                 (rule "mul_literals" (formula "41") (term "1,0,0,0,0,0,0"))
                                 (rule "add_zero_right" (formula "41") (term "0,0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "41") (term "0,0,0,0"))
                                 (rule "mul_literals" (formula "41") (term "1,0,0,0,0"))
                                 (rule "inEqSimp_notLeq" (formula "41") (term "1,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "41") (term "1,0,0,1,0,0,0"))
                                 (rule "mul_literals" (formula "41") (term "0,1,0,0,1,0,0,0"))
                                 (rule "polySimp_addAssoc" (formula "41") (term "0,0,1,0,0,0"))
                                 (rule "add_literals" (formula "41") (term "0,0,0,1,0,0,0"))
                                 (rule "add_zero_left" (formula "41") (term "0,0,1,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "41") (term "1,0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "41") (term "1,1,0,0,0"))
                                 (rule "polySimp_elimOne" (formula "41") (term "1,1,0,0,0"))
                                 (rule "nnf_notAnd" (formula "41") (term "1,0,0"))
                                 (rule "inEqSimp_notGeq" (formula "41") (term "1,1,0,0"))
                                 (rule "mul_literals" (formula "41") (term "1,0,0,1,1,0,0"))
                                 (rule "add_literals" (formula "41") (term "0,0,1,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "41") (term "1,1,0,0"))
                                 (rule "mul_literals" (formula "41") (term "1,1,1,0,0"))
                                 (rule "inEqSimp_notLeq" (formula "41") (term "0,1,0,0"))
                                 (rule "mul_literals" (formula "41") (term "1,0,0,0,1,0,0"))
                                 (rule "add_literals" (formula "41") (term "0,0,0,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "41") (term "0,1,0,0"))
                                 (rule "mul_literals" (formula "41") (term "1,0,1,0,0"))
                                 (rule "nnf_imp2or" (formula "54") (term "0"))
                                 (rule "jdiv_axiom" (formula "46") (term "0"))
                                 (rule "polySimp_mulLiterals" (formula "46") (term "0,0,2,1"))
                                 (rule "eqSymm" (formula "46"))
                                 (rule "applyEqRigid" (formula "46") (term "1") (ifseqformula "47"))
                                 (rule "inEqSimp_subsumption6" (formula "46") (term "0,0") (ifseqformula "43"))
                                 (rule "mul_literals" (formula "46") (term "1,1,0,0,0"))
                                 (rule "greater_literals" (formula "46") (term "0,0,0,0"))
                                  (builtin "One Step Simplification" (formula "46"))
                                 (rule "leq_literals" (formula "46") (term "0,0,0"))
                                  (builtin "One Step Simplification" (formula "46"))
                                 (rule "polyDiv_pullOut" (formula "46") (term "0") (inst "polyDivCoeff=l_0"))
                                 (rule "equal_literals" (formula "46") (term "0,0"))
                                  (builtin "One Step Simplification" (formula "46"))
                                 (rule "polySimp_mulLiterals" (formula "46") (term "1,0,0,0"))
                                 (rule "polySimp_pullOutFactor0" (formula "46") (term "0,0,0"))
                                 (rule "add_literals" (formula "46") (term "1,0,0,0"))
                                 (rule "times_zero_1" (formula "46") (term "0,0,0"))
                                 (rule "div_literals" (formula "46") (term "0,0"))
                                 (rule "add_zero_left" (formula "46") (term "0"))
                                  (builtin "One Step Simplification" (formula "46"))
                                 (rule "true_left" (formula "46"))
                                 (rule "nnf_notAnd" (formula "38") (term "0,0"))
                                 (rule "nnf_notAnd" (formula "23") (term "0,0,0"))
                                 (rule "inEqSimp_notGeq" (formula "23") (term "0,0,0,0"))
                                 (rule "times_zero_1" (formula "23") (term "1,0,0,0,0,0,0"))
                                 (rule "add_literals" (formula "23") (term "0,0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "0,0,0,0"))
                                 (rule "mul_literals" (formula "23") (term "1,0,0,0,0"))
                                 (rule "inEqSimp_notLeq" (formula "23") (term "1,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "23") (term "1,0,0,1,0,0,0"))
                                 (rule "mul_literals" (formula "23") (term "0,1,0,0,1,0,0,0"))
                                 (rule "polySimp_addAssoc" (formula "23") (term "0,0,1,0,0,0"))
                                 (rule "add_literals" (formula "23") (term "0,0,0,1,0,0,0"))
                                 (rule "add_zero_left" (formula "23") (term "0,0,1,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "23") (term "1,0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "23") (term "1,1,0,0,0"))
                                 (rule "polySimp_elimOne" (formula "23") (term "1,1,0,0,0"))
                                 (rule "nnf_notAnd" (formula "23") (term "1,0,0"))
                                 (rule "inEqSimp_notLeq" (formula "23") (term "0,1,0,0"))
                                 (rule "mul_literals" (formula "23") (term "1,0,0,0,1,0,0"))
                                 (rule "add_literals" (formula "23") (term "0,0,0,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "23") (term "0,1,0,0"))
                                 (rule "mul_literals" (formula "23") (term "1,0,1,0,0"))
                                 (rule "inEqSimp_notGeq" (formula "23") (term "1,1,0,0"))
                                 (rule "mul_literals" (formula "23") (term "1,0,0,1,1,0,0"))
                                 (rule "add_literals" (formula "23") (term "0,0,1,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "1,1,0,0"))
                                 (rule "mul_literals" (formula "23") (term "1,1,1,0,0"))
                                 (rule "nnf_notAnd" (formula "8") (term "1,0,0"))
                                 (rule "inEqSimp_notLeq" (formula "8") (term "0,1,0,0"))
                                 (rule "mul_literals" (formula "8") (term "1,0,0,0,1,0,0"))
                                 (rule "add_literals" (formula "8") (term "0,0,0,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "8") (term "0,1,0,0"))
                                 (rule "mul_literals" (formula "8") (term "1,0,1,0,0"))
                                 (rule "inEqSimp_notGeq" (formula "8") (term "1,1,0,0"))
                                 (rule "mul_literals" (formula "8") (term "1,0,0,1,1,0,0"))
                                 (rule "add_literals" (formula "8") (term "0,0,1,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "1,1,0,0"))
                                 (rule "mul_literals" (formula "8") (term "1,1,1,0,0"))
                                 (rule "nnf_notAnd" (formula "8") (term "0,0,0"))
                                 (rule "inEqSimp_notGeq" (formula "8") (term "0,0,0,0"))
                                 (rule "mul_literals" (formula "8") (term "1,0,0,0,0,0,0"))
                                 (rule "add_zero_right" (formula "8") (term "0,0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "0,0,0,0"))
                                 (rule "mul_literals" (formula "8") (term "1,0,0,0,0"))
                                 (rule "inEqSimp_notLeq" (formula "8") (term "1,0,0,0"))
                                 (rule "mul_literals" (formula "8") (term "1,0,0,1,0,0,0"))
                                 (rule "add_literals" (formula "8") (term "0,0,1,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "8") (term "1,0,0,0"))
                                 (rule "mul_literals" (formula "8") (term "1,1,0,0,0"))
                                 (rule "inEqSimp_or_tautInEq0" (formula "8") (term "0,0,0"))
                                 (rule "add_literals" (formula "8") (term "1,1,0,0,0"))
                                 (rule "qeq_literals" (formula "8") (term "1,0,0,0"))
                                  (builtin "One Step Simplification" (formula "8"))
                                 (rule "true_left" (formula "8"))
                                 (rule "nnf_notAnd" (formula "61") (term "1,0,0"))
                                 (rule "inEqSimp_notGeq" (formula "61") (term "1,1,0,0"))
                                 (rule "mul_literals" (formula "61") (term "1,0,0,1,1,0,0"))
                                 (rule "add_literals" (formula "61") (term "0,0,1,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "61") (term "1,1,0,0"))
                                 (rule "mul_literals" (formula "61") (term "1,1,1,0,0"))
                                 (rule "inEqSimp_notLeq" (formula "61") (term "0,1,0,0"))
                                 (rule "mul_literals" (formula "61") (term "1,0,0,0,1,0,0"))
                                 (rule "add_literals" (formula "61") (term "0,0,0,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "61") (term "0,1,0,0"))
                                 (rule "mul_literals" (formula "61") (term "1,0,1,0,0"))
                                 (rule "nnf_notAnd" (formula "61") (term "0,0,0"))
                                 (rule "inEqSimp_notLeq" (formula "61") (term "1,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "61") (term "1,0,0,1,0,0,0"))
                                 (rule "mul_literals" (formula "61") (term "0,1,0,0,1,0,0,0"))
                                 (rule "polySimp_addAssoc" (formula "61") (term "0,0,1,0,0,0"))
                                 (rule "add_literals" (formula "61") (term "0,0,0,1,0,0,0"))
                                 (rule "add_zero_left" (formula "61") (term "0,0,1,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "61") (term "1,0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "61") (term "1,1,0,0,0"))
                                 (rule "polySimp_elimOne" (formula "61") (term "1,1,0,0,0"))
                                 (rule "inEqSimp_notGeq" (formula "61") (term "0,0,0,0"))
                                 (rule "times_zero_1" (formula "61") (term "1,0,0,0,0,0,0"))
                                 (rule "add_zero_right" (formula "61") (term "0,0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "61") (term "0,0,0,0"))
                                 (rule "mul_literals" (formula "61") (term "1,0,0,0,0"))
                                 (rule "nnf_notAnd" (formula "39") (term "1,0,0"))
                                 (rule "inEqSimp_notLeq" (formula "39") (term "0,1,0,0"))
                                 (rule "mul_literals" (formula "39") (term "1,0,0,0,1,0,0"))
                                 (rule "add_literals" (formula "39") (term "0,0,0,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "39") (term "0,1,0,0"))
                                 (rule "mul_literals" (formula "39") (term "1,0,1,0,0"))
                                 (rule "inEqSimp_notGeq" (formula "39") (term "1,1,0,0"))
                                 (rule "mul_literals" (formula "39") (term "1,0,0,1,1,0,0"))
                                 (rule "add_literals" (formula "39") (term "0,0,1,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "39") (term "1,1,0,0"))
                                 (rule "mul_literals" (formula "39") (term "1,1,1,0,0"))
                                 (rule "nnf_notAnd" (formula "39") (term "0,0,0"))
                                 (rule "inEqSimp_notGeq" (formula "39") (term "0,0,0,0"))
                                 (rule "mul_literals" (formula "39") (term "1,0,0,0,0,0,0"))
                                 (rule "add_zero_right" (formula "39") (term "0,0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "39") (term "0,0,0,0"))
                                 (rule "mul_literals" (formula "39") (term "1,0,0,0,0"))
                                 (rule "inEqSimp_notLeq" (formula "39") (term "1,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "39") (term "1,0,0,1,0,0,0"))
                                 (rule "mul_literals" (formula "39") (term "0,1,0,0,1,0,0,0"))
                                 (rule "polySimp_addAssoc" (formula "39") (term "0,0,1,0,0,0"))
                                 (rule "add_literals" (formula "39") (term "0,0,0,1,0,0,0"))
                                 (rule "add_zero_left" (formula "39") (term "0,0,1,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "39") (term "1,0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "39") (term "1,1,0,0,0"))
                                 (rule "polySimp_elimOne" (formula "39") (term "1,1,0,0,0"))
                                 (rule "nnf_notAnd" (formula "34") (term "1,0,0"))
                                 (rule "inEqSimp_notLeq" (formula "34") (term "0,1,0,0"))
                                 (rule "mul_literals" (formula "34") (term "1,0,0,0,1,0,0"))
                                 (rule "add_literals" (formula "34") (term "0,0,0,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "34") (term "0,1,0,0"))
                                 (rule "mul_literals" (formula "34") (term "1,0,1,0,0"))
                                 (rule "inEqSimp_notGeq" (formula "34") (term "1,1,0,0"))
                                 (rule "mul_literals" (formula "34") (term "1,0,0,1,1,0,0"))
                                 (rule "add_literals" (formula "34") (term "0,0,1,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "34") (term "1,1,0,0"))
                                 (rule "mul_literals" (formula "34") (term "1,1,1,0,0"))
                                 (rule "nnf_notAnd" (formula "34") (term "0,0,0"))
                                 (rule "inEqSimp_notGeq" (formula "34") (term "0,0,0,0"))
                                 (rule "mul_literals" (formula "34") (term "1,0,0,0,0,0,0"))
                                 (rule "add_zero_right" (formula "34") (term "0,0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "34") (term "0,0,0,0"))
                                 (rule "mul_literals" (formula "34") (term "1,0,0,0,0"))
                                 (rule "inEqSimp_notLeq" (formula "34") (term "1,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "34") (term "1,0,0,1,0,0,0"))
                                 (rule "mul_literals" (formula "34") (term "0,1,0,0,1,0,0,0"))
                                 (rule "polySimp_addAssoc" (formula "34") (term "0,0,1,0,0,0"))
                                 (rule "add_literals" (formula "34") (term "0,0,0,1,0,0,0"))
                                 (rule "add_zero_left" (formula "34") (term "0,0,1,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "34") (term "1,0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "34") (term "1,1,0,0,0"))
                                 (rule "polySimp_elimOne" (formula "34") (term "1,1,0,0,0"))
                                 (rule "Definition_axiom_for_bufferLen_in_de_wiesler_Buffers" (formula "40") (term "0,0,1,0"))
                                 (rule "nnf_notAnd" (formula "53") (term "0,0"))
                                 (rule "Definition_axiom_for_bufferLen_in_de_wiesler_Buffers" (formula "41") (term "2,0"))
                                 (rule "Class_invariant_axiom_for_de_wiesler_Buffers" (formula "38") (term "0,1"))
                                 (rule "replace_known_right" (formula "38") (term "0,0,0,1") (ifseqformula "64"))
                                  (builtin "One Step Simplification" (formula "38") (ifInst ""  (formula "65")))
                                 (rule "nnf_imp2or" (formula "53") (term "0,1,0"))
                                 (rule "nnf_notAnd" (formula "37") (term "1,0,0"))
                                 (rule "inEqSimp_notGeq" (formula "37") (term "1,1,0,0"))
                                 (rule "mul_literals" (formula "37") (term "1,0,0,1,1,0,0"))
                                 (rule "add_literals" (formula "37") (term "0,0,1,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "37") (term "1,1,0,0"))
                                 (rule "mul_literals" (formula "37") (term "1,1,1,0,0"))
                                 (rule "inEqSimp_notLeq" (formula "37") (term "0,1,0,0"))
                                 (rule "mul_literals" (formula "37") (term "1,0,0,0,1,0,0"))
                                 (rule "add_literals" (formula "37") (term "0,0,0,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "37") (term "0,1,0,0"))
                                 (rule "mul_literals" (formula "37") (term "1,0,1,0,0"))
                                 (rule "nnf_notAnd" (formula "37") (term "0,0,0"))
                                 (rule "inEqSimp_notGeq" (formula "37") (term "0,0,0,0"))
                                 (rule "mul_literals" (formula "37") (term "1,0,0,0,0,0,0"))
                                 (rule "add_zero_right" (formula "37") (term "0,0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "37") (term "0,0,0,0"))
                                 (rule "mul_literals" (formula "37") (term "1,0,0,0,0"))
                                 (rule "inEqSimp_notLeq" (formula "37") (term "1,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "37") (term "1,0,0,1,0,0,0"))
                                 (rule "mul_literals" (formula "37") (term "0,1,0,0,1,0,0,0"))
                                 (rule "polySimp_addAssoc" (formula "37") (term "0,0,1,0,0,0"))
                                 (rule "add_literals" (formula "37") (term "0,0,0,1,0,0,0"))
                                 (rule "add_zero_left" (formula "37") (term "0,0,1,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "37") (term "1,0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "37") (term "1,1,0,0,0"))
                                 (rule "polySimp_elimOne" (formula "37") (term "1,1,0,0,0"))
                                 (rule "Free_class_invariant_axiom_for_de_wiesler_Classifier" (formula "36") (term "1,1"))
                                  (builtin "One Step Simplification" (formula "36") (ifInst ""  (formula "51")))
                                 (rule "translateJavaSubInt" (formula "36") (term "0,2,1,1,0,1,1"))
                                 (rule "eqSymm" (formula "36") (term "1,0,0,0,1,1"))
                                 (rule "translateJavaSubInt" (formula "36") (term "0,2,0,1,0,1,1"))
                                 (rule "translateJavaMulInt" (formula "36") (term "1,0,1,0,0,0,1,1"))
                                 (rule "eqSymm" (formula "36") (term "1,0,1,1"))
                                 (rule "polySimp_elimSub" (formula "36") (term "0,2,0,1,0,1,1"))
                                 (rule "mul_literals" (formula "36") (term "1,0,2,0,1,0,1,1"))
                                 (rule "eqSymm" (formula "36") (term "1,0,1,1"))
                                 (rule "polySimp_elimSub" (formula "36") (term "0,2,0,1,0,1,1"))
                                 (rule "mul_literals" (formula "36") (term "1,0,2,0,1,0,1,1"))
                                 (rule "eqSymm" (formula "36") (term "1,0,1,1"))
                                 (rule "polySimp_mulComm0" (formula "36") (term "1,0,1,0,0,0,1,1"))
                                 (rule "polySimp_addComm0" (formula "36") (term "0,2,0,1,0,1,1"))
                                 (rule "eqSymm" (formula "36") (term "1,0,1,1"))
                                 (rule "polySimp_addComm0" (formula "36") (term "0,2,0,1,0,1,1"))
                                 (rule "eqSymm" (formula "36") (term "1,0,1,1"))
                                 (rule "replace_known_left" (formula "36") (term "1,0,1,1") (ifseqformula "54"))
                                  (builtin "One Step Simplification" (formula "36"))
                                 (rule "inEqSimp_commuteLeq" (formula "36") (term "0,0,0,0,1,1"))
                                 (rule "applyEq" (formula "36") (term "0,0,0,0,0,1,1") (ifseqformula "33"))
                                 (rule "replace_known_left" (formula "36") (term "0,0,0,0,1,1") (ifseqformula "48"))
                                  (builtin "One Step Simplification" (formula "36"))
                                 (rule "applyEq" (formula "36") (term "0,0,0,0,1,1") (ifseqformula "33"))
                                 (rule "replace_known_left" (formula "36") (term "0,0,0,1,1") (ifseqformula "49"))
                                  (builtin "One Step Simplification" (formula "36"))
                                 (rule "applyEq" (formula "36") (term "0,0,0,1,1") (ifseqformula "50"))
                                 (rule "eqSymm" (formula "36") (term "0,0,1,1"))
                                 (rule "replace_known_left" (formula "36") (term "0,0,1,1") (ifseqformula "33"))
                                  (builtin "One Step Simplification" (formula "36"))
                                 (rule "commute_or_2" (formula "9") (term "0,0,0"))
                                 (rule "Definition_axiom_for_classOf_in_de_wiesler_Classifier" (formula "1") (term "0,0,2,0"))
                                 (rule "ifthenelse_split" (formula "50") (term "0"))
                                 (branch "self.equal_buckets = TRUE TRUE"
                                    (rule "newSym_eq" (formula "51") (inst "l=l_1") (inst "newSymDef=mul(int::final(buffers,
               de.wiesler.Buffers::$num_buckets),
    Z(0(#)))"))
                                    (rule "times_zero_1" (formula "51") (term "1,1"))
                                    (rule "add_zero_right" (formula "51") (term "1"))
                                    (rule "applyEq" (formula "55") (term "1,1,1,0,0,0,0") (ifseqformula "51"))
                                    (rule "applyEq" (formula "56") (term "1,0,2,0") (ifseqformula "51"))
                                    (rule "eqSymm" (formula "56"))
                                    (rule "applyEq" (formula "36") (term "3,0,0,1,1") (ifseqformula "51"))
                                    (rule "applyEq" (formula "52") (term "0,0") (ifseqformula "51"))
                                    (rule "eqSymm" (formula "52"))
                                    (rule "applyEq" (formula "55") (term "1,1,1,0,0,0,0,1,0") (ifseqformula "51"))
                                    (rule "applyEq" (formula "54") (term "3,0") (ifseqformula "51"))
                                    (rule "applyEq" (formula "49") (term "0") (ifseqformula "52"))
                                    (rule "applyEq" (formula "35") (term "1,0") (ifseqformula "52"))
                                    (rule "applyEq" (formula "63") (term "2,1,0,0,0,1,0") (ifseqformula "52"))
                                    (rule "applyEq" (formula "24") (term "0") (ifseqformula "52"))
                                    (rule "inEqSimp_homoInEq0" (formula "24"))
                                    (rule "polySimp_mulLiterals" (formula "24") (term "1,0"))
                                    (rule "polySimp_addComm1" (formula "24") (term "0"))
                                    (rule "applyEq" (formula "39") (term "1,1,0,0,0") (ifseqformula "52"))
                                    (rule "applyEq" (formula "22") (term "1,1,0,0,0") (ifseqformula "52"))
                                    (rule "applyEq" (formula "56") (term "1,0,2,0") (ifseqformula "51"))
                                    (rule "eqSymm" (formula "56"))
                                    (rule "applyEq" (formula "63") (term "1,1,0,0,0") (ifseqformula "52"))
                                    (rule "applyEq" (formula "41") (term "1,0") (ifseqformula "52"))
                                    (rule "applyEq" (formula "9") (term "1,1,0,0,0") (ifseqformula "52"))
                                    (rule "applyEq" (formula "40") (term "1,1,0,0,0") (ifseqformula "52"))
                                    (rule "applyEq" (formula "34") (term "1,1,0,0,0") (ifseqformula "52"))
                                    (rule "applyEq" (formula "48") (term "0") (ifseqformula "52"))
                                    (rule "applyEq" (formula "63") (term "2,1,0,0,1,1,0") (ifseqformula "52"))
                                    (rule "applyEq" (formula "33") (term "1") (ifseqformula "52"))
                                    (rule "applyEq" (formula "9") (term "2,1,0,1,1,0") (ifseqformula "52"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "24"))
                                    (rule "polySimp_mulComm0" (formula "24") (term "1"))
                                    (rule "polySimp_rightDist" (formula "24") (term "1"))
                                    (rule "polySimp_mulLiterals" (formula "24") (term "1,1"))
                                    (rule "mul_literals" (formula "24") (term "0,1"))
                                    (rule "elimGcdGeq_antec" (formula "48") (inst "elimGcdRightDiv=Z(1(#))") (inst "elimGcdLeftDiv=l_1") (inst "elimGcd=Z(2(#))"))
                                    (rule "polySimp_mulLiterals" (formula "48") (term "1,0,0,0,0,1,0"))
                                    (rule "leq_literals" (formula "48") (term "0,0"))
                                     (builtin "One Step Simplification" (formula "48"))
                                    (rule "mul_literals" (formula "48") (term "1,0,0,0,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "48") (term "1,0,0"))
                                    (rule "polySimp_addLiterals" (formula "48") (term "0,0,0,0"))
                                    (rule "add_zero_right" (formula "48") (term "0,0,0,0"))
                                    (rule "polySimp_pullOutFactor0b" (formula "48") (term "0,0"))
                                    (rule "add_literals" (formula "48") (term "1,1,0,0"))
                                    (rule "times_zero_1" (formula "48") (term "1,0,0"))
                                    (rule "add_zero_right" (formula "48") (term "0,0"))
                                    (rule "leq_literals" (formula "48") (term "0"))
                                     (builtin "One Step Simplification" (formula "48"))
                                    (rule "elimGcdLeq_antec" (formula "49") (inst "elimGcdRightDiv=Z(4(6(#)))") (inst "elimGcdLeftDiv=l_1") (inst "elimGcd=Z(2(#))"))
                                    (rule "polySimp_mulLiterals" (formula "49") (term "1,0,0,0,0,1,0"))
                                    (rule "polySimp_mulLiterals" (formula "49") (term "1,0,1,0"))
                                    (rule "leq_literals" (formula "49") (term "0,0"))
                                     (builtin "One Step Simplification" (formula "49"))
                                    (rule "neg_literal" (formula "49") (term "0,0,0,0,0,0"))
                                    (rule "mul_literals" (formula "49") (term "1,0,0,0,0,0"))
                                    (rule "polySimp_addLiterals" (formula "49") (term "0,0,0,0"))
                                    (rule "add_zero_right" (formula "49") (term "0,0,0,0"))
                                    (rule "polySimp_pullOutFactor0b" (formula "49") (term "0,0"))
                                    (rule "add_literals" (formula "49") (term "1,1,0,0"))
                                    (rule "times_zero_1" (formula "49") (term "1,0,0"))
                                    (rule "add_zero_right" (formula "49") (term "0,0"))
                                    (rule "qeq_literals" (formula "49") (term "0"))
                                     (builtin "One Step Simplification" (formula "49"))
                                    (rule "inEqSimp_exactShadow3" (formula "24") (ifseqformula "23"))
                                    (rule "polySimp_rightDist" (formula "24") (term "0,0"))
                                    (rule "polySimp_mulLiterals" (formula "24") (term "1,0,0"))
                                    (rule "mul_literals" (formula "24") (term "0,0,0"))
                                    (rule "polySimp_addComm1" (formula "24") (term "0"))
                                    (rule "add_literals" (formula "24") (term "0,0"))
                                    (rule "inEqSimp_sepNegMonomial1" (formula "24"))
                                    (rule "polySimp_mulLiterals" (formula "24") (term "0"))
                                    (rule "inEqSimp_subsumption4" (formula "24") (ifseqformula "50"))
                                    (rule "greater_literals" (formula "24") (term "0,0"))
                                     (builtin "One Step Simplification" (formula "24"))
                                    (rule "mul_literals" (formula "24") (term "0,0"))
                                    (rule "leq_literals" (formula "24") (term "0"))
                                     (builtin "One Step Simplification" (formula "24"))
                                    (rule "true_left" (formula "24"))
                                    (rule "Definition_axiom_for_countClassOfSliceEq_in_de_wiesler_Classifier" (formula "59") (term "1") (inst "i=i"))
                                    (rule "eqSymm" (formula "59"))
                                    (rule "Free_class_invariant_axiom_for_de_wiesler_Classifier" (formula "8") (term "1,1"))
                                     (builtin "One Step Simplification" (formula "8") (ifInst ""  (formula "50")) (ifInst ""  (formula "53")))
                                    (rule "translateJavaMulInt" (formula "8") (term "1,1,0,0,0,1,1"))
                                    (rule "translateJavaSubInt" (formula "8") (term "0,2,1,1,0,1,1"))
                                    (rule "translateJavaSubInt" (formula "8") (term "0,2,0,1,0,1,1"))
                                    (rule "eqSymm" (formula "8") (term "1,0,1,1"))
                                    (rule "polySimp_elimSub" (formula "8") (term "0,2,1,1,0,1,1"))
                                    (rule "mul_literals" (formula "8") (term "1,0,2,1,1,0,1,1"))
                                    (rule "polySimp_elimSub" (formula "8") (term "0,2,0,1,0,1,1"))
                                    (rule "mul_literals" (formula "8") (term "1,0,2,0,1,0,1,1"))
                                    (rule "polySimp_mulComm0" (formula "8") (term "1,1,0,0,0,1,1"))
                                    (rule "eqSymm" (formula "8") (term "1,0,0,0,1,1"))
                                    (rule "polySimp_addComm0" (formula "8") (term "0,2,1,1,0,1,1"))
                                    (rule "polySimp_addComm0" (formula "8") (term "0,2,0,1,0,1,1"))
                                    (rule "inEqSimp_commuteLeq" (formula "8") (term "0,0,0,0,0,1,1"))
                                    (rule "applyEq" (formula "8") (term "0,0,1,0,0,0,1,1") (ifseqformula "51"))
                                    (rule "eqSymm" (formula "8") (term "1,0,0,0,1,1"))
                                    (rule "replace_known_left" (formula "8") (term "1,0,0,0,1,1") (ifseqformula "33"))
                                     (builtin "One Step Simplification" (formula "8"))
                                    (rule "applyEq" (formula "8") (term "1,0,2,0,1,0,1,1") (ifseqformula "51"))
                                    (rule "eqSymm" (formula "8") (term "1,0,1,1"))
                                    (rule "applyEq" (formula "8") (term "0,0,0,0,0,1,1") (ifseqformula "33"))
                                    (rule "applyEq" (formula "8") (term "0,1,0,0,0,1,1") (ifseqformula "33"))
                                    (rule "applyEq" (formula "8") (term "3,0,1,0,0,1,1") (ifseqformula "51"))
                                    (rule "applyEq" (formula "8") (term "1,0,2,0,1,0,1,1") (ifseqformula "51"))
                                    (rule "eqSymm" (formula "8") (term "1,0,1,1"))
                                    (rule "replace_known_left" (formula "8") (term "1,0,1,1") (ifseqformula "56"))
                                     (builtin "One Step Simplification" (formula "8"))
                                    (rule "inEqSimp_subsumption6" (formula "8") (term "0,0,0,1,1") (ifseqformula "48"))
                                    (rule "greater_literals" (formula "8") (term "0,0,0,0,0,1,1"))
                                     (builtin "One Step Simplification" (formula "8"))
                                    (rule "mul_literals" (formula "8") (term "1,0,0,0,0,1,1"))
                                    (rule "leq_literals" (formula "8") (term "0,0,0,0,1,1"))
                                     (builtin "One Step Simplification" (formula "8"))
                                    (rule "inEqSimp_subsumption4" (formula "8") (term "0,0,1,1") (ifseqformula "49"))
                                    (rule "greater_literals" (formula "8") (term "0,0,0,0,1,1"))
                                     (builtin "One Step Simplification" (formula "8"))
                                    (rule "mul_literals" (formula "8") (term "0,0,0,0,1,1"))
                                    (rule "leq_literals" (formula "8") (term "0,0,0,1,1"))
                                     (builtin "One Step Simplification" (formula "8"))
                                    (rule "Definition_axiom_for_classOf_in_de_wiesler_Classifier" (formula "9") (term "0,0,2,0,1,0"))
                                    (rule "Definition_axiom_for_bufferLen_in_de_wiesler_Buffers" (formula "39") (term "1,4,0,1,0"))
                                    (rule "Contract_axiom_for_countClassOfSliceEq_in_Classifier" (formula "34") (term "1,1,0"))
                                    (rule "replace_known_left" (formula "34") (term "1,0,0") (ifseqformula "12"))
                                     (builtin "One Step Simplification" (formula "34") (ifInst ""  (formula "89")) (ifInst ""  (formula "11")) (ifInst ""  (formula "86")))
                                    (rule "Definition_axiom_for_countClassOfSliceEq_in_de_wiesler_Classifier" (formula "35") (term "1,1,0") (inst "i=i"))
                                    (rule "eqSymm" (formula "35") (term "1,0"))
                                    (rule "nnf_notAnd" (formula "56") (term "1,0,0"))
                                    (rule "inEqSimp_notGeq" (formula "56") (term "1,1,0,0"))
                                    (rule "mul_literals" (formula "56") (term "1,0,0,1,1,0,0"))
                                    (rule "add_literals" (formula "56") (term "0,0,1,1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "56") (term "1,1,0,0"))
                                    (rule "mul_literals" (formula "56") (term "1,1,1,0,0"))
                                    (rule "inEqSimp_notLeq" (formula "56") (term "0,1,0,0"))
                                    (rule "mul_literals" (formula "56") (term "1,0,0,0,1,0,0"))
                                    (rule "add_literals" (formula "56") (term "0,0,0,1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "56") (term "0,1,0,0"))
                                    (rule "mul_literals" (formula "56") (term "1,0,1,0,0"))
                                    (rule "Definition_axiom_for_isClassifiedBlock_in_de_wiesler_Classifier" (formula "38") (term "0,1,0") (inst "bucket=bucket"))
                                     (builtin "One Step Simplification" (formula "38"))
                                    (rule "expand_inInt" (formula "38") (term "1,0,0,1,0"))
                                    (rule "replace_int_MIN" (formula "38") (term "0,1,1,0,0,1,0"))
                                    (rule "replace_int_MAX" (formula "38") (term "1,0,1,0,0,1,0"))
                                    (rule "inEqSimp_ltToLeq" (formula "38") (term "1,0,0,0,1,0"))
                                    (rule "polySimp_mulComm0" (formula "38") (term "1,0,0,1,0,0,0,1,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "38") (term "0,0,0,0,1,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "38") (term "1,1,0,0,1,0"))
                                    (rule "applyEq" (formula "38") (term "0,1,0,0,1,0,0,0,1,0") (ifseqformula "33"))
                                    (rule "polySimp_mulLiterals" (formula "38") (term "1,0,0,1,0,0,0,1,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "38") (term "1,0,0,0,1,0"))
                                    (rule "polySimp_mulComm0" (formula "38") (term "1,1,0,0,0,1,0"))
                                    (rule "polySimp_rightDist" (formula "38") (term "1,1,0,0,0,1,0"))
                                    (rule "polySimp_mulLiterals" (formula "38") (term "1,1,1,0,0,0,1,0"))
                                    (rule "mul_literals" (formula "38") (term "0,1,1,0,0,0,1,0"))
                                    (rule "nnf_notAnd" (formula "56") (term "0,0,0"))
                                    (rule "inEqSimp_notGeq" (formula "56") (term "0,0,0,0"))
                                    (rule "mul_literals" (formula "56") (term "1,0,0,0,0,0,0"))
                                    (rule "add_zero_right" (formula "56") (term "0,0,0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "56") (term "0,0,0,0"))
                                    (rule "mul_literals" (formula "56") (term "1,0,0,0,0"))
                                    (rule "inEqSimp_notLeq" (formula "56") (term "1,0,0,0"))
                                    (rule "polySimp_rightDist" (formula "56") (term "1,0,0,1,0,0,0"))
                                    (rule "mul_literals" (formula "56") (term "0,1,0,0,1,0,0,0"))
                                    (rule "polySimp_addAssoc" (formula "56") (term "0,0,1,0,0,0"))
                                    (rule "add_literals" (formula "56") (term "0,0,0,1,0,0,0"))
                                    (rule "add_zero_left" (formula "56") (term "0,0,1,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "56") (term "1,0,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "56") (term "1,1,0,0,0"))
                                    (rule "polySimp_elimOne" (formula "56") (term "1,1,0,0,0"))
                                    (rule "nnf_notAnd" (formula "56") (term "0,0,1,0"))
                                    (rule "commute_or" (formula "41") (term "1,0,0"))
                                    (rule "arrayLengthNotNegative" (formula "21") (term "0"))
                                    (rule "applyEq" (formula "21") (term "0") (ifseqformula "22"))
                                    (rule "qeq_literals" (formula "21"))
                                    (rule "true_left" (formula "21"))
                                    (rule "arrayLengthIsAShort" (formula "21") (term "0"))
                                    (rule "expand_inShort" (formula "21"))
                                    (rule "replace_short_MAX" (formula "21") (term "1,0"))
                                    (rule "replace_short_MIN" (formula "21") (term "0,1"))
                                    (rule "andLeft" (formula "21"))
                                    (rule "inEqSimp_commuteLeq" (formula "22"))
                                    (rule "applyEq" (formula "22") (term "0") (ifseqformula "23"))
                                    (rule "qeq_literals" (formula "22"))
                                    (rule "true_left" (formula "22"))
                                    (rule "applyEq" (formula "21") (term "0") (ifseqformula "22"))
                                    (rule "leq_literals" (formula "21"))
                                    (rule "true_left" (formula "21"))
                                    (rule "arrayLengthNotNegative" (formula "20") (term "0"))
                                    (rule "applyEq" (formula "20") (term "0") (ifseqformula "21"))
                                    (rule "qeq_literals" (formula "20"))
                                    (rule "true_left" (formula "20"))
                                    (rule "arrayLengthIsAShort" (formula "20") (term "0"))
                                    (rule "expand_inShort" (formula "20"))
                                    (rule "replace_short_MAX" (formula "20") (term "1,0"))
                                    (rule "replace_short_MIN" (formula "20") (term "0,1"))
                                    (rule "andLeft" (formula "20"))
                                    (rule "inEqSimp_commuteLeq" (formula "21"))
                                    (rule "applyEq" (formula "21") (term "0") (ifseqformula "22"))
                                    (rule "qeq_literals" (formula "21"))
                                    (rule "true_left" (formula "21"))
                                    (rule "applyEq" (formula "20") (term "0") (ifseqformula "21"))
                                    (rule "leq_literals" (formula "20"))
                                    (rule "closeFalse" (formula "20"))
                                 )
                                 (branch "self.equal_buckets = TRUE FALSE"
                                    (rule "applyEq" (formula "54") (term "1,0,2,0") (ifseqformula "50"))
                                    (rule "eqSymm" (formula "54"))
                                    (rule "applyEq" (formula "53") (term "1,1,1,0,0,0,0,1,0") (ifseqformula "50"))
                                    (rule "applyEq" (formula "36") (term "3,0,0,1,1") (ifseqformula "50"))
                                    (rule "applyEq" (formula "53") (term "1,1,1,0,0,0,0") (ifseqformula "50"))
                                    (rule "applyEq" (formula "52") (term "3,0") (ifseqformula "50"))
                                    (rule "applyEq" (formula "54") (term "1,0,2,0") (ifseqformula "50"))
                                    (rule "eqSymm" (formula "54"))
                                    (rule "Definition_axiom_for_countClassOfSliceEq_in_de_wiesler_Classifier" (formula "57") (term "1") (inst "i=i"))
                                    (rule "eqSymm" (formula "57"))
                                    (rule "Free_class_invariant_axiom_for_de_wiesler_Classifier" (formula "8") (term "1,1"))
                                     (builtin "One Step Simplification" (formula "8") (ifInst ""  (formula "63")) (ifInst ""  (formula "51")))
                                    (rule "translateJavaSubInt" (formula "8") (term "0,2,0,1,0,1,1"))
                                    (rule "translateJavaSubInt" (formula "8") (term "0,2,1,1,0,1,1"))
                                    (rule "eqSymm" (formula "8") (term "1,0,0,0,1,1"))
                                    (rule "eqSymm" (formula "8") (term "1,0,1,1"))
                                    (rule "polySimp_elimSub" (formula "8") (term "0,2,0,1,0,1,1"))
                                    (rule "mul_literals" (formula "8") (term "1,0,2,0,1,0,1,1"))
                                    (rule "eqSymm" (formula "8") (term "1,0,1,1"))
                                    (rule "polySimp_elimSub" (formula "8") (term "0,2,0,1,0,1,1"))
                                    (rule "mul_literals" (formula "8") (term "1,0,2,0,1,0,1,1"))
                                    (rule "eqSymm" (formula "8") (term "1,0,1,1"))
                                    (rule "polySimp_addComm0" (formula "8") (term "0,2,1,1,0,1,1"))
                                    (rule "polySimp_addComm0" (formula "8") (term "0,2,0,1,0,1,1"))
                                    (rule "inEqSimp_commuteLeq" (formula "8") (term "0,0,0,0,0,1,1"))
                                    (rule "applyEq" (formula "8") (term "0,1,0,0,0,0,1,1") (ifseqformula "33"))
                                    (rule "replace_known_left" (formula "8") (term "1,0,0,0,0,1,1") (ifseqformula "49"))
                                     (builtin "One Step Simplification" (formula "8"))
                                    (rule "applyEq" (formula "8") (term "0,0,0,0,0,1,1") (ifseqformula "33"))
                                    (rule "replace_known_left" (formula "8") (term "0,0,0,0,1,1") (ifseqformula "48"))
                                     (builtin "One Step Simplification" (formula "8"))
                                    (rule "applyEq" (formula "8") (term "3,0,1,0,0,1,1") (ifseqformula "50"))
                                    (rule "applyEq" (formula "8") (term "1,0,2,0,1,0,1,1") (ifseqformula "50"))
                                    (rule "eqSymm" (formula "8") (term "1,0,1,1"))
                                    (rule "applyEq" (formula "8") (term "0,0,0,0,1,1") (ifseqformula "50"))
                                    (rule "eqSymm" (formula "8") (term "0,0,0,1,1"))
                                    (rule "replace_known_left" (formula "8") (term "0,0,0,1,1") (ifseqformula "33"))
                                     (builtin "One Step Simplification" (formula "8"))
                                    (rule "applyEq" (formula "8") (term "1,0,2,0,1,0,1,1") (ifseqformula "50"))
                                    (rule "eqSymm" (formula "8") (term "1,0,1,1"))
                                    (rule "replace_known_left" (formula "8") (term "1,0,1,1") (ifseqformula "54"))
                                     (builtin "One Step Simplification" (formula "8"))
                                    (rule "Definition_axiom_for_classOf_in_de_wiesler_Classifier" (formula "9") (term "0,0,2,0,1,0"))
                                    (rule "Contract_axiom_for_isClassOfSlice_in_Classifier" (formula "39") (term "0,1,0"))
                                    (rule "replace_known_left" (formula "39") (term "1,0,0") (ifseqformula "12"))
                                     (builtin "One Step Simplification" (formula "39") (ifInst ""  (formula "66")) (ifInst ""  (formula "11")) (ifInst ""  (formula "85")))
                                    (rule "Definition_axiom_for_bufferLen_in_de_wiesler_Buffers" (formula "40") (term "1,4,0,1,0"))
                                    (rule "Contract_axiom_for_countClassOfSliceEq_in_Classifier" (formula "34") (term "1,1,0"))
                                    (rule "replace_known_left" (formula "34") (term "1,0,0,0") (ifseqformula "11"))
                                     (builtin "One Step Simplification" (formula "34") (ifInst ""  (formula "89")) (ifInst ""  (formula "12")) (ifInst ""  (formula "86")) (ifInst ""  (formula "40")))
                                    (rule "true_left" (formula "34"))
                                    (rule "Definition_axiom_for_countClassOfSliceEq_in_de_wiesler_Classifier" (formula "34") (term "1,1,0") (inst "i=i"))
                                    (rule "eqSymm" (formula "34") (term "1,0"))
                                    (rule "nnf_notAnd" (formula "54") (term "1,0,0"))
                                    (rule "inEqSimp_notGeq" (formula "54") (term "1,1,0,0"))
                                    (rule "mul_literals" (formula "54") (term "1,0,0,1,1,0,0"))
                                    (rule "add_literals" (formula "54") (term "0,0,1,1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "54") (term "1,1,0,0"))
                                    (rule "mul_literals" (formula "54") (term "1,1,1,0,0"))
                                    (rule "inEqSimp_notLeq" (formula "54") (term "0,1,0,0"))
                                    (rule "mul_literals" (formula "54") (term "1,0,0,0,1,0,0"))
                                    (rule "add_literals" (formula "54") (term "0,0,0,1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "54") (term "0,1,0,0"))
                                    (rule "mul_literals" (formula "54") (term "1,0,1,0,0"))
                                    (rule "Definition_axiom_for_isClassifiedBlock_in_de_wiesler_Classifier" (formula "37") (term "0,1,0") (inst "bucket=bucket"))
                                     (builtin "One Step Simplification" (formula "37"))
                                    (rule "expand_inInt" (formula "37") (term "1,0,0,1,0"))
                                    (rule "replace_int_MIN" (formula "37") (term "0,1,1,0,0,1,0"))
                                    (rule "replace_int_MAX" (formula "37") (term "1,0,1,0,0,1,0"))
                                    (rule "inEqSimp_ltToLeq" (formula "37") (term "1,0,0,0,1,0"))
                                    (rule "polySimp_mulComm0" (formula "37") (term "1,0,0,1,0,0,0,1,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "37") (term "0,0,0,0,1,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "37") (term "1,1,0,0,1,0"))
                                    (rule "applyEq" (formula "37") (term "0,1,0,0,1,0,0,0,1,0") (ifseqformula "33"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "37") (term "1,0,0,0,1,0"))
                                    (rule "polySimp_mulComm0" (formula "37") (term "1,1,0,0,0,1,0"))
                                    (rule "polySimp_rightDist" (formula "37") (term "1,1,0,0,0,1,0"))
                                    (rule "polySimp_mulLiterals" (formula "37") (term "1,1,1,0,0,0,1,0"))
                                    (rule "mul_literals" (formula "37") (term "0,1,1,0,0,0,1,0"))
                                    (rule "polySimp_elimOne" (formula "37") (term "1,1,1,0,0,0,1,0"))
                                    (rule "nnf_notAnd" (formula "54") (term "0,0,0"))
                                    (rule "inEqSimp_notGeq" (formula "54") (term "0,0,0,0"))
                                    (rule "mul_literals" (formula "54") (term "1,0,0,0,0,0,0"))
                                    (rule "add_zero_right" (formula "54") (term "0,0,0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "54") (term "0,0,0,0"))
                                    (rule "mul_literals" (formula "54") (term "1,0,0,0,0"))
                                    (rule "inEqSimp_notLeq" (formula "54") (term "1,0,0,0"))
                                    (rule "polySimp_rightDist" (formula "54") (term "1,0,0,1,0,0,0"))
                                    (rule "mul_literals" (formula "54") (term "0,1,0,0,1,0,0,0"))
                                    (rule "polySimp_addAssoc" (formula "54") (term "0,0,1,0,0,0"))
                                    (rule "add_literals" (formula "54") (term "0,0,0,1,0,0,0"))
                                    (rule "add_zero_left" (formula "54") (term "0,0,1,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "54") (term "1,0,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "54") (term "1,1,0,0,0"))
                                    (rule "polySimp_elimOne" (formula "54") (term "1,1,0,0,0"))
                                    (rule "nnf_notAnd" (formula "54") (term "0,0,1,0"))
                                    (rule "commute_or_2" (formula "41") (term "0,0"))
                                    (rule "arrayLengthNotNegative" (formula "21") (term "0"))
                                    (rule "applyEq" (formula "21") (term "0") (ifseqformula "22"))
                                    (rule "qeq_literals" (formula "21"))
                                    (rule "true_left" (formula "21"))
                                    (rule "arrayLengthIsAShort" (formula "21") (term "0"))
                                    (rule "expand_inShort" (formula "21"))
                                    (rule "replace_short_MAX" (formula "21") (term "1,0"))
                                    (rule "replace_short_MIN" (formula "21") (term "0,1"))
                                    (rule "andLeft" (formula "21"))
                                    (rule "inEqSimp_commuteLeq" (formula "22"))
                                    (rule "applyEq" (formula "22") (term "0") (ifseqformula "23"))
                                    (rule "qeq_literals" (formula "22"))
                                    (rule "true_left" (formula "22"))
                                    (rule "applyEq" (formula "21") (term "0") (ifseqformula "22"))
                                    (rule "leq_literals" (formula "21"))
                                    (rule "true_left" (formula "21"))
                                    (rule "arrayLengthNotNegative" (formula "20") (term "0"))
                                    (rule "applyEq" (formula "20") (term "0") (ifseqformula "21"))
                                    (rule "qeq_literals" (formula "20"))
                                    (rule "true_left" (formula "20"))
                                    (rule "arrayLengthIsAShort" (formula "20") (term "0"))
                                    (rule "expand_inShort" (formula "20"))
                                    (rule "replace_short_MAX" (formula "20") (term "1,0"))
                                    (rule "replace_short_MIN" (formula "20") (term "0,1"))
                                    (rule "andLeft" (formula "20"))
                                    (rule "inEqSimp_commuteLeq" (formula "21"))
                                    (rule "applyEq" (formula "21") (term "0") (ifseqformula "22"))
                                    (rule "qeq_literals" (formula "21"))
                                    (rule "true_left" (formula "21"))
                                    (rule "applyEq" (formula "20") (term "0") (ifseqformula "21"))
                                    (rule "leq_literals" (formula "20"))
                                    (rule "closeFalse" (formula "20"))
                                 )
                              )
                           )
                        )
                        (branch "Usage"
                            (builtin "One Step Simplification" (formula "76"))
                           (rule "translateJavaAddInt" (formula "76") (term "0,1,0"))
                           (rule "polySimp_addComm0" (formula "76") (term "0,1,0"))
                           (rule "assignment_to_primitive_array_component" (formula "76"))
                           (branch "Normal Execution (_bucket_starts != null)"
                               (builtin "One Step Simplification" (formula "76"))
                              (rule "compound_assignment_op_plus" (formula "76") (term "1"))
                              (rule "compound_int_cast_expression" (formula "76") (term "1") (inst "#v=x_2"))
                              (rule "variableDeclarationAssign" (formula "76") (term "1"))
                              (rule "variableDeclaration" (formula "76") (term "1") (newnames "x_9"))
                              (rule "remove_parentheses_right" (formula "76") (term "1"))
                              (rule "compound_addition_2" (formula "76") (term "1") (inst "#v1=x_11") (inst "#v0=x_10"))
                              (rule "variableDeclarationAssign" (formula "76") (term "1"))
                              (rule "variableDeclaration" (formula "76") (term "1") (newnames "x_10"))
                              (rule "assignment" (formula "76") (term "1"))
                               (builtin "One Step Simplification" (formula "76"))
                              (rule "variableDeclarationAssign" (formula "76") (term "1"))
                              (rule "variableDeclaration" (formula "76") (term "1") (newnames "x_11"))
                              (rule "remove_parentheses_right" (formula "76") (term "1"))
                              (rule "assignment" (formula "76") (term "1"))
                               (builtin "One Step Simplification" (formula "76"))
                              (rule "assignmentAdditionInt" (formula "76") (term "1"))
                              (branch "Overflow check"
                                  (builtin "One Step Simplification" (formula "76"))
                                 (rule "expand_inInt" (formula "76") (userinteraction))
                                 (rule "andRight" (formula "76") (userinteraction))
                                 (branch "Case 1"
                                    (rule "replace_int_MAX" (formula "76") (term "1"))
                                    (rule "polySimp_homoEq" (formula "14") (term "1,0"))
                                    (rule "polySimp_homoEq" (formula "14") (term "0,1,0,1,0,1,0"))
                                    (rule "polySimp_mulComm0" (formula "14") (term "1,0,1,0"))
                                    (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,1,1,1,0,1,0"))
                                    (rule "polySimp_rightDist" (formula "14") (term "1,0,1,0"))
                                    (rule "polySimp_mulAssoc" (formula "14") (term "0,1,0,1,0"))
                                    (rule "polySimp_mulComm0" (formula "14") (term "0,0,1,0,1,0"))
                                    (rule "polySimp_mulLiterals" (formula "14") (term "0,1,0,1,0"))
                                    (rule "polySimp_elimOne" (formula "14") (term "0,1,0,1,0"))
                                    (rule "polySimp_rightDist" (formula "14") (term "1,0,0,0,1,1,0,1,0"))
                                    (rule "mul_literals" (formula "14") (term "0,1,0,0,0,1,1,0,1,0"))
                                    (rule "polySimp_addAssoc" (formula "76") (term "0"))
                                    (rule "polySimp_addComm0" (formula "76") (term "0,0"))
                                    (rule "polySimp_addAssoc" (formula "14") (term "0,1,0"))
                                    (rule "polySimp_addAssoc" (formula "14") (term "0,0,0,1,0,1,0"))
                                    (rule "polySimp_addComm0" (formula "14") (term "0,0,0,0,1,0,1,0"))
                                    (rule "inEqSimp_ltToLeq" (formula "5"))
                                    (rule "polySimp_mulComm0" (formula "5") (term "1,0,0"))
                                    (rule "polySimp_addComm1" (formula "5") (term "0"))
                                    (rule "inEqSimp_ltToLeq" (formula "10") (term "0"))
                                    (rule "add_zero_right" (formula "10") (term "0,0"))
                                    (rule "polySimp_mulComm0" (formula "10") (term "1,0,0"))
                                    (rule "inEqSimp_ltToLeq" (formula "13") (term "0,0,0,0,0"))
                                    (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,0,0,0,0,0"))
                                    (rule "inEqSimp_ltToLeq" (formula "14") (term "0,0,0,0,0"))
                                    (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,0,0,0,0,0"))
                                    (rule "inEqSimp_leqRight" (formula "76"))
                                    (rule "mul_literals" (formula "1") (term "1,0,0"))
                                    (rule "add_literals" (formula "1") (term "0,0"))
                                    (rule "polySimp_addAssoc" (formula "1") (term "0"))
                                    (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                                    (rule "inEqSimp_homoInEq0" (formula "9") (term "0,0,0"))
                                    (rule "times_zero_2" (formula "9") (term "1,0,0,0,0"))
                                    (rule "add_zero_right" (formula "9") (term "0,0,0,0"))
                                    (rule "inEqSimp_homoInEq1" (formula "35"))
                                    (rule "polySimp_addComm1" (formula "35") (term "0"))
                                    (rule "polySimp_sepNegMonomial" (formula "15") (term "1,0"))
                                    (rule "polySimp_mulLiterals" (formula "15") (term "0,1,0"))
                                    (rule "polySimp_elimOne" (formula "15") (term "0,1,0"))
                                    (rule "polySimp_sepNegMonomial" (formula "15") (term "0,0,1,0"))
                                    (rule "polySimp_mulLiterals" (formula "15") (term "0,0,0,1,0"))
                                    (rule "polySimp_elimOne" (formula "15") (term "0,0,0,1,0"))
                                    (rule "inEqSimp_sepNegMonomial0" (formula "6"))
                                    (rule "polySimp_mulLiterals" (formula "6") (term "0"))
                                    (rule "polySimp_elimOne" (formula "6") (term "0"))
                                    (rule "inEqSimp_sepNegMonomial0" (formula "11") (term "0"))
                                    (rule "polySimp_mulLiterals" (formula "11") (term "0,0"))
                                    (rule "polySimp_elimOne" (formula "11") (term "0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "0,0,0,0,0"))
                                    (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,0,0,0"))
                                    (rule "polySimp_rightDist" (formula "14") (term "1,0,0,0,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "14") (term "1,1,0,0,0,0,0"))
                                    (rule "mul_literals" (formula "14") (term "0,1,0,0,0,0,0"))
                                    (rule "polySimp_elimOne" (formula "14") (term "1,1,0,0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "0,0,0,0,0"))
                                    (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,0,0,0"))
                                    (rule "polySimp_rightDist" (formula "15") (term "1,0,0,0,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "15") (term "1,1,0,0,0,0,0"))
                                    (rule "mul_literals" (formula "15") (term "0,1,0,0,0,0,0"))
                                    (rule "polySimp_elimOne" (formula "15") (term "1,1,0,0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                                    (rule "polySimp_mulComm0" (formula "1") (term "1"))
                                    (rule "polySimp_rightDist" (formula "1") (term "1"))
                                    (rule "polySimp_rightDist" (formula "1") (term "0,1"))
                                    (rule "mul_literals" (formula "1") (term "0,0,1"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "9") (term "0,0,0"))
                                    (rule "mul_literals" (formula "9") (term "1,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "35"))
                                    (rule "polySimp_mulComm0" (formula "35") (term "1"))
                                    (rule "polySimp_rightDist" (formula "35") (term "1"))
                                    (rule "polySimp_mulLiterals" (formula "35") (term "1,1"))
                                    (rule "mul_literals" (formula "35") (term "0,1"))
                                    (rule "polySimp_elimOne" (formula "35") (term "1,1"))
                                    (rule "inEqSimp_subsumption1" (formula "9") (term "1,0,0") (ifseqformula "8"))
                                    (rule "inEqSimp_homoInEq0" (formula "9") (term "0,1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,1,0,0"))
                                    (rule "polySimp_rightDist" (formula "9") (term "1,0,0,1,0,0"))
                                    (rule "mul_literals" (formula "9") (term "0,1,0,0,1,0,0"))
                                    (rule "polySimp_addAssoc" (formula "9") (term "0,0,1,0,0"))
                                    (rule "polySimp_addComm0" (formula "9") (term "0,0,0,1,0,0"))
                                    (rule "polySimp_pullOutFactor1b" (formula "9") (term "0,0,1,0,0"))
                                    (rule "add_literals" (formula "9") (term "1,1,0,0,1,0,0"))
                                    (rule "times_zero_1" (formula "9") (term "1,0,0,1,0,0"))
                                    (rule "add_zero_right" (formula "9") (term "0,0,1,0,0"))
                                    (rule "qeq_literals" (formula "9") (term "0,1,0,0"))
                                     (builtin "One Step Simplification" (formula "9"))
                                    (rule "inEqSimp_subsumption1" (formula "22") (ifseqformula "36"))
                                    (rule "leq_literals" (formula "22") (term "0"))
                                     (builtin "One Step Simplification" (formula "22"))
                                    (rule "true_left" (formula "22"))
                                    (rule "inEqSimp_subsumption1" (formula "32") (ifseqformula "33"))
                                    (rule "leq_literals" (formula "32") (term "0"))
                                     (builtin "One Step Simplification" (formula "32"))
                                    (rule "true_left" (formula "32"))
                                    (rule "inEqSimp_subsumption1" (formula "37") (ifseqformula "38"))
                                    (rule "leq_literals" (formula "37") (term "0"))
                                     (builtin "One Step Simplification" (formula "37"))
                                    (rule "true_left" (formula "37"))
                                    (rule "inEqSimp_subsumption1" (formula "8") (ifseqformula "6"))
                                    (rule "inEqSimp_homoInEq0" (formula "8") (term "0"))
                                    (rule "polySimp_pullOutFactor1b" (formula "8") (term "0,0"))
                                    (rule "add_literals" (formula "8") (term "1,1,0,0"))
                                    (rule "times_zero_1" (formula "8") (term "1,0,0"))
                                    (rule "add_zero_right" (formula "8") (term "0,0"))
                                    (rule "qeq_literals" (formula "8") (term "0"))
                                     (builtin "One Step Simplification" (formula "8"))
                                    (rule "true_left" (formula "8"))
                                    (rule "inEqSimp_exactShadow3" (formula "34") (ifseqformula "23"))
                                    (rule "polySimp_mulComm0" (formula "34") (term "0,0"))
                                    (rule "polySimp_addComm0" (formula "34") (term "0"))
                                    (rule "inEqSimp_sepNegMonomial1" (formula "34"))
                                    (rule "polySimp_mulLiterals" (formula "34") (term "0"))
                                    (rule "polySimp_elimOne" (formula "34") (term "0"))
                                    (rule "inEqSimp_exactShadow3" (formula "40") (ifseqformula "41"))
                                    (rule "polySimp_mulComm0" (formula "40") (term "0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "40"))
                                    (rule "polySimp_mulLiterals" (formula "40") (term "1"))
                                    (rule "polySimp_elimOne" (formula "40") (term "1"))
                                    (rule "inEqSimp_exactShadow3" (formula "37") (ifseqformula "35"))
                                    (rule "polySimp_mulComm0" (formula "37") (term "0,0"))
                                    (rule "polySimp_addComm0" (formula "37") (term "0"))
                                    (rule "inEqSimp_sepNegMonomial1" (formula "37"))
                                    (rule "polySimp_mulLiterals" (formula "37") (term "0"))
                                    (rule "polySimp_elimOne" (formula "37") (term "0"))
                                    (rule "inEqSimp_subsumption0" (formula "23") (ifseqformula "37"))
                                    (rule "leq_literals" (formula "23") (term "0"))
                                     (builtin "One Step Simplification" (formula "23"))
                                    (rule "true_left" (formula "23"))
                                    (rule "inEqSimp_exactShadow3" (formula "22") (ifseqformula "41"))
                                    (rule "mul_literals" (formula "22") (term "0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "22"))
                                    (rule "mul_literals" (formula "22") (term "1"))
                                    (rule "inEqSimp_exactShadow3" (formula "40") (ifseqformula "21"))
                                    (rule "polySimp_mulComm0" (formula "40") (term "0,0"))
                                    (rule "polySimp_addComm0" (formula "40") (term "0"))
                                    (rule "inEqSimp_sepNegMonomial1" (formula "40"))
                                    (rule "polySimp_mulLiterals" (formula "40") (term "0"))
                                    (rule "polySimp_elimOne" (formula "40") (term "0"))
                                    (rule "inEqSimp_exactShadow3" (formula "6") (ifseqformula "31"))
                                    (rule "polySimp_rightDist" (formula "6") (term "0,0"))
                                    (rule "mul_literals" (formula "6") (term "0,0,0"))
                                    (rule "polySimp_addAssoc" (formula "6") (term "0"))
                                    (rule "polySimp_addComm1" (formula "6") (term "0,0"))
                                    (rule "add_literals" (formula "6") (term "0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "6"))
                                    (rule "polySimp_mulComm0" (formula "6") (term "1"))
                                    (rule "polySimp_rightDist" (formula "6") (term "1"))
                                    (rule "polySimp_mulLiterals" (formula "6") (term "1,1"))
                                    (rule "mul_literals" (formula "6") (term "0,1"))
                                    (rule "polySimp_elimOne" (formula "6") (term "1,1"))
                                    (rule "inEqSimp_exactShadow3" (formula "34") (ifseqformula "37"))
                                    (rule "polySimp_mulComm0" (formula "34") (term "0,0"))
                                    (rule "polySimp_addComm0" (formula "34") (term "0"))
                                    (rule "inEqSimp_sepNegMonomial1" (formula "34"))
                                    (rule "polySimp_mulLiterals" (formula "34") (term "0"))
                                    (rule "polySimp_elimOne" (formula "34") (term "0"))
                                    (rule "inEqSimp_subsumption0" (formula "21") (ifseqformula "34"))
                                    (rule "leq_literals" (formula "21") (term "0"))
                                     (builtin "One Step Simplification" (formula "21"))
                                    (rule "true_left" (formula "21"))
                                    (rule "inEqSimp_exactShadow3" (formula "6") (ifseqformula "29"))
                                    (rule "polySimp_rightDist" (formula "6") (term "0,0"))
                                    (rule "mul_literals" (formula "6") (term "0,0,0"))
                                    (rule "polySimp_addComm1" (formula "6") (term "0"))
                                    (rule "add_literals" (formula "6") (term "0,0"))
                                    (rule "inEqSimp_sepNegMonomial1" (formula "6"))
                                    (rule "polySimp_mulLiterals" (formula "6") (term "0"))
                                    (rule "polySimp_elimOne" (formula "6") (term "0"))
                                    (rule "inEqSimp_and_subsumption3" (formula "16") (term "0,0,0"))
                                    (rule "leq_literals" (formula "16") (term "0,1,0,0,0,0"))
                                     (builtin "One Step Simplification" (formula "16"))
                                    (rule "nnf_imp2or" (formula "15") (term "0"))
                                    (rule "nnf_imp2or" (formula "16") (term "0"))
                                    (rule "nnf_notAnd" (formula "15") (term "0,0"))
                                    (rule "inEqSimp_notGeq" (formula "15") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "15") (term "1,1,0,0"))
                                    (rule "polySimp_rightDist" (formula "15") (term "1,1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "15") (term "1,1,1,0,0"))
                                    (rule "mul_literals" (formula "15") (term "0,1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "15") (term "1,1,1,0,0"))
                                    (rule "nnf_notAnd" (formula "16") (term "0,0"))
                                    (rule "inEqSimp_notLeq" (formula "16") (term "1,0,0"))
                                    (rule "mul_literals" (formula "16") (term "1,0,0,1,0,0"))
                                    (rule "add_literals" (formula "16") (term "0,0,1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "16") (term "1,0,0"))
                                    (rule "mul_literals" (formula "16") (term "1,1,0,0"))
                                    (rule "nnf_notAnd" (formula "15") (term "0,0,0"))
                                    (rule "inEqSimp_notLeq" (formula "15") (term "1,0,0,0"))
                                    (rule "mul_literals" (formula "15") (term "1,0,0,1,0,0,0"))
                                    (rule "add_literals" (formula "15") (term "0,0,1,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "15") (term "1,0,0,0"))
                                    (rule "mul_literals" (formula "15") (term "1,1,0,0,0"))
                                    (rule "nnf_notAnd" (formula "16") (term "0,0,0"))
                                    (rule "inEqSimp_notLeq" (formula "16") (term "0,0,0,0"))
                                    (rule "polySimp_rightDist" (formula "16") (term "1,0,0,0,0,0,0"))
                                    (rule "mul_literals" (formula "16") (term "0,1,0,0,0,0,0,0"))
                                    (rule "polySimp_addAssoc" (formula "16") (term "0,0,0,0,0,0"))
                                    (rule "add_literals" (formula "16") (term "0,0,0,0,0,0,0"))
                                    (rule "add_zero_left" (formula "16") (term "0,0,0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "16") (term "0,0,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "16") (term "1,0,0,0,0"))
                                    (rule "polySimp_elimOne" (formula "16") (term "1,0,0,0,0"))
                                    (rule "inEqSimp_notGeq" (formula "16") (term "1,0,0,0"))
                                    (rule "times_zero_1" (formula "16") (term "1,0,0,1,0,0,0"))
                                    (rule "add_literals" (formula "16") (term "0,0,1,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "1,0,0,0"))
                                    (rule "mul_literals" (formula "16") (term "1,1,0,0,0"))
                                    (rule "nnf_notAnd" (formula "15") (term "0,0,0,0"))
                                    (rule "inEqSimp_notLeq" (formula "15") (term "0,0,0,0,0"))
                                    (rule "polySimp_rightDist" (formula "15") (term "1,0,0,0,0,0,0,0"))
                                    (rule "mul_literals" (formula "15") (term "0,1,0,0,0,0,0,0,0"))
                                    (rule "polySimp_addAssoc" (formula "15") (term "0,0,0,0,0,0,0"))
                                    (rule "add_literals" (formula "15") (term "0,0,0,0,0,0,0,0"))
                                    (rule "add_zero_left" (formula "15") (term "0,0,0,0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "15") (term "0,0,0,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "15") (term "1,0,0,0,0,0"))
                                    (rule "polySimp_elimOne" (formula "15") (term "1,0,0,0,0,0"))
                                    (rule "inEqSimp_notGeq" (formula "15") (term "1,0,0,0,0"))
                                    (rule "mul_literals" (formula "15") (term "1,0,0,1,0,0,0,0"))
                                    (rule "add_literals" (formula "15") (term "0,0,1,0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "1,0,0,0,0"))
                                    (rule "mul_literals" (formula "15") (term "1,1,0,0,0,0"))
                                    (rule "Definition_axiom_for_bufferLen_in_de_wiesler_Buffers" (formula "13") (term "0,2,0"))
                                    (rule "polySimp_addComm0" (formula "13") (term "2,0"))
                                    (rule "Definition_axiom_for_countClassOfSliceEq_in_de_wiesler_Classifier" (formula "49") (term "1") (inst "i=i"))
                                    (rule "eqSymm" (formula "49"))
                                    (rule "Class_invariant_axiom_for_de_wiesler_Buffers" (formula "47"))
                                    (rule "andLeft" (formula "47"))
                                    (rule "notLeft" (formula "47"))
                                    (rule "notLeft" (formula "47"))
                                    (rule "replace_known_right" (formula "3") (term "0") (ifseqformula "55"))
                                     (builtin "One Step Simplification" (formula "3"))
                                    (rule "replace_known_right" (formula "2") (term "0") (ifseqformula "56"))
                                     (builtin "One Step Simplification" (formula "2"))
                                    (rule "Contract_axiom_for_bufferLen_in_Buffers" (formula "52") (term "0"))
                                     (builtin "One Step Simplification" (formula "52") (ifInst ""  (formula "18")) (ifInst ""  (formula "26")) (ifInst ""  (formula "75")) (ifInst ""  (formula "29")))
                                    (rule "inEqSimp_ltToLeq" (formula "52") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "52") (term "1,0,0,1,0,0"))
                                    (rule "polySimp_addComm1" (formula "52") (term "0,1,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "52") (term "0,0,0"))
                                    (rule "replace_known_left" (formula "52") (term "0,0,0") (ifseqformula "9"))
                                     (builtin "One Step Simplification" (formula "52"))
                                    (rule "inEqSimp_commuteLeq" (formula "52") (term "0,1,1"))
                                    (rule "applyEq" (formula "52") (term "0,1,1,1") (ifseqformula "53"))
                                    (rule "applyEq" (formula "52") (term "0,0,1,1") (ifseqformula "53"))
                                    (rule "inEqSimp_sepNegMonomial0" (formula "52") (term "0,0"))
                                    (rule "polySimp_mulLiterals" (formula "52") (term "0,0,0"))
                                    (rule "polySimp_elimOne" (formula "52") (term "0,0,0"))
                                    (rule "replace_known_left" (formula "52") (term "0,0") (ifseqformula "8"))
                                     (builtin "One Step Simplification" (formula "52"))
                                    (rule "Class_invariant_axiom_for_de_wiesler_Classifier" (formula "28"))
                                    (rule "andLeft" (formula "28"))
                                    (rule "notLeft" (formula "28"))
                                    (rule "notLeft" (formula "28"))
                                    (rule "replace_known_right" (formula "4") (term "0") (ifseqformula "56"))
                                     (builtin "One Step Simplification" (formula "4"))
                                    (rule "replace_known_right" (formula "5") (term "0") (ifseqformula "55"))
                                     (builtin "One Step Simplification" (formula "5"))
                                    (rule "Definition_axiom_for_isSortedSlice_in_de_wiesler_Functions" (formula "14") (term "0") (inst "i=i"))
                                     (builtin "One Step Simplification" (formula "14"))
                                    (rule "expand_inInt" (formula "14") (term "1,0,0"))
                                    (rule "replace_int_MIN" (formula "14") (term "0,1,1,0,0"))
                                    (rule "replace_int_MAX" (formula "14") (term "1,0,1,0,0"))
                                    (rule "translateJavaAddInt" (formula "14") (term "0,2,1,1,0"))
                                    (rule "translateJavaSubInt" (formula "14") (term "1,1,0,0,0"))
                                    (rule "polySimp_elimSub" (formula "14") (term "1,1,0,0,0"))
                                    (rule "mul_literals" (formula "14") (term "1,1,1,0,0,0"))
                                    (rule "polySimp_addComm0" (formula "14") (term "0,2,1,1,0"))
                                    (rule "polySimp_addComm0" (formula "14") (term "1,1,0,0,0"))
                                    (rule "inEqSimp_ltToLeq" (formula "14") (term "1,0,0,0"))
                                    (rule "polySimp_rightDist" (formula "14") (term "1,0,0,1,0,0,0"))
                                    (rule "mul_literals" (formula "14") (term "0,1,0,0,1,0,0,0"))
                                    (rule "polySimp_addAssoc" (formula "14") (term "0,0,1,0,0,0"))
                                    (rule "add_literals" (formula "14") (term "0,0,0,1,0,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "14") (term "0,0,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "14") (term "1,1,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "14") (term "1,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "1,0,0,0"))
                                    (rule "polySimp_mulComm0" (formula "14") (term "1,1,0,0,0"))
                                    (rule "polySimp_rightDist" (formula "14") (term "1,1,0,0,0"))
                                    (rule "mul_literals" (formula "14") (term "0,1,1,0,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "14") (term "1,1,1,0,0,0"))
                                    (rule "polySimp_elimOne" (formula "14") (term "1,1,1,0,0,0"))
                                    (rule "Definition_axiom_for_isClassifiedUntil_in_de_wiesler_Classifier" (formula "40") (term "0") (inst "b=b"))
                                     (builtin "One Step Simplification" (formula "40"))
                                    (rule "expand_inInt" (formula "40") (term "1,0,0,1,0"))
                                    (rule "replace_int_MIN" (formula "40") (term "0,1,1,0,0,1,0"))
                                    (rule "replace_int_MAX" (formula "40") (term "1,0,1,0,0,1,0"))
                                    (rule "andLeft" (formula "40"))
                                    (rule "andLeft" (formula "40"))
                                    (rule "andLeft" (formula "40"))
                                    (rule "andLeft" (formula "40"))
                                    (rule "translateJavaSubInt" (formula "44") (term "1"))
                                    (rule "polySimp_elimSub" (formula "44") (term "1"))
                                    (rule "inEqSimp_ltToLeq" (formula "43") (term "1,0,0,0"))
                                    (rule "polySimp_mulComm0" (formula "43") (term "1,0,0,1,0,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "43") (term "1,1,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "43") (term "0,0,0,0"))
                                    (rule "applyEq" (formula "43") (term "0,1,0,0,1,0,0,0") (ifseqformula "39"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "43") (term "1,0,0,0"))
                                    (rule "polySimp_mulComm0" (formula "43") (term "1,1,0,0,0"))
                                    (rule "polySimp_rightDist" (formula "43") (term "1,1,0,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "43") (term "1,1,1,0,0,0"))
                                    (rule "mul_literals" (formula "43") (term "0,1,1,0,0,0"))
                                    (rule "polySimp_elimOne" (formula "43") (term "1,1,1,0,0,0"))
                                    (rule "Free_class_invariant_axiom_for_de_wiesler_Classifier" (formula "48"))
                                     (builtin "One Step Simplification" (formula "48"))
                                    (rule "andLeft" (formula "48"))
                                    (rule "andLeft" (formula "48"))
                                    (rule "andLeft" (formula "48"))
                                    (rule "andLeft" (formula "48"))
                                    (rule "andLeft" (formula "48"))
                                    (rule "andLeft" (formula "48"))
                                    (rule "translateJavaSubInt" (formula "53") (term "0,2,0"))
                                    (rule "translateJavaSubInt" (formula "53") (term "0,2,1"))
                                    (rule "translateJavaMulInt" (formula "50") (term "1,1"))
                                    (rule "eqSymm" (formula "53"))
                                    (rule "eqSymm" (formula "50"))
                                    (rule "polySimp_elimSub" (formula "53") (term "0,2,0"))
                                    (rule "mul_literals" (formula "53") (term "1,0,2,0"))
                                    (rule "eqSymm" (formula "53"))
                                    (rule "polySimp_elimSub" (formula "53") (term "0,2,0"))
                                    (rule "mul_literals" (formula "53") (term "1,0,2,0"))
                                    (rule "eqSymm" (formula "53"))
                                    (rule "polySimp_mulComm0" (formula "50") (term "1,0"))
                                    (rule "polySimp_addComm0" (formula "53") (term "0,2,1"))
                                    (rule "polySimp_addComm0" (formula "53") (term "0,2,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "48"))
                                    (rule "applyEq" (formula "49") (term "0") (ifseqformula "39"))
                                    (rule "applyEq" (formula "48") (term "0") (ifseqformula "39"))
                                    (rule "applyEq" (formula "50") (term "1") (ifseqformula "39"))
                                    (rule "inEqSimp_subsumption1" (formula "11") (term "0,0") (ifseqformula "48"))
                                    (rule "leq_literals" (formula "11") (term "0,0,0"))
                                     (builtin "One Step Simplification" (formula "11"))
                                    (rule "applyEqReverse" (formula "12") (term "0,0,1") (ifseqformula "11"))
                                    (rule "hideAuxiliaryEq" (formula "11"))
                                    (rule "inEqSimp_exactShadow3" (formula "8") (ifseqformula "48"))
                                    (rule "polySimp_rightDist" (formula "8") (term "0,0"))
                                    (rule "mul_literals" (formula "8") (term "0,0,0"))
                                    (rule "polySimp_addComm1" (formula "8") (term "0"))
                                    (rule "add_literals" (formula "8") (term "0,0"))
                                    (rule "inEqSimp_sepNegMonomial1" (formula "8"))
                                    (rule "polySimp_mulLiterals" (formula "8") (term "0"))
                                    (rule "polySimp_elimOne" (formula "8") (term "0"))
                                    (rule "inEqSimp_subsumption0" (formula "6") (ifseqformula "8"))
                                    (rule "leq_literals" (formula "6") (term "0"))
                                     (builtin "One Step Simplification" (formula "6"))
                                    (rule "true_left" (formula "6"))
                                    (rule "inEqSimp_exactShadow3" (formula "47") (ifseqformula "30"))
                                    (rule "mul_literals" (formula "47") (term "0,0"))
                                    (rule "polySimp_addAssoc" (formula "47") (term "0"))
                                    (rule "add_literals" (formula "47") (term "0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "47"))
                                    (rule "mul_literals" (formula "47") (term "1"))
                                    (rule "inEqSimp_subsumption1" (formula "29") (ifseqformula "47"))
                                    (rule "leq_literals" (formula "29") (term "0"))
                                     (builtin "One Step Simplification" (formula "29"))
                                    (rule "true_left" (formula "29"))
                                    (rule "Contract_axiom_for_bufferLen_in_Buffers" (formula "57") (term "0"))
                                     (builtin "One Step Simplification" (formula "57") (ifInst ""  (formula "86")) (ifInst ""  (formula "63")) (ifInst ""  (formula "25")))
                                    (rule "wellFormedAnon" (formula "57") (term "1,0"))
                                    (rule "replace_known_left" (formula "57") (term "1,1,0") (ifseqformula "16"))
                                     (builtin "One Step Simplification" (formula "57") (ifInst ""  (formula "17")))
                                    (rule "inEqSimp_ltToLeq" (formula "57") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "57") (term "1,0,0,1,0,0"))
                                    (rule "polySimp_addComm1" (formula "57") (term "0,1,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "57") (term "0,0,0"))
                                    (rule "replace_known_left" (formula "57") (term "0,0,0") (ifseqformula "9"))
                                     (builtin "One Step Simplification" (formula "57"))
                                    (rule "inEqSimp_commuteLeq" (formula "57") (term "0,1,1"))
                                    (rule "applyEq" (formula "57") (term "0,0,1,1") (ifseqformula "58"))
                                    (rule "applyEq" (formula "57") (term "0,1,1,1") (ifseqformula "58"))
                                    (rule "inEqSimp_sepNegMonomial0" (formula "57") (term "0,0"))
                                    (rule "polySimp_mulLiterals" (formula "57") (term "0,0,0"))
                                    (rule "polySimp_elimOne" (formula "57") (term "0,0,0"))
                                    (rule "replace_known_left" (formula "57") (term "0,0") (ifseqformula "8"))
                                     (builtin "One Step Simplification" (formula "57"))
                                    (rule "Free_class_invariant_axiom_for_de_wiesler_Buffers" (formula "63") (inst "b=b"))
                                     (builtin "One Step Simplification" (formula "63") (ifInst ""  (formula "48")))
                                    (rule "expand_inInt" (formula "63") (term "1,0,0,1"))
                                    (rule "replace_int_MIN" (formula "63") (term "0,1,1,0,0,1"))
                                    (rule "replace_int_MAX" (formula "63") (term "1,0,1,0,0,1"))
                                    (rule "andLeft" (formula "63"))
                                    (rule "andLeft" (formula "63"))
                                    (rule "andLeft" (formula "63"))
                                    (rule "andLeft" (formula "63"))
                                    (rule "notLeft" (formula "63"))
                                    (rule "translateJavaMulInt" (formula "63") (term "1"))
                                    (rule "mul_literals" (formula "63") (term "1"))
                                    (rule "eqSymm" (formula "68"))
                                    (rule "inEqSimp_ltToLeq" (formula "66") (term "1,0,0,0"))
                                    (rule "polySimp_mulComm0" (formula "66") (term "1,0,0,1,0,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "66") (term "0,1,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "66") (term "0,0,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "66") (term "1,1,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "65"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "66") (term "1,0,0,0"))
                                    (rule "polySimp_mulComm0" (formula "66") (term "1,1,0,0,0"))
                                    (rule "polySimp_rightDist" (formula "66") (term "1,1,0,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "66") (term "1,1,1,0,0,0"))
                                    (rule "mul_literals" (formula "66") (term "0,1,1,0,0,0"))
                                    (rule "polySimp_elimOne" (formula "66") (term "1,1,1,0,0,0"))
                                    (rule "inEqSimp_subsumption1" (formula "65") (ifseqformula "47"))
                                    (rule "leq_literals" (formula "65") (term "0"))
                                     (builtin "One Step Simplification" (formula "65"))
                                    (rule "true_left" (formula "65"))
                                    (rule "Free_class_invariant_axiom_for_de_wiesler_Buffers" (formula "27") (inst "b=b"))
                                     (builtin "One Step Simplification" (formula "27") (ifInst ""  (formula "64")) (ifInst ""  (formula "48")))
                                    (rule "expand_inInt" (formula "27") (term "1,0,0,1"))
                                    (rule "replace_int_MIN" (formula "27") (term "0,1,1,0,0,1"))
                                    (rule "replace_int_MAX" (formula "27") (term "1,0,1,0,0,1"))
                                    (rule "andLeft" (formula "27"))
                                    (rule "andLeft" (formula "27"))
                                    (rule "andLeft" (formula "27"))
                                    (rule "notLeft" (formula "27"))
                                    (rule "translateJavaMulInt" (formula "27") (term "1"))
                                    (rule "mul_literals" (formula "27") (term "1"))
                                    (rule "eqSymm" (formula "68"))
                                    (rule "inEqSimp_ltToLeq" (formula "28") (term "1,0,0,0"))
                                    (rule "polySimp_mulComm0" (formula "28") (term "1,0,0,1,0,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "28") (term "1,1,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "28") (term "0,0,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "28") (term "0,1,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "27"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "28") (term "1,0,0,0"))
                                    (rule "polySimp_mulComm0" (formula "28") (term "1,1,0,0,0"))
                                    (rule "polySimp_rightDist" (formula "28") (term "1,1,0,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "28") (term "1,1,1,0,0,0"))
                                    (rule "mul_literals" (formula "28") (term "0,1,1,0,0,0"))
                                    (rule "polySimp_elimOne" (formula "28") (term "1,1,1,0,0,0"))
                                    (rule "inEqSimp_subsumption1" (formula "27") (ifseqformula "48"))
                                    (rule "leq_literals" (formula "27") (term "0"))
                                     (builtin "One Step Simplification" (formula "27"))
                                    (rule "true_left" (formula "27"))
                                    (rule "Definition_axiom_for_isBlockAligned_in_de_wiesler_Buffers" (formula "45") (term "0"))
                                     (builtin "One Step Simplification" (formula "45"))
                                    (rule "translateJavaMod" (formula "45") (term "0"))
                                    (rule "jmod_axiom" (formula "45") (term "0"))
                                    (rule "polySimp_mulLiterals" (formula "45") (term "1,0"))
                                    (rule "polySimp_sepNegMonomial" (formula "45"))
                                    (rule "polySimp_mulLiterals" (formula "45") (term "0"))
                                    (rule "newSym_eq" (formula "45") (inst "l=l_0") (inst "newSymDef=add(mul(begin, Z(0(#))), mul(write, Z(0(#))))"))
                                    (rule "times_zero_1" (formula "45") (term "1,1,1"))
                                    (rule "times_zero_1" (formula "45") (term "0,1,1"))
                                    (rule "add_zero_right" (formula "45") (term "1,1"))
                                    (rule "add_zero_right" (formula "45") (term "1"))
                                    (rule "applyEq" (formula "46") (term "0,0") (ifseqformula "45"))
                                    (rule "polySimp_homoEq" (formula "46"))
                                    (rule "polySimp_mulLiterals" (formula "46") (term "1,0"))
                                    (rule "polySimp_addComm1" (formula "46") (term "0"))
                                    (rule "polySimp_addComm0" (formula "46") (term "0,0"))
                                    (rule "polySimp_sepPosMonomial" (formula "46"))
                                    (rule "polySimp_mulComm0" (formula "46") (term "1"))
                                    (rule "polySimp_rightDist" (formula "46") (term "1"))
                                    (rule "polySimp_mulLiterals" (formula "46") (term "1,1"))
                                    (rule "polySimp_elimOne" (formula "46") (term "1,1"))
                                    (rule "polySimp_mulComm0" (formula "46") (term "0,1"))
                                    (rule "polySimp_mulLiterals" (formula "46") (term "0,1"))
                                    (rule "applyEq" (formula "44") (term "0") (ifseqformula "46"))
                                    (rule "inEqSimp_commuteLeq" (formula "44"))
                                    (rule "applyEq" (formula "45") (term "1,0,0") (ifseqformula "46"))
                                    (rule "polySimp_addAssoc" (formula "45") (term "0,0"))
                                    (rule "polySimp_addComm0" (formula "45") (term "0,0,0"))
                                    (rule "polySimp_pullOutFactor2b" (formula "45") (term "0,0"))
                                    (rule "add_literals" (formula "45") (term "1,1,0,0"))
                                    (rule "times_zero_1" (formula "45") (term "1,0,0"))
                                    (rule "add_zero_right" (formula "45") (term "0,0"))
                                    (rule "applyEq" (formula "39") (term "4,0") (ifseqformula "46"))
                                    (rule "applyEq" (formula "22") (term "0") (ifseqformula "46"))
                                    (rule "inEqSimp_homoInEq1" (formula "22"))
                                    (rule "polySimp_mulComm0" (formula "22") (term "1,0"))
                                    (rule "polySimp_rightDist" (formula "22") (term "1,0"))
                                    (rule "polySimp_mulAssoc" (formula "22") (term "0,1,0"))
                                    (rule "polySimp_mulComm0" (formula "22") (term "0,0,1,0"))
                                    (rule "polySimp_mulLiterals" (formula "22") (term "0,1,0"))
                                    (rule "polySimp_addAssoc" (formula "22") (term "0"))
                                    (rule "applyEq" (formula "43") (term "0") (ifseqformula "46"))
                                    (rule "inEqSimp_homoInEq1" (formula "43"))
                                    (rule "polySimp_mulComm0" (formula "43") (term "1,0"))
                                    (rule "polySimp_rightDist" (formula "43") (term "1,0"))
                                    (rule "polySimp_mulAssoc" (formula "43") (term "0,1,0"))
                                    (rule "polySimp_mulComm0" (formula "43") (term "0,0,1,0"))
                                    (rule "polySimp_mulLiterals" (formula "43") (term "0,1,0"))
                                    (rule "polySimp_addAssoc" (formula "43") (term "0"))
                                    (rule "polySimp_addComm0" (formula "43") (term "0,0"))
                                    (rule "polySimp_pullOutFactor1b" (formula "43") (term "0"))
                                    (rule "add_literals" (formula "43") (term "1,1,0"))
                                    (rule "times_zero_1" (formula "43") (term "1,0"))
                                    (rule "add_zero_right" (formula "43") (term "0"))
                                    (rule "applyEq" (formula "38") (term "4,0") (ifseqformula "46"))
                                    (rule "applyEq" (formula "21") (term "0") (ifseqformula "46"))
                                    (rule "inEqSimp_homoInEq0" (formula "21"))
                                    (rule "polySimp_mulComm0" (formula "21") (term "1,0"))
                                    (rule "polySimp_rightDist" (formula "21") (term "1,0"))
                                    (rule "polySimp_mulAssoc" (formula "21") (term "0,1,0"))
                                    (rule "polySimp_mulComm0" (formula "21") (term "0,0,1,0"))
                                    (rule "polySimp_mulLiterals" (formula "21") (term "0,1,0"))
                                    (rule "polySimp_addAssoc" (formula "21") (term "0"))
                                    (rule "applyEq" (formula "1") (term "4,0") (ifseqformula "46"))
                                    (rule "applyEq" (formula "57") (term "1,0") (ifseqformula "46"))
                                    (rule "applyEq" (formula "14") (term "4,1,1,0") (ifseqformula "46"))
                                    (rule "applyEq" (formula "42") (term "0,1,1") (ifseqformula "46"))
                                    (rule "polySimp_mulComm0" (formula "42") (term "1,1"))
                                    (rule "polySimp_rightDist" (formula "42") (term "1,1"))
                                    (rule "polySimp_mulAssoc" (formula "42") (term "0,1,1"))
                                    (rule "polySimp_mulComm0" (formula "42") (term "0,0,1,1"))
                                    (rule "polySimp_mulLiterals" (formula "42") (term "0,1,1"))
                                    (rule "polySimp_addComm0" (formula "42") (term "1"))
                                    (rule "applyEq" (formula "12") (term "4,0,2,0") (ifseqformula "46"))
                                    (rule "applyEq" (formula "15") (term "4,1,0,1,1,0") (ifseqformula "46"))
                                    (rule "inEqSimp_sepNegMonomial0" (formula "22"))
                                    (rule "polySimp_mulLiterals" (formula "22") (term "0"))
                                    (rule "polySimp_elimOne" (formula "22") (term "0"))
                                    (rule "inEqSimp_invertInEq0" (formula "43"))
                                    (rule "mul_literals" (formula "43") (term "1"))
                                    (rule "polySimp_mulLiterals" (formula "43") (term "0"))
                                    (rule "inEqSimp_sepNegMonomial1" (formula "21"))
                                    (rule "polySimp_mulLiterals" (formula "21") (term "0"))
                                    (rule "polySimp_elimOne" (formula "21") (term "0"))
                                    (rule "elimGcdGeq_antec" (formula "43") (inst "elimGcdRightDiv=Z(0(#))") (inst "elimGcdLeftDiv=l_0") (inst "elimGcd=Z(6(5(2(#))))"))
                                    (rule "add_zero_right" (formula "43") (term "0,0,0,1,0"))
                                    (rule "leq_literals" (formula "43") (term "0,0"))
                                     (builtin "One Step Simplification" (formula "43"))
                                    (rule "polySimp_mulLiterals" (formula "43") (term "1,0,0"))
                                    (rule "times_zero_1" (formula "43") (term "1,0,0,0,0"))
                                    (rule "add_literals" (formula "43") (term "0,0,0,0"))
                                    (rule "polySimp_pullOutFactor0b" (formula "43") (term "0,0"))
                                    (rule "add_literals" (formula "43") (term "1,1,0,0"))
                                    (rule "times_zero_1" (formula "43") (term "1,0,0"))
                                    (rule "add_zero_right" (formula "43") (term "0,0"))
                                    (rule "leq_literals" (formula "43") (term "0"))
                                     (builtin "One Step Simplification" (formula "43"))
                                    (rule "inEqSimp_exactShadow3" (formula "22") (ifseqformula "31"))
                                    (rule "polySimp_rightDist" (formula "22") (term "0,0"))
                                    (rule "mul_literals" (formula "22") (term "0,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "22") (term "1,0,0"))
                                    (rule "polySimp_addComm1" (formula "22") (term "0"))
                                    (rule "add_literals" (formula "22") (term "0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "22"))
                                    (rule "mul_literals" (formula "22") (term "1"))
                                    (rule "inEqSimp_subsumption6" (formula "22") (ifseqformula "44"))
                                    (rule "times_zero_1" (formula "22") (term "1,1,0"))
                                    (rule "greater_literals" (formula "22") (term "0,0"))
                                     (builtin "One Step Simplification" (formula "22"))
                                    (rule "leq_literals" (formula "22") (term "0"))
                                     (builtin "One Step Simplification" (formula "22"))
                                    (rule "true_left" (formula "22"))
                                    (rule "inEqSimp_exactShadow3" (formula "44") (ifseqformula "35"))
                                    (rule "polySimp_rightDist" (formula "44") (term "0,0"))
                                    (rule "polySimp_mulAssoc" (formula "44") (term "0,0,0"))
                                    (rule "polySimp_mulComm0" (formula "44") (term "0,0,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "44") (term "0,0,0"))
                                    (rule "polySimp_addComm1" (formula "44") (term "0"))
                                    (rule "polySimp_addComm0" (formula "44") (term "0,0"))
                                    (rule "inEqSimp_sepNegMonomial1" (formula "44"))
                                    (rule "polySimp_mulLiterals" (formula "44") (term "0"))
                                    (rule "polySimp_elimOne" (formula "44") (term "0"))
                                    (rule "inEqSimp_subsumption0" (formula "21") (ifseqformula "44"))
                                    (rule "inEqSimp_homoInEq0" (formula "21") (term "0"))
                                    (rule "polySimp_mulComm0" (formula "21") (term "1,0,0"))
                                    (rule "polySimp_rightDist" (formula "21") (term "1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "21") (term "1,1,0,0"))
                                    (rule "mul_literals" (formula "21") (term "0,1,0,0"))
                                    (rule "polySimp_addAssoc" (formula "21") (term "0,0"))
                                    (rule "polySimp_addComm1" (formula "21") (term "0,0,0"))
                                    (rule "add_literals" (formula "21") (term "0,0,0,0"))
                                    (rule "polySimp_pullOutFactor0b" (formula "21") (term "0,0"))
                                    (rule "add_literals" (formula "21") (term "1,1,0,0"))
                                    (rule "times_zero_1" (formula "21") (term "1,0,0"))
                                    (rule "add_zero_right" (formula "21") (term "0,0"))
                                    (rule "qeq_literals" (formula "21") (term "0"))
                                     (builtin "One Step Simplification" (formula "21"))
                                    (rule "true_left" (formula "21"))
                                    (rule "inEqSimp_exactShadow3" (formula "29") (ifseqformula "43"))
                                    (rule "times_zero_1" (formula "29") (term "0,0"))
                                    (rule "add_zero_left" (formula "29") (term "0"))
                                    (rule "inEqSimp_sepNegMonomial1" (formula "29"))
                                    (rule "polySimp_mulLiterals" (formula "29") (term "0"))
                                    (rule "elimGcdLeq_antec" (formula "29") (inst "elimGcdRightDiv=Z(7(2(1(#))))") (inst "elimGcdLeftDiv=l_0") (inst "elimGcd=Z(6(5(2(#))))"))
                                    (rule "polySimp_mulLiterals" (formula "29") (term "1,0,1,0"))
                                    (rule "neg_literal" (formula "29") (term "0,0,0,0,0,1,0"))
                                    (rule "polySimp_mulLiterals" (formula "29") (term "1,0,0,0,0,1,0"))
                                    (rule "leq_literals" (formula "29") (term "0,0"))
                                     (builtin "One Step Simplification" (formula "29"))
                                    (rule "mul_literals" (formula "29") (term "1,0,0,0,0,0"))
                                    (rule "polySimp_addLiterals" (formula "29") (term "0,0,0,0"))
                                    (rule "add_literals" (formula "29") (term "0,0,0,0"))
                                    (rule "polySimp_pullOutFactor0b" (formula "29") (term "0,0"))
                                    (rule "add_literals" (formula "29") (term "1,1,0,0"))
                                    (rule "times_zero_1" (formula "29") (term "1,0,0"))
                                    (rule "add_zero_right" (formula "29") (term "0,0"))
                                    (rule "qeq_literals" (formula "29") (term "0"))
                                     (builtin "One Step Simplification" (formula "29"))
                                    (rule "Definition_axiom_for_bufferLen_in_de_wiesler_Buffers" (formula "64") (term "0"))
                                    (rule "Definition_axiom_for_bufferLen_in_de_wiesler_Buffers" (formula "60") (term "0"))
                                    (rule "pullOutSelect" (formula "60") (term "0") (inst "selectSK=arr_3"))
                                    (rule "simplifySelectOfAnon" (formula "60"))
                                     (builtin "One Step Simplification" (formula "60") (ifInst ""  (formula "72")) (ifInst ""  (formula "3")))
                                    (rule "eqSymm" (formula "61"))
                                    (rule "applyEqReverse" (formula "60") (term "1") (ifseqformula "61"))
                                    (rule "hideAuxiliaryEq" (formula "61"))
                                    (rule "elementOfArrayRangeConcrete" (formula "60") (term "0,0"))
                                    (rule "replace_known_right" (formula "60") (term "0,0,0,0") (ifseqformula "79"))
                                     (builtin "One Step Simplification" (formula "60") (ifInst ""  (formula "64")))
                                    (rule "true_left" (formula "60"))
                                    (rule "nnf_imp2or" (formula "13") (term "0"))
                                    (rule "nnf_imp2or" (formula "41") (term "0"))
                                    (rule "nnf_imp2or" (formula "66") (term "0"))
                                    (rule "Definition_axiom_for_bufferLen_in_de_wiesler_Buffers" (formula "15") (term "0,0,1,1,0"))
                                    (rule "polySimp_addComm0" (formula "15") (term "0,1,1,0"))
                                    (rule "nnf_imp2or" (formula "26") (term "0"))
                                    (rule "Definition_axiom_for_classOf_in_de_wiesler_Classifier" (formula "58") (term "0,0,2,0"))
                                    (rule "Class_invariant_axiom_for_de_wiesler_Buffers" (formula "62") (term "0"))
                                    (rule "replace_known_right" (formula "62") (term "0,1,0") (ifseqformula "70"))
                                     (builtin "One Step Simplification" (formula "62") (ifInst ""  (formula "71")))
                                    (rule "andLeft" (formula "62"))
                                    (rule "andLeft" (formula "63"))
                                    (rule "replace_known_left" (formula "59") (term "0,1,1") (ifseqformula "63"))
                                     (builtin "One Step Simplification" (formula "59") (ifInst ""  (formula "64")))
                                    (rule "true_left" (formula "59"))
                                    (rule "inEqSimp_subsumption1" (formula "60") (ifseqformula "62"))
                                    (rule "leq_literals" (formula "60") (term "0"))
                                     (builtin "One Step Simplification" (formula "60"))
                                    (rule "true_left" (formula "60"))
                                    (rule "inEqSimp_subsumption0" (formula "59") (ifseqformula "62"))
                                    (rule "leq_literals" (formula "59") (term "0"))
                                     (builtin "One Step Simplification" (formula "59"))
                                    (rule "true_left" (formula "59"))
                                    (rule "commute_or" (formula "15") (term "0,0,0"))
                                    (rule "Contract_axiom_for_count_in_Buffers" (formula "42") (term "0"))
                                    (rule "replace_known_left" (formula "42") (term "1,0,0") (ifseqformula "24"))
                                     (builtin "One Step Simplification" (formula "42") (ifInst ""  (formula "60")) (ifInst ""  (formula "17")) (ifInst ""  (formula "89")) (ifInst ""  (formula "60")))
                                    (rule "Definition_axiom_for_count_in_de_wiesler_Buffers" (formula "43") (term "0") (inst "b=b"))
                                    (rule "translateJavaCastInt" (formula "43") (term "0"))
                                    (rule "Definition_axiom_for_isClassifiedWith_in_de_wiesler_Buffers" (formula "40") (term "0") (inst "b=b"))
                                     (builtin "One Step Simplification" (formula "40"))
                                    (rule "expand_inInt" (formula "40") (term "1,0,0"))
                                    (rule "replace_int_MAX" (formula "40") (term "1,0,1,0,0"))
                                    (rule "replace_int_MIN" (formula "40") (term "0,1,1,0,0"))
                                    (rule "translateJavaMulInt" (formula "40") (term "0,4,0,1,0"))
                                    (rule "translateJavaMulInt" (formula "40") (term "3,0,1,0"))
                                    (rule "translateJavaAddInt" (formula "40") (term "4,0,1,0"))
                                    (rule "inEqSimp_ltToLeq" (formula "40") (term "1,0,0,0"))
                                    (rule "polySimp_mulComm0" (formula "40") (term "1,0,0,1,0,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "40") (term "0,0,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "40") (term "1,1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "40") (term "1,0,0,0"))
                                    (rule "polySimp_mulComm0" (formula "40") (term "1,1,0,0,0"))
                                    (rule "polySimp_rightDist" (formula "40") (term "1,1,0,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "40") (term "1,1,1,0,0,0"))
                                    (rule "mul_literals" (formula "40") (term "0,1,1,0,0,0"))
                                    (rule "polySimp_elimOne" (formula "40") (term "1,1,1,0,0,0"))
                                    (rule "commute_or" (formula "14") (term "0,0,0,0"))
                                    (rule "Class_invariant_axiom_for_de_wiesler_Tree" (formula "56"))
                                    (rule "andLeft" (formula "56"))
                                    (rule "notLeft" (formula "56"))
                                    (rule "notLeft" (formula "56"))
                                    (rule "applyEq" (formula "68") (term "0") (ifseqformula "53"))
                                    (rule "Contract_axiom_for_isSortedSliceTransitive_in_Functions" (formula "54") (term "0"))
                                    (rule "replace_known_left" (formula "54") (term "1,0") (ifseqformula "17"))
                                     (builtin "One Step Simplification" (formula "54") (ifInst ""  (formula "69")) (ifInst ""  (formula "55")))
                                    (rule "Definition_axiom_for_isSortedSliceTransitive_in_de_wiesler_Functions" (formula "55") (term "0") (inst "i=i") (inst "j=j_1"))
                                     (builtin "One Step Simplification" (formula "55"))
                                    (rule "expand_inInt" (formula "55") (term "1,0,0"))
                                    (rule "expand_inInt" (formula "55") (term "1,0,0,1,0"))
                                    (rule "replace_int_MIN" (formula "55") (term "0,1,1,0,0"))
                                    (rule "replace_int_MAX" (formula "55") (term "1,0,1,0,0"))
                                    (rule "replace_int_MIN" (formula "55") (term "0,1,1,0,0,1,0"))
                                    (rule "replace_int_MAX" (formula "55") (term "1,0,1,0,0,1,0"))
                                    (rule "inEqSimp_ltToLeq" (formula "55") (term "1,0,0,0"))
                                    (rule "polySimp_mulComm0" (formula "55") (term "1,0,0,1,0,0,0"))
                                    (rule "inEqSimp_ltToLeq" (formula "55") (term "1,0,0,0,1,0"))
                                    (rule "polySimp_mulComm0" (formula "55") (term "1,0,0,1,0,0,0,1,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "55") (term "0,0,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "55") (term "1,0,1,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "55") (term "0,0,0,0,1,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "55") (term "1,1,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "55") (term "1,1,0,0,1,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "55") (term "1,0,0,0"))
                                    (rule "polySimp_mulComm0" (formula "55") (term "1,1,0,0,0"))
                                    (rule "polySimp_rightDist" (formula "55") (term "1,1,0,0,0"))
                                    (rule "mul_literals" (formula "55") (term "0,1,1,0,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "55") (term "1,1,1,0,0,0"))
                                    (rule "polySimp_elimOne" (formula "55") (term "1,1,1,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "55") (term "1,0,0,0,1,0"))
                                    (rule "polySimp_mulComm0" (formula "55") (term "1,1,0,0,0,1,0"))
                                    (rule "polySimp_rightDist" (formula "55") (term "1,1,0,0,0,1,0"))
                                    (rule "mul_literals" (formula "55") (term "0,1,1,0,0,0,1,0"))
                                    (rule "polySimp_mulLiterals" (formula "55") (term "1,1,1,0,0,0,1,0"))
                                    (rule "polySimp_elimOne" (formula "55") (term "1,1,1,0,0,0,1,0"))
                                    (rule "ifthenelse_split" (formula "10") (term "0"))
                                    (branch "j_0 >= 1 TRUE"
                                       (rule "applyEqReverse" (formula "12") (term "1,1,1") (ifseqformula "11"))
                                       (rule "hideAuxiliaryEq" (formula "11"))
                                       (rule "replace_known_left" (formula "11") (term "0") (ifseqformula "10"))
                                        (builtin "One Step Simplification" (formula "11"))
                                       (rule "andLeft" (formula "11"))
                                       (rule "inEqSimp_commuteGeq" (formula "12"))
                                       (rule "inEqSimp_subsumption1" (formula "9") (ifseqformula "10"))
                                       (rule "leq_literals" (formula "9") (term "0"))
                                        (builtin "One Step Simplification" (formula "9"))
                                       (rule "true_left" (formula "9"))
                                       (rule "nnf_notAnd" (formula "13") (term "0,0"))
                                       (rule "nnf_notAnd" (formula "41") (term "0,0"))
                                       (rule "nnf_notAnd" (formula "66") (term "0,0"))
                                       (rule "nnf_notAnd" (formula "26") (term "0,0"))
                                       (rule "nnf_imp2or" (formula "40") (term "0"))
                                       (rule "nnf_imp2or" (formula "55") (term "0"))
                                       (rule "Contract_axiom_for_isClassifiedBlocksRange_in_Classifier" (formula "39") (term "0"))
                                       (rule "translateJavaSubInt" (formula "39") (term "0,0,0,0,0,0,0"))
                                       (rule "replace_known_left" (formula "39") (term "1,0,0,0") (ifseqformula "17"))
                                        (builtin "One Step Simplification" (formula "39") (ifInst ""  (formula "92")) (ifInst ""  (formula "18")) (ifInst ""  (formula "89")))
                                       (rule "polySimp_elimSub" (formula "39") (term "0,0,0,0"))
                                       (rule "polySimp_pullOutFactor1b" (formula "39") (term "0,0,0,0"))
                                       (rule "add_literals" (formula "39") (term "1,1,0,0,0,0"))
                                       (rule "times_zero_1" (formula "39") (term "1,0,0,0,0"))
                                       (rule "add_zero_right" (formula "39") (term "0,0,0,0"))
                                       (rule "Definition_axiom_for_isClassifiedBlocksRange_in_de_wiesler_Classifier" (formula "40") (term "0") (inst "block=block"))
                                        (builtin "One Step Simplification" (formula "40"))
                                       (rule "expand_inInt" (formula "40") (term "1,0,0"))
                                       (rule "replace_int_MAX" (formula "40") (term "1,0,1,0,0"))
                                       (rule "replace_int_MIN" (formula "40") (term "0,1,1,0,0"))
                                       (rule "translateJavaAddInt" (formula "40") (term "0,1,4,0,1,0"))
                                       (rule "translateJavaDivInt" (formula "40") (term "1,1,0,0,0"))
                                       (rule "translateJavaAddInt" (formula "40") (term "3,0,1,0"))
                                       (rule "translateJavaAddInt" (formula "40") (term "4,0,1,0"))
                                       (rule "translateJavaSubInt" (formula "40") (term "0,1,1,0,0,0"))
                                       (rule "translateJavaMulInt" (formula "40") (term "1,3,0,1,0"))
                                       (rule "translateJavaMulInt" (formula "40") (term "1,4,0,1,0"))
                                       (rule "polySimp_elimSub" (formula "40") (term "0,1,1,0,0,0"))
                                       (rule "polySimp_pullOutFactor1b" (formula "40") (term "0,1,1,0,0,0"))
                                       (rule "add_literals" (formula "40") (term "1,1,0,1,1,0,0,0"))
                                       (rule "times_zero_1" (formula "40") (term "1,0,1,1,0,0,0"))
                                       (rule "add_zero_right" (formula "40") (term "0,1,1,0,0,0"))
                                       (rule "polySimp_mulComm0" (formula "40") (term "1,4,0,1,0"))
                                       (rule "polySimp_addComm0" (formula "40") (term "1,1,4,0,1,0"))
                                       (rule "polySimp_rightDist" (formula "40") (term "1,4,0,1,0"))
                                       (rule "mul_literals" (formula "40") (term "0,1,4,0,1,0"))
                                       (rule "polySimp_addAssoc" (formula "40") (term "4,0,1,0"))
                                       (rule "polySimp_addComm0" (formula "40") (term "0,4,0,1,0"))
                                       (rule "inEqSimp_ltToLeq" (formula "40") (term "1,0,0,0"))
                                       (rule "polySimp_mulComm0" (formula "40") (term "1,0,0,1,0,0,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "40") (term "0,0,0,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "40") (term "1,1,0,0"))
                                       (rule "applyEq" (formula "40") (term "0,1,0,0,1,0,0,0") (ifseqformula "48"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "40") (term "1,0,0,0"))
                                       (rule "polySimp_mulComm0" (formula "40") (term "1,1,0,0,0"))
                                       (rule "polySimp_rightDist" (formula "40") (term "1,1,0,0,0"))
                                       (rule "mul_literals" (formula "40") (term "0,1,1,0,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "40") (term "1,1,1,0,0,0"))
                                       (rule "polySimp_elimOne" (formula "40") (term "1,1,1,0,0,0"))
                                       (rule "nnf_notAnd" (formula "41") (term "0,0"))
                                       (rule "nnf_notAnd" (formula "56") (term "0,0"))
                                       (rule "nnf_notAnd" (formula "13") (term "0,0,0"))
                                       (rule "inEqSimp_notLeq" (formula "13") (term "1,0,0,0"))
                                       (rule "polySimp_rightDist" (formula "13") (term "1,0,0,1,0,0,0"))
                                       (rule "mul_literals" (formula "13") (term "0,1,0,0,1,0,0,0"))
                                       (rule "polySimp_addAssoc" (formula "13") (term "0,0,1,0,0,0"))
                                       (rule "add_literals" (formula "13") (term "0,0,0,1,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "13") (term "1,0,0,0"))
                                       (rule "polySimp_mulComm0" (formula "13") (term "1,1,0,0,0"))
                                       (rule "polySimp_rightDist" (formula "13") (term "1,1,0,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "13") (term "1,1,1,0,0,0"))
                                       (rule "mul_literals" (formula "13") (term "0,1,1,0,0,0"))
                                       (rule "polySimp_elimOne" (formula "13") (term "1,1,1,0,0,0"))
                                       (rule "inEqSimp_notGeq" (formula "13") (term "0,0,0,0"))
                                       (rule "mul_literals" (formula "13") (term "1,0,0,0,0,0,0"))
                                       (rule "add_literals" (formula "13") (term "0,0,0,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "0,0,0,0"))
                                       (rule "mul_literals" (formula "13") (term "1,0,0,0,0"))
                                       (rule "nnf_notAnd" (formula "13") (term "1,0,0"))
                                       (rule "inEqSimp_notGeq" (formula "13") (term "1,1,0,0"))
                                       (rule "mul_literals" (formula "13") (term "1,0,0,1,1,0,0"))
                                       (rule "add_literals" (formula "13") (term "0,0,1,1,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "1,1,0,0"))
                                       (rule "mul_literals" (formula "13") (term "1,1,1,0,0"))
                                       (rule "inEqSimp_notLeq" (formula "13") (term "0,1,0,0"))
                                       (rule "mul_literals" (formula "13") (term "1,0,0,0,1,0,0"))
                                       (rule "add_literals" (formula "13") (term "0,0,0,1,0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "13") (term "0,1,0,0"))
                                       (rule "mul_literals" (formula "13") (term "1,0,1,0,0"))
                                       (rule "nnf_notAnd" (formula "42") (term "0,0,0"))
                                       (rule "inEqSimp_notLeq" (formula "42") (term "1,0,0,0"))
                                       (rule "polySimp_rightDist" (formula "42") (term "1,0,0,1,0,0,0"))
                                       (rule "mul_literals" (formula "42") (term "0,1,0,0,1,0,0,0"))
                                       (rule "polySimp_addAssoc" (formula "42") (term "0,0,1,0,0,0"))
                                       (rule "add_literals" (formula "42") (term "0,0,0,1,0,0,0"))
                                       (rule "add_zero_left" (formula "42") (term "0,0,1,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "42") (term "1,0,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "42") (term "1,1,0,0,0"))
                                       (rule "polySimp_elimOne" (formula "42") (term "1,1,0,0,0"))
                                       (rule "inEqSimp_notGeq" (formula "42") (term "0,0,0,0"))
                                       (rule "mul_literals" (formula "42") (term "1,0,0,0,0,0,0"))
                                       (rule "add_zero_right" (formula "42") (term "0,0,0,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "42") (term "0,0,0,0"))
                                       (rule "mul_literals" (formula "42") (term "1,0,0,0,0"))
                                       (rule "nnf_notAnd" (formula "42") (term "1,0,0"))
                                       (rule "inEqSimp_notLeq" (formula "42") (term "0,1,0,0"))
                                       (rule "mul_literals" (formula "42") (term "1,0,0,0,1,0,0"))
                                       (rule "add_literals" (formula "42") (term "0,0,0,1,0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "42") (term "0,1,0,0"))
                                       (rule "mul_literals" (formula "42") (term "1,0,1,0,0"))
                                       (rule "inEqSimp_notGeq" (formula "42") (term "1,1,0,0"))
                                       (rule "mul_literals" (formula "42") (term "1,0,0,1,1,0,0"))
                                       (rule "add_literals" (formula "42") (term "0,0,1,1,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "42") (term "1,1,0,0"))
                                       (rule "mul_literals" (formula "42") (term "1,1,1,0,0"))
                                       (rule "nnf_notAnd" (formula "67") (term "1,0,0"))
                                       (rule "inEqSimp_notLeq" (formula "67") (term "0,1,0,0"))
                                       (rule "mul_literals" (formula "67") (term "1,0,0,0,1,0,0"))
                                       (rule "add_literals" (formula "67") (term "0,0,0,1,0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "67") (term "0,1,0,0"))
                                       (rule "mul_literals" (formula "67") (term "1,0,1,0,0"))
                                       (rule "inEqSimp_notGeq" (formula "67") (term "1,1,0,0"))
                                       (rule "mul_literals" (formula "67") (term "1,0,0,1,1,0,0"))
                                       (rule "add_literals" (formula "67") (term "0,0,1,1,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "67") (term "1,1,0,0"))
                                       (rule "mul_literals" (formula "67") (term "1,1,1,0,0"))
                                       (rule "nnf_notAnd" (formula "67") (term "0,0,0"))
                                       (rule "inEqSimp_notGeq" (formula "67") (term "0,0,0,0"))
                                       (rule "mul_literals" (formula "67") (term "1,0,0,0,0,0,0"))
                                       (rule "add_zero_right" (formula "67") (term "0,0,0,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "67") (term "0,0,0,0"))
                                       (rule "mul_literals" (formula "67") (term "1,0,0,0,0"))
                                       (rule "inEqSimp_notLeq" (formula "67") (term "1,0,0,0"))
                                       (rule "polySimp_rightDist" (formula "67") (term "1,0,0,1,0,0,0"))
                                       (rule "mul_literals" (formula "67") (term "0,1,0,0,1,0,0,0"))
                                       (rule "polySimp_addAssoc" (formula "67") (term "0,0,1,0,0,0"))
                                       (rule "add_literals" (formula "67") (term "0,0,0,1,0,0,0"))
                                       (rule "add_zero_left" (formula "67") (term "0,0,1,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "67") (term "1,0,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "67") (term "1,1,0,0,0"))
                                       (rule "polySimp_elimOne" (formula "67") (term "1,1,0,0,0"))
                                       (rule "nnf_notAnd" (formula "26") (term "1,0,0"))
                                       (rule "inEqSimp_notLeq" (formula "26") (term "0,1,0,0"))
                                       (rule "mul_literals" (formula "26") (term "1,0,0,0,1,0,0"))
                                       (rule "add_literals" (formula "26") (term "0,0,0,1,0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "26") (term "0,1,0,0"))
                                       (rule "mul_literals" (formula "26") (term "1,0,1,0,0"))
                                       (rule "inEqSimp_notGeq" (formula "26") (term "1,1,0,0"))
                                       (rule "mul_literals" (formula "26") (term "1,0,0,1,1,0,0"))
                                       (rule "add_literals" (formula "26") (term "0,0,1,1,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "1,1,0,0"))
                                       (rule "mul_literals" (formula "26") (term "1,1,1,0,0"))
                                       (rule "nnf_notAnd" (formula "26") (term "0,0,0"))
                                       (rule "inEqSimp_notLeq" (formula "26") (term "1,0,0,0"))
                                       (rule "polySimp_rightDist" (formula "26") (term "1,0,0,1,0,0,0"))
                                       (rule "mul_literals" (formula "26") (term "0,1,0,0,1,0,0,0"))
                                       (rule "polySimp_addAssoc" (formula "26") (term "0,0,1,0,0,0"))
                                       (rule "add_literals" (formula "26") (term "0,0,0,1,0,0,0"))
                                       (rule "add_zero_left" (formula "26") (term "0,0,1,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "26") (term "1,0,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "26") (term "1,1,0,0,0"))
                                       (rule "polySimp_elimOne" (formula "26") (term "1,1,0,0,0"))
                                       (rule "inEqSimp_notGeq" (formula "26") (term "0,0,0,0"))
                                       (rule "mul_literals" (formula "26") (term "1,0,0,0,0,0,0"))
                                       (rule "add_zero_right" (formula "26") (term "0,0,0,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "0,0,0,0"))
                                       (rule "mul_literals" (formula "26") (term "1,0,0,0,0"))
                                       (rule "nnf_imp2or" (formula "56") (term "0,1,0"))
                                       (rule "Contract_axiom_for_allElementsCounted_in_Classifier" (formula "38") (term "0"))
                                       (rule "replace_known_left" (formula "38") (term "1,0,0") (ifseqformula "18"))
                                        (builtin "One Step Simplification" (formula "38") (ifInst ""  (formula "93")) (ifInst ""  (formula "91")) (ifInst ""  (formula "17")) (ifInst ""  (formula "90")))
                                       (rule "inEqSimp_commuteGeq" (formula "38") (term "0,0"))
                                       (rule "applyEq" (formula "38") (term "0,0,0") (ifseqformula "37"))
                                       (rule "inEqSimp_subsumption0" (formula "38") (term "0,0") (ifseqformula "28"))
                                       (rule "inEqSimp_homoInEq0" (formula "38") (term "0,0,0"))
                                       (rule "polySimp_mulComm0" (formula "38") (term "1,0,0,0,0"))
                                       (rule "polySimp_rightDist" (formula "38") (term "1,0,0,0,0"))
                                       (rule "mul_literals" (formula "38") (term "0,1,0,0,0,0"))
                                       (rule "polySimp_addAssoc" (formula "38") (term "0,0,0,0"))
                                       (rule "polySimp_addComm0" (formula "38") (term "0,0,0,0,0"))
                                       (rule "polySimp_pullOutFactor1b" (formula "38") (term "0,0,0,0"))
                                       (rule "add_literals" (formula "38") (term "1,1,0,0,0,0"))
                                       (rule "times_zero_1" (formula "38") (term "1,0,0,0,0"))
                                       (rule "add_literals" (formula "38") (term "0,0,0,0"))
                                       (rule "qeq_literals" (formula "38") (term "0,0,0"))
                                        (builtin "One Step Simplification" (formula "38"))
                                       (rule "Definition_axiom_for_allElementsCounted_in_de_wiesler_Classifier" (formula "39") (term "0") (inst "b=b") (inst "b_0=b_0"))
                                        (builtin "One Step Simplification" (formula "39"))
                                       (rule "expand_inInt" (formula "39") (term "1,0,0,0"))
                                       (rule "replace_int_MAX" (formula "39") (term "1,0,1,0,0,0"))
                                       (rule "replace_int_MIN" (formula "39") (term "0,1,1,0,0,0"))
                                       (rule "andLeft" (formula "39"))
                                       (rule "translateJavaCastInt" (formula "40") (term "0"))
                                       (rule "translateJavaSubInt" (formula "40") (term "1"))
                                       (rule "polySimp_elimSub" (formula "40") (term "1"))
                                       (rule "polySimp_pullOutFactor1b" (formula "40") (term "1"))
                                       (rule "add_literals" (formula "40") (term "1,1,1"))
                                       (rule "times_zero_1" (formula "40") (term "1,1"))
                                       (rule "add_zero_right" (formula "40") (term "1"))
                                       (rule "inEqSimp_ltToLeq" (formula "39") (term "1,0,0,0"))
                                       (rule "polySimp_mulComm0" (formula "39") (term "1,0,0,1,0,0,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "39") (term "1,1,0,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "39") (term "0,0,0,0"))
                                       (rule "applyEq" (formula "40") (term "1,0") (ifseqformula "37"))
                                       (rule "applyEq" (formula "39") (term "0,1,0,0,1,0,0,0") (ifseqformula "37"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "39") (term "1,0,0,0"))
                                       (rule "polySimp_mulComm0" (formula "39") (term "1,1,0,0,0"))
                                       (rule "polySimp_rightDist" (formula "39") (term "1,1,0,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "39") (term "1,1,1,0,0,0"))
                                       (rule "mul_literals" (formula "39") (term "0,1,1,0,0,0"))
                                       (rule "polySimp_elimOne" (formula "39") (term "1,1,1,0,0,0"))
                                       (rule "Definition_axiom_for_countClassOfSliceEq_in_de_wiesler_Classifier" (formula "1") (term "0") (inst "i=i"))
                                       (rule "Contract_axiom_for_countClassOfSliceEq_in_Classifier" (formula "14") (term "1,1,0"))
                                       (rule "replace_known_left" (formula "14") (term "1,0,0,0") (ifseqformula "18"))
                                        (builtin "One Step Simplification" (formula "14") (ifInst ""  (formula "95")) (ifInst ""  (formula "19")) (ifInst ""  (formula "92")) (ifInst ""  (formula "39")))
                                       (rule "true_left" (formula "14"))
                                       (rule "Definition_axiom_for_countClassOfSliceEq_in_de_wiesler_Classifier" (formula "14") (term "1,1,0") (inst "i=i"))
                                       (rule "eqSymm" (formula "14") (term "1,0"))
                                       (rule "Definition_axiom_for_countClassOfSliceEq_in_de_wiesler_Classifier" (formula "12") (term "0,2,0") (inst "i=i"))
                                       (rule "polySimp_addComm0" (formula "12") (term "2,0"))
                                       (rule "nnf_imp2or" (formula "42") (term "0"))
                                       (rule "nnf_notAnd" (formula "43") (term "0,0,0"))
                                       (rule "inEqSimp_notGeq" (formula "43") (term "0,0,0,0"))
                                       (rule "mul_literals" (formula "43") (term "1,0,0,0,0,0,0"))
                                       (rule "add_zero_right" (formula "43") (term "0,0,0,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "43") (term "0,0,0,0"))
                                       (rule "mul_literals" (formula "43") (term "1,0,0,0,0"))
                                       (rule "inEqSimp_notLeq" (formula "43") (term "1,0,0,0"))
                                       (rule "polySimp_rightDist" (formula "43") (term "1,0,0,1,0,0,0"))
                                       (rule "mul_literals" (formula "43") (term "0,1,0,0,1,0,0,0"))
                                       (rule "polySimp_addAssoc" (formula "43") (term "0,0,1,0,0,0"))
                                       (rule "add_literals" (formula "43") (term "0,0,0,1,0,0,0"))
                                       (rule "add_zero_left" (formula "43") (term "0,0,1,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "43") (term "1,0,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "43") (term "1,1,0,0,0"))
                                       (rule "polySimp_elimOne" (formula "43") (term "1,1,0,0,0"))
                                       (rule "nnf_notAnd" (formula "43") (term "1,0,0"))
                                       (rule "inEqSimp_notGeq" (formula "43") (term "1,1,0,0"))
                                       (rule "mul_literals" (formula "43") (term "1,0,0,1,1,0,0"))
                                       (rule "add_literals" (formula "43") (term "0,0,1,1,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "43") (term "1,1,0,0"))
                                       (rule "mul_literals" (formula "43") (term "1,1,1,0,0"))
                                       (rule "inEqSimp_notLeq" (formula "43") (term "0,1,0,0"))
                                       (rule "mul_literals" (formula "43") (term "1,0,0,0,1,0,0"))
                                       (rule "add_literals" (formula "43") (term "0,0,0,1,0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "43") (term "0,1,0,0"))
                                       (rule "mul_literals" (formula "43") (term "1,0,1,0,0"))
                                       (rule "nnf_notAnd" (formula "58") (term "0,0,0"))
                                       (rule "inEqSimp_notLeq" (formula "58") (term "1,0,0,0"))
                                       (rule "polySimp_rightDist" (formula "58") (term "1,0,0,1,0,0,0"))
                                       (rule "mul_literals" (formula "58") (term "0,1,0,0,1,0,0,0"))
                                       (rule "polySimp_addAssoc" (formula "58") (term "0,0,1,0,0,0"))
                                       (rule "add_literals" (formula "58") (term "0,0,0,1,0,0,0"))
                                       (rule "add_zero_left" (formula "58") (term "0,0,1,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "58") (term "1,0,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "58") (term "1,1,0,0,0"))
                                       (rule "polySimp_elimOne" (formula "58") (term "1,1,0,0,0"))
                                       (rule "inEqSimp_notGeq" (formula "58") (term "0,0,0,0"))
                                       (rule "mul_literals" (formula "58") (term "1,0,0,0,0,0,0"))
                                       (rule "add_literals" (formula "58") (term "0,0,0,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "58") (term "0,0,0,0"))
                                       (rule "mul_literals" (formula "58") (term "1,0,0,0,0"))
                                       (rule "nnf_notAnd" (formula "58") (term "1,0,0"))
                                       (rule "inEqSimp_notGeq" (formula "58") (term "1,1,0,0"))
                                       (rule "mul_literals" (formula "58") (term "1,0,0,1,1,0,0"))
                                       (rule "add_literals" (formula "58") (term "0,0,1,1,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "58") (term "1,1,0,0"))
                                       (rule "mul_literals" (formula "58") (term "1,1,1,0,0"))
                                       (rule "inEqSimp_notLeq" (formula "58") (term "0,1,0,0"))
                                       (rule "mul_literals" (formula "58") (term "1,0,0,0,1,0,0"))
                                       (rule "add_literals" (formula "58") (term "0,0,0,1,0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "58") (term "0,1,0,0"))
                                       (rule "mul_literals" (formula "58") (term "1,0,1,0,0"))
                                       (rule "ifthenelse_split" (formula "55") (term "0"))
                                       (branch "self.equal_buckets = TRUE TRUE"
                                          (rule "newSym_eq" (formula "56") (inst "l=l_1") (inst "newSymDef=mul(int::final(buffers,
               de.wiesler.Buffers::$num_buckets),
    Z(0(#)))"))
                                          (rule "times_zero_1" (formula "56") (term "1,1"))
                                          (rule "add_zero_right" (formula "56") (term "1"))
                                          (rule "applyEq" (formula "60") (term "1,1,0,0,0") (ifseqformula "56"))
                                          (rule "applyEq" (formula "61") (term "1,0,2,0") (ifseqformula "56"))
                                          (rule "eqSymm" (formula "61"))
                                          (rule "applyEq" (formula "60") (term "1,1,1,0,0,0,0,1,0") (ifseqformula "56"))
                                          (rule "applyEq" (formula "57") (term "0,0") (ifseqformula "56"))
                                          (rule "eqSymm" (formula "57"))
                                          (rule "applyEq" (formula "59") (term "3,0") (ifseqformula "56"))
                                          (rule "applyEq" (formula "71") (term "2,1,0,0,0,1,0") (ifseqformula "57"))
                                          (rule "applyEq" (formula "13") (term "2,1,0,0,1,0") (ifseqformula "57"))
                                          (rule "applyEq" (formula "54") (term "0") (ifseqformula "57"))
                                          (rule "applyEq" (formula "26") (term "1,1,0,0,0") (ifseqformula "57"))
                                          (rule "applyEq" (formula "71") (term "1,1,0,0,0") (ifseqformula "57"))
                                          (rule "applyEq" (formula "14") (term "1,1,0,0,0,0") (ifseqformula "57"))
                                          (rule "applyEq" (formula "40") (term "1,0") (ifseqformula "57"))
                                          (rule "applyEq" (formula "71") (term "2,1,0,0,1,1,0") (ifseqformula "57"))
                                          (rule "applyEq" (formula "43") (term "1,1,0,0,0") (ifseqformula "57"))
                                          (rule "applyEq" (formula "44") (term "1,1,0,0,0") (ifseqformula "57"))
                                          (rule "applyEq" (formula "53") (term "0") (ifseqformula "57"))
                                          (rule "applyEq" (formula "13") (term "2,1,0,1,1,0") (ifseqformula "57"))
                                          (rule "applyEq" (formula "15") (term "2,1,0,2,0,1,0") (ifseqformula "57"))
                                          (rule "applyEq" (formula "61") (term "1,0,2,0") (ifseqformula "56"))
                                          (rule "eqSymm" (formula "61"))
                                          (rule "applyEq" (formula "46") (term "1,0") (ifseqformula "57"))
                                          (rule "applyEq" (formula "28") (term "0") (ifseqformula "57"))
                                          (rule "inEqSimp_homoInEq0" (formula "28"))
                                          (rule "polySimp_mulLiterals" (formula "28") (term "1,0"))
                                          (rule "polySimp_addComm1" (formula "28") (term "0"))
                                          (rule "applyEq" (formula "39") (term "1,1,1,0,0,0") (ifseqformula "57"))
                                          (rule "applyEq" (formula "8") (term "0") (ifseqformula "57"))
                                          (rule "inEqSimp_homoInEq1" (formula "8"))
                                          (rule "polySimp_mulLiterals" (formula "8") (term "1,0"))
                                          (rule "polySimp_addComm1" (formula "8") (term "0"))
                                          (rule "applyEq" (formula "14") (term "2,1,0,1,1,0") (ifseqformula "57"))
                                          (rule "applyEq" (formula "15") (term "2,1,0,1,1,1,0") (ifseqformula "57"))
                                          (rule "applyEq" (formula "37") (term "1") (ifseqformula "57"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "28"))
                                          (rule "polySimp_mulComm0" (formula "28") (term "1"))
                                          (rule "polySimp_rightDist" (formula "28") (term "1"))
                                          (rule "polySimp_mulLiterals" (formula "28") (term "1,1"))
                                          (rule "mul_literals" (formula "28") (term "0,1"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "8"))
                                          (rule "polySimp_mulComm0" (formula "8") (term "1"))
                                          (rule "polySimp_rightDist" (formula "8") (term "1"))
                                          (rule "polySimp_mulLiterals" (formula "8") (term "1,1"))
                                          (rule "mul_literals" (formula "8") (term "0,1"))
                                          (rule "elimGcdGeq_antec" (formula "53") (inst "elimGcdRightDiv=Z(1(#))") (inst "elimGcdLeftDiv=l_1") (inst "elimGcd=Z(2(#))"))
                                          (rule "polySimp_mulLiterals" (formula "53") (term "1,0,1,0"))
                                          (rule "polySimp_mulLiterals" (formula "53") (term "1,0,0,0,0,1,0"))
                                          (rule "leq_literals" (formula "53") (term "0,0"))
                                           (builtin "One Step Simplification" (formula "53"))
                                          (rule "mul_literals" (formula "53") (term "1,0,0,0,0,0"))
                                          (rule "polySimp_addLiterals" (formula "53") (term "0,0,0,0"))
                                          (rule "add_zero_right" (formula "53") (term "0,0,0,0"))
                                          (rule "polySimp_pullOutFactor0b" (formula "53") (term "0,0"))
                                          (rule "add_literals" (formula "53") (term "1,1,0,0"))
                                          (rule "times_zero_1" (formula "53") (term "1,0,0"))
                                          (rule "add_zero_right" (formula "53") (term "0,0"))
                                          (rule "leq_literals" (formula "53") (term "0"))
                                           (builtin "One Step Simplification" (formula "53"))
                                          (rule "elimGcdLeq_antec" (formula "54") (inst "elimGcdRightDiv=Z(4(6(#)))") (inst "elimGcdLeftDiv=l_1") (inst "elimGcd=Z(2(#))"))
                                          (rule "polySimp_mulLiterals" (formula "54") (term "1,0,1,0"))
                                          (rule "mul_literals" (formula "54") (term "0,1,0,0,0,0,1,0"))
                                          (rule "neg_literal" (formula "54") (term "0,0,0,0,0,1,0"))
                                          (rule "leq_literals" (formula "54") (term "0,0"))
                                           (builtin "One Step Simplification" (formula "54"))
                                          (rule "mul_literals" (formula "54") (term "1,0,0,0,0,0"))
                                          (rule "polySimp_addLiterals" (formula "54") (term "0,0,0,0"))
                                          (rule "add_zero_right" (formula "54") (term "0,0,0,0"))
                                          (rule "polySimp_pullOutFactor0b" (formula "54") (term "0,0"))
                                          (rule "add_literals" (formula "54") (term "1,1,0,0"))
                                          (rule "times_zero_1" (formula "54") (term "1,0,0"))
                                          (rule "add_zero_right" (formula "54") (term "0,0"))
                                          (rule "qeq_literals" (formula "54") (term "0"))
                                           (builtin "One Step Simplification" (formula "54"))
                                          (rule "inEqSimp_exactShadow3" (formula "9") (ifseqformula "8"))
                                          (rule "mul_literals" (formula "9") (term "0,0"))
                                          (rule "polySimp_addAssoc" (formula "9") (term "0"))
                                          (rule "add_literals" (formula "9") (term "0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "9"))
                                          (rule "mul_literals" (formula "9") (term "1"))
                                          (rule "inEqSimp_subsumption6" (formula "9") (ifseqformula "54"))
                                          (rule "greater_literals" (formula "9") (term "0,0"))
                                           (builtin "One Step Simplification" (formula "9"))
                                          (rule "mul_literals" (formula "9") (term "1,0"))
                                          (rule "leq_literals" (formula "9") (term "0"))
                                           (builtin "One Step Simplification" (formula "9"))
                                          (rule "true_left" (formula "9"))
                                          (rule "inEqSimp_exactShadow3" (formula "28") (ifseqformula "27"))
                                          (rule "polySimp_rightDist" (formula "28") (term "0,0"))
                                          (rule "polySimp_mulLiterals" (formula "28") (term "1,0,0"))
                                          (rule "mul_literals" (formula "28") (term "0,0,0"))
                                          (rule "polySimp_addComm1" (formula "28") (term "0"))
                                          (rule "add_literals" (formula "28") (term "0,0"))
                                          (rule "inEqSimp_sepNegMonomial1" (formula "28"))
                                          (rule "polySimp_mulLiterals" (formula "28") (term "0"))
                                          (rule "inEqSimp_subsumption4" (formula "28") (ifseqformula "55"))
                                          (rule "mul_literals" (formula "28") (term "0,1,0"))
                                          (rule "greater_literals" (formula "28") (term "0,0"))
                                           (builtin "One Step Simplification" (formula "28"))
                                          (rule "leq_literals" (formula "28") (term "0"))
                                           (builtin "One Step Simplification" (formula "28"))
                                          (rule "true_left" (formula "28"))
                                          (rule "Definition_axiom_for_bufferLen_in_de_wiesler_Buffers" (formula "44") (term "0,0,1,0"))
                                          (rule "Contract_axiom_for_countClassOfSliceEq_in_Classifier" (formula "15") (term "0,0,1,1,0"))
                                          (rule "replace_known_right" (formula "15") (term "0,1,0,0,0,0") (ifseqformula "97"))
                                           (builtin "One Step Simplification" (formula "15") (ifInst ""  (formula "18")) (ifInst ""  (formula "19")) (ifInst ""  (formula "94")) (ifInst ""  (formula "39")))
                                          (rule "true_left" (formula "15"))
                                          (rule "Definition_axiom_for_countClassOfSliceEq_in_de_wiesler_Classifier" (formula "15") (term "0,0,1,1,0") (inst "i=i"))
                                          (rule "polySimp_homoEq" (formula "15") (term "1,0"))
                                          (rule "polySimp_addComm0" (formula "15") (term "0,0,0,1,0"))
                                          (rule "polySimp_addComm1" (formula "15") (term "0,0,1,0"))
                                          (rule "polySimp_addComm1" (formula "15") (term "0,1,0"))
                                          (rule "polySimp_sepPosMonomial" (formula "15") (term "1,0"))
                                          (rule "polySimp_mulComm0" (formula "15") (term "1,1,0"))
                                          (rule "polySimp_rightDist" (formula "15") (term "1,1,0"))
                                          (rule "polySimp_mulLiterals" (formula "15") (term "1,1,1,0"))
                                          (rule "polySimp_elimOne" (formula "15") (term "1,1,1,0"))
                                          (rule "polySimp_rightDist" (formula "15") (term "0,1,1,0"))
                                          (rule "polySimp_mulComm0" (formula "15") (term "0,0,1,1,0"))
                                          (rule "Class_invariant_axiom_for_de_wiesler_Buffers" (formula "65"))
                                          (rule "andLeft" (formula "65"))
                                          (rule "notLeft" (formula "65"))
                                          (rule "notLeft" (formula "65"))
                                          (rule "Free_class_invariant_axiom_for_de_wiesler_Buffers" (formula "45") (inst "b=b"))
                                           (builtin "One Step Simplification" (formula "45") (ifInst ""  (formula "69")))
                                          (rule "expand_inInt" (formula "45") (term "1,0,0,1"))
                                          (rule "replace_int_MAX" (formula "45") (term "1,0,1,0,0,1"))
                                          (rule "replace_int_MIN" (formula "45") (term "0,1,1,0,0,1"))
                                          (rule "andLeft" (formula "45"))
                                          (rule "andLeft" (formula "45"))
                                          (rule "andLeft" (formula "45"))
                                          (rule "andLeft" (formula "47"))
                                          (rule "notLeft" (formula "45"))
                                          (rule "translateJavaMulInt" (formula "45") (term "1"))
                                          (rule "mul_literals" (formula "45") (term "1"))
                                          (rule "eqSymm" (formula "74"))
                                          (rule "inEqSimp_ltToLeq" (formula "47") (term "1,0,0,0"))
                                          (rule "polySimp_mulComm0" (formula "47") (term "1,0,0,1,0,0,0"))
                                          (rule "inEqSimp_commuteLeq" (formula "47") (term "1,1,0,0"))
                                          (rule "inEqSimp_commuteLeq" (formula "47") (term "0,1,0"))
                                          (rule "inEqSimp_commuteLeq" (formula "47") (term "0,0,0,0"))
                                          (rule "inEqSimp_commuteLeq" (formula "45"))
                                          (rule "applyEq" (formula "46") (term "0") (ifseqformula "59"))
                                          (rule "applyEq" (formula "45") (term "0") (ifseqformula "59"))
                                          (rule "applyEq" (formula "47") (term "0,1,0,0,1,0,0,0") (ifseqformula "59"))
                                          (rule "polySimp_mulLiterals" (formula "47") (term "1,0,0,1,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "47") (term "1,0,0,0"))
                                          (rule "polySimp_mulComm0" (formula "47") (term "1,1,0,0,0"))
                                          (rule "polySimp_rightDist" (formula "47") (term "1,1,0,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "47") (term "1,1,1,0,0,0"))
                                          (rule "mul_literals" (formula "47") (term "0,1,1,0,0,0"))
                                          (rule "inEqSimp_subsumption6" (formula "45") (ifseqformula "55"))
                                          (rule "greater_literals" (formula "45") (term "0,0"))
                                           (builtin "One Step Simplification" (formula "45"))
                                          (rule "mul_literals" (formula "45") (term "1,0"))
                                          (rule "leq_literals" (formula "45") (term "0"))
                                           (builtin "One Step Simplification" (formula "45"))
                                          (rule "true_left" (formula "45"))
                                          (rule "inEqSimp_subsumption4" (formula "45") (ifseqformula "55"))
                                          (rule "mul_literals" (formula "45") (term "0,1,0"))
                                          (rule "greater_literals" (formula "45") (term "0,0"))
                                           (builtin "One Step Simplification" (formula "45"))
                                          (rule "leq_literals" (formula "45") (term "0"))
                                           (builtin "One Step Simplification" (formula "45"))
                                          (rule "true_left" (formula "45"))
                                          (rule "Definition_axiom_for_bufferLen_in_de_wiesler_Buffers" (formula "46") (term "2,0"))
                                          (rule "commute_or_2" (formula "15") (term "0,0"))
                                          (rule "nnf_notAnd" (formula "42") (term "0,0"))
                                          (rule "Definition_axiom_for_isClassOfSlice_in_de_wiesler_Classifier" (formula "43") (term "0,1,0") (inst "i=i"))
                                           (builtin "One Step Simplification" (formula "43"))
                                          (rule "expand_inInt" (formula "43") (term "1,0,0,1,0"))
                                          (rule "replace_int_MAX" (formula "43") (term "1,0,1,0,0,1,0"))
                                          (rule "replace_int_MIN" (formula "43") (term "0,1,1,0,0,1,0"))
                                          (rule "inEqSimp_ltToLeq" (formula "43") (term "1,0,0,0,1,0"))
                                          (rule "polySimp_rightDist" (formula "43") (term "1,0,0,1,0,0,0,1,0"))
                                          (rule "polySimp_mulAssoc" (formula "43") (term "0,1,0,0,1,0,0,0,1,0"))
                                          (rule "polySimp_mulComm0" (formula "43") (term "0,0,1,0,0,1,0,0,0,1,0"))
                                          (rule "polySimp_mulLiterals" (formula "43") (term "0,1,0,0,1,0,0,0,1,0"))
                                          (rule "polySimp_addAssoc" (formula "43") (term "0,0,1,0,0,0,1,0"))
                                          (rule "inEqSimp_commuteLeq" (formula "43") (term "0,0,0,0,1,0"))
                                          (rule "inEqSimp_commuteLeq" (formula "43") (term "1,1,0,0,1,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "43") (term "1,0,0,0,1,0"))
                                          (rule "polySimp_mulComm0" (formula "43") (term "1,1,0,0,0,1,0"))
                                          (rule "polySimp_rightDist" (formula "43") (term "1,1,0,0,0,1,0"))
                                          (rule "polySimp_mulLiterals" (formula "43") (term "1,1,1,0,0,0,1,0"))
                                          (rule "polySimp_elimOne" (formula "43") (term "1,1,1,0,0,0,1,0"))
                                          (rule "polySimp_rightDist" (formula "43") (term "0,1,1,0,0,0,1,0"))
                                          (rule "polySimp_mulLiterals" (formula "43") (term "1,0,1,1,0,0,0,1,0"))
                                          (rule "mul_literals" (formula "43") (term "0,0,1,1,0,0,0,1,0"))
                                          (rule "Free_class_invariant_axiom_for_de_wiesler_Classifier" (formula "41") (term "1,1"))
                                           (builtin "One Step Simplification" (formula "41") (ifInst ""  (formula "55")) (ifInst ""  (formula "58")))
                                          (rule "eqSymm" (formula "41") (term "1,0,0,0,1,1"))
                                          (rule "translateJavaSubInt" (formula "41") (term "0,2,1,1,0,1,1"))
                                          (rule "translateJavaSubInt" (formula "41") (term "0,2,0,1,0,1,1"))
                                          (rule "translateJavaMulInt" (formula "41") (term "0,1,0,0,0,1,1"))
                                          (rule "eqSymm" (formula "41") (term "1,0,1,1"))
                                          (rule "polySimp_elimSub" (formula "41") (term "0,2,1,1,0,1,1"))
                                          (rule "mul_literals" (formula "41") (term "1,0,2,1,1,0,1,1"))
                                          (rule "polySimp_elimSub" (formula "41") (term "0,2,0,1,0,1,1"))
                                          (rule "mul_literals" (formula "41") (term "1,0,2,0,1,0,1,1"))
                                          (rule "polySimp_mulComm0" (formula "41") (term "0,1,0,0,0,1,1"))
                                          (rule "polySimp_addComm0" (formula "41") (term "0,2,1,1,0,1,1"))
                                          (rule "polySimp_addComm0" (formula "41") (term "0,2,0,1,0,1,1"))
                                          (rule "inEqSimp_commuteLeq" (formula "41") (term "0,0,0,0,0,1,1"))
                                          (rule "applyEq" (formula "41") (term "0,1,0,0,0,0,1,1") (ifseqformula "37"))
                                          (rule "applyEq" (formula "41") (term "1,0,2,0,1,0,1,1") (ifseqformula "56"))
                                          (rule "eqSymm" (formula "41") (term "1,0,1,1"))
                                          (rule "applyEq" (formula "41") (term "3,0,1,0,0,1,1") (ifseqformula "56"))
                                          (rule "applyEq" (formula "41") (term "0,0,0,0,0,0,1,1") (ifseqformula "37"))
                                          (rule "applyEq" (formula "41") (term "0,0,1,0,0,0,1,1") (ifseqformula "56"))
                                          (rule "eqSymm" (formula "41") (term "1,0,0,0,1,1"))
                                          (rule "replace_known_left" (formula "41") (term "1,0,0,0,1,1") (ifseqformula "37"))
                                           (builtin "One Step Simplification" (formula "41"))
                                          (rule "applyEq" (formula "41") (term "1,0,2,0,1,0,1,1") (ifseqformula "56"))
                                          (rule "eqSymm" (formula "41") (term "1,0,1,1"))
                                          (rule "replace_known_left" (formula "41") (term "1,0,1,1") (ifseqformula "61"))
                                           (builtin "One Step Simplification" (formula "41"))
                                          (rule "inEqSimp_subsumption4" (formula "41") (term "1,0,0,1,1") (ifseqformula "54"))
                                          (rule "mul_literals" (formula "41") (term "0,1,0,1,0,0,1,1"))
                                          (rule "greater_literals" (formula "41") (term "0,0,1,0,0,1,1"))
                                           (builtin "One Step Simplification" (formula "41"))
                                          (rule "leq_literals" (formula "41") (term "0,1,0,0,1,1"))
                                           (builtin "One Step Simplification" (formula "41"))
                                          (rule "inEqSimp_subsumption6" (formula "41") (term "0,0,1,1") (ifseqformula "53"))
                                          (rule "mul_literals" (formula "41") (term "1,1,0,0,0,1,1"))
                                          (rule "greater_literals" (formula "41") (term "0,0,0,0,1,1"))
                                           (builtin "One Step Simplification" (formula "41"))
                                          (rule "leq_literals" (formula "41") (term "0,0,0,1,1"))
                                           (builtin "One Step Simplification" (formula "41"))
                                          (rule "jdiv_axiom" (formula "50") (term "0"))
                                          (rule "polySimp_mulLiterals" (formula "50") (term "0,0,2,1"))
                                          (rule "eqSymm" (formula "50"))
                                          (rule "applyEq" (formula "50") (term "1") (ifseqformula "51"))
                                          (rule "inEqSimp_subsumption6" (formula "50") (term "0,0") (ifseqformula "47"))
                                          (rule "greater_literals" (formula "50") (term "0,0,0,0"))
                                           (builtin "One Step Simplification" (formula "50"))
                                          (rule "times_zero_1" (formula "50") (term "1,0,0,0"))
                                          (rule "leq_literals" (formula "50") (term "0,0,0"))
                                           (builtin "One Step Simplification" (formula "50"))
                                          (rule "polyDiv_pullOut" (formula "50") (term "0") (inst "polyDivCoeff=l_0"))
                                          (rule "equal_literals" (formula "50") (term "0,0"))
                                           (builtin "One Step Simplification" (formula "50"))
                                          (rule "polySimp_mulLiterals" (formula "50") (term "1,0,0,0"))
                                          (rule "polySimp_pullOutFactor0" (formula "50") (term "0,0,0"))
                                          (rule "add_literals" (formula "50") (term "1,0,0,0"))
                                          (rule "times_zero_1" (formula "50") (term "0,0,0"))
                                          (rule "div_literals" (formula "50") (term "0,0"))
                                          (rule "add_zero_left" (formula "50") (term "0"))
                                           (builtin "One Step Simplification" (formula "50"))
                                          (rule "true_left" (formula "50"))
                                          (rule "arrayLengthIsAShort" (formula "69") (term "0"))
                                          (rule "expand_inShort" (formula "69"))
                                          (rule "replace_short_MIN" (formula "69") (term "0,1"))
                                          (rule "replace_short_MAX" (formula "69") (term "1,0"))
                                          (rule "andLeft" (formula "69"))
                                          (rule "inEqSimp_commuteLeq" (formula "70"))
                                          (rule "applyEq" (formula "70") (term "0") (ifseqformula "71"))
                                          (rule "qeq_literals" (formula "70"))
                                          (rule "true_left" (formula "70"))
                                          (rule "applyEq" (formula "69") (term "0") (ifseqformula "70"))
                                          (rule "leq_literals" (formula "69"))
                                          (rule "true_left" (formula "69"))
                                          (rule "arrayLengthNotNegative" (formula "69") (term "0"))
                                          (rule "applyEq" (formula "69") (term "0") (ifseqformula "70"))
                                          (rule "qeq_literals" (formula "69"))
                                          (rule "true_left" (formula "69"))
                                          (rule "arrayLengthIsAShort" (formula "68") (term "0"))
                                          (rule "expand_inShort" (formula "68"))
                                          (rule "replace_short_MIN" (formula "68") (term "0,1"))
                                          (rule "replace_short_MAX" (formula "68") (term "1,0"))
                                          (rule "andLeft" (formula "68"))
                                          (rule "inEqSimp_commuteLeq" (formula "69"))
                                          (rule "applyEq" (formula "68") (term "0") (ifseqformula "70"))
                                          (rule "leq_literals" (formula "68"))
                                          (rule "closeFalse" (formula "68"))
                                       )
                                       (branch "self.equal_buckets = TRUE FALSE"
                                          (rule "applyEq" (formula "58") (term "1,1,0,0,0") (ifseqformula "55"))
                                          (rule "applyEq" (formula "57") (term "3,0") (ifseqformula "55"))
                                          (rule "applyEq" (formula "59") (term "1,0,2,0") (ifseqformula "55"))
                                          (rule "eqSymm" (formula "59"))
                                          (rule "applyEq" (formula "58") (term "1,1,1,0,0,0,0,1,0") (ifseqformula "55"))
                                          (rule "applyEq" (formula "59") (term "1,0,2,0") (ifseqformula "55"))
                                          (rule "eqSymm" (formula "59"))
                                          (rule "Definition_axiom_for_isValidBufferLen_in_de_wiesler_Classifier" (formula "44") (term "0,1,0"))
                                           (builtin "One Step Simplification" (formula "44"))
                                          (rule "inEqSimp_ltToLeq" (formula "44") (term "0,1,1,0"))
                                          (rule "add_zero_right" (formula "44") (term "0,0,1,1,0"))
                                          (rule "polySimp_mulComm0" (formula "44") (term "1,0,0,1,1,0"))
                                          (rule "inEqSimp_commuteLeq" (formula "44") (term "0,0,1,0"))
                                          (rule "inEqSimp_sepNegMonomial0" (formula "44") (term "0,1,1,0"))
                                          (rule "polySimp_mulLiterals" (formula "44") (term "0,0,1,1,0"))
                                          (rule "polySimp_elimOne" (formula "44") (term "0,0,1,1,0"))
                                          (rule "Contract_axiom_for_countClassOfSliceEq_in_Classifier" (formula "15") (term "0,0,1,1,0"))
                                          (rule "replace_known_left" (formula "15") (term "1,0,0,0") (ifseqformula "18"))
                                           (builtin "One Step Simplification" (formula "15") (ifInst ""  (formula "96")) (ifInst ""  (formula "19")) (ifInst ""  (formula "93")) (ifInst ""  (formula "39")))
                                          (rule "true_left" (formula "15"))
                                          (rule "Definition_axiom_for_countClassOfSliceEq_in_de_wiesler_Classifier" (formula "15") (term "0,0,1,1,0") (inst "i=i"))
                                          (rule "polySimp_homoEq" (formula "15") (term "1,0"))
                                          (rule "polySimp_addComm0" (formula "15") (term "0,0,0,1,0"))
                                          (rule "polySimp_addComm1" (formula "15") (term "0,0,1,0"))
                                          (rule "polySimp_addComm1" (formula "15") (term "0,1,0"))
                                          (rule "polySimp_sepPosMonomial" (formula "15") (term "1,0"))
                                          (rule "polySimp_mulComm0" (formula "15") (term "1,1,0"))
                                          (rule "polySimp_rightDist" (formula "15") (term "1,1,0"))
                                          (rule "polySimp_mulLiterals" (formula "15") (term "1,1,1,0"))
                                          (rule "polySimp_elimOne" (formula "15") (term "1,1,1,0"))
                                          (rule "polySimp_rightDist" (formula "15") (term "0,1,1,0"))
                                          (rule "polySimp_mulComm0" (formula "15") (term "0,0,1,1,0"))
                                          (rule "Class_invariant_axiom_for_de_wiesler_Buffers" (formula "63"))
                                          (rule "andLeft" (formula "63"))
                                          (rule "notLeft" (formula "64"))
                                          (rule "notLeft" (formula "63"))
                                          (rule "Free_class_invariant_axiom_for_de_wiesler_Buffers" (formula "45") (inst "b=b"))
                                           (builtin "One Step Simplification" (formula "45") (ifInst ""  (formula "67")) (ifInst ""  (formula "54")))
                                          (rule "expand_inInt" (formula "45") (term "1,0,0,1"))
                                          (rule "replace_int_MAX" (formula "45") (term "1,0,1,0,0,1"))
                                          (rule "replace_int_MIN" (formula "45") (term "0,1,1,0,0,1"))
                                          (rule "andLeft" (formula "45"))
                                          (rule "andLeft" (formula "45"))
                                          (rule "andLeft" (formula "45"))
                                          (rule "notLeft" (formula "45"))
                                          (rule "translateJavaMulInt" (formula "45") (term "1"))
                                          (rule "mul_literals" (formula "45") (term "1"))
                                          (rule "eqSymm" (formula "71"))
                                          (rule "inEqSimp_ltToLeq" (formula "46") (term "1,0,0,0"))
                                          (rule "polySimp_mulComm0" (formula "46") (term "1,0,0,1,0,0,0"))
                                          (rule "inEqSimp_commuteLeq" (formula "46") (term "0,1,0"))
                                          (rule "inEqSimp_commuteLeq" (formula "46") (term "0,0,0,0"))
                                          (rule "inEqSimp_commuteLeq" (formula "46") (term "1,1,0,0"))
                                          (rule "inEqSimp_commuteLeq" (formula "45"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "46") (term "1,0,0,0"))
                                          (rule "polySimp_mulComm0" (formula "46") (term "1,1,0,0,0"))
                                          (rule "polySimp_rightDist" (formula "46") (term "1,1,0,0,0"))
                                          (rule "mul_literals" (formula "46") (term "0,1,1,0,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "46") (term "1,1,1,0,0,0"))
                                          (rule "polySimp_elimOne" (formula "46") (term "1,1,1,0,0,0"))
                                          (rule "inEqSimp_subsumption1" (formula "45") (ifseqformula "54"))
                                          (rule "leq_literals" (formula "45") (term "0"))
                                           (builtin "One Step Simplification" (formula "45"))
                                          (rule "true_left" (formula "45"))
                                          (rule "Definition_axiom_for_bufferLen_in_de_wiesler_Buffers" (formula "46") (term "2,0"))
                                          (rule "nnf_imp2or" (formula "39") (term "0"))
                                          (rule "commute_or_2" (formula "15") (term "0,0"))
                                          (rule "nnf_notAnd" (formula "42") (term "0,0"))
                                          (rule "Definition_axiom_for_isClassOfSlice_in_de_wiesler_Classifier" (formula "43") (term "0,1,0") (inst "i=i"))
                                           (builtin "One Step Simplification" (formula "43"))
                                          (rule "expand_inInt" (formula "43") (term "1,0,0,1,0"))
                                          (rule "replace_int_MIN" (formula "43") (term "0,1,1,0,0,1,0"))
                                          (rule "replace_int_MAX" (formula "43") (term "1,0,1,0,0,1,0"))
                                          (rule "inEqSimp_ltToLeq" (formula "43") (term "1,0,0,0,1,0"))
                                          (rule "polySimp_rightDist" (formula "43") (term "1,0,0,1,0,0,0,1,0"))
                                          (rule "polySimp_mulAssoc" (formula "43") (term "0,1,0,0,1,0,0,0,1,0"))
                                          (rule "polySimp_mulComm0" (formula "43") (term "0,0,1,0,0,1,0,0,0,1,0"))
                                          (rule "polySimp_mulLiterals" (formula "43") (term "0,1,0,0,1,0,0,0,1,0"))
                                          (rule "polySimp_addAssoc" (formula "43") (term "0,0,1,0,0,0,1,0"))
                                          (rule "inEqSimp_commuteLeq" (formula "43") (term "0,0,0,0,1,0"))
                                          (rule "inEqSimp_commuteLeq" (formula "43") (term "1,1,0,0,1,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "43") (term "1,0,0,0,1,0"))
                                          (rule "polySimp_mulComm0" (formula "43") (term "1,1,0,0,0,1,0"))
                                          (rule "polySimp_rightDist" (formula "43") (term "1,1,0,0,0,1,0"))
                                          (rule "polySimp_mulLiterals" (formula "43") (term "1,1,1,0,0,0,1,0"))
                                          (rule "polySimp_elimOne" (formula "43") (term "1,1,1,0,0,0,1,0"))
                                          (rule "polySimp_rightDist" (formula "43") (term "0,1,1,0,0,0,1,0"))
                                          (rule "polySimp_mulLiterals" (formula "43") (term "1,0,1,1,0,0,0,1,0"))
                                          (rule "mul_literals" (formula "43") (term "0,0,1,1,0,0,0,1,0"))
                                          (rule "Class_invariant_axiom_for_de_wiesler_Classifier" (formula "41") (term "0,1"))
                                          (rule "replace_known_right" (formula "41") (term "0,1,0,1") (ifseqformula "72"))
                                           (builtin "One Step Simplification" (formula "41") (ifInst ""  (formula "73")))
                                          (rule "commute_or_2" (formula "14") (term "0,0,0"))
                                          (rule "jdiv_axiom" (formula "50") (term "0"))
                                          (rule "polySimp_mulLiterals" (formula "50") (term "0,0,2,1"))
                                          (rule "eqSymm" (formula "50"))
                                          (rule "applyEq" (formula "50") (term "1") (ifseqformula "51"))
                                          (rule "inEqSimp_subsumption6" (formula "50") (term "0,0") (ifseqformula "47"))
                                          (rule "mul_literals" (formula "50") (term "1,1,0,0,0"))
                                          (rule "greater_literals" (formula "50") (term "0,0,0,0"))
                                           (builtin "One Step Simplification" (formula "50"))
                                          (rule "leq_literals" (formula "50") (term "0,0,0"))
                                           (builtin "One Step Simplification" (formula "50"))
                                          (rule "polyDiv_pullOut" (formula "50") (term "0") (inst "polyDivCoeff=l_0"))
                                          (rule "polySimp_mulLiterals" (formula "50") (term "1,0,0,2,0"))
                                          (rule "equal_literals" (formula "50") (term "0,0"))
                                           (builtin "One Step Simplification" (formula "50"))
                                          (rule "polySimp_homoEq" (formula "50"))
                                          (rule "polySimp_pullOutFactor0" (formula "50") (term "0,0,0,1,0"))
                                          (rule "add_literals" (formula "50") (term "1,0,0,0,1,0"))
                                          (rule "times_zero_1" (formula "50") (term "0,0,0,1,0"))
                                          (rule "div_literals" (formula "50") (term "0,0,1,0"))
                                          (rule "add_zero_left" (formula "50") (term "0,1,0"))
                                          (rule "polySimp_pullOutFactor1" (formula "50") (term "0"))
                                          (rule "add_literals" (formula "50") (term "1,0"))
                                          (rule "times_zero_1" (formula "50") (term "0"))
                                           (builtin "One Step Simplification" (formula "50"))
                                          (rule "true_left" (formula "50"))
                                          (rule "arrayLengthNotNegative" (formula "67") (term "0"))
                                          (rule "applyEq" (formula "67") (term "0") (ifseqformula "68"))
                                          (rule "qeq_literals" (formula "67"))
                                          (rule "true_left" (formula "67"))
                                          (rule "arrayLengthIsAShort" (formula "67") (term "0"))
                                          (rule "expand_inShort" (formula "67"))
                                          (rule "replace_short_MIN" (formula "67") (term "0,1"))
                                          (rule "replace_short_MAX" (formula "67") (term "1,0"))
                                          (rule "andLeft" (formula "67"))
                                          (rule "inEqSimp_commuteLeq" (formula "68"))
                                          (rule "applyEq" (formula "68") (term "0") (ifseqformula "69"))
                                          (rule "qeq_literals" (formula "68"))
                                          (rule "true_left" (formula "68"))
                                          (rule "applyEq" (formula "67") (term "0") (ifseqformula "68"))
                                          (rule "leq_literals" (formula "67"))
                                          (rule "true_left" (formula "67"))
                                          (rule "arrayLengthNotNegative" (formula "66") (term "0"))
                                          (rule "applyEq" (formula "66") (term "0") (ifseqformula "67"))
                                          (rule "qeq_literals" (formula "66"))
                                          (rule "true_left" (formula "66"))
                                          (rule "arrayLengthIsAShort" (formula "66") (term "0"))
                                          (rule "expand_inShort" (formula "66"))
                                          (rule "replace_short_MIN" (formula "66") (term "0,1"))
                                          (rule "replace_short_MAX" (formula "66") (term "1,0"))
                                          (rule "andLeft" (formula "66"))
                                          (rule "inEqSimp_commuteLeq" (formula "67"))
                                          (rule "applyEq" (formula "67") (term "0") (ifseqformula "68"))
                                          (rule "qeq_literals" (formula "67"))
                                          (rule "true_left" (formula "67"))
                                          (rule "applyEq" (formula "66") (term "0") (ifseqformula "67"))
                                          (rule "leq_literals" (formula "66"))
                                          (rule "closeFalse" (formula "66"))
                                       )
                                    )
                                    (branch "j_0 >= 1 FALSE"
                                       (rule "applyEqReverse" (formula "11") (term "1,1,1") (ifseqformula "10"))
                                       (rule "hideAuxiliaryEq" (formula "10"))
                                       (rule "replace_known_right" (formula "10") (term "0") (ifseqformula "67"))
                                        (builtin "One Step Simplification" (formula "10"))
                                       (rule "true_left" (formula "10"))
                                       (rule "inEqSimp_geqRight" (formula "66"))
                                       (rule "mul_literals" (formula "1") (term "1,0,0"))
                                       (rule "add_literals" (formula "1") (term "0,0"))
                                       (rule "add_zero_left" (formula "1") (term "0"))
                                       (rule "inEqSimp_subsumption0" (formula "8") (ifseqformula "1"))
                                       (rule "leq_literals" (formula "8") (term "0"))
                                        (builtin "One Step Simplification" (formula "8"))
                                       (rule "true_left" (formula "8"))
                                       (rule "inEqSimp_antiSymm" (formula "9") (ifseqformula "1"))
                                       (rule "applyEq" (formula "1") (term "0") (ifseqformula "9"))
                                       (rule "leq_literals" (formula "1"))
                                       (rule "true_left" (formula "1"))
                                       (rule "applyEq" (formula "11") (term "1,1,1,0,0,0,0") (ifseqformula "8"))
                                       (rule "add_literals" (formula "11") (term "1,1,0,0,0,0"))
                                       (rule "applyEq" (formula "1") (term "5,0") (ifseqformula "8"))
                                       (rule "applyEqRigid" (formula "10") (term "1,0") (ifseqformula "8"))
                                       (rule "bsum_lower_equals_upper" (formula "10") (term "0"))
                                       (rule "eqSymm" (formula "10"))
                                       (rule "applyEqRigid" (formula "61") (term "0,2,0") (ifseqformula "8"))
                                       (rule "applyEqRigid" (formula "12") (term "1,1,1,0,0") (ifseqformula "8"))
                                       (rule "add_literals" (formula "12") (term "1,1,0,0"))
                                       (rule "applyEq" (formula "6") (term "1,1") (ifseqformula "8"))
                                       (rule "add_zero_right" (formula "6") (term "1"))
                                       (rule "applyEq" (formula "9") (term "0") (ifseqformula "8"))
                                       (rule "qeq_literals" (formula "9"))
                                       (rule "true_left" (formula "9"))
                                       (rule "applyEqRigid" (formula "7") (term "1,1") (ifseqformula "8"))
                                       (rule "add_zero_right" (formula "7") (term "1"))
                                       (rule "applyEq" (formula "12") (term "1,1,0,0,0") (ifseqformula "8"))
                                       (rule "applyEq" (formula "1") (term "0,1,1") (ifseqformula "9"))
                                       (rule "mul_literals" (formula "1") (term "1,1"))
                                       (rule "add_zero_right" (formula "1") (term "1"))
                                       (rule "applyEqRigid" (formula "12") (term "1,0,1,0") (ifseqformula "9"))
                                       (rule "applyEqRigid" (formula "56") (term "1,0,2,0") (ifseqformula "8"))
                                       (rule "applyEq" (formula "12") (term "1,1,0,0,1,0") (ifseqformula "8"))
                                       (rule "add_literals" (formula "12") (term "1,0,0,1,0"))
                                       (rule "applyEq" (formula "56") (term "0,2,1") (ifseqformula "8"))
                                       (rule "inEqSimp_subsumption1" (formula "6") (ifseqformula "46"))
                                       (rule "leq_literals" (formula "6") (term "0"))
                                        (builtin "One Step Simplification" (formula "6"))
                                       (rule "true_left" (formula "6"))
                                       (rule "inEqSimp_subsumption1" (formula "6") (ifseqformula "46"))
                                       (rule "leq_literals" (formula "6") (term "0"))
                                        (builtin "One Step Simplification" (formula "6"))
                                       (rule "true_left" (formula "6"))
                                       (rule "inEqSimp_or_tautInEq0" (formula "10") (term "0,0,0"))
                                       (rule "add_zero_right" (formula "10") (term "1,1,0,0,0"))
                                       (rule "qeq_literals" (formula "10") (term "1,0,0,0"))
                                        (builtin "One Step Simplification" (formula "10"))
                                       (rule "true_left" (formula "10"))
                                       (rule "nnf_notAnd" (formula "35") (term "0,0"))
                                       (rule "nnf_notAnd" (formula "60") (term "0,0"))
                                       (rule "nnf_notAnd" (formula "20") (term "0,0"))
                                       (rule "nnf_imp2or" (formula "34") (term "0"))
                                       (rule "nnf_imp2or" (formula "49") (term "0"))
                                       (rule "Contract_axiom_for_isClassifiedBlocksRange_in_Classifier" (formula "33") (term "0"))
                                       (rule "translateJavaSubInt" (formula "33") (term "0,0,0,0,0,0,0"))
                                       (rule "replace_known_left" (formula "33") (term "1,0,0,0") (ifseqformula "11"))
                                        (builtin "One Step Simplification" (formula "33") (ifInst ""  (formula "86")) (ifInst ""  (formula "12")) (ifInst ""  (formula "83")))
                                       (rule "polySimp_elimSub" (formula "33") (term "0,0,0,0"))
                                       (rule "polySimp_pullOutFactor1b" (formula "33") (term "0,0,0,0"))
                                       (rule "add_literals" (formula "33") (term "1,1,0,0,0,0"))
                                       (rule "times_zero_1" (formula "33") (term "1,0,0,0,0"))
                                       (rule "add_zero_right" (formula "33") (term "0,0,0,0"))
                                       (rule "Definition_axiom_for_isClassifiedBlocksRange_in_de_wiesler_Classifier" (formula "34") (term "0") (inst "block=block"))
                                        (builtin "One Step Simplification" (formula "34"))
                                       (rule "expand_inInt" (formula "34") (term "1,0,0"))
                                       (rule "replace_int_MAX" (formula "34") (term "1,0,1,0,0"))
                                       (rule "replace_int_MIN" (formula "34") (term "0,1,1,0,0"))
                                       (rule "translateJavaMulInt" (formula "34") (term "1,3,0,1,0"))
                                       (rule "translateJavaSubInt" (formula "34") (term "0,1,1,0,0,0"))
                                       (rule "translateJavaAddInt" (formula "34") (term "4,0,1,0"))
                                       (rule "translateJavaAddInt" (formula "34") (term "3,0,1,0"))
                                       (rule "translateJavaDivInt" (formula "34") (term "1,1,0,0,0"))
                                       (rule "translateJavaAddInt" (formula "34") (term "0,1,4,0,1,0"))
                                       (rule "translateJavaMulInt" (formula "34") (term "1,4,0,1,0"))
                                       (rule "polySimp_elimSub" (formula "34") (term "0,1,1,0,0,0"))
                                       (rule "polySimp_pullOutFactor1b" (formula "34") (term "0,1,1,0,0,0"))
                                       (rule "add_literals" (formula "34") (term "1,1,0,1,1,0,0,0"))
                                       (rule "times_zero_1" (formula "34") (term "1,0,1,1,0,0,0"))
                                       (rule "add_zero_right" (formula "34") (term "0,1,1,0,0,0"))
                                       (rule "polySimp_mulComm0" (formula "34") (term "1,4,0,1,0"))
                                       (rule "polySimp_addComm0" (formula "34") (term "1,1,4,0,1,0"))
                                       (rule "polySimp_rightDist" (formula "34") (term "1,4,0,1,0"))
                                       (rule "mul_literals" (formula "34") (term "0,1,4,0,1,0"))
                                       (rule "polySimp_addAssoc" (formula "34") (term "4,0,1,0"))
                                       (rule "polySimp_addComm0" (formula "34") (term "0,4,0,1,0"))
                                       (rule "inEqSimp_ltToLeq" (formula "34") (term "1,0,0,0"))
                                       (rule "polySimp_mulComm0" (formula "34") (term "1,0,0,1,0,0,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "34") (term "0,0,0,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "34") (term "1,1,0,0"))
                                       (rule "applyEq" (formula "34") (term "0,1,0,0,1,0,0,0") (ifseqformula "42"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "34") (term "1,0,0,0"))
                                       (rule "polySimp_mulComm0" (formula "34") (term "1,1,0,0,0"))
                                       (rule "polySimp_rightDist" (formula "34") (term "1,1,0,0,0"))
                                       (rule "mul_literals" (formula "34") (term "0,1,1,0,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "34") (term "1,1,1,0,0,0"))
                                       (rule "polySimp_elimOne" (formula "34") (term "1,1,1,0,0,0"))
                                       (rule "nnf_notAnd" (formula "8") (term "0,0"))
                                       (rule "Contract_axiom_for_allElementsCounted_in_Classifier" (formula "32") (term "0"))
                                       (rule "replace_known_right" (formula "32") (term "0,0,1,1,0,0,0,0") (ifseqformula "87"))
                                        (builtin "One Step Simplification" (formula "32") (ifInst ""  (formula "85")) (ifInst ""  (formula "11")) (ifInst ""  (formula "12")) (ifInst ""  (formula "84")))
                                       (rule "inEqSimp_commuteGeq" (formula "32") (term "0,0"))
                                       (rule "applyEq" (formula "32") (term "0,0,0") (ifseqformula "31"))
                                       (rule "inEqSimp_subsumption0" (formula "32") (term "0,0") (ifseqformula "22"))
                                       (rule "inEqSimp_homoInEq0" (formula "32") (term "0,0,0"))
                                       (rule "polySimp_mulComm0" (formula "32") (term "1,0,0,0,0"))
                                       (rule "polySimp_rightDist" (formula "32") (term "1,0,0,0,0"))
                                       (rule "mul_literals" (formula "32") (term "0,1,0,0,0,0"))
                                       (rule "polySimp_addAssoc" (formula "32") (term "0,0,0,0"))
                                       (rule "polySimp_addComm0" (formula "32") (term "0,0,0,0,0"))
                                       (rule "polySimp_pullOutFactor1b" (formula "32") (term "0,0,0,0"))
                                       (rule "add_literals" (formula "32") (term "1,1,0,0,0,0"))
                                       (rule "times_zero_1" (formula "32") (term "1,0,0,0,0"))
                                       (rule "add_zero_right" (formula "32") (term "0,0,0,0"))
                                       (rule "qeq_literals" (formula "32") (term "0,0,0"))
                                        (builtin "One Step Simplification" (formula "32"))
                                       (rule "Definition_axiom_for_allElementsCounted_in_de_wiesler_Classifier" (formula "33") (term "0") (inst "b=b") (inst "b_0=b_0"))
                                        (builtin "One Step Simplification" (formula "33"))
                                       (rule "expand_inInt" (formula "33") (term "1,0,0,0"))
                                       (rule "replace_int_MAX" (formula "33") (term "1,0,1,0,0,0"))
                                       (rule "replace_int_MIN" (formula "33") (term "0,1,1,0,0,0"))
                                       (rule "andLeft" (formula "33"))
                                       (rule "translateJavaSubInt" (formula "34") (term "1"))
                                       (rule "translateJavaCastInt" (formula "34") (term "0"))
                                       (rule "polySimp_elimSub" (formula "34") (term "1"))
                                       (rule "polySimp_pullOutFactor1b" (formula "34") (term "1"))
                                       (rule "add_literals" (formula "34") (term "1,1,1"))
                                       (rule "times_zero_1" (formula "34") (term "1,1"))
                                       (rule "add_zero_right" (formula "34") (term "1"))
                                       (rule "inEqSimp_ltToLeq" (formula "33") (term "1,0,0,0"))
                                       (rule "polySimp_mulComm0" (formula "33") (term "1,0,0,1,0,0,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "33") (term "0,0,0,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "33") (term "1,1,0,0"))
                                       (rule "applyEq" (formula "34") (term "1,0") (ifseqformula "31"))
                                       (rule "applyEq" (formula "33") (term "0,1,0,0,1,0,0,0") (ifseqformula "31"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "33") (term "1,0,0,0"))
                                       (rule "polySimp_mulComm0" (formula "33") (term "1,1,0,0,0"))
                                       (rule "polySimp_rightDist" (formula "33") (term "1,1,0,0,0"))
                                       (rule "mul_literals" (formula "33") (term "0,1,1,0,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "33") (term "1,1,1,0,0,0"))
                                       (rule "polySimp_elimOne" (formula "33") (term "1,1,1,0,0,0"))
                                       (rule "Definition_axiom_for_countClassOfSliceEq_in_de_wiesler_Classifier" (formula "9") (term "1,1,0") (inst "i=i"))
                                       (rule "eqSymm" (formula "9") (term "1,0"))
                                       (rule "nnf_notAnd" (formula "37") (term "0,0"))
                                       (rule "nnf_notAnd" (formula "52") (term "0,0"))
                                       (rule "nnf_notAnd" (formula "38") (term "1,0,0"))
                                       (rule "inEqSimp_notLeq" (formula "38") (term "0,1,0,0"))
                                       (rule "mul_literals" (formula "38") (term "1,0,0,0,1,0,0"))
                                       (rule "add_literals" (formula "38") (term "0,0,0,1,0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "38") (term "0,1,0,0"))
                                       (rule "mul_literals" (formula "38") (term "1,0,1,0,0"))
                                       (rule "inEqSimp_notGeq" (formula "38") (term "1,1,0,0"))
                                       (rule "mul_literals" (formula "38") (term "1,0,0,1,1,0,0"))
                                       (rule "add_literals" (formula "38") (term "0,0,1,1,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "38") (term "1,1,0,0"))
                                       (rule "mul_literals" (formula "38") (term "1,1,1,0,0"))
                                       (rule "nnf_notAnd" (formula "38") (term "0,0,0"))
                                       (rule "inEqSimp_notLeq" (formula "38") (term "1,0,0,0"))
                                       (rule "polySimp_rightDist" (formula "38") (term "1,0,0,1,0,0,0"))
                                       (rule "mul_literals" (formula "38") (term "0,1,0,0,1,0,0,0"))
                                       (rule "polySimp_addAssoc" (formula "38") (term "0,0,1,0,0,0"))
                                       (rule "add_literals" (formula "38") (term "0,0,0,1,0,0,0"))
                                       (rule "add_zero_left" (formula "38") (term "0,0,1,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "38") (term "1,0,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "38") (term "1,1,0,0,0"))
                                       (rule "polySimp_elimOne" (formula "38") (term "1,1,0,0,0"))
                                       (rule "inEqSimp_notGeq" (formula "38") (term "0,0,0,0"))
                                       (rule "mul_literals" (formula "38") (term "1,0,0,0,0,0,0"))
                                       (rule "add_zero_right" (formula "38") (term "0,0,0,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "38") (term "0,0,0,0"))
                                       (rule "mul_literals" (formula "38") (term "1,0,0,0,0"))
                                       (rule "nnf_notAnd" (formula "63") (term "1,0,0"))
                                       (rule "inEqSimp_notLeq" (formula "63") (term "0,1,0,0"))
                                       (rule "mul_literals" (formula "63") (term "1,0,0,0,1,0,0"))
                                       (rule "add_literals" (formula "63") (term "0,0,0,1,0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "63") (term "0,1,0,0"))
                                       (rule "mul_literals" (formula "63") (term "1,0,1,0,0"))
                                       (rule "inEqSimp_notGeq" (formula "63") (term "1,1,0,0"))
                                       (rule "mul_literals" (formula "63") (term "1,0,0,1,1,0,0"))
                                       (rule "add_literals" (formula "63") (term "0,0,1,1,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "63") (term "1,1,0,0"))
                                       (rule "mul_literals" (formula "63") (term "1,1,1,0,0"))
                                       (rule "nnf_notAnd" (formula "63") (term "0,0,0"))
                                       (rule "inEqSimp_notLeq" (formula "63") (term "1,0,0,0"))
                                       (rule "polySimp_rightDist" (formula "63") (term "1,0,0,1,0,0,0"))
                                       (rule "mul_literals" (formula "63") (term "0,1,0,0,1,0,0,0"))
                                       (rule "polySimp_addAssoc" (formula "63") (term "0,0,1,0,0,0"))
                                       (rule "add_literals" (formula "63") (term "0,0,0,1,0,0,0"))
                                       (rule "add_zero_left" (formula "63") (term "0,0,1,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "63") (term "1,0,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "63") (term "1,1,0,0,0"))
                                       (rule "polySimp_elimOne" (formula "63") (term "1,1,0,0,0"))
                                       (rule "inEqSimp_notGeq" (formula "63") (term "0,0,0,0"))
                                       (rule "times_zero_1" (formula "63") (term "1,0,0,0,0,0,0"))
                                       (rule "add_literals" (formula "63") (term "0,0,0,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "63") (term "0,0,0,0"))
                                       (rule "mul_literals" (formula "63") (term "1,0,0,0,0"))
                                       (rule "nnf_notAnd" (formula "20") (term "1,0,0"))
                                       (rule "inEqSimp_notLeq" (formula "20") (term "0,1,0,0"))
                                       (rule "mul_literals" (formula "20") (term "1,0,0,0,1,0,0"))
                                       (rule "add_literals" (formula "20") (term "0,0,0,1,0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "20") (term "0,1,0,0"))
                                       (rule "mul_literals" (formula "20") (term "1,0,1,0,0"))
                                       (rule "inEqSimp_notGeq" (formula "20") (term "1,1,0,0"))
                                       (rule "mul_literals" (formula "20") (term "1,0,0,1,1,0,0"))
                                       (rule "add_literals" (formula "20") (term "0,0,1,1,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "1,1,0,0"))
                                       (rule "mul_literals" (formula "20") (term "1,1,1,0,0"))
                                       (rule "nnf_notAnd" (formula "20") (term "0,0,0"))
                                       (rule "inEqSimp_notGeq" (formula "20") (term "0,0,0,0"))
                                       (rule "mul_literals" (formula "20") (term "1,0,0,0,0,0,0"))
                                       (rule "add_zero_right" (formula "20") (term "0,0,0,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "0,0,0,0"))
                                       (rule "mul_literals" (formula "20") (term "1,0,0,0,0"))
                                       (rule "inEqSimp_notLeq" (formula "20") (term "1,0,0,0"))
                                       (rule "polySimp_rightDist" (formula "20") (term "1,0,0,1,0,0,0"))
                                       (rule "mul_literals" (formula "20") (term "0,1,0,0,1,0,0,0"))
                                       (rule "polySimp_addAssoc" (formula "20") (term "0,0,1,0,0,0"))
                                       (rule "add_literals" (formula "20") (term "0,0,0,1,0,0,0"))
                                       (rule "add_zero_left" (formula "20") (term "0,0,1,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "20") (term "1,0,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "20") (term "1,1,0,0,0"))
                                       (rule "polySimp_elimOne" (formula "20") (term "1,1,0,0,0"))
                                       (rule "nnf_imp2or" (formula "52") (term "0,1,0"))
                                       (rule "nnf_imp2or" (formula "36") (term "0"))
                                       (rule "nnf_notAnd" (formula "8") (term "1,0,0"))
                                       (rule "inEqSimp_notLeq" (formula "8") (term "0,1,0,0"))
                                       (rule "mul_literals" (formula "8") (term "1,0,0,0,1,0,0"))
                                       (rule "add_literals" (formula "8") (term "0,0,0,1,0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "8") (term "0,1,0,0"))
                                       (rule "mul_literals" (formula "8") (term "1,0,1,0,0"))
                                       (rule "inEqSimp_notGeq" (formula "8") (term "1,1,0,0"))
                                       (rule "mul_literals" (formula "8") (term "1,0,0,1,1,0,0"))
                                       (rule "add_literals" (formula "8") (term "0,0,1,1,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "1,1,0,0"))
                                       (rule "mul_literals" (formula "8") (term "1,1,1,0,0"))
                                       (rule "nnf_notAnd" (formula "8") (term "0,0,0"))
                                       (rule "inEqSimp_notLeq" (formula "8") (term "1,0,0,0"))
                                       (rule "mul_literals" (formula "8") (term "1,0,0,1,0,0,0"))
                                       (rule "add_literals" (formula "8") (term "0,0,1,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "8") (term "1,0,0,0"))
                                       (rule "mul_literals" (formula "8") (term "1,1,0,0,0"))
                                       (rule "inEqSimp_notGeq" (formula "8") (term "0,0,0,0"))
                                       (rule "mul_literals" (formula "8") (term "1,0,0,0,0,0,0"))
                                       (rule "add_zero_right" (formula "8") (term "0,0,0,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "0,0,0,0"))
                                       (rule "mul_literals" (formula "8") (term "1,0,0,0,0"))
                                       (rule "inEqSimp_or_tautInEq0" (formula "8") (term "0,0,0"))
                                       (rule "add_literals" (formula "8") (term "1,1,0,0,0"))
                                       (rule "qeq_literals" (formula "8") (term "1,0,0,0"))
                                        (builtin "One Step Simplification" (formula "8"))
                                       (rule "true_left" (formula "8"))
                                       (rule "nnf_imp2or" (formula "32") (term "0"))
                                       (rule "ifthenelse_split" (formula "48") (term "0"))
                                       (branch "self.equal_buckets = TRUE TRUE"
                                          (rule "newSym_eq" (formula "49") (inst "l=l_1") (inst "newSymDef=mul(int::final(buffers,
               de.wiesler.Buffers::$num_buckets),
    Z(0(#)))"))
                                          (rule "times_zero_1" (formula "49") (term "1,1"))
                                          (rule "add_zero_right" (formula "49") (term "1"))
                                          (rule "applyEq" (formula "54") (term "1,0,2,0") (ifseqformula "49"))
                                          (rule "eqSymm" (formula "54"))
                                          (rule "applyEq" (formula "53") (term "1,1,1,0,0,0,0,1,0") (ifseqformula "49"))
                                          (rule "applyEq" (formula "50") (term "0,0") (ifseqformula "49"))
                                          (rule "eqSymm" (formula "50"))
                                          (rule "applyEq" (formula "53") (term "1,1,1,0,0,0,0") (ifseqformula "49"))
                                          (rule "applyEq" (formula "52") (term "3,0") (ifseqformula "49"))
                                          (rule "applyEq" (formula "33") (term "1,0") (ifseqformula "50"))
                                          (rule "applyEq" (formula "36") (term "1,1,1,0,0,0,0") (ifseqformula "50"))
                                          (rule "applyEq" (formula "64") (term "2,1,0,0,0,1,0") (ifseqformula "50"))
                                          (rule "applyEq" (formula "19") (term "1,1,0,0,0") (ifseqformula "50"))
                                          (rule "applyEq" (formula "54") (term "1,0,2,0") (ifseqformula "49"))
                                          (rule "eqSymm" (formula "54"))
                                          (rule "applyEq" (formula "64") (term "1,1,0,0,0") (ifseqformula "50"))
                                          (rule "applyEq" (formula "39") (term "1,0") (ifseqformula "50"))
                                          (rule "applyEq" (formula "8") (term "1,1,0,0,0,0") (ifseqformula "50"))
                                          (rule "applyEq" (formula "37") (term "1,1,0,0,0") (ifseqformula "50"))
                                          (rule "applyEq" (formula "21") (term "0") (ifseqformula "50"))
                                          (rule "inEqSimp_homoInEq0" (formula "21"))
                                          (rule "polySimp_mulLiterals" (formula "21") (term "1,0"))
                                          (rule "polySimp_addComm1" (formula "21") (term "0"))
                                          (rule "applyEq" (formula "32") (term "1,1,1,0,0,0,0") (ifseqformula "50"))
                                          (rule "applyEq" (formula "64") (term "2,1,0,0,1,1,0") (ifseqformula "50"))
                                          (rule "applyEq" (formula "47") (term "0") (ifseqformula "50"))
                                          (rule "applyEq" (formula "46") (term "0") (ifseqformula "50"))
                                          (rule "applyEq" (formula "8") (term "2,1,0,1,1,0") (ifseqformula "50"))
                                          (rule "applyEq" (formula "30") (term "1") (ifseqformula "50"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "21"))
                                          (rule "polySimp_mulComm0" (formula "21") (term "1"))
                                          (rule "polySimp_rightDist" (formula "21") (term "1"))
                                          (rule "polySimp_mulLiterals" (formula "21") (term "1,1"))
                                          (rule "mul_literals" (formula "21") (term "0,1"))
                                          (rule "elimGcdGeq_antec" (formula "46") (inst "elimGcdRightDiv=Z(1(#))") (inst "elimGcdLeftDiv=l_1") (inst "elimGcd=Z(2(#))"))
                                          (rule "leq_literals" (formula "46") (term "0,0"))
                                           (builtin "One Step Simplification" (formula "46"))
                                          (rule "polySimp_mulLiterals" (formula "46") (term "1,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "46") (term "1,0,0,0,0,0"))
                                          (rule "mul_literals" (formula "46") (term "1,0,0,0,0,0"))
                                          (rule "polySimp_addLiterals" (formula "46") (term "0,0,0,0"))
                                          (rule "add_zero_right" (formula "46") (term "0,0,0,0"))
                                          (rule "polySimp_pullOutFactor0b" (formula "46") (term "0,0"))
                                          (rule "add_literals" (formula "46") (term "1,1,0,0"))
                                          (rule "times_zero_1" (formula "46") (term "1,0,0"))
                                          (rule "add_literals" (formula "46") (term "0,0"))
                                          (rule "leq_literals" (formula "46") (term "0"))
                                           (builtin "One Step Simplification" (formula "46"))
                                          (rule "elimGcdLeq_antec" (formula "47") (inst "elimGcdRightDiv=Z(4(6(#)))") (inst "elimGcdLeftDiv=l_1") (inst "elimGcd=Z(2(#))"))
                                          (rule "leq_literals" (formula "47") (term "0,0"))
                                           (builtin "One Step Simplification" (formula "47"))
                                          (rule "polySimp_mulLiterals" (formula "47") (term "1,0,0"))
                                          (rule "neg_literal" (formula "47") (term "0,0,0,0,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "47") (term "1,0,0,0,0,0"))
                                          (rule "mul_literals" (formula "47") (term "1,0,0,0,0,0"))
                                          (rule "polySimp_addLiterals" (formula "47") (term "0,0,0,0"))
                                          (rule "add_zero_right" (formula "47") (term "0,0,0,0"))
                                          (rule "polySimp_pullOutFactor0b" (formula "47") (term "0,0"))
                                          (rule "add_literals" (formula "47") (term "1,1,0,0"))
                                          (rule "times_zero_1" (formula "47") (term "1,0,0"))
                                          (rule "add_literals" (formula "47") (term "0,0"))
                                          (rule "qeq_literals" (formula "47") (term "0"))
                                           (builtin "One Step Simplification" (formula "47"))
                                          (rule "inEqSimp_exactShadow3" (formula "21") (ifseqformula "20"))
                                          (rule "polySimp_rightDist" (formula "21") (term "0,0"))
                                          (rule "mul_literals" (formula "21") (term "0,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "21") (term "1,0,0"))
                                          (rule "polySimp_addComm1" (formula "21") (term "0"))
                                          (rule "add_literals" (formula "21") (term "0,0"))
                                          (rule "inEqSimp_sepNegMonomial1" (formula "21"))
                                          (rule "polySimp_mulLiterals" (formula "21") (term "0"))
                                          (rule "inEqSimp_subsumption4" (formula "21") (ifseqformula "48"))
                                          (rule "mul_literals" (formula "21") (term "0,1,0"))
                                          (rule "greater_literals" (formula "21") (term "0,0"))
                                           (builtin "One Step Simplification" (formula "21"))
                                          (rule "leq_literals" (formula "21") (term "0"))
                                           (builtin "One Step Simplification" (formula "21"))
                                          (rule "true_left" (formula "21"))
                                          (rule "Definition_axiom_for_bufferLen_in_de_wiesler_Buffers" (formula "37") (term "0,0,1,0"))
                                          (rule "Class_invariant_axiom_for_de_wiesler_Buffers" (formula "58"))
                                          (rule "andLeft" (formula "58"))
                                          (rule "notLeft" (formula "58"))
                                          (rule "notLeft" (formula "58"))
                                          (rule "nnf_notAnd" (formula "36") (term "1,0,0"))
                                          (rule "inEqSimp_notLeq" (formula "36") (term "0,1,0,0"))
                                          (rule "mul_literals" (formula "36") (term "1,0,0,0,1,0,0"))
                                          (rule "add_literals" (formula "36") (term "0,0,0,1,0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "36") (term "0,1,0,0"))
                                          (rule "mul_literals" (formula "36") (term "1,0,1,0,0"))
                                          (rule "inEqSimp_notGeq" (formula "36") (term "1,1,0,0"))
                                          (rule "mul_literals" (formula "36") (term "1,0,0,1,1,0,0"))
                                          (rule "add_literals" (formula "36") (term "0,0,1,1,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "36") (term "1,1,0,0"))
                                          (rule "mul_literals" (formula "36") (term "1,1,1,0,0"))
                                          (rule "nnf_notAnd" (formula "53") (term "1,0,0"))
                                          (rule "inEqSimp_notLeq" (formula "53") (term "0,1,0,0"))
                                          (rule "mul_literals" (formula "53") (term "1,0,0,0,1,0,0"))
                                          (rule "add_literals" (formula "53") (term "0,0,0,1,0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "53") (term "0,1,0,0"))
                                          (rule "mul_literals" (formula "53") (term "1,0,1,0,0"))
                                          (rule "inEqSimp_notGeq" (formula "53") (term "1,1,0,0"))
                                          (rule "mul_literals" (formula "53") (term "1,0,0,1,1,0,0"))
                                          (rule "add_literals" (formula "53") (term "0,0,1,1,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "53") (term "1,1,0,0"))
                                          (rule "mul_literals" (formula "53") (term "1,1,1,0,0"))
                                          (rule "Free_class_invariant_axiom_for_de_wiesler_Buffers" (formula "38") (inst "b=b"))
                                           (builtin "One Step Simplification" (formula "38") (ifInst ""  (formula "62")))
                                          (rule "expand_inInt" (formula "38") (term "1,0,0,1"))
                                          (rule "replace_int_MAX" (formula "38") (term "1,0,1,0,0,1"))
                                          (rule "replace_int_MIN" (formula "38") (term "0,1,1,0,0,1"))
                                          (rule "andLeft" (formula "38"))
                                          (rule "andLeft" (formula "38"))
                                          (rule "andLeft" (formula "38"))
                                          (rule "andLeft" (formula "40"))
                                          (rule "notLeft" (formula "38"))
                                          (rule "translateJavaMulInt" (formula "38") (term "1"))
                                          (rule "mul_literals" (formula "38") (term "1"))
                                          (rule "eqSymm" (formula "67"))
                                          (rule "inEqSimp_ltToLeq" (formula "40") (term "1,0,0,0"))
                                          (rule "polySimp_mulComm0" (formula "40") (term "1,0,0,1,0,0,0"))
                                          (rule "inEqSimp_commuteLeq" (formula "40") (term "0,1,0"))
                                          (rule "inEqSimp_commuteLeq" (formula "40") (term "0,0,0,0"))
                                          (rule "inEqSimp_commuteLeq" (formula "40") (term "1,1,0,0"))
                                          (rule "inEqSimp_commuteLeq" (formula "38"))
                                          (rule "applyEq" (formula "38") (term "0") (ifseqformula "52"))
                                          (rule "applyEq" (formula "40") (term "0,1,0,0,1,0,0,0") (ifseqformula "52"))
                                          (rule "polySimp_mulLiterals" (formula "40") (term "1,0,0,1,0,0,0"))
                                          (rule "applyEq" (formula "39") (term "0") (ifseqformula "52"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "40") (term "1,0,0,0"))
                                          (rule "polySimp_mulComm0" (formula "40") (term "1,1,0,0,0"))
                                          (rule "polySimp_rightDist" (formula "40") (term "1,1,0,0,0"))
                                          (rule "mul_literals" (formula "40") (term "0,1,1,0,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "40") (term "1,1,1,0,0,0"))
                                          (rule "inEqSimp_subsumption6" (formula "38") (ifseqformula "48"))
                                          (rule "mul_literals" (formula "38") (term "1,1,0"))
                                          (rule "greater_literals" (formula "38") (term "0,0"))
                                           (builtin "One Step Simplification" (formula "38"))
                                          (rule "leq_literals" (formula "38") (term "0"))
                                           (builtin "One Step Simplification" (formula "38"))
                                          (rule "true_left" (formula "38"))
                                          (rule "inEqSimp_subsumption4" (formula "38") (ifseqformula "48"))
                                          (rule "greater_literals" (formula "38") (term "0,0"))
                                           (builtin "One Step Simplification" (formula "38"))
                                          (rule "mul_literals" (formula "38") (term "0,0"))
                                          (rule "leq_literals" (formula "38") (term "0"))
                                           (builtin "One Step Simplification" (formula "38"))
                                          (rule "true_left" (formula "38"))
                                          (rule "Definition_axiom_for_bufferLen_in_de_wiesler_Buffers" (formula "39") (term "2,0"))
                                          (rule "nnf_notAnd" (formula "35") (term "0,0"))
                                          (rule "Contract_axiom_for_countClassOfSliceEq_in_Classifier" (formula "1") (term "0"))
                                          (rule "replace_known_left" (formula "1") (term "1,0,0,0") (ifseqformula "11"))
                                           (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "89")) (ifInst ""  (formula "12")) (ifInst ""  (formula "86")) (ifInst ""  (formula "32")))
                                          (rule "true_left" (formula "1"))
                                          (rule "Definition_axiom_for_countClassOfSliceEq_in_de_wiesler_Classifier" (formula "1") (term "0") (inst "i=i"))
                                          (rule "jdiv_axiom" (formula "43") (term "0"))
                                          (rule "polySimp_mulLiterals" (formula "43") (term "0,0,2,1"))
                                          (rule "eqSymm" (formula "43"))
                                          (rule "applyEq" (formula "43") (term "1") (ifseqformula "44"))
                                          (rule "inEqSimp_subsumption6" (formula "43") (term "0,0") (ifseqformula "40"))
                                          (rule "greater_literals" (formula "43") (term "0,0,0,0"))
                                           (builtin "One Step Simplification" (formula "43"))
                                          (rule "times_zero_1" (formula "43") (term "1,0,0,0"))
                                          (rule "leq_literals" (formula "43") (term "0,0,0"))
                                           (builtin "One Step Simplification" (formula "43"))
                                          (rule "polyDiv_pullOut" (formula "43") (term "0") (inst "polyDivCoeff=l_0"))
                                          (rule "equal_literals" (formula "43") (term "0,0"))
                                           (builtin "One Step Simplification" (formula "43"))
                                          (rule "polySimp_mulLiterals" (formula "43") (term "1,0,0,0"))
                                          (rule "polySimp_homoEq" (formula "43"))
                                          (rule "polySimp_pullOutFactor0" (formula "43") (term "0,0,0,1,0"))
                                          (rule "add_literals" (formula "43") (term "1,0,0,0,1,0"))
                                          (rule "times_zero_1" (formula "43") (term "0,0,0,1,0"))
                                          (rule "div_literals" (formula "43") (term "0,0,1,0"))
                                          (rule "add_zero_left" (formula "43") (term "0,1,0"))
                                          (rule "polySimp_pullOutFactor1" (formula "43") (term "0"))
                                          (rule "add_literals" (formula "43") (term "1,0"))
                                          (rule "times_zero_1" (formula "43") (term "0"))
                                           (builtin "One Step Simplification" (formula "43"))
                                          (rule "true_left" (formula "43"))
                                          (rule "arrayLengthNotNegative" (formula "62") (term "0"))
                                          (rule "applyEq" (formula "62") (term "0") (ifseqformula "63"))
                                          (rule "qeq_literals" (formula "62"))
                                          (rule "true_left" (formula "62"))
                                          (rule "arrayLengthIsAShort" (formula "62") (term "0"))
                                          (rule "expand_inShort" (formula "62"))
                                          (rule "replace_short_MAX" (formula "62") (term "1,0"))
                                          (rule "replace_short_MIN" (formula "62") (term "0,1"))
                                          (rule "andLeft" (formula "62"))
                                          (rule "inEqSimp_commuteLeq" (formula "63"))
                                          (rule "applyEq" (formula "63") (term "0") (ifseqformula "64"))
                                          (rule "qeq_literals" (formula "63"))
                                          (rule "true_left" (formula "63"))
                                          (rule "applyEq" (formula "62") (term "0") (ifseqformula "63"))
                                          (rule "leq_literals" (formula "62"))
                                          (rule "true_left" (formula "62"))
                                          (rule "arrayLengthNotNegative" (formula "61") (term "0"))
                                          (rule "applyEq" (formula "61") (term "0") (ifseqformula "62"))
                                          (rule "qeq_literals" (formula "61"))
                                          (rule "true_left" (formula "61"))
                                          (rule "arrayLengthIsAShort" (formula "61") (term "0"))
                                          (rule "expand_inShort" (formula "61"))
                                          (rule "replace_short_MAX" (formula "61") (term "1,0"))
                                          (rule "replace_short_MIN" (formula "61") (term "0,1"))
                                          (rule "andLeft" (formula "61"))
                                          (rule "inEqSimp_commuteLeq" (formula "62"))
                                          (rule "applyEq" (formula "62") (term "0") (ifseqformula "63"))
                                          (rule "qeq_literals" (formula "62"))
                                          (rule "true_left" (formula "62"))
                                          (rule "applyEq" (formula "61") (term "0") (ifseqformula "62"))
                                          (rule "leq_literals" (formula "61"))
                                          (rule "closeFalse" (formula "61"))
                                       )
                                       (branch "self.equal_buckets = TRUE FALSE"
                                          (rule "applyEq" (formula "50") (term "3,0") (ifseqformula "48"))
                                          (rule "applyEq" (formula "52") (term "1,0,2,0") (ifseqformula "48"))
                                          (rule "eqSymm" (formula "52"))
                                          (rule "applyEq" (formula "51") (term "1,1,1,0,0,0,0") (ifseqformula "48"))
                                          (rule "applyEq" (formula "51") (term "1,1,1,0,0,0,0,1,0") (ifseqformula "48"))
                                          (rule "applyEq" (formula "52") (term "1,0,2,0") (ifseqformula "48"))
                                          (rule "eqSymm" (formula "52"))
                                          (rule "Definition_axiom_for_bufferLen_in_de_wiesler_Buffers" (formula "37") (term "0,0,1,0"))
                                          (rule "Class_invariant_axiom_for_de_wiesler_Buffers" (formula "56"))
                                          (rule "andLeft" (formula "56"))
                                          (rule "notLeft" (formula "57"))
                                          (rule "notLeft" (formula "56"))
                                          (rule "nnf_notAnd" (formula "36") (term "1,0,0"))
                                          (rule "inEqSimp_notLeq" (formula "36") (term "0,1,0,0"))
                                          (rule "mul_literals" (formula "36") (term "1,0,0,0,1,0,0"))
                                          (rule "add_literals" (formula "36") (term "0,0,0,1,0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "36") (term "0,1,0,0"))
                                          (rule "mul_literals" (formula "36") (term "1,0,1,0,0"))
                                          (rule "inEqSimp_notGeq" (formula "36") (term "1,1,0,0"))
                                          (rule "mul_literals" (formula "36") (term "1,0,0,1,1,0,0"))
                                          (rule "add_literals" (formula "36") (term "0,0,1,1,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "36") (term "1,1,0,0"))
                                          (rule "mul_literals" (formula "36") (term "1,1,1,0,0"))
                                          (rule "nnf_notAnd" (formula "36") (term "0,0,0"))
                                          (rule "inEqSimp_notLeq" (formula "36") (term "1,0,0,0"))
                                          (rule "polySimp_rightDist" (formula "36") (term "1,0,0,1,0,0,0"))
                                          (rule "mul_literals" (formula "36") (term "0,1,0,0,1,0,0,0"))
                                          (rule "polySimp_addAssoc" (formula "36") (term "0,0,1,0,0,0"))
                                          (rule "add_literals" (formula "36") (term "0,0,0,1,0,0,0"))
                                          (rule "add_zero_left" (formula "36") (term "0,0,1,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "36") (term "1,0,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "36") (term "1,1,0,0,0"))
                                          (rule "polySimp_elimOne" (formula "36") (term "1,1,0,0,0"))
                                          (rule "inEqSimp_notGeq" (formula "36") (term "0,0,0,0"))
                                          (rule "times_zero_1" (formula "36") (term "1,0,0,0,0,0,0"))
                                          (rule "add_zero_right" (formula "36") (term "0,0,0,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "36") (term "0,0,0,0"))
                                          (rule "mul_literals" (formula "36") (term "1,0,0,0,0"))
                                          (rule "nnf_notAnd" (formula "51") (term "1,0,0"))
                                          (rule "inEqSimp_notLeq" (formula "51") (term "0,1,0,0"))
                                          (rule "mul_literals" (formula "51") (term "1,0,0,0,1,0,0"))
                                          (rule "add_literals" (formula "51") (term "0,0,0,1,0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "51") (term "0,1,0,0"))
                                          (rule "mul_literals" (formula "51") (term "1,0,1,0,0"))
                                          (rule "inEqSimp_notGeq" (formula "51") (term "1,1,0,0"))
                                          (rule "mul_literals" (formula "51") (term "1,0,0,1,1,0,0"))
                                          (rule "add_literals" (formula "51") (term "0,0,1,1,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "51") (term "1,1,0,0"))
                                          (rule "mul_literals" (formula "51") (term "1,1,1,0,0"))
                                          (rule "Free_class_invariant_axiom_for_de_wiesler_Buffers" (formula "38") (inst "b=b"))
                                           (builtin "One Step Simplification" (formula "38") (ifInst ""  (formula "60")) (ifInst ""  (formula "47")))
                                          (rule "expand_inInt" (formula "38") (term "1,0,0,1"))
                                          (rule "replace_int_MAX" (formula "38") (term "1,0,1,0,0,1"))
                                          (rule "replace_int_MIN" (formula "38") (term "0,1,1,0,0,1"))
                                          (rule "andLeft" (formula "38"))
                                          (rule "andLeft" (formula "38"))
                                          (rule "andLeft" (formula "38"))
                                          (rule "notLeft" (formula "38"))
                                          (rule "translateJavaMulInt" (formula "38") (term "1"))
                                          (rule "mul_literals" (formula "38") (term "1"))
                                          (rule "eqSymm" (formula "64"))
                                          (rule "inEqSimp_ltToLeq" (formula "39") (term "1,0,0,0"))
                                          (rule "polySimp_mulComm0" (formula "39") (term "1,0,0,1,0,0,0"))
                                          (rule "inEqSimp_commuteLeq" (formula "39") (term "1,1,0,0"))
                                          (rule "inEqSimp_commuteLeq" (formula "39") (term "0,1,0"))
                                          (rule "inEqSimp_commuteLeq" (formula "39") (term "0,0,0,0"))
                                          (rule "inEqSimp_commuteLeq" (formula "38"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "39") (term "1,0,0,0"))
                                          (rule "polySimp_mulComm0" (formula "39") (term "1,1,0,0,0"))
                                          (rule "polySimp_rightDist" (formula "39") (term "1,1,0,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "39") (term "1,1,1,0,0,0"))
                                          (rule "mul_literals" (formula "39") (term "0,1,1,0,0,0"))
                                          (rule "polySimp_elimOne" (formula "39") (term "1,1,1,0,0,0"))
                                          (rule "inEqSimp_subsumption1" (formula "38") (ifseqformula "47"))
                                          (rule "leq_literals" (formula "38") (term "0"))
                                           (builtin "One Step Simplification" (formula "38"))
                                          (rule "true_left" (formula "38"))
                                          (rule "Definition_axiom_for_bufferLen_in_de_wiesler_Buffers" (formula "39") (term "2,0"))
                                          (rule "nnf_notAnd" (formula "35") (term "0,0"))
                                          (rule "Contract_axiom_for_countClassOfSliceEq_in_Classifier" (formula "1") (term "0"))
                                          (rule "replace_known_left" (formula "1") (term "1,0,0,0") (ifseqformula "11"))
                                           (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "88")) (ifInst ""  (formula "12")) (ifInst ""  (formula "85")) (ifInst ""  (formula "32")))
                                          (rule "true_left" (formula "1"))
                                          (rule "Definition_axiom_for_countClassOfSliceEq_in_de_wiesler_Classifier" (formula "1") (term "0") (inst "i=i"))
                                          (rule "commute_or_2" (formula "8") (term "0,0,0"))
                                          (rule "jdiv_axiom" (formula "43") (term "0"))
                                          (rule "polySimp_mulLiterals" (formula "43") (term "0,0,2,1"))
                                          (rule "eqSymm" (formula "43"))
                                          (rule "applyEq" (formula "43") (term "1") (ifseqformula "44"))
                                          (rule "inEqSimp_subsumption6" (formula "43") (term "0,0") (ifseqformula "40"))
                                          (rule "mul_literals" (formula "43") (term "1,1,0,0,0"))
                                          (rule "greater_literals" (formula "43") (term "0,0,0,0"))
                                           (builtin "One Step Simplification" (formula "43"))
                                          (rule "leq_literals" (formula "43") (term "0,0,0"))
                                           (builtin "One Step Simplification" (formula "43"))
                                          (rule "polyDiv_pullOut" (formula "43") (term "0") (inst "polyDivCoeff=l_0"))
                                          (rule "polySimp_mulLiterals" (formula "43") (term "1,0,0,2,0"))
                                          (rule "equal_literals" (formula "43") (term "0,0"))
                                           (builtin "One Step Simplification" (formula "43"))
                                          (rule "polySimp_homoEq" (formula "43"))
                                          (rule "polySimp_pullOutFactor0" (formula "43") (term "0,0,0,1,0"))
                                          (rule "add_literals" (formula "43") (term "1,0,0,0,1,0"))
                                          (rule "times_zero_1" (formula "43") (term "0,0,0,1,0"))
                                          (rule "div_literals" (formula "43") (term "0,0,1,0"))
                                          (rule "add_zero_left" (formula "43") (term "0,1,0"))
                                          (rule "polySimp_pullOutFactor1" (formula "43") (term "0"))
                                          (rule "add_literals" (formula "43") (term "1,0"))
                                          (rule "times_zero_1" (formula "43") (term "0"))
                                           (builtin "One Step Simplification" (formula "43"))
                                          (rule "true_left" (formula "43"))
                                          (rule "nnf_notAnd" (formula "32") (term "0,0"))
                                          (rule "arrayLengthNotNegative" (formula "60") (term "0"))
                                          (rule "applyEq" (formula "60") (term "0") (ifseqformula "61"))
                                          (rule "qeq_literals" (formula "60"))
                                          (rule "true_left" (formula "60"))
                                          (rule "nnf_notAnd" (formula "51") (term "0,0,0"))
                                          (rule "inEqSimp_notLeq" (formula "51") (term "1,0,0,0"))
                                          (rule "polySimp_rightDist" (formula "51") (term "1,0,0,1,0,0,0"))
                                          (rule "mul_literals" (formula "51") (term "0,1,0,0,1,0,0,0"))
                                          (rule "polySimp_addAssoc" (formula "51") (term "0,0,1,0,0,0"))
                                          (rule "add_literals" (formula "51") (term "0,0,0,1,0,0,0"))
                                          (rule "add_zero_left" (formula "51") (term "0,0,1,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "51") (term "1,0,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "51") (term "1,1,0,0,0"))
                                          (rule "polySimp_elimOne" (formula "51") (term "1,1,0,0,0"))
                                          (rule "inEqSimp_notGeq" (formula "51") (term "0,0,0,0"))
                                          (rule "mul_literals" (formula "51") (term "1,0,0,0,0,0,0"))
                                          (rule "add_zero_right" (formula "51") (term "0,0,0,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "51") (term "0,0,0,0"))
                                          (rule "mul_literals" (formula "51") (term "1,0,0,0,0"))
                                          (rule "arrayLengthIsAShort" (formula "60") (term "0"))
                                          (rule "expand_inShort" (formula "60"))
                                          (rule "replace_short_MIN" (formula "60") (term "0,1"))
                                          (rule "replace_short_MAX" (formula "60") (term "1,0"))
                                          (rule "andLeft" (formula "60"))
                                          (rule "inEqSimp_commuteLeq" (formula "61"))
                                          (rule "applyEq" (formula "61") (term "0") (ifseqformula "62"))
                                          (rule "qeq_literals" (formula "61"))
                                          (rule "true_left" (formula "61"))
                                          (rule "applyEq" (formula "60") (term "0") (ifseqformula "61"))
                                          (rule "leq_literals" (formula "60"))
                                          (rule "true_left" (formula "60"))
                                          (rule "arrayLengthIsAShort" (formula "59") (term "0"))
                                          (rule "expand_inShort" (formula "59"))
                                          (rule "replace_short_MAX" (formula "59") (term "1,0"))
                                          (rule "replace_short_MIN" (formula "59") (term "0,1"))
                                          (rule "andLeft" (formula "59"))
                                          (rule "inEqSimp_commuteLeq" (formula "60"))
                                          (rule "applyEq" (formula "59") (term "0") (ifseqformula "61"))
                                          (rule "leq_literals" (formula "59"))
                                          (rule "closeFalse" (formula "59"))
                                       )
                                    )
                                 )
                                 (branch "Case 2"
                                    (rule "replace_int_MIN" (formula "76") (term "0"))
                                    (rule "polySimp_homoEq" (formula "14") (term "1,0"))
                                    (rule "polySimp_homoEq" (formula "14") (term "0,1,0,1,0,1,0"))
                                    (rule "polySimp_mulComm0" (formula "14") (term "1,0,1,0"))
                                    (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,1,1,1,0,1,0"))
                                    (rule "polySimp_rightDist" (formula "14") (term "1,0,1,0"))
                                    (rule "polySimp_mulAssoc" (formula "14") (term "0,1,0,1,0"))
                                    (rule "polySimp_mulComm0" (formula "14") (term "0,0,1,0,1,0"))
                                    (rule "polySimp_mulLiterals" (formula "14") (term "0,1,0,1,0"))
                                    (rule "polySimp_elimOne" (formula "14") (term "0,1,0,1,0"))
                                    (rule "polySimp_rightDist" (formula "14") (term "1,0,0,0,1,1,0,1,0"))
                                    (rule "mul_literals" (formula "14") (term "0,1,0,0,0,1,1,0,1,0"))
                                    (rule "polySimp_addAssoc" (formula "76") (term "1"))
                                    (rule "polySimp_addComm0" (formula "76") (term "0,1"))
                                    (rule "polySimp_addAssoc" (formula "14") (term "0,0,0,1,1,0,1,0"))
                                    (rule "polySimp_addComm0" (formula "14") (term "0,0,0,0,1,1,0,1,0"))
                                    (rule "polySimp_addAssoc" (formula "14") (term "0,1,0"))
                                    (rule "inEqSimp_ltToLeq" (formula "5"))
                                    (rule "polySimp_mulComm0" (formula "5") (term "1,0,0"))
                                    (rule "polySimp_addComm1" (formula "5") (term "0"))
                                    (rule "inEqSimp_ltToLeq" (formula "10") (term "0"))
                                    (rule "add_zero_right" (formula "10") (term "0,0"))
                                    (rule "polySimp_mulComm0" (formula "10") (term "1,0,0"))
                                    (rule "inEqSimp_ltToLeq" (formula "13") (term "0,0,0,0,0"))
                                    (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,0,0,0,0,0"))
                                    (rule "inEqSimp_ltToLeq" (formula "14") (term "0,0,0,0,0"))
                                    (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,0,0,0,0,0"))
                                    (rule "inEqSimp_leqRight" (formula "76"))
                                    (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                                    (rule "polySimp_rightDist" (formula "1") (term "0,1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "1") (term "0,0,1,0,0"))
                                    (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                                    (rule "polySimp_addComm1" (formula "1") (term "0"))
                                    (rule "polySimp_addAssoc" (formula "1") (term "0,0,0"))
                                    (rule "polySimp_addComm1" (formula "1") (term "0,0"))
                                    (rule "polySimp_addComm1" (formula "1") (term "0,0,0"))
                                    (rule "add_literals" (formula "1") (term "0,0,0,0"))
                                    (rule "inEqSimp_homoInEq1" (formula "35"))
                                    (rule "polySimp_addComm1" (formula "35") (term "0"))
                                    (rule "inEqSimp_homoInEq0" (formula "9") (term "0,0,0"))
                                    (rule "times_zero_2" (formula "9") (term "1,0,0,0,0"))
                                    (rule "add_zero_right" (formula "9") (term "0,0,0,0"))
                                    (rule "polySimp_sepNegMonomial" (formula "15") (term "1,0"))
                                    (rule "polySimp_mulLiterals" (formula "15") (term "0,1,0"))
                                    (rule "polySimp_elimOne" (formula "15") (term "0,1,0"))
                                    (rule "polySimp_sepNegMonomial" (formula "15") (term "0,0,1,0"))
                                    (rule "polySimp_mulLiterals" (formula "15") (term "0,0,0,1,0"))
                                    (rule "polySimp_elimOne" (formula "15") (term "0,0,0,1,0"))
                                    (rule "inEqSimp_sepNegMonomial0" (formula "6"))
                                    (rule "polySimp_mulLiterals" (formula "6") (term "0"))
                                    (rule "polySimp_elimOne" (formula "6") (term "0"))
                                    (rule "inEqSimp_sepNegMonomial0" (formula "11") (term "0"))
                                    (rule "polySimp_mulLiterals" (formula "11") (term "0,0"))
                                    (rule "polySimp_elimOne" (formula "11") (term "0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "0,0,0,0,0"))
                                    (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,0,0,0"))
                                    (rule "polySimp_rightDist" (formula "14") (term "1,0,0,0,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "14") (term "1,1,0,0,0,0,0"))
                                    (rule "mul_literals" (formula "14") (term "0,1,0,0,0,0,0"))
                                    (rule "polySimp_elimOne" (formula "14") (term "1,1,0,0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "0,0,0,0,0"))
                                    (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,0,0,0"))
                                    (rule "polySimp_rightDist" (formula "15") (term "1,0,0,0,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "15") (term "1,1,0,0,0,0,0"))
                                    (rule "mul_literals" (formula "15") (term "0,1,0,0,0,0,0"))
                                    (rule "polySimp_elimOne" (formula "15") (term "1,1,0,0,0,0,0"))
                                    (rule "inEqSimp_sepNegMonomial1" (formula "1"))
                                    (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                                    (rule "polySimp_elimOne" (formula "1") (term "0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "35"))
                                    (rule "polySimp_mulComm0" (formula "35") (term "1"))
                                    (rule "polySimp_rightDist" (formula "35") (term "1"))
                                    (rule "polySimp_mulLiterals" (formula "35") (term "1,1"))
                                    (rule "mul_literals" (formula "35") (term "0,1"))
                                    (rule "polySimp_elimOne" (formula "35") (term "1,1"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "9") (term "0,0,0"))
                                    (rule "mul_literals" (formula "9") (term "1,0,0,0"))
                                    (rule "inEqSimp_subsumption1" (formula "9") (term "1,0,0") (ifseqformula "8"))
                                    (rule "inEqSimp_homoInEq0" (formula "9") (term "0,1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,1,0,0"))
                                    (rule "polySimp_rightDist" (formula "9") (term "1,0,0,1,0,0"))
                                    (rule "mul_literals" (formula "9") (term "0,1,0,0,1,0,0"))
                                    (rule "polySimp_addAssoc" (formula "9") (term "0,0,1,0,0"))
                                    (rule "polySimp_addComm0" (formula "9") (term "0,0,0,1,0,0"))
                                    (rule "polySimp_pullOutFactor1b" (formula "9") (term "0,0,1,0,0"))
                                    (rule "add_literals" (formula "9") (term "1,1,0,0,1,0,0"))
                                    (rule "times_zero_1" (formula "9") (term "1,0,0,1,0,0"))
                                    (rule "add_zero_right" (formula "9") (term "0,0,1,0,0"))
                                    (rule "qeq_literals" (formula "9") (term "0,1,0,0"))
                                     (builtin "One Step Simplification" (formula "9"))
                                    (rule "inEqSimp_subsumption1" (formula "39") (ifseqformula "40"))
                                    (rule "leq_literals" (formula "39") (term "0"))
                                     (builtin "One Step Simplification" (formula "39"))
                                    (rule "true_left" (formula "39"))
                                    (rule "inEqSimp_subsumption1" (formula "8") (ifseqformula "6"))
                                    (rule "inEqSimp_homoInEq0" (formula "8") (term "0"))
                                    (rule "polySimp_pullOutFactor1b" (formula "8") (term "0,0"))
                                    (rule "add_literals" (formula "8") (term "1,1,0,0"))
                                    (rule "times_zero_1" (formula "8") (term "1,0,0"))
                                    (rule "add_zero_right" (formula "8") (term "0,0"))
                                    (rule "qeq_literals" (formula "8") (term "0"))
                                     (builtin "One Step Simplification" (formula "8"))
                                    (rule "true_left" (formula "8"))
                                    (rule "inEqSimp_subsumption1" (formula "21") (ifseqformula "35"))
                                    (rule "leq_literals" (formula "21") (term "0"))
                                     (builtin "One Step Simplification" (formula "21"))
                                    (rule "true_left" (formula "21"))
                                    (rule "inEqSimp_subsumption1" (formula "31") (ifseqformula "32"))
                                    (rule "leq_literals" (formula "31") (term "0"))
                                     (builtin "One Step Simplification" (formula "31"))
                                    (rule "true_left" (formula "31"))
                                    (rule "inEqSimp_exactShadow3" (formula "40") (ifseqformula "21"))
                                    (rule "polySimp_mulComm0" (formula "40") (term "0,0"))
                                    (rule "polySimp_addComm0" (formula "40") (term "0"))
                                    (rule "inEqSimp_sepNegMonomial1" (formula "40"))
                                    (rule "polySimp_mulLiterals" (formula "40") (term "0"))
                                    (rule "polySimp_elimOne" (formula "40") (term "0"))
                                    (rule "inEqSimp_exactShadow3" (formula "37") (ifseqformula "35"))
                                    (rule "polySimp_mulComm0" (formula "37") (term "0,0"))
                                    (rule "polySimp_addComm0" (formula "37") (term "0"))
                                    (rule "inEqSimp_sepNegMonomial1" (formula "37"))
                                    (rule "polySimp_mulLiterals" (formula "37") (term "0"))
                                    (rule "polySimp_elimOne" (formula "37") (term "0"))
                                    (rule "inEqSimp_subsumption0" (formula "23") (ifseqformula "37"))
                                    (rule "leq_literals" (formula "23") (term "0"))
                                     (builtin "One Step Simplification" (formula "23"))
                                    (rule "true_left" (formula "23"))
                                    (rule "inEqSimp_exactShadow3" (formula "6") (ifseqformula "31"))
                                    (rule "polySimp_rightDist" (formula "6") (term "0,0"))
                                    (rule "mul_literals" (formula "6") (term "0,0,0"))
                                    (rule "polySimp_addAssoc" (formula "6") (term "0"))
                                    (rule "polySimp_addComm1" (formula "6") (term "0,0"))
                                    (rule "add_literals" (formula "6") (term "0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "6"))
                                    (rule "polySimp_mulComm0" (formula "6") (term "1"))
                                    (rule "polySimp_rightDist" (formula "6") (term "1"))
                                    (rule "polySimp_mulLiterals" (formula "6") (term "1,1"))
                                    (rule "mul_literals" (formula "6") (term "0,1"))
                                    (rule "polySimp_elimOne" (formula "6") (term "1,1"))
                                    (rule "inEqSimp_exactShadow3" (formula "23") (ifseqformula "42"))
                                    (rule "mul_literals" (formula "23") (term "0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "23"))
                                    (rule "mul_literals" (formula "23") (term "1"))
                                    (rule "inEqSimp_exactShadow3" (formula "41") (ifseqformula "42"))
                                    (rule "polySimp_mulComm0" (formula "41") (term "0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "41"))
                                    (rule "polySimp_mulLiterals" (formula "41") (term "1"))
                                    (rule "polySimp_elimOne" (formula "41") (term "1"))
                                    (rule "inEqSimp_exactShadow3" (formula "6") (ifseqformula "30"))
                                    (rule "polySimp_rightDist" (formula "6") (term "0,0"))
                                    (rule "mul_literals" (formula "6") (term "0,0,0"))
                                    (rule "polySimp_addComm1" (formula "6") (term "0"))
                                    (rule "add_literals" (formula "6") (term "0,0"))
                                    (rule "inEqSimp_sepNegMonomial1" (formula "6"))
                                    (rule "polySimp_mulLiterals" (formula "6") (term "0"))
                                    (rule "polySimp_elimOne" (formula "6") (term "0"))
                                    (rule "inEqSimp_exactShadow3" (formula "35") (ifseqformula "38"))
                                    (rule "polySimp_mulComm0" (formula "35") (term "0,0"))
                                    (rule "polySimp_addComm0" (formula "35") (term "0"))
                                    (rule "inEqSimp_sepNegMonomial1" (formula "35"))
                                    (rule "polySimp_mulLiterals" (formula "35") (term "0"))
                                    (rule "polySimp_elimOne" (formula "35") (term "0"))
                                    (rule "inEqSimp_subsumption0" (formula "22") (ifseqformula "35"))
                                    (rule "leq_literals" (formula "22") (term "0"))
                                     (builtin "One Step Simplification" (formula "22"))
                                    (rule "true_left" (formula "22"))
                                    (rule "inEqSimp_and_subsumption3" (formula "16") (term "0,0,0"))
                                    (rule "leq_literals" (formula "16") (term "0,1,0,0,0,0"))
                                     (builtin "One Step Simplification" (formula "16"))
                                    (rule "nnf_imp2or" (formula "15") (term "0"))
                                    (rule "nnf_imp2or" (formula "16") (term "0"))
                                    (rule "nnf_notAnd" (formula "15") (term "0,0"))
                                    (rule "inEqSimp_notGeq" (formula "15") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "15") (term "1,1,0,0"))
                                    (rule "polySimp_rightDist" (formula "15") (term "1,1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "15") (term "1,1,1,0,0"))
                                    (rule "mul_literals" (formula "15") (term "0,1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "15") (term "1,1,1,0,0"))
                                    (rule "nnf_notAnd" (formula "16") (term "0,0"))
                                    (rule "inEqSimp_notLeq" (formula "16") (term "1,0,0"))
                                    (rule "mul_literals" (formula "16") (term "1,0,0,1,0,0"))
                                    (rule "add_literals" (formula "16") (term "0,0,1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "16") (term "1,0,0"))
                                    (rule "mul_literals" (formula "16") (term "1,1,0,0"))
                                    (rule "nnf_notAnd" (formula "15") (term "0,0,0"))
                                    (rule "inEqSimp_notLeq" (formula "15") (term "1,0,0,0"))
                                    (rule "mul_literals" (formula "15") (term "1,0,0,1,0,0,0"))
                                    (rule "add_literals" (formula "15") (term "0,0,1,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "15") (term "1,0,0,0"))
                                    (rule "mul_literals" (formula "15") (term "1,1,0,0,0"))
                                    (rule "nnf_notAnd" (formula "16") (term "0,0,0"))
                                    (rule "inEqSimp_notGeq" (formula "16") (term "1,0,0,0"))
                                    (rule "times_zero_1" (formula "16") (term "1,0,0,1,0,0,0"))
                                    (rule "add_literals" (formula "16") (term "0,0,1,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "1,0,0,0"))
                                    (rule "mul_literals" (formula "16") (term "1,1,0,0,0"))
                                    (rule "inEqSimp_notLeq" (formula "16") (term "0,0,0,0"))
                                    (rule "polySimp_rightDist" (formula "16") (term "1,0,0,0,0,0,0"))
                                    (rule "mul_literals" (formula "16") (term "0,1,0,0,0,0,0,0"))
                                    (rule "polySimp_addAssoc" (formula "16") (term "0,0,0,0,0,0"))
                                    (rule "add_literals" (formula "16") (term "0,0,0,0,0,0,0"))
                                    (rule "add_zero_left" (formula "16") (term "0,0,0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "16") (term "0,0,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "16") (term "1,0,0,0,0"))
                                    (rule "polySimp_elimOne" (formula "16") (term "1,0,0,0,0"))
                                    (rule "nnf_notAnd" (formula "15") (term "0,0,0,0"))
                                    (rule "inEqSimp_notLeq" (formula "15") (term "0,0,0,0,0"))
                                    (rule "polySimp_rightDist" (formula "15") (term "1,0,0,0,0,0,0,0"))
                                    (rule "mul_literals" (formula "15") (term "0,1,0,0,0,0,0,0,0"))
                                    (rule "polySimp_addAssoc" (formula "15") (term "0,0,0,0,0,0,0"))
                                    (rule "add_literals" (formula "15") (term "0,0,0,0,0,0,0,0"))
                                    (rule "add_zero_left" (formula "15") (term "0,0,0,0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "15") (term "0,0,0,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "15") (term "1,0,0,0,0,0"))
                                    (rule "polySimp_elimOne" (formula "15") (term "1,0,0,0,0,0"))
                                    (rule "inEqSimp_notGeq" (formula "15") (term "1,0,0,0,0"))
                                    (rule "mul_literals" (formula "15") (term "1,0,0,1,0,0,0,0"))
                                    (rule "add_literals" (formula "15") (term "0,0,1,0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "1,0,0,0,0"))
                                    (rule "mul_literals" (formula "15") (term "1,1,0,0,0,0"))
                                    (rule "Class_invariant_axiom_for_de_wiesler_Classifier" (formula "28"))
                                    (rule "andLeft" (formula "28"))
                                    (rule "notLeft" (formula "28"))
                                    (rule "notLeft" (formula "28"))
                                    (rule "replace_known_right" (formula "4") (term "0") (ifseqformula "56"))
                                     (builtin "One Step Simplification" (formula "4"))
                                    (rule "replace_known_right" (formula "5") (term "0") (ifseqformula "55"))
                                     (builtin "One Step Simplification" (formula "5"))
                                    (rule "Contract_axiom_for_countClassOfSliceEq_in_Classifier" (formula "48") (term "1"))
                                    (rule "replace_known_right" (formula "48") (term "0,1,0,0,0,0") (ifseqformula "76"))
                                     (builtin "One Step Simplification" (formula "48") (ifInst ""  (formula "18")) (ifInst ""  (formula "19")) (ifInst ""  (formula "73")) (ifInst ""  (formula "44")))
                                    (rule "true_left" (formula "48"))
                                    (rule "Free_class_invariant_axiom_for_de_wiesler_Buffers" (formula "53") (inst "b=b"))
                                     (builtin "One Step Simplification" (formula "53"))
                                    (rule "expand_inInt" (formula "53") (term "1,0,0,1"))
                                    (rule "replace_int_MAX" (formula "53") (term "1,0,1,0,0,1"))
                                    (rule "replace_int_MIN" (formula "53") (term "0,1,1,0,0,1"))
                                    (rule "andLeft" (formula "53"))
                                    (rule "andLeft" (formula "53"))
                                    (rule "andLeft" (formula "53"))
                                    (rule "andLeft" (formula "55"))
                                    (rule "andLeft" (formula "53"))
                                    (rule "notLeft" (formula "53"))
                                    (rule "translateJavaMulInt" (formula "53") (term "1"))
                                    (rule "mul_literals" (formula "53") (term "1"))
                                    (rule "eqSymm" (formula "59"))
                                    (rule "inEqSimp_ltToLeq" (formula "57") (term "1,0,0,0"))
                                    (rule "polySimp_mulComm0" (formula "57") (term "1,0,0,1,0,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "57") (term "0,1,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "57") (term "0,0,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "57") (term "1,1,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "55"))
                                    (rule "replace_known_left" (formula "11") (term "0,0") (ifseqformula "55"))
                                     (builtin "One Step Simplification" (formula "11"))
                                    (rule "applyEqReverse" (formula "12") (term "0,0,1") (ifseqformula "11"))
                                    (rule "hideAuxiliaryEq" (formula "11"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "56") (term "1,0,0,0"))
                                    (rule "polySimp_mulComm0" (formula "56") (term "1,1,0,0,0"))
                                    (rule "polySimp_rightDist" (formula "56") (term "1,1,0,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "56") (term "1,1,1,0,0,0"))
                                    (rule "mul_literals" (formula "56") (term "0,1,1,0,0,0"))
                                    (rule "polySimp_elimOne" (formula "56") (term "1,1,1,0,0,0"))
                                    (rule "inEqSimp_exactShadow3" (formula "8") (ifseqformula "55"))
                                    (rule "polySimp_rightDist" (formula "8") (term "0,0"))
                                    (rule "mul_literals" (formula "8") (term "0,0,0"))
                                    (rule "polySimp_addComm1" (formula "8") (term "0"))
                                    (rule "add_literals" (formula "8") (term "0,0"))
                                    (rule "inEqSimp_sepNegMonomial1" (formula "8"))
                                    (rule "polySimp_mulLiterals" (formula "8") (term "0"))
                                    (rule "polySimp_elimOne" (formula "8") (term "0"))
                                    (rule "inEqSimp_subsumption0" (formula "6") (ifseqformula "8"))
                                    (rule "leq_literals" (formula "6") (term "0"))
                                     (builtin "One Step Simplification" (formula "6"))
                                    (rule "true_left" (formula "6"))
                                    (rule "inEqSimp_exactShadow3" (formula "54") (ifseqformula "30"))
                                    (rule "times_zero_1" (formula "54") (term "0,0"))
                                    (rule "add_zero_left" (formula "54") (term "0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "54"))
                                    (rule "mul_literals" (formula "54") (term "1"))
                                    (rule "inEqSimp_subsumption1" (formula "29") (ifseqformula "54"))
                                    (rule "leq_literals" (formula "29") (term "0"))
                                     (builtin "One Step Simplification" (formula "29"))
                                    (rule "true_left" (formula "29"))
                                    (rule "Definition_axiom_for_isSortedSlice_in_de_wiesler_Functions" (formula "13") (term "0") (inst "i=i"))
                                     (builtin "One Step Simplification" (formula "13"))
                                    (rule "expand_inInt" (formula "13") (term "1,0,0"))
                                    (rule "replace_int_MAX" (formula "13") (term "1,0,1,0,0"))
                                    (rule "replace_int_MIN" (formula "13") (term "0,1,1,0,0"))
                                    (rule "translateJavaSubInt" (formula "13") (term "1,1,0,0,0"))
                                    (rule "translateJavaAddInt" (formula "13") (term "0,2,1,1,0"))
                                    (rule "polySimp_elimSub" (formula "13") (term "1,1,0,0,0"))
                                    (rule "mul_literals" (formula "13") (term "1,1,1,0,0,0"))
                                    (rule "polySimp_addComm0" (formula "13") (term "0,2,1,1,0"))
                                    (rule "polySimp_addComm0" (formula "13") (term "1,1,0,0,0"))
                                    (rule "inEqSimp_ltToLeq" (formula "13") (term "1,0,0,0"))
                                    (rule "polySimp_rightDist" (formula "13") (term "1,0,0,1,0,0,0"))
                                    (rule "mul_literals" (formula "13") (term "0,1,0,0,1,0,0,0"))
                                    (rule "polySimp_addAssoc" (formula "13") (term "0,0,1,0,0,0"))
                                    (rule "add_literals" (formula "13") (term "0,0,0,1,0,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "13") (term "0,0,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "13") (term "1,1,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "13") (term "1,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "1,0,0,0"))
                                    (rule "polySimp_mulComm0" (formula "13") (term "1,1,0,0,0"))
                                    (rule "polySimp_rightDist" (formula "13") (term "1,1,0,0,0"))
                                    (rule "mul_literals" (formula "13") (term "0,1,1,0,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "13") (term "1,1,1,0,0,0"))
                                    (rule "polySimp_elimOne" (formula "13") (term "1,1,1,0,0,0"))
                                    (rule "Contract_axiom_for_bufferLen_in_Buffers" (formula "47") (term "0"))
                                     (builtin "One Step Simplification" (formula "47") (ifInst ""  (formula "44")) (ifInst ""  (formula "78")) (ifInst ""  (formula "44")) (ifInst ""  (formula "25")))
                                    (rule "wellFormedAnon" (formula "47") (term "1,0"))
                                    (rule "replace_known_left" (formula "47") (term "1,1,0") (ifseqformula "16"))
                                     (builtin "One Step Simplification" (formula "47") (ifInst ""  (formula "17")))
                                    (rule "inEqSimp_ltToLeq" (formula "47") (term "1,0"))
                                    (rule "polySimp_mulComm0" (formula "47") (term "1,0,0,1,0"))
                                    (rule "polySimp_addComm1" (formula "47") (term "0,1,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "47") (term "0,0"))
                                    (rule "replace_known_left" (formula "47") (term "0,0") (ifseqformula "9"))
                                     (builtin "One Step Simplification" (formula "47"))
                                    (rule "inEqSimp_commuteLeq" (formula "47") (term "0,0,1"))
                                    (rule "applyEq" (formula "47") (term "0,0,0,1") (ifseqformula "48"))
                                    (rule "applyEq" (formula "47") (term "0,1,0,1") (ifseqformula "48"))
                                    (rule "inEqSimp_sepNegMonomial0" (formula "47") (term "0"))
                                    (rule "polySimp_mulLiterals" (formula "47") (term "0,0"))
                                    (rule "polySimp_elimOne" (formula "47") (term "0,0"))
                                    (rule "replace_known_left" (formula "47") (term "0") (ifseqformula "8"))
                                     (builtin "One Step Simplification" (formula "47"))
                                    (rule "andLeft" (formula "47"))
                                    (rule "andLeft" (formula "47"))
                                    (rule "inEqSimp_subsumption1" (formula "52") (ifseqformula "47"))
                                    (rule "leq_literals" (formula "52") (term "0"))
                                     (builtin "One Step Simplification" (formula "52"))
                                    (rule "true_left" (formula "52"))
                                    (rule "inEqSimp_subsumption0" (formula "51") (ifseqformula "48"))
                                    (rule "leq_literals" (formula "51") (term "0"))
                                     (builtin "One Step Simplification" (formula "51"))
                                    (rule "true_left" (formula "51"))
                                    (rule "Definition_axiom_for_countClassOfSliceEq_in_de_wiesler_Classifier" (formula "12") (term "1,2,0") (inst "i=i"))
                                    (rule "Definition_axiom_for_bufferLen_in_de_wiesler_Buffers" (formula "50") (term "0"))
                                    (rule "pullOutSelect" (formula "50") (term "0") (inst "selectSK=arr_3"))
                                    (rule "simplifySelectOfAnon" (formula "50"))
                                     (builtin "One Step Simplification" (formula "50"))
                                    (rule "eqSymm" (formula "51"))
                                    (rule "applyEqReverse" (formula "50") (term "1") (ifseqformula "51"))
                                    (rule "hideAuxiliaryEq" (formula "51"))
                                    (rule "elementOfArrayRangeConcrete" (formula "50") (term "0,0,0"))
                                    (rule "replace_known_right" (formula "50") (term "0,0,0,0,0") (ifseqformula "67"))
                                     (builtin "One Step Simplification" (formula "50"))
                                    (rule "Contract_axiom_for_isClassifiedUntil_in_Classifier" (formula "38") (term "0"))
                                    (rule "translateJavaSubInt" (formula "38") (term "0,0,0,1,1,1,0,0,0,0"))
                                    (rule "eqSymm" (formula "38") (term "0,1,1,0,0,0,0"))
                                    (rule "replace_known_right" (formula "38") (term "0,1,1,1,1,1,1,1,0,0,0,0") (ifseqformula "79"))
                                     (builtin "One Step Simplification" (formula "38") (ifInst ""  (formula "37")) (ifInst ""  (formula "80")) (ifInst ""  (formula "78")) (ifInst ""  (formula "17")) (ifInst ""  (formula "18")) (ifInst ""  (formula "77")) (ifInst ""  (formula "43")))
                                    (rule "polySimp_elimSub" (formula "38") (term "0,0,0,1,1,0"))
                                    (rule "polySimp_addComm0" (formula "38") (term "0,0,0,1,1,0"))
                                    (rule "replace_known_left" (formula "38") (term "0,1,1,0") (ifseqformula "42"))
                                     (builtin "One Step Simplification" (formula "38"))
                                    (rule "inEqSimp_commuteGeq" (formula "38") (term "0,1,0"))
                                    (rule "applyEq" (formula "38") (term "0,0,1,0") (ifseqformula "37"))
                                    (rule "inEqSimp_subsumption0" (formula "38") (term "0,1,0") (ifseqformula "29"))
                                    (rule "inEqSimp_homoInEq0" (formula "38") (term "0,0,1,0"))
                                    (rule "polySimp_mulComm0" (formula "38") (term "1,0,0,0,1,0"))
                                    (rule "polySimp_rightDist" (formula "38") (term "1,0,0,0,1,0"))
                                    (rule "mul_literals" (formula "38") (term "0,1,0,0,0,1,0"))
                                    (rule "polySimp_addAssoc" (formula "38") (term "0,0,0,1,0"))
                                    (rule "polySimp_addComm0" (formula "38") (term "0,0,0,0,1,0"))
                                    (rule "polySimp_pullOutFactor1b" (formula "38") (term "0,0,0,1,0"))
                                    (rule "add_literals" (formula "38") (term "1,1,0,0,0,1,0"))
                                    (rule "times_zero_1" (formula "38") (term "1,0,0,0,1,0"))
                                    (rule "add_zero_right" (formula "38") (term "0,0,0,1,0"))
                                    (rule "qeq_literals" (formula "38") (term "0,0,1,0"))
                                     (builtin "One Step Simplification" (formula "38"))
                                    (rule "Definition_axiom_for_isBlockAligned_in_de_wiesler_Buffers" (formula "42") (term "0"))
                                     (builtin "One Step Simplification" (formula "42"))
                                    (rule "translateJavaMod" (formula "42") (term "0"))
                                    (rule "jmod_axiom" (formula "42") (term "0"))
                                    (rule "polySimp_mulLiterals" (formula "42") (term "1,0"))
                                    (rule "polySimp_sepNegMonomial" (formula "42"))
                                    (rule "polySimp_mulLiterals" (formula "42") (term "0"))
                                    (rule "newSym_eq" (formula "42") (inst "l=l_0") (inst "newSymDef=add(mul(begin, Z(0(#))), mul(write, Z(0(#))))"))
                                    (rule "times_zero_1" (formula "42") (term "0,1,1"))
                                    (rule "times_zero_1" (formula "42") (term "1,1,1"))
                                    (rule "add_literals" (formula "42") (term "1,1"))
                                    (rule "add_zero_right" (formula "42") (term "1"))
                                    (rule "applyEq" (formula "43") (term "0,0") (ifseqformula "42"))
                                    (rule "polySimp_homoEq" (formula "43"))
                                    (rule "polySimp_mulLiterals" (formula "43") (term "1,0"))
                                    (rule "polySimp_addComm1" (formula "43") (term "0"))
                                    (rule "polySimp_addComm0" (formula "43") (term "0,0"))
                                    (rule "polySimp_sepPosMonomial" (formula "43"))
                                    (rule "polySimp_mulComm0" (formula "43") (term "1"))
                                    (rule "polySimp_rightDist" (formula "43") (term "1"))
                                    (rule "polySimp_mulLiterals" (formula "43") (term "1,1"))
                                    (rule "polySimp_elimOne" (formula "43") (term "1,1"))
                                    (rule "polySimp_mulComm0" (formula "43") (term "0,1"))
                                    (rule "polySimp_mulLiterals" (formula "43") (term "0,1"))
                                    (rule "applyEq" (formula "21") (term "0") (ifseqformula "43"))
                                    (rule "inEqSimp_homoInEq0" (formula "21"))
                                    (rule "polySimp_mulComm0" (formula "21") (term "1,0"))
                                    (rule "polySimp_rightDist" (formula "21") (term "1,0"))
                                    (rule "polySimp_mulAssoc" (formula "21") (term "0,1,0"))
                                    (rule "polySimp_mulComm0" (formula "21") (term "0,0,1,0"))
                                    (rule "polySimp_mulLiterals" (formula "21") (term "0,1,0"))
                                    (rule "polySimp_addAssoc" (formula "21") (term "0"))
                                    (rule "applyEq" (formula "41") (term "0") (ifseqformula "43"))
                                    (rule "inEqSimp_commuteLeq" (formula "41"))
                                    (rule "applyEq" (formula "12") (term "1,1,2,0") (ifseqformula "43"))
                                    (rule "applyEq" (formula "1") (term "4,0") (ifseqformula "43"))
                                    (rule "applyEq" (formula "39") (term "4,0") (ifseqformula "43"))
                                    (rule "applyEq" (formula "22") (term "0") (ifseqformula "43"))
                                    (rule "inEqSimp_homoInEq1" (formula "22"))
                                    (rule "polySimp_mulComm0" (formula "22") (term "1,0"))
                                    (rule "polySimp_rightDist" (formula "22") (term "1,0"))
                                    (rule "polySimp_mulAssoc" (formula "22") (term "0,1,0"))
                                    (rule "polySimp_mulComm0" (formula "22") (term "0,0,1,0"))
                                    (rule "polySimp_mulLiterals" (formula "22") (term "0,1,0"))
                                    (rule "polySimp_addAssoc" (formula "22") (term "0"))
                                    (rule "applyEq" (formula "40") (term "0") (ifseqformula "43"))
                                    (rule "inEqSimp_homoInEq1" (formula "40"))
                                    (rule "polySimp_mulComm0" (formula "40") (term "1,0"))
                                    (rule "polySimp_rightDist" (formula "40") (term "1,0"))
                                    (rule "polySimp_mulAssoc" (formula "40") (term "0,1,0"))
                                    (rule "polySimp_mulComm0" (formula "40") (term "0,0,1,0"))
                                    (rule "polySimp_mulLiterals" (formula "40") (term "0,1,0"))
                                    (rule "polySimp_addAssoc" (formula "40") (term "0"))
                                    (rule "polySimp_addComm0" (formula "40") (term "0,0"))
                                    (rule "polySimp_pullOutFactor1b" (formula "40") (term "0"))
                                    (rule "add_literals" (formula "40") (term "1,1,0"))
                                    (rule "times_zero_1" (formula "40") (term "1,0"))
                                    (rule "add_zero_right" (formula "40") (term "0"))
                                    (rule "applyEq" (formula "42") (term "1,0,0") (ifseqformula "43"))
                                    (rule "polySimp_addAssoc" (formula "42") (term "0,0"))
                                    (rule "polySimp_addComm0" (formula "42") (term "0,0,0"))
                                    (rule "polySimp_pullOutFactor2b" (formula "42") (term "0,0"))
                                    (rule "add_literals" (formula "42") (term "1,1,0,0"))
                                    (rule "times_zero_1" (formula "42") (term "1,0,0"))
                                    (rule "add_zero_right" (formula "42") (term "0,0"))
                                    (rule "applyEq" (formula "48") (term "4,1") (ifseqformula "43"))
                                    (rule "applyEq" (formula "14") (term "4,1,1,0") (ifseqformula "43"))
                                    (rule "applyEq" (formula "15") (term "4,1,0,1,1,0") (ifseqformula "43"))
                                    (rule "inEqSimp_sepNegMonomial1" (formula "21"))
                                    (rule "polySimp_mulLiterals" (formula "21") (term "0"))
                                    (rule "polySimp_elimOne" (formula "21") (term "0"))
                                    (rule "inEqSimp_sepNegMonomial0" (formula "22"))
                                    (rule "polySimp_mulLiterals" (formula "22") (term "0"))
                                    (rule "polySimp_elimOne" (formula "22") (term "0"))
                                    (rule "inEqSimp_invertInEq0" (formula "40"))
                                    (rule "mul_literals" (formula "40") (term "1"))
                                    (rule "polySimp_mulLiterals" (formula "40") (term "0"))
                                    (rule "elimGcdGeq_antec" (formula "40") (inst "elimGcdRightDiv=Z(0(#))") (inst "elimGcdLeftDiv=l_0") (inst "elimGcd=Z(6(5(2(#))))"))
                                    (rule "polySimp_mulLiterals" (formula "40") (term "1,0,0,0,0,1,0"))
                                    (rule "leq_literals" (formula "40") (term "0,0"))
                                     (builtin "One Step Simplification" (formula "40"))
                                    (rule "add_zero_right" (formula "40") (term "0,0,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "40") (term "1,0,0"))
                                    (rule "mul_literals" (formula "40") (term "1,0,0,0,0"))
                                    (rule "add_zero_right" (formula "40") (term "0,0,0,0"))
                                    (rule "polySimp_pullOutFactor0b" (formula "40") (term "0,0"))
                                    (rule "add_literals" (formula "40") (term "1,1,0,0"))
                                    (rule "times_zero_1" (formula "40") (term "1,0,0"))
                                    (rule "add_literals" (formula "40") (term "0,0"))
                                    (rule "leq_literals" (formula "40") (term "0"))
                                     (builtin "One Step Simplification" (formula "40"))
                                    (rule "inEqSimp_exactShadow3" (formula "41") (ifseqformula "35"))
                                    (rule "polySimp_rightDist" (formula "41") (term "0,0"))
                                    (rule "polySimp_mulAssoc" (formula "41") (term "0,0,0"))
                                    (rule "polySimp_mulComm0" (formula "41") (term "0,0,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "41") (term "0,0,0"))
                                    (rule "polySimp_addComm1" (formula "41") (term "0"))
                                    (rule "polySimp_addComm0" (formula "41") (term "0,0"))
                                    (rule "inEqSimp_sepNegMonomial1" (formula "41"))
                                    (rule "polySimp_mulLiterals" (formula "41") (term "0"))
                                    (rule "polySimp_elimOne" (formula "41") (term "0"))
                                    (rule "inEqSimp_subsumption0" (formula "21") (ifseqformula "41"))
                                    (rule "inEqSimp_homoInEq0" (formula "21") (term "0"))
                                    (rule "polySimp_mulComm0" (formula "21") (term "1,0,0"))
                                    (rule "polySimp_rightDist" (formula "21") (term "1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "21") (term "1,1,0,0"))
                                    (rule "mul_literals" (formula "21") (term "0,1,0,0"))
                                    (rule "polySimp_addAssoc" (formula "21") (term "0,0"))
                                    (rule "polySimp_addComm1" (formula "21") (term "0,0,0"))
                                    (rule "add_literals" (formula "21") (term "0,0,0,0"))
                                    (rule "polySimp_pullOutFactor0b" (formula "21") (term "0,0"))
                                    (rule "add_literals" (formula "21") (term "1,1,0,0"))
                                    (rule "times_zero_1" (formula "21") (term "1,0,0"))
                                    (rule "add_literals" (formula "21") (term "0,0"))
                                    (rule "qeq_literals" (formula "21") (term "0"))
                                     (builtin "One Step Simplification" (formula "21"))
                                    (rule "true_left" (formula "21"))
                                    (rule "inEqSimp_exactShadow3" (formula "21") (ifseqformula "30"))
                                    (rule "polySimp_rightDist" (formula "21") (term "0,0"))
                                    (rule "mul_literals" (formula "21") (term "0,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "21") (term "1,0,0"))
                                    (rule "polySimp_addComm1" (formula "21") (term "0"))
                                    (rule "add_literals" (formula "21") (term "0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "21"))
                                    (rule "mul_literals" (formula "21") (term "1"))
                                    (rule "inEqSimp_subsumption6" (formula "21") (ifseqformula "40"))
                                    (rule "mul_literals" (formula "21") (term "1,1,0"))
                                    (rule "greater_literals" (formula "21") (term "0,0"))
                                     (builtin "One Step Simplification" (formula "21"))
                                    (rule "leq_literals" (formula "21") (term "0"))
                                     (builtin "One Step Simplification" (formula "21"))
                                    (rule "true_left" (formula "21"))
                                    (rule "inEqSimp_exactShadow3" (formula "29") (ifseqformula "40"))
                                    (rule "times_zero_1" (formula "29") (term "0,0"))
                                    (rule "add_zero_left" (formula "29") (term "0"))
                                    (rule "inEqSimp_sepNegMonomial1" (formula "29"))
                                    (rule "polySimp_mulLiterals" (formula "29") (term "0"))
                                    (rule "elimGcdLeq_antec" (formula "29") (inst "elimGcdRightDiv=Z(7(2(1(#))))") (inst "elimGcdLeftDiv=l_0") (inst "elimGcd=Z(6(5(2(#))))"))
                                    (rule "leq_literals" (formula "29") (term "0,0"))
                                     (builtin "One Step Simplification" (formula "29"))
                                    (rule "mul_literals" (formula "29") (term "0,1,0,0,0,0,0"))
                                    (rule "neg_literal" (formula "29") (term "0,0,0,0,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "29") (term "1,0,0"))
                                    (rule "mul_literals" (formula "29") (term "1,0,0,0,0,0"))
                                    (rule "add_literals" (formula "29") (term "0,0,0,0,0"))
                                    (rule "add_literals" (formula "29") (term "0,0,0,0"))
                                    (rule "polySimp_pullOutFactor0b" (formula "29") (term "0,0"))
                                    (rule "add_literals" (formula "29") (term "1,1,0,0"))
                                    (rule "times_zero_1" (formula "29") (term "1,0,0"))
                                    (rule "add_literals" (formula "29") (term "0,0"))
                                    (rule "qeq_literals" (formula "29") (term "0"))
                                     (builtin "One Step Simplification" (formula "29"))
                                    (rule "Contract_axiom_for_bufferLen_in_Buffers" (formula "54") (term "0"))
                                     (builtin "One Step Simplification" (formula "54") (ifInst ""  (formula "17")) (ifInst ""  (formula "24")) (ifInst ""  (formula "82")) (ifInst ""  (formula "26")))
                                    (rule "inEqSimp_ltToLeq" (formula "54") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "54") (term "1,0,0,1,0,0"))
                                    (rule "polySimp_addComm1" (formula "54") (term "0,1,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "54") (term "0,1,1"))
                                    (rule "inEqSimp_commuteLeq" (formula "54") (term "0,0,0"))
                                    (rule "replace_known_left" (formula "54") (term "0,0,0") (ifseqformula "9"))
                                     (builtin "One Step Simplification" (formula "54"))
                                    (rule "applyEq" (formula "54") (term "0,0,1,1") (ifseqformula "55"))
                                    (rule "replace_known_left" (formula "54") (term "0,1,1") (ifseqformula "50"))
                                     (builtin "One Step Simplification" (formula "54"))
                                    (rule "applyEq" (formula "54") (term "0,1,1") (ifseqformula "55"))
                                    (rule "replace_known_left" (formula "54") (term "1,1") (ifseqformula "51"))
                                     (builtin "One Step Simplification" (formula "54"))
                                    (rule "inEqSimp_sepNegMonomial0" (formula "54") (term "0,0"))
                                    (rule "polySimp_mulLiterals" (formula "54") (term "0,0,0"))
                                    (rule "polySimp_elimOne" (formula "54") (term "0,0,0"))
                                    (rule "replace_known_left" (formula "54") (term "0,0") (ifseqformula "8"))
                                     (builtin "One Step Simplification" (formula "54"))
                                    (rule "true_left" (formula "54"))
                                    (rule "Definition_axiom_for_bufferLen_in_de_wiesler_Buffers" (formula "12") (term "0,2,0"))
                                    (rule "Class_invariant_axiom_for_de_wiesler_Buffers" (formula "47"))
                                    (rule "andLeft" (formula "47"))
                                    (rule "notLeft" (formula "48"))
                                    (rule "notLeft" (formula "47"))
                                    (rule "replace_known_right" (formula "52") (term "0,0,0,0") (ifseqformula "62"))
                                     (builtin "One Step Simplification" (formula "52"))
                                    (rule "replace_known_right" (formula "3") (term "0") (ifseqformula "62"))
                                     (builtin "One Step Simplification" (formula "3"))
                                    (rule "replace_known_left" (formula "52") (term "0,0,0") (ifseqformula "3"))
                                     (builtin "One Step Simplification" (formula "52"))
                                    (rule "replace_known_right" (formula "2") (term "0") (ifseqformula "61"))
                                     (builtin "One Step Simplification" (formula "2"))
                                    (rule "Free_class_invariant_axiom_for_de_wiesler_Classifier" (formula "45"))
                                     (builtin "One Step Simplification" (formula "45"))
                                    (rule "andLeft" (formula "45"))
                                    (rule "andLeft" (formula "45"))
                                    (rule "andLeft" (formula "45"))
                                    (rule "andLeft" (formula "45"))
                                    (rule "andLeft" (formula "45"))
                                    (rule "andLeft" (formula "45"))
                                    (rule "translateJavaSubInt" (formula "50") (term "0,2,0"))
                                    (rule "translateJavaSubInt" (formula "50") (term "0,2,1"))
                                    (rule "translateJavaMulInt" (formula "47") (term "1,1"))
                                    (rule "eqSymm" (formula "50"))
                                    (rule "eqSymm" (formula "47"))
                                    (rule "polySimp_elimSub" (formula "50") (term "0,2,1"))
                                    (rule "mul_literals" (formula "50") (term "1,0,2,1"))
                                    (rule "polySimp_elimSub" (formula "50") (term "0,2,0"))
                                    (rule "mul_literals" (formula "50") (term "1,0,2,0"))
                                    (rule "polySimp_mulComm0" (formula "47") (term "1,0"))
                                    (rule "polySimp_addComm0" (formula "50") (term "0,2,1"))
                                    (rule "polySimp_addComm0" (formula "50") (term "0,2,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "45"))
                                    (rule "applyEq" (formula "46") (term "0") (ifseqformula "37"))
                                    (rule "applyEq" (formula "45") (term "0") (ifseqformula "37"))
                                    (rule "applyEq" (formula "46") (term "1") (ifseqformula "37"))
                                    (rule "inEqSimp_subsumption1" (formula "62") (ifseqformula "45"))
                                    (rule "leq_literals" (formula "62") (term "0"))
                                     (builtin "One Step Simplification" (formula "62"))
                                    (rule "true_left" (formula "62"))
                                    (rule "inEqSimp_exactShadow3" (formula "45") (ifseqformula "28"))
                                    (rule "mul_literals" (formula "45") (term "0,0"))
                                    (rule "polySimp_addAssoc" (formula "45") (term "0"))
                                    (rule "add_literals" (formula "45") (term "0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "45"))
                                    (rule "mul_literals" (formula "45") (term "1"))
                                    (rule "inEqSimp_subsumption1" (formula "62") (ifseqformula "45"))
                                    (rule "leq_literals" (formula "62") (term "0"))
                                     (builtin "One Step Simplification" (formula "62"))
                                    (rule "true_left" (formula "62"))
                                    (rule "Free_class_invariant_axiom_for_de_wiesler_Buffers" (formula "26") (inst "b=b"))
                                     (builtin "One Step Simplification" (formula "26") (ifInst ""  (formula "61")) (ifInst ""  (formula "62")))
                                    (rule "expand_inInt" (formula "26") (term "1,0,0,1"))
                                    (rule "replace_int_MIN" (formula "26") (term "0,1,1,0,0,1"))
                                    (rule "replace_int_MAX" (formula "26") (term "1,0,1,0,0,1"))
                                    (rule "andLeft" (formula "26"))
                                    (rule "andLeft" (formula "26"))
                                    (rule "andLeft" (formula "26"))
                                    (rule "notLeft" (formula "26"))
                                    (rule "translateJavaMulInt" (formula "26") (term "1"))
                                    (rule "mul_literals" (formula "26") (term "1"))
                                    (rule "eqSymm" (formula "66"))
                                    (rule "inEqSimp_ltToLeq" (formula "27") (term "1,0,0,0"))
                                    (rule "polySimp_mulComm0" (formula "27") (term "1,0,0,1,0,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "27") (term "0,1,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "27") (term "0,0,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "27") (term "1,1,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "26"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "27") (term "1,0,0,0"))
                                    (rule "polySimp_mulComm0" (formula "27") (term "1,1,0,0,0"))
                                    (rule "polySimp_rightDist" (formula "27") (term "1,1,0,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "27") (term "1,1,1,0,0,0"))
                                    (rule "mul_literals" (formula "27") (term "0,1,1,0,0,0"))
                                    (rule "polySimp_elimOne" (formula "27") (term "1,1,1,0,0,0"))
                                    (rule "inEqSimp_subsumption1" (formula "26") (ifseqformula "47"))
                                    (rule "leq_literals" (formula "26") (term "0"))
                                     (builtin "One Step Simplification" (formula "26"))
                                    (rule "true_left" (formula "26"))
                                    (rule "Definition_axiom_for_bufferLen_in_de_wiesler_Buffers" (formula "59") (term "0"))
                                    (rule "nnf_imp2or" (formula "62") (term "0"))
                                    (rule "nnf_imp2or" (formula "13") (term "0"))
                                    (rule "Definition_axiom_for_bufferLen_in_de_wiesler_Buffers" (formula "15") (term "0,0,1,1,0"))
                                    (rule "polySimp_addComm0" (formula "15") (term "0,1,1,0"))
                                    (rule "commute_or" (formula "15") (term "0,0,0"))
                                    (rule "commute_or" (formula "14") (term "0,0,0,0"))
                                    (rule "commute_and" (formula "11") (term "1"))
                                    (rule "Free_class_invariant_axiom_for_de_wiesler_Buffers" (formula "57") (inst "b=b"))
                                     (builtin "One Step Simplification" (formula "57") (ifInst ""  (formula "60")) (ifInst ""  (formula "61")))
                                    (rule "expand_inInt" (formula "57") (term "1,0,0,1"))
                                    (rule "replace_int_MAX" (formula "57") (term "1,0,1,0,0,1"))
                                    (rule "replace_int_MIN" (formula "57") (term "0,1,1,0,0,1"))
                                    (rule "andLeft" (formula "57"))
                                    (rule "andLeft" (formula "57"))
                                    (rule "andLeft" (formula "57"))
                                    (rule "notLeft" (formula "57"))
                                    (rule "translateJavaMulInt" (formula "57") (term "1"))
                                    (rule "mul_literals" (formula "57") (term "1"))
                                    (rule "eqSymm" (formula "65"))
                                    (rule "inEqSimp_ltToLeq" (formula "58") (term "1,0,0,0"))
                                    (rule "polySimp_mulComm0" (formula "58") (term "1,0,0,1,0,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "58") (term "0,0,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "58") (term "0,1,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "58") (term "1,1,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "57"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "58") (term "1,0,0,0"))
                                    (rule "polySimp_mulComm0" (formula "58") (term "1,1,0,0,0"))
                                    (rule "polySimp_rightDist" (formula "58") (term "1,1,0,0,0"))
                                    (rule "mul_literals" (formula "58") (term "0,1,1,0,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "58") (term "1,1,1,0,0,0"))
                                    (rule "polySimp_elimOne" (formula "58") (term "1,1,1,0,0,0"))
                                    (rule "inEqSimp_subsumption1" (formula "57") (ifseqformula "46"))
                                    (rule "leq_literals" (formula "57") (term "0"))
                                     (builtin "One Step Simplification" (formula "57"))
                                    (rule "true_left" (formula "57"))
                                    (rule "Definition_axiom_for_classOf_in_de_wiesler_Classifier" (formula "12") (term "0,0,2,1,2,0"))
                                    (rule "ifthenelse_split" (formula "10") (term "0"))
                                    (branch "j_0 >= 1 TRUE"
                                       (rule "applyEqReverse" (formula "12") (term "1,0,1") (ifseqformula "11"))
                                       (rule "hideAuxiliaryEq" (formula "11"))
                                       (rule "replace_known_left" (formula "11") (term "0") (ifseqformula "10"))
                                        (builtin "One Step Simplification" (formula "11"))
                                       (rule "andLeft" (formula "11"))
                                       (rule "inEqSimp_commuteGeq" (formula "11"))
                                       (rule "inEqSimp_subsumption1" (formula "9") (ifseqformula "10"))
                                       (rule "leq_literals" (formula "9") (term "0"))
                                        (builtin "One Step Simplification" (formula "9"))
                                       (rule "true_left" (formula "9"))
                                       (rule "Class_invariant_axiom_for_de_wiesler_Classifier" (formula "38") (term "1"))
                                       (rule "replace_known_right" (formula "38") (term "0,1,1") (ifseqformula "66"))
                                        (builtin "One Step Simplification" (formula "38") (ifInst ""  (formula "67")))
                                       (rule "true_left" (formula "38"))
                                       (rule "nnf_imp2or" (formula "26") (term "0"))
                                       (rule "nnf_notAnd" (formula "61") (term "0,0"))
                                       (rule "nnf_notAnd" (formula "13") (term "0,0"))
                                       (rule "Definition_axiom_for_countClassOfSliceEq_in_de_wiesler_Classifier" (formula "1") (term "0") (inst "i=i"))
                                       (rule "Contract_axiom_for_isClassifiedUntil_in_Classifier" (formula "38") (term "0"))
                                       (rule "translateJavaSubInt" (formula "38") (term "0,0,0,1,1,1,0,0,0,0"))
                                       (rule "eqSymm" (formula "38") (term "0,1,1,0,0,0,0"))
                                       (rule "replace_known_left" (formula "38") (term "1,0,0,0") (ifseqformula "17"))
                                        (builtin "One Step Simplification" (formula "38") (ifInst ""  (formula "37")) (ifInst ""  (formula "86")) (ifInst ""  (formula "84")) (ifInst ""  (formula "85")) (ifInst ""  (formula "18")) (ifInst ""  (formula "83")))
                                       (rule "polySimp_elimSub" (formula "38") (term "0,0,0,1,1,0"))
                                       (rule "polySimp_pullOutFactor1b" (formula "38") (term "0,0,0,1,1,0"))
                                       (rule "add_literals" (formula "38") (term "1,1,0,0,0,1,1,0"))
                                       (rule "times_zero_1" (formula "38") (term "1,0,0,0,1,1,0"))
                                       (rule "add_zero_right" (formula "38") (term "0,0,0,1,1,0"))
                                       (rule "inEqSimp_commuteGeq" (formula "38") (term "0,1,0"))
                                       (rule "applyEq" (formula "38") (term "0,0,1,0") (ifseqformula "37"))
                                       (rule "inEqSimp_subsumption0" (formula "38") (term "0,1,0") (ifseqformula "28"))
                                       (rule "inEqSimp_homoInEq0" (formula "38") (term "0,0,1,0"))
                                       (rule "polySimp_mulComm0" (formula "38") (term "1,0,0,0,1,0"))
                                       (rule "polySimp_rightDist" (formula "38") (term "1,0,0,0,1,0"))
                                       (rule "mul_literals" (formula "38") (term "0,1,0,0,0,1,0"))
                                       (rule "polySimp_addAssoc" (formula "38") (term "0,0,0,1,0"))
                                       (rule "polySimp_addComm0" (formula "38") (term "0,0,0,0,1,0"))
                                       (rule "polySimp_pullOutFactor1b" (formula "38") (term "0,0,0,1,0"))
                                       (rule "add_literals" (formula "38") (term "1,1,0,0,0,1,0"))
                                       (rule "times_zero_1" (formula "38") (term "1,0,0,0,1,0"))
                                       (rule "add_zero_right" (formula "38") (term "0,0,0,1,0"))
                                       (rule "qeq_literals" (formula "38") (term "0,0,1,0"))
                                        (builtin "One Step Simplification" (formula "38"))
                                       (rule "Definition_axiom_for_isClassifiedUntil_in_de_wiesler_Classifier" (formula "39") (term "0") (inst "b=b"))
                                        (builtin "One Step Simplification" (formula "39"))
                                       (rule "expand_inInt" (formula "39") (term "1,0,0,1,0"))
                                       (rule "replace_int_MAX" (formula "39") (term "1,0,1,0,0,1,0"))
                                       (rule "replace_int_MIN" (formula "39") (term "0,1,1,0,0,1,0"))
                                       (rule "andLeft" (formula "39"))
                                       (rule "andLeft" (formula "39"))
                                       (rule "andLeft" (formula "39"))
                                       (rule "andLeft" (formula "39"))
                                       (rule "translateJavaSubInt" (formula "43") (term "1"))
                                       (rule "polySimp_elimSub" (formula "43") (term "1"))
                                       (rule "polySimp_mulComm0" (formula "43") (term "1,1"))
                                       (rule "polySimp_rightDist" (formula "43") (term "1,1"))
                                       (rule "polySimp_mulAssoc" (formula "43") (term "0,1,1"))
                                       (rule "polySimp_mulComm0" (formula "43") (term "0,0,1,1"))
                                       (rule "polySimp_mulLiterals" (formula "43") (term "0,1,1"))
                                       (rule "polySimp_addComm0" (formula "43") (term "1"))
                                       (rule "inEqSimp_ltToLeq" (formula "42") (term "1,0,0,0"))
                                       (rule "polySimp_mulComm0" (formula "42") (term "1,0,0,1,0,0,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "42") (term "1,1,0,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "42") (term "0,0,0,0"))
                                       (rule "applyEq" (formula "42") (term "0,1,0,0,1,0,0,0") (ifseqformula "37"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "42") (term "1,0,0,0"))
                                       (rule "polySimp_mulComm0" (formula "42") (term "1,1,0,0,0"))
                                       (rule "polySimp_rightDist" (formula "42") (term "1,1,0,0,0"))
                                       (rule "mul_literals" (formula "42") (term "0,1,1,0,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "42") (term "1,1,1,0,0,0"))
                                       (rule "polySimp_elimOne" (formula "42") (term "1,1,1,0,0,0"))
                                       (rule "nnf_imp2or" (formula "61") (term "0"))
                                       (rule "Definition_axiom_for_countClassOfSliceEq_in_de_wiesler_Classifier" (formula "58") (term "1") (inst "i=i"))
                                       (rule "eqSymm" (formula "58"))
                                       (rule "applyEq" (formula "1") (term "0") (ifseqformula "58"))
                                       (rule "Contract_axiom_for_countClassOfSliceEq_in_Classifier" (formula "14") (term "1,1,0"))
                                       (rule "replace_known_right" (formula "14") (term "0,1,0,0,0,0") (ifseqformula "91"))
                                        (builtin "One Step Simplification" (formula "14") (ifInst ""  (formula "18")) (ifInst ""  (formula "19")) (ifInst ""  (formula "88")))
                                       (rule "Definition_axiom_for_countClassOfSliceEq_in_de_wiesler_Classifier" (formula "15") (term "1,1,0") (inst "i=i"))
                                       (rule "eqSymm" (formula "15") (term "1,0"))
                                       (rule "nnf_notAnd" (formula "27") (term "0,0"))
                                       (rule "nnf_notAnd" (formula "67") (term "1,0,0"))
                                       (rule "inEqSimp_notLeq" (formula "67") (term "0,1,0,0"))
                                       (rule "mul_literals" (formula "67") (term "1,0,0,0,1,0,0"))
                                       (rule "add_literals" (formula "67") (term "0,0,0,1,0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "67") (term "0,1,0,0"))
                                       (rule "mul_literals" (formula "67") (term "1,0,1,0,0"))
                                       (rule "inEqSimp_notGeq" (formula "67") (term "1,1,0,0"))
                                       (rule "mul_literals" (formula "67") (term "1,0,0,1,1,0,0"))
                                       (rule "add_literals" (formula "67") (term "0,0,1,1,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "67") (term "1,1,0,0"))
                                       (rule "mul_literals" (formula "67") (term "1,1,1,0,0"))
                                       (rule "nnf_notAnd" (formula "67") (term "0,0,0"))
                                       (rule "inEqSimp_notLeq" (formula "67") (term "1,0,0,0"))
                                       (rule "polySimp_rightDist" (formula "67") (term "1,0,0,1,0,0,0"))
                                       (rule "mul_literals" (formula "67") (term "0,1,0,0,1,0,0,0"))
                                       (rule "polySimp_addAssoc" (formula "67") (term "0,0,1,0,0,0"))
                                       (rule "add_literals" (formula "67") (term "0,0,0,1,0,0,0"))
                                       (rule "add_zero_left" (formula "67") (term "0,0,1,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "67") (term "1,0,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "67") (term "1,1,0,0,0"))
                                       (rule "polySimp_elimOne" (formula "67") (term "1,1,0,0,0"))
                                       (rule "inEqSimp_notGeq" (formula "67") (term "0,0,0,0"))
                                       (rule "mul_literals" (formula "67") (term "1,0,0,0,0,0,0"))
                                       (rule "add_zero_right" (formula "67") (term "0,0,0,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "67") (term "0,0,0,0"))
                                       (rule "mul_literals" (formula "67") (term "1,0,0,0,0"))
                                       (rule "nnf_notAnd" (formula "13") (term "0,0,0"))
                                       (rule "inEqSimp_notGeq" (formula "13") (term "0,0,0,0"))
                                       (rule "times_zero_1" (formula "13") (term "1,0,0,0,0,0,0"))
                                       (rule "add_literals" (formula "13") (term "0,0,0,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "0,0,0,0"))
                                       (rule "mul_literals" (formula "13") (term "1,0,0,0,0"))
                                       (rule "inEqSimp_notLeq" (formula "13") (term "1,0,0,0"))
                                       (rule "polySimp_rightDist" (formula "13") (term "1,0,0,1,0,0,0"))
                                       (rule "mul_literals" (formula "13") (term "0,1,0,0,1,0,0,0"))
                                       (rule "polySimp_addAssoc" (formula "13") (term "0,0,1,0,0,0"))
                                       (rule "add_literals" (formula "13") (term "0,0,0,1,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "13") (term "1,0,0,0"))
                                       (rule "polySimp_mulComm0" (formula "13") (term "1,1,0,0,0"))
                                       (rule "polySimp_rightDist" (formula "13") (term "1,1,0,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "13") (term "1,1,1,0,0,0"))
                                       (rule "mul_literals" (formula "13") (term "0,1,1,0,0,0"))
                                       (rule "polySimp_elimOne" (formula "13") (term "1,1,1,0,0,0"))
                                       (rule "nnf_notAnd" (formula "13") (term "1,0,0"))
                                       (rule "inEqSimp_notLeq" (formula "13") (term "0,1,0,0"))
                                       (rule "mul_literals" (formula "13") (term "1,0,0,0,1,0,0"))
                                       (rule "add_literals" (formula "13") (term "0,0,0,1,0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "13") (term "0,1,0,0"))
                                       (rule "mul_literals" (formula "13") (term "1,0,1,0,0"))
                                       (rule "inEqSimp_notGeq" (formula "13") (term "1,1,0,0"))
                                       (rule "mul_literals" (formula "13") (term "1,0,0,1,1,0,0"))
                                       (rule "add_literals" (formula "13") (term "0,0,1,1,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "1,1,0,0"))
                                       (rule "mul_literals" (formula "13") (term "1,1,1,0,0"))
                                       (rule "nnf_imp2or" (formula "43") (term "0"))
                                       (rule "nnf_notAnd" (formula "62") (term "0,0"))
                                       (rule "nnf_notAnd" (formula "27") (term "1,0,0"))
                                       (rule "inEqSimp_notGeq" (formula "27") (term "1,1,0,0"))
                                       (rule "mul_literals" (formula "27") (term "1,0,0,1,1,0,0"))
                                       (rule "add_literals" (formula "27") (term "0,0,1,1,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "27") (term "1,1,0,0"))
                                       (rule "mul_literals" (formula "27") (term "1,1,1,0,0"))
                                       (rule "inEqSimp_notLeq" (formula "27") (term "0,1,0,0"))
                                       (rule "mul_literals" (formula "27") (term "1,0,0,0,1,0,0"))
                                       (rule "add_literals" (formula "27") (term "0,0,0,1,0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "27") (term "0,1,0,0"))
                                       (rule "mul_literals" (formula "27") (term "1,0,1,0,0"))
                                       (rule "nnf_notAnd" (formula "27") (term "0,0,0"))
                                       (rule "inEqSimp_notGeq" (formula "27") (term "0,0,0,0"))
                                       (rule "mul_literals" (formula "27") (term "1,0,0,0,0,0,0"))
                                       (rule "add_zero_right" (formula "27") (term "0,0,0,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "27") (term "0,0,0,0"))
                                       (rule "mul_literals" (formula "27") (term "1,0,0,0,0"))
                                       (rule "inEqSimp_notLeq" (formula "27") (term "1,0,0,0"))
                                       (rule "polySimp_rightDist" (formula "27") (term "1,0,0,1,0,0,0"))
                                       (rule "mul_literals" (formula "27") (term "0,1,0,0,1,0,0,0"))
                                       (rule "polySimp_addAssoc" (formula "27") (term "0,0,1,0,0,0"))
                                       (rule "add_literals" (formula "27") (term "0,0,0,1,0,0,0"))
                                       (rule "add_zero_left" (formula "27") (term "0,0,1,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "27") (term "1,0,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "27") (term "1,1,0,0,0"))
                                       (rule "polySimp_elimOne" (formula "27") (term "1,1,0,0,0"))
                                       (rule "Class_invariant_axiom_for_de_wiesler_Tree" (formula "56"))
                                       (rule "andLeft" (formula "56"))
                                       (rule "notLeft" (formula "56"))
                                       (rule "notLeft" (formula "56"))
                                       (rule "applyEq" (formula "69") (term "0") (ifseqformula "53"))
                                       (rule "Definition_axiom_for_isSortedSliceTransitive_in_de_wiesler_Functions" (formula "54") (term "0") (inst "i=i") (inst "j=j_1"))
                                        (builtin "One Step Simplification" (formula "54"))
                                       (rule "expand_inInt" (formula "54") (term "1,0,0"))
                                       (rule "expand_inInt" (formula "54") (term "1,0,0,1,0"))
                                       (rule "replace_int_MIN" (formula "54") (term "0,1,1,0,0"))
                                       (rule "replace_int_MAX" (formula "54") (term "1,0,1,0,0"))
                                       (rule "replace_int_MIN" (formula "54") (term "0,1,1,0,0,1,0"))
                                       (rule "replace_int_MAX" (formula "54") (term "1,0,1,0,0,1,0"))
                                       (rule "inEqSimp_ltToLeq" (formula "54") (term "1,0,0,0,1,0"))
                                       (rule "polySimp_mulComm0" (formula "54") (term "1,0,0,1,0,0,0,1,0"))
                                       (rule "inEqSimp_ltToLeq" (formula "54") (term "1,0,0,0"))
                                       (rule "polySimp_mulComm0" (formula "54") (term "1,0,0,1,0,0,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "54") (term "0,0,0,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "54") (term "1,0,1,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "54") (term "0,0,0,0,1,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "54") (term "1,1,0,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "54") (term "1,1,0,0,1,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "54") (term "1,0,0,0,1,0"))
                                       (rule "polySimp_mulComm0" (formula "54") (term "1,1,0,0,0,1,0"))
                                       (rule "polySimp_rightDist" (formula "54") (term "1,1,0,0,0,1,0"))
                                       (rule "polySimp_mulLiterals" (formula "54") (term "1,1,1,0,0,0,1,0"))
                                       (rule "mul_literals" (formula "54") (term "0,1,1,0,0,0,1,0"))
                                       (rule "polySimp_elimOne" (formula "54") (term "1,1,1,0,0,0,1,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "54") (term "1,0,0,0"))
                                       (rule "polySimp_mulComm0" (formula "54") (term "1,1,0,0,0"))
                                       (rule "polySimp_rightDist" (formula "54") (term "1,1,0,0,0"))
                                       (rule "mul_literals" (formula "54") (term "0,1,1,0,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "54") (term "1,1,1,0,0,0"))
                                       (rule "polySimp_elimOne" (formula "54") (term "1,1,1,0,0,0"))
                                       (rule "nnf_notAnd" (formula "43") (term "0,0"))
                                       (rule "nnf_notAnd" (formula "61") (term "1,0,0"))
                                       (rule "inEqSimp_notLeq" (formula "61") (term "0,1,0,0"))
                                       (rule "mul_literals" (formula "61") (term "1,0,0,0,1,0,0"))
                                       (rule "add_literals" (formula "61") (term "0,0,0,1,0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "61") (term "0,1,0,0"))
                                       (rule "mul_literals" (formula "61") (term "1,0,1,0,0"))
                                       (rule "inEqSimp_notGeq" (formula "61") (term "1,1,0,0"))
                                       (rule "mul_literals" (formula "61") (term "1,0,0,1,1,0,0"))
                                       (rule "add_literals" (formula "61") (term "0,0,1,1,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "61") (term "1,1,0,0"))
                                       (rule "mul_literals" (formula "61") (term "1,1,1,0,0"))
                                       (rule "nnf_notAnd" (formula "61") (term "0,0,0"))
                                       (rule "inEqSimp_notLeq" (formula "61") (term "1,0,0,0"))
                                       (rule "polySimp_rightDist" (formula "61") (term "1,0,0,1,0,0,0"))
                                       (rule "mul_literals" (formula "61") (term "0,1,0,0,1,0,0,0"))
                                       (rule "polySimp_addAssoc" (formula "61") (term "0,0,1,0,0,0"))
                                       (rule "add_literals" (formula "61") (term "0,0,0,1,0,0,0"))
                                       (rule "add_zero_left" (formula "61") (term "0,0,1,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "61") (term "1,0,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "61") (term "1,1,0,0,0"))
                                       (rule "polySimp_elimOne" (formula "61") (term "1,1,0,0,0"))
                                       (rule "inEqSimp_notGeq" (formula "61") (term "0,0,0,0"))
                                       (rule "mul_literals" (formula "61") (term "1,0,0,0,0,0,0"))
                                       (rule "add_zero_right" (formula "61") (term "0,0,0,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "61") (term "0,0,0,0"))
                                       (rule "mul_literals" (formula "61") (term "1,0,0,0,0"))
                                       (rule "arrayLengthIsAShort" (formula "63") (term "0"))
                                       (rule "expand_inShort" (formula "63"))
                                       (rule "replace_short_MIN" (formula "63") (term "0,1"))
                                       (rule "replace_short_MAX" (formula "63") (term "1,0"))
                                       (rule "andLeft" (formula "63"))
                                       (rule "inEqSimp_commuteLeq" (formula "64"))
                                       (rule "applyEq" (formula "64") (term "0") (ifseqformula "65"))
                                       (rule "qeq_literals" (formula "64"))
                                       (rule "true_left" (formula "64"))
                                       (rule "applyEq" (formula "63") (term "0") (ifseqformula "64"))
                                       (rule "leq_literals" (formula "63"))
                                       (rule "true_left" (formula "63"))
                                       (rule "arrayLengthNotNegative" (formula "63") (term "0"))
                                       (rule "applyEq" (formula "63") (term "0") (ifseqformula "64"))
                                       (rule "qeq_literals" (formula "63"))
                                       (rule "true_left" (formula "63"))
                                       (rule "arrayLengthNotNegative" (formula "62") (term "0"))
                                       (rule "applyEq" (formula "62") (term "0") (ifseqformula "63"))
                                       (rule "qeq_literals" (formula "62"))
                                       (rule "true_left" (formula "62"))
                                       (rule "arrayLengthIsAShort" (formula "62") (term "0"))
                                       (rule "expand_inShort" (formula "62"))
                                       (rule "replace_short_MIN" (formula "62") (term "0,1"))
                                       (rule "replace_short_MAX" (formula "62") (term "1,0"))
                                       (rule "andLeft" (formula "62"))
                                       (rule "inEqSimp_commuteLeq" (formula "63"))
                                       (rule "applyEq" (formula "63") (term "0") (ifseqformula "64"))
                                       (rule "qeq_literals" (formula "63"))
                                       (rule "true_left" (formula "63"))
                                       (rule "applyEq" (formula "62") (term "0") (ifseqformula "63"))
                                       (rule "leq_literals" (formula "62"))
                                       (rule "closeFalse" (formula "62"))
                                    )
                                    (branch "j_0 >= 1 FALSE"
                                       (rule "applyEqReverse" (formula "11") (term "1,0,1") (ifseqformula "10"))
                                       (rule "hideAuxiliaryEq" (formula "10"))
                                       (rule "replace_known_right" (formula "10") (term "0") (ifseqformula "63"))
                                        (builtin "One Step Simplification" (formula "10"))
                                       (rule "true_left" (formula "10"))
                                       (rule "inEqSimp_geqRight" (formula "62"))
                                       (rule "mul_literals" (formula "1") (term "1,0,0"))
                                       (rule "add_literals" (formula "1") (term "0,0"))
                                       (rule "add_zero_left" (formula "1") (term "0"))
                                       (rule "inEqSimp_subsumption0" (formula "8") (ifseqformula "1"))
                                       (rule "leq_literals" (formula "8") (term "0"))
                                        (builtin "One Step Simplification" (formula "8"))
                                       (rule "true_left" (formula "8"))
                                       (rule "inEqSimp_antiSymm" (formula "9") (ifseqformula "1"))
                                       (rule "applyEq" (formula "12") (term "1,1,1,0,0,0,0") (ifseqformula "9"))
                                       (rule "add_literals" (formula "12") (term "1,1,0,0,0,0"))
                                       (rule "applyEqRigid" (formula "10") (term "0") (ifseqformula "9"))
                                       (rule "qeq_literals" (formula "10"))
                                       (rule "true_left" (formula "10"))
                                       (rule "applyEqRigid" (formula "12") (term "1,1,1,0,0") (ifseqformula "9"))
                                       (rule "add_literals" (formula "12") (term "1,1,0,0"))
                                       (rule "applyEqRigid" (formula "2") (term "5,0") (ifseqformula "9"))
                                       (rule "applyEq" (formula "7") (term "1,1") (ifseqformula "9"))
                                       (rule "add_zero_right" (formula "7") (term "1"))
                                       (rule "applyEqRigid" (formula "56") (term "0,2,0") (ifseqformula "9"))
                                       (rule "applyEqRigid" (formula "8") (term "1,1") (ifseqformula "9"))
                                       (rule "add_zero_right" (formula "8") (term "1"))
                                       (rule "applyEq" (formula "10") (term "1,0") (ifseqformula "9"))
                                       (rule "bsum_lower_equals_upper" (formula "10") (term "0"))
                                       (rule "eqSymm" (formula "10"))
                                       (rule "applyEqRigid" (formula "1") (term "0") (ifseqformula "9"))
                                       (rule "leq_literals" (formula "1"))
                                       (rule "true_left" (formula "1"))
                                       (rule "applyEqRigid" (formula "51") (term "0,2,0") (ifseqformula "8"))
                                       (rule "applyEq" (formula "12") (term "1,1,0,0,0") (ifseqformula "8"))
                                       (rule "applyEq" (formula "12") (term "1,0,1,0") (ifseqformula "9"))
                                       (rule "applyEqRigid" (formula "1") (term "0,1,1") (ifseqformula "9"))
                                       (rule "times_zero_2" (formula "1") (term "1,1"))
                                       (rule "add_zero_right" (formula "1") (term "1"))
                                       (rule "applyEq" (formula "51") (term "5,1") (ifseqformula "8"))
                                       (rule "applyEqRigid" (formula "12") (term "1,1,0,0,1,0") (ifseqformula "8"))
                                       (rule "add_literals" (formula "12") (term "1,0,0,1,0"))
                                       (rule "inEqSimp_subsumption1" (formula "7") (ifseqformula "43"))
                                       (rule "leq_literals" (formula "7") (term "0"))
                                        (builtin "One Step Simplification" (formula "7"))
                                       (rule "true_left" (formula "7"))
                                       (rule "inEqSimp_subsumption1" (formula "6") (ifseqformula "41"))
                                       (rule "leq_literals" (formula "6") (term "0"))
                                        (builtin "One Step Simplification" (formula "6"))
                                       (rule "true_left" (formula "6"))
                                       (rule "inEqSimp_or_subsumption3" (formula "10") (term "0,0"))
                                       (rule "qeq_literals" (formula "10") (term "0,1,0,0"))
                                        (builtin "One Step Simplification" (formula "10"))
                                       (rule "inEqSimp_or_tautInEq0" (formula "10") (term "0,0"))
                                       (rule "add_zero_right" (formula "10") (term "1,1,0,0"))
                                       (rule "qeq_literals" (formula "10") (term "1,0,0"))
                                        (builtin "One Step Simplification" (formula "10"))
                                       (rule "true_left" (formula "10"))
                                       (rule "Class_invariant_axiom_for_de_wiesler_Classifier" (formula "32") (term "1"))
                                       (rule "replace_known_right" (formula "32") (term "0,1,1") (ifseqformula "60"))
                                        (builtin "One Step Simplification" (formula "32") (ifInst ""  (formula "61")))
                                       (rule "true_left" (formula "32"))
                                       (rule "nnf_imp2or" (formula "20") (term "0"))
                                       (rule "nnf_notAnd" (formula "55") (term "0,0"))
                                       (rule "Definition_axiom_for_isClassifiedUntil_in_de_wiesler_Classifier" (formula "32") (term "0") (inst "b=b"))
                                        (builtin "One Step Simplification" (formula "32"))
                                       (rule "expand_inInt" (formula "32") (term "1,0,0,1,0"))
                                       (rule "replace_int_MIN" (formula "32") (term "0,1,1,0,0,1,0"))
                                       (rule "replace_int_MAX" (formula "32") (term "1,0,1,0,0,1,0"))
                                       (rule "andLeft" (formula "32"))
                                       (rule "andLeft" (formula "32"))
                                       (rule "andLeft" (formula "32"))
                                       (rule "andLeft" (formula "32"))
                                       (rule "translateJavaSubInt" (formula "36") (term "1"))
                                       (rule "polySimp_elimSub" (formula "36") (term "1"))
                                       (rule "polySimp_mulComm0" (formula "36") (term "1,1"))
                                       (rule "polySimp_rightDist" (formula "36") (term "1,1"))
                                       (rule "polySimp_mulAssoc" (formula "36") (term "0,1,1"))
                                       (rule "polySimp_mulComm0" (formula "36") (term "0,0,1,1"))
                                       (rule "polySimp_mulLiterals" (formula "36") (term "0,1,1"))
                                       (rule "polySimp_addComm0" (formula "36") (term "1"))
                                       (rule "inEqSimp_ltToLeq" (formula "35") (term "1,0,0,0"))
                                       (rule "polySimp_mulComm0" (formula "35") (term "1,0,0,1,0,0,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "35") (term "1,1,0,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "35") (term "0,0,0,0"))
                                       (rule "applyEq" (formula "35") (term "0,1,0,0,1,0,0,0") (ifseqformula "31"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "35") (term "1,0,0,0"))
                                       (rule "polySimp_mulComm0" (formula "35") (term "1,1,0,0,0"))
                                       (rule "polySimp_rightDist" (formula "35") (term "1,1,0,0,0"))
                                       (rule "mul_literals" (formula "35") (term "0,1,1,0,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "35") (term "1,1,1,0,0,0"))
                                       (rule "polySimp_elimOne" (formula "35") (term "1,1,1,0,0,0"))
                                       (rule "nnf_imp2or" (formula "54") (term "0"))
                                       (rule "Contract_axiom_for_countClassOfSliceEq_in_Classifier" (formula "9") (term "1,1,0"))
                                       (rule "replace_known_right" (formula "9") (term "0,1,0,0,0,0") (ifseqformula "84"))
                                        (builtin "One Step Simplification" (formula "9") (ifInst ""  (formula "12")) (ifInst ""  (formula "13")) (ifInst ""  (formula "81")))
                                       (rule "Definition_axiom_for_countClassOfSliceEq_in_de_wiesler_Classifier" (formula "10") (term "1,1,0") (inst "i=i"))
                                       (rule "eqSymm" (formula "10") (term "1,0"))
                                       (rule "nnf_notAnd" (formula "8") (term "0,0"))
                                       (rule "nnf_notAnd" (formula "21") (term "0,0"))
                                       (rule "nnf_notAnd" (formula "60") (term "1,0,0"))
                                       (rule "inEqSimp_notGeq" (formula "60") (term "1,1,0,0"))
                                       (rule "mul_literals" (formula "60") (term "1,0,0,1,1,0,0"))
                                       (rule "add_literals" (formula "60") (term "0,0,1,1,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "60") (term "1,1,0,0"))
                                       (rule "mul_literals" (formula "60") (term "1,1,1,0,0"))
                                       (rule "inEqSimp_notLeq" (formula "60") (term "0,1,0,0"))
                                       (rule "mul_literals" (formula "60") (term "1,0,0,0,1,0,0"))
                                       (rule "add_literals" (formula "60") (term "0,0,0,1,0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "60") (term "0,1,0,0"))
                                       (rule "mul_literals" (formula "60") (term "1,0,1,0,0"))
                                       (rule "nnf_notAnd" (formula "60") (term "0,0,0"))
                                       (rule "inEqSimp_notLeq" (formula "60") (term "1,0,0,0"))
                                       (rule "polySimp_rightDist" (formula "60") (term "1,0,0,1,0,0,0"))
                                       (rule "mul_literals" (formula "60") (term "0,1,0,0,1,0,0,0"))
                                       (rule "polySimp_addAssoc" (formula "60") (term "0,0,1,0,0,0"))
                                       (rule "add_literals" (formula "60") (term "0,0,0,1,0,0,0"))
                                       (rule "add_zero_left" (formula "60") (term "0,0,1,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "60") (term "1,0,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "60") (term "1,1,0,0,0"))
                                       (rule "polySimp_elimOne" (formula "60") (term "1,1,0,0,0"))
                                       (rule "inEqSimp_notGeq" (formula "60") (term "0,0,0,0"))
                                       (rule "mul_literals" (formula "60") (term "1,0,0,0,0,0,0"))
                                       (rule "add_literals" (formula "60") (term "0,0,0,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "60") (term "0,0,0,0"))
                                       (rule "mul_literals" (formula "60") (term "1,0,0,0,0"))
                                       (rule "nnf_imp2or" (formula "36") (term "0"))
                                       (rule "nnf_notAnd" (formula "55") (term "0,0"))
                                       (rule "nnf_notAnd" (formula "8") (term "0,0,0"))
                                       (rule "inEqSimp_notLeq" (formula "8") (term "1,0,0,0"))
                                       (rule "mul_literals" (formula "8") (term "1,0,0,1,0,0,0"))
                                       (rule "add_literals" (formula "8") (term "0,0,1,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "8") (term "1,0,0,0"))
                                       (rule "mul_literals" (formula "8") (term "1,1,0,0,0"))
                                       (rule "inEqSimp_notGeq" (formula "8") (term "0,0,0,0"))
                                       (rule "mul_literals" (formula "8") (term "1,0,0,0,0,0,0"))
                                       (rule "add_zero_right" (formula "8") (term "0,0,0,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "0,0,0,0"))
                                       (rule "mul_literals" (formula "8") (term "1,0,0,0,0"))
                                       (rule "inEqSimp_or_tautInEq0" (formula "8") (term "0,0,0"))
                                       (rule "add_literals" (formula "8") (term "1,1,0,0,0"))
                                       (rule "qeq_literals" (formula "8") (term "1,0,0,0"))
                                        (builtin "One Step Simplification" (formula "8"))
                                       (rule "true_left" (formula "8"))
                                       (rule "nnf_notAnd" (formula "20") (term "1,0,0"))
                                       (rule "inEqSimp_notGeq" (formula "20") (term "1,1,0,0"))
                                       (rule "mul_literals" (formula "20") (term "1,0,0,1,1,0,0"))
                                       (rule "add_literals" (formula "20") (term "0,0,1,1,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "1,1,0,0"))
                                       (rule "mul_literals" (formula "20") (term "1,1,1,0,0"))
                                       (rule "inEqSimp_notLeq" (formula "20") (term "0,1,0,0"))
                                       (rule "mul_literals" (formula "20") (term "1,0,0,0,1,0,0"))
                                       (rule "add_literals" (formula "20") (term "0,0,0,1,0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "20") (term "0,1,0,0"))
                                       (rule "mul_literals" (formula "20") (term "1,0,1,0,0"))
                                       (rule "nnf_notAnd" (formula "20") (term "0,0,0"))
                                       (rule "inEqSimp_notGeq" (formula "20") (term "0,0,0,0"))
                                       (rule "times_zero_1" (formula "20") (term "1,0,0,0,0,0,0"))
                                       (rule "add_zero_right" (formula "20") (term "0,0,0,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "0,0,0,0"))
                                       (rule "mul_literals" (formula "20") (term "1,0,0,0,0"))
                                       (rule "inEqSimp_notLeq" (formula "20") (term "1,0,0,0"))
                                       (rule "polySimp_rightDist" (formula "20") (term "1,0,0,1,0,0,0"))
                                       (rule "mul_literals" (formula "20") (term "0,1,0,0,1,0,0,0"))
                                       (rule "polySimp_addAssoc" (formula "20") (term "0,0,1,0,0,0"))
                                       (rule "add_literals" (formula "20") (term "0,0,0,1,0,0,0"))
                                       (rule "add_zero_left" (formula "20") (term "0,0,1,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "20") (term "1,0,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "20") (term "1,1,0,0,0"))
                                       (rule "polySimp_elimOne" (formula "20") (term "1,1,0,0,0"))
                                       (rule "nnf_notAnd" (formula "35") (term "0,0"))
                                       (rule "Class_invariant_axiom_for_de_wiesler_Tree" (formula "48"))
                                       (rule "andLeft" (formula "48"))
                                       (rule "notLeft" (formula "49"))
                                       (rule "notLeft" (formula "48"))
                                       (rule "applyEq" (formula "60") (term "0") (ifseqformula "45"))
                                       (rule "Definition_axiom_for_isSortedSliceTransitive_in_de_wiesler_Functions" (formula "46") (term "0") (inst "i=i") (inst "j=j_1"))
                                        (builtin "One Step Simplification" (formula "46"))
                                       (rule "expand_inInt" (formula "46") (term "1,0,0"))
                                       (rule "expand_inInt" (formula "46") (term "1,0,0,1,0"))
                                       (rule "replace_int_MIN" (formula "46") (term "0,1,1,0,0"))
                                       (rule "replace_int_MAX" (formula "46") (term "1,0,1,0,0"))
                                       (rule "replace_int_MIN" (formula "46") (term "0,1,1,0,0,1,0"))
                                       (rule "replace_int_MAX" (formula "46") (term "1,0,1,0,0,1,0"))
                                       (rule "inEqSimp_ltToLeq" (formula "46") (term "1,0,0,0,1,0"))
                                       (rule "polySimp_mulComm0" (formula "46") (term "1,0,0,1,0,0,0,1,0"))
                                       (rule "inEqSimp_ltToLeq" (formula "46") (term "1,0,0,0"))
                                       (rule "polySimp_mulComm0" (formula "46") (term "1,0,0,1,0,0,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "46") (term "0,0,0,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "46") (term "0,0,0,0,1,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "46") (term "1,0,1,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "46") (term "1,1,0,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "46") (term "1,1,0,0,1,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "46") (term "1,0,0,0,1,0"))
                                       (rule "polySimp_mulComm0" (formula "46") (term "1,1,0,0,0,1,0"))
                                       (rule "polySimp_rightDist" (formula "46") (term "1,1,0,0,0,1,0"))
                                       (rule "mul_literals" (formula "46") (term "0,1,1,0,0,0,1,0"))
                                       (rule "polySimp_mulLiterals" (formula "46") (term "1,1,1,0,0,0,1,0"))
                                       (rule "polySimp_elimOne" (formula "46") (term "1,1,1,0,0,0,1,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "46") (term "1,0,0,0"))
                                       (rule "polySimp_mulComm0" (formula "46") (term "1,1,0,0,0"))
                                       (rule "polySimp_rightDist" (formula "46") (term "1,1,0,0,0"))
                                       (rule "mul_literals" (formula "46") (term "0,1,1,0,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "46") (term "1,1,1,0,0,0"))
                                       (rule "polySimp_elimOne" (formula "46") (term "1,1,1,0,0,0"))
                                       (rule "nnf_notAnd" (formula "53") (term "1,0,0"))
                                       (rule "inEqSimp_notGeq" (formula "53") (term "1,1,0,0"))
                                       (rule "mul_literals" (formula "53") (term "1,0,0,1,1,0,0"))
                                       (rule "add_literals" (formula "53") (term "0,0,1,1,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "53") (term "1,1,0,0"))
                                       (rule "mul_literals" (formula "53") (term "1,1,1,0,0"))
                                       (rule "inEqSimp_notLeq" (formula "53") (term "0,1,0,0"))
                                       (rule "mul_literals" (formula "53") (term "1,0,0,0,1,0,0"))
                                       (rule "add_literals" (formula "53") (term "0,0,0,1,0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "53") (term "0,1,0,0"))
                                       (rule "mul_literals" (formula "53") (term "1,0,1,0,0"))
                                       (rule "nnf_notAnd" (formula "53") (term "0,0,0"))
                                       (rule "inEqSimp_notGeq" (formula "53") (term "0,0,0,0"))
                                       (rule "mul_literals" (formula "53") (term "1,0,0,0,0,0,0"))
                                       (rule "add_zero_right" (formula "53") (term "0,0,0,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "53") (term "0,0,0,0"))
                                       (rule "mul_literals" (formula "53") (term "1,0,0,0,0"))
                                       (rule "inEqSimp_notLeq" (formula "53") (term "1,0,0,0"))
                                       (rule "polySimp_rightDist" (formula "53") (term "1,0,0,1,0,0,0"))
                                       (rule "mul_literals" (formula "53") (term "0,1,0,0,1,0,0,0"))
                                       (rule "polySimp_addAssoc" (formula "53") (term "0,0,1,0,0,0"))
                                       (rule "add_literals" (formula "53") (term "0,0,0,1,0,0,0"))
                                       (rule "add_zero_left" (formula "53") (term "0,0,1,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "53") (term "1,0,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "53") (term "1,1,0,0,0"))
                                       (rule "polySimp_elimOne" (formula "53") (term "1,1,0,0,0"))
                                       (rule "arrayLengthIsAShort" (formula "55") (term "0"))
                                       (rule "expand_inShort" (formula "55"))
                                       (rule "replace_short_MIN" (formula "55") (term "0,1"))
                                       (rule "replace_short_MAX" (formula "55") (term "1,0"))
                                       (rule "andLeft" (formula "55"))
                                       (rule "inEqSimp_commuteLeq" (formula "56"))
                                       (rule "applyEq" (formula "55") (term "0") (ifseqformula "57"))
                                       (rule "leq_literals" (formula "55"))
                                       (rule "true_left" (formula "55"))
                                       (rule "applyEq" (formula "55") (term "0") (ifseqformula "56"))
                                       (rule "qeq_literals" (formula "55"))
                                       (rule "true_left" (formula "55"))
                                       (rule "arrayLengthNotNegative" (formula "55") (term "0"))
                                       (rule "applyEq" (formula "55") (term "0") (ifseqformula "56"))
                                       (rule "qeq_literals" (formula "55"))
                                       (rule "true_left" (formula "55"))
                                       (rule "arrayLengthIsAShort" (formula "54") (term "0"))
                                       (rule "expand_inShort" (formula "54"))
                                       (rule "replace_short_MIN" (formula "54") (term "0,1"))
                                       (rule "replace_short_MAX" (formula "54") (term "1,0"))
                                       (rule "andLeft" (formula "54"))
                                       (rule "inEqSimp_commuteLeq" (formula "55"))
                                       (rule "applyEq" (formula "55") (term "0") (ifseqformula "56"))
                                       (rule "qeq_literals" (formula "55"))
                                       (rule "true_left" (formula "55"))
                                       (rule "applyEq" (formula "54") (term "0") (ifseqformula "55"))
                                       (rule "leq_literals" (formula "54"))
                                       (rule "closeFalse" (formula "54"))
                                    )
                                 )
                              )
                              (branch "Usage"
                                  (builtin "One Step Simplification" (formula "76"))
                                 (rule "translateJavaAddInt" (formula "76") (term "0,1,0"))
                                 (rule "polySimp_addAssoc" (formula "76") (term "0,1,0"))
                                 (rule "polySimp_addComm0" (formula "76") (term "0,0,1,0"))
                                 (rule "widening_identity_cast_5" (formula "76") (term "1"))
                                 (rule "assignment" (formula "76") (term "1"))
                                  (builtin "One Step Simplification" (formula "76"))
                                  (builtin "Block Contract (Internal)" (formula "76") (newnames "exc_28,heap_Before_BLOCK_1,savedHeap_Before_BLOCK_1,o,f"))
                                 (branch "Validity"
                                     (builtin "One Step Simplification" (formula "57") (ifInst ""  (formula "28")) (ifInst ""  (formula "18")) (ifInst ""  (formula "73")))
                                     (builtin "One Step Simplification" (formula "77"))
                                    (rule "andLeft" (formula "57"))
                                    (rule "eqSymm" (formula "78") (term "0,0,1,0,1"))
                                    (rule "dismissNonSelectedField" (formula "58") (term "0"))
                                     (builtin "One Step Simplification" (formula "58") (ifInst ""  (formula "17")))
                                    (rule "true_left" (formula "58"))
                                    (rule "variableDeclarationAssign" (formula "77") (term "1"))
                                    (rule "variableDeclaration" (formula "77") (term "1") (newnames "exc_28_1"))
                                    (rule "assignment" (formula "77") (term "1"))
                                     (builtin "One Step Simplification" (formula "77"))
                                    (rule "emptyStatement" (formula "77") (term "1"))
                                     (builtin "One Step Simplification" (formula "77"))
                                    (rule "emptyStatement" (formula "77") (term "1"))
                                    (rule "tryEmpty" (formula "77") (term "1"))
                                    (rule "blockEmptyLabel" (formula "77") (term "1"))
                                    (rule "blockEmpty" (formula "77") (term "1"))
                                    (rule "methodCallEmpty" (formula "77") (term "1"))
                                    (rule "emptyModality" (formula "77") (term "1"))
                                    (rule "andRight" (formula "77"))
                                    (branch "Case 1"
                                        (builtin "One Step Simplification" (formula "77"))
                                       (rule "closeTrue" (formula "77"))
                                    )
                                    (branch "Case 2"
                                        (builtin "One Step Simplification" (formula "77"))
                                       (rule "closeTrue" (formula "77"))
                                    )
                                 )
                                 (branch "Precondition"
                                    (rule "andRight" (formula "76"))
                                    (branch "Case 1"
                                       (rule "andRight" (formula "76"))
                                       (branch "Case 1"
                                           (builtin "One Step Simplification" (formula "76") (ifInst ""  (formula "28")))
                                          (rule "closeTrue" (formula "76"))
                                       )
                                       (branch "Case 2"
                                           (builtin "One Step Simplification" (formula "76"))
                                          (rule "wellFormedStorePrimitiveArray" (formula "76"))
                                          (rule "wellFormedAnon" (formula "76"))
                                          (rule "replace_known_left" (formula "76") (term "1") (ifseqformula "15"))
                                           (builtin "One Step Simplification" (formula "76") (ifInst ""  (formula "16")))
                                          (rule "closeTrue" (formula "76"))
                                       )
                                    )
                                    (branch "Case 2"
                                       (rule "andRight" (formula "76"))
                                       (branch "Case 1"
                                          (rule "andRight" (formula "76"))
                                          (branch "Case 1"
                                              (builtin "One Step Simplification" (formula "76") (ifInst ""  (formula "72")))
                                             (rule "closeTrue" (formula "76"))
                                          )
                                          (branch "Case 2"
                                              (builtin "One Step Simplification" (formula "76"))
                                             (rule "polySimp_homoEq" (formula "14") (term "1,0"))
                                             (rule "polySimp_homoEq" (formula "14") (term "0,1,0,1,0,1,0"))
                                             (rule "polySimp_mulComm0" (formula "14") (term "1,0,1,0"))
                                             (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,1,1,1,0,1,0"))
                                             (rule "polySimp_rightDist" (formula "14") (term "1,0,0,1,1,1,0,1,0"))
                                             (rule "mul_literals" (formula "14") (term "0,1,0,0,1,1,1,0,1,0"))
                                             (rule "polySimp_rightDist" (formula "14") (term "1,0,1,0"))
                                             (rule "polySimp_mulAssoc" (formula "14") (term "0,1,0,1,0"))
                                             (rule "polySimp_mulComm0" (formula "14") (term "0,0,1,0,1,0"))
                                             (rule "polySimp_mulLiterals" (formula "14") (term "0,1,0,1,0"))
                                             (rule "polySimp_elimOne" (formula "14") (term "0,1,0,1,0"))
                                             (rule "polySimp_addAssoc" (formula "14") (term "0,0,0,1,1,0,1,0"))
                                             (rule "polySimp_addComm0" (formula "14") (term "0,0,0,0,1,1,0,1,0"))
                                             (rule "dismissNonSelectedField" (formula "76") (term "0"))
                                              (builtin "One Step Simplification" (formula "76") (ifInst ""  (formula "17")))
                                             (rule "closeTrue" (formula "76"))
                                          )
                                       )
                                       (branch "Case 2"
                                           (builtin "One Step Simplification" (formula "76") (ifInst ""  (formula "18")))
                                          (rule "closeTrue" (formula "76"))
                                       )
                                    )
                                 )
                                 (branch "Usage"
                                     (builtin "One Step Simplification" (formula "77"))
                                     (builtin "One Step Simplification" (formula "57"))
                                    (rule "andLeft" (formula "57"))
                                    (rule "andLeft" (formula "57"))
                                    (rule "replace_known_left" (formula "58") (term "0") (ifseqformula "57"))
                                     (builtin "One Step Simplification" (formula "58"))
                                    (rule "true_left" (formula "58"))
                                    (rule "elim_double_block_2" (formula "78") (term "1"))
                                    (rule "ifUnfold" (formula "78") (term "1") (inst "#boolv=x_2"))
                                    (rule "variableDeclaration" (formula "78") (term "1") (newnames "x_12"))
                                    (rule "inequality_comparison_simple" (formula "78") (term "1"))
                                     (builtin "One Step Simplification" (formula "78"))
                                    (rule "replace_known_left" (formula "78") (term "0,0,1,0") (ifseqformula "57"))
                                     (builtin "One Step Simplification" (formula "78"))
                                    (rule "ifSplit" (formula "78"))
                                    (branch "if x_12 true"
                                        (builtin "One Step Simplification" (formula "79"))
                                        (builtin "One Step Simplification" (formula "1"))
                                       (rule "closeFalse" (formula "1"))
                                    )
                                    (branch "if x_12 false"
                                        (builtin "One Step Simplification" (formula "79"))
                                        (builtin "One Step Simplification" (formula "1"))
                                       (rule "true_left" (formula "1"))
                                       (rule "blockEmpty" (formula "78") (term "1"))
                                       (rule "emptyStatement" (formula "78") (term "1"))
                                       (rule "blockEmpty" (formula "78") (term "1"))
                                       (rule "preincrement" (formula "78") (term "1"))
                                       (rule "compound_int_cast_expression" (formula "78") (term "1") (inst "#v=x_2"))
                                       (rule "variableDeclarationAssign" (formula "78") (term "1"))
                                       (rule "variableDeclaration" (formula "78") (term "1") (newnames "x_13"))
                                       (rule "remove_parentheses_right" (formula "78") (term "1"))
                                       (rule "assignmentAdditionInt" (formula "78") (term "1"))
                                       (branch "Overflow check"
                                           (builtin "One Step Simplification" (formula "78"))
                                          (rule "expand_inInt" (formula "78"))
                                          (rule "replace_int_MIN" (formula "78") (term "0,1"))
                                          (rule "replace_int_MAX" (formula "78") (term "1,0"))
                                          (rule "polySimp_homoEq" (formula "14") (term "1,0"))
                                          (rule "polySimp_homoEq" (formula "14") (term "0,1,0,1,0,1,0"))
                                          (rule "polySimp_mulComm0" (formula "14") (term "1,0,1,0"))
                                          (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,1,1,1,0,1,0"))
                                          (rule "polySimp_addComm0" (formula "78") (term "0,0"))
                                          (rule "polySimp_addComm0" (formula "78") (term "1,1"))
                                          (rule "polySimp_rightDist" (formula "14") (term "1,0,1,0"))
                                          (rule "polySimp_mulAssoc" (formula "14") (term "0,1,0,1,0"))
                                          (rule "polySimp_mulComm0" (formula "14") (term "0,0,1,0,1,0"))
                                          (rule "polySimp_mulLiterals" (formula "14") (term "0,1,0,1,0"))
                                          (rule "polySimp_elimOne" (formula "14") (term "0,1,0,1,0"))
                                          (rule "polySimp_rightDist" (formula "14") (term "1,0,0,0,1,1,0,1,0"))
                                          (rule "mul_literals" (formula "14") (term "0,1,0,0,0,1,1,0,1,0"))
                                          (rule "polySimp_addAssoc" (formula "14") (term "0,1,0"))
                                          (rule "polySimp_addAssoc" (formula "14") (term "0,0,0,1,0,1,0"))
                                          (rule "polySimp_addComm0" (formula "14") (term "0,0,0,0,1,0,1,0"))
                                          (rule "inEqSimp_ltToLeq" (formula "5"))
                                          (rule "polySimp_mulComm0" (formula "5") (term "1,0,0"))
                                          (rule "polySimp_addComm1" (formula "5") (term "0"))
                                          (rule "inEqSimp_ltToLeq" (formula "14") (term "0,0,0,0,0"))
                                          (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,0,0,0,0,0"))
                                          (rule "inEqSimp_ltToLeq" (formula "13") (term "0,0,0,0,0"))
                                          (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,0,0,0,0,0"))
                                          (rule "inEqSimp_ltToLeq" (formula "10") (term "0"))
                                          (rule "add_zero_right" (formula "10") (term "0,0"))
                                          (rule "polySimp_mulComm0" (formula "10") (term "1,0,0"))
                                          (rule "inEqSimp_homoInEq1" (formula "34"))
                                          (rule "polySimp_addComm1" (formula "34") (term "0"))
                                          (rule "inEqSimp_homoInEq0" (formula "8") (term "0,0,0"))
                                          (rule "mul_literals" (formula "8") (term "1,0,0,0,0"))
                                          (rule "add_zero_right" (formula "8") (term "0,0,0,0"))
                                          (rule "inEqSimp_homoInEq0" (formula "78") (term "0"))
                                          (rule "polySimp_mulComm0" (formula "78") (term "1,0,0"))
                                          (rule "polySimp_rightDist" (formula "78") (term "1,0,0"))
                                          (rule "mul_literals" (formula "78") (term "0,1,0,0"))
                                          (rule "polySimp_addAssoc" (formula "78") (term "0,0"))
                                          (rule "add_literals" (formula "78") (term "0,0,0"))
                                          (rule "inEqSimp_homoInEq0" (formula "78") (term "1"))
                                          (rule "mul_literals" (formula "78") (term "1,0,1"))
                                          (rule "polySimp_addComm1" (formula "78") (term "0,1"))
                                          (rule "add_literals" (formula "78") (term "0,0,1"))
                                          (rule "polySimp_sepNegMonomial" (formula "14") (term "1,0"))
                                          (rule "polySimp_mulLiterals" (formula "14") (term "0,1,0"))
                                          (rule "polySimp_elimOne" (formula "14") (term "0,1,0"))
                                          (rule "polySimp_sepNegMonomial" (formula "14") (term "0,0,1,0"))
                                          (rule "polySimp_mulLiterals" (formula "14") (term "0,0,0,1,0"))
                                          (rule "polySimp_elimOne" (formula "14") (term "0,0,0,1,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "58"))
                                          (rule "inEqSimp_sepNegMonomial0" (formula "5"))
                                          (rule "polySimp_mulLiterals" (formula "5") (term "0"))
                                          (rule "polySimp_elimOne" (formula "5") (term "0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "0,0,0,0,0"))
                                          (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,0,0,0"))
                                          (rule "polySimp_rightDist" (formula "14") (term "1,0,0,0,0,0"))
                                          (rule "mul_literals" (formula "14") (term "0,1,0,0,0,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "14") (term "1,1,0,0,0,0,0"))
                                          (rule "polySimp_elimOne" (formula "14") (term "1,1,0,0,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "0,0,0,0,0"))
                                          (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,0,0,0"))
                                          (rule "polySimp_rightDist" (formula "13") (term "1,0,0,0,0,0"))
                                          (rule "mul_literals" (formula "13") (term "0,1,0,0,0,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "13") (term "1,1,0,0,0,0,0"))
                                          (rule "polySimp_elimOne" (formula "13") (term "1,1,0,0,0,0,0"))
                                          (rule "inEqSimp_sepNegMonomial0" (formula "10") (term "0"))
                                          (rule "polySimp_mulLiterals" (formula "10") (term "0,0"))
                                          (rule "polySimp_elimOne" (formula "10") (term "0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "34"))
                                          (rule "polySimp_mulComm0" (formula "34") (term "1"))
                                          (rule "polySimp_rightDist" (formula "34") (term "1"))
                                          (rule "mul_literals" (formula "34") (term "0,1"))
                                          (rule "polySimp_mulLiterals" (formula "34") (term "1,1"))
                                          (rule "polySimp_elimOne" (formula "34") (term "1,1"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "8") (term "0,0,0"))
                                          (rule "mul_literals" (formula "8") (term "1,0,0,0"))
                                          (rule "inEqSimp_sepNegMonomial1" (formula "78") (term "0"))
                                          (rule "polySimp_mulLiterals" (formula "78") (term "0,0"))
                                          (rule "polySimp_elimOne" (formula "78") (term "0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "78") (term "1"))
                                          (rule "mul_literals" (formula "78") (term "1,1"))
                                          (rule "inEqSimp_subsumption1" (formula "8") (term "1,0,0") (ifseqformula "5"))
                                          (rule "inEqSimp_homoInEq0" (formula "8") (term "0,1,0,0"))
                                          (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,1,0,0"))
                                          (rule "polySimp_rightDist" (formula "8") (term "1,0,0,1,0,0"))
                                          (rule "mul_literals" (formula "8") (term "0,1,0,0,1,0,0"))
                                          (rule "polySimp_addAssoc" (formula "8") (term "0,0,1,0,0"))
                                          (rule "polySimp_addComm1" (formula "8") (term "0,0,0,1,0,0"))
                                          (rule "add_literals" (formula "8") (term "0,0,0,0,1,0,0"))
                                          (rule "polySimp_pullOutFactor1b" (formula "8") (term "0,0,1,0,0"))
                                          (rule "add_literals" (formula "8") (term "1,1,0,0,1,0,0"))
                                          (rule "times_zero_1" (formula "8") (term "1,0,0,1,0,0"))
                                          (rule "add_zero_right" (formula "8") (term "0,0,1,0,0"))
                                          (rule "qeq_literals" (formula "8") (term "0,1,0,0"))
                                           (builtin "One Step Simplification" (formula "8"))
                                          (rule "inEqSimp_subsumption1" (formula "21") (ifseqformula "35"))
                                          (rule "leq_literals" (formula "21") (term "0"))
                                           (builtin "One Step Simplification" (formula "21"))
                                          (rule "true_left" (formula "21"))
                                          (rule "inEqSimp_subsumption1" (formula "7") (ifseqformula "5"))
                                          (rule "inEqSimp_homoInEq0" (formula "7") (term "0"))
                                          (rule "polySimp_pullOutFactor1b" (formula "7") (term "0,0"))
                                          (rule "add_literals" (formula "7") (term "1,1,0,0"))
                                          (rule "times_zero_1" (formula "7") (term "1,0,0"))
                                          (rule "add_literals" (formula "7") (term "0,0"))
                                          (rule "qeq_literals" (formula "7") (term "0"))
                                           (builtin "One Step Simplification" (formula "7"))
                                          (rule "true_left" (formula "7"))
                                          (rule "inEqSimp_subsumption1" (formula "30") (ifseqformula "31"))
                                          (rule "leq_literals" (formula "30") (term "0"))
                                           (builtin "One Step Simplification" (formula "30"))
                                          (rule "true_left" (formula "30"))
                                          (rule "inEqSimp_subsumption1" (formula "35") (ifseqformula "36"))
                                          (rule "leq_literals" (formula "35") (term "0"))
                                           (builtin "One Step Simplification" (formula "35"))
                                          (rule "true_left" (formula "35"))
                                          (rule "inEqSimp_subsumption1" (formula "74") (term "1") (ifseqformula "6"))
                                          (rule "leq_literals" (formula "74") (term "0,1"))
                                           (builtin "One Step Simplification" (formula "74"))
                                          (rule "inEqSimp_leqRight" (formula "74"))
                                          (rule "mul_literals" (formula "1") (term "1,0,0"))
                                          (rule "add_literals" (formula "1") (term "0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                                          (rule "mul_literals" (formula "1") (term "1"))
                                          (rule "inEqSimp_subsumption1" (formula "8") (term "0,0") (ifseqformula "1"))
                                          (rule "leq_literals" (formula "8") (term "0,0,0"))
                                           (builtin "One Step Simplification" (formula "8"))
                                          (rule "applyEqReverse" (formula "10") (term "1,1,1") (ifseqformula "8"))
                                          (rule "hideAuxiliaryEq" (formula "8"))
                                          (rule "inEqSimp_commuteGeq" (formula "9") (term "1,1"))
                                          (rule "inEqSimp_subsumption1" (formula "9") (term "0") (ifseqformula "1"))
                                          (rule "leq_literals" (formula "9") (term "0,0"))
                                           (builtin "One Step Simplification" (formula "9"))
                                          (rule "andLeft" (formula "9"))
                                          (rule "applyEqRigid" (formula "8") (term "1") (ifseqformula "9"))
                                          (rule "ifEqualsInteger" (formula "8"))
                                          (rule "inEqSimp_subsumption1" (formula "7") (ifseqformula "1"))
                                          (rule "leq_literals" (formula "7") (term "0"))
                                           (builtin "One Step Simplification" (formula "7"))
                                          (rule "true_left" (formula "7"))
                                          (rule "inEqSimp_exactShadow3" (formula "33") (ifseqformula "22"))
                                          (rule "polySimp_mulComm0" (formula "33") (term "0,0"))
                                          (rule "polySimp_addComm0" (formula "33") (term "0"))
                                          (rule "inEqSimp_sepNegMonomial1" (formula "33"))
                                          (rule "polySimp_mulLiterals" (formula "33") (term "0"))
                                          (rule "polySimp_elimOne" (formula "33") (term "0"))
                                          (rule "inEqSimp_exactShadow3" (formula "39") (ifseqformula "40"))
                                          (rule "polySimp_mulComm0" (formula "39") (term "0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "39"))
                                          (rule "polySimp_mulLiterals" (formula "39") (term "1"))
                                          (rule "polySimp_elimOne" (formula "39") (term "1"))
                                          (rule "inEqSimp_exactShadow3" (formula "39") (ifseqformula "20"))
                                          (rule "polySimp_mulComm0" (formula "39") (term "0,0"))
                                          (rule "polySimp_addComm0" (formula "39") (term "0"))
                                          (rule "inEqSimp_sepNegMonomial1" (formula "39"))
                                          (rule "polySimp_mulLiterals" (formula "39") (term "0"))
                                          (rule "polySimp_elimOne" (formula "39") (term "0"))
                                          (rule "inEqSimp_exactShadow3" (formula "36") (ifseqformula "34"))
                                          (rule "polySimp_mulComm0" (formula "36") (term "0,0"))
                                          (rule "polySimp_addComm0" (formula "36") (term "0"))
                                          (rule "inEqSimp_sepNegMonomial1" (formula "36"))
                                          (rule "polySimp_mulLiterals" (formula "36") (term "0"))
                                          (rule "polySimp_elimOne" (formula "36") (term "0"))
                                          (rule "inEqSimp_subsumption0" (formula "22") (ifseqformula "36"))
                                          (rule "leq_literals" (formula "22") (term "0"))
                                           (builtin "One Step Simplification" (formula "22"))
                                          (rule "true_left" (formula "22"))
                                          (rule "inEqSimp_exactShadow3" (formula "21") (ifseqformula "40"))
                                          (rule "mul_literals" (formula "21") (term "0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "21"))
                                          (rule "mul_literals" (formula "21") (term "1"))
                                          (rule "inEqSimp_exactShadow3" (formula "6") (ifseqformula "30"))
                                          (rule "polySimp_rightDist" (formula "6") (term "0,0"))
                                          (rule "mul_literals" (formula "6") (term "0,0,0"))
                                          (rule "polySimp_addAssoc" (formula "6") (term "0"))
                                          (rule "polySimp_addComm1" (formula "6") (term "0,0"))
                                          (rule "add_literals" (formula "6") (term "0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "6"))
                                          (rule "polySimp_mulComm0" (formula "6") (term "1"))
                                          (rule "polySimp_rightDist" (formula "6") (term "1"))
                                          (rule "polySimp_mulLiterals" (formula "6") (term "1,1"))
                                          (rule "mul_literals" (formula "6") (term "0,1"))
                                          (rule "polySimp_elimOne" (formula "6") (term "1,1"))
                                          (rule "inEqSimp_exactShadow3" (formula "33") (ifseqformula "36"))
                                          (rule "polySimp_mulComm0" (formula "33") (term "0,0"))
                                          (rule "polySimp_addComm0" (formula "33") (term "0"))
                                          (rule "inEqSimp_sepNegMonomial1" (formula "33"))
                                          (rule "polySimp_mulLiterals" (formula "33") (term "0"))
                                          (rule "polySimp_elimOne" (formula "33") (term "0"))
                                          (rule "inEqSimp_subsumption0" (formula "20") (ifseqformula "33"))
                                          (rule "leq_literals" (formula "20") (term "0"))
                                           (builtin "One Step Simplification" (formula "20"))
                                          (rule "true_left" (formula "20"))
                                          (rule "inEqSimp_exactShadow3" (formula "6") (ifseqformula "28"))
                                          (rule "polySimp_rightDist" (formula "6") (term "0,0"))
                                          (rule "mul_literals" (formula "6") (term "0,0,0"))
                                          (rule "polySimp_addComm1" (formula "6") (term "0"))
                                          (rule "add_literals" (formula "6") (term "0,0"))
                                          (rule "inEqSimp_sepNegMonomial1" (formula "6"))
                                          (rule "polySimp_mulLiterals" (formula "6") (term "0"))
                                          (rule "polySimp_elimOne" (formula "6") (term "0"))
                                          (rule "inEqSimp_contradInEq1" (formula "6") (ifseqformula "1"))
                                          (rule "qeq_literals" (formula "6") (term "0"))
                                           (builtin "One Step Simplification" (formula "6"))
                                          (rule "closeFalse" (formula "6"))
                                       )
                                       (branch "Usage"
                                           (builtin "One Step Simplification" (formula "78"))
                                          (rule "translateJavaAddInt" (formula "78") (term "0,1,0"))
                                          (rule "polySimp_addComm0" (formula "78") (term "0,1,0"))
                                          (rule "widening_identity_cast_5" (formula "78") (term "1"))
                                          (rule "assignment" (formula "78") (term "1"))
                                           (builtin "One Step Simplification" (formula "78"))
                                          (rule "blockEmpty" (formula "78") (term "1"))
                                          (rule "lsContinue" (formula "78") (term "1"))
                                           (builtin "One Step Simplification" (formula "78"))
                                          (rule "polySimp_homoEq" (formula "14") (term "1,0"))
                                          (rule "polySimp_homoEq" (formula "14") (term "0,1,0,1,0,1,0"))
                                          (rule "polySimp_mulComm0" (formula "78") (term "0,0"))
                                          (rule "polySimp_mulComm0" (formula "14") (term "1,0,1,0"))
                                          (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,1,1,1,0,1,0"))
                                          (rule "polySimp_rightDist" (formula "78") (term "0,0"))
                                          (rule "mul_literals" (formula "78") (term "0,0,0"))
                                          (rule "polySimp_rightDist" (formula "14") (term "1,0,0,1,1,1,0,1,0"))
                                          (rule "mul_literals" (formula "14") (term "0,1,0,0,1,1,1,0,1,0"))
                                          (rule "polySimp_rightDist" (formula "14") (term "1,0,1,0"))
                                          (rule "polySimp_mulAssoc" (formula "14") (term "0,1,0,1,0"))
                                          (rule "polySimp_mulComm0" (formula "14") (term "0,0,1,0,1,0"))
                                          (rule "polySimp_mulLiterals" (formula "14") (term "0,1,0,1,0"))
                                          (rule "polySimp_elimOne" (formula "14") (term "0,1,0,1,0"))
                                          (rule "polySimp_addAssoc" (formula "14") (term "0,0,0,1,1,0,1,0"))
                                          (rule "polySimp_addComm0" (formula "14") (term "0,0,0,0,1,1,0,1,0"))
                                          (rule "polySimp_addAssoc" (formula "14") (term "0,1,0"))
                                          (rule "precOfInt" (formula "78"))
                                          (rule "inEqSimp_ltToLeq" (formula "14") (term "0,0,0,0,0"))
                                          (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,0,0,0,0,0"))
                                          (rule "inEqSimp_ltToLeq" (formula "10") (term "0"))
                                          (rule "add_zero_right" (formula "10") (term "0,0"))
                                          (rule "polySimp_mulComm0" (formula "10") (term "1,0,0"))
                                          (rule "inEqSimp_ltToLeq" (formula "5"))
                                          (rule "polySimp_mulComm0" (formula "5") (term "1,0,0"))
                                          (rule "polySimp_addComm1" (formula "5") (term "0"))
                                          (rule "inEqSimp_ltToLeq" (formula "13") (term "0,0,0,0,0"))
                                          (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,0,0,0,0,0"))
                                          (rule "inEqSimp_ltToLeq" (formula "78") (term "1"))
                                          (rule "polySimp_rightDist" (formula "78") (term "1,0,0,1"))
                                          (rule "polySimp_mulAssoc" (formula "78") (term "0,1,0,0,1"))
                                          (rule "polySimp_mulComm0" (formula "78") (term "0,0,1,0,0,1"))
                                          (rule "polySimp_mulLiterals" (formula "78") (term "0,1,0,0,1"))
                                          (rule "polySimp_elimOne" (formula "78") (term "0,1,0,0,1"))
                                          (rule "polySimp_addAssoc" (formula "78") (term "0,0,1"))
                                          (rule "polySimp_addAssoc" (formula "78") (term "0,1"))
                                          (rule "polySimp_addComm1" (formula "78") (term "0,0,1"))
                                          (rule "polySimp_addAssoc" (formula "78") (term "0,0,0,1"))
                                          (rule "polySimp_addComm1" (formula "78") (term "0,0,0,0,1"))
                                          (rule "add_literals" (formula "78") (term "0,0,0,0,0,1"))
                                          (rule "add_zero_left" (formula "78") (term "0,0,0,0,1"))
                                          (rule "polySimp_pullOutFactor1" (formula "78") (term "0,0,0,1"))
                                          (rule "add_literals" (formula "78") (term "1,0,0,0,1"))
                                          (rule "times_zero_1" (formula "78") (term "0,0,0,1"))
                                          (rule "add_zero_left" (formula "78") (term "0,0,1"))
                                          (rule "inEqSimp_homoInEq0" (formula "8") (term "0,0,0"))
                                          (rule "mul_literals" (formula "8") (term "1,0,0,0,0"))
                                          (rule "add_zero_right" (formula "8") (term "0,0,0,0"))
                                          (rule "inEqSimp_homoInEq1" (formula "34"))
                                          (rule "polySimp_addComm1" (formula "34") (term "0"))
                                          (rule "inEqSimp_homoInEq0" (formula "78") (term "0"))
                                          (rule "times_zero_2" (formula "78") (term "1,0,0"))
                                          (rule "add_zero_right" (formula "78") (term "0,0"))
                                          (rule "applyEq" (formula "78") (term "1,0,0") (ifseqformula "41"))
                                          (rule "applyEq" (formula "78") (term "1,0,1") (ifseqformula "41"))
                                          (rule "polySimp_pullOutFactor2" (formula "78") (term "0,1"))
                                          (rule "add_literals" (formula "78") (term "1,0,1"))
                                          (rule "times_zero_1" (formula "78") (term "0,1"))
                                          (rule "leq_literals" (formula "78") (term "1"))
                                           (builtin "One Step Simplification" (formula "78"))
                                          (rule "inEqSimp_geqRight" (formula "78"))
                                          (rule "times_zero_1" (formula "1") (term "1,0,0"))
                                          (rule "add_zero_right" (formula "1") (term "0,0"))
                                          (rule "polySimp_addAssoc" (formula "1") (term "0"))
                                          (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                                          (rule "add_literals" (formula "1") (term "0,0,0"))
                                          (rule "add_zero_left" (formula "1") (term "0,0"))
                                          (rule "polySimp_sepNegMonomial" (formula "15") (term "1,0"))
                                          (rule "polySimp_mulLiterals" (formula "15") (term "0,1,0"))
                                          (rule "polySimp_elimOne" (formula "15") (term "0,1,0"))
                                          (rule "polySimp_sepNegMonomial" (formula "15") (term "0,0,1,0"))
                                          (rule "polySimp_mulLiterals" (formula "15") (term "0,0,0,1,0"))
                                          (rule "polySimp_elimOne" (formula "15") (term "0,0,0,1,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "59"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "0,0,0,0,0"))
                                          (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,0,0,0"))
                                          (rule "polySimp_rightDist" (formula "15") (term "1,0,0,0,0,0"))
                                          (rule "mul_literals" (formula "15") (term "0,1,0,0,0,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "15") (term "1,1,0,0,0,0,0"))
                                          (rule "polySimp_elimOne" (formula "15") (term "1,1,0,0,0,0,0"))
                                          (rule "inEqSimp_sepNegMonomial0" (formula "11") (term "0"))
                                          (rule "polySimp_mulLiterals" (formula "11") (term "0,0"))
                                          (rule "polySimp_elimOne" (formula "11") (term "0,0"))
                                          (rule "inEqSimp_sepNegMonomial0" (formula "6"))
                                          (rule "polySimp_mulLiterals" (formula "6") (term "0"))
                                          (rule "polySimp_elimOne" (formula "6") (term "0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "0,0,0,0,0"))
                                          (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,0,0,0"))
                                          (rule "polySimp_rightDist" (formula "14") (term "1,0,0,0,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "14") (term "1,1,0,0,0,0,0"))
                                          (rule "mul_literals" (formula "14") (term "0,1,0,0,0,0,0"))
                                          (rule "polySimp_elimOne" (formula "14") (term "1,1,0,0,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "9") (term "0,0,0"))
                                          (rule "mul_literals" (formula "9") (term "1,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "35"))
                                          (rule "polySimp_mulComm0" (formula "35") (term "1"))
                                          (rule "polySimp_rightDist" (formula "35") (term "1"))
                                          (rule "mul_literals" (formula "35") (term "0,1"))
                                          (rule "polySimp_mulLiterals" (formula "35") (term "1,1"))
                                          (rule "polySimp_elimOne" (formula "35") (term "1,1"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                          (rule "polySimp_mulLiterals" (formula "1") (term "1"))
                                          (rule "polySimp_elimOne" (formula "1") (term "1"))
                                          (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "6"))
                                          (rule "andLeft" (formula "1"))
                                          (rule "inEqSimp_homoInEq1" (formula "1"))
                                          (rule "polySimp_pullOutFactor1b" (formula "1") (term "0"))
                                          (rule "add_literals" (formula "1") (term "1,1,0"))
                                          (rule "times_zero_1" (formula "1") (term "1,0"))
                                          (rule "add_zero_right" (formula "1") (term "0"))
                                          (rule "leq_literals" (formula "1"))
                                          (rule "closeFalse" (formula "1"))
                                       )
                                    )
                                 )
                              )
                           )
                           (branch "Null Reference (_bucket_starts = null)"
                               (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "74")))
                              (rule "closeFalse" (formula "1"))
                           )
                           (branch "Index Out of Bounds (_bucket_starts != null, but j Out of Bounds!)"
                               (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "74")))
                              (rule "false_right" (formula "77"))
                              (rule "polySimp_homoEq" (formula "15") (term "0,1,0,1,0"))
                              (rule "polySimp_homoEq" (formula "15") (term "1,0"))
                              (rule "polySimp_mulComm0" (formula "15") (term "1,0,1,0"))
                              (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,1,1,1,0,1,0"))
                              (rule "polySimp_rightDist" (formula "15") (term "1,0,0,1,1,1,0,1,0"))
                              (rule "mul_literals" (formula "15") (term "0,1,0,0,1,1,1,0,1,0"))
                              (rule "polySimp_rightDist" (formula "15") (term "1,0,1,0"))
                              (rule "polySimp_mulAssoc" (formula "15") (term "0,1,0,1,0"))
                              (rule "polySimp_mulComm0" (formula "15") (term "0,0,1,0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "15") (term "0,1,0,1,0"))
                              (rule "polySimp_elimOne" (formula "15") (term "0,1,0,1,0"))
                              (rule "polySimp_addAssoc" (formula "15") (term "0,0,0,1,1,0,1,0"))
                              (rule "polySimp_addComm0" (formula "15") (term "0,0,0,0,1,1,0,1,0"))
                              (rule "polySimp_addAssoc" (formula "15") (term "0,1,0"))
                              (rule "inEqSimp_ltToLeq" (formula "15") (term "0,0,0,0,0"))
                              (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,0,0,0,0,0"))
                              (rule "inEqSimp_ltToLeq" (formula "14") (term "0,0,0,0,0"))
                              (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,0,0,0,0,0"))
                              (rule "inEqSimp_ltToLeq" (formula "6"))
                              (rule "polySimp_mulComm0" (formula "6") (term "1,0,0"))
                              (rule "polySimp_addComm1" (formula "6") (term "0"))
                              (rule "inEqSimp_ltToLeq" (formula "11") (term "0"))
                              (rule "add_zero_right" (formula "11") (term "0,0"))
                              (rule "polySimp_mulComm0" (formula "11") (term "1,0,0"))
                              (rule "inEqSimp_ltToLeq" (formula "1") (term "1"))
                              (rule "times_zero_1" (formula "1") (term "1,0,0,1"))
                              (rule "add_zero_right" (formula "1") (term "0,0,1"))
                              (rule "inEqSimp_homoInEq0" (formula "9") (term "0,0,0"))
                              (rule "times_zero_2" (formula "9") (term "1,0,0,0,0"))
                              (rule "add_zero_right" (formula "9") (term "0,0,0,0"))
                              (rule "inEqSimp_homoInEq1" (formula "35"))
                              (rule "polySimp_addComm1" (formula "35") (term "0"))
                              (rule "polySimp_sepNegMonomial" (formula "15") (term "0,0,1,0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "15") (term "0,0,0,1,0,1,0"))
                              (rule "polySimp_elimOne" (formula "15") (term "0,0,0,1,0,1,0"))
                              (rule "polySimp_sepNegMonomial" (formula "15") (term "1,0"))
                              (rule "polySimp_mulLiterals" (formula "15") (term "0,1,0"))
                              (rule "polySimp_elimOne" (formula "15") (term "0,1,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "0,0,0,0,0"))
                              (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,0,0,0"))
                              (rule "polySimp_rightDist" (formula "15") (term "1,0,0,0,0,0"))
                              (rule "mul_literals" (formula "15") (term "0,1,0,0,0,0,0"))
                              (rule "polySimp_mulLiterals" (formula "15") (term "1,1,0,0,0,0,0"))
                              (rule "polySimp_elimOne" (formula "15") (term "1,1,0,0,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "0,0,0,0,0"))
                              (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,0,0,0"))
                              (rule "polySimp_rightDist" (formula "14") (term "1,0,0,0,0,0"))
                              (rule "polySimp_mulLiterals" (formula "14") (term "1,1,0,0,0,0,0"))
                              (rule "mul_literals" (formula "14") (term "0,1,0,0,0,0,0"))
                              (rule "polySimp_elimOne" (formula "14") (term "1,1,0,0,0,0,0"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "6"))
                              (rule "polySimp_mulLiterals" (formula "6") (term "0"))
                              (rule "polySimp_elimOne" (formula "6") (term "0"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "11") (term "0"))
                              (rule "polySimp_mulLiterals" (formula "11") (term "0,0"))
                              (rule "polySimp_elimOne" (formula "11") (term "0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1"))
                              (rule "mul_literals" (formula "1") (term "1,1"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "9") (term "0,0,0"))
                              (rule "mul_literals" (formula "9") (term "1,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "35"))
                              (rule "polySimp_mulComm0" (formula "35") (term "1"))
                              (rule "polySimp_rightDist" (formula "35") (term "1"))
                              (rule "polySimp_mulLiterals" (formula "35") (term "1,1"))
                              (rule "mul_literals" (formula "35") (term "0,1"))
                              (rule "polySimp_elimOne" (formula "35") (term "1,1"))
                              (rule "inEqSimp_subsumption1" (formula "8") (ifseqformula "6"))
                              (rule "inEqSimp_homoInEq0" (formula "8") (term "0"))
                              (rule "polySimp_pullOutFactor1b" (formula "8") (term "0,0"))
                              (rule "add_literals" (formula "8") (term "1,1,0,0"))
                              (rule "times_zero_1" (formula "8") (term "1,0,0"))
                              (rule "add_zero_right" (formula "8") (term "0,0"))
                              (rule "qeq_literals" (formula "8") (term "0"))
                               (builtin "One Step Simplification" (formula "8"))
                              (rule "true_left" (formula "8"))
                              (rule "inEqSimp_subsumption1" (formula "21") (ifseqformula "35"))
                              (rule "leq_literals" (formula "21") (term "0"))
                               (builtin "One Step Simplification" (formula "21"))
                              (rule "true_left" (formula "21"))
                              (rule "inEqSimp_subsumption1" (formula "31") (ifseqformula "32"))
                              (rule "leq_literals" (formula "31") (term "0"))
                               (builtin "One Step Simplification" (formula "31"))
                              (rule "true_left" (formula "31"))
                              (rule "inEqSimp_contradInEq1" (formula "1") (term "1") (ifseqformula "7"))
                              (rule "qeq_literals" (formula "1") (term "0,1"))
                               (builtin "One Step Simplification" (formula "1"))
                              (rule "inEqSimp_subsumption1" (formula "8") (term "1,0,0") (ifseqformula "6"))
                              (rule "inEqSimp_homoInEq0" (formula "8") (term "0,1,0,0"))
                              (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,1,0,0"))
                              (rule "polySimp_rightDist" (formula "8") (term "1,0,0,1,0,0"))
                              (rule "mul_literals" (formula "8") (term "0,1,0,0,1,0,0"))
                              (rule "polySimp_addAssoc" (formula "8") (term "0,0,1,0,0"))
                              (rule "polySimp_addComm1" (formula "8") (term "0,0,0,1,0,0"))
                              (rule "add_literals" (formula "8") (term "0,0,0,0,1,0,0"))
                              (rule "polySimp_pullOutFactor1b" (formula "8") (term "0,0,1,0,0"))
                              (rule "add_literals" (formula "8") (term "1,1,0,0,1,0,0"))
                              (rule "times_zero_1" (formula "8") (term "1,0,0,1,0,0"))
                              (rule "add_zero_right" (formula "8") (term "0,0,1,0,0"))
                              (rule "qeq_literals" (formula "8") (term "0,1,0,0"))
                               (builtin "One Step Simplification" (formula "8"))
                              (rule "inEqSimp_subsumption1" (formula "36") (ifseqformula "37"))
                              (rule "leq_literals" (formula "36") (term "0"))
                               (builtin "One Step Simplification" (formula "36"))
                              (rule "true_left" (formula "36"))
                              (rule "inEqSimp_exactShadow3" (formula "34") (ifseqformula "23"))
                              (rule "polySimp_mulComm0" (formula "34") (term "0,0"))
                              (rule "polySimp_addComm0" (formula "34") (term "0"))
                              (rule "inEqSimp_sepNegMonomial1" (formula "34"))
                              (rule "polySimp_mulLiterals" (formula "34") (term "0"))
                              (rule "polySimp_elimOne" (formula "34") (term "0"))
                              (rule "inEqSimp_exactShadow3" (formula "40") (ifseqformula "41"))
                              (rule "polySimp_mulComm0" (formula "40") (term "0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "40"))
                              (rule "polySimp_mulLiterals" (formula "40") (term "1"))
                              (rule "polySimp_elimOne" (formula "40") (term "1"))
                              (rule "inEqSimp_exactShadow3" (formula "6") (ifseqformula "32"))
                              (rule "polySimp_rightDist" (formula "6") (term "0,0"))
                              (rule "mul_literals" (formula "6") (term "0,0,0"))
                              (rule "polySimp_addAssoc" (formula "6") (term "0"))
                              (rule "polySimp_addComm1" (formula "6") (term "0,0"))
                              (rule "add_literals" (formula "6") (term "0,0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "6"))
                              (rule "polySimp_mulComm0" (formula "6") (term "1"))
                              (rule "polySimp_rightDist" (formula "6") (term "1"))
                              (rule "polySimp_mulLiterals" (formula "6") (term "1,1"))
                              (rule "mul_literals" (formula "6") (term "0,1"))
                              (rule "polySimp_elimOne" (formula "6") (term "1,1"))
                              (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "6"))
                              (rule "andLeft" (formula "1"))
                              (rule "inEqSimp_homoInEq1" (formula "1"))
                              (rule "polySimp_pullOutFactor1b" (formula "1") (term "0"))
                              (rule "add_literals" (formula "1") (term "1,1,0"))
                              (rule "times_zero_1" (formula "1") (term "1,0"))
                              (rule "add_zero_right" (formula "1") (term "0"))
                              (rule "leq_literals" (formula "1"))
                              (rule "closeFalse" (formula "1"))
                           )
                        )
                     )
                     (branch "Exceptional Post (len)"
                         (builtin "One Step Simplification" (formula "72"))
                         (builtin "One Step Simplification" (formula "52") (ifInst ""  (formula "48")))
                        (rule "andLeft" (formula "52"))
                        (rule "andLeft" (formula "52"))
                        (rule "notLeft" (formula "52"))
                        (rule "close" (formula "54") (ifseqformula "53"))
                     )
                     (branch "Pre (len)"
                         (builtin "One Step Simplification" (formula "71") (ifInst ""  (formula "48")) (ifInst ""  (formula "27")))
                        (rule "wellFormedAnon" (formula "71") (term "0"))
                        (rule "expand_inInt" (formula "71") (term "1"))
                        (rule "replace_int_MIN" (formula "71") (term "0,1,1"))
                        (rule "replace_int_MAX" (formula "71") (term "1,0,1"))
                        (rule "replace_known_left" (formula "71") (term "1,0") (ifseqformula "15"))
                         (builtin "One Step Simplification" (formula "71") (ifInst ""  (formula "16")))
                        (rule "polySimp_homoEq" (formula "14") (term "0,1,0,1,0"))
                        (rule "polySimp_homoEq" (formula "14") (term "1,0"))
                        (rule "polySimp_mulComm0" (formula "14") (term "1,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,1,1,1,0,1,0"))
                        (rule "polySimp_rightDist" (formula "14") (term "1,0,1,0"))
                        (rule "polySimp_mulAssoc" (formula "14") (term "0,1,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "14") (term "0,0,1,0,1,0"))
                        (rule "polySimp_mulLiterals" (formula "14") (term "0,1,0,1,0"))
                        (rule "polySimp_elimOne" (formula "14") (term "0,1,0,1,0"))
                        (rule "polySimp_rightDist" (formula "14") (term "1,0,0,0,1,1,0,1,0"))
                        (rule "mul_literals" (formula "14") (term "0,1,0,0,0,1,1,0,1,0"))
                        (rule "polySimp_addAssoc" (formula "14") (term "0,0,0,1,1,0,1,0"))
                        (rule "polySimp_addComm0" (formula "14") (term "0,0,0,0,1,1,0,1,0"))
                        (rule "polySimp_addAssoc" (formula "14") (term "0,1,0"))
                        (rule "inEqSimp_ltToLeq" (formula "13") (term "0,0,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,0,0,0,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "10") (term "0"))
                        (rule "add_zero_right" (formula "10") (term "0,0"))
                        (rule "polySimp_mulComm0" (formula "10") (term "1,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "14") (term "0,0,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,0,0,0,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "5"))
                        (rule "polySimp_mulComm0" (formula "5") (term "1,0,0"))
                        (rule "polySimp_addComm1" (formula "5") (term "0"))
                        (rule "inEqSimp_commuteLeq" (formula "71") (term "1"))
                        (rule "inEqSimp_homoInEq0" (formula "8") (term "0,0,0"))
                        (rule "times_zero_2" (formula "8") (term "1,0,0,0,0"))
                        (rule "add_zero_right" (formula "8") (term "0,0,0,0"))
                        (rule "inEqSimp_homoInEq1" (formula "34"))
                        (rule "polySimp_addComm1" (formula "34") (term "0"))
                        (rule "polySimp_sepNegMonomial" (formula "14") (term "0,0,1,0,1,0"))
                        (rule "polySimp_mulLiterals" (formula "14") (term "0,0,0,1,0,1,0"))
                        (rule "polySimp_elimOne" (formula "14") (term "0,0,0,1,0,1,0"))
                        (rule "polySimp_sepNegMonomial" (formula "14") (term "1,0"))
                        (rule "polySimp_mulLiterals" (formula "14") (term "0,1,0"))
                        (rule "polySimp_elimOne" (formula "14") (term "0,1,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "0,0,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,0,0,0"))
                        (rule "polySimp_rightDist" (formula "13") (term "1,0,0,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "13") (term "1,1,0,0,0,0,0"))
                        (rule "mul_literals" (formula "13") (term "0,1,0,0,0,0,0"))
                        (rule "polySimp_elimOne" (formula "13") (term "1,1,0,0,0,0,0"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "10") (term "0"))
                        (rule "polySimp_mulLiterals" (formula "10") (term "0,0"))
                        (rule "polySimp_elimOne" (formula "10") (term "0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "0,0,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,0,0,0"))
                        (rule "polySimp_rightDist" (formula "14") (term "1,0,0,0,0,0"))
                        (rule "mul_literals" (formula "14") (term "0,1,0,0,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "14") (term "1,1,0,0,0,0,0"))
                        (rule "polySimp_elimOne" (formula "14") (term "1,1,0,0,0,0,0"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "5"))
                        (rule "polySimp_mulLiterals" (formula "5") (term "0"))
                        (rule "polySimp_elimOne" (formula "5") (term "0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "8") (term "0,0,0"))
                        (rule "mul_literals" (formula "8") (term "1,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "34"))
                        (rule "polySimp_mulComm0" (formula "34") (term "1"))
                        (rule "polySimp_rightDist" (formula "34") (term "1"))
                        (rule "polySimp_mulLiterals" (formula "34") (term "1,1"))
                        (rule "mul_literals" (formula "34") (term "0,1"))
                        (rule "polySimp_elimOne" (formula "34") (term "1,1"))
                        (rule "inEqSimp_subsumption1" (formula "38") (ifseqformula "39"))
                        (rule "leq_literals" (formula "38") (term "0"))
                         (builtin "One Step Simplification" (formula "38"))
                        (rule "true_left" (formula "38"))
                        (rule "inEqSimp_subsumption1" (formula "8") (term "1,0,0") (ifseqformula "5"))
                        (rule "inEqSimp_homoInEq0" (formula "8") (term "0,1,0,0"))
                        (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,1,0,0"))
                        (rule "polySimp_rightDist" (formula "8") (term "1,0,0,1,0,0"))
                        (rule "mul_literals" (formula "8") (term "0,1,0,0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "8") (term "0,0,1,0,0"))
                        (rule "polySimp_addComm1" (formula "8") (term "0,0,0,1,0,0"))
                        (rule "add_literals" (formula "8") (term "0,0,0,0,1,0,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "8") (term "0,0,1,0,0"))
                        (rule "add_literals" (formula "8") (term "1,1,0,0,1,0,0"))
                        (rule "times_zero_1" (formula "8") (term "1,0,0,1,0,0"))
                        (rule "add_zero_right" (formula "8") (term "0,0,1,0,0"))
                        (rule "qeq_literals" (formula "8") (term "0,1,0,0"))
                         (builtin "One Step Simplification" (formula "8"))
                        (rule "inEqSimp_subsumption1" (formula "70") (term "1") (ifseqformula "6"))
                        (rule "leq_literals" (formula "70") (term "0,1"))
                         (builtin "One Step Simplification" (formula "70"))
                        (rule "inEqSimp_leqRight" (formula "70"))
                        (rule "mul_literals" (formula "1") (term "1,0,0"))
                        (rule "add_literals" (formula "1") (term "0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                        (rule "mul_literals" (formula "1") (term "1"))
                        (rule "inEqSimp_subsumption1" (formula "33") (ifseqformula "34"))
                        (rule "leq_literals" (formula "33") (term "0"))
                         (builtin "One Step Simplification" (formula "33"))
                        (rule "true_left" (formula "33"))
                        (rule "inEqSimp_subsumption1" (formula "22") (ifseqformula "35"))
                        (rule "leq_literals" (formula "22") (term "0"))
                         (builtin "One Step Simplification" (formula "22"))
                        (rule "true_left" (formula "22"))
                        (rule "inEqSimp_subsumption1" (formula "8") (ifseqformula "6"))
                        (rule "inEqSimp_homoInEq0" (formula "8") (term "0"))
                        (rule "polySimp_pullOutFactor1b" (formula "8") (term "0,0"))
                        (rule "add_literals" (formula "8") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "8") (term "1,0,0"))
                        (rule "add_zero_right" (formula "8") (term "0,0"))
                        (rule "qeq_literals" (formula "8") (term "0"))
                         (builtin "One Step Simplification" (formula "8"))
                        (rule "true_left" (formula "8"))
                        (rule "inEqSimp_subsumption1" (formula "10") (term "0") (ifseqformula "1"))
                        (rule "leq_literals" (formula "10") (term "0,0"))
                         (builtin "One Step Simplification" (formula "10"))
                        (rule "andLeft" (formula "10"))
                        (rule "applyEq" (formula "9") (term "1") (ifseqformula "10"))
                        (rule "ifEqualsInteger" (formula "9"))
                        (rule "inEqSimp_subsumption1" (formula "7") (ifseqformula "1"))
                        (rule "leq_literals" (formula "7") (term "0"))
                         (builtin "One Step Simplification" (formula "7"))
                        (rule "true_left" (formula "7"))
                        (rule "inEqSimp_subsumption1" (formula "7") (term "0,0") (ifseqformula "1"))
                        (rule "leq_literals" (formula "7") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "7"))
                        (rule "applyEqReverse" (formula "10") (term "1") (ifseqformula "7"))
                        (rule "hideAuxiliaryEq" (formula "7"))
                        (rule "inEqSimp_commuteGeq" (formula "9"))
                        (rule "inEqSimp_exactShadow3" (formula "39") (ifseqformula "20"))
                        (rule "polySimp_mulComm0" (formula "39") (term "0,0"))
                        (rule "polySimp_addComm0" (formula "39") (term "0"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "39"))
                        (rule "polySimp_mulLiterals" (formula "39") (term "0"))
                        (rule "polySimp_elimOne" (formula "39") (term "0"))
                        (rule "inEqSimp_exactShadow3" (formula "21") (ifseqformula "40"))
                        (rule "mul_literals" (formula "21") (term "0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "21"))
                        (rule "mul_literals" (formula "21") (term "1"))
                        (rule "inEqSimp_exactShadow3" (formula "33") (ifseqformula "22"))
                        (rule "polySimp_mulComm0" (formula "33") (term "0,0"))
                        (rule "polySimp_addComm0" (formula "33") (term "0"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "33"))
                        (rule "polySimp_mulLiterals" (formula "33") (term "0"))
                        (rule "polySimp_elimOne" (formula "33") (term "0"))
                        (rule "inEqSimp_exactShadow3" (formula "6") (ifseqformula "31"))
                        (rule "polySimp_rightDist" (formula "6") (term "0,0"))
                        (rule "mul_literals" (formula "6") (term "0,0,0"))
                        (rule "polySimp_addAssoc" (formula "6") (term "0"))
                        (rule "polySimp_addComm1" (formula "6") (term "0,0"))
                        (rule "add_literals" (formula "6") (term "0,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "6"))
                        (rule "polySimp_mulComm0" (formula "6") (term "1"))
                        (rule "polySimp_rightDist" (formula "6") (term "1"))
                        (rule "mul_literals" (formula "6") (term "0,1"))
                        (rule "polySimp_mulLiterals" (formula "6") (term "1,1"))
                        (rule "polySimp_elimOne" (formula "6") (term "1,1"))
                        (rule "inEqSimp_exactShadow3" (formula "40") (ifseqformula "41"))
                        (rule "polySimp_mulComm0" (formula "40") (term "0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "40"))
                        (rule "polySimp_mulLiterals" (formula "40") (term "1"))
                        (rule "polySimp_elimOne" (formula "40") (term "1"))
                        (rule "inEqSimp_exactShadow3" (formula "37") (ifseqformula "35"))
                        (rule "polySimp_mulComm0" (formula "37") (term "0,0"))
                        (rule "polySimp_addComm0" (formula "37") (term "0"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "37"))
                        (rule "polySimp_mulLiterals" (formula "37") (term "0"))
                        (rule "polySimp_elimOne" (formula "37") (term "0"))
                        (rule "inEqSimp_subsumption0" (formula "23") (ifseqformula "37"))
                        (rule "leq_literals" (formula "23") (term "0"))
                         (builtin "One Step Simplification" (formula "23"))
                        (rule "true_left" (formula "23"))
                        (rule "inEqSimp_exactShadow3" (formula "6") (ifseqformula "29"))
                        (rule "polySimp_rightDist" (formula "6") (term "0,0"))
                        (rule "mul_literals" (formula "6") (term "0,0,0"))
                        (rule "polySimp_addComm1" (formula "6") (term "0"))
                        (rule "add_literals" (formula "6") (term "0,0"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "6"))
                        (rule "polySimp_mulLiterals" (formula "6") (term "0"))
                        (rule "polySimp_elimOne" (formula "6") (term "0"))
                        (rule "inEqSimp_contradInEq1" (formula "6") (ifseqformula "1"))
                        (rule "qeq_literals" (formula "6") (term "0"))
                         (builtin "One Step Simplification" (formula "6"))
                        (rule "closeFalse" (formula "6"))
                     )
                     (branch "Null reference (_buffers = null)"
                         (builtin "One Step Simplification" (formula "71") (ifInst ""  (formula "69")))
                        (rule "closeTrue" (formula "71"))
                     )
                  )
                  (branch "Null Reference (_bucket_starts = null)"
                      (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "69")))
                     (rule "closeFalse" (formula "1"))
                  )
                  (branch "Index Out of Bounds (_bucket_starts != null, but j Out of Bounds!)"
                      (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "69")))
                      (builtin "One Step Simplification" (formula "72"))
                     (rule "false_right" (formula "72"))
                     (rule "polySimp_homoEq" (formula "15") (term "0,1,0,1,0"))
                     (rule "polySimp_homoEq" (formula "15") (term "1,0"))
                     (rule "polySimp_mulComm0" (formula "15") (term "1,0,1,0"))
                     (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,1,1,1,0,1,0"))
                     (rule "polySimp_rightDist" (formula "15") (term "1,0,1,0"))
                     (rule "polySimp_mulAssoc" (formula "15") (term "0,1,0,1,0"))
                     (rule "polySimp_mulComm0" (formula "15") (term "0,0,1,0,1,0"))
                     (rule "polySimp_mulLiterals" (formula "15") (term "0,1,0,1,0"))
                     (rule "polySimp_elimOne" (formula "15") (term "0,1,0,1,0"))
                     (rule "polySimp_rightDist" (formula "15") (term "1,0,0,0,1,1,0,1,0"))
                     (rule "mul_literals" (formula "15") (term "0,1,0,0,0,1,1,0,1,0"))
                     (rule "polySimp_addAssoc" (formula "15") (term "0,0,0,1,1,0,1,0"))
                     (rule "polySimp_addComm0" (formula "15") (term "0,0,0,0,1,1,0,1,0"))
                     (rule "polySimp_addAssoc" (formula "15") (term "0,1,0"))
                     (rule "inEqSimp_ltToLeq" (formula "14") (term "0,0,0,0,0"))
                     (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,0,0,0,0,0"))
                     (rule "inEqSimp_ltToLeq" (formula "11") (term "0"))
                     (rule "add_zero_right" (formula "11") (term "0,0"))
                     (rule "polySimp_mulComm0" (formula "11") (term "1,0,0"))
                     (rule "inEqSimp_ltToLeq" (formula "15") (term "0,0,0,0,0"))
                     (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,0,0,0,0,0"))
                     (rule "inEqSimp_ltToLeq" (formula "6"))
                     (rule "polySimp_mulComm0" (formula "6") (term "1,0,0"))
                     (rule "polySimp_addComm1" (formula "6") (term "0"))
                     (rule "inEqSimp_ltToLeq" (formula "1") (term "1"))
                     (rule "times_zero_1" (formula "1") (term "1,0,0,1"))
                     (rule "add_zero_right" (formula "1") (term "0,0,1"))
                     (rule "inEqSimp_homoInEq1" (formula "35"))
                     (rule "polySimp_addComm1" (formula "35") (term "0"))
                     (rule "inEqSimp_homoInEq0" (formula "9") (term "0,0,0"))
                     (rule "times_zero_2" (formula "9") (term "1,0,0,0,0"))
                     (rule "add_zero_right" (formula "9") (term "0,0,0,0"))
                     (rule "polySimp_sepNegMonomial" (formula "15") (term "1,0"))
                     (rule "polySimp_mulLiterals" (formula "15") (term "0,1,0"))
                     (rule "polySimp_elimOne" (formula "15") (term "0,1,0"))
                     (rule "polySimp_sepNegMonomial" (formula "15") (term "0,0,1,0"))
                     (rule "polySimp_mulLiterals" (formula "15") (term "0,0,0,1,0"))
                     (rule "polySimp_elimOne" (formula "15") (term "0,0,0,1,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "0,0,0,0,0"))
                     (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,0,0,0"))
                     (rule "polySimp_rightDist" (formula "14") (term "1,0,0,0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "14") (term "1,1,0,0,0,0,0"))
                     (rule "mul_literals" (formula "14") (term "0,1,0,0,0,0,0"))
                     (rule "polySimp_elimOne" (formula "14") (term "1,1,0,0,0,0,0"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "11") (term "0"))
                     (rule "polySimp_mulLiterals" (formula "11") (term "0,0"))
                     (rule "polySimp_elimOne" (formula "11") (term "0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "0,0,0,0,0"))
                     (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,0,0,0"))
                     (rule "polySimp_rightDist" (formula "15") (term "1,0,0,0,0,0"))
                     (rule "mul_literals" (formula "15") (term "0,1,0,0,0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "15") (term "1,1,0,0,0,0,0"))
                     (rule "polySimp_elimOne" (formula "15") (term "1,1,0,0,0,0,0"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "6"))
                     (rule "polySimp_mulLiterals" (formula "6") (term "0"))
                     (rule "polySimp_elimOne" (formula "6") (term "0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1"))
                     (rule "mul_literals" (formula "1") (term "1,1"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "35"))
                     (rule "polySimp_mulComm0" (formula "35") (term "1"))
                     (rule "polySimp_rightDist" (formula "35") (term "1"))
                     (rule "polySimp_mulLiterals" (formula "35") (term "1,1"))
                     (rule "mul_literals" (formula "35") (term "0,1"))
                     (rule "polySimp_elimOne" (formula "35") (term "1,1"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "9") (term "0,0,0"))
                     (rule "mul_literals" (formula "9") (term "1,0,0,0"))
                     (rule "inEqSimp_subsumption1" (formula "22") (ifseqformula "36"))
                     (rule "leq_literals" (formula "22") (term "0"))
                      (builtin "One Step Simplification" (formula "22"))
                     (rule "true_left" (formula "22"))
                     (rule "inEqSimp_contradInEq1" (formula "1") (term "1") (ifseqformula "7"))
                     (rule "qeq_literals" (formula "1") (term "0,1"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "inEqSimp_subsumption1" (formula "9") (term "1,0,0") (ifseqformula "6"))
                     (rule "inEqSimp_homoInEq0" (formula "9") (term "0,1,0,0"))
                     (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,1,0,0"))
                     (rule "polySimp_rightDist" (formula "9") (term "1,0,0,1,0,0"))
                     (rule "mul_literals" (formula "9") (term "0,1,0,0,1,0,0"))
                     (rule "polySimp_addAssoc" (formula "9") (term "0,0,1,0,0"))
                     (rule "polySimp_addComm1" (formula "9") (term "0,0,0,1,0,0"))
                     (rule "add_literals" (formula "9") (term "0,0,0,0,1,0,0"))
                     (rule "polySimp_pullOutFactor1b" (formula "9") (term "0,0,1,0,0"))
                     (rule "add_literals" (formula "9") (term "1,1,0,0,1,0,0"))
                     (rule "times_zero_1" (formula "9") (term "1,0,0,1,0,0"))
                     (rule "add_zero_right" (formula "9") (term "0,0,1,0,0"))
                     (rule "qeq_literals" (formula "9") (term "0,1,0,0"))
                      (builtin "One Step Simplification" (formula "9"))
                     (rule "inEqSimp_subsumption1" (formula "8") (ifseqformula "6"))
                     (rule "inEqSimp_homoInEq0" (formula "8") (term "0"))
                     (rule "polySimp_pullOutFactor1b" (formula "8") (term "0,0"))
                     (rule "add_literals" (formula "8") (term "1,1,0,0"))
                     (rule "times_zero_1" (formula "8") (term "1,0,0"))
                     (rule "add_zero_right" (formula "8") (term "0,0"))
                     (rule "qeq_literals" (formula "8") (term "0"))
                      (builtin "One Step Simplification" (formula "8"))
                     (rule "true_left" (formula "8"))
                     (rule "inEqSimp_subsumption1" (formula "37") (ifseqformula "38"))
                     (rule "leq_literals" (formula "37") (term "0"))
                      (builtin "One Step Simplification" (formula "37"))
                     (rule "true_left" (formula "37"))
                     (rule "inEqSimp_subsumption1" (formula "31") (ifseqformula "32"))
                     (rule "leq_literals" (formula "31") (term "0"))
                      (builtin "One Step Simplification" (formula "31"))
                     (rule "true_left" (formula "31"))
                     (rule "inEqSimp_exactShadow3" (formula "22") (ifseqformula "41"))
                     (rule "mul_literals" (formula "22") (term "0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "22"))
                     (rule "mul_literals" (formula "22") (term "1"))
                     (rule "inEqSimp_exactShadow3" (formula "31") (ifseqformula "1"))
                     (rule "times_zero_1" (formula "31") (term "0,0"))
                     (rule "add_zero_left" (formula "31") (term "0"))
                     (rule "inEqSimp_exactShadow3" (formula "40") (ifseqformula "21"))
                     (rule "polySimp_mulComm0" (formula "40") (term "0,0"))
                     (rule "polySimp_addComm0" (formula "40") (term "0"))
                     (rule "inEqSimp_sepNegMonomial1" (formula "40"))
                     (rule "polySimp_mulLiterals" (formula "40") (term "0"))
                     (rule "polySimp_elimOne" (formula "40") (term "0"))
                     (rule "inEqSimp_exactShadow3" (formula "34") (ifseqformula "23"))
                     (rule "polySimp_mulComm0" (formula "34") (term "0,0"))
                     (rule "polySimp_addComm0" (formula "34") (term "0"))
                     (rule "inEqSimp_sepNegMonomial1" (formula "34"))
                     (rule "polySimp_mulLiterals" (formula "34") (term "0"))
                     (rule "polySimp_elimOne" (formula "34") (term "0"))
                     (rule "inEqSimp_exactShadow3" (formula "6") (ifseqformula "32"))
                     (rule "polySimp_rightDist" (formula "6") (term "0,0"))
                     (rule "mul_literals" (formula "6") (term "0,0,0"))
                     (rule "polySimp_addAssoc" (formula "6") (term "0"))
                     (rule "polySimp_addComm1" (formula "6") (term "0,0"))
                     (rule "add_literals" (formula "6") (term "0,0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "6"))
                     (rule "polySimp_mulComm0" (formula "6") (term "1"))
                     (rule "polySimp_rightDist" (formula "6") (term "1"))
                     (rule "polySimp_mulLiterals" (formula "6") (term "1,1"))
                     (rule "mul_literals" (formula "6") (term "0,1"))
                     (rule "polySimp_elimOne" (formula "6") (term "1,1"))
                     (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "6"))
                     (rule "andLeft" (formula "1"))
                     (rule "inEqSimp_homoInEq1" (formula "1"))
                     (rule "polySimp_pullOutFactor1b" (formula "1") (term "0"))
                     (rule "add_literals" (formula "1") (term "1,1,0"))
                     (rule "times_zero_1" (formula "1") (term "1,0"))
                     (rule "add_zero_right" (formula "1") (term "0"))
                     (rule "leq_literals" (formula "1"))
                     (rule "closeFalse" (formula "1"))
                  )
               )
            )
         )
      )
   )
   (branch "if x_2 false"
       (builtin "One Step Simplification" (formula "62"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "notLeft" (formula "1"))
      (rule "blockBreak" (formula "62") (term "1"))
      (rule "lsBreak" (formula "62") (term "1"))
      (rule "assignment" (formula "62") (term "1"))
       (builtin "One Step Simplification" (formula "62"))
      (rule "eval_order_array_access2" (formula "62") (term "1") (inst "#v0=x") (inst "#ar1=x_arr"))
      (rule "variableDeclarationAssign" (formula "62") (term "1"))
      (rule "variableDeclaration" (formula "62") (term "1") (newnames "x_arr"))
      (rule "assignment" (formula "62") (term "1"))
       (builtin "One Step Simplification" (formula "62"))
      (rule "variableDeclarationAssign" (formula "62") (term "1"))
      (rule "variableDeclaration" (formula "62") (term "1") (newnames "x"))
      (rule "assignment_read_attribute_this_final" (formula "62"))
       (builtin "One Step Simplification" (formula "62"))
      (rule "assignment_to_primitive_array_component" (formula "62"))
      (branch "Normal Execution (x_arr != null)"
          (builtin "One Step Simplification" (formula "62"))
          (builtin "Block Contract (Internal)" (formula "62") (newnames "exc_25,heap_Before_BLOCK,savedHeap_Before_BLOCK,o,f"))
         (branch "Validity"
             (builtin "One Step Simplification" (formula "63"))
             (builtin "One Step Simplification" (formula "42") (ifInst ""  (formula "23")) (ifInst ""  (formula "13")) (ifInst ""  (formula "59")))
            (rule "andLeft" (formula "42"))
            (rule "eqSymm" (formula "64") (term "0,0,1,0,1"))
            (rule "dismissNonSelectedField" (formula "43") (term "0"))
             (builtin "One Step Simplification" (formula "43") (ifInst ""  (formula "12")))
            (rule "true_left" (formula "43"))
            (rule "variableDeclarationAssign" (formula "63") (term "1"))
            (rule "variableDeclaration" (formula "63") (term "1") (newnames "exc_25_1"))
            (rule "assignment" (formula "63") (term "1"))
             (builtin "One Step Simplification" (formula "63"))
            (rule "emptyStatement" (formula "63") (term "1"))
             (builtin "One Step Simplification" (formula "63"))
            (rule "emptyStatement" (formula "63") (term "1"))
            (rule "applyEq" (formula "63") (term "0,2,0,1,0,0") (ifseqformula "36"))
            (rule "applyEq" (formula "42") (term "0,2,0") (ifseqformula "36"))
            (rule "applyEq" (formula "63") (term "0,2,0,0,0,0") (ifseqformula "36"))
            (rule "tryEmpty" (formula "63") (term "1"))
            (rule "blockEmptyLabel" (formula "63") (term "1"))
            (rule "blockEmpty" (formula "63") (term "1"))
            (rule "methodCallEmpty" (formula "63") (term "1"))
            (rule "emptyModality" (formula "63") (term "1"))
            (rule "andRight" (formula "63"))
            (branch "Case 1"
                (builtin "One Step Simplification" (formula "63"))
               (rule "closeTrue" (formula "63"))
            )
            (branch "Case 2"
                (builtin "One Step Simplification" (formula "63"))
               (rule "closeTrue" (formula "63"))
            )
         )
         (branch "Precondition"
            (rule "andRight" (formula "62"))
            (branch "Case 1"
               (rule "andRight" (formula "62"))
               (branch "Case 1"
                   (builtin "One Step Simplification" (formula "62") (ifInst ""  (formula "23")))
                  (rule "closeTrue" (formula "62"))
               )
               (branch "Case 2"
                   (builtin "One Step Simplification" (formula "62"))
                  (rule "wellFormedStorePrimitiveArray" (formula "62"))
                  (rule "wellFormedAnon" (formula "62"))
                  (rule "replace_known_left" (formula "62") (term "0") (ifseqformula "11"))
                   (builtin "One Step Simplification" (formula "62") (ifInst ""  (formula "10")))
                  (rule "closeTrue" (formula "62"))
               )
            )
            (branch "Case 2"
               (rule "andRight" (formula "62"))
               (branch "Case 1"
                  (rule "andRight" (formula "62"))
                  (branch "Case 1"
                      (builtin "One Step Simplification" (formula "62") (ifInst ""  (formula "58")))
                     (rule "closeTrue" (formula "62"))
                  )
                  (branch "Case 2"
                      (builtin "One Step Simplification" (formula "62"))
                     (rule "polySimp_homoEq" (formula "9") (term "1,0"))
                     (rule "polySimp_homoEq" (formula "9") (term "0,1,0,1,0,1,0"))
                     (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,1,0,1,0,1,0"))
                     (rule "polySimp_mulComm0" (formula "9") (term "1,0,1,0"))
                     (rule "polySimp_rightDist" (formula "9") (term "1,0,1,0"))
                     (rule "polySimp_mulAssoc" (formula "9") (term "0,1,0,1,0"))
                     (rule "polySimp_mulComm0" (formula "9") (term "0,0,1,0,1,0"))
                     (rule "polySimp_mulLiterals" (formula "9") (term "0,1,0,1,0"))
                     (rule "polySimp_elimOne" (formula "9") (term "0,1,0,1,0"))
                     (rule "polySimp_rightDist" (formula "9") (term "1,0,0,0,1,1,0,1,0"))
                     (rule "mul_literals" (formula "9") (term "0,1,0,0,0,1,1,0,1,0"))
                     (rule "dismissNonSelectedField" (formula "62") (term "0"))
                      (builtin "One Step Simplification" (formula "62") (ifInst ""  (formula "12")))
                     (rule "closeTrue" (formula "62"))
                  )
               )
               (branch "Case 2"
                   (builtin "One Step Simplification" (formula "62") (ifInst ""  (formula "13")))
                  (rule "closeTrue" (formula "62"))
               )
            )
         )
         (branch "Usage"
             (builtin "One Step Simplification" (formula "63"))
             (builtin "One Step Simplification" (formula "42"))
            (rule "andLeft" (formula "42"))
            (rule "andLeft" (formula "42"))
            (rule "andLeft" (formula "44"))
            (rule "eqSymm" (formula "44"))
            (rule "translateJavaAddInt" (formula "45") (term "3,0"))
            (rule "translateJavaSubInt" (formula "44") (term "0"))
            (rule "replace_known_left" (formula "43") (term "0") (ifseqformula "42"))
             (builtin "One Step Simplification" (formula "43"))
            (rule "true_left" (formula "43"))
            (rule "polySimp_elimSub" (formula "43") (term "0"))
            (rule "eqSymm" (formula "43"))
            (rule "polySimp_addComm0" (formula "44") (term "3,0"))
            (rule "polySimp_addComm0" (formula "43") (term "1"))
            (rule "applyEq" (formula "9") (term "1,1,0,1,0") (ifseqformula "43"))
            (rule "applyEq" (formula "5") (term "0,1,1") (ifseqformula "43"))
            (rule "applyEq" (formula "65") (term "3,0,1,0") (ifseqformula "43"))
            (rule "applyEq" (formula "65") (term "0,2,0,1,0") (ifseqformula "36"))
            (rule "applyEq" (formula "44") (term "0,2,0,0") (ifseqformula "36"))
            (rule "applyEq" (formula "44") (term "3,0,0") (ifseqformula "43"))
            (rule "applyEq" (formula "44") (term "1,3,0") (ifseqformula "36"))
            (rule "applyEq" (formula "6") (term "1") (ifseqformula "43"))
            (rule "elim_double_block_2" (formula "65") (term "1"))
            (rule "ifUnfold" (formula "65") (term "1") (inst "#boolv=x"))
            (rule "variableDeclaration" (formula "65") (term "1") (newnames "x_5"))
            (rule "inequality_comparison_simple" (formula "65") (term "1"))
             (builtin "One Step Simplification" (formula "65"))
            (rule "replace_known_left" (formula "65") (term "0,0,1,0") (ifseqformula "42"))
             (builtin "One Step Simplification" (formula "65"))
            (rule "onlyCreatedObjectsAreReferencedFinal" (formula "60") (term "1") (ifseqformula "11") (ifseqformula "12"))
            (rule "onlyCreatedObjectsAreReferencedFinal" (formula "60") (term "0,0") (ifseqformula "12") (ifseqformula "13"))
            (rule "onlyCreatedObjectsAreReferencedFinal" (formula "60") (term "1") (ifseqformula "13") (ifseqformula "24"))
            (rule "onlyCreatedObjectsAreReferencedFinal" (formula "58") (term "1") (ifseqformula "14") (ifseqformula "25"))
            (rule "ifSplit" (formula "69"))
            (branch "if x_5 true"
                (builtin "One Step Simplification" (formula "70"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "closeFalse" (formula "1"))
            )
            (branch "if x_5 false"
                (builtin "One Step Simplification" (formula "70"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "true_left" (formula "1"))
               (rule "blockEmpty" (formula "69") (term "1"))
               (rule "emptyStatement" (formula "69") (term "1"))
               (rule "methodCallEmpty" (formula "69") (term "1"))
               (rule "tryEmpty" (formula "69") (term "1"))
               (rule "emptyModality" (formula "69") (term "1"))
               (rule "andRight" (formula "69"))
               (branch "Case 1"
                  (rule "impRight" (formula "69"))
                  (rule "andRight" (formula "70"))
                  (branch "Case 1"
                      (builtin "One Step Simplification" (formula "70"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "true_left" (formula "1"))
                     (rule "polySimp_homoEq" (formula "13") (term "0,1,0,1,0"))
                     (rule "polySimp_homoEq" (formula "13") (term "1,0"))
                     (rule "polySimp_mulComm0" (formula "13") (term "1,0,1,0"))
                     (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,1,1,1,0,1,0"))
                     (rule "polySimp_rightDist" (formula "13") (term "1,0,0,1,1,1,0,1,0"))
                     (rule "mul_literals" (formula "13") (term "0,1,0,0,1,1,1,0,1,0"))
                     (rule "polySimp_rightDist" (formula "13") (term "1,0,1,0"))
                     (rule "polySimp_mulAssoc" (formula "13") (term "0,1,0,1,0"))
                     (rule "polySimp_mulComm0" (formula "13") (term "0,0,1,0,1,0"))
                     (rule "polySimp_mulLiterals" (formula "13") (term "0,1,0,1,0"))
                     (rule "polySimp_elimOne" (formula "13") (term "0,1,0,1,0"))
                     (rule "polySimp_addAssoc" (formula "13") (term "0,0,0,1,1,0,1,0"))
                     (rule "polySimp_addComm0" (formula "13") (term "0,0,0,0,1,1,0,1,0"))
                     (rule "polySimp_addAssoc" (formula "13") (term "0,1,0"))
                     (rule "inEqSimp_ltRight" (formula "49"))
                     (rule "polySimp_mulComm0" (formula "1") (term "0,0"))
                     (rule "polySimp_addComm0" (formula "1") (term "0"))
                     (rule "inEqSimp_ltToLeq" (formula "13") (term "0,0,0,0,0"))
                     (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,0,0,0,0,0"))
                     (rule "inEqSimp_ltToLeq" (formula "10") (term "0"))
                     (rule "add_zero_right" (formula "10") (term "0,0"))
                     (rule "polySimp_mulComm0" (formula "10") (term "1,0,0"))
                     (rule "inEqSimp_ltToLeq" (formula "14") (term "0,0,0,0,0"))
                     (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,0,0,0,0,0"))
                     (rule "inEqSimp_homoInEq0" (formula "8") (term "0,0,0"))
                     (rule "mul_literals" (formula "8") (term "1,0,0,0,0"))
                     (rule "add_zero_right" (formula "8") (term "0,0,0,0"))
                     (rule "inEqSimp_homoInEq1" (formula "34"))
                     (rule "polySimp_addComm1" (formula "34") (term "0"))
                     (rule "inEqSimp_homoInEq1" (formula "10") (term "1,1"))
                     (rule "polySimp_mulComm0" (formula "10") (term "1,0,1,1"))
                     (rule "polySimp_rightDist" (formula "10") (term "1,0,1,1"))
                     (rule "polySimp_mulAssoc" (formula "10") (term "0,1,0,1,1"))
                     (rule "polySimp_mulComm0" (formula "10") (term "0,0,1,0,1,1"))
                     (rule "polySimp_mulLiterals" (formula "10") (term "0,1,0,1,1"))
                     (rule "polySimp_elimOne" (formula "10") (term "0,1,0,1,1"))
                     (rule "polySimp_addAssoc" (formula "10") (term "0,1,1"))
                     (rule "polySimp_sepNegMonomial" (formula "14") (term "0,0,1,0,1,0"))
                     (rule "polySimp_mulLiterals" (formula "14") (term "0,0,0,1,0,1,0"))
                     (rule "polySimp_elimOne" (formula "14") (term "0,0,0,1,0,1,0"))
                     (rule "polySimp_sepNegMonomial" (formula "14") (term "1,0"))
                     (rule "polySimp_mulLiterals" (formula "14") (term "0,1,0"))
                     (rule "polySimp_elimOne" (formula "14") (term "0,1,0"))
                     (rule "inEqSimp_sepNegMonomial1" (formula "1"))
                     (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                     (rule "polySimp_elimOne" (formula "1") (term "0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "0,0,0,0,0"))
                     (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,0,0,0"))
                     (rule "polySimp_rightDist" (formula "13") (term "1,0,0,0,0,0"))
                     (rule "mul_literals" (formula "13") (term "0,1,0,0,0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "13") (term "1,1,0,0,0,0,0"))
                     (rule "polySimp_elimOne" (formula "13") (term "1,1,0,0,0,0,0"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "10") (term "0"))
                     (rule "polySimp_mulLiterals" (formula "10") (term "0,0"))
                     (rule "polySimp_elimOne" (formula "10") (term "0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "0,0,0,0,0"))
                     (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,0,0,0"))
                     (rule "polySimp_rightDist" (formula "14") (term "1,0,0,0,0,0"))
                     (rule "mul_literals" (formula "14") (term "0,1,0,0,0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "14") (term "1,1,0,0,0,0,0"))
                     (rule "polySimp_elimOne" (formula "14") (term "1,1,0,0,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "8") (term "0,0,0"))
                     (rule "mul_literals" (formula "8") (term "1,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "34"))
                     (rule "polySimp_mulComm0" (formula "34") (term "1"))
                     (rule "polySimp_rightDist" (formula "34") (term "1"))
                     (rule "mul_literals" (formula "34") (term "0,1"))
                     (rule "polySimp_mulLiterals" (formula "34") (term "1,1"))
                     (rule "polySimp_elimOne" (formula "34") (term "1,1"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "10") (term "1,1"))
                     (rule "polySimp_mulLiterals" (formula "10") (term "0,1,1"))
                     (rule "polySimp_elimOne" (formula "10") (term "0,1,1"))
                     (rule "inEqSimp_subsumption1" (formula "8") (term "1,0,0") (ifseqformula "7"))
                     (rule "inEqSimp_homoInEq0" (formula "8") (term "0,1,0,0"))
                     (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,1,0,0"))
                     (rule "polySimp_rightDist" (formula "8") (term "1,0,0,1,0,0"))
                     (rule "mul_literals" (formula "8") (term "0,1,0,0,1,0,0"))
                     (rule "polySimp_addAssoc" (formula "8") (term "0,0,1,0,0"))
                     (rule "polySimp_addComm0" (formula "8") (term "0,0,0,1,0,0"))
                     (rule "polySimp_pullOutFactor1b" (formula "8") (term "0,0,1,0,0"))
                     (rule "add_literals" (formula "8") (term "1,1,0,0,1,0,0"))
                     (rule "times_zero_1" (formula "8") (term "1,0,0,1,0,0"))
                     (rule "add_zero_right" (formula "8") (term "0,0,1,0,0"))
                     (rule "qeq_literals" (formula "8") (term "0,1,0,0"))
                      (builtin "One Step Simplification" (formula "8"))
                     (rule "inEqSimp_subsumption1" (formula "38") (ifseqformula "39"))
                     (rule "leq_literals" (formula "38") (term "0"))
                      (builtin "One Step Simplification" (formula "38"))
                     (rule "true_left" (formula "38"))
                     (rule "inEqSimp_subsumption1" (formula "32") (ifseqformula "33"))
                     (rule "leq_literals" (formula "32") (term "0"))
                      (builtin "One Step Simplification" (formula "32"))
                     (rule "true_left" (formula "32"))
                     (rule "inEqSimp_subsumption1" (formula "21") (ifseqformula "34"))
                     (rule "leq_literals" (formula "21") (term "0"))
                      (builtin "One Step Simplification" (formula "21"))
                     (rule "true_left" (formula "21"))
                     (rule "inEqSimp_antiSymm" (formula "7") (ifseqformula "1"))
                     (rule "applyEq" (formula "67") (term "2,1,0,0") (ifseqformula "7"))
                     (rule "applyEq" (formula "47") (term "2,1,0,0,0") (ifseqformula "7"))
                     (rule "applyEq" (formula "14") (term "2,1,0,0,1,0") (ifseqformula "7"))
                     (rule "applyEq" (formula "33") (term "0") (ifseqformula "7"))
                     (rule "inEqSimp_homoInEq0" (formula "33"))
                     (rule "polySimp_addComm1" (formula "33") (term "0"))
                     (rule "applyEq" (formula "15") (term "2,1,0,2,0,1,0") (ifseqformula "7"))
                     (rule "applyEq" (formula "47") (term "1,3,0") (ifseqformula "7"))
                     (rule "applyEq" (formula "10") (term "0,0,0") (ifseqformula "7"))
                     (rule "replace_known_left" (formula "10") (term "0,0") (ifseqformula "6"))
                      (builtin "One Step Simplification" (formula "10"))
                     (rule "applyEqReverse" (formula "11") (term "0,0,1") (ifseqformula "10"))
                     (rule "hideAuxiliaryEq" (formula "10"))
                     (rule "applyEq" (formula "46") (term "0,2,0,0") (ifseqformula "7"))
                     (rule "applyEq" (formula "13") (term "1,1,0,0,0,0,0") (ifseqformula "7"))
                     (rule "applyEq" (formula "1") (term "0") (ifseqformula "7"))
                     (rule "inEqSimp_homoInEq0" (formula "1"))
                     (rule "polySimp_pullOutFactor1" (formula "1") (term "0"))
                     (rule "add_literals" (formula "1") (term "1,0"))
                     (rule "times_zero_1" (formula "1") (term "0"))
                     (rule "qeq_literals" (formula "1"))
                     (rule "true_left" (formula "1"))
                     (rule "applyEq" (formula "11") (term "2,1,0,0") (ifseqformula "6"))
                     (rule "applyEq" (formula "7") (term "0") (ifseqformula "6"))
                     (rule "inEqSimp_homoInEq1" (formula "7"))
                     (rule "polySimp_pullOutFactor1" (formula "7") (term "0"))
                     (rule "add_literals" (formula "7") (term "1,0"))
                     (rule "times_zero_1" (formula "7") (term "0"))
                     (rule "leq_literals" (formula "7"))
                     (rule "true_left" (formula "7"))
                     (rule "applyEq" (formula "64") (term "0,2,0") (ifseqformula "6"))
                     (rule "applyEq" (formula "36") (term "1") (ifseqformula "6"))
                     (rule "applyEq" (formula "12") (term "2,1,0,1,1,1,0") (ifseqformula "6"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "30"))
                     (rule "polySimp_mulComm0" (formula "30") (term "1"))
                     (rule "polySimp_rightDist" (formula "30") (term "1"))
                     (rule "polySimp_mulLiterals" (formula "30") (term "1,1"))
                     (rule "mul_literals" (formula "30") (term "0,1"))
                     (rule "polySimp_elimOne" (formula "30") (term "1,1"))
                     (rule "inEqSimp_exactShadow3" (formula "32") (ifseqformula "21"))
                     (rule "polySimp_mulComm0" (formula "32") (term "0,0"))
                     (rule "polySimp_addComm0" (formula "32") (term "0"))
                     (rule "inEqSimp_sepNegMonomial1" (formula "32"))
                     (rule "polySimp_mulLiterals" (formula "32") (term "0"))
                     (rule "polySimp_elimOne" (formula "32") (term "0"))
                     (rule "inEqSimp_exactShadow3" (formula "38") (ifseqformula "19"))
                     (rule "polySimp_mulComm0" (formula "38") (term "0,0"))
                     (rule "polySimp_addComm0" (formula "38") (term "0"))
                     (rule "inEqSimp_sepNegMonomial1" (formula "38"))
                     (rule "polySimp_mulLiterals" (formula "38") (term "0"))
                     (rule "polySimp_elimOne" (formula "38") (term "0"))
                     (rule "inEqSimp_exactShadow3" (formula "20") (ifseqformula "39"))
                     (rule "mul_literals" (formula "20") (term "0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "20"))
                     (rule "mul_literals" (formula "20") (term "1"))
                     (rule "inEqSimp_exactShadow3" (formula "38") (ifseqformula "39"))
                     (rule "polySimp_mulComm0" (formula "38") (term "0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "38"))
                     (rule "polySimp_mulLiterals" (formula "38") (term "1"))
                     (rule "polySimp_elimOne" (formula "38") (term "1"))
                     (rule "inEqSimp_exactShadow3" (formula "35") (ifseqformula "33"))
                     (rule "polySimp_mulComm0" (formula "35") (term "0,0"))
                     (rule "polySimp_addComm0" (formula "35") (term "0"))
                     (rule "inEqSimp_sepNegMonomial1" (formula "35"))
                     (rule "polySimp_mulLiterals" (formula "35") (term "0"))
                     (rule "polySimp_elimOne" (formula "35") (term "0"))
                     (rule "inEqSimp_subsumption0" (formula "21") (ifseqformula "35"))
                     (rule "leq_literals" (formula "21") (term "0"))
                      (builtin "One Step Simplification" (formula "21"))
                     (rule "true_left" (formula "21"))
                     (rule "inEqSimp_exactShadow3" (formula "31") (ifseqformula "34"))
                     (rule "polySimp_mulComm0" (formula "31") (term "0,0"))
                     (rule "polySimp_addComm0" (formula "31") (term "0"))
                     (rule "inEqSimp_sepNegMonomial1" (formula "31"))
                     (rule "polySimp_mulLiterals" (formula "31") (term "0"))
                     (rule "polySimp_elimOne" (formula "31") (term "0"))
                     (rule "inEqSimp_subsumption0" (formula "18") (ifseqformula "31"))
                     (rule "leq_literals" (formula "18") (term "0"))
                      (builtin "One Step Simplification" (formula "18"))
                     (rule "true_left" (formula "18"))
                     (rule "inEqSimp_exactShadow3" (formula "28") (ifseqformula "26"))
                     (rule "polySimp_rightDist" (formula "28") (term "0,0"))
                     (rule "mul_literals" (formula "28") (term "0,0,0"))
                     (rule "polySimp_addComm1" (formula "28") (term "0"))
                     (rule "add_literals" (formula "28") (term "0,0"))
                     (rule "inEqSimp_sepNegMonomial1" (formula "28"))
                     (rule "polySimp_mulLiterals" (formula "28") (term "0"))
                     (rule "polySimp_elimOne" (formula "28") (term "0"))
                     (rule "inEqSimp_and_subsumption3" (formula "12") (term "0,0,0"))
                     (rule "leq_literals" (formula "12") (term "0,1,0,0,0,0"))
                      (builtin "One Step Simplification" (formula "12"))
                     (rule "nnf_imp2or" (formula "11") (term "0"))
                     (rule "nnf_imp2or" (formula "12") (term "0"))
                     (rule "nnf_notAnd" (formula "11") (term "0,0"))
                     (rule "inEqSimp_notGeq" (formula "11") (term "1,0,0"))
                     (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,1,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "1,0,0"))
                     (rule "polySimp_mulComm0" (formula "11") (term "1,1,0,0"))
                     (rule "polySimp_rightDist" (formula "11") (term "1,1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "11") (term "1,1,1,0,0"))
                     (rule "mul_literals" (formula "11") (term "0,1,1,0,0"))
                     (rule "polySimp_elimOne" (formula "11") (term "1,1,1,0,0"))
                     (rule "nnf_notAnd" (formula "12") (term "0,0"))
                     (rule "inEqSimp_notLeq" (formula "12") (term "1,0,0"))
                     (rule "mul_literals" (formula "12") (term "1,0,0,1,0,0"))
                     (rule "add_literals" (formula "12") (term "0,0,1,0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "12") (term "1,0,0"))
                     (rule "mul_literals" (formula "12") (term "1,1,0,0"))
                     (rule "nnf_notAnd" (formula "11") (term "0,0,0"))
                     (rule "inEqSimp_notLeq" (formula "11") (term "1,0,0,0"))
                     (rule "mul_literals" (formula "11") (term "1,0,0,1,0,0,0"))
                     (rule "add_literals" (formula "11") (term "0,0,1,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "11") (term "1,0,0,0"))
                     (rule "mul_literals" (formula "11") (term "1,1,0,0,0"))
                     (rule "nnf_notAnd" (formula "12") (term "0,0,0"))
                     (rule "inEqSimp_notLeq" (formula "12") (term "0,0,0,0"))
                     (rule "polySimp_rightDist" (formula "12") (term "1,0,0,0,0,0,0"))
                     (rule "mul_literals" (formula "12") (term "0,1,0,0,0,0,0,0"))
                     (rule "polySimp_addAssoc" (formula "12") (term "0,0,0,0,0,0"))
                     (rule "add_literals" (formula "12") (term "0,0,0,0,0,0,0"))
                     (rule "add_zero_left" (formula "12") (term "0,0,0,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "12") (term "0,0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "12") (term "1,0,0,0,0"))
                     (rule "polySimp_elimOne" (formula "12") (term "1,0,0,0,0"))
                     (rule "inEqSimp_notGeq" (formula "12") (term "1,0,0,0"))
                     (rule "times_zero_1" (formula "12") (term "1,0,0,1,0,0,0"))
                     (rule "add_zero_right" (formula "12") (term "0,0,1,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "1,0,0,0"))
                     (rule "mul_literals" (formula "12") (term "1,1,0,0,0"))
                     (rule "nnf_notAnd" (formula "11") (term "0,0,0,0"))
                     (rule "inEqSimp_notGeq" (formula "11") (term "1,0,0,0,0"))
                     (rule "mul_literals" (formula "11") (term "1,0,0,1,0,0,0,0"))
                     (rule "add_literals" (formula "11") (term "0,0,1,0,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "1,0,0,0,0"))
                     (rule "mul_literals" (formula "11") (term "1,1,0,0,0,0"))
                     (rule "inEqSimp_notLeq" (formula "11") (term "0,0,0,0,0"))
                     (rule "polySimp_rightDist" (formula "11") (term "1,0,0,0,0,0,0,0"))
                     (rule "mul_literals" (formula "11") (term "0,1,0,0,0,0,0,0,0"))
                     (rule "polySimp_addAssoc" (formula "11") (term "0,0,0,0,0,0,0"))
                     (rule "add_literals" (formula "11") (term "0,0,0,0,0,0,0,0"))
                     (rule "add_zero_left" (formula "11") (term "0,0,0,0,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "11") (term "0,0,0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "11") (term "1,0,0,0,0,0"))
                     (rule "polySimp_elimOne" (formula "11") (term "1,0,0,0,0,0"))
                     (rule "Free_class_invariant_axiom_for_de_wiesler_Buffers" (formula "25") (inst "b=b"))
                      (builtin "One Step Simplification" (formula "25"))
                     (rule "expand_inInt" (formula "25") (term "1,0,0,1"))
                     (rule "replace_int_MAX" (formula "25") (term "1,0,1,0,0,1"))
                     (rule "replace_int_MIN" (formula "25") (term "0,1,1,0,0,1"))
                     (rule "andLeft" (formula "25"))
                     (rule "andLeft" (formula "25"))
                     (rule "andLeft" (formula "25"))
                     (rule "andLeft" (formula "27"))
                     (rule "andLeft" (formula "25"))
                     (rule "notLeft" (formula "25"))
                     (rule "translateJavaMulInt" (formula "25") (term "1"))
                     (rule "mul_literals" (formula "25") (term "1"))
                     (rule "eqSymm" (formula "50"))
                     (rule "inEqSimp_ltToLeq" (formula "29") (term "1,0,0,0"))
                     (rule "polySimp_mulComm0" (formula "29") (term "1,0,0,1,0,0,0"))
                     (rule "inEqSimp_commuteLeq" (formula "29") (term "1,1,0,0"))
                     (rule "inEqSimp_commuteLeq" (formula "29") (term "0,0,0,0"))
                     (rule "inEqSimp_commuteLeq" (formula "29") (term "0,1,0"))
                     (rule "inEqSimp_commuteLeq" (formula "27"))
                     (rule "applyEq" (formula "28") (term "0") (ifseqformula "6"))
                     (rule "applyEq" (formula "27") (term "0") (ifseqformula "6"))
                     (rule "applyEq" (formula "28") (term "0,1,0,0,1,0,0,0") (ifseqformula "6"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "28") (term "1,0,0,0"))
                     (rule "polySimp_mulComm0" (formula "28") (term "1,1,0,0,0"))
                     (rule "polySimp_rightDist" (formula "28") (term "1,1,0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "28") (term "1,1,1,0,0,0"))
                     (rule "mul_literals" (formula "28") (term "0,1,1,0,0,0"))
                     (rule "polySimp_elimOne" (formula "28") (term "1,1,1,0,0,0"))
                     (rule "inEqSimp_subsumption0" (formula "31") (ifseqformula "27"))
                     (rule "leq_literals" (formula "31") (term "0"))
                      (builtin "One Step Simplification" (formula "31"))
                     (rule "true_left" (formula "31"))
                     (rule "Definition_axiom_for_isClassifiedUntil_in_de_wiesler_Classifier" (formula "40") (term "0") (inst "b=b"))
                      (builtin "One Step Simplification" (formula "40"))
                     (rule "expand_inInt" (formula "40") (term "1,0,0,1,0"))
                     (rule "replace_int_MAX" (formula "40") (term "1,0,1,0,0,1,0"))
                     (rule "replace_int_MIN" (formula "40") (term "0,1,1,0,0,1,0"))
                     (rule "andLeft" (formula "40"))
                     (rule "andLeft" (formula "40"))
                     (rule "andLeft" (formula "40"))
                     (rule "andLeft" (formula "40"))
                     (rule "translateJavaSubInt" (formula "44") (term "1"))
                     (rule "polySimp_elimSub" (formula "44") (term "1"))
                     (rule "inEqSimp_ltToLeq" (formula "43") (term "1,0,0,0"))
                     (rule "polySimp_mulComm0" (formula "43") (term "1,0,0,1,0,0,0"))
                     (rule "inEqSimp_commuteLeq" (formula "43") (term "0,0,0,0"))
                     (rule "inEqSimp_commuteLeq" (formula "43") (term "1,1,0,0"))
                     (rule "applyEq" (formula "43") (term "0,1,0,0,1,0,0,0") (ifseqformula "39"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "43") (term "1,0,0,0"))
                     (rule "polySimp_mulComm0" (formula "43") (term "1,1,0,0,0"))
                     (rule "polySimp_rightDist" (formula "43") (term "1,1,0,0,0"))
                     (rule "mul_literals" (formula "43") (term "0,1,1,0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "43") (term "1,1,1,0,0,0"))
                     (rule "polySimp_elimOne" (formula "43") (term "1,1,1,0,0,0"))
                     (rule "Definition_axiom_for_countClassOfSliceEq_in_de_wiesler_Classifier" (formula "9") (term "1,2,0") (inst "i=i"))
                     (rule "Free_class_invariant_axiom_for_de_wiesler_Classifier" (formula "48"))
                      (builtin "One Step Simplification" (formula "48"))
                     (rule "andLeft" (formula "48"))
                     (rule "andLeft" (formula "48"))
                     (rule "andLeft" (formula "48"))
                     (rule "andLeft" (formula "48"))
                     (rule "andLeft" (formula "48"))
                     (rule "andLeft" (formula "48"))
                     (rule "translateJavaSubInt" (formula "53") (term "0,2,0"))
                     (rule "translateJavaSubInt" (formula "53") (term "0,2,1"))
                     (rule "eqSymm" (formula "50"))
                     (rule "eqSymm" (formula "53"))
                     (rule "translateJavaMulInt" (formula "50") (term "1,0"))
                     (rule "polySimp_elimSub" (formula "53") (term "0,2,0"))
                     (rule "mul_literals" (formula "53") (term "1,0,2,0"))
                     (rule "eqSymm" (formula "53"))
                     (rule "polySimp_elimSub" (formula "53") (term "0,2,0"))
                     (rule "mul_literals" (formula "53") (term "1,0,2,0"))
                     (rule "eqSymm" (formula "53"))
                     (rule "polySimp_mulComm0" (formula "50") (term "1,0"))
                     (rule "polySimp_addComm0" (formula "53") (term "0,2,0"))
                     (rule "eqSymm" (formula "53"))
                     (rule "polySimp_addComm0" (formula "53") (term "0,2,0"))
                     (rule "eqSymm" (formula "53"))
                     (rule "inEqSimp_commuteLeq" (formula "48"))
                     (rule "applyEq" (formula "49") (term "0") (ifseqformula "39"))
                     (rule "applyEq" (formula "48") (term "0") (ifseqformula "39"))
                     (rule "applyEq" (formula "49") (term "1") (ifseqformula "39"))
                     (rule "inEqSimp_subsumption1" (formula "5") (ifseqformula "48"))
                     (rule "leq_literals" (formula "5") (term "0"))
                      (builtin "One Step Simplification" (formula "5"))
                     (rule "true_left" (formula "5"))
                     (rule "inEqSimp_subsumption1" (formula "7") (term "0") (ifseqformula "47"))
                     (rule "leq_literals" (formula "7") (term "0,0"))
                      (builtin "One Step Simplification" (formula "7"))
                     (rule "andLeft" (formula "7"))
                     (rule "inEqSimp_subsumption1" (formula "6") (term "0,0") (ifseqformula "48"))
                     (rule "leq_literals" (formula "6") (term "0,0,0"))
                      (builtin "One Step Simplification" (formula "6"))
                     (rule "applyEqReverse" (formula "8") (term "0,1") (ifseqformula "6"))
                     (rule "hideAuxiliaryEq" (formula "6"))
                     (rule "polySimp_addComm0" (formula "7") (term "1"))
                     (rule "inEqSimp_homoInEq1" (formula "7"))
                     (rule "polySimp_addComm1" (formula "7") (term "0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "7"))
                     (rule "polySimp_mulComm0" (formula "7") (term "1"))
                     (rule "polySimp_rightDist" (formula "7") (term "1"))
                     (rule "polySimp_mulLiterals" (formula "7") (term "1,1"))
                     (rule "polySimp_elimOne" (formula "7") (term "1,1"))
                     (rule "polySimp_mulComm0" (formula "7") (term "0,1"))
                     (rule "Definition_axiom_for_isBlockAligned_in_de_wiesler_Buffers" (formula "46") (term "0"))
                      (builtin "One Step Simplification" (formula "46"))
                     (rule "translateJavaMod" (formula "46") (term "0"))
                     (rule "jmod_axiom" (formula "46") (term "0"))
                     (rule "polySimp_mulLiterals" (formula "46") (term "1,0"))
                     (rule "polySimp_sepNegMonomial" (formula "46"))
                     (rule "polySimp_mulLiterals" (formula "46") (term "0"))
                     (rule "newSym_eq" (formula "46") (inst "l=l_0") (inst "newSymDef=add(mul(begin, Z(0(#))), mul(write, Z(0(#))))"))
                     (rule "times_zero_1" (formula "46") (term "1,1,1"))
                     (rule "times_zero_1" (formula "46") (term "0,1,1"))
                     (rule "add_zero_left" (formula "46") (term "1,1"))
                     (rule "add_zero_right" (formula "46") (term "1"))
                     (rule "applyEq" (formula "47") (term "0,0") (ifseqformula "46"))
                     (rule "polySimp_homoEq" (formula "47"))
                     (rule "polySimp_mulLiterals" (formula "47") (term "1,0"))
                     (rule "polySimp_addComm1" (formula "47") (term "0"))
                     (rule "polySimp_addComm0" (formula "47") (term "0,0"))
                     (rule "polySimp_sepPosMonomial" (formula "47"))
                     (rule "polySimp_mulComm0" (formula "47") (term "1"))
                     (rule "polySimp_rightDist" (formula "47") (term "1"))
                     (rule "polySimp_mulLiterals" (formula "47") (term "1,1"))
                     (rule "polySimp_elimOne" (formula "47") (term "1,1"))
                     (rule "polySimp_mulComm0" (formula "47") (term "0,1"))
                     (rule "polySimp_mulLiterals" (formula "47") (term "0,1"))
                     (rule "applyEq" (formula "39") (term "4,0") (ifseqformula "47"))
                     (rule "applyEq" (formula "44") (term "0") (ifseqformula "47"))
                     (rule "inEqSimp_homoInEq1" (formula "44"))
                     (rule "polySimp_mulComm0" (formula "44") (term "1,0"))
                     (rule "polySimp_rightDist" (formula "44") (term "1,0"))
                     (rule "polySimp_mulAssoc" (formula "44") (term "0,1,0"))
                     (rule "polySimp_mulComm0" (formula "44") (term "0,0,1,0"))
                     (rule "polySimp_mulLiterals" (formula "44") (term "0,1,0"))
                     (rule "polySimp_addAssoc" (formula "44") (term "0"))
                     (rule "polySimp_addComm0" (formula "44") (term "0,0"))
                     (rule "polySimp_pullOutFactor1b" (formula "44") (term "0"))
                     (rule "add_literals" (formula "44") (term "1,1,0"))
                     (rule "times_zero_1" (formula "44") (term "1,0"))
                     (rule "add_zero_right" (formula "44") (term "0"))
                     (rule "applyEq" (formula "40") (term "4,0") (ifseqformula "47"))
                     (rule "applyEq" (formula "18") (term "0") (ifseqformula "47"))
                     (rule "inEqSimp_homoInEq1" (formula "18"))
                     (rule "polySimp_mulComm0" (formula "18") (term "1,0"))
                     (rule "polySimp_rightDist" (formula "18") (term "1,0"))
                     (rule "polySimp_mulAssoc" (formula "18") (term "0,1,0"))
                     (rule "polySimp_mulComm0" (formula "18") (term "0,0,1,0"))
                     (rule "polySimp_mulLiterals" (formula "18") (term "0,1,0"))
                     (rule "polySimp_addAssoc" (formula "18") (term "0"))
                     (rule "applyEq" (formula "46") (term "1,0,0") (ifseqformula "47"))
                     (rule "polySimp_addAssoc" (formula "46") (term "0,0"))
                     (rule "polySimp_addComm0" (formula "46") (term "0,0,0"))
                     (rule "polySimp_pullOutFactor2b" (formula "46") (term "0,0"))
                     (rule "add_literals" (formula "46") (term "1,1,0,0"))
                     (rule "times_zero_1" (formula "46") (term "1,0,0"))
                     (rule "add_zero_right" (formula "46") (term "0,0"))
                     (rule "applyEq" (formula "17") (term "0") (ifseqformula "47"))
                     (rule "inEqSimp_homoInEq0" (formula "17"))
                     (rule "polySimp_mulComm0" (formula "17") (term "1,0"))
                     (rule "polySimp_rightDist" (formula "17") (term "1,0"))
                     (rule "polySimp_mulAssoc" (formula "17") (term "0,1,0"))
                     (rule "polySimp_mulComm0" (formula "17") (term "0,0,1,0"))
                     (rule "polySimp_mulLiterals" (formula "17") (term "0,1,0"))
                     (rule "polySimp_addAssoc" (formula "17") (term "0"))
                     (rule "applyEq" (formula "45") (term "0") (ifseqformula "47"))
                     (rule "inEqSimp_commuteLeq" (formula "45"))
                     (rule "applyEq" (formula "8") (term "1,1,2,0") (ifseqformula "47"))
                     (rule "applyEq" (formula "10") (term "4,1,1,0") (ifseqformula "47"))
                     (rule "applyEq" (formula "43") (term "0,1,1") (ifseqformula "47"))
                     (rule "polySimp_mulComm0" (formula "43") (term "1,1"))
                     (rule "polySimp_rightDist" (formula "43") (term "1,1"))
                     (rule "polySimp_mulAssoc" (formula "43") (term "0,1,1"))
                     (rule "polySimp_mulComm0" (formula "43") (term "0,0,1,1"))
                     (rule "polySimp_mulLiterals" (formula "43") (term "0,1,1"))
                     (rule "polySimp_addComm0" (formula "43") (term "1"))
                     (rule "applyEq" (formula "11") (term "4,1,0,1,1,0") (ifseqformula "47"))
                     (rule "inEqSimp_invertInEq0" (formula "44"))
                     (rule "mul_literals" (formula "44") (term "1"))
                     (rule "polySimp_mulLiterals" (formula "44") (term "0"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "18"))
                     (rule "polySimp_mulLiterals" (formula "18") (term "0"))
                     (rule "polySimp_elimOne" (formula "18") (term "0"))
                     (rule "inEqSimp_sepNegMonomial1" (formula "17"))
                     (rule "polySimp_mulLiterals" (formula "17") (term "0"))
                     (rule "polySimp_elimOne" (formula "17") (term "0"))
                     (rule "elimGcdGeq_antec" (formula "44") (inst "elimGcdRightDiv=Z(0(#))") (inst "elimGcdLeftDiv=l_0") (inst "elimGcd=Z(6(5(2(#))))"))
                     (rule "polySimp_mulLiterals" (formula "44") (term "1,0,1,0"))
                     (rule "leq_literals" (formula "44") (term "0,0"))
                      (builtin "One Step Simplification" (formula "44"))
                     (rule "times_zero_1" (formula "44") (term "1,0,0,0,0,0"))
                     (rule "add_zero_right" (formula "44") (term "0,0,0,0,0"))
                     (rule "add_literals" (formula "44") (term "0,0,0,0"))
                     (rule "polySimp_pullOutFactor0b" (formula "44") (term "0,0"))
                     (rule "add_literals" (formula "44") (term "1,1,0,0"))
                     (rule "times_zero_1" (formula "44") (term "1,0,0"))
                     (rule "add_literals" (formula "44") (term "0,0"))
                     (rule "leq_literals" (formula "44") (term "0"))
                      (builtin "One Step Simplification" (formula "44"))
                     (rule "inEqSimp_exactShadow3" (formula "45") (ifseqformula "36"))
                     (rule "polySimp_rightDist" (formula "45") (term "0,0"))
                     (rule "polySimp_mulAssoc" (formula "45") (term "0,0,0"))
                     (rule "polySimp_mulComm0" (formula "45") (term "0,0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "45") (term "0,0,0"))
                     (rule "polySimp_addComm1" (formula "45") (term "0"))
                     (rule "polySimp_addComm0" (formula "45") (term "0,0"))
                     (rule "inEqSimp_sepNegMonomial1" (formula "45"))
                     (rule "polySimp_mulLiterals" (formula "45") (term "0"))
                     (rule "polySimp_elimOne" (formula "45") (term "0"))
                     (rule "inEqSimp_subsumption0" (formula "17") (ifseqformula "45"))
                     (rule "inEqSimp_homoInEq0" (formula "17") (term "0"))
                     (rule "polySimp_mulComm0" (formula "17") (term "1,0,0"))
                     (rule "polySimp_rightDist" (formula "17") (term "1,0,0"))
                     (rule "mul_literals" (formula "17") (term "0,1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "17") (term "1,1,0,0"))
                     (rule "polySimp_addAssoc" (formula "17") (term "0,0"))
                     (rule "polySimp_addComm1" (formula "17") (term "0,0,0"))
                     (rule "add_literals" (formula "17") (term "0,0,0,0"))
                     (rule "polySimp_pullOutFactor0b" (formula "17") (term "0,0"))
                     (rule "add_literals" (formula "17") (term "1,1,0,0"))
                     (rule "times_zero_1" (formula "17") (term "1,0,0"))
                     (rule "add_literals" (formula "17") (term "0,0"))
                     (rule "qeq_literals" (formula "17") (term "0"))
                      (builtin "One Step Simplification" (formula "17"))
                     (rule "true_left" (formula "17"))
                     (rule "inEqSimp_exactShadow3" (formula "17") (ifseqformula "31"))
                     (rule "polySimp_rightDist" (formula "17") (term "0,0"))
                     (rule "polySimp_mulLiterals" (formula "17") (term "1,0,0"))
                     (rule "mul_literals" (formula "17") (term "0,0,0"))
                     (rule "polySimp_addComm1" (formula "17") (term "0"))
                     (rule "add_literals" (formula "17") (term "0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "17"))
                     (rule "mul_literals" (formula "17") (term "1"))
                     (rule "inEqSimp_subsumption6" (formula "17") (ifseqformula "44"))
                     (rule "times_zero_1" (formula "17") (term "1,1,0"))
                     (rule "greater_literals" (formula "17") (term "0,0"))
                      (builtin "One Step Simplification" (formula "17"))
                     (rule "leq_literals" (formula "17") (term "0"))
                      (builtin "One Step Simplification" (formula "17"))
                     (rule "true_left" (formula "17"))
                     (rule "inEqSimp_exactShadow3" (formula "30") (ifseqformula "44"))
                     (rule "times_zero_1" (formula "30") (term "0,0"))
                     (rule "add_zero_left" (formula "30") (term "0"))
                     (rule "inEqSimp_sepNegMonomial1" (formula "30"))
                     (rule "polySimp_mulLiterals" (formula "30") (term "0"))
                     (rule "elimGcdLeq_antec" (formula "30") (inst "elimGcdRightDiv=Z(7(2(1(#))))") (inst "elimGcdLeftDiv=l_0") (inst "elimGcd=Z(6(5(2(#))))"))
                     (rule "polySimp_mulLiterals" (formula "30") (term "1,0,1,0"))
                     (rule "mul_literals" (formula "30") (term "0,1,0,0,0,0,1,0"))
                     (rule "leq_literals" (formula "30") (term "0,0"))
                      (builtin "One Step Simplification" (formula "30"))
                     (rule "neg_literal" (formula "30") (term "0,0,0,0,0,0"))
                     (rule "mul_literals" (formula "30") (term "1,0,0,0,0,0"))
                     (rule "polySimp_addLiterals" (formula "30") (term "0,0,0,0"))
                     (rule "add_literals" (formula "30") (term "0,0,0,0"))
                     (rule "polySimp_pullOutFactor0b" (formula "30") (term "0,0"))
                     (rule "add_literals" (formula "30") (term "1,1,0,0"))
                     (rule "times_zero_1" (formula "30") (term "1,0,0"))
                     (rule "add_literals" (formula "30") (term "0,0"))
                     (rule "qeq_literals" (formula "30") (term "0"))
                      (builtin "One Step Simplification" (formula "30"))
                     (rule "Definition_axiom_for_bufferLen_in_de_wiesler_Buffers" (formula "8") (term "0,2,0"))
                     (rule "Class_invariant_axiom_for_de_wiesler_Classifier" (formula "22"))
                     (rule "andLeft" (formula "22"))
                     (rule "notLeft" (formula "22"))
                     (rule "notLeft" (formula "22"))
                     (rule "replace_known_right" (formula "4") (term "0") (ifseqformula "57"))
                      (builtin "One Step Simplification" (formula "4"))
                     (rule "replace_known_right" (formula "3") (term "0") (ifseqformula "58"))
                      (builtin "One Step Simplification" (formula "3"))
                     (rule "nnf_imp2or" (formula "25") (term "0"))
                     (rule "nnf_imp2or" (formula "41") (term "0"))
                     (rule "Contract_axiom_for_isSortedSlice_in_Functions" (formula "56") (term "0"))
                     (rule "wellFormedStorePrimitiveArray" (formula "56") (term "1,0"))
                     (rule "wellFormedAnon" (formula "56") (term "1,0"))
                     (rule "replace_known_left" (formula "56") (term "0,1,0") (ifseqformula "13"))
                      (builtin "One Step Simplification" (formula "56") (ifInst ""  (formula "76")) (ifInst ""  (formula "12")) (ifInst ""  (formula "57")))
                     (rule "Definition_axiom_for_isSortedSlice_in_de_wiesler_Functions" (formula "57") (term "0") (inst "i=i"))
                      (builtin "One Step Simplification" (formula "57"))
                     (rule "expand_inInt" (formula "57") (term "1,0,0"))
                     (rule "replace_int_MAX" (formula "57") (term "1,0,1,0,0"))
                     (rule "replace_int_MIN" (formula "57") (term "0,1,1,0,0"))
                     (rule "translateJavaAddInt" (formula "57") (term "0,2,1,1,0"))
                     (rule "translateJavaSubInt" (formula "57") (term "1,1,0,0,0"))
                     (rule "polySimp_elimSub" (formula "57") (term "1,1,0,0,0"))
                     (rule "mul_literals" (formula "57") (term "1,1,1,0,0,0"))
                     (rule "polySimp_addComm0" (formula "57") (term "0,2,1,1,0"))
                     (rule "polySimp_addComm1" (formula "57") (term "1,1,0,0,0"))
                     (rule "add_literals" (formula "57") (term "0,1,1,0,0,0"))
                     (rule "add_zero_left" (formula "57") (term "1,1,0,0,0"))
                     (rule "inEqSimp_ltToLeq" (formula "57") (term "1,0,0,0"))
                     (rule "polySimp_mulComm0" (formula "57") (term "1,0,0,1,0,0,0"))
                     (rule "inEqSimp_commuteLeq" (formula "57") (term "0,0,0,0"))
                     (rule "inEqSimp_commuteLeq" (formula "57") (term "1,1,0,0"))
                     (rule "inEqSimp_commuteLeq" (formula "57") (term "1,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "57") (term "1,0,0,0"))
                     (rule "polySimp_mulComm0" (formula "57") (term "1,1,0,0,0"))
                     (rule "polySimp_rightDist" (formula "57") (term "1,1,0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "57") (term "1,1,1,0,0,0"))
                     (rule "mul_literals" (formula "57") (term "0,1,1,0,0,0"))
                     (rule "polySimp_elimOne" (formula "57") (term "1,1,1,0,0,0"))
                     (rule "Contract_axiom_for_isSortedSlice_in_Functions" (formula "9") (term "0"))
                     (rule "wellFormedAnon" (formula "9") (term "1,0"))
                     (rule "replace_known_right" (formula "9") (term "0,0,0") (ifseqformula "77"))
                      (builtin "One Step Simplification" (formula "9") (ifInst ""  (formula "14")) (ifInst ""  (formula "13")) (ifInst ""  (formula "10")))
                     (rule "Definition_axiom_for_isSortedSlice_in_de_wiesler_Functions" (formula "10") (term "0") (inst "i=i"))
                      (builtin "One Step Simplification" (formula "10"))
                     (rule "expand_inInt" (formula "10") (term "1,0,0"))
                     (rule "replace_int_MAX" (formula "10") (term "1,0,1,0,0"))
                     (rule "replace_int_MIN" (formula "10") (term "0,1,1,0,0"))
                     (rule "translateJavaAddInt" (formula "10") (term "0,2,1,1,0"))
                     (rule "translateJavaSubInt" (formula "10") (term "1,1,0,0,0"))
                     (rule "polySimp_elimSub" (formula "10") (term "1,1,0,0,0"))
                     (rule "mul_literals" (formula "10") (term "1,1,1,0,0,0"))
                     (rule "polySimp_addComm0" (formula "10") (term "0,2,1,1,0"))
                     (rule "polySimp_addComm0" (formula "10") (term "1,1,0,0,0"))
                     (rule "inEqSimp_ltToLeq" (formula "10") (term "1,0,0,0"))
                     (rule "polySimp_rightDist" (formula "10") (term "1,0,0,1,0,0,0"))
                     (rule "mul_literals" (formula "10") (term "0,1,0,0,1,0,0,0"))
                     (rule "polySimp_addAssoc" (formula "10") (term "0,0,1,0,0,0"))
                     (rule "add_literals" (formula "10") (term "0,0,0,1,0,0,0"))
                     (rule "inEqSimp_commuteLeq" (formula "10") (term "0,0,0,0"))
                     (rule "inEqSimp_commuteLeq" (formula "10") (term "1,1,0,0"))
                     (rule "inEqSimp_commuteLeq" (formula "10") (term "1,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "1,0,0,0"))
                     (rule "polySimp_mulComm0" (formula "10") (term "1,1,0,0,0"))
                     (rule "polySimp_rightDist" (formula "10") (term "1,1,0,0,0"))
                     (rule "mul_literals" (formula "10") (term "0,1,1,0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "10") (term "1,1,1,0,0,0"))
                     (rule "polySimp_elimOne" (formula "10") (term "1,1,1,0,0,0"))
                     (rule "Class_invariant_axiom_for_de_wiesler_Classifier" (formula "80"))
                     (rule "replace_known_right" (formula "80") (term "0,1") (ifseqformula "59"))
                      (builtin "One Step Simplification" (formula "80") (ifInst ""  (formula "60")))
                     (rule "closeTrue" (formula "80"))
                  )
                  (branch "Case 2"
                      (builtin "One Step Simplification" (formula "1"))
                      (builtin "One Step Simplification" (formula "70"))
                     (rule "closeTrue" (formula "70"))
                  )
               )
               (branch "Case 2"
                  (rule "impRight" (formula "69"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "closeFalse" (formula "1"))
               )
            )
         )
      )
      (branch "Null Reference (x_arr = null)"
          (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "60")))
         (rule "closeFalse" (formula "1"))
      )
      (branch "Index Out of Bounds (x_arr != null, but x Out of Bounds!)"
          (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "60")))
          (builtin "One Step Simplification" (formula "63"))
         (rule "false_right" (formula "63"))
         (rule "polySimp_homoEq" (formula "10") (term "1,0"))
         (rule "polySimp_homoEq" (formula "10") (term "0,1,0,1,0,1,0"))
         (rule "polySimp_mulComm0" (formula "10") (term "1,0,1,0"))
         (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,1,1,1,0,1,0"))
         (rule "polySimp_rightDist" (formula "10") (term "1,0,0,1,1,1,0,1,0"))
         (rule "mul_literals" (formula "10") (term "0,1,0,0,1,1,1,0,1,0"))
         (rule "polySimp_rightDist" (formula "10") (term "1,0,1,0"))
         (rule "polySimp_mulAssoc" (formula "10") (term "0,1,0,1,0"))
         (rule "polySimp_mulComm0" (formula "10") (term "0,0,1,0,1,0"))
         (rule "polySimp_mulLiterals" (formula "10") (term "0,1,0,1,0"))
         (rule "polySimp_elimOne" (formula "10") (term "0,1,0,1,0"))
         (rule "polySimp_addAssoc" (formula "10") (term "0,0,0,1,1,0,1,0"))
         (rule "polySimp_addComm0" (formula "10") (term "0,0,0,0,1,1,0,1,0"))
         (rule "polySimp_addAssoc" (formula "10") (term "0,1,0"))
         (rule "inEqSimp_ltRight" (formula "43"))
         (rule "polySimp_mulComm0" (formula "1") (term "0,0"))
         (rule "polySimp_addComm0" (formula "1") (term "0"))
         (rule "inEqSimp_ltToLeq" (formula "10") (term "0,0,0,0,0"))
         (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,0,0,0,0,0"))
         (rule "inEqSimp_ltToLeq" (formula "7") (term "0"))
         (rule "add_zero_right" (formula "7") (term "0,0"))
         (rule "polySimp_mulComm0" (formula "7") (term "1,0,0"))
         (rule "inEqSimp_ltToLeq" (formula "11") (term "0,0,0,0,0"))
         (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0,0,0,0,0"))
         (rule "inEqSimp_ltToLeq" (formula "2") (term "1"))
         (rule "times_zero_1" (formula "2") (term "1,0,0,1"))
         (rule "add_literals" (formula "2") (term "0,0,1"))
         (rule "inEqSimp_commuteLeq" (formula "2") (term "0"))
         (rule "inEqSimp_homoInEq0" (formula "5") (term "0,0,0"))
         (rule "times_zero_2" (formula "5") (term "1,0,0,0,0"))
         (rule "add_zero_right" (formula "5") (term "0,0,0,0"))
         (rule "inEqSimp_homoInEq1" (formula "31"))
         (rule "polySimp_addComm1" (formula "31") (term "0"))
         (rule "applyEq" (formula "2") (term "0,0") (ifseqformula "38"))
         (rule "applyEq" (formula "2") (term "1,0,1") (ifseqformula "38"))
         (rule "polySimp_sepNegMonomial" (formula "11") (term "1,0"))
         (rule "polySimp_mulLiterals" (formula "11") (term "0,1,0"))
         (rule "polySimp_elimOne" (formula "11") (term "0,1,0"))
         (rule "polySimp_sepNegMonomial" (formula "11") (term "0,0,1,0"))
         (rule "polySimp_mulLiterals" (formula "11") (term "0,0,0,1,0"))
         (rule "polySimp_elimOne" (formula "11") (term "0,0,0,1,0"))
         (rule "inEqSimp_sepNegMonomial1" (formula "1"))
         (rule "polySimp_mulLiterals" (formula "1") (term "0"))
         (rule "polySimp_elimOne" (formula "1") (term "0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "0,0,0,0,0"))
         (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,0,0,0"))
         (rule "polySimp_rightDist" (formula "10") (term "1,0,0,0,0,0"))
         (rule "polySimp_mulLiterals" (formula "10") (term "1,1,0,0,0,0,0"))
         (rule "mul_literals" (formula "10") (term "0,1,0,0,0,0,0"))
         (rule "polySimp_elimOne" (formula "10") (term "1,1,0,0,0,0,0"))
         (rule "inEqSimp_sepNegMonomial0" (formula "7") (term "0"))
         (rule "polySimp_mulLiterals" (formula "7") (term "0,0"))
         (rule "polySimp_elimOne" (formula "7") (term "0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,0,0,0,0"))
         (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0,0,0"))
         (rule "polySimp_rightDist" (formula "11") (term "1,0,0,0,0,0"))
         (rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,0,0,0,0"))
         (rule "mul_literals" (formula "11") (term "0,1,0,0,0,0,0"))
         (rule "polySimp_elimOne" (formula "11") (term "1,1,0,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "5") (term "0,0,0"))
         (rule "mul_literals" (formula "5") (term "1,0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "31"))
         (rule "polySimp_mulComm0" (formula "31") (term "1"))
         (rule "polySimp_rightDist" (formula "31") (term "1"))
         (rule "polySimp_mulLiterals" (formula "31") (term "1,1"))
         (rule "mul_literals" (formula "31") (term "0,1"))
         (rule "polySimp_elimOne" (formula "31") (term "1,1"))
         (rule "inEqSimp_sepPosMonomial0" (formula "2") (term "1"))
         (rule "mul_literals" (formula "2") (term "1,1"))
         (rule "inEqSimp_subsumption1" (formula "5") (term "1,0,0") (ifseqformula "4"))
         (rule "inEqSimp_homoInEq0" (formula "5") (term "0,1,0,0"))
         (rule "polySimp_mulComm0" (formula "5") (term "1,0,0,1,0,0"))
         (rule "polySimp_rightDist" (formula "5") (term "1,0,0,1,0,0"))
         (rule "mul_literals" (formula "5") (term "0,1,0,0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "5") (term "0,0,1,0,0"))
         (rule "polySimp_addComm0" (formula "5") (term "0,0,0,1,0,0"))
         (rule "polySimp_pullOutFactor1b" (formula "5") (term "0,0,1,0,0"))
         (rule "add_literals" (formula "5") (term "1,1,0,0,1,0,0"))
         (rule "times_zero_1" (formula "5") (term "1,0,0,1,0,0"))
         (rule "add_zero_right" (formula "5") (term "0,0,1,0,0"))
         (rule "qeq_literals" (formula "5") (term "0,1,0,0"))
          (builtin "One Step Simplification" (formula "5"))
         (rule "inEqSimp_contradInEq0" (formula "2") (term "0") (ifseqformula "31"))
         (rule "inEqSimp_homoInEq1" (formula "2") (term "0,0"))
         (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,0"))
         (rule "polySimp_rightDist" (formula "2") (term "1,0,0,0"))
         (rule "mul_literals" (formula "2") (term "0,1,0,0,0"))
         (rule "polySimp_addAssoc" (formula "2") (term "0,0,0"))
         (rule "polySimp_addComm0" (formula "2") (term "0,0,0,0"))
         (rule "polySimp_pullOutFactor1b" (formula "2") (term "0,0,0"))
         (rule "add_literals" (formula "2") (term "1,1,0,0,0"))
         (rule "times_zero_1" (formula "2") (term "1,0,0,0"))
         (rule "add_literals" (formula "2") (term "0,0,0"))
         (rule "leq_literals" (formula "2") (term "0,0"))
          (builtin "One Step Simplification" (formula "2"))
         (rule "inEqSimp_subsumption1" (formula "35") (ifseqformula "36"))
         (rule "leq_literals" (formula "35") (term "0"))
          (builtin "One Step Simplification" (formula "35"))
         (rule "true_left" (formula "35"))
         (rule "inEqSimp_subsumption1" (formula "29") (ifseqformula "30"))
         (rule "leq_literals" (formula "29") (term "0"))
          (builtin "One Step Simplification" (formula "29"))
         (rule "true_left" (formula "29"))
         (rule "inEqSimp_subsumption1" (formula "18") (ifseqformula "31"))
         (rule "leq_literals" (formula "18") (term "0"))
          (builtin "One Step Simplification" (formula "18"))
         (rule "true_left" (formula "18"))
         (rule "inEqSimp_contradInEq0" (formula "6") (term "0,0") (ifseqformula "2"))
         (rule "qeq_literals" (formula "6") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "6"))
         (rule "applyEqReverse" (formula "7") (term "0,0,1") (ifseqformula "6"))
         (rule "hideAuxiliaryEq" (formula "6"))
         (rule "inEqSimp_antiSymm" (formula "4") (ifseqformula "1"))
         (rule "applyEq" (formula "11") (term "2,1,0,2,0,1,0") (ifseqformula "4"))
         (rule "applyEq" (formula "10") (term "2,1,0,0,1,0") (ifseqformula "4"))
         (rule "applyEq" (formula "5") (term "0") (ifseqformula "4"))
         (rule "inEqSimp_homoInEq1" (formula "5"))
         (rule "polySimp_pullOutFactor1" (formula "5") (term "0"))
         (rule "add_literals" (formula "5") (term "1,0"))
         (rule "times_zero_1" (formula "5") (term "0"))
         (rule "leq_literals" (formula "5"))
         (rule "true_left" (formula "5"))
         (rule "applyEq" (formula "28") (term "0") (ifseqformula "4"))
         (rule "inEqSimp_homoInEq0" (formula "28"))
         (rule "polySimp_addComm1" (formula "28") (term "0"))
         (rule "applyEq" (formula "8") (term "2,1,0,0") (ifseqformula "4"))
         (rule "applyEq" (formula "2") (term "0") (ifseqformula "4"))
         (rule "applyEq" (formula "1") (term "0") (ifseqformula "4"))
         (rule "inEqSimp_homoInEq0" (formula "1"))
         (rule "polySimp_pullOutFactor1" (formula "1") (term "0"))
         (rule "add_literals" (formula "1") (term "1,0"))
         (rule "times_zero_1" (formula "1") (term "0"))
         (rule "qeq_literals" (formula "1"))
         (rule "true_left" (formula "1"))
         (rule "applyEq" (formula "8") (term "1,1,0,0,0,0,0") (ifseqformula "3"))
         (rule "applyEq" (formula "33") (term "1") (ifseqformula "3"))
         (rule "applyEq" (formula "9") (term "2,1,0,1,1,1,0") (ifseqformula "3"))
         (rule "inEqSimp_sepPosMonomial1" (formula "27"))
         (rule "polySimp_mulComm0" (formula "27") (term "1"))
         (rule "polySimp_rightDist" (formula "27") (term "1"))
         (rule "mul_literals" (formula "27") (term "0,1"))
         (rule "polySimp_mulLiterals" (formula "27") (term "1,1"))
         (rule "polySimp_elimOne" (formula "27") (term "1,1"))
         (rule "inEqSimp_contradInEq0" (formula "4") (term "0,0") (ifseqformula "1"))
         (rule "qeq_literals" (formula "4") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "4"))
         (rule "applyEqReverse" (formula "5") (term "1,1,1") (ifseqformula "4"))
         (rule "hideAuxiliaryEq" (formula "4"))
         (rule "inEqSimp_commuteGeq" (formula "4") (term "1,1"))
         (rule "inEqSimp_contradInEq0" (formula "2") (ifseqformula "1"))
         (rule "qeq_literals" (formula "2") (term "0"))
          (builtin "One Step Simplification" (formula "2"))
         (rule "closeFalse" (formula "2"))
      )
   )
)
)
}
