\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Thu Jun 02 20:22:14 CEST 2022
[NewSMT]NoTypeHierarchy=false
[Labels]UseOriginLabels=true
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[NewSMT]Presburger=false
[SMTSettings]invariantForall=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[Choice]DefaultChoices=JavaCard-JavaCard\\:on , Strings-Strings\\:on , assertions-assertions\\:safe , bigint-bigint\\:on , finalFields-finalFields\\:immutable , floatRules-floatRules\\:strictfpOnly , initialisation-initialisation\\:disableStaticInitialisation , intRules-intRules\\:arithmeticSemanticsCheckingOF , integerSimplificationRules-integerSimplificationRules\\:full , javaLoopTreatment-javaLoopTreatment\\:efficient , mergeGenerateIsWeakeningGoal-mergeGenerateIsWeakeningGoal\\:off , methodExpansion-methodExpansion\\:modularOnly , modelFields-modelFields\\:treatAsAxiom , moreSeqRules-moreSeqRules\\:on , permissions-permissions\\:off , programRules-programRules\\:Java , reach-reach\\:on , runtimeExceptions-runtimeExceptions\\:ban , sequences-sequences\\:on , wdChecks-wdChecks\\:off , wdOperator-wdOperator\\:L
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_SCOPE_INV_TACLET
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_DEF_OPS
[SMTSettings]SelectedTaclets=
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[Strategy]MaximumNumberOfAutomaticApplications=10000
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_DELAYED
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]MPS_OPTIONS_KEY=MPS_MERGE
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[Strategy]Timeout=-1
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_OFF
[SMTSettings]useUninterpretedMultiplication=true
[NewSMT]sqrtSMTTranslation=SMT
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT_INTERNAL
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[NewSMT]identifier=OPEN
[SMTSettings]maxGenericSorts=2
[StrategyProperty]OSS_OPTIONS_KEY=OSS_ON
[NewSMT]Axiomatisations=false
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
[SMTSettings]integersMinimum=-2147483645
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]integersMaximum=2147483645
"
}

\javaSource "../../src";

\proofObligation "#Proof Obligation Settings
#Thu Jun 02 20:22:14 CEST 2022
contract=de.wiesler.Buffers[de.wiesler.Buffers\\:\\:flush(int,[I,int,int)].JML normal_behavior operation contract.0
name=de.wiesler.Buffers[de.wiesler.Buffers\\:\\:flush(int,[I,int,int)].JML normal_behavior operation contract.0
class=de.uka.ilkd.key.proof.init.FunctionalOperationContractPO
";

\proof {
(keyLog "0" (keyUser "Julian" ) (keyVersion "e1a85b31e7"))

(autoModeTime "846")

(branch "dummy ID"
 (builtin "One Step Simplification" (formula "1") (newnames "heapAtPre_0,o,f"))
(rule "expand_inInt" (formula "1") (term "0,0,0,1,0,0,0"))
(rule "expand_inInt" (formula "1") (term "1,0,1,0,0,0"))
(rule "expand_inInt" (formula "1") (term "1,1,0,0,0"))
(rule "replace_int_MAX" (formula "1") (term "1,0,0,0,0,1,0,0,0"))
(rule "replace_int_MIN" (formula "1") (term "0,1,0,0,0,1,0,0,0"))
(rule "replace_int_MAX" (formula "1") (term "1,0,1,0,1,0,0,0"))
(rule "replace_int_MIN" (formula "1") (term "0,1,1,0,1,0,0,0"))
(rule "replace_int_MIN" (formula "1") (term "0,1,1,1,0,0,0"))
(rule "replace_int_MAX" (formula "1") (term "1,0,1,1,0,0,0"))
(rule "impRight" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "3"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "4"))
(rule "andLeft" (formula "6"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "3"))
(rule "notLeft" (formula "7"))
(rule "andLeft" (formula "7"))
(rule "andLeft" (formula "9"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "4"))
(rule "andLeft" (formula "6"))
(rule "andLeft" (formula "12"))
(rule "andLeft" (formula "14"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "6"))
(rule "andLeft" (formula "5"))
(rule "andLeft" (formula "15"))
(rule "andLeft" (formula "19"))
(rule "notLeft" (formula "2"))
(rule "andLeft" (formula "4"))
(rule "andLeft" (formula "19"))
(rule "andLeft" (formula "21"))
(rule "andLeft" (formula "19"))
(rule "translateJavaSubInt" (formula "22") (term "0"))
(rule "replace_known_right" (formula "6") (term "0") (ifseqformula "25"))
 (builtin "One Step Simplification" (formula "6"))
(rule "polySimp_elimSub" (formula "22") (term "0"))
(rule "disjointDefinition" (formula "17"))
 (builtin "One Step Simplification" (formula "17"))
(rule "notLeft" (formula "17"))
(rule "eqSymm" (formula "23"))
(rule "disjointDefinition" (formula "15"))
 (builtin "One Step Simplification" (formula "15"))
(rule "notLeft" (formula "15"))
(rule "eqSymm" (formula "22"))
(rule "disjointDefinition" (formula "15"))
 (builtin "One Step Simplification" (formula "15"))
(rule "notLeft" (formula "15"))
(rule "eqSymm" (formula "21"))
(rule "inEqSimp_commuteLeq" (formula "13"))
(rule "inEqSimp_commuteLeq" (formula "10"))
(rule "inEqSimp_commuteLeq" (formula "8"))
(rule "inEqSimp_commuteLeq" (formula "5"))
(rule "inEqSimp_commuteLeq" (formula "18"))
(rule "inEqSimp_commuteLeq" (formula "16"))
(rule "assignment" (formula "26") (term "1"))
 (builtin "One Step Simplification" (formula "26"))
(rule "methodBodyExpand" (formula "26") (term "1") (newnames "heapBefore_flush,savedHeapBefore_flush"))
 (builtin "One Step Simplification" (formula "26"))
(rule "variableDeclarationAssign" (formula "26") (term "1"))
(rule "variableDeclaration" (formula "26") (term "1") (newnames "buffer_offset"))
(rule "assignmentMultiplicationInt" (formula "26") (term "1"))
(branch "Overflow check"
    (builtin "One Step Simplification" (formula "26"))
   (rule "expand_inInt" (formula "26"))
   (rule "replace_int_MIN" (formula "26") (term "0,1"))
   (rule "replace_int_MAX" (formula "26") (term "1,0"))
   (rule "inEqSimp_ltToLeq" (formula "14"))
   (rule "polySimp_mulComm0" (formula "14") (term "1,0,0"))
   (rule "polySimp_addComm1" (formula "14") (term "0"))
   (rule "inEqSimp_commuteLeq" (formula "26") (term "1"))
   (rule "inEqSimp_homoInEq1" (formula "19"))
   (rule "polySimp_mulComm0" (formula "19") (term "1,0"))
   (rule "polySimp_rightDist" (formula "19") (term "1,0"))
   (rule "polySimp_mulLiterals" (formula "19") (term "1,1,0"))
   (rule "polySimp_elimOne" (formula "19") (term "1,1,0"))
   (rule "polySimp_mulComm0" (formula "19") (term "0,1,0"))
   (rule "polySimp_addAssoc" (formula "19") (term "0"))
   (rule "inEqSimp_sepNegMonomial0" (formula "14"))
   (rule "polySimp_mulLiterals" (formula "14") (term "0"))
   (rule "polySimp_elimOne" (formula "14") (term "0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "19"))
   (rule "polySimp_mulComm0" (formula "19") (term "1"))
   (rule "polySimp_rightDist" (formula "19") (term "1"))
   (rule "mul_literals" (formula "19") (term "0,1"))
   (rule "polySimp_mulLiterals" (formula "19") (term "1,1"))
   (rule "polySimp_elimOne" (formula "19") (term "1,1"))
   (rule "inEqSimp_subsumption6" (formula "26") (term "1") (ifseqformula "13"))
   (rule "times_zero_1" (formula "26") (term "1,1,0,1"))
   (rule "greater_literals" (formula "26") (term "0,0,1"))
    (builtin "One Step Simplification" (formula "26"))
   (rule "leq_literals" (formula "26") (term "0,1"))
    (builtin "One Step Simplification" (formula "26"))
   (rule "inEqSimp_leqRight" (formula "26"))
   (rule "mul_literals" (formula "1") (term "1,0,0"))
   (rule "add_literals" (formula "1") (term "0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "1"))
   (rule "mul_literals" (formula "1") (term "1"))
   (rule "inEqSimp_subsumption1" (formula "6") (ifseqformula "14"))
   (rule "leq_literals" (formula "6") (term "0"))
    (builtin "One Step Simplification" (formula "6"))
   (rule "true_left" (formula "6"))
   (rule "inEqSimp_subsumption0" (formula "17") (ifseqformula "19"))
   (rule "inEqSimp_homoInEq0" (formula "17") (term "0"))
   (rule "polySimp_mulComm0" (formula "17") (term "1,0,0"))
   (rule "polySimp_rightDist" (formula "17") (term "1,0,0"))
   (rule "mul_literals" (formula "17") (term "0,1,0,0"))
   (rule "polySimp_addAssoc" (formula "17") (term "0,0"))
   (rule "polySimp_addComm0" (formula "17") (term "0,0,0"))
   (rule "polySimp_pullOutFactor1b" (formula "17") (term "0,0"))
   (rule "add_literals" (formula "17") (term "1,1,0,0"))
   (rule "times_zero_1" (formula "17") (term "1,0,0"))
   (rule "add_literals" (formula "17") (term "0,0"))
   (rule "qeq_literals" (formula "17") (term "0"))
    (builtin "One Step Simplification" (formula "17"))
   (rule "true_left" (formula "17"))
   (rule "inEqSimp_subsumption1" (formula "8") (ifseqformula "16"))
   (rule "leq_literals" (formula "8") (term "0"))
    (builtin "One Step Simplification" (formula "8"))
   (rule "true_left" (formula "8"))
   (rule "elimGcdGeq_antec" (formula "1") (inst "elimGcdRightDiv=Z(8(0(6(8(8(3(8(#))))))))") (inst "elimGcdLeftDiv=bucket") (inst "elimGcd=Z(6(5(2(#))))"))
   (rule "mul_literals" (formula "1") (term "0,1,0,0,0,0,1,0"))
   (rule "polySimp_mulLiterals" (formula "1") (term "1,0,1,0"))
   (rule "leq_literals" (formula "1") (term "0,0"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "mul_literals" (formula "1") (term "1,0,0,0,0,0"))
   (rule "polySimp_addLiterals" (formula "1") (term "0,0,0,0"))
   (rule "add_zero_right" (formula "1") (term "0,0,0,0"))
   (rule "polySimp_pullOutFactor0b" (formula "1") (term "0,0"))
   (rule "add_literals" (formula "1") (term "1,1,0,0"))
   (rule "times_zero_1" (formula "1") (term "1,0,0"))
   (rule "add_literals" (formula "1") (term "0,0"))
   (rule "leq_literals" (formula "1") (term "0"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "inEqSimp_subsumption1" (formula "12") (ifseqformula "1"))
   (rule "leq_literals" (formula "12") (term "0"))
    (builtin "One Step Simplification" (formula "12"))
   (rule "true_left" (formula "12"))
   (rule "inEqSimp_exactShadow3" (formula "14") (ifseqformula "16"))
   (rule "times_zero_1" (formula "14") (term "0,0"))
   (rule "add_zero_left" (formula "14") (term "0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "14"))
   (rule "mul_literals" (formula "14") (term "1"))
   (rule "inEqSimp_subsumption1" (formula "9") (ifseqformula "14"))
   (rule "leq_literals" (formula "9") (term "0"))
    (builtin "One Step Simplification" (formula "9"))
   (rule "true_left" (formula "9"))
   (rule "Contract_axiom_for_bufferLen_in_Buffers" (formula "12") (term "0"))
    (builtin "One Step Simplification" (formula "12") (ifInst ""  (formula "10")) (ifInst ""  (formula "2")) (ifInst ""  (formula "3")) (ifInst ""  (formula "22")) (ifInst ""  (formula "10")) (ifInst ""  (formula "18")))
   (rule "inEqSimp_ltToLeq" (formula "12") (term "1,0"))
   (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,1,0"))
   (rule "polySimp_addComm1" (formula "12") (term "0,1,0"))
   (rule "inEqSimp_commuteLeq" (formula "12") (term "0,0"))
   (rule "inEqSimp_commuteLeq" (formula "12") (term "0,1"))
   (rule "applyEq" (formula "12") (term "0,0,1") (ifseqformula "13"))
   (rule "qeq_literals" (formula "12") (term "0,1"))
    (builtin "One Step Simplification" (formula "12"))
   (rule "applyEq" (formula "12") (term "0,1") (ifseqformula "13"))
   (rule "leq_literals" (formula "12") (term "1"))
    (builtin "One Step Simplification" (formula "12"))
   (rule "true_left" (formula "12"))
   (rule "Class_invariant_axiom_for_de_wiesler_Buffers" (formula "10"))
   (rule "andLeft" (formula "10"))
   (rule "notLeft" (formula "11"))
   (rule "notLeft" (formula "10"))
   (rule "Definition_axiom_for_bufferLen_in_de_wiesler_Buffers" (formula "11") (term "0"))
   (rule "Free_class_invariant_axiom_for_de_wiesler_Buffers" (formula "16") (inst "b=b"))
    (builtin "One Step Simplification" (formula "16"))
   (rule "expand_inInt" (formula "16") (term "1,0,0,1"))
   (rule "replace_int_MIN" (formula "16") (term "0,1,1,0,0,1"))
   (rule "replace_int_MAX" (formula "16") (term "1,0,1,0,0,1"))
   (rule "andLeft" (formula "16"))
   (rule "andLeft" (formula "16"))
   (rule "andLeft" (formula "16"))
   (rule "andLeft" (formula "18"))
   (rule "andLeft" (formula "16"))
   (rule "notLeft" (formula "16"))
   (rule "translateJavaMulInt" (formula "16") (term "1"))
   (rule "mul_literals" (formula "16") (term "1"))
   (rule "eqSymm" (formula "21"))
   (rule "inEqSimp_ltToLeq" (formula "20") (term "1,0,0,0"))
   (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,1,0,0,0"))
   (rule "inEqSimp_commuteLeq" (formula "20") (term "0,0,0,0"))
   (rule "inEqSimp_commuteLeq" (formula "20") (term "0,1,0"))
   (rule "inEqSimp_commuteLeq" (formula "20") (term "1,1,0,0"))
   (rule "inEqSimp_commuteLeq" (formula "18"))
   (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "1,0,0,0"))
   (rule "polySimp_mulComm0" (formula "20") (term "1,1,0,0,0"))
   (rule "polySimp_rightDist" (formula "20") (term "1,1,0,0,0"))
   (rule "polySimp_mulLiterals" (formula "20") (term "1,1,1,0,0,0"))
   (rule "mul_literals" (formula "20") (term "0,1,1,0,0,0"))
   (rule "polySimp_elimOne" (formula "20") (term "1,1,1,0,0,0"))
   (rule "inEqSimp_exactShadow3" (formula "10") (ifseqformula "19"))
   (rule "polySimp_rightDist" (formula "10") (term "0,0"))
   (rule "mul_literals" (formula "10") (term "0,0,0"))
   (rule "polySimp_addComm1" (formula "10") (term "0"))
   (rule "add_literals" (formula "10") (term "0,0"))
   (rule "inEqSimp_sepNegMonomial1" (formula "10"))
   (rule "polySimp_mulLiterals" (formula "10") (term "0"))
   (rule "polySimp_elimOne" (formula "10") (term "0"))
   (rule "inEqSimp_subsumption0" (formula "5") (ifseqformula "10"))
   (rule "leq_literals" (formula "5") (term "0"))
    (builtin "One Step Simplification" (formula "5"))
   (rule "true_left" (formula "5"))
   (rule "inEqSimp_contradInEq1" (formula "9") (ifseqformula "1"))
   (rule "qeq_literals" (formula "9") (term "0"))
    (builtin "One Step Simplification" (formula "9"))
   (rule "closeFalse" (formula "9"))
)
(branch "Usage"
    (builtin "One Step Simplification" (formula "26"))
   (rule "translateJavaMulInt" (formula "26") (term "0,1,0"))
   (rule "methodCallUnfoldArguments" (formula "26") (term "1"))
   (rule "variableDeclarationAssign" (formula "26") (term "1"))
   (rule "variableDeclaration" (formula "26") (term "1") (newnames "var"))
   (rule "assignment_read_attribute_this_final" (formula "26"))
    (builtin "One Step Simplification" (formula "26"))
   (rule "variableDeclarationAssign" (formula "26") (term "1"))
   (rule "variableDeclaration" (formula "26") (term "1") (newnames "var_1"))
   (rule "assignment" (formula "26") (term "1"))
    (builtin "One Step Simplification" (formula "26"))
   (rule "variableDeclarationAssign" (formula "26") (term "1"))
   (rule "variableDeclaration" (formula "26") (term "1") (newnames "var_2"))
   (rule "assignment" (formula "26") (term "1"))
    (builtin "One Step Simplification" (formula "26"))
   (rule "variableDeclarationAssign" (formula "26") (term "1"))
   (rule "variableDeclaration" (formula "26") (term "1") (newnames "var_3"))
   (rule "assignment" (formula "26") (term "1"))
    (builtin "One Step Simplification" (formula "26"))
   (rule "variableDeclarationAssign" (formula "26") (term "1"))
   (rule "variableDeclaration" (formula "26") (term "1") (newnames "var_4"))
   (rule "assignment" (formula "26") (term "1"))
    (builtin "One Step Simplification" (formula "26"))
    (builtin "Use Operation Contract" (formula "26") (newnames "heapBefore_copy_nonoverlapping,exc_129,heapAfter_copy_nonoverlapping,anon_heap_copy_nonoverlapping") (contract "de.wiesler.Functions[de.wiesler.Functions::copy_nonoverlapping([I,int,[I,int,int)].JML normal_behavior operation contract.0"))
   (branch "Post (copy_nonoverlapping)"
       (builtin "One Step Simplification" (formula "22"))
       (builtin "One Step Simplification" (formula "28"))
      (rule "expand_inInt" (formula "22") (term "1,0,0,0,1,0,1"))
      (rule "expand_inInt" (formula "22") (term "0,0,1,1,0,1"))
      (rule "replace_int_MIN" (formula "22") (term "0,1,1,0,0,0,1,0,1"))
      (rule "replace_int_MAX" (formula "22") (term "1,0,1,0,0,0,1,0,1"))
      (rule "replace_int_MAX" (formula "22") (term "1,0,0,0,1,1,0,1"))
      (rule "replace_int_MIN" (formula "22") (term "0,1,0,0,1,1,0,1"))
      (rule "andLeft" (formula "22"))
      (rule "andLeft" (formula "23"))
      (rule "andLeft" (formula "23"))
      (rule "andLeft" (formula "23"))
      (rule "translateJavaSubInt" (formula "22") (term "2,1,0"))
      (rule "translateJavaAddInt" (formula "23") (term "0,2,0,1,0"))
      (rule "translateJavaAddInt" (formula "23") (term "0,2,1,1,0"))
      (rule "translateJavaAddInt" (formula "24") (term "3,1,1,0"))
      (rule "translateJavaAddInt" (formula "24") (term "3,0,1,0"))
      (rule "translateJavaAddInt" (formula "22") (term "0,2,1,0"))
      (rule "eqSymm" (formula "24") (term "1,0"))
      (rule "polySimp_elimSub" (formula "22") (term "2,1,0"))
      (rule "mul_literals" (formula "22") (term "1,2,1,0"))
      (rule "polySimp_addLiterals" (formula "22") (term "2,1,0"))
      (rule "polySimp_addComm0" (formula "24") (term "3,0,1,0"))
      (rule "polySimp_addComm0" (formula "24") (term "3,1,1,0"))
      (rule "polySimp_addComm0" (formula "22") (term "2,1,0"))
      (rule "inEqSimp_commuteLeq" (formula "24") (term "1,0,0"))
      (rule "inEqSimp_commuteLeq" (formula "23") (term "0,0,0,0"))
      (rule "inEqSimp_commuteLeq" (formula "23") (term "1,1,0,0"))
      (rule "blockEmpty" (formula "31") (term "1"))
      (rule "eval_order_array_access1" (formula "31") (term "1") (inst "#v0=x_arr"))
      (rule "variableDeclarationAssign" (formula "31") (term "1"))
      (rule "variableDeclaration" (formula "31") (term "1") (newnames "x_arr"))
      (rule "assignment_read_attribute_this_final" (formula "31"))
       (builtin "One Step Simplification" (formula "31"))
      (rule "assignment_to_primitive_array_component" (formula "31"))
      (branch "Normal Execution (x_arr != null)"
          (builtin "One Step Simplification" (formula "31"))
          (builtin "Block Contract (Internal)" (formula "31") (newnames "exc_130,heap_Before_BLOCK,savedHeap_Before_BLOCK,o,f"))
         (branch "Validity"
             (builtin "One Step Simplification" (formula "32"))
             (builtin "One Step Simplification" (formula "26") (ifInst ""  (formula "11")) (ifInst ""  (formula "3")) (ifInst ""  (formula "30")))
            (rule "andLeft" (formula "26"))
            (rule "eqSymm" (formula "33") (term "0,0,1,0,1"))
            (rule "dismissNonSelectedField" (formula "27") (term "0"))
            (rule "selectCreatedOfAnonAsFormulaEQ" (formula "27") (ifseqformula "22"))
            (rule "replace_known_left" (formula "27") (term "0") (ifseqformula "2"))
             (builtin "One Step Simplification" (formula "27"))
            (rule "true_left" (formula "27"))
            (rule "variableDeclarationAssign" (formula "32") (term "1"))
            (rule "variableDeclaration" (formula "32") (term "1") (newnames "exc_130_1"))
            (rule "assignment" (formula "32") (term "1"))
             (builtin "One Step Simplification" (formula "32"))
            (rule "emptyStatement" (formula "32") (term "1"))
             (builtin "One Step Simplification" (formula "32"))
            (rule "emptyStatement" (formula "32") (term "1"))
            (rule "commute_and" (formula "24") (term "0,0"))
            (rule "commute_and" (formula "23") (term "0,0,0"))
            (rule "commute_and" (formula "23") (term "1,0,0"))
            (rule "shift_paren_and" (formula "23") (term "0,0"))
            (rule "commute_and_2" (formula "23") (term "0,0,0"))
            (rule "tryEmpty" (formula "32") (term "1"))
            (rule "blockEmptyLabel" (formula "32") (term "1"))
            (rule "blockEmpty" (formula "32") (term "1"))
            (rule "methodCallEmpty" (formula "32") (term "1"))
            (rule "emptyModality" (formula "32") (term "1"))
            (rule "andRight" (formula "32"))
            (branch
                (builtin "One Step Simplification" (formula "32"))
               (rule "closeTrue" (formula "32"))
            )
            (branch
                (builtin "One Step Simplification" (formula "32"))
               (rule "closeTrue" (formula "32"))
            )
         )
         (branch "Precondition"
            (rule "andRight" (formula "31"))
            (branch
               (rule "andRight" (formula "31"))
               (branch
                   (builtin "One Step Simplification" (formula "31") (ifInst ""  (formula "11")))
                  (rule "closeTrue" (formula "31"))
               )
               (branch
                   (builtin "One Step Simplification" (formula "31"))
                  (rule "wellFormedStorePrimitiveArray" (formula "31"))
                  (rule "wellFormedAnonEQ" (formula "31") (ifseqformula "22"))
                  (rule "replace_known_left" (formula "31") (term "0") (ifseqformula "1"))
                   (builtin "One Step Simplification" (formula "31") (ifInst ""  (formula "21")))
                  (rule "closeTrue" (formula "31"))
               )
            )
            (branch
               (rule "andRight" (formula "31"))
               (branch
                  (rule "andRight" (formula "31"))
                  (branch
                      (builtin "One Step Simplification" (formula "31") (ifInst ""  (formula "29")))
                     (rule "closeTrue" (formula "31"))
                  )
                  (branch
                      (builtin "One Step Simplification" (formula "31"))
                     (rule "dismissNonSelectedField" (formula "31") (term "0"))
                     (rule "selectCreatedOfAnonAsFormulaEQ" (formula "31") (ifseqformula "22"))
                     (rule "orRight" (formula "31"))
                     (rule "close" (formula "31") (ifseqformula "2"))
                  )
               )
               (branch
                   (builtin "One Step Simplification" (formula "31") (ifInst ""  (formula "3")))
                  (rule "closeTrue" (formula "31"))
               )
            )
         )
         (branch "Usage"
             (builtin "One Step Simplification" (formula "32"))
             (builtin "One Step Simplification" (formula "26"))
            (rule "expand_inInt" (formula "26") (term "0,0,1"))
            (rule "replace_int_MAX" (formula "26") (term "1,0,0,0,1"))
            (rule "replace_int_MIN" (formula "26") (term "0,1,0,0,1"))
            (rule "andLeft" (formula "26"))
            (rule "andLeft" (formula "26"))
            (rule "eqSymm" (formula "28") (term "1,0"))
            (rule "translateJavaAddInt" (formula "28") (term "3,0,1,0"))
            (rule "replace_known_left" (formula "27") (term "0") (ifseqformula "26"))
             (builtin "One Step Simplification" (formula "27"))
            (rule "true_left" (formula "27"))
            (rule "polySimp_addComm0" (formula "27") (term "3,0,1,0"))
            (rule "inEqSimp_commuteLeq" (formula "27") (term "1,0,0"))
            (rule "commute_and" (formula "24") (term "0,0"))
            (rule "commute_and" (formula "23") (term "0,0,0"))
            (rule "commute_and" (formula "23") (term "1,0,0"))
            (rule "commute_and" (formula "27") (term "0,0"))
            (rule "shift_paren_and" (formula "23") (term "0,0"))
            (rule "commute_and_2" (formula "23") (term "0,0,0"))
            (rule "elim_double_block_2" (formula "33") (term "1"))
            (rule "ifUnfold" (formula "33") (term "1") (inst "#boolv=x"))
            (rule "variableDeclaration" (formula "33") (term "1") (newnames "x"))
            (rule "inequality_comparison_simple" (formula "33") (term "1"))
             (builtin "One Step Simplification" (formula "33"))
            (rule "replace_known_left" (formula "33") (term "0,0,1,0") (ifseqformula "26"))
             (builtin "One Step Simplification" (formula "33"))
            (rule "arrayLengthNotNegative" (formula "18") (term "0"))
            (rule "arrayLengthIsAShort" (formula "19") (term "0"))
            (rule "expand_inShort" (formula "19"))
            (rule "replace_short_MIN" (formula "19") (term "0,1"))
            (rule "replace_short_MAX" (formula "19") (term "1,0"))
            (rule "andLeft" (formula "19"))
            (rule "inEqSimp_commuteLeq" (formula "20"))
            (rule "ifSplit" (formula "36"))
            (branch "if x true"
                (builtin "One Step Simplification" (formula "37"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "closeFalse" (formula "1"))
            )
            (branch "if x false"
                (builtin "One Step Simplification" (formula "37"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "true_left" (formula "1"))
               (rule "blockEmpty" (formula "36") (term "1"))
               (rule "emptyStatement" (formula "36") (term "1"))
               (rule "methodCallEmpty" (formula "36") (term "1"))
               (rule "tryEmpty" (formula "36") (term "1"))
               (rule "emptyModality" (formula "36") (term "1"))
               (rule "andRight" (formula "36"))
               (branch
                   (builtin "One Step Simplification" (formula "36"))
                  (rule "inEqSimp_ltToLeq" (formula "14"))
                  (rule "polySimp_mulComm0" (formula "14") (term "1,0,0"))
                  (rule "polySimp_addComm1" (formula "14") (term "0"))
                  (rule "inEqSimp_ltToLeq" (formula "26") (term "0,0,0,0,0"))
                  (rule "mul_literals" (formula "26") (term "1,0,0,0,0,0,0,0"))
                  (rule "add_literals" (formula "26") (term "0,0,0,0,0,0,0"))
                  (rule "inEqSimp_homoInEq1" (formula "22"))
                  (rule "polySimp_mulComm0" (formula "22") (term "1,0"))
                  (rule "polySimp_rightDist" (formula "22") (term "1,0"))
                  (rule "polySimp_mulLiterals" (formula "22") (term "1,1,0"))
                  (rule "polySimp_elimOne" (formula "22") (term "1,1,0"))
                  (rule "polySimp_mulComm0" (formula "22") (term "0,1,0"))
                  (rule "polySimp_addAssoc" (formula "22") (term "0"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "14"))
                  (rule "polySimp_mulLiterals" (formula "14") (term "0"))
                  (rule "polySimp_elimOne" (formula "14") (term "0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "0,0,0,0,0"))
                  (rule "mul_literals" (formula "26") (term "1,0,0,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "22"))
                  (rule "polySimp_mulComm0" (formula "22") (term "1"))
                  (rule "polySimp_rightDist" (formula "22") (term "1"))
                  (rule "polySimp_mulLiterals" (formula "22") (term "1,1"))
                  (rule "mul_literals" (formula "22") (term "0,1"))
                  (rule "polySimp_elimOne" (formula "22") (term "1,1"))
                  (rule "inEqSimp_subsumption1" (formula "20") (ifseqformula "18"))
                  (rule "leq_literals" (formula "20") (term "0"))
                   (builtin "One Step Simplification" (formula "20"))
                  (rule "true_left" (formula "20"))
                  (rule "inEqSimp_subsumption1" (formula "8") (ifseqformula "16"))
                  (rule "leq_literals" (formula "8") (term "0"))
                   (builtin "One Step Simplification" (formula "8"))
                  (rule "true_left" (formula "8"))
                  (rule "inEqSimp_subsumption1" (formula "5") (ifseqformula "12"))
                  (rule "leq_literals" (formula "5") (term "0"))
                   (builtin "One Step Simplification" (formula "5"))
                  (rule "true_left" (formula "5"))
                  (rule "inEqSimp_subsumption0" (formula "15") (ifseqformula "19"))
                  (rule "inEqSimp_homoInEq0" (formula "15") (term "0"))
                  (rule "polySimp_mulComm0" (formula "15") (term "1,0,0"))
                  (rule "polySimp_rightDist" (formula "15") (term "1,0,0"))
                  (rule "mul_literals" (formula "15") (term "0,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "15") (term "0,0"))
                  (rule "polySimp_addComm0" (formula "15") (term "0,0,0"))
                  (rule "polySimp_pullOutFactor1b" (formula "15") (term "0,0"))
                  (rule "add_literals" (formula "15") (term "1,1,0,0"))
                  (rule "times_zero_1" (formula "15") (term "1,0,0"))
                  (rule "add_zero_right" (formula "15") (term "0,0"))
                  (rule "qeq_literals" (formula "15") (term "0"))
                   (builtin "One Step Simplification" (formula "15"))
                  (rule "true_left" (formula "15"))
                  (rule "inEqSimp_exactShadow3" (formula "17") (ifseqformula "16"))
                  (rule "polySimp_mulComm0" (formula "17") (term "0,0"))
                  (rule "polySimp_addComm0" (formula "17") (term "0"))
                  (rule "inEqSimp_sepNegMonomial1" (formula "17"))
                  (rule "polySimp_mulLiterals" (formula "17") (term "0"))
                  (rule "polySimp_elimOne" (formula "17") (term "0"))
                  (rule "inEqSimp_subsumption0" (formula "7") (ifseqformula "17"))
                  (rule "leq_literals" (formula "7") (term "0"))
                   (builtin "One Step Simplification" (formula "7"))
                  (rule "true_left" (formula "7"))
                  (rule "inEqSimp_exactShadow3" (formula "13") (ifseqformula "18"))
                  (rule "times_zero_1" (formula "13") (term "0,0"))
                  (rule "add_zero_left" (formula "13") (term "0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "13"))
                  (rule "mul_literals" (formula "13") (term "1"))
                  (rule "inEqSimp_subsumption1" (formula "7") (ifseqformula "13"))
                  (rule "leq_literals" (formula "7") (term "0"))
                   (builtin "One Step Simplification" (formula "7"))
                  (rule "true_left" (formula "7"))
                  (rule "inEqSimp_and_subsumption3" (formula "22") (term "0,0,0"))
                  (rule "leq_literals" (formula "22") (term "0,1,0,0,0,0"))
                   (builtin "One Step Simplification" (formula "22"))
                  (rule "nnf_imp2or" (formula "26") (term "0"))
                  (rule "nnf_imp2or" (formula "23") (term "0"))
                  (rule "nnf_imp2or" (formula "22") (term "0"))
                  (rule "nnf_notAnd" (formula "26") (term "0,0"))
                  (rule "inEqSimp_notLeq" (formula "26") (term "1,0,0"))
                  (rule "mul_literals" (formula "26") (term "1,0,0,1,0,0"))
                  (rule "add_literals" (formula "26") (term "0,0,1,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "26") (term "1,0,0"))
                  (rule "mul_literals" (formula "26") (term "1,1,0,0"))
                  (rule "inEqSimp_notGeq" (formula "26") (term "0,0,0"))
                  (rule "mul_literals" (formula "26") (term "1,0,0,0,0,0"))
                  (rule "add_literals" (formula "26") (term "0,0,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "0,0,0"))
                  (rule "mul_literals" (formula "26") (term "1,0,0,0"))
                  (rule "nnf_notAnd" (formula "23") (term "0,0"))
                  (rule "inEqSimp_notLeq" (formula "23") (term "1,0,0"))
                  (rule "mul_literals" (formula "23") (term "1,0,0,1,0,0"))
                  (rule "add_literals" (formula "23") (term "0,0,1,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "23") (term "1,0,0"))
                  (rule "mul_literals" (formula "23") (term "1,1,0,0"))
                  (rule "inEqSimp_notGeq" (formula "23") (term "0,0,0"))
                  (rule "mul_literals" (formula "23") (term "1,0,0,0,0,0"))
                  (rule "add_literals" (formula "23") (term "0,0,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "0,0,0"))
                  (rule "mul_literals" (formula "23") (term "1,0,0,0"))
                  (rule "nnf_notAnd" (formula "22") (term "0,0"))
                  (rule "inEqSimp_notLeq" (formula "22") (term "1,0,0"))
                  (rule "mul_literals" (formula "22") (term "1,0,0,1,0,0"))
                  (rule "add_literals" (formula "22") (term "0,0,1,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "22") (term "1,0,0"))
                  (rule "mul_literals" (formula "22") (term "1,1,0,0"))
                  (rule "nnf_notAnd" (formula "22") (term "0,0,0"))
                  (rule "inEqSimp_notLeq" (formula "22") (term "0,0,0,0"))
                  (rule "mul_literals" (formula "22") (term "1,0,0,0,0,0,0"))
                  (rule "add_literals" (formula "22") (term "0,0,0,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "22") (term "0,0,0,0"))
                  (rule "mul_literals" (formula "22") (term "1,0,0,0,0"))
                  (rule "inEqSimp_notGeq" (formula "22") (term "1,0,0,0"))
                  (rule "times_zero_1" (formula "22") (term "1,0,0,1,0,0,0"))
                  (rule "add_zero_right" (formula "22") (term "0,0,1,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "1,0,0,0"))
                  (rule "mul_literals" (formula "22") (term "1,1,0,0,0"))
                  (rule "Class_invariant_axiom_for_de_wiesler_Buffers" (formula "32"))
                  (rule "Contract_axiom_for_bufferLen_in_Buffers" (formula "11") (term "0"))
                   (builtin "One Step Simplification" (formula "11") (ifInst ""  (formula "8")) (ifInst ""  (formula "1")) (ifInst ""  (formula "2")) (ifInst ""  (formula "31")) (ifInst ""  (formula "8")) (ifInst ""  (formula "20")))
                  (rule "inEqSimp_ltToLeq" (formula "11") (term "1,0"))
                  (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,1,0"))
                  (rule "polySimp_addComm1" (formula "11") (term "0,1,0"))
                  (rule "inEqSimp_commuteLeq" (formula "11") (term "0,1"))
                  (rule "inEqSimp_commuteLeq" (formula "11") (term "0,0"))
                  (rule "replace_known_left" (formula "11") (term "0,0") (ifseqformula "9"))
                   (builtin "One Step Simplification" (formula "11"))
                  (rule "applyEq" (formula "11") (term "0,0,1") (ifseqformula "12"))
                  (rule "qeq_literals" (formula "11") (term "0,1"))
                   (builtin "One Step Simplification" (formula "11"))
                  (rule "applyEq" (formula "11") (term "0,1") (ifseqformula "12"))
                  (rule "leq_literals" (formula "11") (term "1"))
                   (builtin "One Step Simplification" (formula "11"))
                  (rule "true_left" (formula "11"))
                  (rule "Definition_axiom_for_bufferLen_in_de_wiesler_Buffers" (formula "11") (term "0"))
                  (rule "Class_invariant_axiom_for_de_wiesler_Buffers" (formula "8"))
                  (rule "close" (formula "32") (ifseqformula "8"))
               )
               (branch
                   (builtin "One Step Simplification" (formula "36"))
                  (rule "closeTrue" (formula "36"))
               )
            )
         )
      )
      (branch "Null Reference (x_arr = null)"
          (builtin "One Step Simplification" (formula "1"))
         (rule "false_right" (formula "32"))
         (rule "inEqSimp_ltToLeq" (formula "15"))
         (rule "polySimp_mulComm0" (formula "15") (term "1,0,0"))
         (rule "polySimp_addComm1" (formula "15") (term "0"))
         (rule "inEqSimp_ltToLeq" (formula "24") (term "1,0,0,0"))
         (rule "mul_literals" (formula "24") (term "1,0,0,1,0,0,0"))
         (rule "add_literals" (formula "24") (term "0,0,1,0,0,0"))
         (rule "inEqSimp_homoInEq1" (formula "20"))
         (rule "polySimp_mulComm0" (formula "20") (term "1,0"))
         (rule "polySimp_rightDist" (formula "20") (term "1,0"))
         (rule "polySimp_mulLiterals" (formula "20") (term "1,1,0"))
         (rule "polySimp_elimOne" (formula "20") (term "1,1,0"))
         (rule "polySimp_mulComm0" (formula "20") (term "0,1,0"))
         (rule "polySimp_addAssoc" (formula "20") (term "0"))
         (rule "applyEq" (formula "27") (term "0") (ifseqformula "1"))
         (rule "eqSymm" (formula "27"))
         (rule "applyEq" (formula "28") (term "0") (ifseqformula "1"))
         (rule "eqSymm" (formula "28"))
         (rule "inEqSimp_sepNegMonomial0" (formula "15"))
         (rule "polySimp_mulLiterals" (formula "15") (term "0"))
         (rule "polySimp_elimOne" (formula "15") (term "0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "1,0,0,0"))
         (rule "mul_literals" (formula "24") (term "1,1,0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "20"))
         (rule "polySimp_mulComm0" (formula "20") (term "1"))
         (rule "polySimp_rightDist" (formula "20") (term "1"))
         (rule "mul_literals" (formula "20") (term "0,1"))
         (rule "polySimp_mulLiterals" (formula "20") (term "1,1"))
         (rule "polySimp_elimOne" (formula "20") (term "1,1"))
         (rule "inEqSimp_subsumption1" (formula "6") (ifseqformula "14"))
         (rule "leq_literals" (formula "6") (term "0"))
          (builtin "One Step Simplification" (formula "6"))
         (rule "true_left" (formula "6"))
         (rule "inEqSimp_subsumption1" (formula "8") (ifseqformula "16"))
         (rule "leq_literals" (formula "8") (term "0"))
          (builtin "One Step Simplification" (formula "8"))
         (rule "true_left" (formula "8"))
         (rule "inEqSimp_subsumption0" (formula "16") (ifseqformula "18"))
         (rule "inEqSimp_homoInEq0" (formula "16") (term "0"))
         (rule "polySimp_mulComm0" (formula "16") (term "1,0,0"))
         (rule "polySimp_rightDist" (formula "16") (term "1,0,0"))
         (rule "mul_literals" (formula "16") (term "0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "16") (term "0,0"))
         (rule "polySimp_addComm0" (formula "16") (term "0,0,0"))
         (rule "polySimp_pullOutFactor1b" (formula "16") (term "0,0"))
         (rule "add_literals" (formula "16") (term "1,1,0,0"))
         (rule "times_zero_1" (formula "16") (term "1,0,0"))
         (rule "add_zero_right" (formula "16") (term "0,0"))
         (rule "qeq_literals" (formula "16") (term "0"))
          (builtin "One Step Simplification" (formula "16"))
         (rule "true_left" (formula "16"))
         (rule "inEqSimp_exactShadow3" (formula "15") (ifseqformula "17"))
         (rule "times_zero_1" (formula "15") (term "0,0"))
         (rule "add_zero_left" (formula "15") (term "0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "15"))
         (rule "mul_literals" (formula "15") (term "1"))
         (rule "inEqSimp_subsumption1" (formula "9") (ifseqformula "15"))
         (rule "leq_literals" (formula "9") (term "0"))
          (builtin "One Step Simplification" (formula "9"))
         (rule "true_left" (formula "9"))
         (rule "nnf_imp2or" (formula "22") (term "0"))
         (rule "nnf_imp2or" (formula "21") (term "0"))
         (rule "nnf_notAnd" (formula "22") (term "0,0"))
         (rule "inEqSimp_notLeq" (formula "22") (term "0,0,0"))
         (rule "mul_literals" (formula "22") (term "1,0,0,0,0,0"))
         (rule "add_literals" (formula "22") (term "0,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "22") (term "0,0,0"))
         (rule "mul_literals" (formula "22") (term "1,0,0,0"))
         (rule "inEqSimp_notGeq" (formula "22") (term "1,0,0"))
         (rule "mul_literals" (formula "22") (term "1,0,0,1,0,0"))
         (rule "add_literals" (formula "22") (term "0,0,1,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "1,0,0"))
         (rule "mul_literals" (formula "22") (term "1,1,0,0"))
         (rule "nnf_notAnd" (formula "21") (term "0,0"))
         (rule "nnf_notAnd" (formula "21") (term "0,0,0"))
         (rule "inEqSimp_notGeq" (formula "21") (term "0,0,0,0"))
         (rule "times_zero_1" (formula "21") (term "1,0,0,0,0,0,0"))
         (rule "add_zero_right" (formula "21") (term "0,0,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "0,0,0,0"))
         (rule "mul_literals" (formula "21") (term "1,0,0,0,0"))
         (rule "inEqSimp_notLeq" (formula "21") (term "1,0,0,0"))
         (rule "mul_literals" (formula "21") (term "1,0,0,1,0,0,0"))
         (rule "add_literals" (formula "21") (term "0,0,1,0,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "21") (term "1,0,0,0"))
         (rule "mul_literals" (formula "21") (term "1,1,0,0,0"))
         (rule "nnf_notAnd" (formula "21") (term "1,0,0"))
         (rule "inEqSimp_notLeq" (formula "21") (term "0,1,0,0"))
         (rule "mul_literals" (formula "21") (term "1,0,0,0,1,0,0"))
         (rule "add_literals" (formula "21") (term "0,0,0,1,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "21") (term "0,1,0,0"))
         (rule "mul_literals" (formula "21") (term "1,0,1,0,0"))
         (rule "inEqSimp_notGeq" (formula "21") (term "1,1,0,0"))
         (rule "mul_literals" (formula "21") (term "1,0,0,1,1,0,0"))
         (rule "add_literals" (formula "21") (term "0,0,1,1,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "1,1,0,0"))
         (rule "mul_literals" (formula "21") (term "1,1,1,0,0"))
         (rule "Free_class_invariant_axiom_for_de_wiesler_Buffers" (formula "18") (inst "b=b"))
          (builtin "One Step Simplification" (formula "18"))
         (rule "expand_inInt" (formula "18") (term "1,0,0,1"))
         (rule "replace_int_MAX" (formula "18") (term "1,0,1,0,0,1"))
         (rule "replace_int_MIN" (formula "18") (term "0,1,1,0,0,1"))
         (rule "andLeft" (formula "18"))
         (rule "andLeft" (formula "18"))
         (rule "andLeft" (formula "18"))
         (rule "andLeft" (formula "20"))
         (rule "andLeft" (formula "18"))
         (rule "notLeft" (formula "18"))
         (rule "translateJavaMulInt" (formula "18") (term "1"))
         (rule "mul_literals" (formula "18") (term "1"))
         (rule "eqSymm" (formula "28"))
         (rule "inEqSimp_ltToLeq" (formula "22") (term "1,0,0,0"))
         (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,1,0,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "22") (term "0,0,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "22") (term "0,1,0"))
         (rule "inEqSimp_commuteLeq" (formula "22") (term "1,1,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "20"))
         (rule "applyEq" (formula "22") (term "1,0,1,1,0") (ifseqformula "1"))
         (rule "applyEq" (formula "19") (term "0,0") (ifseqformula "1"))
         (rule "applyEq" (formula "22") (term "1,0,0,1,0") (ifseqformula "1"))
         (rule "applyEq" (formula "28") (term "0") (ifseqformula "1"))
         (rule "eqSymm" (formula "28"))
         (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "1,0,0,0"))
         (rule "polySimp_mulComm0" (formula "22") (term "1,1,0,0,0"))
         (rule "polySimp_rightDist" (formula "22") (term "1,1,0,0,0"))
         (rule "mul_literals" (formula "22") (term "0,1,1,0,0,0"))
         (rule "polySimp_mulLiterals" (formula "22") (term "1,1,1,0,0,0"))
         (rule "polySimp_elimOne" (formula "22") (term "1,1,1,0,0,0"))
         (rule "inEqSimp_exactShadow3" (formula "12") (ifseqformula "21"))
         (rule "polySimp_rightDist" (formula "12") (term "0,0"))
         (rule "mul_literals" (formula "12") (term "0,0,0"))
         (rule "polySimp_addComm1" (formula "12") (term "0"))
         (rule "add_literals" (formula "12") (term "0,0"))
         (rule "inEqSimp_sepNegMonomial1" (formula "12"))
         (rule "polySimp_mulLiterals" (formula "12") (term "0"))
         (rule "polySimp_elimOne" (formula "12") (term "0"))
         (rule "inEqSimp_subsumption0" (formula "5") (ifseqformula "12"))
         (rule "leq_literals" (formula "5") (term "0"))
          (builtin "One Step Simplification" (formula "5"))
         (rule "true_left" (formula "5"))
         (rule "nnf_imp2or" (formula "22") (term "0"))
         (rule "nnf_notAnd" (formula "22") (term "0,0"))
         (rule "nnf_notAnd" (formula "22") (term "0,0,0"))
         (rule "inEqSimp_notGeq" (formula "22") (term "0,0,0,0"))
         (rule "mul_literals" (formula "22") (term "1,0,0,0,0,0,0"))
         (rule "add_zero_right" (formula "22") (term "0,0,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "0,0,0,0"))
         (rule "mul_literals" (formula "22") (term "1,0,0,0,0"))
         (rule "inEqSimp_notLeq" (formula "22") (term "1,0,0,0"))
         (rule "polySimp_rightDist" (formula "22") (term "1,0,0,1,0,0,0"))
         (rule "mul_literals" (formula "22") (term "0,1,0,0,1,0,0,0"))
         (rule "polySimp_addAssoc" (formula "22") (term "0,0,1,0,0,0"))
         (rule "add_literals" (formula "22") (term "0,0,0,1,0,0,0"))
         (rule "add_zero_left" (formula "22") (term "0,0,1,0,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "22") (term "1,0,0,0"))
         (rule "polySimp_mulLiterals" (formula "22") (term "1,1,0,0,0"))
         (rule "polySimp_elimOne" (formula "22") (term "1,1,0,0,0"))
         (rule "nnf_notAnd" (formula "22") (term "1,0,0"))
         (rule "inEqSimp_notLeq" (formula "22") (term "0,1,0,0"))
         (rule "mul_literals" (formula "22") (term "1,0,0,0,1,0,0"))
         (rule "add_literals" (formula "22") (term "0,0,0,1,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "22") (term "0,1,0,0"))
         (rule "mul_literals" (formula "22") (term "1,0,1,0,0"))
         (rule "inEqSimp_notGeq" (formula "22") (term "1,1,0,0"))
         (rule "mul_literals" (formula "22") (term "1,0,0,1,1,0,0"))
         (rule "add_literals" (formula "22") (term "0,0,1,1,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "1,1,0,0"))
         (rule "mul_literals" (formula "22") (term "1,1,1,0,0"))
         (rule "Contract_axiom_for_bufferLen_in_Buffers" (formula "13") (term "0"))
          (builtin "One Step Simplification" (formula "13") (ifInst ""  (formula "9")) (ifInst ""  (formula "2")) (ifInst ""  (formula "3")) (ifInst ""  (formula "31")) (ifInst ""  (formula "9")))
         (rule "inEqSimp_ltToLeq" (formula "13") (term "1,0"))
         (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,1,0"))
         (rule "polySimp_addComm1" (formula "13") (term "0,1,0"))
         (rule "inEqSimp_commuteLeq" (formula "13") (term "0,0"))
         (rule "replace_known_left" (formula "13") (term "0,0") (ifseqformula "10"))
          (builtin "One Step Simplification" (formula "13"))
         (rule "inEqSimp_commuteLeq" (formula "13") (term "0,0,1"))
         (rule "applyEq" (formula "13") (term "0,1,0,1") (ifseqformula "14"))
         (rule "leq_literals" (formula "13") (term "1,0,1"))
          (builtin "One Step Simplification" (formula "13"))
         (rule "applyEq" (formula "13") (term "0,0,1") (ifseqformula "14"))
         (rule "qeq_literals" (formula "13") (term "0,1"))
          (builtin "One Step Simplification" (formula "13"))
         (rule "inEqSimp_sepNegMonomial0" (formula "13") (term "0"))
         (rule "polySimp_mulLiterals" (formula "13") (term "0,0"))
         (rule "polySimp_elimOne" (formula "13") (term "0,0"))
         (rule "replace_known_left" (formula "13") (term "0") (ifseqformula "12"))
          (builtin "One Step Simplification" (formula "13"))
         (rule "Class_invariant_axiom_for_de_wiesler_Buffers" (formula "9"))
         (rule "andLeft" (formula "9"))
         (rule "notLeft" (formula "10"))
         (rule "close" (formula "29") (ifseqformula "1"))
      )
      (branch "Index Out of Bounds (x_arr != null, but _bucket Out of Bounds!)"
          (builtin "One Step Simplification" (formula "1"))
         (rule "false_right" (formula "32"))
         (rule "andLeft" (formula "1"))
         (rule "notLeft" (formula "1"))
         (rule "inEqSimp_ltToLeq" (formula "24") (term "1,0,0,0"))
         (rule "mul_literals" (formula "24") (term "1,0,0,1,0,0,0"))
         (rule "add_literals" (formula "24") (term "0,0,1,0,0,0"))
         (rule "inEqSimp_ltToLeq" (formula "15"))
         (rule "polySimp_mulComm0" (formula "15") (term "1,0,0"))
         (rule "polySimp_addComm1" (formula "15") (term "0"))
         (rule "inEqSimp_ltToLeq" (formula "1") (term "1"))
         (rule "times_zero_1" (formula "1") (term "1,0,0,1"))
         (rule "add_zero_right" (formula "1") (term "0,0,1"))
         (rule "inEqSimp_homoInEq1" (formula "20"))
         (rule "polySimp_mulComm0" (formula "20") (term "1,0"))
         (rule "polySimp_rightDist" (formula "20") (term "1,0"))
         (rule "polySimp_mulLiterals" (formula "20") (term "1,1,0"))
         (rule "polySimp_elimOne" (formula "20") (term "1,1,0"))
         (rule "polySimp_mulComm0" (formula "20") (term "0,1,0"))
         (rule "polySimp_addAssoc" (formula "20") (term "0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "1,0,0,0"))
         (rule "mul_literals" (formula "24") (term "1,1,0,0,0"))
         (rule "inEqSimp_sepNegMonomial0" (formula "15"))
         (rule "polySimp_mulLiterals" (formula "15") (term "0"))
         (rule "polySimp_elimOne" (formula "15") (term "0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1"))
         (rule "mul_literals" (formula "1") (term "1,1"))
         (rule "inEqSimp_sepPosMonomial0" (formula "20"))
         (rule "polySimp_mulComm0" (formula "20") (term "1"))
         (rule "polySimp_rightDist" (formula "20") (term "1"))
         (rule "mul_literals" (formula "20") (term "0,1"))
         (rule "polySimp_mulLiterals" (formula "20") (term "1,1"))
         (rule "polySimp_elimOne" (formula "20") (term "1,1"))
         (rule "inEqSimp_subsumption1" (formula "9") (ifseqformula "17"))
         (rule "leq_literals" (formula "9") (term "0"))
          (builtin "One Step Simplification" (formula "9"))
         (rule "true_left" (formula "9"))
         (rule "inEqSimp_subsumption0" (formula "17") (ifseqformula "19"))
         (rule "inEqSimp_homoInEq0" (formula "17") (term "0"))
         (rule "polySimp_mulComm0" (formula "17") (term "1,0,0"))
         (rule "polySimp_rightDist" (formula "17") (term "1,0,0"))
         (rule "mul_literals" (formula "17") (term "0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "17") (term "0,0"))
         (rule "polySimp_addComm0" (formula "17") (term "0,0,0"))
         (rule "polySimp_pullOutFactor1b" (formula "17") (term "0,0"))
         (rule "add_literals" (formula "17") (term "1,1,0,0"))
         (rule "times_zero_1" (formula "17") (term "1,0,0"))
         (rule "add_zero_right" (formula "17") (term "0,0"))
         (rule "qeq_literals" (formula "17") (term "0"))
          (builtin "One Step Simplification" (formula "17"))
         (rule "true_left" (formula "17"))
         (rule "inEqSimp_contradInEq1" (formula "1") (term "1") (ifseqformula "13"))
         (rule "qeq_literals" (formula "1") (term "0,1"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "inEqSimp_subsumption1" (formula "6") (ifseqformula "13"))
         (rule "leq_literals" (formula "6") (term "0"))
          (builtin "One Step Simplification" (formula "6"))
         (rule "true_left" (formula "6"))
         (rule "inEqSimp_exactShadow3" (formula "15") (ifseqformula "17"))
         (rule "times_zero_1" (formula "15") (term "0,0"))
         (rule "add_zero_left" (formula "15") (term "0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "15"))
         (rule "mul_literals" (formula "15") (term "1"))
         (rule "inEqSimp_subsumption1" (formula "9") (ifseqformula "15"))
         (rule "leq_literals" (formula "9") (term "0"))
          (builtin "One Step Simplification" (formula "9"))
         (rule "true_left" (formula "9"))
         (rule "nnf_imp2or" (formula "22") (term "0"))
         (rule "nnf_imp2or" (formula "21") (term "0"))
         (rule "nnf_notAnd" (formula "22") (term "0,0"))
         (rule "inEqSimp_notGeq" (formula "22") (term "1,0,0"))
         (rule "mul_literals" (formula "22") (term "1,0,0,1,0,0"))
         (rule "add_literals" (formula "22") (term "0,0,1,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "1,0,0"))
         (rule "mul_literals" (formula "22") (term "1,1,0,0"))
         (rule "inEqSimp_notLeq" (formula "22") (term "0,0,0"))
         (rule "mul_literals" (formula "22") (term "1,0,0,0,0,0"))
         (rule "add_literals" (formula "22") (term "0,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "22") (term "0,0,0"))
         (rule "mul_literals" (formula "22") (term "1,0,0,0"))
         (rule "nnf_notAnd" (formula "21") (term "0,0"))
         (rule "nnf_notAnd" (formula "21") (term "0,0,0"))
         (rule "inEqSimp_notLeq" (formula "21") (term "1,0,0,0"))
         (rule "mul_literals" (formula "21") (term "1,0,0,1,0,0,0"))
         (rule "add_literals" (formula "21") (term "0,0,1,0,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "21") (term "1,0,0,0"))
         (rule "mul_literals" (formula "21") (term "1,1,0,0,0"))
         (rule "inEqSimp_notGeq" (formula "21") (term "0,0,0,0"))
         (rule "times_zero_1" (formula "21") (term "1,0,0,0,0,0,0"))
         (rule "add_zero_right" (formula "21") (term "0,0,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "0,0,0,0"))
         (rule "mul_literals" (formula "21") (term "1,0,0,0,0"))
         (rule "nnf_notAnd" (formula "21") (term "1,0,0"))
         (rule "inEqSimp_notLeq" (formula "21") (term "0,1,0,0"))
         (rule "mul_literals" (formula "21") (term "1,0,0,0,1,0,0"))
         (rule "add_literals" (formula "21") (term "0,0,0,1,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "21") (term "0,1,0,0"))
         (rule "mul_literals" (formula "21") (term "1,0,1,0,0"))
         (rule "inEqSimp_notGeq" (formula "21") (term "1,1,0,0"))
         (rule "mul_literals" (formula "21") (term "1,0,0,1,1,0,0"))
         (rule "add_literals" (formula "21") (term "0,0,1,1,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "1,1,0,0"))
         (rule "mul_literals" (formula "21") (term "1,1,1,0,0"))
         (rule "Free_class_invariant_axiom_for_de_wiesler_Buffers" (formula "18") (inst "b=b"))
          (builtin "One Step Simplification" (formula "18"))
         (rule "expand_inInt" (formula "18") (term "1,0,0,1"))
         (rule "replace_int_MIN" (formula "18") (term "0,1,1,0,0,1"))
         (rule "replace_int_MAX" (formula "18") (term "1,0,1,0,0,1"))
         (rule "andLeft" (formula "18"))
         (rule "andLeft" (formula "18"))
         (rule "andLeft" (formula "19"))
         (rule "andLeft" (formula "18"))
         (rule "andLeft" (formula "18"))
         (rule "notLeft" (formula "18"))
         (rule "translateJavaMulInt" (formula "18") (term "1"))
         (rule "mul_literals" (formula "18") (term "1"))
         (rule "eqSymm" (formula "28"))
         (rule "inEqSimp_ltToLeq" (formula "22") (term "1,0,0,0"))
         (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,1,0,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "22") (term "0,0,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "22") (term "0,1,0"))
         (rule "inEqSimp_commuteLeq" (formula "22") (term "1,1,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "20"))
         (rule "applyEq" (formula "1") (term "0") (ifseqformula "19"))
         (rule "inEqSimp_commuteLeq" (formula "1"))
         (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "1,0,0,0"))
         (rule "polySimp_mulComm0" (formula "22") (term "1,1,0,0,0"))
         (rule "polySimp_rightDist" (formula "22") (term "1,1,0,0,0"))
         (rule "mul_literals" (formula "22") (term "0,1,1,0,0,0"))
         (rule "polySimp_mulLiterals" (formula "22") (term "1,1,1,0,0,0"))
         (rule "polySimp_elimOne" (formula "22") (term "1,1,1,0,0,0"))
         (rule "inEqSimp_subsumption1" (formula "11") (ifseqformula "1"))
         (rule "leq_literals" (formula "11") (term "0"))
          (builtin "One Step Simplification" (formula "11"))
         (rule "true_left" (formula "11"))
         (rule "inEqSimp_exactShadow3" (formula "11") (ifseqformula "20"))
         (rule "polySimp_rightDist" (formula "11") (term "0,0"))
         (rule "mul_literals" (formula "11") (term "0,0,0"))
         (rule "polySimp_addComm1" (formula "11") (term "0"))
         (rule "add_literals" (formula "11") (term "0,0"))
         (rule "inEqSimp_sepNegMonomial1" (formula "11"))
         (rule "polySimp_mulLiterals" (formula "11") (term "0"))
         (rule "polySimp_elimOne" (formula "11") (term "0"))
         (rule "inEqSimp_subsumption0" (formula "5") (ifseqformula "11"))
         (rule "leq_literals" (formula "5") (term "0"))
          (builtin "One Step Simplification" (formula "5"))
         (rule "true_left" (formula "5"))
         (rule "inEqSimp_contradInEq0" (formula "1") (ifseqformula "10"))
         (rule "qeq_literals" (formula "1") (term "0"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "closeFalse" (formula "1"))
      )
   )
   (branch "Exceptional Post (copy_nonoverlapping)"
       (builtin "One Step Simplification" (formula "22"))
       (builtin "One Step Simplification" (formula "28"))
      (rule "andLeft" (formula "22"))
      (rule "selectCreatedOfAnonAsFormulaEQ" (formula "23") (term "1,0") (ifseqformula "22"))
      (rule "andLeft" (formula "23"))
      (rule "andLeft" (formula "23"))
      (rule "notLeft" (formula "23"))
      (rule "close" (formula "25") (ifseqformula "24"))
   )
   (branch "Pre (copy_nonoverlapping)"
       (builtin "One Step Simplification" (formula "26") (ifInst ""  (formula "25")) (ifInst ""  (formula "1")) (ifInst ""  (formula "25")) (ifInst ""  (formula "6")))
      (rule "expand_inInt" (formula "26") (term "1,0,1"))
      (rule "expand_inInt" (formula "26") (term "1,1"))
      (rule "expand_inInt" (formula "26") (term "1,0,0,1"))
      (rule "replace_int_MIN" (formula "26") (term "0,1,1,0,1"))
      (rule "replace_int_MAX" (formula "26") (term "1,0,1,0,1"))
      (rule "replace_int_MIN" (formula "26") (term "0,1,1,1"))
      (rule "replace_int_MAX" (formula "26") (term "1,0,1,1"))
      (rule "replace_int_MAX" (formula "26") (term "1,0,1,0,0,1"))
      (rule "replace_int_MIN" (formula "26") (term "0,1,1,0,0,1"))
      (rule "leq_literals" (formula "26") (term "1,1,1"))
       (builtin "One Step Simplification" (formula "26") (ifInst ""  (formula "7")))
      (rule "leq_literals" (formula "26") (term "1,1"))
       (builtin "One Step Simplification" (formula "26"))
      (rule "inEqSimp_ltToLeq" (formula "14"))
      (rule "polySimp_mulComm0" (formula "14") (term "1,0,0"))
      (rule "polySimp_addComm1" (formula "14") (term "0"))
      (rule "inEqSimp_commuteLeq" (formula "26") (term "1,1,0,1"))
      (rule "inEqSimp_commuteLeq" (formula "26") (term "1,1"))
      (rule "replace_known_left" (formula "26") (term "1,1") (ifseqformula "8"))
       (builtin "One Step Simplification" (formula "26"))
      (rule "inEqSimp_homoInEq1" (formula "19"))
      (rule "polySimp_mulComm0" (formula "19") (term "1,0"))
      (rule "polySimp_rightDist" (formula "19") (term "1,0"))
      (rule "polySimp_mulLiterals" (formula "19") (term "1,1,0"))
      (rule "polySimp_elimOne" (formula "19") (term "1,1,0"))
      (rule "polySimp_mulComm0" (formula "19") (term "0,1,0"))
      (rule "polySimp_addAssoc" (formula "19") (term "0"))
      (rule "inEqSimp_sepNegMonomial0" (formula "14"))
      (rule "polySimp_mulLiterals" (formula "14") (term "0"))
      (rule "polySimp_elimOne" (formula "14") (term "0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "19"))
      (rule "polySimp_mulComm0" (formula "19") (term "1"))
      (rule "polySimp_rightDist" (formula "19") (term "1"))
      (rule "polySimp_mulLiterals" (formula "19") (term "1,1"))
      (rule "mul_literals" (formula "19") (term "0,1"))
      (rule "polySimp_elimOne" (formula "19") (term "1,1"))
      (rule "inEqSimp_subsumption6" (formula "26") (term "1,1,1") (ifseqformula "13"))
      (rule "greater_literals" (formula "26") (term "0,0,1,1,1"))
       (builtin "One Step Simplification" (formula "26"))
      (rule "times_zero_1" (formula "26") (term "1,0,1,1,1"))
      (rule "leq_literals" (formula "26") (term "0,1,1,1"))
       (builtin "One Step Simplification" (formula "26"))
      (rule "inEqSimp_subsumption1" (formula "8") (ifseqformula "16"))
      (rule "leq_literals" (formula "8") (term "0"))
       (builtin "One Step Simplification" (formula "8"))
      (rule "true_left" (formula "8"))
      (rule "inEqSimp_subsumption0" (formula "16") (ifseqformula "18"))
      (rule "inEqSimp_homoInEq0" (formula "16") (term "0"))
      (rule "polySimp_mulComm0" (formula "16") (term "1,0,0"))
      (rule "polySimp_rightDist" (formula "16") (term "1,0,0"))
      (rule "mul_literals" (formula "16") (term "0,1,0,0"))
      (rule "polySimp_addAssoc" (formula "16") (term "0,0"))
      (rule "polySimp_addComm0" (formula "16") (term "0,0,0"))
      (rule "polySimp_pullOutFactor1b" (formula "16") (term "0,0"))
      (rule "add_literals" (formula "16") (term "1,1,0,0"))
      (rule "times_zero_1" (formula "16") (term "1,0,0"))
      (rule "add_zero_right" (formula "16") (term "0,0"))
      (rule "qeq_literals" (formula "16") (term "0"))
       (builtin "One Step Simplification" (formula "16"))
      (rule "true_left" (formula "16"))
      (rule "inEqSimp_subsumption1" (formula "5") (ifseqformula "12"))
      (rule "leq_literals" (formula "5") (term "0"))
       (builtin "One Step Simplification" (formula "5"))
      (rule "true_left" (formula "5"))
      (rule "elimGcdLeq" (formula "23") (term "1,1") (inst "elimGcdRightDiv=Z(7(0(6(8(8(3(8(#))))))))") (inst "elimGcdLeftDiv=bucket") (inst "elimGcd=Z(6(5(2(#))))"))
      (rule "polySimp_mulLiterals" (formula "23") (term "1,0,1,0,1,1"))
      (rule "polySimp_mulLiterals" (formula "23") (term "0,0,0,0,1,0,1,1"))
      (rule "polySimp_mulLiterals" (formula "23") (term "1,0,0,0,0,0,0,1,1"))
      (rule "sub_literals" (formula "23") (term "0,0,0,0,0,0,0,1,1"))
      (rule "polySimp_mulLiterals" (formula "23") (term "1,0,0,0,1,1"))
      (rule "mul_literals" (formula "23") (term "0,0,0,0,1,0,1,1"))
      (rule "mul_literals" (formula "23") (term "1,0,0,0,0,0,0,1,1"))
      (rule "add_literals" (formula "23") (term "0,0,0,1,0,1,1"))
      (rule "polySimp_addLiterals" (formula "23") (term "0,0,0,0,0,1,1"))
      (rule "add_literals" (formula "23") (term "0,0,0,0,0,1,1"))
      (rule "add_zero_left" (formula "23") (term "0,0,0,0,1,1"))
      (rule "polySimp_pullOutFactor0b" (formula "23") (term "0,1,0,1,1"))
      (rule "add_literals" (formula "23") (term "1,1,0,1,0,1,1"))
      (rule "times_zero_1" (formula "23") (term "1,0,1,0,1,1"))
      (rule "add_zero_right" (formula "23") (term "0,1,0,1,1"))
      (rule "qeq_literals" (formula "23") (term "1,0,1,1"))
       (builtin "One Step Simplification" (formula "23"))
      (rule "polySimp_pullOutFactor0" (formula "23") (term "0,0,1,1"))
      (rule "add_literals" (formula "23") (term "1,0,0,1,1"))
      (rule "times_zero_1" (formula "23") (term "0,0,1,1"))
      (rule "leq_literals" (formula "23") (term "0,1,1"))
       (builtin "One Step Simplification" (formula "23"))
      (rule "inEqSimp_exactShadow3" (formula "14") (ifseqformula "16"))
      (rule "times_zero_1" (formula "14") (term "0,0"))
      (rule "add_zero_left" (formula "14") (term "0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "14"))
      (rule "mul_literals" (formula "14") (term "1"))
      (rule "inEqSimp_subsumption1" (formula "8") (ifseqformula "14"))
      (rule "leq_literals" (formula "8") (term "0"))
       (builtin "One Step Simplification" (formula "8"))
      (rule "true_left" (formula "8"))
      (rule "Contract_axiom_for_bufferLen_in_Buffers" (formula "12") (term "0"))
       (builtin "One Step Simplification" (formula "12") (ifInst ""  (formula "9")) (ifInst ""  (formula "1")) (ifInst ""  (formula "2")) (ifInst ""  (formula "22")) (ifInst ""  (formula "9")) (ifInst ""  (formula "18")))
      (rule "inEqSimp_ltToLeq" (formula "12") (term "1,0"))
      (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,1,0"))
      (rule "polySimp_addComm1" (formula "12") (term "0,1,0"))
      (rule "inEqSimp_commuteLeq" (formula "12") (term "0,0"))
      (rule "replace_known_left" (formula "12") (term "0,0") (ifseqformula "10"))
       (builtin "One Step Simplification" (formula "12"))
      (rule "inEqSimp_commuteLeq" (formula "12") (term "0,1"))
      (rule "applyEq" (formula "12") (term "0,1,1") (ifseqformula "13"))
      (rule "leq_literals" (formula "12") (term "1,1"))
       (builtin "One Step Simplification" (formula "12"))
      (rule "applyEq" (formula "12") (term "0,1") (ifseqformula "13"))
      (rule "qeq_literals" (formula "12") (term "1"))
       (builtin "One Step Simplification" (formula "12"))
      (rule "true_left" (formula "12"))
      (rule "Free_class_invariant_axiom_for_de_wiesler_Buffers" (formula "17") (inst "b=b"))
       (builtin "One Step Simplification" (formula "17"))
      (rule "expand_inInt" (formula "17") (term "1,0,0,1"))
      (rule "replace_int_MIN" (formula "17") (term "0,1,1,0,0,1"))
      (rule "replace_int_MAX" (formula "17") (term "1,0,1,0,0,1"))
      (rule "andLeft" (formula "17"))
      (rule "andLeft" (formula "17"))
      (rule "andLeft" (formula "18"))
      (rule "andLeft" (formula "17"))
      (rule "andLeft" (formula "17"))
      (rule "notLeft" (formula "17"))
      (rule "translateJavaMulInt" (formula "17") (term "1"))
      (rule "mul_literals" (formula "17") (term "1"))
      (rule "eqSymm" (formula "22"))
      (rule "inEqSimp_ltToLeq" (formula "21") (term "1,0,0,0"))
      (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,1,0,0,0"))
      (rule "inEqSimp_commuteLeq" (formula "21") (term "1,1,0,0"))
      (rule "inEqSimp_commuteLeq" (formula "21") (term "0,0,0,0"))
      (rule "inEqSimp_commuteLeq" (formula "21") (term "0,1,0"))
      (rule "inEqSimp_commuteLeq" (formula "19"))
      (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "1,0,0,0"))
      (rule "polySimp_mulComm0" (formula "21") (term "1,1,0,0,0"))
      (rule "polySimp_rightDist" (formula "21") (term "1,1,0,0,0"))
      (rule "polySimp_mulLiterals" (formula "21") (term "1,1,1,0,0,0"))
      (rule "mul_literals" (formula "21") (term "0,1,1,0,0,0"))
      (rule "polySimp_elimOne" (formula "21") (term "1,1,1,0,0,0"))
      (rule "inEqSimp_exactShadow3" (formula "11") (ifseqformula "20"))
      (rule "polySimp_rightDist" (formula "11") (term "0,0"))
      (rule "mul_literals" (formula "11") (term "0,0,0"))
      (rule "polySimp_addComm1" (formula "11") (term "0"))
      (rule "add_literals" (formula "11") (term "0,0"))
      (rule "inEqSimp_sepNegMonomial1" (formula "11"))
      (rule "polySimp_mulLiterals" (formula "11") (term "0"))
      (rule "polySimp_elimOne" (formula "11") (term "0"))
      (rule "inEqSimp_subsumption0" (formula "4") (ifseqformula "11"))
      (rule "leq_literals" (formula "4") (term "0"))
       (builtin "One Step Simplification" (formula "4"))
      (rule "true_left" (formula "4"))
      (rule "inEqSimp_subsumption0" (formula "27") (term "1,1") (ifseqformula "10"))
      (rule "leq_literals" (formula "27") (term "0,1,1"))
       (builtin "One Step Simplification" (formula "27"))
      (rule "nnf_imp2or" (formula "21") (term "0"))
      (rule "nnf_notAnd" (formula "21") (term "0,0"))
      (rule "nnf_notAnd" (formula "21") (term "1,0,0"))
      (rule "inEqSimp_notLeq" (formula "21") (term "0,1,0,0"))
      (rule "mul_literals" (formula "21") (term "1,0,0,0,1,0,0"))
      (rule "add_literals" (formula "21") (term "0,0,0,1,0,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "21") (term "0,1,0,0"))
      (rule "mul_literals" (formula "21") (term "1,0,1,0,0"))
      (rule "inEqSimp_notGeq" (formula "21") (term "1,1,0,0"))
      (rule "mul_literals" (formula "21") (term "1,0,0,1,1,0,0"))
      (rule "add_literals" (formula "21") (term "0,0,1,1,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "1,1,0,0"))
      (rule "mul_literals" (formula "21") (term "1,1,1,0,0"))
      (rule "nnf_notAnd" (formula "21") (term "0,0,0"))
      (rule "inEqSimp_notGeq" (formula "21") (term "0,0,0,0"))
      (rule "times_zero_1" (formula "21") (term "1,0,0,0,0,0,0"))
      (rule "add_zero_right" (formula "21") (term "0,0,0,0,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "0,0,0,0"))
      (rule "mul_literals" (formula "21") (term "1,0,0,0,0"))
      (rule "inEqSimp_notLeq" (formula "21") (term "1,0,0,0"))
      (rule "polySimp_rightDist" (formula "21") (term "1,0,0,1,0,0,0"))
      (rule "mul_literals" (formula "21") (term "0,1,0,0,1,0,0,0"))
      (rule "polySimp_addAssoc" (formula "21") (term "0,0,1,0,0,0"))
      (rule "add_literals" (formula "21") (term "0,0,0,1,0,0,0"))
      (rule "add_zero_left" (formula "21") (term "0,0,1,0,0,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "21") (term "1,0,0,0"))
      (rule "polySimp_mulLiterals" (formula "21") (term "1,1,0,0,0"))
      (rule "polySimp_elimOne" (formula "21") (term "1,1,0,0,0"))
      (rule "Class_invariant_axiom_for_de_wiesler_Buffers" (formula "8"))
      (rule "andLeft" (formula "8"))
      (rule "notLeft" (formula "9"))
      (rule "notLeft" (formula "8"))
      (rule "replace_known_right" (formula "28") (term "0,1") (ifseqformula "21"))
       (builtin "One Step Simplification" (formula "28") (ifInst ""  (formula "21")))
      (rule "Definition_axiom_for_bufferLen_in_de_wiesler_Buffers" (formula "11") (term "0"))
      (rule "commute_or_2" (formula "20") (term "0,0"))
      (rule "commute_or" (formula "20") (term "1,0,0,0"))
      (rule "shift_paren_or" (formula "20") (term "0,0,0"))
      (rule "cnf_rightDist" (formula "20") (term "0"))
      (rule "distr_forallAnd" (formula "20"))
      (rule "andLeft" (formula "20"))
      (rule "commute_or" (formula "21") (term "0"))
      (rule "commute_or" (formula "20") (term "0,0,0,0"))
      (rule "inEqSimp_or_subsumption0" (formula "20") (term "0,0,0,0"))
      (rule "qeq_literals" (formula "20") (term "0,0,0,0,0,0"))
       (builtin "One Step Simplification" (formula "20"))
      (rule "commute_or" (formula "21") (term "0,0,0,0"))
      (rule "inEqSimp_or_subsumption0" (formula "21") (term "0,0,0,0"))
      (rule "qeq_literals" (formula "21") (term "0,0,0,0,0,0"))
       (builtin "One Step Simplification" (formula "21"))
      (rule "arrayLengthNotNegative" (formula "14") (term "0"))
      (rule "arrayLengthIsAShort" (formula "15") (term "0"))
      (rule "expand_inShort" (formula "15"))
      (rule "replace_short_MAX" (formula "15") (term "1,0"))
      (rule "replace_short_MIN" (formula "15") (term "0,1"))
      (rule "andLeft" (formula "15"))
      (rule "inEqSimp_commuteLeq" (formula "16"))
      (rule "inEqSimp_subsumption1" (formula "16") (ifseqformula "14"))
      (rule "leq_literals" (formula "16") (term "0"))
       (builtin "One Step Simplification" (formula "16"))
      (rule "true_left" (formula "16"))
      (rule "inEqSimp_exactShadow3" (formula "16") (ifseqformula "15"))
      (rule "polySimp_mulComm0" (formula "16") (term "0,0"))
      (rule "polySimp_addComm0" (formula "16") (term "0"))
      (rule "inEqSimp_sepNegMonomial1" (formula "16"))
      (rule "polySimp_mulLiterals" (formula "16") (term "0"))
      (rule "polySimp_elimOne" (formula "16") (term "0"))
      (rule "inEqSimp_subsumption0" (formula "6") (ifseqformula "16"))
      (rule "leq_literals" (formula "6") (term "0"))
       (builtin "One Step Simplification" (formula "6"))
      (rule "true_left" (formula "6"))
      (rule "arrayLengthIsAShort" (formula "19") (term "0"))
      (rule "expand_inShort" (formula "19"))
      (rule "replace_short_MAX" (formula "19") (term "1,0"))
      (rule "replace_short_MIN" (formula "19") (term "0,1"))
      (rule "andLeft" (formula "19"))
      (rule "inEqSimp_commuteLeq" (formula "20"))
      (rule "applyEq" (formula "20") (term "0") (ifseqformula "21"))
      (rule "qeq_literals" (formula "20"))
      (rule "true_left" (formula "20"))
      (rule "applyEq" (formula "19") (term "0") (ifseqformula "20"))
      (rule "leq_literals" (formula "19"))
      (rule "true_left" (formula "19"))
      (rule "arrayLengthNotNegative" (formula "19") (term "0"))
      (rule "applyEq" (formula "19") (term "0") (ifseqformula "20"))
      (rule "qeq_literals" (formula "19"))
      (rule "true_left" (formula "19"))
      (rule "arrayLengthNotNegative" (formula "18") (term "0"))
      (rule "applyEq" (formula "18") (term "0") (ifseqformula "19"))
      (rule "qeq_literals" (formula "18"))
      (rule "true_left" (formula "18"))
      (rule "arrayLengthIsAShort" (formula "18") (term "0"))
      (rule "expand_inShort" (formula "18"))
      (rule "replace_short_MAX" (formula "18") (term "1,0"))
      (rule "replace_short_MIN" (formula "18") (term "0,1"))
      (rule "andLeft" (formula "18"))
      (rule "inEqSimp_commuteLeq" (formula "19"))
      (rule "applyEq" (formula "18") (term "0") (ifseqformula "20"))
      (rule "leq_literals" (formula "18"))
      (rule "closeFalse" (formula "18"))
   )
)
)
}
