\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Thu Jun 02 21:42:32 CEST 2022
[NewSMT]NoTypeHierarchy=false
[Labels]UseOriginLabels=true
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[NewSMT]Presburger=false
[SMTSettings]invariantForall=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[Choice]DefaultChoices=JavaCard-JavaCard\\:on , Strings-Strings\\:on , assertions-assertions\\:safe , bigint-bigint\\:on , finalFields-finalFields\\:immutable , floatRules-floatRules\\:strictfpOnly , initialisation-initialisation\\:disableStaticInitialisation , intRules-intRules\\:arithmeticSemanticsCheckingOF , integerSimplificationRules-integerSimplificationRules\\:full , javaLoopTreatment-javaLoopTreatment\\:efficient , mergeGenerateIsWeakeningGoal-mergeGenerateIsWeakeningGoal\\:off , methodExpansion-methodExpansion\\:modularOnly , modelFields-modelFields\\:treatAsAxiom , moreSeqRules-moreSeqRules\\:on , permissions-permissions\\:off , programRules-programRules\\:Java , reach-reach\\:on , runtimeExceptions-runtimeExceptions\\:ban , sequences-sequences\\:on , wdChecks-wdChecks\\:off , wdOperator-wdOperator\\:L
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_SCOPE_INV_TACLET
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_DEF_OPS
[SMTSettings]SelectedTaclets=
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[Strategy]MaximumNumberOfAutomaticApplications=10000
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_DELAYED
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]MPS_OPTIONS_KEY=MPS_MERGE
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[Strategy]Timeout=-1
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_OFF
[SMTSettings]useUninterpretedMultiplication=true
[NewSMT]sqrtSMTTranslation=SMT
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT_INTERNAL
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[NewSMT]identifier=OPEN
[SMTSettings]maxGenericSorts=2
[StrategyProperty]OSS_OPTIONS_KEY=OSS_ON
[NewSMT]Axiomatisations=false
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
[SMTSettings]integersMinimum=-2147483645
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]integersMaximum=2147483645
"
}

\javaSource "../../src";

\proofObligation "#Proof Obligation Settings
#Thu Jun 02 21:42:32 CEST 2022
contract=de.wiesler.Sorter[de.wiesler.Sorter\\:\\:sort([I,int,int,de.wiesler.Storage)].JML normal_behavior operation contract.0
name=de.wiesler.Sorter[de.wiesler.Sorter\\:\\:sort([I,int,int,de.wiesler.Storage)].JML normal_behavior operation contract.0
class=de.uka.ilkd.key.proof.init.FunctionalOperationContractPO
";

\proof {
(keyLog "0" (keyUser "Julian" ) (keyVersion "e1a85b31e7"))

(autoModeTime "432")

(branch "dummy ID"
 (builtin "One Step Simplification" (formula "1") (newnames "heapAtPre_0,o,f"))
(rule "expand_inInt" (formula "1") (term "1,0,0,1,0,0,0"))
(rule "expand_inInt" (formula "1") (term "1,0,1,0,0,0"))
(rule "replace_int_MAX" (formula "1") (term "1,0,1,0,0,1,0,0,0"))
(rule "replace_int_MIN" (formula "1") (term "0,1,1,0,0,1,0,0,0"))
(rule "replace_int_MIN" (formula "1") (term "0,1,1,0,1,0,0,0"))
(rule "replace_int_MAX" (formula "1") (term "1,0,1,0,1,0,0,0"))
(rule "impRight" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "3"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "4"))
(rule "andLeft" (formula "6"))
(rule "andLeft" (formula "2"))
(rule "andLeft" (formula "6"))
(rule "andLeft" (formula "9"))
(rule "andLeft" (formula "8"))
(rule "andLeft" (formula "2"))
(rule "notLeft" (formula "7"))
(rule "notLeft" (formula "7"))
(rule "andLeft" (formula "10"))
(rule "andLeft" (formula "7"))
(rule "andLeft" (formula "2"))
(rule "andLeft" (formula "4"))
(rule "andLeft" (formula "3"))
(rule "translateJavaSubInt" (formula "8") (term "0,0"))
(rule "translateJavaSubInt" (formula "13") (term "0"))
(rule "replace_known_right" (formula "7") (term "0") (ifseqformula "16"))
 (builtin "One Step Simplification" (formula "7"))
(rule "replace_known_right" (formula "2") (term "0") (ifseqformula "17"))
 (builtin "One Step Simplification" (formula "2"))
(rule "polySimp_elimSub" (formula "8") (term "0,0"))
(rule "polySimp_elimSub" (formula "13") (term "0"))
(rule "polySimp_addComm0" (formula "8") (term "0,0"))
(rule "polySimp_addComm0" (formula "13") (term "0"))
(rule "disjointDefinition" (formula "15"))
(rule "inEqSimp_commuteLeq" (formula "12"))
(rule "inEqSimp_commuteLeq" (formula "10"))
(rule "inEqSimp_commuteLeq" (formula "11"))
(rule "inEqSimp_commuteLeq" (formula "6"))
(rule "inEqSimp_commuteLeq" (formula "4"))
(rule "assignment" (formula "18") (term "1"))
 (builtin "One Step Simplification" (formula "18"))
(rule "commuteIntersection" (formula "15") (term "0"))
(rule "methodBodyExpand" (formula "18") (term "1") (newnames "heapBefore_sort,savedHeapBefore_sort"))
 (builtin "One Step Simplification" (formula "18"))
(rule "ifElseUnfold" (formula "18") (term "1") (inst "#boolv=x"))
(rule "variableDeclaration" (formula "18") (term "1") (newnames "x"))
(rule "compound_less_equal_than_comparison_1" (formula "18") (term "1") (inst "#v0=x_1"))
(rule "variableDeclarationAssign" (formula "18") (term "1"))
(rule "variableDeclaration" (formula "18") (term "1") (newnames "x_1"))
(rule "assignmentSubtractionInt" (formula "18") (term "1"))
(branch "Overflow check"
    (builtin "One Step Simplification" (formula "18"))
   (rule "expand_inInt" (formula "18"))
   (rule "replace_int_MIN" (formula "18") (term "0,1"))
   (rule "replace_int_MAX" (formula "18") (term "1,0"))
   (rule "polySimp_elimSub" (formula "18") (term "0,0"))
   (rule "polySimp_elimSub" (formula "18") (term "1,1"))
   (rule "polySimp_addComm0" (formula "18") (term "0,0"))
   (rule "polySimp_addComm0" (formula "18") (term "1,1"))
   (rule "inEqSimp_homoInEq0" (formula "13"))
   (rule "polySimp_mulComm0" (formula "13") (term "1,0"))
   (rule "polySimp_rightDist" (formula "13") (term "1,0"))
   (rule "polySimp_mulAssoc" (formula "13") (term "0,1,0"))
   (rule "polySimp_mulComm0" (formula "13") (term "0,0,1,0"))
   (rule "polySimp_mulLiterals" (formula "13") (term "0,1,0"))
   (rule "polySimp_elimOne" (formula "13") (term "0,1,0"))
   (rule "polySimp_addAssoc" (formula "13") (term "0"))
   (rule "inEqSimp_homoInEq0" (formula "18") (term "0"))
   (rule "polySimp_mulComm0" (formula "18") (term "1,0,0"))
   (rule "polySimp_rightDist" (formula "18") (term "1,0,0"))
   (rule "polySimp_mulAssoc" (formula "18") (term "0,1,0,0"))
   (rule "polySimp_mulComm0" (formula "18") (term "0,0,1,0,0"))
   (rule "polySimp_mulLiterals" (formula "18") (term "0,1,0,0"))
   (rule "polySimp_elimOne" (formula "18") (term "0,1,0,0"))
   (rule "polySimp_addAssoc" (formula "18") (term "0,0"))
   (rule "inEqSimp_homoInEq0" (formula "18") (term "1"))
   (rule "mul_literals" (formula "18") (term "1,0,1"))
   (rule "polySimp_addComm1" (formula "18") (term "0,1"))
   (rule "polySimp_addComm0" (formula "18") (term "0,0,1"))
   (rule "inEqSimp_sepNegMonomial1" (formula "13"))
   (rule "polySimp_mulLiterals" (formula "13") (term "0"))
   (rule "polySimp_elimOne" (formula "13") (term "0"))
   (rule "inEqSimp_sepNegMonomial1" (formula "18") (term "0"))
   (rule "polySimp_mulLiterals" (formula "18") (term "0,0"))
   (rule "polySimp_elimOne" (formula "18") (term "0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "18") (term "1"))
   (rule "polySimp_mulComm0" (formula "18") (term "1,1"))
   (rule "polySimp_rightDist" (formula "18") (term "1,1"))
   (rule "polySimp_mulLiterals" (formula "18") (term "1,1,1"))
   (rule "mul_literals" (formula "18") (term "0,1,1"))
   (rule "polySimp_elimOne" (formula "18") (term "1,1,1"))
   (rule "inEqSimp_subsumption1" (formula "4") (ifseqformula "10"))
   (rule "leq_literals" (formula "4") (term "0"))
    (builtin "One Step Simplification" (formula "4"))
   (rule "true_left" (formula "4"))
   (rule "inEqSimp_subsumption1" (formula "17") (term "1") (ifseqformula "10"))
   (rule "inEqSimp_homoInEq0" (formula "17") (term "0,1"))
   (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,1"))
   (rule "polySimp_rightDist" (formula "17") (term "1,0,0,1"))
   (rule "mul_literals" (formula "17") (term "0,1,0,0,1"))
   (rule "polySimp_addAssoc" (formula "17") (term "0,0,1"))
   (rule "polySimp_addComm0" (formula "17") (term "0,0,0,1"))
   (rule "polySimp_pullOutFactor1b" (formula "17") (term "0,0,1"))
   (rule "add_literals" (formula "17") (term "1,1,0,0,1"))
   (rule "times_zero_1" (formula "17") (term "1,0,0,1"))
   (rule "add_zero_right" (formula "17") (term "0,0,1"))
   (rule "qeq_literals" (formula "17") (term "0,1"))
    (builtin "One Step Simplification" (formula "17"))
   (rule "inEqSimp_leqRight" (formula "17"))
   (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
   (rule "mul_literals" (formula "1") (term "0,1,0,0"))
   (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
   (rule "add_literals" (formula "1") (term "0,0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "1"))
   (rule "polySimp_mulComm0" (formula "1") (term "1"))
   (rule "polySimp_rightDist" (formula "1") (term "1"))
   (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
   (rule "mul_literals" (formula "1") (term "0,1"))
   (rule "polySimp_elimOne" (formula "1") (term "1,1"))
   (rule "inEqSimp_subsumption1" (formula "11") (ifseqformula "1"))
   (rule "inEqSimp_homoInEq0" (formula "11") (term "0"))
   (rule "polySimp_pullOutFactor1b" (formula "11") (term "0,0"))
   (rule "add_literals" (formula "11") (term "1,1,0,0"))
   (rule "times_zero_1" (formula "11") (term "1,0,0"))
   (rule "add_zero_right" (formula "11") (term "0,0"))
   (rule "qeq_literals" (formula "11") (term "0"))
    (builtin "One Step Simplification" (formula "11"))
   (rule "true_left" (formula "11"))
   (rule "inEqSimp_contradInEq1" (formula "12") (ifseqformula "1"))
   (rule "andLeft" (formula "12"))
   (rule "inEqSimp_homoInEq1" (formula "12"))
   (rule "polySimp_mulComm0" (formula "12") (term "1,0"))
   (rule "polySimp_rightDist" (formula "12") (term "1,0"))
   (rule "mul_literals" (formula "12") (term "0,1,0"))
   (rule "polySimp_addAssoc" (formula "12") (term "0"))
   (rule "polySimp_addComm1" (formula "12") (term "0,0"))
   (rule "add_literals" (formula "12") (term "0,0,0"))
   (rule "polySimp_pullOutFactor1b" (formula "12") (term "0"))
   (rule "add_literals" (formula "12") (term "1,1,0"))
   (rule "times_zero_1" (formula "12") (term "1,0"))
   (rule "add_zero_right" (formula "12") (term "0"))
   (rule "leq_literals" (formula "12"))
   (rule "closeFalse" (formula "12"))
)
(branch "Usage"
    (builtin "One Step Simplification" (formula "18"))
   (rule "translateJavaSubInt" (formula "18") (term "0,1,0"))
   (rule "polySimp_elimSub" (formula "18") (term "0,1,0"))
   (rule "polySimp_addComm0" (formula "18") (term "0,1,0"))
   (rule "less_equal_than_comparison_simple" (formula "18") (term "1"))
    (builtin "One Step Simplification" (formula "18"))
   (rule "ifElseSplit" (formula "18"))
   (branch "if x true"
       (builtin "One Step Simplification" (formula "19"))
       (builtin "One Step Simplification" (formula "1"))
       (builtin "Use Operation Contract" (formula "19") (newnames "heapBefore_base_case_sort,exc_51,heapAfter_base_case_sort,anon_heap_base_case_sort") (contract "de.wiesler.Sorter[de.wiesler.Sorter::base_case_sort([I,int,int)].JML normal_behavior operation contract.0"))
      (branch "Post (base_case_sort)"
          (builtin "One Step Simplification" (formula "21"))
          (builtin "One Step Simplification" (formula "18"))
         (rule "andLeft" (formula "18"))
         (rule "andLeft" (formula "19"))
         (rule "andLeft" (formula "19"))
         (rule "andLeft" (formula "19"))
         (rule "translateJavaSubInt" (formula "18") (term "2,1,0"))
         (rule "polySimp_elimSub" (formula "18") (term "2,1,0"))
         (rule "mul_literals" (formula "18") (term "1,2,1,0"))
         (rule "polySimp_addComm0" (formula "18") (term "2,1,0"))
         (rule "narrowSelectArrayType" (formula "19") (term "2,1") (ifseqformula "2") (ifseqformula "23"))
         (rule "methodCallEmpty" (formula "24") (term "1"))
         (rule "tryEmpty" (formula "24") (term "1"))
         (rule "emptyModality" (formula "24") (term "1"))
         (rule "andRight" (formula "24"))
         (branch "Case 1"
             (builtin "One Step Simplification" (formula "24"))
            (rule "inEqSimp_homoInEq0" (formula "1"))
            (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
            (rule "polySimp_rightDist" (formula "1") (term "1,0"))
            (rule "polySimp_mulAssoc" (formula "1") (term "0,1,0"))
            (rule "polySimp_mulComm0" (formula "1") (term "0,0,1,0"))
            (rule "polySimp_mulLiterals" (formula "1") (term "0,1,0"))
            (rule "polySimp_elimOne" (formula "1") (term "0,1,0"))
            (rule "polySimp_addAssoc" (formula "1") (term "0"))
            (rule "inEqSimp_homoInEq0" (formula "14"))
            (rule "polySimp_mulComm0" (formula "14") (term "1,0"))
            (rule "polySimp_rightDist" (formula "14") (term "1,0"))
            (rule "polySimp_mulAssoc" (formula "14") (term "0,1,0"))
            (rule "polySimp_mulComm0" (formula "14") (term "0,0,1,0"))
            (rule "polySimp_mulLiterals" (formula "14") (term "0,1,0"))
            (rule "polySimp_elimOne" (formula "14") (term "0,1,0"))
            (rule "polySimp_addAssoc" (formula "14") (term "0"))
            (rule "inEqSimp_sepNegMonomial1" (formula "1"))
            (rule "polySimp_mulLiterals" (formula "1") (term "0"))
            (rule "polySimp_elimOne" (formula "1") (term "0"))
            (rule "inEqSimp_sepNegMonomial1" (formula "14"))
            (rule "polySimp_mulLiterals" (formula "14") (term "0"))
            (rule "polySimp_elimOne" (formula "14") (term "0"))
            (rule "inEqSimp_subsumption0" (formula "14") (ifseqformula "1"))
            (rule "inEqSimp_homoInEq0" (formula "14") (term "0"))
            (rule "polySimp_mulComm0" (formula "14") (term "1,0,0"))
            (rule "polySimp_rightDist" (formula "14") (term "1,0,0"))
            (rule "mul_literals" (formula "14") (term "0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "14") (term "0,0"))
            (rule "polySimp_addComm1" (formula "14") (term "0,0,0"))
            (rule "add_literals" (formula "14") (term "0,0,0,0"))
            (rule "polySimp_pullOutFactor1b" (formula "14") (term "0,0"))
            (rule "add_literals" (formula "14") (term "1,1,0,0"))
            (rule "times_zero_1" (formula "14") (term "1,0,0"))
            (rule "add_zero_right" (formula "14") (term "0,0"))
            (rule "qeq_literals" (formula "14") (term "0"))
             (builtin "One Step Simplification" (formula "14"))
            (rule "true_left" (formula "14"))
            (rule "inEqSimp_subsumption1" (formula "5") (ifseqformula "11"))
            (rule "leq_literals" (formula "5") (term "0"))
             (builtin "One Step Simplification" (formula "5"))
            (rule "true_left" (formula "5"))
            (rule "inEqSimp_exactShadow3" (formula "6") (ifseqformula "1"))
            (rule "mul_literals" (formula "6") (term "0,0"))
            (rule "polySimp_addAssoc" (formula "6") (term "0"))
            (rule "add_literals" (formula "6") (term "0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "6"))
            (rule "mul_literals" (formula "6") (term "1"))
            (rule "inEqSimp_subsumption1" (formula "6") (ifseqformula "11"))
            (rule "leq_literals" (formula "6") (term "0"))
             (builtin "One Step Simplification" (formula "6"))
            (rule "true_left" (formula "6"))
            (rule "inEqSimp_exactShadow3" (formula "11") (ifseqformula "5"))
            (rule "polySimp_mulComm0" (formula "11") (term "0,0"))
            (rule "polySimp_addComm0" (formula "11") (term "0"))
            (rule "inEqSimp_sepNegMonomial1" (formula "11"))
            (rule "polySimp_mulLiterals" (formula "11") (term "0"))
            (rule "polySimp_elimOne" (formula "11") (term "0"))
            (rule "Definition_axiom_for_isSortedSlice_in_de_wiesler_Functions" (formula "18") (term "0") (inst "i=i"))
             (builtin "One Step Simplification" (formula "18"))
            (rule "expand_inInt" (formula "18") (term "1,0,0"))
            (rule "replace_int_MAX" (formula "18") (term "1,0,1,0,0"))
            (rule "replace_int_MIN" (formula "18") (term "0,1,1,0,0"))
            (rule "translateJavaAddInt" (formula "18") (term "0,2,1,1,0"))
            (rule "translateJavaSubInt" (formula "18") (term "1,1,0,0,0"))
            (rule "polySimp_elimSub" (formula "18") (term "1,1,0,0,0"))
            (rule "mul_literals" (formula "18") (term "1,1,1,0,0,0"))
            (rule "polySimp_addComm0" (formula "18") (term "0,2,1,1,0"))
            (rule "polySimp_addComm0" (formula "18") (term "1,1,0,0,0"))
            (rule "inEqSimp_ltToLeq" (formula "18") (term "1,0,0,0"))
            (rule "polySimp_rightDist" (formula "18") (term "1,0,0,1,0,0,0"))
            (rule "mul_literals" (formula "18") (term "0,1,0,0,1,0,0,0"))
            (rule "polySimp_addAssoc" (formula "18") (term "0,0,1,0,0,0"))
            (rule "add_literals" (formula "18") (term "0,0,0,1,0,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "18") (term "0,0,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "18") (term "1,1,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "18") (term "1,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "1,0,0,0"))
            (rule "polySimp_mulComm0" (formula "18") (term "1,1,0,0,0"))
            (rule "polySimp_rightDist" (formula "18") (term "1,1,0,0,0"))
            (rule "mul_literals" (formula "18") (term "0,1,1,0,0,0"))
            (rule "polySimp_mulLiterals" (formula "18") (term "1,1,1,0,0,0"))
            (rule "polySimp_elimOne" (formula "18") (term "1,1,1,0,0,0"))
            (rule "nnf_imp2or" (formula "18") (term "0"))
            (rule "nnf_notAnd" (formula "18") (term "0,0"))
            (rule "nnf_notAnd" (formula "18") (term "0,0,0"))
            (rule "inEqSimp_notGeq" (formula "18") (term "0,0,0,0"))
            (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "0,0,0,0"))
            (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,0,0"))
            (rule "polySimp_rightDist" (formula "18") (term "1,0,0,0,0"))
            (rule "polySimp_mulLiterals" (formula "18") (term "1,1,0,0,0,0"))
            (rule "mul_literals" (formula "18") (term "0,1,0,0,0,0"))
            (rule "polySimp_elimOne" (formula "18") (term "1,1,0,0,0,0"))
            (rule "inEqSimp_notLeq" (formula "18") (term "1,0,0,0"))
            (rule "polySimp_rightDist" (formula "18") (term "1,0,0,1,0,0,0"))
            (rule "mul_literals" (formula "18") (term "0,1,0,0,1,0,0,0"))
            (rule "polySimp_addAssoc" (formula "18") (term "0,0,1,0,0,0"))
            (rule "add_literals" (formula "18") (term "0,0,0,1,0,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "18") (term "1,0,0,0"))
            (rule "polySimp_mulComm0" (formula "18") (term "1,1,0,0,0"))
            (rule "polySimp_rightDist" (formula "18") (term "1,1,0,0,0"))
            (rule "polySimp_mulLiterals" (formula "18") (term "1,1,1,0,0,0"))
            (rule "mul_literals" (formula "18") (term "0,1,1,0,0,0"))
            (rule "polySimp_elimOne" (formula "18") (term "1,1,1,0,0,0"))
            (rule "nnf_notAnd" (formula "18") (term "1,0,0"))
            (rule "inEqSimp_notLeq" (formula "18") (term "0,1,0,0"))
            (rule "mul_literals" (formula "18") (term "1,0,0,0,1,0,0"))
            (rule "add_literals" (formula "18") (term "0,0,0,1,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "18") (term "0,1,0,0"))
            (rule "mul_literals" (formula "18") (term "1,0,1,0,0"))
            (rule "inEqSimp_notGeq" (formula "18") (term "1,1,0,0"))
            (rule "mul_literals" (formula "18") (term "1,0,0,1,1,0,0"))
            (rule "add_literals" (formula "18") (term "0,0,1,1,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "1,1,0,0"))
            (rule "mul_literals" (formula "18") (term "1,1,1,0,0"))
            (rule "Class_invariant_axiom_for_de_wiesler_Storage" (formula "22"))
            (rule "Free_class_invariant_axiom_for_de_wiesler_Storage" (formula "13"))
             (builtin "One Step Simplification" (formula "13"))
            (rule "andLeft" (formula "13"))
            (rule "andLeft" (formula "14"))
            (rule "andLeft" (formula "13"))
            (rule "andLeft" (formula "15"))
            (rule "andLeft" (formula "13"))
            (rule "andLeft" (formula "16"))
            (rule "andLeft" (formula "13"))
            (rule "andLeft" (formula "17"))
            (rule "andLeft" (formula "13"))
            (rule "andLeft" (formula "18"))
            (rule "andLeft" (formula "13"))
            (rule "andLeft" (formula "19"))
            (rule "andLeft" (formula "13"))
            (rule "andLeft" (formula "20"))
            (rule "andLeft" (formula "13"))
            (rule "andLeft" (formula "21"))
            (rule "andLeft" (formula "13"))
            (rule "andLeft" (formula "22"))
            (rule "andLeft" (formula "22"))
            (rule "andLeft" (formula "22"))
            (rule "andLeft" (formula "22"))
            (rule "andLeft" (formula "22"))
            (rule "andLeft" (formula "22"))
            (rule "andLeft" (formula "22"))
            (rule "andLeft" (formula "22"))
            (rule "andLeft" (formula "22"))
            (rule "andLeft" (formula "22"))
            (rule "andLeft" (formula "22"))
            (rule "andLeft" (formula "22"))
            (rule "andLeft" (formula "22"))
            (rule "andLeft" (formula "22"))
            (rule "andLeft" (formula "22"))
            (rule "andLeft" (formula "22"))
            (rule "andLeft" (formula "22"))
            (rule "andLeft" (formula "22"))
            (rule "andLeft" (formula "22"))
            (rule "translateJavaMulInt" (formula "16") (term "1"))
            (rule "mul_literals" (formula "16") (term "1"))
            (rule "translateJavaMulInt" (formula "15") (term "1"))
            (rule "mul_literals" (formula "15") (term "1"))
            (rule "disjointDefinition" (formula "49"))
             (builtin "One Step Simplification" (formula "49"))
            (rule "notLeft" (formula "49"))
            (rule "disjointDefinition" (formula "48"))
             (builtin "One Step Simplification" (formula "48"))
            (rule "notLeft" (formula "48"))
            (rule "disjointDefinition" (formula "47"))
             (builtin "One Step Simplification" (formula "47"))
            (rule "notLeft" (formula "47"))
            (rule "eqSymm" (formula "53"))
            (rule "disjointDefinition" (formula "46"))
             (builtin "One Step Simplification" (formula "46"))
            (rule "notLeft" (formula "46"))
            (rule "eqSymm" (formula "52"))
            (rule "disjointDefinition" (formula "45"))
             (builtin "One Step Simplification" (formula "45"))
            (rule "notLeft" (formula "45"))
            (rule "eqSymm" (formula "51"))
            (rule "disjointDefinition" (formula "44"))
             (builtin "One Step Simplification" (formula "44"))
            (rule "notLeft" (formula "44"))
            (rule "eqSymm" (formula "50"))
            (rule "disjointDefinition" (formula "43"))
             (builtin "One Step Simplification" (formula "43"))
            (rule "notLeft" (formula "43"))
            (rule "eqSymm" (formula "49"))
            (rule "disjointDefinition" (formula "42"))
             (builtin "One Step Simplification" (formula "42"))
            (rule "notLeft" (formula "42"))
            (rule "eqSymm" (formula "48"))
            (rule "disjointDefinition" (formula "41"))
             (builtin "One Step Simplification" (formula "41"))
            (rule "notLeft" (formula "41"))
            (rule "eqSymm" (formula "47"))
            (rule "disjointDefinition" (formula "40"))
             (builtin "One Step Simplification" (formula "40"))
            (rule "notLeft" (formula "40"))
            (rule "eqSymm" (formula "46"))
            (rule "disjointDefinition" (formula "39"))
             (builtin "One Step Simplification" (formula "39"))
            (rule "notLeft" (formula "39"))
            (rule "eqSymm" (formula "45"))
            (rule "disjointDefinition" (formula "38"))
             (builtin "One Step Simplification" (formula "38"))
            (rule "notLeft" (formula "38"))
            (rule "eqSymm" (formula "44"))
            (rule "disjointDefinition" (formula "37"))
             (builtin "One Step Simplification" (formula "37"))
            (rule "notLeft" (formula "37"))
            (rule "eqSymm" (formula "43"))
            (rule "disjointDefinition" (formula "36"))
             (builtin "One Step Simplification" (formula "36"))
            (rule "notLeft" (formula "36"))
            (rule "eqSymm" (formula "42"))
            (rule "disjointDefinition" (formula "35"))
             (builtin "One Step Simplification" (formula "35"))
            (rule "notLeft" (formula "35"))
            (rule "eqSymm" (formula "41"))
            (rule "disjointDefinition" (formula "34"))
             (builtin "One Step Simplification" (formula "34"))
            (rule "notLeft" (formula "34"))
            (rule "disjointDefinition" (formula "33"))
             (builtin "One Step Simplification" (formula "33"))
            (rule "notLeft" (formula "33"))
            (rule "eqSymm" (formula "39"))
            (rule "disjointDefinition" (formula "32"))
             (builtin "One Step Simplification" (formula "32"))
            (rule "notLeft" (formula "32"))
            (rule "eqSymm" (formula "38"))
            (rule "disjointDefinition" (formula "31"))
             (builtin "One Step Simplification" (formula "31"))
            (rule "notLeft" (formula "31"))
            (rule "disjointDefinition" (formula "30"))
             (builtin "One Step Simplification" (formula "30"))
            (rule "notLeft" (formula "30"))
            (rule "disjointDefinition" (formula "29"))
             (builtin "One Step Simplification" (formula "29"))
            (rule "notLeft" (formula "29"))
            (rule "disjointDefinition" (formula "28"))
             (builtin "One Step Simplification" (formula "28"))
            (rule "notLeft" (formula "28"))
            (rule "disjointDefinition" (formula "27"))
             (builtin "One Step Simplification" (formula "27"))
            (rule "notLeft" (formula "27"))
            (rule "disjointDefinition" (formula "26"))
             (builtin "One Step Simplification" (formula "26"))
            (rule "notLeft" (formula "26"))
            (rule "disjointDefinition" (formula "25"))
             (builtin "One Step Simplification" (formula "25"))
            (rule "notLeft" (formula "25"))
            (rule "disjointDefinition" (formula "24"))
             (builtin "One Step Simplification" (formula "24"))
            (rule "notLeft" (formula "24"))
            (rule "disjointDefinition" (formula "23"))
             (builtin "One Step Simplification" (formula "23"))
            (rule "notLeft" (formula "23"))
            (rule "disjointDefinition" (formula "22"))
             (builtin "One Step Simplification" (formula "22"))
            (rule "notLeft" (formula "22"))
            (rule "applyEq" (formula "22") (term "1,0") (ifseqformula "21"))
            (rule "distributeIntersection" (formula "22") (term "0"))
            (rule "unionEqualsEmpty" (formula "22"))
            (rule "andLeft" (formula "22"))
            (rule "distributeIntersection" (formula "22") (term "0"))
            (rule "distributeIntersection" (formula "23") (term "0"))
            (rule "distributeIntersection" (formula "22") (term "1,0"))
            (rule "distributeIntersection" (formula "22") (term "0,0"))
            (rule "distributeIntersection" (formula "23") (term "0,0"))
            (rule "distributeIntersection" (formula "23") (term "1,0"))
            (rule "unionEqualsEmpty" (formula "22"))
            (rule "andLeft" (formula "22"))
            (rule "unionEqualsEmpty" (formula "24"))
            (rule "andLeft" (formula "24"))
            (rule "unionEqualsEmpty" (formula "22"))
             (builtin "One Step Simplification" (formula "22"))
            (rule "andLeft" (formula "22"))
            (rule "notLeft" (formula "22"))
            (rule "notLeft" (formula "22"))
            (rule "eqSymm" (formula "31"))
            (rule "eqSymm" (formula "30"))
            (rule "unionEqualsEmpty" (formula "22"))
             (builtin "One Step Simplification" (formula "22"))
            (rule "andLeft" (formula "22"))
            (rule "notLeft" (formula "23"))
            (rule "notLeft" (formula "22"))
            (rule "eqSymm" (formula "30"))
            (rule "eqSymm" (formula "29"))
            (rule "unionEqualsEmpty" (formula "23"))
             (builtin "One Step Simplification" (formula "23"))
            (rule "andLeft" (formula "23"))
            (rule "notLeft" (formula "24"))
            (rule "notLeft" (formula "23"))
            (rule "eqSymm" (formula "29"))
            (rule "eqSymm" (formula "28"))
            (rule "unionEqualsEmpty" (formula "22"))
             (builtin "One Step Simplification" (formula "22"))
            (rule "andLeft" (formula "22"))
            (rule "notLeft" (formula "22"))
            (rule "notLeft" (formula "22"))
            (rule "eqSymm" (formula "28"))
            (rule "eqSymm" (formula "27"))
            (rule "commuteUnion" (formula "21") (term "0,0,1"))
            (rule "commuteUnion" (formula "21") (term "1,1,1"))
            (rule "commuteUnion" (formula "21") (term "0,1"))
            (rule "Class_invariant_axiom_for_de_wiesler_Storage" (formula "9"))
            (rule "close" (formula "65") (ifseqformula "9"))
         )
         (branch "Case 2"
             (builtin "One Step Simplification" (formula "24"))
            (rule "closeTrue" (formula "24"))
         )
      )
      (branch "Exceptional Post (base_case_sort)"
          (builtin "One Step Simplification" (formula "18"))
          (builtin "One Step Simplification" (formula "21"))
         (rule "andLeft" (formula "18"))
         (rule "selectCreatedOfAnonAsFormulaEQ" (formula "19") (term "1,0") (ifseqformula "18"))
         (rule "andLeft" (formula "19"))
         (rule "andLeft" (formula "19"))
         (rule "notLeft" (formula "19"))
         (rule "close" (formula "21") (ifseqformula "20"))
      )
      (branch "Pre (base_case_sort)"
          (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "18")) (ifInst ""  (formula "2")) (ifInst ""  (formula "18")) (ifInst ""  (formula "3")))
         (rule "expand_inInt" (formula "19") (term "1"))
         (rule "expand_inInt" (formula "19") (term "0"))
         (rule "replace_int_MIN" (formula "19") (term "0,1,1"))
         (rule "replace_int_MAX" (formula "19") (term "1,0,1"))
         (rule "replace_int_MIN" (formula "19") (term "0,1,0"))
         (rule "replace_int_MAX" (formula "19") (term "1,0,0"))
         (rule "replace_known_left" (formula "19") (term "0,0") (ifseqformula "4"))
          (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "6")))
         (rule "inEqSimp_commuteLeq" (formula "19") (term "1"))
         (rule "replace_known_left" (formula "19") (term "1") (ifseqformula "7"))
          (builtin "One Step Simplification" (formula "19"))
         (rule "inEqSimp_leqRight" (formula "19"))
         (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
         (rule "polySimp_addComm1" (formula "1") (term "0"))
         (rule "add_literals" (formula "1") (term "0,0"))
         (rule "inEqSimp_homoInEq0" (formula "2"))
         (rule "polySimp_mulComm0" (formula "2") (term "1,0"))
         (rule "polySimp_rightDist" (formula "2") (term "1,0"))
         (rule "polySimp_mulAssoc" (formula "2") (term "0,1,0"))
         (rule "polySimp_mulComm0" (formula "2") (term "0,0,1,0"))
         (rule "polySimp_mulLiterals" (formula "2") (term "0,1,0"))
         (rule "polySimp_elimOne" (formula "2") (term "0,1,0"))
         (rule "polySimp_addAssoc" (formula "2") (term "0"))
         (rule "inEqSimp_homoInEq0" (formula "15"))
         (rule "polySimp_mulComm0" (formula "15") (term "1,0"))
         (rule "polySimp_rightDist" (formula "15") (term "1,0"))
         (rule "polySimp_mulAssoc" (formula "15") (term "0,1,0"))
         (rule "polySimp_mulComm0" (formula "15") (term "0,0,1,0"))
         (rule "polySimp_mulLiterals" (formula "15") (term "0,1,0"))
         (rule "polySimp_elimOne" (formula "15") (term "0,1,0"))
         (rule "polySimp_addAssoc" (formula "15") (term "0"))
         (rule "inEqSimp_sepNegMonomial1" (formula "1"))
         (rule "polySimp_mulLiterals" (formula "1") (term "0"))
         (rule "polySimp_elimOne" (formula "1") (term "0"))
         (rule "inEqSimp_sepNegMonomial1" (formula "2"))
         (rule "polySimp_mulLiterals" (formula "2") (term "0"))
         (rule "polySimp_elimOne" (formula "2") (term "0"))
         (rule "inEqSimp_sepNegMonomial1" (formula "15"))
         (rule "polySimp_mulLiterals" (formula "15") (term "0"))
         (rule "polySimp_elimOne" (formula "15") (term "0"))
         (rule "inEqSimp_contradInEq0" (formula "6") (ifseqformula "1"))
         (rule "qeq_literals" (formula "6") (term "0"))
          (builtin "One Step Simplification" (formula "6"))
         (rule "closeFalse" (formula "6"))
      )
   )
   (branch "if x false"
       (builtin "One Step Simplification" (formula "19"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "notLeft" (formula "1"))
      (rule "elim_double_block_2" (formula "19") (term "1"))
       (builtin "Use Operation Contract" (formula "19") (newnames "heapBefore_sample_sort,exc_51,heapAfter_sample_sort,anon_heap_sample_sort") (contract "de.wiesler.Sorter[de.wiesler.Sorter::sample_sort([I,int,int,de.wiesler.Storage)].JML normal_behavior operation contract.0"))
      (branch "Post (sample_sort)"
          (builtin "One Step Simplification" (formula "21"))
          (builtin "One Step Simplification" (formula "17"))
         (rule "andLeft" (formula "17"))
         (rule "andLeft" (formula "18"))
         (rule "andLeft" (formula "18"))
         (rule "andLeft" (formula "20"))
         (rule "andLeft" (formula "19"))
         (rule "andLeft" (formula "20"))
         (rule "translateJavaSubInt" (formula "17") (term "2,0,1,0"))
         (rule "polySimp_elimSub" (formula "17") (term "2,0,1,0"))
         (rule "mul_literals" (formula "17") (term "1,2,0,1,0"))
         (rule "polySimp_addComm0" (formula "17") (term "2,0,1,0"))
         (rule "narrowSelectArrayType" (formula "19") (term "2,1") (ifseqformula "1") (ifseqformula "25"))
         (rule "commuteUnion" (formula "17") (term "1,0"))
         (rule "methodCallEmpty" (formula "26") (term "1"))
         (rule "tryEmpty" (formula "26") (term "1"))
         (rule "emptyModality" (formula "26") (term "1"))
         (rule "andRight" (formula "26"))
         (branch "Case 1"
             (builtin "One Step Simplification" (formula "26") (ifInst ""  (formula "22")))
            (rule "closeTrue" (formula "26"))
         )
         (branch "Case 2"
             (builtin "One Step Simplification" (formula "26"))
            (rule "closeTrue" (formula "26"))
         )
      )
      (branch "Exceptional Post (sample_sort)"
          (builtin "One Step Simplification" (formula "21"))
          (builtin "One Step Simplification" (formula "17"))
         (rule "andLeft" (formula "17"))
         (rule "selectCreatedOfAnonAsFormulaEQ" (formula "18") (term "1,0") (ifseqformula "17"))
         (rule "andLeft" (formula "18"))
         (rule "andLeft" (formula "18"))
         (rule "andLeft" (formula "20"))
         (rule "notLeft" (formula "18"))
         (rule "close" (formula "21") (ifseqformula "20"))
      )
      (branch "Pre (sample_sort)"
          (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "9")) (ifInst ""  (formula "18")) (ifInst ""  (formula "17")) (ifInst ""  (formula "1")) (ifInst ""  (formula "18")) (ifInst ""  (formula "2")) (ifInst ""  (formula "17")) (ifInst ""  (formula "7")))
         (rule "expand_inInt" (formula "19") (term "0,0"))
         (rule "expand_inInt" (formula "19") (term "1,0"))
         (rule "replace_int_MIN" (formula "19") (term "0,1,0,0"))
         (rule "replace_int_MAX" (formula "19") (term "1,0,0,0"))
         (rule "replace_int_MIN" (formula "19") (term "0,1,1,0"))
         (rule "replace_int_MAX" (formula "19") (term "1,0,1,0"))
         (rule "translateJavaSubInt" (formula "19") (term "0,0,1"))
         (rule "replace_known_left" (formula "19") (term "0,0,0") (ifseqformula "3"))
          (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "5")))
         (rule "polySimp_elimSub" (formula "19") (term "0,0,1"))
         (rule "polySimp_addComm0" (formula "19") (term "0,0,1"))
         (rule "inEqSimp_leqRight" (formula "16"))
         (rule "mul_literals" (formula "1") (term "1,0,0"))
         (rule "add_literals" (formula "1") (term "0,0"))
         (rule "polySimp_addAssoc" (formula "1") (term "0"))
         (rule "measuredByCheck" (formula "19") (term "1") (ifseqformula "9"))
         (rule "precOfPair" (formula "19") (term "1"))
          (builtin "One Step Simplification" (formula "19"))
         (rule "precOfInt" (formula "19") (term "1,1"))
         (rule "less_literals" (formula "19") (term "1,1,1"))
          (builtin "One Step Simplification" (formula "19"))
         (rule "leq_literals" (formula "19") (term "1,1"))
          (builtin "One Step Simplification" (formula "19"))
         (rule "inEqSimp_commuteLeq" (formula "19") (term "1"))
         (rule "replace_known_left" (formula "19") (term "1") (ifseqformula "7"))
          (builtin "One Step Simplification" (formula "19"))
         (rule "inEqSimp_leqRight" (formula "19"))
         (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
         (rule "polySimp_addComm1" (formula "1") (term "0"))
         (rule "add_literals" (formula "1") (term "0,0"))
         (rule "inEqSimp_homoInEq0" (formula "15"))
         (rule "polySimp_mulComm0" (formula "15") (term "1,0"))
         (rule "polySimp_rightDist" (formula "15") (term "1,0"))
         (rule "polySimp_mulAssoc" (formula "15") (term "0,1,0"))
         (rule "polySimp_mulComm0" (formula "15") (term "0,0,1,0"))
         (rule "polySimp_mulLiterals" (formula "15") (term "0,1,0"))
         (rule "polySimp_elimOne" (formula "15") (term "0,1,0"))
         (rule "polySimp_addAssoc" (formula "15") (term "0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "2"))
         (rule "polySimp_mulComm0" (formula "2") (term "1"))
         (rule "polySimp_rightDist" (formula "2") (term "1"))
         (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
         (rule "mul_literals" (formula "2") (term "0,1"))
         (rule "polySimp_elimOne" (formula "2") (term "1,1"))
         (rule "inEqSimp_sepNegMonomial1" (formula "1"))
         (rule "polySimp_mulLiterals" (formula "1") (term "0"))
         (rule "polySimp_elimOne" (formula "1") (term "0"))
         (rule "inEqSimp_sepNegMonomial1" (formula "15"))
         (rule "polySimp_mulLiterals" (formula "15") (term "0"))
         (rule "polySimp_elimOne" (formula "15") (term "0"))
         (rule "inEqSimp_contradInEq0" (formula "12") (ifseqformula "1"))
         (rule "qeq_literals" (formula "12") (term "0"))
          (builtin "One Step Simplification" (formula "12"))
         (rule "closeFalse" (formula "12"))
      )
   )
)
)
}
