\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Thu Jun 02 21:42:14 CEST 2022
[NewSMT]NoTypeHierarchy=false
[Labels]UseOriginLabels=true
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[NewSMT]Presburger=false
[SMTSettings]invariantForall=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[Choice]DefaultChoices=JavaCard-JavaCard\\:on , Strings-Strings\\:on , assertions-assertions\\:safe , bigint-bigint\\:on , finalFields-finalFields\\:immutable , floatRules-floatRules\\:strictfpOnly , initialisation-initialisation\\:disableStaticInitialisation , intRules-intRules\\:arithmeticSemanticsCheckingOF , integerSimplificationRules-integerSimplificationRules\\:full , javaLoopTreatment-javaLoopTreatment\\:efficient , mergeGenerateIsWeakeningGoal-mergeGenerateIsWeakeningGoal\\:off , methodExpansion-methodExpansion\\:modularOnly , modelFields-modelFields\\:treatAsAxiom , moreSeqRules-moreSeqRules\\:on , permissions-permissions\\:off , programRules-programRules\\:Java , reach-reach\\:on , runtimeExceptions-runtimeExceptions\\:ban , sequences-sequences\\:on , wdChecks-wdChecks\\:off , wdOperator-wdOperator\\:L
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_SCOPE_INV_TACLET
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_DEF_OPS
[SMTSettings]SelectedTaclets=
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[Strategy]MaximumNumberOfAutomaticApplications=10000
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_DELAYED
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]MPS_OPTIONS_KEY=MPS_MERGE
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[Strategy]Timeout=-1
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_OFF
[SMTSettings]useUninterpretedMultiplication=true
[NewSMT]sqrtSMTTranslation=SMT
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT_INTERNAL
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[NewSMT]identifier=OPEN
[SMTSettings]maxGenericSorts=2
[StrategyProperty]OSS_OPTIONS_KEY=OSS_ON
[NewSMT]Axiomatisations=false
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
[SMTSettings]integersMinimum=-2147483645
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]integersMaximum=2147483645
"
}

\javaSource "../../src";

\proofObligation "#Proof Obligation Settings
#Thu Jun 02 21:42:14 CEST 2022
contract=de.wiesler.Sorter[de.wiesler.Sorter\\:\\:sort([I)].JML normal_behavior operation contract.0
name=de.wiesler.Sorter[de.wiesler.Sorter\\:\\:sort([I)].JML normal_behavior operation contract.0
class=de.uka.ilkd.key.proof.init.FunctionalOperationContractPO
";

\proof {
(keyLog "0" (keyUser "Julian" ) (keyVersion "e1a85b31e7"))

(autoModeTime "328")

(branch "dummy ID"
 (builtin "One Step Simplification" (formula "1") (newnames "heapAtPre_0,o,f"))
(rule "impRight" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "3"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "4"))
(rule "replace_known_right" (formula "2") (term "0") (ifseqformula "5"))
 (builtin "One Step Simplification" (formula "2"))
(rule "assignment" (formula "6") (term "1"))
 (builtin "One Step Simplification" (formula "6"))
(rule "methodBodyExpand" (formula "6") (term "1") (newnames "heapBefore_sort,savedHeapBefore_sort"))
 (builtin "One Step Simplification" (formula "6"))
(rule "variableDeclarationAssign" (formula "6") (term "1"))
(rule "variableDeclaration" (formula "6") (term "1") (newnames "storage"))
 (builtin "Use Operation Contract" (formula "6") (newnames "heapBefore_Storage,self_25,exc_25,heapAfter_Storage,anon_heap_Storage") (contract "de.wiesler.Storage[de.wiesler.Storage::Storage()].JML normal_behavior operation contract.0"))
(branch "Post (Storage)"
    (builtin "One Step Simplification" (formula "6"))
    (builtin "One Step Simplification" (formula "8"))
   (rule "andLeft" (formula "6"))
   (rule "selectCreatedOfAnonAsFormulaEQ" (formula "7") (term "1,1,0,0,1,0") (ifseqformula "6"))
   (rule "andLeft" (formula "7"))
   (rule "andLeft" (formula "7"))
   (rule "andLeft" (formula "9"))
   (rule "andLeft" (formula "8"))
   (rule "andLeft" (formula "8"))
   (rule "andLeft" (formula "10"))
   (rule "andLeft" (formula "8"))
   (rule "notLeft" (formula "8"))
   (rule "andLeft" (formula "8"))
   (rule "notLeft" (formula "8"))
   (rule "replace_known_right" (formula "8") (term "0") (ifseqformula "13"))
    (builtin "One Step Simplification" (formula "8"))
   (rule "assignment" (formula "16") (term "1"))
    (builtin "One Step Simplification" (formula "16"))
    (builtin "Block Contract (Internal)" (formula "16") (newnames "exc_26,heap_Before_BLOCK,savedHeap_Before_BLOCK,o,f"))
   (branch "Validity"
       (builtin "One Step Simplification" (formula "13") (ifInst ""  (formula "3")))
       (builtin "One Step Simplification" (formula "17"))
      (rule "eqSymm" (formula "17") (term "0,0,1,0,1"))
      (rule "variableDeclarationAssign" (formula "17") (term "1"))
      (rule "variableDeclaration" (formula "17") (term "1") (newnames "exc_26_1"))
      (rule "assignment" (formula "17") (term "1"))
       (builtin "One Step Simplification" (formula "17"))
      (rule "emptyStatement" (formula "17") (term "1"))
      (rule "emptyStatement" (formula "17") (term "1"))
      (rule "tryEmpty" (formula "17") (term "1"))
      (rule "blockEmptyLabel" (formula "17") (term "1"))
      (rule "blockEmpty" (formula "17") (term "1"))
      (rule "methodCallEmpty" (formula "17") (term "1"))
      (rule "emptyModality" (formula "17") (term "1"))
      (rule "andRight" (formula "17"))
      (branch
          (builtin "One Step Simplification" (formula "17"))
         (rule "closeTrue" (formula "17"))
      )
      (branch
          (builtin "One Step Simplification" (formula "17"))
         (rule "closeTrue" (formula "17"))
      )
   )
   (branch "Precondition"
      (rule "andRight" (formula "16"))
      (branch
          (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "3")))
         (rule "closeTrue" (formula "16"))
      )
      (branch
          (builtin "One Step Simplification" (formula "16"))
         (rule "wellFormedAnonEQ" (formula "16") (ifseqformula "6"))
         (rule "replace_known_left" (formula "16") (term "1") (ifseqformula "5"))
          (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "1")))
         (rule "closeTrue" (formula "16"))
      )
   )
   (branch "Usage"
       (builtin "One Step Simplification" (formula "13"))
       (builtin "One Step Simplification" (formula "17"))
      (rule "selectCreatedOfAnonAsFormulaEQ" (formula "13") (term "1,1") (ifseqformula "6"))
      (rule "andLeft" (formula "13"))
      (rule "replace_known_left" (formula "14") (term "0") (ifseqformula "13"))
       (builtin "One Step Simplification" (formula "14"))
      (rule "true_left" (formula "14"))
      (rule "elim_double_block_2" (formula "17") (term "1"))
      (rule "ifUnfold" (formula "17") (term "1") (inst "#boolv=x"))
      (rule "variableDeclaration" (formula "17") (term "1") (newnames "x"))
      (rule "inequality_comparison_simple" (formula "17") (term "1"))
       (builtin "One Step Simplification" (formula "17"))
      (rule "replace_known_left" (formula "17") (term "0,0,1,0") (ifseqformula "13"))
       (builtin "One Step Simplification" (formula "17"))
      (rule "ifSplit" (formula "17"))
      (branch "if x true"
          (builtin "One Step Simplification" (formula "18"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "closeFalse" (formula "1"))
      )
      (branch "if x false"
          (builtin "One Step Simplification" (formula "18"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "true_left" (formula "1"))
         (rule "blockEmpty" (formula "17") (term "1"))
         (rule "methodCallUnfoldArguments" (formula "17") (term "1"))
         (rule "variableDeclarationAssign" (formula "17") (term "1"))
         (rule "variableDeclaration" (formula "17") (term "1") (newnames "var"))
         (rule "assignment" (formula "17") (term "1"))
          (builtin "One Step Simplification" (formula "17"))
         (rule "variableDeclarationAssign" (formula "17") (term "1"))
         (rule "variableDeclaration" (formula "17") (term "1") (newnames "var_1"))
         (rule "assignment" (formula "17") (term "1"))
          (builtin "One Step Simplification" (formula "17"))
         (rule "variableDeclarationAssign" (formula "17") (term "1"))
         (rule "variableDeclaration" (formula "17") (term "1") (newnames "var_2"))
         (rule "assignment_read_length" (formula "17"))
         (branch "Normal Execution (_values != null)"
             (builtin "One Step Simplification" (formula "17"))
            (rule "variableDeclarationAssign" (formula "17") (term "1"))
            (rule "variableDeclaration" (formula "17") (term "1") (newnames "var_3"))
            (rule "assignment" (formula "17") (term "1"))
             (builtin "One Step Simplification" (formula "17"))
             (builtin "Use Operation Contract" (formula "17") (newnames "heapBefore_sort_0,exc_27,heapAfter_sort,anon_heap_sort") (contract "de.wiesler.Sorter[de.wiesler.Sorter::sort([I,int,int,de.wiesler.Storage)].JML normal_behavior operation contract.0"))
            (branch "Post (sort)"
                (builtin "One Step Simplification" (formula "15"))
                (builtin "One Step Simplification" (formula "19"))
               (rule "andLeft" (formula "15"))
               (rule "andLeft" (formula "16"))
               (rule "andLeft" (formula "17"))
               (rule "andLeft" (formula "16"))
               (rule "andLeft" (formula "16"))
               (rule "andLeft" (formula "17"))
               (rule "translateJavaSubInt" (formula "15") (term "2,0,1,0"))
               (rule "polySimp_elimSub" (formula "15") (term "2,0,1,0"))
               (rule "mul_literals" (formula "15") (term "1,2,0,1,0"))
               (rule "polySimp_addComm0" (formula "15") (term "2,0,1,0"))
               (rule "commuteUnion" (formula "15") (term "1,0"))
               (rule "methodCallEmpty" (formula "24") (term "1"))
               (rule "tryEmpty" (formula "24") (term "1"))
                (builtin "One Step Simplification" (formula "24"))
               (rule "emptyModality" (formula "24") (term "1"))
                (builtin "One Step Simplification" (formula "24"))
               (rule "closeTrue" (formula "24"))
            )
            (branch "Exceptional Post (sort)"
                (builtin "One Step Simplification" (formula "15"))
                (builtin "One Step Simplification" (formula "19"))
               (rule "andLeft" (formula "15"))
               (rule "selectCreatedOfAnonAsFormulaEQ" (formula "16") (term "1,0") (ifseqformula "15"))
               (rule "selectCreatedOfAnonAsFormulaEQ" (formula "16") (term "0,1,0") (ifseqformula "6"))
               (rule "andLeft" (formula "16"))
               (rule "andLeft" (formula "17"))
               (rule "andLeft" (formula "16"))
               (rule "notLeft" (formula "16"))
               (rule "close" (formula "19") (ifseqformula "18"))
            )
            (branch "Pre (sort)"
                (builtin "One Step Simplification" (formula "17") (ifInst ""  (formula "12")) (ifInst ""  (formula "16")) (ifInst ""  (formula "15")) (ifInst ""  (formula "16")) (ifInst ""  (formula "15")))
               (rule "selectCreatedOfAnonAsFormulaEQ" (formula "17") (term "1,0") (ifseqformula "6"))
               (rule "wellFormedAnonEQ" (formula "17") (term "0,0,0,0,0") (ifseqformula "6"))
               (rule "selectCreatedOfAnonAsFormulaEQ" (formula "17") (term "1,0,0,0,0") (ifseqformula "6"))
               (rule "expand_inInt" (formula "17") (term "1,0,0,0"))
               (rule "expand_inInt" (formula "17") (term "1,0,0"))
               (rule "replace_int_MAX" (formula "17") (term "1,0,1,0,0,0"))
               (rule "replace_int_MIN" (formula "17") (term "0,1,1,0,0,0"))
               (rule "replace_int_MIN" (formula "17") (term "0,1,1,0,0"))
               (rule "replace_int_MAX" (formula "17") (term "1,0,1,0,0"))
               (rule "leq_literals" (formula "17") (term "0,1,0,0,0"))
                (builtin "One Step Simplification" (formula "17") (ifInst ""  (formula "1")) (ifInst ""  (formula "5")) (ifInst ""  (formula "2")) (ifInst ""  (formula "14")) (ifInst ""  (formula "8")))
               (rule "leq_literals" (formula "17") (term "0,0"))
                (builtin "One Step Simplification" (formula "17"))
               (rule "translateJavaSubInt" (formula "17") (term "0,0,1"))
               (rule "polySimp_elimSub" (formula "17") (term "0,0,1"))
               (rule "mul_literals" (formula "17") (term "1,0,0,1"))
               (rule "add_zero_right" (formula "17") (term "0,0,1"))
               (rule "measuredByCheckEmpty" (formula "17") (term "1") (ifseqformula "3"))
                (builtin "One Step Simplification" (formula "17"))
               (rule "inEqSimp_commuteLeq" (formula "17") (term "1"))
               (rule "inEqSimp_subsumption0" (formula "17") (term "0") (ifseqformula "4"))
               (rule "leq_literals" (formula "17") (term "0,0"))
                (builtin "One Step Simplification" (formula "17"))
               (rule "inEqSimp_geqRight" (formula "17"))
               (rule "mul_literals" (formula "1") (term "1,0,0"))
               (rule "add_literals" (formula "1") (term "0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "1"))
               (rule "mul_literals" (formula "1") (term "1"))
               (rule "inEqSimp_subsumption0" (formula "5") (ifseqformula "1"))
               (rule "leq_literals" (formula "5") (term "0"))
                (builtin "One Step Simplification" (formula "5"))
               (rule "true_left" (formula "5"))
               (rule "Class_invariant_axiom_for_de_wiesler_Storage" (formula "12"))
               (rule "andLeft" (formula "12"))
               (rule "notLeft" (formula "13"))
               (rule "andLeft" (formula "12"))
               (rule "andLeft" (formula "12"))
               (rule "notLeft" (formula "14"))
               (rule "andLeft" (formula "12"))
               (rule "notLeft" (formula "14"))
               (rule "andLeft" (formula "12"))
               (rule "notLeft" (formula "14"))
               (rule "andLeft" (formula "12"))
               (rule "notLeft" (formula "14"))
               (rule "notLeft" (formula "13"))
               (rule "andLeft" (formula "12"))
               (rule "notLeft" (formula "13"))
               (rule "notLeft" (formula "12"))
               (rule "Free_class_invariant_axiom_for_de_wiesler_Storage" (formula "11"))
                (builtin "One Step Simplification" (formula "11"))
               (rule "andLeft" (formula "11"))
               (rule "andLeft" (formula "12"))
               (rule "andLeft" (formula "11"))
               (rule "andLeft" (formula "13"))
               (rule "andLeft" (formula "11"))
               (rule "andLeft" (formula "14"))
               (rule "andLeft" (formula "11"))
               (rule "andLeft" (formula "15"))
               (rule "andLeft" (formula "11"))
               (rule "andLeft" (formula "16"))
               (rule "andLeft" (formula "11"))
               (rule "andLeft" (formula "17"))
               (rule "andLeft" (formula "11"))
               (rule "andLeft" (formula "18"))
               (rule "andLeft" (formula "11"))
               (rule "andLeft" (formula "19"))
               (rule "andLeft" (formula "11"))
               (rule "andLeft" (formula "20"))
               (rule "andLeft" (formula "20"))
               (rule "andLeft" (formula "20"))
               (rule "andLeft" (formula "20"))
               (rule "andLeft" (formula "20"))
               (rule "andLeft" (formula "20"))
               (rule "andLeft" (formula "20"))
               (rule "andLeft" (formula "20"))
               (rule "andLeft" (formula "20"))
               (rule "andLeft" (formula "20"))
               (rule "andLeft" (formula "20"))
               (rule "andLeft" (formula "20"))
               (rule "andLeft" (formula "20"))
               (rule "andLeft" (formula "20"))
               (rule "andLeft" (formula "20"))
               (rule "andLeft" (formula "20"))
               (rule "andLeft" (formula "20"))
               (rule "andLeft" (formula "20"))
               (rule "andLeft" (formula "20"))
               (rule "translateJavaMulInt" (formula "14") (term "1"))
               (rule "mul_literals" (formula "14") (term "1"))
               (rule "translateJavaMulInt" (formula "13") (term "1"))
               (rule "mul_literals" (formula "13") (term "1"))
               (rule "disjointDefinition" (formula "47"))
                (builtin "One Step Simplification" (formula "47"))
               (rule "notLeft" (formula "47"))
               (rule "disjointDefinition" (formula "46"))
                (builtin "One Step Simplification" (formula "46"))
               (rule "notLeft" (formula "46"))
               (rule "disjointDefinition" (formula "45"))
                (builtin "One Step Simplification" (formula "45"))
               (rule "notLeft" (formula "45"))
               (rule "eqSymm" (formula "46"))
               (rule "disjointDefinition" (formula "44"))
                (builtin "One Step Simplification" (formula "44"))
               (rule "notLeft" (formula "44"))
               (rule "eqSymm" (formula "45"))
               (rule "disjointDefinition" (formula "43"))
                (builtin "One Step Simplification" (formula "43"))
               (rule "notLeft" (formula "43"))
               (rule "eqSymm" (formula "44"))
               (rule "disjointDefinition" (formula "42"))
                (builtin "One Step Simplification" (formula "42"))
               (rule "notLeft" (formula "42"))
               (rule "eqSymm" (formula "43"))
               (rule "disjointDefinition" (formula "41"))
                (builtin "One Step Simplification" (formula "41"))
               (rule "notLeft" (formula "41"))
               (rule "eqSymm" (formula "42"))
               (rule "disjointDefinition" (formula "40"))
                (builtin "One Step Simplification" (formula "40"))
               (rule "notLeft" (formula "40"))
               (rule "eqSymm" (formula "41"))
               (rule "disjointDefinition" (formula "39"))
                (builtin "One Step Simplification" (formula "39"))
               (rule "notLeft" (formula "39"))
               (rule "eqSymm" (formula "40"))
               (rule "disjointDefinition" (formula "38"))
                (builtin "One Step Simplification" (formula "38"))
               (rule "notLeft" (formula "38"))
               (rule "eqSymm" (formula "39"))
               (rule "disjointDefinition" (formula "37"))
                (builtin "One Step Simplification" (formula "37"))
               (rule "notLeft" (formula "37"))
               (rule "eqSymm" (formula "38"))
               (rule "disjointDefinition" (formula "36"))
                (builtin "One Step Simplification" (formula "36"))
               (rule "notLeft" (formula "36"))
               (rule "eqSymm" (formula "37"))
               (rule "disjointDefinition" (formula "35"))
                (builtin "One Step Simplification" (formula "35"))
               (rule "notLeft" (formula "35"))
               (rule "eqSymm" (formula "36"))
               (rule "disjointDefinition" (formula "34"))
                (builtin "One Step Simplification" (formula "34"))
               (rule "notLeft" (formula "34"))
               (rule "eqSymm" (formula "35"))
               (rule "disjointDefinition" (formula "33"))
                (builtin "One Step Simplification" (formula "33"))
               (rule "notLeft" (formula "33"))
               (rule "eqSymm" (formula "34"))
               (rule "disjointDefinition" (formula "32"))
                (builtin "One Step Simplification" (formula "32"))
               (rule "notLeft" (formula "32"))
               (rule "disjointDefinition" (formula "31"))
                (builtin "One Step Simplification" (formula "31"))
               (rule "notLeft" (formula "31"))
               (rule "eqSymm" (formula "32"))
               (rule "disjointDefinition" (formula "30"))
                (builtin "One Step Simplification" (formula "30"))
               (rule "notLeft" (formula "30"))
               (rule "eqSymm" (formula "31"))
               (rule "disjointDefinition" (formula "29"))
                (builtin "One Step Simplification" (formula "29"))
               (rule "notLeft" (formula "29"))
               (rule "disjointDefinition" (formula "28"))
                (builtin "One Step Simplification" (formula "28"))
               (rule "notLeft" (formula "28"))
               (rule "disjointDefinition" (formula "27"))
                (builtin "One Step Simplification" (formula "27"))
               (rule "notLeft" (formula "27"))
               (rule "disjointDefinition" (formula "26"))
                (builtin "One Step Simplification" (formula "26"))
               (rule "notLeft" (formula "26"))
               (rule "disjointDefinition" (formula "25"))
                (builtin "One Step Simplification" (formula "25"))
               (rule "notLeft" (formula "25"))
               (rule "disjointDefinition" (formula "24"))
                (builtin "One Step Simplification" (formula "24"))
               (rule "notLeft" (formula "24"))
               (rule "disjointDefinition" (formula "23"))
                (builtin "One Step Simplification" (formula "23"))
               (rule "notLeft" (formula "23"))
               (rule "disjointDefinition" (formula "22"))
                (builtin "One Step Simplification" (formula "22"))
               (rule "notLeft" (formula "22"))
               (rule "disjointDefinition" (formula "20"))
                (builtin "One Step Simplification" (formula "20"))
               (rule "notLeft" (formula "20"))
               (rule "disjointDefinition" (formula "20"))
                (builtin "One Step Simplification" (formula "20"))
               (rule "notLeft" (formula "20"))
               (rule "applyEq" (formula "10") (term "0") (ifseqformula "19"))
               (rule "subsetUnionLeft" (formula "10"))
               (rule "andLeft" (formula "10"))
               (rule "subsetUnionLeft" (formula "11"))
               (rule "andLeft" (formula "11"))
               (rule "subsetUnionLeft" (formula "10"))
               (rule "andLeft" (formula "10"))
               (rule "subsetUnionLeft" (formula "13"))
               (rule "andLeft" (formula "13"))
               (rule "subsetUnionLeft" (formula "12"))
               (rule "andLeft" (formula "12"))
               (rule "subsetUnionLeft" (formula "11"))
               (rule "andLeft" (formula "11"))
               (rule "subsetUnionLeft" (formula "10"))
               (rule "andLeft" (formula "10"))
               (rule "commuteUnion_2" (formula "26") (term "0,1"))
               (rule "commuteUnion" (formula "26") (term "1,1,1"))
               (rule "commuteUnion" (formula "26") (term "0,0,1"))
               (rule "commuteUnion_2" (formula "26") (term "0,1"))
               (rule "commuteUnion_2" (formula "26") (term "1"))
               (rule "associativeLawUnion" (formula "26") (term "0,1"))
               (rule "associativeLawUnion" (formula "26") (term "0,1"))
               (rule "arrayLengthIsAShort" (formula "1") (term "0"))
               (rule "expand_inShort" (formula "1"))
               (rule "replace_short_MAX" (formula "1") (term "1,0"))
               (rule "replace_short_MIN" (formula "1") (term "0,1"))
               (rule "andLeft" (formula "1"))
               (rule "inEqSimp_commuteLeq" (formula "2"))
               (rule "inEqSimp_contradInEq1" (formula "3") (ifseqformula "2"))
               (rule "qeq_literals" (formula "3") (term "0"))
                (builtin "One Step Simplification" (formula "3"))
               (rule "closeFalse" (formula "3"))
            )
         )
         (branch "Null Reference (_values = null)"
             (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "17")))
            (rule "closeFalse" (formula "1"))
         )
      )
   )
)
(branch "Exceptional Post (Storage)"
    (builtin "One Step Simplification" (formula "8"))
    (builtin "One Step Simplification" (formula "6"))
   (rule "andLeft" (formula "6"))
   (rule "selectCreatedOfAnonAsFormulaEQ" (formula "7") (term "1,0,0") (ifseqformula "6"))
   (rule "selectCreatedOfAnonAsFormulaEQ" (formula "7") (term "1,1,0,0,1,0") (ifseqformula "6"))
   (rule "andLeft" (formula "7"))
   (rule "andLeft" (formula "8"))
   (rule "andLeft" (formula "7"))
   (rule "andLeft" (formula "7"))
   (rule "andLeft" (formula "9"))
   (rule "notLeft" (formula "7"))
   (rule "close" (formula "12") (ifseqformula "11"))
)
(branch "Pre (Storage)"
    (builtin "One Step Simplification" (formula "6") (ifInst ""  (formula "1")))
   (rule "closeTrue" (formula "6"))
)
)
}
