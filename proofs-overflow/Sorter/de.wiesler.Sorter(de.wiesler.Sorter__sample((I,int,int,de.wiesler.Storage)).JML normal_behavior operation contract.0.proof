\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Thu Jun 02 21:45:21 CEST 2022
[NewSMT]NoTypeHierarchy=false
[Labels]UseOriginLabels=true
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[NewSMT]Presburger=false
[SMTSettings]invariantForall=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[Choice]DefaultChoices=JavaCard-JavaCard\\:on , Strings-Strings\\:on , assertions-assertions\\:safe , bigint-bigint\\:on , finalFields-finalFields\\:immutable , floatRules-floatRules\\:strictfpOnly , initialisation-initialisation\\:disableStaticInitialisation , intRules-intRules\\:arithmeticSemanticsCheckingOF , integerSimplificationRules-integerSimplificationRules\\:full , javaLoopTreatment-javaLoopTreatment\\:efficient , mergeGenerateIsWeakeningGoal-mergeGenerateIsWeakeningGoal\\:off , methodExpansion-methodExpansion\\:modularOnly , modelFields-modelFields\\:treatAsAxiom , moreSeqRules-moreSeqRules\\:on , permissions-permissions\\:off , programRules-programRules\\:Java , reach-reach\\:on , runtimeExceptions-runtimeExceptions\\:ban , sequences-sequences\\:on , wdChecks-wdChecks\\:off , wdOperator-wdOperator\\:L
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_SCOPE_INV_TACLET
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_DEF_OPS
[SMTSettings]SelectedTaclets=
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[Strategy]MaximumNumberOfAutomaticApplications=10000
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_DELAYED
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]MPS_OPTIONS_KEY=MPS_MERGE
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[Strategy]Timeout=-1
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_OFF
[SMTSettings]useUninterpretedMultiplication=true
[NewSMT]sqrtSMTTranslation=SMT
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT_INTERNAL
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[NewSMT]identifier=OPEN
[SMTSettings]maxGenericSorts=2
[StrategyProperty]OSS_OPTIONS_KEY=OSS_ON
[NewSMT]Axiomatisations=false
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
[SMTSettings]integersMinimum=-2147483645
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]integersMaximum=2147483645
"
}

\javaSource "../../src";

\proofObligation "#Proof Obligation Settings
#Thu Jun 02 21:45:21 CEST 2022
contract=de.wiesler.Sorter[de.wiesler.Sorter\\:\\:sample([I,int,int,de.wiesler.Storage)].JML normal_behavior operation contract.0
name=de.wiesler.Sorter[de.wiesler.Sorter\\:\\:sample([I,int,int,de.wiesler.Storage)].JML normal_behavior operation contract.0
class=de.uka.ilkd.key.proof.init.FunctionalOperationContractPO
";

\proof {
(keyLog "0" (keyUser "Julian" ) (keyVersion "e1a85b31e7"))

(autoModeTime "5899")

(branch "dummy ID"
(rule "eqSymm" (formula "1") (term "1,0,0,1,0,1,1") (newnames "heapAtPre_0,o,f"))
 (builtin "One Step Simplification" (formula "1"))
(rule "expand_inInt" (formula "1") (term "1,0,0,1,0,0,0"))
(rule "expand_inInt" (formula "1") (term "1,0,1,0,0,0"))
(rule "replace_int_MAX" (formula "1") (term "1,0,1,0,0,1,0,0,0"))
(rule "replace_int_MIN" (formula "1") (term "0,1,1,0,0,1,0,0,0"))
(rule "replace_int_MIN" (formula "1") (term "0,1,1,0,1,0,0,0"))
(rule "replace_int_MAX" (formula "1") (term "1,0,1,0,1,0,0,0"))
(rule "impRight" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "2"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "3"))
(rule "andLeft" (formula "5"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "5"))
(rule "andLeft" (formula "7"))
(rule "andLeft" (formula "9"))
(rule "andLeft" (formula "2"))
(rule "notLeft" (formula "6"))
(rule "notLeft" (formula "6"))
(rule "andLeft" (formula "6"))
(rule "andLeft" (formula "9"))
(rule "andLeft" (formula "11"))
(rule "andLeft" (formula "2"))
(rule "andLeft" (formula "2"))
(rule "andLeft" (formula "4"))
(rule "andLeft" (formula "3"))
(rule "translateJavaSubInt" (formula "8") (term "0,0"))
(rule "translateJavaSubInt" (formula "13") (term "1"))
(rule "translateJavaSubInt" (formula "14") (term "0"))
(rule "replace_known_right" (formula "7") (term "0") (ifseqformula "17"))
 (builtin "One Step Simplification" (formula "7"))
(rule "replace_known_right" (formula "2") (term "0") (ifseqformula "18"))
 (builtin "One Step Simplification" (formula "2"))
(rule "polySimp_elimSub" (formula "8") (term "0,0"))
(rule "polySimp_elimSub" (formula "13") (term "1"))
(rule "polySimp_elimSub" (formula "14") (term "0"))
(rule "polySimp_addComm0" (formula "8") (term "0,0"))
(rule "polySimp_addComm0" (formula "13") (term "1"))
(rule "polySimp_addComm0" (formula "14") (term "0"))
(rule "disjointDefinition" (formula "16"))
(rule "inEqSimp_commuteLeq" (formula "12"))
(rule "inEqSimp_commuteLeq" (formula "10"))
(rule "inEqSimp_commuteLeq" (formula "11"))
(rule "inEqSimp_commuteLeq" (formula "6"))
(rule "inEqSimp_commuteLeq" (formula "4"))
(rule "assignment" (formula "19") (term "1"))
 (builtin "One Step Simplification" (formula "19"))
(rule "commuteIntersection" (formula "16") (term "0"))
(rule "methodBodyExpand" (formula "19") (term "1") (newnames "heapBefore_sample,savedHeapBefore_sample,savedHeapBefore_sample_0"))
 (builtin "One Step Simplification" (formula "19"))
(rule "variableDeclarationAssign" (formula "19") (term "1"))
(rule "variableDeclaration" (formula "19") (term "1") (newnames "parameters"))
(rule "instanceCreationAssignmentUnfoldArguments" (formula "19") (term "1"))
(rule "variableDeclarationAssign" (formula "19") (term "1"))
(rule "variableDeclaration" (formula "19") (term "1") (newnames "var"))
(rule "assignmentSubtractionInt" (formula "19") (term "1"))
(branch "Overflow check"
    (builtin "One Step Simplification" (formula "19"))
   (rule "expand_inInt" (formula "19"))
   (rule "replace_int_MIN" (formula "19") (term "0,1"))
   (rule "replace_int_MAX" (formula "19") (term "1,0"))
   (rule "polySimp_elimSub" (formula "19") (term "0,0"))
   (rule "polySimp_elimSub" (formula "19") (term "1,1"))
   (rule "polySimp_addComm0" (formula "19") (term "0,0"))
   (rule "polySimp_addComm0" (formula "19") (term "1,1"))
   (rule "inEqSimp_ltToLeq" (formula "13"))
   (rule "polySimp_rightDist" (formula "13") (term "1,0,0"))
   (rule "polySimp_mulAssoc" (formula "13") (term "0,1,0,0"))
   (rule "polySimp_mulComm0" (formula "13") (term "0,0,1,0,0"))
   (rule "polySimp_mulLiterals" (formula "13") (term "0,1,0,0"))
   (rule "polySimp_elimOne" (formula "13") (term "0,1,0,0"))
   (rule "polySimp_addAssoc" (formula "13") (term "0,0"))
   (rule "polySimp_addComm1" (formula "13") (term "0"))
   (rule "polySimp_addComm1" (formula "13") (term "0,0"))
   (rule "add_literals" (formula "13") (term "0,0,0"))
   (rule "inEqSimp_homoInEq0" (formula "14"))
   (rule "polySimp_mulComm0" (formula "14") (term "1,0"))
   (rule "polySimp_rightDist" (formula "14") (term "1,0"))
   (rule "polySimp_mulAssoc" (formula "14") (term "0,1,0"))
   (rule "polySimp_mulComm0" (formula "14") (term "0,0,1,0"))
   (rule "polySimp_mulLiterals" (formula "14") (term "0,1,0"))
   (rule "polySimp_elimOne" (formula "14") (term "0,1,0"))
   (rule "polySimp_addAssoc" (formula "14") (term "0"))
   (rule "inEqSimp_homoInEq0" (formula "19") (term "0"))
   (rule "polySimp_mulComm0" (formula "19") (term "1,0,0"))
   (rule "polySimp_rightDist" (formula "19") (term "1,0,0"))
   (rule "polySimp_mulAssoc" (formula "19") (term "0,1,0,0"))
   (rule "polySimp_mulComm0" (formula "19") (term "0,0,1,0,0"))
   (rule "polySimp_mulLiterals" (formula "19") (term "0,1,0,0"))
   (rule "polySimp_elimOne" (formula "19") (term "0,1,0,0"))
   (rule "polySimp_addAssoc" (formula "19") (term "0,0"))
   (rule "inEqSimp_homoInEq0" (formula "19") (term "1"))
   (rule "mul_literals" (formula "19") (term "1,0,1"))
   (rule "polySimp_addComm1" (formula "19") (term "0,1"))
   (rule "polySimp_addComm0" (formula "19") (term "0,0,1"))
   (rule "inEqSimp_sepNegMonomial0" (formula "13"))
   (rule "polySimp_mulLiterals" (formula "13") (term "0"))
   (rule "polySimp_elimOne" (formula "13") (term "0"))
   (rule "inEqSimp_sepNegMonomial1" (formula "14"))
   (rule "polySimp_mulLiterals" (formula "14") (term "0"))
   (rule "polySimp_elimOne" (formula "14") (term "0"))
   (rule "inEqSimp_sepNegMonomial1" (formula "19") (term "0"))
   (rule "polySimp_mulLiterals" (formula "19") (term "0,0"))
   (rule "polySimp_elimOne" (formula "19") (term "0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "19") (term "1"))
   (rule "polySimp_mulComm0" (formula "19") (term "1,1"))
   (rule "polySimp_rightDist" (formula "19") (term "1,1"))
   (rule "mul_literals" (formula "19") (term "0,1,1"))
   (rule "polySimp_mulLiterals" (formula "19") (term "1,1,1"))
   (rule "polySimp_elimOne" (formula "19") (term "1,1,1"))
   (rule "inEqSimp_subsumption1" (formula "11") (ifseqformula "13"))
   (rule "inEqSimp_homoInEq0" (formula "11") (term "0"))
   (rule "polySimp_pullOutFactor1b" (formula "11") (term "0,0"))
   (rule "add_literals" (formula "11") (term "1,1,0,0"))
   (rule "times_zero_1" (formula "11") (term "1,0,0"))
   (rule "add_zero_right" (formula "11") (term "0,0"))
   (rule "qeq_literals" (formula "11") (term "0"))
    (builtin "One Step Simplification" (formula "11"))
   (rule "true_left" (formula "11"))
   (rule "inEqSimp_subsumption1" (formula "4") (ifseqformula "10"))
   (rule "leq_literals" (formula "4") (term "0"))
    (builtin "One Step Simplification" (formula "4"))
   (rule "true_left" (formula "4"))
   (rule "inEqSimp_subsumption1" (formula "17") (term "1") (ifseqformula "11"))
   (rule "inEqSimp_homoInEq0" (formula "17") (term "0,1"))
   (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,1"))
   (rule "polySimp_rightDist" (formula "17") (term "1,0,0,1"))
   (rule "mul_literals" (formula "17") (term "0,1,0,0,1"))
   (rule "polySimp_addAssoc" (formula "17") (term "0,0,1"))
   (rule "polySimp_addComm1" (formula "17") (term "0,0,0,1"))
   (rule "add_literals" (formula "17") (term "0,0,0,0,1"))
   (rule "polySimp_pullOutFactor1b" (formula "17") (term "0,0,1"))
   (rule "add_literals" (formula "17") (term "1,1,0,0,1"))
   (rule "times_zero_1" (formula "17") (term "1,0,0,1"))
   (rule "add_zero_right" (formula "17") (term "0,0,1"))
   (rule "qeq_literals" (formula "17") (term "0,1"))
    (builtin "One Step Simplification" (formula "17"))
   (rule "inEqSimp_leqRight" (formula "17"))
   (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
   (rule "mul_literals" (formula "1") (term "0,1,0,0"))
   (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
   (rule "add_literals" (formula "1") (term "0,0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "1"))
   (rule "polySimp_mulComm0" (formula "1") (term "1"))
   (rule "polySimp_rightDist" (formula "1") (term "1"))
   (rule "mul_literals" (formula "1") (term "0,1"))
   (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
   (rule "polySimp_elimOne" (formula "1") (term "1,1"))
   (rule "inEqSimp_contradInEq1" (formula "13") (ifseqformula "1"))
   (rule "andLeft" (formula "13"))
   (rule "inEqSimp_homoInEq1" (formula "13"))
   (rule "polySimp_mulComm0" (formula "13") (term "1,0"))
   (rule "polySimp_rightDist" (formula "13") (term "1,0"))
   (rule "mul_literals" (formula "13") (term "0,1,0"))
   (rule "polySimp_addAssoc" (formula "13") (term "0"))
   (rule "polySimp_addComm1" (formula "13") (term "0,0"))
   (rule "add_literals" (formula "13") (term "0,0,0"))
   (rule "polySimp_pullOutFactor1b" (formula "13") (term "0"))
   (rule "add_literals" (formula "13") (term "1,1,0"))
   (rule "times_zero_1" (formula "13") (term "1,0"))
   (rule "add_zero_right" (formula "13") (term "0"))
   (rule "leq_literals" (formula "13"))
   (rule "closeFalse" (formula "13"))
)
(branch "Usage"
    (builtin "One Step Simplification" (formula "19"))
   (rule "translateJavaSubInt" (formula "19") (term "0,1,0"))
   (rule "polySimp_elimSub" (formula "19") (term "0,1,0"))
   (rule "polySimp_addComm0" (formula "19") (term "0,1,0"))
    (builtin "Use Operation Contract" (formula "19") (newnames "heapBefore_SampleParameters,self_77,exc_77,heapAfter_SampleParameters,anon_heap_SampleParameters") (contract "de.wiesler.SampleParameters[de.wiesler.SampleParameters::SampleParameters(int)].JML normal_behavior operation contract.0"))
   (branch "Post (SampleParameters)"
       (builtin "One Step Simplification" (formula "18"))
       (builtin "One Step Simplification" (formula "21"))
      (rule "andLeft" (formula "18"))
      (rule "selectCreatedOfAnonAsFormulaEQ" (formula "19") (term "1,1,0,0,1,0") (ifseqformula "18"))
      (rule "andLeft" (formula "19"))
      (rule "andLeft" (formula "19"))
      (rule "andLeft" (formula "21"))
      (rule "andLeft" (formula "20"))
      (rule "andLeft" (formula "21"))
      (rule "andLeft" (formula "20"))
      (rule "andLeft" (formula "22"))
      (rule "andLeft" (formula "20"))
      (rule "notLeft" (formula "20"))
      (rule "andLeft" (formula "20"))
      (rule "notLeft" (formula "20"))
      (rule "replace_known_right" (formula "20") (term "0") (ifseqformula "26"))
       (builtin "One Step Simplification" (formula "20"))
      (rule "assignment" (formula "30") (term "1"))
       (builtin "One Step Simplification" (formula "30"))
      (rule "blockEmpty" (formula "30") (term "1"))
       (builtin "Block Contract (Internal)" (formula "30") (newnames "anonOut_heap,result_65,exc_78,heap_Before_BLOCK,savedHeap_Before_BLOCK,o,f"))
      (branch "Validity"
          (builtin "One Step Simplification" (formula "26"))
          (builtin "One Step Simplification" (formula "31"))
         (rule "andLeft" (formula "26"))
         (rule "translateJavaSubInt" (formula "26") (term "0,0"))
         (rule "polySimp_elimSub" (formula "26") (term "0,0"))
         (rule "polySimp_addComm0" (formula "26") (term "0,0"))
         (rule "variableDeclarationAssign" (formula "31") (term "1"))
         (rule "variableDeclaration" (formula "31") (term "1") (newnames "exc_78_1"))
         (rule "assignment" (formula "31") (term "1"))
          (builtin "One Step Simplification" (formula "31"))
         (rule "emptyStatement" (formula "31") (term "1"))
          (builtin "One Step Simplification" (formula "31"))
         (rule "emptyStatement" (formula "31") (term "1"))
         (rule "tryEmpty" (formula "31") (term "1"))
         (rule "blockEmptyLabel" (formula "31") (term "1"))
         (rule "blockEmpty" (formula "31") (term "1"))
         (rule "methodCallEmpty" (formula "31") (term "1"))
          (builtin "One Step Simplification" (formula "31"))
         (rule "emptyModality" (formula "31") (term "1"))
          (builtin "One Step Simplification" (formula "31"))
         (rule "closeTrue" (formula "31"))
      )
      (branch "Precondition"
         (rule "andRight" (formula "30"))
         (branch "Case 1"
             (builtin "One Step Simplification" (formula "30"))
            (rule "translateJavaSubInt" (formula "30") (term "0,0"))
            (rule "polySimp_elimSub" (formula "30") (term "0,0"))
            (rule "polySimp_addComm0" (formula "30") (term "0,0"))
            (rule "close" (formula "30") (ifseqformula "8"))
         )
         (branch "Case 2"
             (builtin "One Step Simplification" (formula "30"))
            (rule "wellFormedAnonEQ" (formula "30") (ifseqformula "18"))
            (rule "replace_known_left" (formula "30") (term "0") (ifseqformula "1"))
             (builtin "One Step Simplification" (formula "30") (ifInst ""  (formula "17")))
            (rule "closeTrue" (formula "30"))
         )
      )
      (branch "Usage"
          (builtin "One Step Simplification" (formula "26"))
          (builtin "One Step Simplification" (formula "31"))
         (rule "selectCreatedOfAnonAsFormulaEQ" (formula "26") (term "0,1,1,1,0") (ifseqformula "18"))
         (rule "selectCreatedOfAnonAsFormulaEQ" (formula "26") (term "0,1,0,1,0") (ifseqformula "18"))
         (rule "andLeft" (formula "26"))
         (rule "andLeft" (formula "26"))
         (rule "andLeft" (formula "27"))
         (rule "andLeft" (formula "26"))
         (rule "replace_known_left" (formula "29") (term "0") (ifseqformula "26"))
          (builtin "One Step Simplification" (formula "29"))
         (rule "true_left" (formula "29"))
         (rule "narrowSelectArrayType" (formula "29") (term "2,1") (ifseqformula "1") (ifseqformula "33"))
         (rule "shift_paren_or" (formula "28"))
         (rule "shift_paren_or" (formula "28") (term "0"))
         (rule "commute_or_2" (formula "28"))
         (rule "ifUnfold" (formula "34") (term "1") (inst "#boolv=x"))
         (rule "variableDeclaration" (formula "34") (term "1") (newnames "x"))
         (rule "inequality_comparison_simple" (formula "34") (term "1"))
          (builtin "One Step Simplification" (formula "34"))
         (rule "replace_known_left" (formula "34") (term "0,0,1,0") (ifseqformula "26"))
          (builtin "One Step Simplification" (formula "34"))
         (rule "arrayLengthNotNegative" (formula "12") (term "0"))
         (rule "arrayLengthIsAShort" (formula "13") (term "0"))
         (rule "expand_inShort" (formula "13"))
         (rule "replace_short_MIN" (formula "13") (term "0,1"))
         (rule "replace_short_MAX" (formula "13") (term "1,0"))
         (rule "andLeft" (formula "13"))
         (rule "inEqSimp_commuteLeq" (formula "14"))
         (rule "ifSplit" (formula "37"))
         (branch "if x true"
             (builtin "One Step Simplification" (formula "38"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "closeFalse" (formula "1"))
         )
         (branch "if x false"
             (builtin "One Step Simplification" (formula "38"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "true_left" (formula "1"))
            (rule "blockEmpty" (formula "37") (term "1"))
            (rule "methodCallUnfoldArguments" (formula "37") (term "1"))
            (rule "variableDeclarationAssign" (formula "37") (term "1"))
            (rule "variableDeclaration" (formula "37") (term "1") (newnames "var_1"))
            (rule "assignment" (formula "37") (term "1"))
             (builtin "One Step Simplification" (formula "37"))
            (rule "variableDeclarationAssign" (formula "37") (term "1"))
            (rule "variableDeclaration" (formula "37") (term "1") (newnames "var_2"))
            (rule "assignment" (formula "37") (term "1"))
             (builtin "One Step Simplification" (formula "37"))
            (rule "variableDeclarationAssign" (formula "37") (term "1"))
            (rule "variableDeclaration" (formula "37") (term "1") (newnames "var_3"))
            (rule "assignment" (formula "37") (term "1"))
             (builtin "One Step Simplification" (formula "37"))
            (rule "variableDeclarationAssign" (formula "37") (term "1"))
            (rule "variableDeclaration" (formula "37") (term "1") (newnames "var_4"))
            (rule "assignment_read_attribute_final" (formula "37"))
            (branch "Normal Execution (parameters != null)"
                (builtin "One Step Simplification" (formula "37"))
                (builtin "Use Operation Contract" (formula "37") (newnames "heapBefore_select_n,exc_79,heapAfter_select_n,anon_heap_select_n") (contract "de.wiesler.Functions[de.wiesler.Functions::select_n([I,int,int,int)].JML normal_behavior operation contract.0"))
               (branch "Post (select_n)"
                   (builtin "One Step Simplification" (formula "39"))
                   (builtin "One Step Simplification" (formula "34"))
                  (rule "andLeft" (formula "34"))
                  (rule "andLeft" (formula "35"))
                  (rule "andLeft" (formula "35"))
                  (rule "translateJavaSubInt" (formula "34") (term "2,1,0"))
                  (rule "polySimp_elimSub" (formula "34") (term "2,1,0"))
                  (rule "mul_literals" (formula "34") (term "1,2,1,0"))
                  (rule "polySimp_addComm0" (formula "34") (term "2,1,0"))
                  (rule "blockEmpty" (formula "41") (term "1"))
                   (builtin "Block Contract (Internal)" (formula "41") (newnames "anonOut_heap_0,result_66,exc_80,heap_Before_BLOCK_0,savedHeap_Before_BLOCK_0,o,f"))
                  (branch "Validity"
                      (builtin "One Step Simplification" (formula "37"))
                      (builtin "One Step Simplification" (formula "42"))
                     (rule "andLeft" (formula "37"))
                     (rule "translateJavaSubInt" (formula "37") (term "0,0"))
                     (rule "polySimp_elimSub" (formula "37") (term "0,0"))
                     (rule "polySimp_addComm0" (formula "37") (term "0,0"))
                     (rule "narrowSelectArrayType" (formula "35") (term "2,0") (ifseqformula "37") (ifseqformula "41"))
                     (rule "variableDeclarationAssign" (formula "42") (term "1"))
                     (rule "variableDeclaration" (formula "42") (term "1") (newnames "exc_80_1"))
                     (rule "assignment" (formula "42") (term "1"))
                      (builtin "One Step Simplification" (formula "42"))
                     (rule "emptyStatement" (formula "42") (term "1"))
                      (builtin "One Step Simplification" (formula "42"))
                     (rule "emptyStatement" (formula "42") (term "1"))
                     (rule "tryEmpty" (formula "42") (term "1"))
                     (rule "blockEmptyLabel" (formula "42") (term "1"))
                     (rule "blockEmpty" (formula "42") (term "1"))
                     (rule "methodCallEmpty" (formula "42") (term "1"))
                      (builtin "One Step Simplification" (formula "42"))
                     (rule "emptyModality" (formula "42") (term "1"))
                      (builtin "One Step Simplification" (formula "42"))
                     (rule "closeTrue" (formula "42"))
                  )
                  (branch "Precondition"
                     (rule "andRight" (formula "41"))
                     (branch "Case 1"
                         (builtin "One Step Simplification" (formula "41"))
                        (rule "translateJavaSubInt" (formula "41") (term "0,0"))
                        (rule "polySimp_elimSub" (formula "41") (term "0,0"))
                        (rule "polySimp_addComm0" (formula "41") (term "0,0"))
                        (rule "close" (formula "41") (ifseqformula "8"))
                     )
                     (branch "Case 2"
                         (builtin "One Step Simplification" (formula "41"))
                        (rule "wellFormedAnonEQ" (formula "41") (ifseqformula "34"))
                        (rule "wellFormedAnon" (formula "41") (term "0"))
                        (rule "replace_known_left" (formula "41") (term "1,0") (ifseqformula "30"))
                         (builtin "One Step Simplification" (formula "41") (ifInst ""  (formula "33")))
                        (rule "wellFormedAnonEQ" (formula "41") (ifseqformula "21"))
                        (rule "replace_known_left" (formula "41") (term "0") (ifseqformula "1"))
                         (builtin "One Step Simplification" (formula "41") (ifInst ""  (formula "20")))
                        (rule "closeTrue" (formula "41"))
                     )
                  )
                  (branch "Usage"
                      (builtin "One Step Simplification" (formula "37"))
                      (builtin "One Step Simplification" (formula "42"))
                     (rule "selectCreatedOfAnonAsFormulaEQ" (formula "37") (term "0,1,1,1,0") (ifseqformula "34"))
                      (builtin "One Step Simplification" (formula "37"))
                     (rule "selectCreatedOfAnonAsFormulaEQ" (formula "37") (term "0,1,0,1,0") (ifseqformula "34"))
                      (builtin "One Step Simplification" (formula "37"))
                     (rule "selectCreatedOfAnonAsFormulaEQ" (formula "37") (term "0,0,0,1,1,1,0") (ifseqformula "21"))
                     (rule "selectCreatedOfAnonAsFormulaEQ" (formula "37") (term "0,0,0,1,0,1,0") (ifseqformula "21"))
                     (rule "andLeft" (formula "37"))
                     (rule "andLeft" (formula "37"))
                     (rule "andLeft" (formula "37"))
                     (rule "andLeft" (formula "39"))
                     (rule "replace_known_left" (formula "40") (term "0") (ifseqformula "37"))
                      (builtin "One Step Simplification" (formula "40"))
                     (rule "true_left" (formula "40"))
                     (rule "narrowSelectArrayType" (formula "40") (term "2,1") (ifseqformula "1") (ifseqformula "44"))
                     (rule "shift_paren_or" (formula "39"))
                     (rule "shift_paren_or" (formula "39") (term "0"))
                     (rule "commute_or_2" (formula "39") (term "1,0,0"))
                     (rule "shift_paren_or" (formula "39") (term "0,0"))
                     (rule "shift_paren_or" (formula "39") (term "0,0,0"))
                     (rule "commute_or_2" (formula "39"))
                     (rule "commute_or_2" (formula "39") (term "0"))
                     (rule "ifUnfold" (formula "45") (term "1") (inst "#boolv=x"))
                     (rule "variableDeclaration" (formula "45") (term "1") (newnames "x_1"))
                     (rule "inequality_comparison_simple" (formula "45") (term "1"))
                      (builtin "One Step Simplification" (formula "45"))
                     (rule "replace_known_left" (formula "45") (term "0,0,1,0") (ifseqformula "37"))
                      (builtin "One Step Simplification" (formula "45"))
                     (rule "ifSplit" (formula "45"))
                     (branch "if x_1 true"
                         (builtin "One Step Simplification" (formula "46"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "closeFalse" (formula "1"))
                     )
                     (branch "if x_1 false"
                         (builtin "One Step Simplification" (formula "46"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "true_left" (formula "1"))
                        (rule "blockEmpty" (formula "45") (term "1"))
                        (rule "variableDeclarationGhostAssign" (formula "45") (term "1"))
                        (rule "variableDeclarationGhost" (formula "45") (term "1") (newnames "before_sort"))
                        (rule "assignment" (formula "45") (term "1"))
                         (builtin "One Step Simplification" (formula "45"))
                        (rule "methodCallUnfoldArguments" (formula "45") (term "1"))
                        (rule "variableDeclarationAssign" (formula "45") (term "1"))
                        (rule "variableDeclaration" (formula "45") (term "1") (newnames "var_5"))
                        (rule "assignment" (formula "45") (term "1"))
                         (builtin "One Step Simplification" (formula "45"))
                        (rule "variableDeclarationAssign" (formula "45") (term "1"))
                        (rule "variableDeclaration" (formula "45") (term "1") (newnames "var_6"))
                        (rule "assignment" (formula "45") (term "1"))
                         (builtin "One Step Simplification" (formula "45"))
                        (rule "variableDeclarationAssign" (formula "45") (term "1"))
                        (rule "variableDeclaration" (formula "45") (term "1") (newnames "var_7"))
                        (rule "compound_addition_2" (formula "45") (term "1") (inst "#v1=x_1") (inst "#v0=x"))
                        (rule "variableDeclarationAssign" (formula "45") (term "1"))
                        (rule "variableDeclaration" (formula "45") (term "1") (newnames "x_2"))
                        (rule "assignment" (formula "45") (term "1"))
                         (builtin "One Step Simplification" (formula "45"))
                        (rule "variableDeclarationAssign" (formula "45") (term "1"))
                        (rule "variableDeclaration" (formula "45") (term "1") (newnames "x_3"))
                        (rule "assignment_read_attribute_final" (formula "45"))
                        (branch "Normal Execution (parameters != null)"
                            (builtin "One Step Simplification" (formula "45"))
                           (rule "assignmentAdditionInt" (formula "45") (term "1"))
                           (branch "Overflow check"
                               (builtin "One Step Simplification" (formula "45"))
                              (rule "expand_inInt" (formula "45") (userinteraction))
                              (rule "andRight" (formula "45") (userinteraction))
                              (branch "Case 1"
                                 (rule "replace_int_MAX" (formula "45") (term "1"))
                                 (rule "inEqSimp_leqRight" (formula "45"))
                                 (rule "mul_literals" (formula "1") (term "1,0,0"))
                                 (rule "add_literals" (formula "1") (term "0,0"))
                                 (rule "polySimp_addAssoc" (formula "1") (term "0"))
                                 (rule "inEqSimp_ltToLeq" (formula "17"))
                                 (rule "polySimp_rightDist" (formula "17") (term "1,0,0"))
                                 (rule "polySimp_mulAssoc" (formula "17") (term "0,1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "17") (term "0,0,1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "17") (term "0,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "17") (term "0,1,0,0"))
                                 (rule "polySimp_addAssoc" (formula "17") (term "0,0"))
                                 (rule "polySimp_addComm1" (formula "17") (term "0"))
                                 (rule "polySimp_addComm1" (formula "17") (term "0,0"))
                                 (rule "add_literals" (formula "17") (term "0,0,0"))
                                 (rule "inEqSimp_homoInEq0" (formula "18"))
                                 (rule "polySimp_mulComm0" (formula "18") (term "1,0"))
                                 (rule "polySimp_rightDist" (formula "18") (term "1,0"))
                                 (rule "polySimp_mulAssoc" (formula "18") (term "0,1,0"))
                                 (rule "polySimp_mulComm0" (formula "18") (term "0,0,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "18") (term "0,1,0"))
                                 (rule "polySimp_elimOne" (formula "18") (term "0,1,0"))
                                 (rule "polySimp_addAssoc" (formula "18") (term "0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                                 (rule "polySimp_mulComm0" (formula "1") (term "1"))
                                 (rule "polySimp_rightDist" (formula "1") (term "1"))
                                 (rule "mul_literals" (formula "1") (term "0,1"))
                                 (rule "inEqSimp_sepNegMonomial0" (formula "17"))
                                 (rule "polySimp_mulLiterals" (formula "17") (term "0"))
                                 (rule "polySimp_elimOne" (formula "17") (term "0"))
                                 (rule "inEqSimp_sepNegMonomial1" (formula "18"))
                                 (rule "polySimp_mulLiterals" (formula "18") (term "0"))
                                 (rule "polySimp_elimOne" (formula "18") (term "0"))
                                 (rule "inEqSimp_subsumption1" (formula "12") (ifseqformula "17"))
                                 (rule "inEqSimp_homoInEq0" (formula "12") (term "0"))
                                 (rule "polySimp_pullOutFactor1b" (formula "12") (term "0,0"))
                                 (rule "add_literals" (formula "12") (term "1,1,0,0"))
                                 (rule "times_zero_1" (formula "12") (term "1,0,0"))
                                 (rule "add_zero_right" (formula "12") (term "0,0"))
                                 (rule "qeq_literals" (formula "12") (term "0"))
                                  (builtin "One Step Simplification" (formula "12"))
                                 (rule "true_left" (formula "12"))
                                 (rule "inEqSimp_subsumption1" (formula "5") (ifseqformula "11"))
                                 (rule "leq_literals" (formula "5") (term "0"))
                                  (builtin "One Step Simplification" (formula "5"))
                                 (rule "true_left" (formula "5"))
                                 (rule "inEqSimp_subsumption1" (formula "13") (ifseqformula "11"))
                                 (rule "leq_literals" (formula "13") (term "0"))
                                  (builtin "One Step Simplification" (formula "13"))
                                 (rule "true_left" (formula "13"))
                                 (rule "inEqSimp_exactShadow3" (formula "14") (ifseqformula "5"))
                                 (rule "polySimp_rightDist" (formula "14") (term "0,0"))
                                 (rule "mul_literals" (formula "14") (term "0,0,0"))
                                 (rule "polySimp_addComm1" (formula "14") (term "0"))
                                 (rule "add_literals" (formula "14") (term "0,0"))
                                 (rule "inEqSimp_sepNegMonomial1" (formula "14"))
                                 (rule "polySimp_mulLiterals" (formula "14") (term "0"))
                                 (rule "polySimp_elimOne" (formula "14") (term "0"))
                                 (rule "inEqSimp_subsumption0" (formula "4") (ifseqformula "14"))
                                 (rule "leq_literals" (formula "4") (term "0"))
                                  (builtin "One Step Simplification" (formula "4"))
                                 (rule "true_left" (formula "4"))
                                 (rule "inEqSimp_exactShadow3" (formula "5") (ifseqformula "15"))
                                 (rule "mul_literals" (formula "5") (term "0,0"))
                                 (rule "polySimp_addAssoc" (formula "5") (term "0"))
                                 (rule "add_literals" (formula "5") (term "0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "5"))
                                 (rule "mul_literals" (formula "5") (term "1"))
                                 (rule "inEqSimp_subsumption1" (formula "5") (ifseqformula "10"))
                                 (rule "leq_literals" (formula "5") (term "0"))
                                  (builtin "One Step Simplification" (formula "5"))
                                 (rule "true_left" (formula "5"))
                                 (rule "inEqSimp_exactShadow3" (formula "12") (ifseqformula "11"))
                                 (rule "polySimp_mulComm0" (formula "12") (term "0,0"))
                                 (rule "polySimp_addComm0" (formula "12") (term "0"))
                                 (rule "inEqSimp_sepNegMonomial1" (formula "12"))
                                 (rule "polySimp_mulLiterals" (formula "12") (term "0"))
                                 (rule "polySimp_elimOne" (formula "12") (term "0"))
                                 (rule "inEqSimp_subsumption0" (formula "4") (ifseqformula "12"))
                                 (rule "leq_literals" (formula "4") (term "0"))
                                  (builtin "One Step Simplification" (formula "4"))
                                 (rule "true_left" (formula "4"))
                                 (rule "inEqSimp_exactShadow3" (formula "14") (ifseqformula "11"))
                                 (rule "polySimp_rightDist" (formula "14") (term "0,0"))
                                 (rule "mul_literals" (formula "14") (term "0,0,0"))
                                 (rule "polySimp_addComm1" (formula "14") (term "0"))
                                 (rule "add_literals" (formula "14") (term "0,0"))
                                 (rule "inEqSimp_sepNegMonomial1" (formula "14"))
                                 (rule "polySimp_mulLiterals" (formula "14") (term "0"))
                                 (rule "polySimp_elimOne" (formula "14") (term "0"))
                                 (rule "inEqSimp_subsumption0" (formula "13") (ifseqformula "14"))
                                 (rule "leq_literals" (formula "13") (term "0"))
                                  (builtin "One Step Simplification" (formula "13"))
                                 (rule "true_left" (formula "13"))
                                 (rule "Class_invariant_axiom_for_de_wiesler_SampleParameters" (formula "26"))
                                 (rule "true_left" (formula "26"))
                                 (rule "Class_invariant_axiom_for_de_wiesler_Storage" (formula "7"))
                                 (rule "andLeft" (formula "7"))
                                 (rule "andLeft" (formula "7"))
                                 (rule "notLeft" (formula "9"))
                                 (rule "andLeft" (formula "7"))
                                 (rule "notLeft" (formula "9"))
                                 (rule "andLeft" (formula "7"))
                                 (rule "notLeft" (formula "9"))
                                 (rule "andLeft" (formula "7"))
                                 (rule "notLeft" (formula "9"))
                                 (rule "notLeft" (formula "8"))
                                 (rule "andLeft" (formula "7"))
                                 (rule "andLeft" (formula "7"))
                                 (rule "notLeft" (formula "9"))
                                 (rule "notLeft" (formula "8"))
                                 (rule "notLeft" (formula "7"))
                                 (rule "Definition_axiom_for_isValidForLen_in_de_wiesler_SampleParameters" (formula "22") (term "0"))
                                  (builtin "One Step Simplification" (formula "22"))
                                 (rule "andLeft" (formula "22"))
                                 (rule "andLeft" (formula "22"))
                                 (rule "andLeft" (formula "22"))
                                 (rule "andLeft" (formula "23"))
                                 (rule "andLeft" (formula "22"))
                                 (rule "andLeft" (formula "22"))
                                 (rule "andLeft" (formula "22"))
                                 (rule "translateJavaSubInt" (formula "29") (term "0"))
                                 (rule "translateJavaMod" (formula "28") (term "0"))
                                 (rule "translateJavaDivInt" (formula "23") (term "1"))
                                 (rule "translateJavaMulInt" (formula "29") (term "0,0"))
                                 (rule "polySimp_elimSub" (formula "29") (term "0"))
                                 (rule "mul_literals" (formula "29") (term "1,0"))
                                 (rule "polySimp_addComm0" (formula "29") (term "0"))
                                 (rule "inEqSimp_ltToLeq" (formula "24"))
                                 (rule "polySimp_rightDist" (formula "24") (term "1,0,0"))
                                 (rule "polySimp_mulAssoc" (formula "24") (term "0,1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "24") (term "0,0,1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "24") (term "0,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "24") (term "0,1,0,0"))
                                 (rule "polySimp_addAssoc" (formula "24") (term "0,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "26"))
                                 (rule "inEqSimp_commuteLeq" (formula "25"))
                                 (rule "inEqSimp_commuteLeq" (formula "22"))
                                 (rule "inEqSimp_homoInEq0" (formula "29"))
                                 (rule "polySimp_mulComm0" (formula "29") (term "1,0"))
                                 (rule "polySimp_rightDist" (formula "29") (term "1,0"))
                                 (rule "mul_literals" (formula "29") (term "0,1,0"))
                                 (rule "polySimp_addAssoc" (formula "29") (term "0"))
                                 (rule "polySimp_addComm0" (formula "29") (term "0,0"))
                                 (rule "jmod_axiom" (formula "28") (term "0"))
                                 (rule "polySimp_mulLiterals" (formula "28") (term "1,0"))
                                 (rule "polySimp_sepNegMonomial" (formula "28"))
                                 (rule "polySimp_mulLiterals" (formula "28") (term "0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "24"))
                                 (rule "polySimp_mulComm0" (formula "24") (term "1"))
                                 (rule "polySimp_rightDist" (formula "24") (term "1"))
                                 (rule "polySimp_mulLiterals" (formula "24") (term "1,1"))
                                 (rule "polySimp_elimOne" (formula "24") (term "1,1"))
                                 (rule "polySimp_rightDist" (formula "24") (term "0,1"))
                                 (rule "mul_literals" (formula "24") (term "0,0,1"))
                                 (rule "inEqSimp_sepNegMonomial1" (formula "29"))
                                 (rule "polySimp_mulLiterals" (formula "29") (term "0"))
                                 (rule "polySimp_elimOne" (formula "29") (term "0"))
                                 (rule "newSym_eq" (formula "28") (inst "l=l_0") (inst "newSymDef=mul(int::final(self_77,
               de.wiesler.SampleParameters::$num_buckets),
    Z(0(#)))"))
                                 (rule "times_zero_1" (formula "28") (term "1,1"))
                                 (rule "add_zero_right" (formula "28") (term "1"))
                                 (rule "applyEq" (formula "29") (term "0,0") (ifseqformula "28"))
                                 (rule "eqSymm" (formula "29"))
                                 (rule "applyEq" (formula "28") (term "0,0") (ifseqformula "29"))
                                 (rule "applyEq" (formula "30") (term "1,0") (ifseqformula "29"))
                                 (rule "polySimp_mulAssoc" (formula "30") (term "0"))
                                 (rule "applyEq" (formula "27") (term "0") (ifseqformula "29"))
                                 (rule "inEqSimp_commuteLeq" (formula "27"))
                                 (rule "applyEq" (formula "26") (term "0") (ifseqformula "29"))
                                 (rule "elimGcdGeq_antec" (formula "26") (inst "elimGcdRightDiv=Z(1(#))") (inst "elimGcdLeftDiv=l_0") (inst "elimGcd=Z(2(#))"))
                                 (rule "leq_literals" (formula "26") (term "0,0"))
                                  (builtin "One Step Simplification" (formula "26"))
                                 (rule "polySimp_mulLiterals" (formula "26") (term "1,0,0"))
                                 (rule "mul_literals" (formula "26") (term "0,1,0,0,0,0,0"))
                                 (rule "mul_literals" (formula "26") (term "1,0,0,0,0,0"))
                                 (rule "polySimp_addLiterals" (formula "26") (term "0,0,0,0"))
                                 (rule "add_literals" (formula "26") (term "0,0,0,0"))
                                 (rule "polySimp_pullOutFactor0b" (formula "26") (term "0,0"))
                                 (rule "add_literals" (formula "26") (term "1,1,0,0"))
                                 (rule "times_zero_1" (formula "26") (term "1,0,0"))
                                 (rule "add_zero_right" (formula "26") (term "0,0"))
                                 (rule "leq_literals" (formula "26") (term "0"))
                                  (builtin "One Step Simplification" (formula "26"))
                                 (rule "inEqSimp_exactShadow3" (formula "22") (ifseqformula "24"))
                                 (rule "mul_literals" (formula "22") (term "0,0"))
                                 (rule "polySimp_addAssoc" (formula "22") (term "0"))
                                 (rule "polySimp_addAssoc" (formula "22") (term "0,0"))
                                 (rule "add_literals" (formula "22") (term "0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "22"))
                                 (rule "polySimp_mulComm0" (formula "22") (term "1"))
                                 (rule "polySimp_rightDist" (formula "22") (term "1"))
                                 (rule "mul_literals" (formula "22") (term "0,1"))
                                 (rule "polySimp_mulLiterals" (formula "22") (term "1,1"))
                                 (rule "polySimp_elimOne" (formula "22") (term "1,1"))
                                 (rule "inEqSimp_subsumption1" (formula "22") (ifseqformula "13"))
                                 (rule "inEqSimp_homoInEq0" (formula "22") (term "0"))
                                 (rule "polySimp_mulComm0" (formula "22") (term "1,0,0"))
                                 (rule "polySimp_rightDist" (formula "22") (term "1,0,0"))
                                 (rule "mul_literals" (formula "22") (term "0,1,0,0"))
                                 (rule "polySimp_addAssoc" (formula "22") (term "0,0"))
                                 (rule "polySimp_addComm1" (formula "22") (term "0,0,0"))
                                 (rule "add_literals" (formula "22") (term "0,0,0,0"))
                                 (rule "polySimp_pullOutFactor1b" (formula "22") (term "0,0"))
                                 (rule "add_literals" (formula "22") (term "1,1,0,0"))
                                 (rule "times_zero_1" (formula "22") (term "1,0,0"))
                                 (rule "add_zero_right" (formula "22") (term "0,0"))
                                 (rule "qeq_literals" (formula "22") (term "0"))
                                  (builtin "One Step Simplification" (formula "22"))
                                 (rule "true_left" (formula "22"))
                                 (rule "inEqSimp_exactShadow3" (formula "1") (ifseqformula "23"))
                                 (rule "polySimp_rightDist" (formula "1") (term "0,0"))
                                 (rule "polySimp_mulLiterals" (formula "1") (term "1,0,0"))
                                 (rule "mul_literals" (formula "1") (term "0,0,0"))
                                 (rule "polySimp_elimOne" (formula "1") (term "1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                                 (rule "polySimp_mulComm0" (formula "1") (term "1"))
                                 (rule "polySimp_rightDist" (formula "1") (term "1"))
                                 (rule "mul_literals" (formula "1") (term "0,1"))
                                 (rule "inEqSimp_exactShadow3" (formula "23") (ifseqformula "24"))
                                 (rule "mul_literals" (formula "23") (term "0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "23"))
                                 (rule "mul_literals" (formula "23") (term "1"))
                                 (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "26"))
                                 (rule "polySimp_rightDist" (formula "2") (term "0,0"))
                                 (rule "polySimp_mulLiterals" (formula "2") (term "1,0,0"))
                                 (rule "mul_literals" (formula "2") (term "0,0,0"))
                                 (rule "polySimp_elimOne" (formula "2") (term "1,0,0"))
                                 (rule "polySimp_addAssoc" (formula "2") (term "0"))
                                 (rule "polySimp_addAssoc" (formula "2") (term "0,0"))
                                 (rule "polySimp_addComm1" (formula "2") (term "0,0,0"))
                                 (rule "add_literals" (formula "2") (term "0,0,0,0"))
                                 (rule "polySimp_pullOutFactor1b" (formula "2") (term "0,0"))
                                 (rule "add_literals" (formula "2") (term "1,1,0,0"))
                                 (rule "times_zero_1" (formula "2") (term "1,0,0"))
                                 (rule "add_zero_right" (formula "2") (term "0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                                 (rule "mul_literals" (formula "2") (term "1"))
                                 (rule "inEqSimp_subsumption1" (formula "6") (ifseqformula "2"))
                                 (rule "leq_literals" (formula "6") (term "0"))
                                  (builtin "One Step Simplification" (formula "6"))
                                 (rule "true_left" (formula "6"))
                                 (rule "inEqSimp_contradInEq0" (formula "2") (ifseqformula "11"))
                                 (rule "qeq_literals" (formula "2") (term "0"))
                                  (builtin "One Step Simplification" (formula "2"))
                                 (rule "closeFalse" (formula "2"))
                              )
                              (branch "Case 2"
                                 (rule "replace_int_MIN" (formula "45") (term "0"))
                                 (rule "inEqSimp_leqRight" (formula "45"))
                                 (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "1") (term "0,1,0,0"))
                                 (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                                 (rule "polySimp_addComm1" (formula "1") (term "0"))
                                 (rule "polySimp_addComm1" (formula "1") (term "0,0"))
                                 (rule "add_literals" (formula "1") (term "0,0,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "17"))
                                 (rule "polySimp_rightDist" (formula "17") (term "1,0,0"))
                                 (rule "polySimp_mulAssoc" (formula "17") (term "0,1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "17") (term "0,0,1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "17") (term "0,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "17") (term "0,1,0,0"))
                                 (rule "polySimp_addAssoc" (formula "17") (term "0,0"))
                                 (rule "polySimp_addComm1" (formula "17") (term "0"))
                                 (rule "polySimp_addComm1" (formula "17") (term "0,0"))
                                 (rule "add_literals" (formula "17") (term "0,0,0"))
                                 (rule "inEqSimp_homoInEq0" (formula "18"))
                                 (rule "polySimp_mulComm0" (formula "18") (term "1,0"))
                                 (rule "polySimp_rightDist" (formula "18") (term "1,0"))
                                 (rule "polySimp_mulAssoc" (formula "18") (term "0,1,0"))
                                 (rule "polySimp_mulComm0" (formula "18") (term "0,0,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "18") (term "0,1,0"))
                                 (rule "polySimp_elimOne" (formula "18") (term "0,1,0"))
                                 (rule "polySimp_addAssoc" (formula "18") (term "0"))
                                 (rule "inEqSimp_sepNegMonomial1" (formula "1"))
                                 (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                                 (rule "polySimp_elimOne" (formula "1") (term "0"))
                                 (rule "inEqSimp_sepNegMonomial0" (formula "17"))
                                 (rule "polySimp_mulLiterals" (formula "17") (term "0"))
                                 (rule "polySimp_elimOne" (formula "17") (term "0"))
                                 (rule "inEqSimp_sepNegMonomial1" (formula "18"))
                                 (rule "polySimp_mulLiterals" (formula "18") (term "0"))
                                 (rule "polySimp_elimOne" (formula "18") (term "0"))
                                 (rule "inEqSimp_subsumption1" (formula "5") (ifseqformula "11"))
                                 (rule "leq_literals" (formula "5") (term "0"))
                                  (builtin "One Step Simplification" (formula "5"))
                                 (rule "true_left" (formula "5"))
                                 (rule "inEqSimp_subsumption1" (formula "11") (ifseqformula "16"))
                                 (rule "inEqSimp_homoInEq0" (formula "11") (term "0"))
                                 (rule "polySimp_pullOutFactor1b" (formula "11") (term "0,0"))
                                 (rule "add_literals" (formula "11") (term "1,1,0,0"))
                                 (rule "times_zero_1" (formula "11") (term "1,0,0"))
                                 (rule "add_zero_right" (formula "11") (term "0,0"))
                                 (rule "qeq_literals" (formula "11") (term "0"))
                                  (builtin "One Step Simplification" (formula "11"))
                                 (rule "true_left" (formula "11"))
                                 (rule "inEqSimp_subsumption1" (formula "13") (ifseqformula "11"))
                                 (rule "leq_literals" (formula "13") (term "0"))
                                  (builtin "One Step Simplification" (formula "13"))
                                 (rule "true_left" (formula "13"))
                                 (rule "inEqSimp_exactShadow3" (formula "6") (ifseqformula "15"))
                                 (rule "mul_literals" (formula "6") (term "0,0"))
                                 (rule "polySimp_addAssoc" (formula "6") (term "0"))
                                 (rule "add_literals" (formula "6") (term "0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "6"))
                                 (rule "mul_literals" (formula "6") (term "1"))
                                 (rule "inEqSimp_subsumption1" (formula "6") (ifseqformula "11"))
                                 (rule "leq_literals" (formula "6") (term "0"))
                                  (builtin "One Step Simplification" (formula "6"))
                                 (rule "true_left" (formula "6"))
                                 (rule "inEqSimp_exactShadow3" (formula "14") (ifseqformula "5"))
                                 (rule "polySimp_rightDist" (formula "14") (term "0,0"))
                                 (rule "mul_literals" (formula "14") (term "0,0,0"))
                                 (rule "polySimp_addComm1" (formula "14") (term "0"))
                                 (rule "add_literals" (formula "14") (term "0,0"))
                                 (rule "inEqSimp_sepNegMonomial1" (formula "14"))
                                 (rule "polySimp_mulLiterals" (formula "14") (term "0"))
                                 (rule "polySimp_elimOne" (formula "14") (term "0"))
                                 (rule "inEqSimp_subsumption0" (formula "4") (ifseqformula "14"))
                                 (rule "leq_literals" (formula "4") (term "0"))
                                  (builtin "One Step Simplification" (formula "4"))
                                 (rule "true_left" (formula "4"))
                                 (rule "inEqSimp_exactShadow3" (formula "12") (ifseqformula "11"))
                                 (rule "polySimp_mulComm0" (formula "12") (term "0,0"))
                                 (rule "polySimp_addComm0" (formula "12") (term "0"))
                                 (rule "inEqSimp_sepNegMonomial1" (formula "12"))
                                 (rule "polySimp_mulLiterals" (formula "12") (term "0"))
                                 (rule "polySimp_elimOne" (formula "12") (term "0"))
                                 (rule "inEqSimp_subsumption0" (formula "4") (ifseqformula "12"))
                                 (rule "leq_literals" (formula "4") (term "0"))
                                  (builtin "One Step Simplification" (formula "4"))
                                 (rule "true_left" (formula "4"))
                                 (rule "inEqSimp_exactShadow3" (formula "14") (ifseqformula "11"))
                                 (rule "polySimp_rightDist" (formula "14") (term "0,0"))
                                 (rule "mul_literals" (formula "14") (term "0,0,0"))
                                 (rule "polySimp_addComm1" (formula "14") (term "0"))
                                 (rule "add_literals" (formula "14") (term "0,0"))
                                 (rule "inEqSimp_sepNegMonomial1" (formula "14"))
                                 (rule "polySimp_mulLiterals" (formula "14") (term "0"))
                                 (rule "polySimp_elimOne" (formula "14") (term "0"))
                                 (rule "inEqSimp_subsumption0" (formula "13") (ifseqformula "14"))
                                 (rule "leq_literals" (formula "13") (term "0"))
                                  (builtin "One Step Simplification" (formula "13"))
                                 (rule "true_left" (formula "13"))
                                 (rule "Free_class_invariant_axiom_for_de_wiesler_Storage" (formula "16"))
                                  (builtin "One Step Simplification" (formula "16"))
                                 (rule "andLeft" (formula "16"))
                                 (rule "andLeft" (formula "16"))
                                 (rule "andLeft" (formula "18"))
                                 (rule "andLeft" (formula "16"))
                                 (rule "andLeft" (formula "19"))
                                 (rule "andLeft" (formula "16"))
                                 (rule "andLeft" (formula "20"))
                                 (rule "andLeft" (formula "16"))
                                 (rule "andLeft" (formula "21"))
                                 (rule "andLeft" (formula "16"))
                                 (rule "andLeft" (formula "22"))
                                 (rule "andLeft" (formula "16"))
                                 (rule "andLeft" (formula "23"))
                                 (rule "andLeft" (formula "16"))
                                 (rule "andLeft" (formula "24"))
                                 (rule "andLeft" (formula "16"))
                                 (rule "andLeft" (formula "25"))
                                 (rule "andLeft" (formula "25"))
                                 (rule "andLeft" (formula "25"))
                                 (rule "andLeft" (formula "25"))
                                 (rule "andLeft" (formula "25"))
                                 (rule "andLeft" (formula "25"))
                                 (rule "andLeft" (formula "25"))
                                 (rule "andLeft" (formula "25"))
                                 (rule "andLeft" (formula "25"))
                                 (rule "andLeft" (formula "25"))
                                 (rule "andLeft" (formula "25"))
                                 (rule "andLeft" (formula "25"))
                                 (rule "andLeft" (formula "25"))
                                 (rule "andLeft" (formula "25"))
                                 (rule "andLeft" (formula "25"))
                                 (rule "andLeft" (formula "25"))
                                 (rule "andLeft" (formula "25"))
                                 (rule "andLeft" (formula "25"))
                                 (rule "andLeft" (formula "25"))
                                 (rule "andLeft" (formula "25"))
                                 (rule "translateJavaMulInt" (formula "19") (term "1"))
                                 (rule "mul_literals" (formula "19") (term "1"))
                                 (rule "translateJavaMulInt" (formula "18") (term "1"))
                                 (rule "mul_literals" (formula "18") (term "1"))
                                 (rule "disjointDefinition" (formula "52"))
                                  (builtin "One Step Simplification" (formula "52"))
                                 (rule "notLeft" (formula "52"))
                                 (rule "disjointDefinition" (formula "51"))
                                  (builtin "One Step Simplification" (formula "51"))
                                 (rule "notLeft" (formula "51"))
                                 (rule "disjointDefinition" (formula "50"))
                                  (builtin "One Step Simplification" (formula "50"))
                                 (rule "notLeft" (formula "50"))
                                 (rule "eqSymm" (formula "72"))
                                 (rule "disjointDefinition" (formula "49"))
                                  (builtin "One Step Simplification" (formula "49"))
                                 (rule "notLeft" (formula "49"))
                                 (rule "eqSymm" (formula "71"))
                                 (rule "disjointDefinition" (formula "48"))
                                  (builtin "One Step Simplification" (formula "48"))
                                 (rule "notLeft" (formula "48"))
                                 (rule "eqSymm" (formula "70"))
                                 (rule "disjointDefinition" (formula "47"))
                                  (builtin "One Step Simplification" (formula "47"))
                                 (rule "notLeft" (formula "47"))
                                 (rule "eqSymm" (formula "69"))
                                 (rule "disjointDefinition" (formula "46"))
                                  (builtin "One Step Simplification" (formula "46"))
                                 (rule "notLeft" (formula "46"))
                                 (rule "eqSymm" (formula "68"))
                                 (rule "disjointDefinition" (formula "45"))
                                  (builtin "One Step Simplification" (formula "45"))
                                 (rule "notLeft" (formula "45"))
                                 (rule "eqSymm" (formula "67"))
                                 (rule "disjointDefinition" (formula "44"))
                                  (builtin "One Step Simplification" (formula "44"))
                                 (rule "notLeft" (formula "44"))
                                 (rule "eqSymm" (formula "66"))
                                 (rule "disjointDefinition" (formula "43"))
                                  (builtin "One Step Simplification" (formula "43"))
                                 (rule "notLeft" (formula "43"))
                                 (rule "eqSymm" (formula "65"))
                                 (rule "disjointDefinition" (formula "42"))
                                  (builtin "One Step Simplification" (formula "42"))
                                 (rule "notLeft" (formula "42"))
                                 (rule "eqSymm" (formula "64"))
                                 (rule "disjointDefinition" (formula "41"))
                                  (builtin "One Step Simplification" (formula "41"))
                                 (rule "notLeft" (formula "41"))
                                 (rule "eqSymm" (formula "63"))
                                 (rule "disjointDefinition" (formula "40"))
                                  (builtin "One Step Simplification" (formula "40"))
                                 (rule "notLeft" (formula "40"))
                                 (rule "eqSymm" (formula "62"))
                                 (rule "disjointDefinition" (formula "39"))
                                  (builtin "One Step Simplification" (formula "39"))
                                 (rule "notLeft" (formula "39"))
                                 (rule "eqSymm" (formula "61"))
                                 (rule "disjointDefinition" (formula "38"))
                                  (builtin "One Step Simplification" (formula "38"))
                                 (rule "notLeft" (formula "38"))
                                 (rule "eqSymm" (formula "60"))
                                 (rule "disjointDefinition" (formula "37"))
                                  (builtin "One Step Simplification" (formula "37"))
                                 (rule "notLeft" (formula "37"))
                                 (rule "disjointDefinition" (formula "36"))
                                  (builtin "One Step Simplification" (formula "36"))
                                 (rule "notLeft" (formula "36"))
                                 (rule "eqSymm" (formula "58"))
                                 (rule "disjointDefinition" (formula "35"))
                                  (builtin "One Step Simplification" (formula "35"))
                                 (rule "notLeft" (formula "35"))
                                 (rule "eqSymm" (formula "57"))
                                 (rule "disjointDefinition" (formula "34"))
                                  (builtin "One Step Simplification" (formula "34"))
                                 (rule "notLeft" (formula "34"))
                                 (rule "disjointDefinition" (formula "33"))
                                  (builtin "One Step Simplification" (formula "33"))
                                 (rule "notLeft" (formula "33"))
                                 (rule "disjointDefinition" (formula "32"))
                                  (builtin "One Step Simplification" (formula "32"))
                                 (rule "notLeft" (formula "32"))
                                 (rule "disjointDefinition" (formula "31"))
                                  (builtin "One Step Simplification" (formula "31"))
                                 (rule "notLeft" (formula "31"))
                                 (rule "disjointDefinition" (formula "30"))
                                  (builtin "One Step Simplification" (formula "30"))
                                 (rule "notLeft" (formula "30"))
                                 (rule "disjointDefinition" (formula "29"))
                                  (builtin "One Step Simplification" (formula "29"))
                                 (rule "notLeft" (formula "29"))
                                 (rule "disjointDefinition" (formula "28"))
                                  (builtin "One Step Simplification" (formula "28"))
                                 (rule "notLeft" (formula "28"))
                                 (rule "disjointDefinition" (formula "27"))
                                  (builtin "One Step Simplification" (formula "27"))
                                 (rule "notLeft" (formula "27"))
                                 (rule "disjointDefinition" (formula "25"))
                                  (builtin "One Step Simplification" (formula "25"))
                                 (rule "notLeft" (formula "25"))
                                 (rule "disjointDefinition" (formula "25"))
                                  (builtin "One Step Simplification" (formula "25"))
                                 (rule "notLeft" (formula "25"))
                                 (rule "applyEq" (formula "25") (term "1,0") (ifseqformula "24"))
                                 (rule "distributeIntersection" (formula "25") (term "0"))
                                 (rule "distributeIntersection" (formula "25") (term "1,0"))
                                 (rule "distributeIntersection" (formula "25") (term "0,0"))
                                 (rule "distributeIntersection" (formula "25") (term "0,1,0"))
                                 (rule "distributeIntersection" (formula "25") (term "1,1,0"))
                                 (rule "distributeIntersection" (formula "25") (term "0,0,0"))
                                 (rule "distributeIntersection" (formula "25") (term "1,0,0"))
                                 (rule "unionEqualsEmpty" (formula "25"))
                                 (rule "andLeft" (formula "25"))
                                 (rule "unionEqualsEmpty" (formula "26"))
                                 (rule "andLeft" (formula "26"))
                                 (rule "unionEqualsEmpty" (formula "25"))
                                 (rule "andLeft" (formula "25"))
                                 (rule "unionEqualsEmpty" (formula "28"))
                                  (builtin "One Step Simplification" (formula "28"))
                                 (rule "andLeft" (formula "28"))
                                 (rule "notLeft" (formula "29"))
                                 (rule "notLeft" (formula "28"))
                                 (rule "eqSymm" (formula "50"))
                                 (rule "eqSymm" (formula "49"))
                                 (rule "unionEqualsEmpty" (formula "27"))
                                  (builtin "One Step Simplification" (formula "27"))
                                 (rule "andLeft" (formula "27"))
                                 (rule "notLeft" (formula "28"))
                                 (rule "notLeft" (formula "27"))
                                 (rule "eqSymm" (formula "49"))
                                 (rule "eqSymm" (formula "48"))
                                 (rule "unionEqualsEmpty" (formula "26"))
                                  (builtin "One Step Simplification" (formula "26"))
                                 (rule "andLeft" (formula "26"))
                                 (rule "notLeft" (formula "26"))
                                 (rule "notLeft" (formula "26"))
                                 (rule "eqSymm" (formula "48"))
                                 (rule "eqSymm" (formula "47"))
                                 (rule "unionEqualsEmpty" (formula "25"))
                                  (builtin "One Step Simplification" (formula "25"))
                                 (rule "andLeft" (formula "25"))
                                 (rule "notLeft" (formula "26"))
                                 (rule "notLeft" (formula "25"))
                                 (rule "eqSymm" (formula "47"))
                                 (rule "eqSymm" (formula "46"))
                                 (rule "commuteUnion_2" (formula "24") (term "0,1"))
                                 (rule "commuteUnion" (formula "24") (term "1,1,1"))
                                 (rule "commuteUnion" (formula "24") (term "0,0,1"))
                                 (rule "commuteUnion_2" (formula "24") (term "0,1"))
                                 (rule "commuteUnion_2" (formula "24") (term "1"))
                                 (rule "Class_invariant_axiom_for_de_wiesler_SampleParameters" (formula "33"))
                                 (rule "true_left" (formula "33"))
                                 (rule "Class_invariant_axiom_for_de_wiesler_Storage" (formula "7"))
                                 (rule "andLeft" (formula "7"))
                                 (rule "andLeft" (formula "7"))
                                 (rule "notLeft" (formula "9"))
                                 (rule "notLeft" (formula "8"))
                                 (rule "andLeft" (formula "7"))
                                 (rule "notLeft" (formula "8"))
                                 (rule "andLeft" (formula "7"))
                                 (rule "notLeft" (formula "8"))
                                 (rule "andLeft" (formula "7"))
                                 (rule "andLeft" (formula "7"))
                                 (rule "notLeft" (formula "9"))
                                 (rule "notLeft" (formula "8"))
                                 (rule "andLeft" (formula "7"))
                                 (rule "notLeft" (formula "8"))
                                 (rule "notLeft" (formula "7"))
                                 (rule "Definition_axiom_for_isInInt_in_de_wiesler_SampleParameters" (formula "30") (term "0"))
                                  (builtin "One Step Simplification" (formula "30"))
                                 (rule "expand_inInt" (formula "30") (term "1,0"))
                                 (rule "expand_inInt" (formula "30") (term "0,0"))
                                 (rule "expand_inInt" (formula "30") (term "1"))
                                 (rule "replace_int_MIN" (formula "30") (term "0,1,1,0"))
                                 (rule "replace_int_MAX" (formula "30") (term "1,0,1,0"))
                                 (rule "replace_int_MIN" (formula "30") (term "0,1,0,0"))
                                 (rule "replace_int_MAX" (formula "30") (term "1,0,0,0"))
                                 (rule "replace_int_MIN" (formula "30") (term "0,1,1"))
                                 (rule "replace_int_MAX" (formula "30") (term "1,0,1"))
                                 (rule "andLeft" (formula "30"))
                                 (rule "andLeft" (formula "30"))
                                 (rule "andLeft" (formula "32"))
                                 (rule "andLeft" (formula "31"))
                                 (rule "andLeft" (formula "30"))
                                 (rule "inEqSimp_commuteLeq" (formula "35"))
                                 (rule "inEqSimp_commuteLeq" (formula "33"))
                                 (rule "inEqSimp_commuteLeq" (formula "31"))
                                 (rule "inEqSimp_exactShadow3" (formula "31") (ifseqformula "1"))
                                 (rule "mul_literals" (formula "31") (term "0,0"))
                                 (rule "polySimp_addAssoc" (formula "31") (term "0"))
                                 (rule "add_literals" (formula "31") (term "0,0"))
                                 (rule "inEqSimp_sepNegMonomial1" (formula "31"))
                                 (rule "polySimp_mulLiterals" (formula "31") (term "0"))
                                 (rule "polySimp_elimOne" (formula "31") (term "0"))
                                 (rule "inEqSimp_subsumption0" (formula "12") (ifseqformula "31"))
                                 (rule "leq_literals" (formula "12") (term "0"))
                                  (builtin "One Step Simplification" (formula "12"))
                                 (rule "true_left" (formula "12"))
                                 (rule "inEqSimp_contradInEq1" (formula "30") (ifseqformula "7"))
                                 (rule "qeq_literals" (formula "30") (term "0"))
                                  (builtin "One Step Simplification" (formula "30"))
                                 (rule "closeFalse" (formula "30"))
                              )
                           )
                           (branch "Usage"
                               (builtin "One Step Simplification" (formula "45"))
                              (rule "translateJavaAddInt" (formula "45") (term "0,1,0"))
                              (rule "variableDeclarationAssign" (formula "45") (term "1"))
                              (rule "variableDeclaration" (formula "45") (term "1") (newnames "var_8"))
                              (rule "assignment" (formula "45") (term "1"))
                               (builtin "One Step Simplification" (formula "45"))
                               (builtin "Use Operation Contract" (formula "45") (newnames "heapBefore_sort,exc_81,heapAfter_sort,anon_heap_sort") (contract "de.wiesler.Sorter[de.wiesler.Sorter::sort([I,int,int,de.wiesler.Storage)].JML normal_behavior operation contract.0"))
                              (branch "Post (sort)"
                                  (builtin "One Step Simplification" (formula "47"))
                                  (builtin "One Step Simplification" (formula "42"))
                                 (rule "andLeft" (formula "42"))
                                 (rule "andLeft" (formula "43"))
                                 (rule "andLeft" (formula "43"))
                                 (rule "andLeft" (formula "45"))
                                 (rule "andLeft" (formula "44"))
                                 (rule "andLeft" (formula "45"))
                                 (rule "translateJavaSubInt" (formula "42") (term "2,0,1,0"))
                                 (rule "polySimp_elimSub" (formula "42") (term "2,0,1,0"))
                                 (rule "mul_literals" (formula "42") (term "1,2,0,1,0"))
                                 (rule "polySimp_addComm1" (formula "42") (term "2,0,1,0"))
                                 (rule "polySimp_addComm0" (formula "42") (term "0,2,0,1,0"))
                                 (rule "blockEmpty" (formula "52") (term "1"))
                                  (builtin "Block Contract (Internal)" (formula "52") (newnames "anonOut_heap_1,result_67,exc_82,heap_Before_BLOCK_1,savedHeap_Before_BLOCK_1,o,f"))
                                 (branch "Validity"
                                     (builtin "One Step Simplification" (formula "53"))
                                     (builtin "One Step Simplification" (formula "48"))
                                    (rule "andLeft" (formula "48"))
                                    (rule "translateJavaSubInt" (formula "48") (term "0,0"))
                                    (rule "polySimp_elimSub" (formula "48") (term "0,0"))
                                    (rule "polySimp_addComm0" (formula "48") (term "0,0"))
                                    (rule "narrowSelectArrayType" (formula "44") (term "2,0") (ifseqformula "48") (ifseqformula "52"))
                                    (rule "variableDeclarationAssign" (formula "53") (term "1"))
                                    (rule "variableDeclaration" (formula "53") (term "1") (newnames "exc_82_1"))
                                    (rule "assignment" (formula "53") (term "1"))
                                     (builtin "One Step Simplification" (formula "53"))
                                    (rule "emptyStatement" (formula "53") (term "1"))
                                     (builtin "One Step Simplification" (formula "53"))
                                    (rule "emptyStatement" (formula "53") (term "1"))
                                    (rule "commuteUnion" (formula "42") (term "1,0"))
                                    (rule "tryEmpty" (formula "53") (term "1"))
                                    (rule "blockEmptyLabel" (formula "53") (term "1"))
                                    (rule "blockEmpty" (formula "53") (term "1"))
                                    (rule "methodCallEmpty" (formula "53") (term "1"))
                                     (builtin "One Step Simplification" (formula "53"))
                                    (rule "emptyModality" (formula "53") (term "1"))
                                     (builtin "One Step Simplification" (formula "53"))
                                    (rule "closeTrue" (formula "53"))
                                 )
                                 (branch "Precondition"
                                    (rule "andRight" (formula "52"))
                                    (branch "Case 1"
                                        (builtin "One Step Simplification" (formula "52"))
                                       (rule "translateJavaSubInt" (formula "52") (term "0,0"))
                                       (rule "polySimp_elimSub" (formula "52") (term "0,0"))
                                       (rule "polySimp_addComm0" (formula "52") (term "0,0"))
                                       (rule "close" (formula "52") (ifseqformula "8"))
                                    )
                                    (branch "Case 2"
                                        (builtin "One Step Simplification" (formula "52"))
                                       (rule "wellFormedAnonEQ" (formula "52") (ifseqformula "42"))
                                       (rule "wellFormedAnon" (formula "52") (term "0"))
                                       (rule "replace_known_left" (formula "52") (term "1,0") (ifseqformula "38"))
                                        (builtin "One Step Simplification" (formula "52") (ifInst ""  (formula "41")))
                                       (rule "wellFormedAnonEQ" (formula "52") (ifseqformula "34"))
                                       (rule "wellFormedAnon" (formula "52") (term "0"))
                                       (rule "replace_known_left" (formula "52") (term "1,0") (ifseqformula "30"))
                                        (builtin "One Step Simplification" (formula "52") (ifInst ""  (formula "33")))
                                       (rule "wellFormedAnonEQ" (formula "52") (ifseqformula "21"))
                                       (rule "replace_known_left" (formula "52") (term "0") (ifseqformula "1"))
                                        (builtin "One Step Simplification" (formula "52") (ifInst ""  (formula "20")))
                                       (rule "closeTrue" (formula "52"))
                                    )
                                 )
                                 (branch "Usage"
                                     (builtin "One Step Simplification" (formula "48"))
                                     (builtin "One Step Simplification" (formula "53"))
                                    (rule "selectCreatedOfAnonAsFormulaEQ" (formula "48") (term "0,1,0,1,0") (ifseqformula "42"))
                                     (builtin "One Step Simplification" (formula "48"))
                                    (rule "selectCreatedOfAnonAsFormulaEQ" (formula "48") (term "0,1,1,1,0") (ifseqformula "42"))
                                     (builtin "One Step Simplification" (formula "48"))
                                    (rule "selectCreatedOfAnonAsFormulaEQ" (formula "48") (term "0,0,0,1,0,1,0") (ifseqformula "34"))
                                     (builtin "One Step Simplification" (formula "48"))
                                    (rule "selectCreatedOfAnonAsFormulaEQ" (formula "48") (term "0,0,0,1,1,1,0") (ifseqformula "34"))
                                     (builtin "One Step Simplification" (formula "48"))
                                    (rule "selectCreatedOfAnonAsFormulaEQ" (formula "48") (term "0,0,0,0,0,1,0,1,0") (ifseqformula "21"))
                                    (rule "selectCreatedOfAnonAsFormulaEQ" (formula "48") (term "0,0,0,0,0,1,1,1,0") (ifseqformula "21"))
                                    (rule "andLeft" (formula "48"))
                                    (rule "andLeft" (formula "48"))
                                    (rule "andLeft" (formula "49"))
                                    (rule "andLeft" (formula "48"))
                                    (rule "replace_known_left" (formula "51") (term "0") (ifseqformula "48"))
                                     (builtin "One Step Simplification" (formula "51"))
                                    (rule "true_left" (formula "51"))
                                    (rule "commuteUnion" (formula "42") (term "1,0"))
                                    (rule "shift_paren_or" (formula "50"))
                                    (rule "shift_paren_or" (formula "50") (term "0"))
                                    (rule "shift_paren_or" (formula "50") (term "0,0"))
                                    (rule "shift_paren_or" (formula "50") (term "0,0,0"))
                                    (rule "shift_paren_or" (formula "50") (term "0,0,0,0"))
                                    (rule "shift_paren_or" (formula "50") (term "0,0,0,0,0"))
                                    (rule "commute_or_2" (formula "50"))
                                    (rule "commute_or_2" (formula "50") (term "0,0"))
                                    (rule "commute_or_2" (formula "50") (term "0"))
                                    (rule "commute_or_2" (formula "50") (term "0,0,0,0"))
                                    (rule "commute_or_2" (formula "50") (term "0,0,0"))
                                    (rule "commute_or_2" (formula "50") (term "0,0"))
                                    (rule "ifUnfold" (formula "56") (term "1") (inst "#boolv=x"))
                                    (rule "variableDeclaration" (formula "56") (term "1") (newnames "x_4"))
                                    (rule "inequality_comparison_simple" (formula "56") (term "1"))
                                     (builtin "One Step Simplification" (formula "56"))
                                    (rule "replace_known_left" (formula "56") (term "0,0,1,0") (ifseqformula "48"))
                                     (builtin "One Step Simplification" (formula "56"))
                                    (rule "ifSplit" (formula "56"))
                                    (branch "if x_4 true"
                                        (builtin "One Step Simplification" (formula "57"))
                                        (builtin "One Step Simplification" (formula "1"))
                                       (rule "closeFalse" (formula "1"))
                                    )
                                    (branch "if x_4 false"
                                        (builtin "One Step Simplification" (formula "57"))
                                        (builtin "One Step Simplification" (formula "1"))
                                       (rule "true_left" (formula "1"))
                                       (rule "blockEmpty" (formula "56") (term "1"))
                                       (rule "methodCallReturn" (formula "56") (term "1"))
                                       (rule "assignment" (formula "56") (term "1"))
                                        (builtin "One Step Simplification" (formula "56"))
                                       (rule "methodCallEmpty" (formula "56") (term "1"))
                                       (rule "tryEmpty" (formula "56") (term "1"))
                                       (rule "emptyModality" (formula "56") (term "1"))
                                       (rule "andRight" (formula "56"))
                                       (branch "Case 1"
                                          (rule "andRight" (formula "56"))
                                          (branch "Case 1"
                                              (builtin "One Step Simplification" (formula "56"))
                                             (rule "inEqSimp_ltToLeq" (formula "16"))
                                             (rule "polySimp_rightDist" (formula "16") (term "1,0,0"))
                                             (rule "polySimp_mulAssoc" (formula "16") (term "0,1,0,0"))
                                             (rule "polySimp_mulComm0" (formula "16") (term "0,0,1,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "16") (term "0,1,0,0"))
                                             (rule "polySimp_elimOne" (formula "16") (term "0,1,0,0"))
                                             (rule "polySimp_addAssoc" (formula "16") (term "0,0"))
                                             (rule "polySimp_addComm1" (formula "16") (term "0"))
                                             (rule "polySimp_addComm1" (formula "16") (term "0,0"))
                                             (rule "add_literals" (formula "16") (term "0,0,0"))
                                             (rule "inEqSimp_homoInEq0" (formula "17"))
                                             (rule "polySimp_mulComm0" (formula "17") (term "1,0"))
                                             (rule "polySimp_rightDist" (formula "17") (term "1,0"))
                                             (rule "polySimp_mulAssoc" (formula "17") (term "0,1,0"))
                                             (rule "polySimp_mulComm0" (formula "17") (term "0,0,1,0"))
                                             (rule "polySimp_mulLiterals" (formula "17") (term "0,1,0"))
                                             (rule "polySimp_elimOne" (formula "17") (term "0,1,0"))
                                             (rule "polySimp_addAssoc" (formula "17") (term "0"))
                                             (rule "inEqSimp_sepNegMonomial0" (formula "16"))
                                             (rule "polySimp_mulLiterals" (formula "16") (term "0"))
                                             (rule "polySimp_elimOne" (formula "16") (term "0"))
                                             (rule "inEqSimp_sepNegMonomial1" (formula "17"))
                                             (rule "polySimp_mulLiterals" (formula "17") (term "0"))
                                             (rule "polySimp_elimOne" (formula "17") (term "0"))
                                             (rule "inEqSimp_subsumption1" (formula "14") (ifseqformula "12"))
                                             (rule "leq_literals" (formula "14") (term "0"))
                                              (builtin "One Step Simplification" (formula "14"))
                                             (rule "true_left" (formula "14"))
                                             (rule "inEqSimp_subsumption1" (formula "4") (ifseqformula "10"))
                                             (rule "leq_literals" (formula "4") (term "0"))
                                              (builtin "One Step Simplification" (formula "4"))
                                             (rule "true_left" (formula "4"))
                                             (rule "inEqSimp_subsumption1" (formula "10") (ifseqformula "14"))
                                             (rule "inEqSimp_homoInEq0" (formula "10") (term "0"))
                                             (rule "polySimp_pullOutFactor1b" (formula "10") (term "0,0"))
                                             (rule "add_literals" (formula "10") (term "1,1,0,0"))
                                             (rule "times_zero_1" (formula "10") (term "1,0,0"))
                                             (rule "add_literals" (formula "10") (term "0,0"))
                                             (rule "qeq_literals" (formula "10") (term "0"))
                                              (builtin "One Step Simplification" (formula "10"))
                                             (rule "true_left" (formula "10"))
                                             (rule "inEqSimp_exactShadow3" (formula "5") (ifseqformula "14"))
                                             (rule "mul_literals" (formula "5") (term "0,0"))
                                             (rule "polySimp_addAssoc" (formula "5") (term "0"))
                                             (rule "add_literals" (formula "5") (term "0,0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "5"))
                                             (rule "mul_literals" (formula "5") (term "1"))
                                             (rule "inEqSimp_subsumption1" (formula "5") (ifseqformula "10"))
                                             (rule "leq_literals" (formula "5") (term "0"))
                                              (builtin "One Step Simplification" (formula "5"))
                                             (rule "true_left" (formula "5"))
                                             (rule "inEqSimp_exactShadow3" (formula "13") (ifseqformula "4"))
                                             (rule "polySimp_rightDist" (formula "13") (term "0,0"))
                                             (rule "mul_literals" (formula "13") (term "0,0,0"))
                                             (rule "polySimp_addComm1" (formula "13") (term "0"))
                                             (rule "add_literals" (formula "13") (term "0,0"))
                                             (rule "inEqSimp_sepNegMonomial1" (formula "13"))
                                             (rule "polySimp_mulLiterals" (formula "13") (term "0"))
                                             (rule "polySimp_elimOne" (formula "13") (term "0"))
                                             (rule "inEqSimp_subsumption0" (formula "3") (ifseqformula "13"))
                                             (rule "leq_literals" (formula "3") (term "0"))
                                              (builtin "One Step Simplification" (formula "3"))
                                             (rule "true_left" (formula "3"))
                                             (rule "inEqSimp_exactShadow3" (formula "11") (ifseqformula "10"))
                                             (rule "polySimp_mulComm0" (formula "11") (term "0,0"))
                                             (rule "polySimp_addComm0" (formula "11") (term "0"))
                                             (rule "inEqSimp_sepNegMonomial1" (formula "11"))
                                             (rule "polySimp_mulLiterals" (formula "11") (term "0"))
                                             (rule "polySimp_elimOne" (formula "11") (term "0"))
                                             (rule "inEqSimp_subsumption0" (formula "3") (ifseqformula "11"))
                                             (rule "leq_literals" (formula "3") (term "0"))
                                              (builtin "One Step Simplification" (formula "3"))
                                             (rule "true_left" (formula "3"))
                                             (rule "inEqSimp_exactShadow3" (formula "13") (ifseqformula "10"))
                                             (rule "polySimp_rightDist" (formula "13") (term "0,0"))
                                             (rule "mul_literals" (formula "13") (term "0,0,0"))
                                             (rule "polySimp_addComm1" (formula "13") (term "0"))
                                             (rule "add_literals" (formula "13") (term "0,0"))
                                             (rule "inEqSimp_sepNegMonomial1" (formula "13"))
                                             (rule "polySimp_mulLiterals" (formula "13") (term "0"))
                                             (rule "polySimp_elimOne" (formula "13") (term "0"))
                                             (rule "inEqSimp_subsumption0" (formula "12") (ifseqformula "13"))
                                             (rule "leq_literals" (formula "12") (term "0"))
                                              (builtin "One Step Simplification" (formula "12"))
                                             (rule "true_left" (formula "12"))
                                             (rule "Free_class_invariant_axiom_for_de_wiesler_SampleParameters" (formula "24"))
                                             (rule "true_left" (formula "24"))
                                             (rule "Contract_axiom_for_isValidForLen_in_SampleParameters" (formula "22") (term "0"))
                                             (rule "selectCreatedOfAnonAsFormulaEQ" (formula "22") (term "1,0,0") (ifseqformula "18"))
                                             (rule "replace_known_left" (formula "22") (term "0,0,0,0") (ifseqformula "25"))
                                              (builtin "One Step Simplification" (formula "22") (ifInst ""  (formula "49")) (ifInst ""  (formula "20")) (ifInst ""  (formula "50")) (ifInst ""  (formula "25")))
                                             (rule "Class_invariant_axiom_for_de_wiesler_Storage" (formula "6"))
                                             (rule "andLeft" (formula "6"))
                                             (rule "andLeft" (formula "6"))
                                             (rule "notLeft" (formula "8"))
                                             (rule "notLeft" (formula "7"))
                                             (rule "andLeft" (formula "6"))
                                             (rule "andLeft" (formula "6"))
                                             (rule "notLeft" (formula "8"))
                                             (rule "notLeft" (formula "7"))
                                             (rule "andLeft" (formula "6"))
                                             (rule "notLeft" (formula "7"))
                                             (rule "andLeft" (formula "6"))
                                             (rule "notLeft" (formula "7"))
                                             (rule "andLeft" (formula "6"))
                                             (rule "notLeft" (formula "6"))
                                             (rule "notLeft" (formula "6"))
                                             (rule "Class_invariant_axiom_for_de_wiesler_SampleParameters" (formula "24"))
                                             (rule "true_left" (formula "24"))
                                             (rule "Free_class_invariant_axiom_for_de_wiesler_Storage" (formula "41"))
                                              (builtin "One Step Simplification" (formula "41"))
                                             (rule "andLeft" (formula "41"))
                                             (rule "andLeft" (formula "41"))
                                             (rule "andLeft" (formula "43"))
                                             (rule "andLeft" (formula "41"))
                                             (rule "andLeft" (formula "44"))
                                             (rule "andLeft" (formula "41"))
                                             (rule "andLeft" (formula "45"))
                                             (rule "andLeft" (formula "41"))
                                             (rule "andLeft" (formula "46"))
                                             (rule "andLeft" (formula "41"))
                                             (rule "andLeft" (formula "47"))
                                             (rule "andLeft" (formula "41"))
                                             (rule "andLeft" (formula "48"))
                                             (rule "andLeft" (formula "41"))
                                             (rule "andLeft" (formula "49"))
                                             (rule "andLeft" (formula "41"))
                                             (rule "andLeft" (formula "50"))
                                             (rule "andLeft" (formula "50"))
                                             (rule "andLeft" (formula "50"))
                                             (rule "andLeft" (formula "50"))
                                             (rule "andLeft" (formula "50"))
                                             (rule "andLeft" (formula "50"))
                                             (rule "andLeft" (formula "50"))
                                             (rule "andLeft" (formula "50"))
                                             (rule "andLeft" (formula "50"))
                                             (rule "andLeft" (formula "50"))
                                             (rule "andLeft" (formula "50"))
                                             (rule "andLeft" (formula "50"))
                                             (rule "andLeft" (formula "50"))
                                             (rule "andLeft" (formula "50"))
                                             (rule "andLeft" (formula "50"))
                                             (rule "andLeft" (formula "50"))
                                             (rule "andLeft" (formula "50"))
                                             (rule "andLeft" (formula "50"))
                                             (rule "andLeft" (formula "50"))
                                             (rule "andLeft" (formula "50"))
                                             (rule "translateJavaMulInt" (formula "44") (term "1"))
                                             (rule "mul_literals" (formula "44") (term "1"))
                                             (rule "translateJavaMulInt" (formula "43") (term "1"))
                                             (rule "mul_literals" (formula "43") (term "1"))
                                             (rule "disjointDefinition" (formula "77"))
                                              (builtin "One Step Simplification" (formula "77"))
                                             (rule "notLeft" (formula "77"))
                                             (rule "disjointDefinition" (formula "76"))
                                              (builtin "One Step Simplification" (formula "76"))
                                             (rule "notLeft" (formula "76"))
                                             (rule "disjointDefinition" (formula "75"))
                                              (builtin "One Step Simplification" (formula "75"))
                                             (rule "notLeft" (formula "75"))
                                             (rule "eqSymm" (formula "80"))
                                             (rule "disjointDefinition" (formula "74"))
                                              (builtin "One Step Simplification" (formula "74"))
                                             (rule "notLeft" (formula "74"))
                                             (rule "eqSymm" (formula "79"))
                                             (rule "disjointDefinition" (formula "73"))
                                              (builtin "One Step Simplification" (formula "73"))
                                             (rule "notLeft" (formula "73"))
                                             (rule "eqSymm" (formula "78"))
                                             (rule "disjointDefinition" (formula "72"))
                                              (builtin "One Step Simplification" (formula "72"))
                                             (rule "notLeft" (formula "72"))
                                             (rule "eqSymm" (formula "77"))
                                             (rule "disjointDefinition" (formula "71"))
                                              (builtin "One Step Simplification" (formula "71"))
                                             (rule "notLeft" (formula "71"))
                                             (rule "eqSymm" (formula "76"))
                                             (rule "disjointDefinition" (formula "70"))
                                              (builtin "One Step Simplification" (formula "70"))
                                             (rule "notLeft" (formula "70"))
                                             (rule "eqSymm" (formula "75"))
                                             (rule "disjointDefinition" (formula "69"))
                                              (builtin "One Step Simplification" (formula "69"))
                                             (rule "notLeft" (formula "69"))
                                             (rule "eqSymm" (formula "74"))
                                             (rule "disjointDefinition" (formula "68"))
                                              (builtin "One Step Simplification" (formula "68"))
                                             (rule "notLeft" (formula "68"))
                                             (rule "eqSymm" (formula "73"))
                                             (rule "disjointDefinition" (formula "67"))
                                              (builtin "One Step Simplification" (formula "67"))
                                             (rule "notLeft" (formula "67"))
                                             (rule "eqSymm" (formula "72"))
                                             (rule "disjointDefinition" (formula "66"))
                                              (builtin "One Step Simplification" (formula "66"))
                                             (rule "notLeft" (formula "66"))
                                             (rule "eqSymm" (formula "71"))
                                             (rule "disjointDefinition" (formula "65"))
                                              (builtin "One Step Simplification" (formula "65"))
                                             (rule "notLeft" (formula "65"))
                                             (rule "eqSymm" (formula "70"))
                                             (rule "disjointDefinition" (formula "64"))
                                              (builtin "One Step Simplification" (formula "64"))
                                             (rule "notLeft" (formula "64"))
                                             (rule "eqSymm" (formula "69"))
                                             (rule "disjointDefinition" (formula "63"))
                                              (builtin "One Step Simplification" (formula "63"))
                                             (rule "notLeft" (formula "63"))
                                             (rule "eqSymm" (formula "68"))
                                             (rule "disjointDefinition" (formula "62"))
                                              (builtin "One Step Simplification" (formula "62"))
                                             (rule "notLeft" (formula "62"))
                                             (rule "disjointDefinition" (formula "61"))
                                              (builtin "One Step Simplification" (formula "61"))
                                             (rule "notLeft" (formula "61"))
                                             (rule "eqSymm" (formula "66"))
                                             (rule "disjointDefinition" (formula "60"))
                                              (builtin "One Step Simplification" (formula "60"))
                                             (rule "notLeft" (formula "60"))
                                             (rule "eqSymm" (formula "65"))
                                             (rule "disjointDefinition" (formula "59"))
                                              (builtin "One Step Simplification" (formula "59"))
                                             (rule "notLeft" (formula "59"))
                                             (rule "disjointDefinition" (formula "58"))
                                              (builtin "One Step Simplification" (formula "58"))
                                             (rule "notLeft" (formula "58"))
                                             (rule "disjointDefinition" (formula "57"))
                                              (builtin "One Step Simplification" (formula "57"))
                                             (rule "notLeft" (formula "57"))
                                             (rule "disjointDefinition" (formula "56"))
                                              (builtin "One Step Simplification" (formula "56"))
                                             (rule "notLeft" (formula "56"))
                                             (rule "disjointDefinition" (formula "55"))
                                              (builtin "One Step Simplification" (formula "55"))
                                             (rule "notLeft" (formula "55"))
                                             (rule "disjointDefinition" (formula "54"))
                                              (builtin "One Step Simplification" (formula "54"))
                                             (rule "notLeft" (formula "54"))
                                             (rule "disjointDefinition" (formula "53"))
                                              (builtin "One Step Simplification" (formula "53"))
                                             (rule "notLeft" (formula "53"))
                                             (rule "disjointDefinition" (formula "52"))
                                              (builtin "One Step Simplification" (formula "52"))
                                             (rule "notLeft" (formula "52"))
                                             (rule "disjointDefinition" (formula "50"))
                                              (builtin "One Step Simplification" (formula "50"))
                                             (rule "notLeft" (formula "50"))
                                             (rule "disjointDefinition" (formula "50"))
                                              (builtin "One Step Simplification" (formula "50"))
                                             (rule "notLeft" (formula "50"))
                                             (rule "applyEq" (formula "15") (term "1,0") (ifseqformula "49"))
                                             (rule "applyEq" (formula "37") (term "0,1,0") (ifseqformula "49"))
                                             (rule "distributeIntersection" (formula "15") (term "0"))
                                             (rule "unionEqualsEmpty" (formula "15"))
                                             (rule "andLeft" (formula "15"))
                                             (rule "distributeIntersection" (formula "16") (term "0"))
                                             (rule "distributeIntersection" (formula "15") (term "0"))
                                             (rule "distributeIntersection" (formula "16") (term "1,0"))
                                             (rule "distributeIntersection" (formula "16") (term "0,0"))
                                             (rule "distributeIntersection" (formula "15") (term "1,0"))
                                             (rule "distributeIntersection" (formula "15") (term "0,0"))
                                             (rule "unionEqualsEmpty" (formula "16"))
                                             (rule "andLeft" (formula "16"))
                                             (rule "unionEqualsEmpty" (formula "15"))
                                             (rule "andLeft" (formula "15"))
                                             (rule "unionEqualsEmpty" (formula "18"))
                                              (builtin "One Step Simplification" (formula "18"))
                                             (rule "andLeft" (formula "18"))
                                             (rule "notLeft" (formula "18"))
                                             (rule "notLeft" (formula "18"))
                                             (rule "eqSymm" (formula "58"))
                                             (rule "eqSymm" (formula "57"))
                                             (rule "unionEqualsEmpty" (formula "17"))
                                              (builtin "One Step Simplification" (formula "17"))
                                             (rule "andLeft" (formula "17"))
                                             (rule "notLeft" (formula "18"))
                                             (rule "notLeft" (formula "17"))
                                             (rule "eqSymm" (formula "57"))
                                             (rule "eqSymm" (formula "56"))
                                             (rule "unionEqualsEmpty" (formula "15"))
                                              (builtin "One Step Simplification" (formula "15"))
                                             (rule "andLeft" (formula "15"))
                                             (rule "notLeft" (formula "16"))
                                             (rule "notLeft" (formula "15"))
                                             (rule "eqSymm" (formula "56"))
                                             (rule "eqSymm" (formula "55"))
                                             (rule "unionEqualsEmpty" (formula "15"))
                                              (builtin "One Step Simplification" (formula "15"))
                                             (rule "andLeft" (formula "15"))
                                             (rule "notLeft" (formula "15"))
                                             (rule "notLeft" (formula "15"))
                                             (rule "eqSymm" (formula "55"))
                                             (rule "eqSymm" (formula "54"))
                                             (rule "commuteUnion" (formula "48") (term "0,1"))
                                             (rule "commuteUnion" (formula "48") (term "1,1,1"))
                                             (rule "commuteUnion" (formula "36") (term "1,1,0,1,0"))
                                             (rule "commuteUnion_2" (formula "36") (term "0,0,1,0"))
                                             (rule "commuteUnion" (formula "48") (term "1,0,1"))
                                             (rule "commuteUnion" (formula "36") (term "0,0,0,1,0"))
                                             (rule "commuteUnion_2" (formula "36") (term "0,0,1,0"))
                                             (rule "commuteUnion_2" (formula "36") (term "0,1,0"))
                                             (rule "Class_invariant_axiom_for_de_wiesler_Storage" (formula "102"))
                                             (rule "replace_known_right" (formula "102") (term "0,1") (ifseqformula "97"))
                                              (builtin "One Step Simplification" (formula "102") (ifInst ""  (formula "91")) (ifInst ""  (formula "90")) (ifInst ""  (formula "92")) (ifInst ""  (formula "93")) (ifInst ""  (formula "94")) (ifInst ""  (formula "95")) (ifInst ""  (formula "96")))
                                             (rule "closeTrue" (formula "102"))
                                          )
                                          (branch "Case 2"
                                             (rule "andRight" (formula "56"))
                                             (branch "Case 1"
                                                 (builtin "One Step Simplification" (formula "56"))
                                                (rule "inEqSimp_ltToLeq" (formula "16"))
                                                (rule "polySimp_rightDist" (formula "16") (term "1,0,0"))
                                                (rule "polySimp_mulAssoc" (formula "16") (term "0,1,0,0"))
                                                (rule "polySimp_mulComm0" (formula "16") (term "0,0,1,0,0"))
                                                (rule "polySimp_mulLiterals" (formula "16") (term "0,1,0,0"))
                                                (rule "polySimp_elimOne" (formula "16") (term "0,1,0,0"))
                                                (rule "polySimp_addAssoc" (formula "16") (term "0,0"))
                                                (rule "polySimp_addComm1" (formula "16") (term "0"))
                                                (rule "polySimp_addComm1" (formula "16") (term "0,0"))
                                                (rule "add_literals" (formula "16") (term "0,0,0"))
                                                (rule "inEqSimp_homoInEq0" (formula "17"))
                                                (rule "polySimp_mulComm0" (formula "17") (term "1,0"))
                                                (rule "polySimp_rightDist" (formula "17") (term "1,0"))
                                                (rule "polySimp_mulAssoc" (formula "17") (term "0,1,0"))
                                                (rule "polySimp_mulComm0" (formula "17") (term "0,0,1,0"))
                                                (rule "polySimp_mulLiterals" (formula "17") (term "0,1,0"))
                                                (rule "polySimp_elimOne" (formula "17") (term "0,1,0"))
                                                (rule "polySimp_addAssoc" (formula "17") (term "0"))
                                                (rule "inEqSimp_sepNegMonomial0" (formula "16"))
                                                (rule "polySimp_mulLiterals" (formula "16") (term "0"))
                                                (rule "polySimp_elimOne" (formula "16") (term "0"))
                                                (rule "inEqSimp_sepNegMonomial1" (formula "17"))
                                                (rule "polySimp_mulLiterals" (formula "17") (term "0"))
                                                (rule "polySimp_elimOne" (formula "17") (term "0"))
                                                (rule "inEqSimp_subsumption1" (formula "4") (ifseqformula "10"))
                                                (rule "leq_literals" (formula "4") (term "0"))
                                                 (builtin "One Step Simplification" (formula "4"))
                                                (rule "true_left" (formula "4"))
                                                (rule "inEqSimp_subsumption1" (formula "10") (ifseqformula "15"))
                                                (rule "inEqSimp_homoInEq0" (formula "10") (term "0"))
                                                (rule "polySimp_pullOutFactor1b" (formula "10") (term "0,0"))
                                                (rule "add_literals" (formula "10") (term "1,1,0,0"))
                                                (rule "times_zero_1" (formula "10") (term "1,0,0"))
                                                (rule "add_literals" (formula "10") (term "0,0"))
                                                (rule "qeq_literals" (formula "10") (term "0"))
                                                 (builtin "One Step Simplification" (formula "10"))
                                                (rule "true_left" (formula "10"))
                                                (rule "inEqSimp_subsumption1" (formula "12") (ifseqformula "10"))
                                                (rule "leq_literals" (formula "12") (term "0"))
                                                 (builtin "One Step Simplification" (formula "12"))
                                                (rule "true_left" (formula "12"))
                                                (rule "inEqSimp_exactShadow3" (formula "13") (ifseqformula "4"))
                                                (rule "polySimp_rightDist" (formula "13") (term "0,0"))
                                                (rule "mul_literals" (formula "13") (term "0,0,0"))
                                                (rule "polySimp_addComm1" (formula "13") (term "0"))
                                                (rule "add_literals" (formula "13") (term "0,0"))
                                                (rule "inEqSimp_sepNegMonomial1" (formula "13"))
                                                (rule "polySimp_mulLiterals" (formula "13") (term "0"))
                                                (rule "polySimp_elimOne" (formula "13") (term "0"))
                                                (rule "inEqSimp_subsumption0" (formula "3") (ifseqformula "13"))
                                                (rule "leq_literals" (formula "3") (term "0"))
                                                 (builtin "One Step Simplification" (formula "3"))
                                                (rule "true_left" (formula "3"))
                                                (rule "inEqSimp_exactShadow3" (formula "4") (ifseqformula "14"))
                                                (rule "mul_literals" (formula "4") (term "0,0"))
                                                (rule "polySimp_addAssoc" (formula "4") (term "0"))
                                                (rule "add_literals" (formula "4") (term "0,0"))
                                                (rule "inEqSimp_sepPosMonomial1" (formula "4"))
                                                (rule "mul_literals" (formula "4") (term "1"))
                                                (rule "inEqSimp_subsumption1" (formula "4") (ifseqformula "9"))
                                                (rule "leq_literals" (formula "4") (term "0"))
                                                 (builtin "One Step Simplification" (formula "4"))
                                                (rule "true_left" (formula "4"))
                                                (rule "inEqSimp_exactShadow3" (formula "11") (ifseqformula "10"))
                                                (rule "polySimp_mulComm0" (formula "11") (term "0,0"))
                                                (rule "polySimp_addComm0" (formula "11") (term "0"))
                                                (rule "inEqSimp_sepNegMonomial1" (formula "11"))
                                                (rule "polySimp_mulLiterals" (formula "11") (term "0"))
                                                (rule "polySimp_elimOne" (formula "11") (term "0"))
                                                (rule "inEqSimp_subsumption0" (formula "3") (ifseqformula "11"))
                                                (rule "leq_literals" (formula "3") (term "0"))
                                                 (builtin "One Step Simplification" (formula "3"))
                                                (rule "true_left" (formula "3"))
                                                (rule "inEqSimp_exactShadow3" (formula "13") (ifseqformula "10"))
                                                (rule "polySimp_rightDist" (formula "13") (term "0,0"))
                                                (rule "mul_literals" (formula "13") (term "0,0,0"))
                                                (rule "polySimp_addComm1" (formula "13") (term "0"))
                                                (rule "add_literals" (formula "13") (term "0,0"))
                                                (rule "inEqSimp_sepNegMonomial1" (formula "13"))
                                                (rule "polySimp_mulLiterals" (formula "13") (term "0"))
                                                (rule "polySimp_elimOne" (formula "13") (term "0"))
                                                (rule "inEqSimp_subsumption0" (formula "12") (ifseqformula "13"))
                                                (rule "leq_literals" (formula "12") (term "0"))
                                                 (builtin "One Step Simplification" (formula "12"))
                                                (rule "true_left" (formula "12"))
                                                (rule "Contract_axiom_for_isValidForLen_in_SampleParameters" (formula "22") (term "0"))
                                                (rule "selectCreatedOfAnonAsFormulaEQ" (formula "22") (term "1,0,0") (ifseqformula "18"))
                                                (rule "replace_known_left" (formula "22") (term "0,1") (ifseqformula "26"))
                                                 (builtin "One Step Simplification" (formula "22") (ifInst ""  (formula "26")) (ifInst ""  (formula "50")) (ifInst ""  (formula "20")) (ifInst ""  (formula "51")) (ifInst ""  (formula "25")))
                                                (rule "true_left" (formula "22"))
                                                (rule "Class_invariant_axiom_for_de_wiesler_Storage" (formula "6"))
                                                (rule "andLeft" (formula "6"))
                                                (rule "andLeft" (formula "6"))
                                                (rule "notLeft" (formula "8"))
                                                (rule "notLeft" (formula "7"))
                                                (rule "andLeft" (formula "6"))
                                                (rule "andLeft" (formula "6"))
                                                (rule "notLeft" (formula "8"))
                                                (rule "notLeft" (formula "7"))
                                                (rule "andLeft" (formula "6"))
                                                (rule "notLeft" (formula "7"))
                                                (rule "andLeft" (formula "6"))
                                                (rule "notLeft" (formula "7"))
                                                (rule "andLeft" (formula "6"))
                                                (rule "notLeft" (formula "6"))
                                                (rule "notLeft" (formula "6"))
                                                (rule "Definition_axiom_for_isInInt_in_de_wiesler_SampleParameters" (formula "22") (term "0"))
                                                 (builtin "One Step Simplification" (formula "22"))
                                                (rule "expand_inInt" (formula "22") (term "1"))
                                                (rule "expand_inInt" (formula "22") (term "1,0"))
                                                (rule "expand_inInt" (formula "22") (term "0,0"))
                                                (rule "replace_int_MAX" (formula "22") (term "1,0,1"))
                                                (rule "replace_int_MIN" (formula "22") (term "0,1,1"))
                                                (rule "replace_int_MAX" (formula "22") (term "1,0,1,0"))
                                                (rule "replace_int_MIN" (formula "22") (term "0,1,1,0"))
                                                (rule "replace_int_MIN" (formula "22") (term "0,1,0,0"))
                                                (rule "replace_int_MAX" (formula "22") (term "1,0,0,0"))
                                                (rule "andLeft" (formula "22"))
                                                (rule "andLeft" (formula "23"))
                                                (rule "andLeft" (formula "22"))
                                                (rule "andLeft" (formula "23"))
                                                (rule "andLeft" (formula "22"))
                                                (rule "inEqSimp_commuteLeq" (formula "27"))
                                                (rule "inEqSimp_commuteLeq" (formula "25"))
                                                (rule "inEqSimp_commuteLeq" (formula "23"))
                                                (rule "Free_class_invariant_axiom_for_de_wiesler_Storage" (formula "14"))
                                                 (builtin "One Step Simplification" (formula "14"))
                                                (rule "andLeft" (formula "14"))
                                                (rule "andLeft" (formula "14"))
                                                (rule "andLeft" (formula "16"))
                                                (rule "andLeft" (formula "14"))
                                                (rule "andLeft" (formula "17"))
                                                (rule "andLeft" (formula "14"))
                                                (rule "andLeft" (formula "18"))
                                                (rule "andLeft" (formula "14"))
                                                (rule "andLeft" (formula "19"))
                                                (rule "andLeft" (formula "14"))
                                                (rule "andLeft" (formula "20"))
                                                (rule "andLeft" (formula "14"))
                                                (rule "andLeft" (formula "21"))
                                                (rule "andLeft" (formula "14"))
                                                (rule "andLeft" (formula "22"))
                                                (rule "andLeft" (formula "14"))
                                                (rule "andLeft" (formula "23"))
                                                (rule "andLeft" (formula "23"))
                                                (rule "andLeft" (formula "23"))
                                                (rule "andLeft" (formula "23"))
                                                (rule "andLeft" (formula "23"))
                                                (rule "andLeft" (formula "23"))
                                                (rule "andLeft" (formula "23"))
                                                (rule "andLeft" (formula "23"))
                                                (rule "andLeft" (formula "23"))
                                                (rule "andLeft" (formula "23"))
                                                (rule "andLeft" (formula "23"))
                                                (rule "andLeft" (formula "23"))
                                                (rule "andLeft" (formula "23"))
                                                (rule "andLeft" (formula "23"))
                                                (rule "andLeft" (formula "23"))
                                                (rule "andLeft" (formula "23"))
                                                (rule "andLeft" (formula "23"))
                                                (rule "andLeft" (formula "23"))
                                                (rule "andLeft" (formula "23"))
                                                (rule "andLeft" (formula "23"))
                                                (rule "translateJavaMulInt" (formula "17") (term "1"))
                                                (rule "mul_literals" (formula "17") (term "1"))
                                                (rule "translateJavaMulInt" (formula "16") (term "1"))
                                                (rule "mul_literals" (formula "16") (term "1"))
                                                (rule "disjointDefinition" (formula "50"))
                                                 (builtin "One Step Simplification" (formula "50"))
                                                (rule "notLeft" (formula "50"))
                                                (rule "disjointDefinition" (formula "49"))
                                                 (builtin "One Step Simplification" (formula "49"))
                                                (rule "notLeft" (formula "49"))
                                                (rule "disjointDefinition" (formula "48"))
                                                 (builtin "One Step Simplification" (formula "48"))
                                                (rule "notLeft" (formula "48"))
                                                (rule "eqSymm" (formula "86"))
                                                (rule "disjointDefinition" (formula "47"))
                                                 (builtin "One Step Simplification" (formula "47"))
                                                (rule "notLeft" (formula "47"))
                                                (rule "eqSymm" (formula "85"))
                                                (rule "disjointDefinition" (formula "46"))
                                                 (builtin "One Step Simplification" (formula "46"))
                                                (rule "notLeft" (formula "46"))
                                                (rule "eqSymm" (formula "84"))
                                                (rule "disjointDefinition" (formula "45"))
                                                 (builtin "One Step Simplification" (formula "45"))
                                                (rule "notLeft" (formula "45"))
                                                (rule "eqSymm" (formula "83"))
                                                (rule "disjointDefinition" (formula "44"))
                                                 (builtin "One Step Simplification" (formula "44"))
                                                (rule "notLeft" (formula "44"))
                                                (rule "eqSymm" (formula "82"))
                                                (rule "disjointDefinition" (formula "43"))
                                                 (builtin "One Step Simplification" (formula "43"))
                                                (rule "notLeft" (formula "43"))
                                                (rule "eqSymm" (formula "81"))
                                                (rule "disjointDefinition" (formula "42"))
                                                 (builtin "One Step Simplification" (formula "42"))
                                                (rule "notLeft" (formula "42"))
                                                (rule "eqSymm" (formula "80"))
                                                (rule "disjointDefinition" (formula "41"))
                                                 (builtin "One Step Simplification" (formula "41"))
                                                (rule "notLeft" (formula "41"))
                                                (rule "eqSymm" (formula "79"))
                                                (rule "disjointDefinition" (formula "40"))
                                                 (builtin "One Step Simplification" (formula "40"))
                                                (rule "notLeft" (formula "40"))
                                                (rule "eqSymm" (formula "78"))
                                                (rule "disjointDefinition" (formula "39"))
                                                 (builtin "One Step Simplification" (formula "39"))
                                                (rule "notLeft" (formula "39"))
                                                (rule "eqSymm" (formula "77"))
                                                (rule "disjointDefinition" (formula "38"))
                                                 (builtin "One Step Simplification" (formula "38"))
                                                (rule "notLeft" (formula "38"))
                                                (rule "eqSymm" (formula "76"))
                                                (rule "disjointDefinition" (formula "37"))
                                                 (builtin "One Step Simplification" (formula "37"))
                                                (rule "notLeft" (formula "37"))
                                                (rule "eqSymm" (formula "75"))
                                                (rule "disjointDefinition" (formula "36"))
                                                 (builtin "One Step Simplification" (formula "36"))
                                                (rule "notLeft" (formula "36"))
                                                (rule "eqSymm" (formula "74"))
                                                (rule "disjointDefinition" (formula "35"))
                                                 (builtin "One Step Simplification" (formula "35"))
                                                (rule "notLeft" (formula "35"))
                                                (rule "disjointDefinition" (formula "34"))
                                                 (builtin "One Step Simplification" (formula "34"))
                                                (rule "notLeft" (formula "34"))
                                                (rule "eqSymm" (formula "72"))
                                                (rule "disjointDefinition" (formula "33"))
                                                 (builtin "One Step Simplification" (formula "33"))
                                                (rule "notLeft" (formula "33"))
                                                (rule "eqSymm" (formula "71"))
                                                (rule "disjointDefinition" (formula "32"))
                                                 (builtin "One Step Simplification" (formula "32"))
                                                (rule "notLeft" (formula "32"))
                                                (rule "disjointDefinition" (formula "31"))
                                                 (builtin "One Step Simplification" (formula "31"))
                                                (rule "notLeft" (formula "31"))
                                                (rule "disjointDefinition" (formula "30"))
                                                 (builtin "One Step Simplification" (formula "30"))
                                                (rule "notLeft" (formula "30"))
                                                (rule "disjointDefinition" (formula "29"))
                                                 (builtin "One Step Simplification" (formula "29"))
                                                (rule "notLeft" (formula "29"))
                                                (rule "disjointDefinition" (formula "28"))
                                                 (builtin "One Step Simplification" (formula "28"))
                                                (rule "notLeft" (formula "28"))
                                                (rule "disjointDefinition" (formula "27"))
                                                 (builtin "One Step Simplification" (formula "27"))
                                                (rule "notLeft" (formula "27"))
                                                (rule "disjointDefinition" (formula "26"))
                                                 (builtin "One Step Simplification" (formula "26"))
                                                (rule "notLeft" (formula "26"))
                                                (rule "disjointDefinition" (formula "25"))
                                                 (builtin "One Step Simplification" (formula "25"))
                                                (rule "notLeft" (formula "25"))
                                                (rule "disjointDefinition" (formula "23"))
                                                 (builtin "One Step Simplification" (formula "23"))
                                                (rule "notLeft" (formula "23"))
                                                (rule "disjointDefinition" (formula "23"))
                                                 (builtin "One Step Simplification" (formula "23"))
                                                (rule "notLeft" (formula "23"))
                                                (rule "applyEq" (formula "51") (term "0,1,0") (ifseqformula "22"))
                                                (rule "applyEq" (formula "23") (term "1,0") (ifseqformula "22"))
                                                (rule "distributeIntersection" (formula "23") (term "0"))
                                                (rule "distributeIntersection" (formula "23") (term "1,0"))
                                                (rule "distributeIntersection" (formula "23") (term "0,0"))
                                                (rule "distributeIntersection" (formula "23") (term "0,1,0"))
                                                (rule "distributeIntersection" (formula "23") (term "1,1,0"))
                                                (rule "distributeIntersection" (formula "23") (term "0,0,0"))
                                                (rule "distributeIntersection" (formula "23") (term "1,0,0"))
                                                (rule "unionEqualsEmpty" (formula "23"))
                                                (rule "andLeft" (formula "23"))
                                                (rule "unionEqualsEmpty" (formula "23"))
                                                (rule "andLeft" (formula "23"))
                                                (rule "unionEqualsEmpty" (formula "25"))
                                                (rule "andLeft" (formula "25"))
                                                (rule "unionEqualsEmpty" (formula "24"))
                                                 (builtin "One Step Simplification" (formula "24"))
                                                (rule "andLeft" (formula "24"))
                                                (rule "notLeft" (formula "24"))
                                                (rule "notLeft" (formula "24"))
                                                (rule "eqSymm" (formula "64"))
                                                (rule "eqSymm" (formula "63"))
                                                (rule "unionEqualsEmpty" (formula "23"))
                                                 (builtin "One Step Simplification" (formula "23"))
                                                (rule "andLeft" (formula "23"))
                                                (rule "notLeft" (formula "24"))
                                                (rule "notLeft" (formula "23"))
                                                (rule "eqSymm" (formula "63"))
                                                (rule "eqSymm" (formula "62"))
                                                (rule "unionEqualsEmpty" (formula "24"))
                                                 (builtin "One Step Simplification" (formula "24"))
                                                (rule "andLeft" (formula "24"))
                                                (rule "notLeft" (formula "25"))
                                                (rule "notLeft" (formula "24"))
                                                (rule "eqSymm" (formula "62"))
                                                (rule "eqSymm" (formula "61"))
                                                (rule "unionEqualsEmpty" (formula "23"))
                                                 (builtin "One Step Simplification" (formula "23"))
                                                (rule "andLeft" (formula "23"))
                                                (rule "notLeft" (formula "23"))
                                                (rule "notLeft" (formula "23"))
                                                (rule "eqSymm" (formula "61"))
                                                (rule "eqSymm" (formula "60"))
                                                (rule "commuteUnion" (formula "22") (term "1,1,1"))
                                                (rule "commuteUnion" (formula "22") (term "0,1"))
                                                (rule "commuteUnion_2" (formula "50") (term "0,0,1,0"))
                                                (rule "commuteUnion" (formula "50") (term "1,1,0,1,0"))
                                                (rule "commuteUnion" (formula "22") (term "1,0,1"))
                                                (rule "commuteUnion" (formula "50") (term "0,0,0,1,0"))
                                                (rule "commuteUnion_2" (formula "50") (term "0,0,1,0"))
                                                (rule "commuteUnion_2" (formula "50") (term "0,1,0"))
                                                (rule "Contract_axiom_for_isSortedSlice_in_Functions" (formula "53") (term "0"))
                                                (rule "replace_known_right" (formula "53") (term "0,0,0") (ifseqformula "108"))
                                                 (builtin "One Step Simplification" (formula "53") (ifInst ""  (formula "54")))
                                                (rule "Class_invariant_axiom_for_de_wiesler_Storage" (formula "56"))
                                                (rule "andLeft" (formula "56"))
                                                (rule "notLeft" (formula "57"))
                                                (rule "andLeft" (formula "56"))
                                                (rule "notLeft" (formula "57"))
                                                (rule "andLeft" (formula "56"))
                                                (rule "notLeft" (formula "57"))
                                                (rule "andLeft" (formula "56"))
                                                (rule "notLeft" (formula "57"))
                                                (rule "andLeft" (formula "56"))
                                                (rule "notLeft" (formula "57"))
                                                (rule "andLeft" (formula "56"))
                                                (rule "notLeft" (formula "57"))
                                                (rule "andLeft" (formula "56"))
                                                (rule "notLeft" (formula "56"))
                                                (rule "notLeft" (formula "56"))
                                                (rule "Class_invariant_axiom_for_de_wiesler_SampleParameters" (formula "36"))
                                                (rule "true_left" (formula "36"))
                                                (rule "Free_class_invariant_axiom_for_de_wiesler_Storage" (formula "54"))
                                                 (builtin "One Step Simplification" (formula "54") (ifInst ""  (formula "14")) (ifInst ""  (formula "15")) (ifInst ""  (formula "18")) (ifInst ""  (formula "19")) (ifInst ""  (formula "20")) (ifInst ""  (formula "21")))
                                                (rule "andLeft" (formula "54"))
                                                (rule "andLeft" (formula "54"))
                                                (rule "andLeft" (formula "56"))
                                                (rule "andLeft" (formula "54"))
                                                (rule "andLeft" (formula "57"))
                                                (rule "andLeft" (formula "57"))
                                                (rule "andLeft" (formula "57"))
                                                (rule "andLeft" (formula "57"))
                                                (rule "andLeft" (formula "57"))
                                                (rule "andLeft" (formula "57"))
                                                (rule "andLeft" (formula "57"))
                                                (rule "andLeft" (formula "57"))
                                                (rule "andLeft" (formula "57"))
                                                (rule "andLeft" (formula "57"))
                                                (rule "andLeft" (formula "57"))
                                                (rule "andLeft" (formula "57"))
                                                (rule "andLeft" (formula "57"))
                                                (rule "andLeft" (formula "57"))
                                                (rule "andLeft" (formula "57"))
                                                (rule "andLeft" (formula "57"))
                                                (rule "andLeft" (formula "57"))
                                                (rule "andLeft" (formula "57"))
                                                (rule "andLeft" (formula "57"))
                                                (rule "andLeft" (formula "57"))
                                                (rule "andLeft" (formula "57"))
                                                (rule "andLeft" (formula "57"))
                                                (rule "andLeft" (formula "57"))
                                                (rule "andLeft" (formula "57"))
                                                (rule "andLeft" (formula "57"))
                                                (rule "andLeft" (formula "57"))
                                                (rule "translateJavaMulInt" (formula "54") (term "1"))
                                                (rule "mul_literals" (formula "54") (term "1"))
                                                (rule "translateJavaMulInt" (formula "54") (term "1"))
                                                (rule "mul_literals" (formula "54") (term "1"))
                                                (rule "disjointDefinition" (formula "82"))
                                                 (builtin "One Step Simplification" (formula "82") (ifInst ""  (formula "122")))
                                                (rule "true_left" (formula "82"))
                                                (rule "disjointDefinition" (formula "81"))
                                                 (builtin "One Step Simplification" (formula "81") (ifInst ""  (formula "120")))
                                                (rule "true_left" (formula "81"))
                                                (rule "disjointDefinition" (formula "80"))
                                                 (builtin "One Step Simplification" (formula "80"))
                                                (rule "notLeft" (formula "80"))
                                                (rule "eqSymm" (formula "84"))
                                                (rule "disjointDefinition" (formula "79"))
                                                 (builtin "One Step Simplification" (formula "79"))
                                                (rule "notLeft" (formula "79"))
                                                (rule "eqSymm" (formula "83"))
                                                (rule "disjointDefinition" (formula "78"))
                                                 (builtin "One Step Simplification" (formula "78"))
                                                (rule "notLeft" (formula "78"))
                                                (rule "eqSymm" (formula "82"))
                                                (rule "disjointDefinition" (formula "77"))
                                                 (builtin "One Step Simplification" (formula "77"))
                                                (rule "notLeft" (formula "77"))
                                                (rule "eqSymm" (formula "81"))
                                                (rule "disjointDefinition" (formula "76"))
                                                 (builtin "One Step Simplification" (formula "76"))
                                                (rule "notLeft" (formula "76"))
                                                (rule "eqSymm" (formula "80"))
                                                (rule "disjointDefinition" (formula "75"))
                                                 (builtin "One Step Simplification" (formula "75"))
                                                (rule "notLeft" (formula "75"))
                                                (rule "eqSymm" (formula "79"))
                                                (rule "disjointDefinition" (formula "74"))
                                                 (builtin "One Step Simplification" (formula "74"))
                                                (rule "notLeft" (formula "74"))
                                                (rule "eqSymm" (formula "78"))
                                                (rule "disjointDefinition" (formula "73"))
                                                 (builtin "One Step Simplification" (formula "73"))
                                                (rule "notLeft" (formula "73"))
                                                (rule "eqSymm" (formula "77"))
                                                (rule "disjointDefinition" (formula "72"))
                                                 (builtin "One Step Simplification" (formula "72"))
                                                (rule "notLeft" (formula "72"))
                                                (rule "eqSymm" (formula "76"))
                                                (rule "disjointDefinition" (formula "71"))
                                                 (builtin "One Step Simplification" (formula "71"))
                                                (rule "notLeft" (formula "71"))
                                                (rule "eqSymm" (formula "75"))
                                                (rule "disjointDefinition" (formula "70"))
                                                 (builtin "One Step Simplification" (formula "70"))
                                                (rule "notLeft" (formula "70"))
                                                (rule "eqSymm" (formula "74"))
                                                (rule "disjointDefinition" (formula "69"))
                                                 (builtin "One Step Simplification" (formula "69"))
                                                (rule "notLeft" (formula "69"))
                                                (rule "eqSymm" (formula "73"))
                                                (rule "disjointDefinition" (formula "68"))
                                                 (builtin "One Step Simplification" (formula "68"))
                                                (rule "notLeft" (formula "68"))
                                                (rule "eqSymm" (formula "72"))
                                                (rule "disjointDefinition" (formula "67"))
                                                 (builtin "One Step Simplification" (formula "67") (ifInst ""  (formula "92")))
                                                (rule "true_left" (formula "67"))
                                                (rule "disjointDefinition" (formula "66"))
                                                 (builtin "One Step Simplification" (formula "66"))
                                                (rule "notLeft" (formula "66"))
                                                (rule "eqSymm" (formula "70"))
                                                (rule "disjointDefinition" (formula "65"))
                                                 (builtin "One Step Simplification" (formula "65"))
                                                (rule "notLeft" (formula "65"))
                                                (rule "eqSymm" (formula "69"))
                                                (rule "disjointDefinition" (formula "64"))
                                                 (builtin "One Step Simplification" (formula "64") (ifInst ""  (formula "86")))
                                                (rule "true_left" (formula "64"))
                                                (rule "disjointDefinition" (formula "63"))
                                                 (builtin "One Step Simplification" (formula "63") (ifInst ""  (formula "84")))
                                                (rule "true_left" (formula "63"))
                                                (rule "disjointDefinition" (formula "62"))
                                                 (builtin "One Step Simplification" (formula "62") (ifInst ""  (formula "82")))
                                                (rule "true_left" (formula "62"))
                                                (rule "disjointDefinition" (formula "61"))
                                                 (builtin "One Step Simplification" (formula "61") (ifInst ""  (formula "80")))
                                                (rule "true_left" (formula "61"))
                                                (rule "disjointDefinition" (formula "60"))
                                                 (builtin "One Step Simplification" (formula "60") (ifInst ""  (formula "78")))
                                                (rule "true_left" (formula "60"))
                                                (rule "disjointDefinition" (formula "59"))
                                                 (builtin "One Step Simplification" (formula "59") (ifInst ""  (formula "76")))
                                                (rule "true_left" (formula "59"))
                                                (rule "disjointDefinition" (formula "58"))
                                                 (builtin "One Step Simplification" (formula "58") (ifInst ""  (formula "74")))
                                                (rule "true_left" (formula "58"))
                                                (rule "disjointDefinition" (formula "57"))
                                                 (builtin "One Step Simplification" (formula "57") (ifInst ""  (formula "72")))
                                                (rule "true_left" (formula "57"))
                                                (rule "disjointDefinition" (formula "56"))
                                                 (builtin "One Step Simplification" (formula "56") (ifInst ""  (formula "69")))
                                                (rule "true_left" (formula "56"))
                                                (rule "disjointDefinition" (formula "55"))
                                                 (builtin "One Step Simplification" (formula "55") (ifInst ""  (formula "69")))
                                                (rule "true_left" (formula "55"))
                                                (rule "applyEq" (formula "54") (term "0") (ifseqformula "22"))
                                                (rule "eqSymm" (formula "54"))
                                                (rule "commuteUnion" (formula "54") (term "0,0,0"))
                                                (rule "commuteUnion" (formula "54") (term "1,1,0"))
                                                (rule "commuteUnion_2" (formula "54") (term "0,0"))
                                                (rule "commuteUnion" (formula "54") (term "0,0,0"))
                                                (rule "commuteUnion_2" (formula "54") (term "0"))
                                                (rule "eqSymm" (formula "54"))
                                                (rule "applyEq" (formula "22") (term "1") (ifseqformula "54"))
                                                (rule "Definition_axiom_for_isSortedSlice_in_de_wiesler_Functions" (formula "53") (term "0") (inst "i=i"))
                                                 (builtin "One Step Simplification" (formula "53"))
                                                (rule "expand_inInt" (formula "53") (term "1,0,0"))
                                                (rule "replace_int_MAX" (formula "53") (term "1,0,1,0,0"))
                                                (rule "replace_int_MIN" (formula "53") (term "0,1,1,0,0"))
                                                (rule "translateJavaSubInt" (formula "53") (term "1,1,0,0,0"))
                                                (rule "translateJavaAddInt" (formula "53") (term "0,2,1,1,0"))
                                                (rule "polySimp_elimSub" (formula "53") (term "1,1,0,0,0"))
                                                (rule "mul_literals" (formula "53") (term "1,1,1,0,0,0"))
                                                (rule "polySimp_addComm0" (formula "53") (term "0,2,1,1,0"))
                                                (rule "polySimp_addComm1" (formula "53") (term "1,1,0,0,0"))
                                                (rule "polySimp_addComm0" (formula "53") (term "0,1,1,0,0,0"))
                                                (rule "inEqSimp_ltToLeq" (formula "53") (term "1,0,0,0"))
                                                (rule "polySimp_rightDist" (formula "53") (term "1,0,0,1,0,0,0"))
                                                (rule "polySimp_rightDist" (formula "53") (term "0,1,0,0,1,0,0,0"))
                                                (rule "mul_literals" (formula "53") (term "0,0,1,0,0,1,0,0,0"))
                                                (rule "polySimp_addAssoc" (formula "53") (term "0,0,1,0,0,0"))
                                                (rule "polySimp_addAssoc" (formula "53") (term "0,0,0,1,0,0,0"))
                                                (rule "add_literals" (formula "53") (term "0,0,0,0,1,0,0,0"))
                                                (rule "inEqSimp_commuteLeq" (formula "53") (term "0,0,0,0"))
                                                (rule "inEqSimp_commuteLeq" (formula "53") (term "1,1,0,0"))
                                                (rule "inEqSimp_commuteLeq" (formula "53") (term "1,0"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "53") (term "1,0,0,0"))
                                                (rule "polySimp_mulComm0" (formula "53") (term "1,1,0,0,0"))
                                                (rule "polySimp_rightDist" (formula "53") (term "1,1,0,0,0"))
                                                (rule "polySimp_mulLiterals" (formula "53") (term "1,1,1,0,0,0"))
                                                (rule "polySimp_elimOne" (formula "53") (term "1,1,1,0,0,0"))
                                                (rule "polySimp_rightDist" (formula "53") (term "0,1,1,0,0,0"))
                                                (rule "mul_literals" (formula "53") (term "0,0,1,1,0,0,0"))
                                                (rule "polySimp_mulLiterals" (formula "53") (term "1,0,1,1,0,0,0"))
                                                (rule "polySimp_elimOne" (formula "53") (term "1,0,1,1,0,0,0"))
                                                (rule "Definition_axiom_for_isValidForLen_in_de_wiesler_SampleParameters" (formula "28") (term "0"))
                                                 (builtin "One Step Simplification" (formula "28"))
                                                (rule "andLeft" (formula "28"))
                                                (rule "andLeft" (formula "28"))
                                                (rule "andLeft" (formula "28"))
                                                (rule "andLeft" (formula "29"))
                                                (rule "andLeft" (formula "28"))
                                                (rule "andLeft" (formula "28"))
                                                (rule "andLeft" (formula "28"))
                                                (rule "translateJavaSubInt" (formula "35") (term "0"))
                                                (rule "translateJavaMod" (formula "34") (term "0"))
                                                (rule "translateJavaDivInt" (formula "29") (term "1"))
                                                (rule "translateJavaMulInt" (formula "35") (term "0,0"))
                                                (rule "polySimp_elimSub" (formula "35") (term "0"))
                                                (rule "mul_literals" (formula "35") (term "1,0"))
                                                (rule "polySimp_addComm0" (formula "35") (term "0"))
                                                (rule "inEqSimp_ltToLeq" (formula "30"))
                                                (rule "polySimp_rightDist" (formula "30") (term "1,0,0"))
                                                (rule "polySimp_mulAssoc" (formula "30") (term "0,1,0,0"))
                                                (rule "polySimp_mulComm0" (formula "30") (term "0,0,1,0,0"))
                                                (rule "polySimp_mulLiterals" (formula "30") (term "0,1,0,0"))
                                                (rule "polySimp_elimOne" (formula "30") (term "0,1,0,0"))
                                                (rule "polySimp_addAssoc" (formula "30") (term "0,0"))
                                                (rule "inEqSimp_commuteLeq" (formula "32"))
                                                (rule "inEqSimp_commuteLeq" (formula "31"))
                                                (rule "inEqSimp_commuteLeq" (formula "28"))
                                                (rule "inEqSimp_homoInEq0" (formula "35"))
                                                (rule "polySimp_mulComm0" (formula "35") (term "1,0"))
                                                (rule "polySimp_rightDist" (formula "35") (term "1,0"))
                                                (rule "mul_literals" (formula "35") (term "0,1,0"))
                                                (rule "polySimp_addAssoc" (formula "35") (term "0"))
                                                (rule "polySimp_addComm0" (formula "35") (term "0,0"))
                                                (rule "jmod_axiom" (formula "34") (term "0"))
                                                (rule "polySimp_mulLiterals" (formula "34") (term "1,0"))
                                                (rule "polySimp_sepNegMonomial" (formula "34"))
                                                (rule "polySimp_mulLiterals" (formula "34") (term "0"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "30"))
                                                (rule "polySimp_mulComm0" (formula "30") (term "1"))
                                                (rule "polySimp_rightDist" (formula "30") (term "1"))
                                                (rule "polySimp_mulLiterals" (formula "30") (term "1,1"))
                                                (rule "polySimp_elimOne" (formula "30") (term "1,1"))
                                                (rule "polySimp_rightDist" (formula "30") (term "0,1"))
                                                (rule "mul_literals" (formula "30") (term "0,0,1"))
                                                (rule "inEqSimp_sepNegMonomial1" (formula "35"))
                                                (rule "polySimp_mulLiterals" (formula "35") (term "0"))
                                                (rule "polySimp_elimOne" (formula "35") (term "0"))
                                                (rule "inEqSimp_subsumption1" (formula "41") (ifseqformula "32"))
                                                (rule "leq_literals" (formula "41") (term "0"))
                                                 (builtin "One Step Simplification" (formula "41"))
                                                (rule "true_left" (formula "41"))
                                                (rule "inEqSimp_subsumption1" (formula "37") (ifseqformula "28"))
                                                (rule "leq_literals" (formula "37") (term "0"))
                                                 (builtin "One Step Simplification" (formula "37"))
                                                (rule "true_left" (formula "37"))
                                                (rule "inEqSimp_subsumption1" (formula "38") (ifseqformula "31"))
                                                (rule "leq_literals" (formula "38") (term "0"))
                                                 (builtin "One Step Simplification" (formula "38"))
                                                (rule "true_left" (formula "38"))
                                                (rule "newSym_eq" (formula "34") (inst "l=l_0") (inst "newSymDef=mul(int::final(self_77,
               de.wiesler.SampleParameters::$num_buckets),
    Z(0(#)))"))
                                                (rule "times_zero_1" (formula "34") (term "1,1"))
                                                (rule "add_zero_right" (formula "34") (term "1"))
                                                (rule "applyEq" (formula "35") (term "0,0") (ifseqformula "34"))
                                                (rule "eqSymm" (formula "35"))
                                                (rule "applyEq" (formula "33") (term "0") (ifseqformula "35"))
                                                (rule "inEqSimp_commuteLeq" (formula "33"))
                                                (rule "applyEq" (formula "34") (term "0,0") (ifseqformula "35"))
                                                (rule "applyEq" (formula "39") (term "0") (ifseqformula "35"))
                                                (rule "applyEq" (formula "36") (term "1,0") (ifseqformula "35"))
                                                (rule "polySimp_mulAssoc" (formula "36") (term "0"))
                                                (rule "applyEq" (formula "32") (term "0") (ifseqformula "35"))
                                                (rule "elimGcdGeq_antec" (formula "32") (inst "elimGcdRightDiv=Z(1(#))") (inst "elimGcdLeftDiv=l_0") (inst "elimGcd=Z(2(#))"))
                                                (rule "polySimp_mulLiterals" (formula "32") (term "1,0,0,0,0,1,0"))
                                                (rule "polySimp_mulLiterals" (formula "32") (term "1,0,1,0"))
                                                (rule "leq_literals" (formula "32") (term "0,0"))
                                                 (builtin "One Step Simplification" (formula "32"))
                                                (rule "mul_literals" (formula "32") (term "1,0,0,0,0,0"))
                                                (rule "polySimp_addLiterals" (formula "32") (term "0,0,0,0"))
                                                (rule "add_zero_right" (formula "32") (term "0,0,0,0"))
                                                (rule "polySimp_pullOutFactor0b" (formula "32") (term "0,0"))
                                                (rule "add_literals" (formula "32") (term "1,1,0,0"))
                                                (rule "times_zero_1" (formula "32") (term "1,0,0"))
                                                (rule "add_zero_right" (formula "32") (term "0,0"))
                                                (rule "leq_literals" (formula "32") (term "0"))
                                                 (builtin "One Step Simplification" (formula "32"))
                                                (rule "elimGcdLeq_antec" (formula "39") (inst "elimGcdRightDiv=Z(3(2(8(1(4(7(3(7(0(1(#)))))))))))") (inst "elimGcdLeftDiv=l_0") (inst "elimGcd=Z(2(#))"))
                                                (rule "leq_literals" (formula "39") (term "0,0"))
                                                 (builtin "One Step Simplification" (formula "39"))
                                                (rule "polySimp_mulLiterals" (formula "39") (term "1,0,0"))
                                                (rule "neg_literal" (formula "39") (term "0,0,0,0,0,0"))
                                                (rule "polySimp_mulLiterals" (formula "39") (term "1,0,0,0,0,0"))
                                                (rule "mul_literals" (formula "39") (term "1,0,0,0,0,0"))
                                                (rule "add_literals" (formula "39") (term "0,0,0,0,0"))
                                                (rule "add_literals" (formula "39") (term "0,0,0,0"))
                                                (rule "polySimp_pullOutFactor0b" (formula "39") (term "0,0"))
                                                (rule "add_literals" (formula "39") (term "1,1,0,0"))
                                                (rule "times_zero_1" (formula "39") (term "1,0,0"))
                                                (rule "add_zero_right" (formula "39") (term "0,0"))
                                                (rule "qeq_literals" (formula "39") (term "0"))
                                                 (builtin "One Step Simplification" (formula "39"))
                                                (rule "inEqSimp_exactShadow3" (formula "28") (ifseqformula "30"))
                                                (rule "mul_literals" (formula "28") (term "0,0"))
                                                (rule "polySimp_addAssoc" (formula "28") (term "0"))
                                                (rule "polySimp_addAssoc" (formula "28") (term "0,0"))
                                                (rule "add_literals" (formula "28") (term "0,0,0"))
                                                (rule "inEqSimp_sepPosMonomial1" (formula "28"))
                                                (rule "polySimp_mulComm0" (formula "28") (term "1"))
                                                (rule "polySimp_rightDist" (formula "28") (term "1"))
                                                (rule "polySimp_mulLiterals" (formula "28") (term "1,1"))
                                                (rule "mul_literals" (formula "28") (term "0,1"))
                                                (rule "polySimp_elimOne" (formula "28") (term "1,1"))
                                                (rule "inEqSimp_subsumption1" (formula "28") (ifseqformula "12"))
                                                (rule "inEqSimp_homoInEq0" (formula "28") (term "0"))
                                                (rule "polySimp_mulComm0" (formula "28") (term "1,0,0"))
                                                (rule "polySimp_rightDist" (formula "28") (term "1,0,0"))
                                                (rule "mul_literals" (formula "28") (term "0,1,0,0"))
                                                (rule "polySimp_addAssoc" (formula "28") (term "0,0"))
                                                (rule "polySimp_addComm1" (formula "28") (term "0,0,0"))
                                                (rule "add_literals" (formula "28") (term "0,0,0,0"))
                                                (rule "polySimp_pullOutFactor1b" (formula "28") (term "0,0"))
                                                (rule "add_literals" (formula "28") (term "1,1,0,0"))
                                                (rule "times_zero_1" (formula "28") (term "1,0,0"))
                                                (rule "add_zero_right" (formula "28") (term "0,0"))
                                                (rule "qeq_literals" (formula "28") (term "0"))
                                                 (builtin "One Step Simplification" (formula "28"))
                                                (rule "true_left" (formula "28"))
                                                (rule "inEqSimp_exactShadow3" (formula "28") (ifseqformula "29"))
                                                (rule "mul_literals" (formula "28") (term "0,0"))
                                                (rule "inEqSimp_sepPosMonomial1" (formula "28"))
                                                (rule "mul_literals" (formula "28") (term "1"))
                                                (rule "Free_class_invariant_axiom_for_de_wiesler_SampleParameters" (formula "41"))
                                                (rule "true_left" (formula "41"))
                                                (rule "Definition_axiom_for_isInInt_in_de_wiesler_SampleParameters" (formula "112") (term "0"))
                                                 (builtin "One Step Simplification" (formula "112"))
                                                (rule "expand_inInt" (formula "112") (term "1,0"))
                                                (rule "expand_inInt" (formula "112") (term "1"))
                                                (rule "expand_inInt" (formula "112") (term "0,0"))
                                                (rule "replace_int_MIN" (formula "112") (term "0,1,1,0"))
                                                (rule "replace_int_MAX" (formula "112") (term "1,0,1,0"))
                                                (rule "replace_int_MIN" (formula "112") (term "0,1,1"))
                                                (rule "replace_int_MAX" (formula "112") (term "1,0,1"))
                                                (rule "replace_int_MIN" (formula "112") (term "0,1,0,0"))
                                                (rule "replace_int_MAX" (formula "112") (term "1,0,0,0"))
                                                (rule "replace_known_left" (formula "112") (term "0,1,0") (ifseqformula "39"))
                                                 (builtin "One Step Simplification" (formula "112") (ifInst ""  (formula "38")))
                                                (rule "inEqSimp_commuteLeq" (formula "112") (term "1,0"))
                                                (rule "inEqSimp_commuteLeq" (formula "112") (term "1,1"))
                                                (rule "inEqSimp_commuteLeq" (formula "112") (term "0,0"))
                                                (rule "applyEq" (formula "112") (term "0,1,1") (ifseqformula "36"))
                                                (rule "applyEq" (formula "112") (term "0,0,1") (ifseqformula "36"))
                                                (rule "inEqSimp_subsumption1" (formula "112") (term "0,0") (ifseqformula "29"))
                                                (rule "leq_literals" (formula "112") (term "0,0,0"))
                                                 (builtin "One Step Simplification" (formula "112"))
                                                (rule "inEqSimp_subsumption1" (formula "112") (term "0") (ifseqformula "32"))
                                                (rule "leq_literals" (formula "112") (term "0,0"))
                                                 (builtin "One Step Simplification" (formula "112"))
                                                (rule "inEqSimp_subsumption6" (formula "112") (term "1") (ifseqformula "33"))
                                                (rule "mul_literals" (formula "112") (term "1,1,0,1"))
                                                (rule "greater_literals" (formula "112") (term "0,0,1"))
                                                 (builtin "One Step Simplification" (formula "112"))
                                                (rule "leq_literals" (formula "112") (term "0,1"))
                                                 (builtin "One Step Simplification" (formula "112"))
                                                (rule "inEqSimp_leqRight" (formula "112"))
                                                (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                (rule "add_literals" (formula "1") (term "0,0"))
                                                (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                                                (rule "mul_literals" (formula "1") (term "1"))
                                                (rule "inEqSimp_contradInEq3" (formula "1") (ifseqformula "41"))
                                                (rule "mul_literals" (formula "1") (term "0,1,0"))
                                                (rule "greater_literals" (formula "1") (term "0,0"))
                                                 (builtin "One Step Simplification" (formula "1"))
                                                (rule "qeq_literals" (formula "1") (term "0"))
                                                 (builtin "One Step Simplification" (formula "1"))
                                                (rule "closeFalse" (formula "1"))
                                             )
                                             (branch "Case 2"
                                                 (builtin "One Step Simplification" (formula "56") (ifInst ""  (formula "53")))
                                                (rule "closeTrue" (formula "56"))
                                             )
                                          )
                                       )
                                       (branch "Case 2"
                                           (builtin "One Step Simplification" (formula "56"))
                                          (rule "closeTrue" (formula "56"))
                                       )
                                    )
                                 )
                              )
                              (branch "Exceptional Post (sort)"
                                  (builtin "One Step Simplification" (formula "47"))
                                  (builtin "One Step Simplification" (formula "42"))
                                 (rule "andLeft" (formula "42"))
                                 (rule "selectCreatedOfAnonAsFormulaEQ" (formula "43") (term "1,0") (ifseqformula "42"))
                                  (builtin "One Step Simplification" (formula "43"))
                                 (rule "selectCreatedOfAnonAsFormulaEQ" (formula "43") (term "0,0,1,0") (ifseqformula "34"))
                                  (builtin "One Step Simplification" (formula "43"))
                                 (rule "selectCreatedOfAnonAsFormulaEQ" (formula "43") (term "0,0,0,0,1,0") (ifseqformula "21"))
                                 (rule "andLeft" (formula "43"))
                                 (rule "andLeft" (formula "44"))
                                 (rule "andLeft" (formula "43"))
                                 (rule "notLeft" (formula "43"))
                                 (rule "close" (formula "46") (ifseqformula "45"))
                              )
                              (branch "Pre (sort)"
                                  (builtin "One Step Simplification" (formula "45") (ifInst ""  (formula "44")) (ifInst ""  (formula "43")) (ifInst ""  (formula "44")) (ifInst ""  (formula "43")))
                                 (rule "selectCreatedOfAnonAsFormulaEQ" (formula "45") (term "0,1,1,0") (ifseqformula "34"))
                                  (builtin "One Step Simplification" (formula "45"))
                                 (rule "wellFormedAnon" (formula "45") (term "0,0,0,0,1,0"))
                                 (rule "selectCreatedOfAnonAsFormulaEQ" (formula "45") (term "0,0,0,1,1,0") (ifseqformula "21"))
                                 (rule "selectCreatedOfAnonAsFormulaEQ" (formula "45") (term "0,1,0,0,0,1,0") (ifseqformula "34"))
                                  (builtin "One Step Simplification" (formula "45") (ifInst ""  (formula "38")) (ifInst ""  (formula "7")))
                                 (rule "selectCreatedOfAnonAsFormulaEQ" (formula "45") (term "0,0,0,1,0,0,1,0") (ifseqformula "21"))
                                 (rule "expand_inInt" (formula "45") (term "1,1,0"))
                                 (rule "expand_inInt" (formula "45") (term "1,0,1,0"))
                                 (rule "replace_int_MAX" (formula "45") (term "1,0,1,1,0"))
                                 (rule "replace_int_MIN" (formula "45") (term "0,1,1,1,0"))
                                 (rule "replace_int_MAX" (formula "45") (term "1,0,1,0,1,0"))
                                 (rule "replace_int_MIN" (formula "45") (term "0,1,1,0,1,0"))
                                 (rule "translateJavaSubInt" (formula "45") (term "0,0,1"))
                                 (rule "replace_known_left" (formula "45") (term "0,1,0,1,0") (ifseqformula "3"))
                                  (builtin "One Step Simplification" (formula "45") (ifInst ""  (formula "2")))
                                 (rule "polySimp_elimSub" (formula "45") (term "0,0,1"))
                                 (rule "polySimp_addComm1" (formula "45") (term "0,0,1"))
                                 (rule "polySimp_pullOutFactor1" (formula "45") (term "0,0,0,1"))
                                 (rule "add_literals" (formula "45") (term "1,0,0,0,1"))
                                 (rule "times_zero_1" (formula "45") (term "0,0,0,1"))
                                 (rule "add_zero_left" (formula "45") (term "0,0,1"))
                                 (rule "inEqSimp_ltToLeq" (formula "16"))
                                 (rule "polySimp_rightDist" (formula "16") (term "1,0,0"))
                                 (rule "polySimp_mulAssoc" (formula "16") (term "0,1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "16") (term "0,0,1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "16") (term "0,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "16") (term "0,1,0,0"))
                                 (rule "polySimp_addAssoc" (formula "16") (term "0,0"))
                                 (rule "polySimp_addComm1" (formula "16") (term "0"))
                                 (rule "polySimp_addComm1" (formula "16") (term "0,0"))
                                 (rule "add_literals" (formula "16") (term "0,0,0"))
                                 (rule "measuredByCheck" (formula "45") (term "1") (ifseqformula "8"))
                                 (rule "precOfPair" (formula "45") (term "1"))
                                 (rule "precOfInt" (formula "45") (term "1,1,1"))
                                 (rule "less_literals" (formula "45") (term "1,1,1,1"))
                                  (builtin "One Step Simplification" (formula "45"))
                                 (rule "precOfInt" (formula "45") (term "1"))
                                 (rule "inEqSimp_ltToLeq" (formula "45") (term "1,1"))
                                 (rule "polySimp_rightDist" (formula "45") (term "1,0,0,1,1"))
                                 (rule "polySimp_mulAssoc" (formula "45") (term "0,1,0,0,1,1"))
                                 (rule "polySimp_mulComm0" (formula "45") (term "0,0,1,0,0,1,1"))
                                 (rule "polySimp_mulLiterals" (formula "45") (term "0,1,0,0,1,1"))
                                 (rule "polySimp_elimOne" (formula "45") (term "0,1,0,0,1,1"))
                                 (rule "polySimp_addAssoc" (formula "45") (term "0,0,1,1"))
                                 (rule "inEqSimp_commuteLeq" (formula "45") (term "1,0,1,0"))
                                 (rule "replace_known_left" (formula "45") (term "1,0,1,0") (ifseqformula "4"))
                                  (builtin "One Step Simplification" (formula "45"))
                                 (rule "inEqSimp_homoInEq0" (formula "17"))
                                 (rule "polySimp_mulComm0" (formula "17") (term "1,0"))
                                 (rule "polySimp_rightDist" (formula "17") (term "1,0"))
                                 (rule "polySimp_mulAssoc" (formula "17") (term "0,1,0"))
                                 (rule "polySimp_mulComm0" (formula "17") (term "0,0,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "17") (term "0,1,0"))
                                 (rule "polySimp_elimOne" (formula "17") (term "0,1,0"))
                                 (rule "polySimp_addAssoc" (formula "17") (term "0"))
                                 (rule "inEqSimp_commuteLeq" (formula "45") (term "0,1"))
                                 (rule "inEqSimp_homoInEq0" (formula "45") (term "0,1,1,0"))
                                 (rule "polySimp_mulComm0" (formula "45") (term "1,0,0,1,1,0"))
                                 (rule "polySimp_rightDist" (formula "45") (term "1,0,0,1,1,0"))
                                 (rule "polySimp_mulComm0" (formula "45") (term "0,1,0,0,1,1,0"))
                                 (rule "polySimp_addAssoc" (formula "45") (term "0,0,1,1,0"))
                                 (rule "inEqSimp_homoInEq0" (formula "45") (term "1,1,1,0"))
                                 (rule "mul_literals" (formula "45") (term "1,0,1,1,1,0"))
                                 (rule "polySimp_addComm1" (formula "45") (term "0,1,1,1,0"))
                                 (rule "polySimp_addComm0" (formula "45") (term "0,0,1,1,1,0"))
                                 (rule "inEqSimp_sepNegMonomial0" (formula "16"))
                                 (rule "polySimp_mulLiterals" (formula "16") (term "0"))
                                 (rule "polySimp_elimOne" (formula "16") (term "0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "45") (term "1,1"))
                                 (rule "polySimp_mulComm0" (formula "45") (term "1,1,1"))
                                 (rule "polySimp_rightDist" (formula "45") (term "1,1,1"))
                                 (rule "polySimp_mulLiterals" (formula "45") (term "1,1,1,1"))
                                 (rule "polySimp_elimOne" (formula "45") (term "1,1,1,1"))
                                 (rule "polySimp_rightDist" (formula "45") (term "0,1,1,1"))
                                 (rule "mul_literals" (formula "45") (term "0,0,1,1,1"))
                                 (rule "inEqSimp_sepNegMonomial1" (formula "17"))
                                 (rule "polySimp_mulLiterals" (formula "17") (term "0"))
                                 (rule "polySimp_elimOne" (formula "17") (term "0"))
                                 (rule "inEqSimp_sepNegMonomial1" (formula "45") (term "0,1,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "45") (term "0,0,1,1,0"))
                                 (rule "polySimp_elimOne" (formula "45") (term "0,0,1,1,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "45") (term "1,1,1,0"))
                                 (rule "polySimp_mulComm0" (formula "45") (term "1,1,1,1,0"))
                                 (rule "polySimp_rightDist" (formula "45") (term "1,1,1,1,0"))
                                 (rule "mul_literals" (formula "45") (term "0,1,1,1,1,0"))
                                 (rule "inEqSimp_subsumption1" (formula "4") (ifseqformula "10"))
                                 (rule "leq_literals" (formula "4") (term "0"))
                                  (builtin "One Step Simplification" (formula "4"))
                                 (rule "true_left" (formula "4"))
                                 (rule "inEqSimp_subsumption1" (formula "10") (ifseqformula "15"))
                                 (rule "inEqSimp_homoInEq0" (formula "10") (term "0"))
                                 (rule "polySimp_pullOutFactor1b" (formula "10") (term "0,0"))
                                 (rule "add_literals" (formula "10") (term "1,1,0,0"))
                                 (rule "times_zero_1" (formula "10") (term "1,0,0"))
                                 (rule "add_zero_right" (formula "10") (term "0,0"))
                                 (rule "qeq_literals" (formula "10") (term "0"))
                                  (builtin "One Step Simplification" (formula "10"))
                                 (rule "true_left" (formula "10"))
                                 (rule "inEqSimp_subsumption1" (formula "12") (ifseqformula "10"))
                                 (rule "leq_literals" (formula "12") (term "0"))
                                  (builtin "One Step Simplification" (formula "12"))
                                 (rule "true_left" (formula "12"))
                                 (rule "inEqSimp_exactShadow3" (formula "13") (ifseqformula "4"))
                                 (rule "polySimp_rightDist" (formula "13") (term "0,0"))
                                 (rule "mul_literals" (formula "13") (term "0,0,0"))
                                 (rule "polySimp_addComm1" (formula "13") (term "0"))
                                 (rule "add_literals" (formula "13") (term "0,0"))
                                 (rule "inEqSimp_sepNegMonomial1" (formula "13"))
                                 (rule "polySimp_mulLiterals" (formula "13") (term "0"))
                                 (rule "polySimp_elimOne" (formula "13") (term "0"))
                                 (rule "inEqSimp_subsumption0" (formula "3") (ifseqformula "13"))
                                 (rule "leq_literals" (formula "3") (term "0"))
                                  (builtin "One Step Simplification" (formula "3"))
                                 (rule "true_left" (formula "3"))
                                 (rule "inEqSimp_exactShadow3" (formula "11") (ifseqformula "10"))
                                 (rule "polySimp_mulComm0" (formula "11") (term "0,0"))
                                 (rule "polySimp_addComm0" (formula "11") (term "0"))
                                 (rule "inEqSimp_sepNegMonomial1" (formula "11"))
                                 (rule "polySimp_mulLiterals" (formula "11") (term "0"))
                                 (rule "polySimp_elimOne" (formula "11") (term "0"))
                                 (rule "inEqSimp_subsumption0" (formula "3") (ifseqformula "11"))
                                 (rule "leq_literals" (formula "3") (term "0"))
                                  (builtin "One Step Simplification" (formula "3"))
                                 (rule "true_left" (formula "3"))
                                 (rule "inEqSimp_exactShadow3" (formula "3") (ifseqformula "14"))
                                 (rule "mul_literals" (formula "3") (term "0,0"))
                                 (rule "polySimp_addAssoc" (formula "3") (term "0"))
                                 (rule "add_literals" (formula "3") (term "0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "3"))
                                 (rule "mul_literals" (formula "3") (term "1"))
                                 (rule "inEqSimp_subsumption1" (formula "3") (ifseqformula "8"))
                                 (rule "leq_literals" (formula "3") (term "0"))
                                  (builtin "One Step Simplification" (formula "3"))
                                 (rule "true_left" (formula "3"))
                                 (rule "inEqSimp_exactShadow3" (formula "13") (ifseqformula "10"))
                                 (rule "polySimp_rightDist" (formula "13") (term "0,0"))
                                 (rule "mul_literals" (formula "13") (term "0,0,0"))
                                 (rule "polySimp_addComm1" (formula "13") (term "0"))
                                 (rule "add_literals" (formula "13") (term "0,0"))
                                 (rule "inEqSimp_sepNegMonomial1" (formula "13"))
                                 (rule "polySimp_mulLiterals" (formula "13") (term "0"))
                                 (rule "polySimp_elimOne" (formula "13") (term "0"))
                                 (rule "inEqSimp_subsumption0" (formula "12") (ifseqformula "13"))
                                 (rule "leq_literals" (formula "12") (term "0"))
                                  (builtin "One Step Simplification" (formula "12"))
                                 (rule "true_left" (formula "12"))
                                 (rule "Contract_axiom_for_isValidForLen_in_SampleParameters" (formula "22") (term "0"))
                                 (rule "selectCreatedOfAnonAsFormulaEQ" (formula "22") (term "1,0,0") (ifseqformula "18"))
                                 (rule "replace_known_left" (formula "22") (term "0,1") (ifseqformula "26"))
                                  (builtin "One Step Simplification" (formula "22") (ifInst ""  (formula "26")) (ifInst ""  (formula "39")) (ifInst ""  (formula "20")) (ifInst ""  (formula "40")) (ifInst ""  (formula "25")))
                                 (rule "true_left" (formula "22"))
                                 (rule "Free_class_invariant_axiom_for_de_wiesler_SampleParameters" (formula "24"))
                                 (rule "true_left" (formula "24"))
                                 (rule "Class_invariant_axiom_for_de_wiesler_SampleParameters" (formula "24"))
                                 (rule "true_left" (formula "24"))
                                 (rule "Class_invariant_axiom_for_de_wiesler_Storage" (formula "6"))
                                 (rule "andLeft" (formula "6"))
                                 (rule "notLeft" (formula "7"))
                                 (rule "andLeft" (formula "6"))
                                 (rule "notLeft" (formula "7"))
                                 (rule "andLeft" (formula "6"))
                                 (rule "andLeft" (formula "6"))
                                 (rule "notLeft" (formula "8"))
                                 (rule "notLeft" (formula "7"))
                                 (rule "andLeft" (formula "6"))
                                 (rule "notLeft" (formula "7"))
                                 (rule "andLeft" (formula "6"))
                                 (rule "notLeft" (formula "7"))
                                 (rule "andLeft" (formula "6"))
                                 (rule "notLeft" (formula "7"))
                                 (rule "notLeft" (formula "6"))
                                 (rule "Free_class_invariant_axiom_for_de_wiesler_Storage" (formula "14"))
                                  (builtin "One Step Simplification" (formula "14"))
                                 (rule "andLeft" (formula "14"))
                                 (rule "andLeft" (formula "14"))
                                 (rule "andLeft" (formula "16"))
                                 (rule "andLeft" (formula "14"))
                                 (rule "andLeft" (formula "17"))
                                 (rule "andLeft" (formula "14"))
                                 (rule "andLeft" (formula "18"))
                                 (rule "andLeft" (formula "14"))
                                 (rule "andLeft" (formula "19"))
                                 (rule "andLeft" (formula "14"))
                                 (rule "andLeft" (formula "20"))
                                 (rule "andLeft" (formula "14"))
                                 (rule "andLeft" (formula "21"))
                                 (rule "andLeft" (formula "14"))
                                 (rule "andLeft" (formula "22"))
                                 (rule "andLeft" (formula "14"))
                                 (rule "andLeft" (formula "23"))
                                 (rule "andLeft" (formula "23"))
                                 (rule "andLeft" (formula "23"))
                                 (rule "andLeft" (formula "23"))
                                 (rule "andLeft" (formula "23"))
                                 (rule "andLeft" (formula "23"))
                                 (rule "andLeft" (formula "23"))
                                 (rule "andLeft" (formula "23"))
                                 (rule "andLeft" (formula "23"))
                                 (rule "andLeft" (formula "23"))
                                 (rule "andLeft" (formula "23"))
                                 (rule "andLeft" (formula "23"))
                                 (rule "andLeft" (formula "23"))
                                 (rule "andLeft" (formula "23"))
                                 (rule "andLeft" (formula "23"))
                                 (rule "andLeft" (formula "23"))
                                 (rule "andLeft" (formula "23"))
                                 (rule "andLeft" (formula "23"))
                                 (rule "andLeft" (formula "23"))
                                 (rule "andLeft" (formula "23"))
                                 (rule "translateJavaMulInt" (formula "17") (term "1"))
                                 (rule "mul_literals" (formula "17") (term "1"))
                                 (rule "translateJavaMulInt" (formula "16") (term "1"))
                                 (rule "mul_literals" (formula "16") (term "1"))
                                 (rule "disjointDefinition" (formula "50"))
                                  (builtin "One Step Simplification" (formula "50"))
                                 (rule "notLeft" (formula "50"))
                                 (rule "disjointDefinition" (formula "49"))
                                  (builtin "One Step Simplification" (formula "49"))
                                 (rule "notLeft" (formula "49"))
                                 (rule "disjointDefinition" (formula "48"))
                                  (builtin "One Step Simplification" (formula "48"))
                                 (rule "notLeft" (formula "48"))
                                 (rule "eqSymm" (formula "68"))
                                 (rule "disjointDefinition" (formula "47"))
                                  (builtin "One Step Simplification" (formula "47"))
                                 (rule "notLeft" (formula "47"))
                                 (rule "eqSymm" (formula "67"))
                                 (rule "disjointDefinition" (formula "46"))
                                  (builtin "One Step Simplification" (formula "46"))
                                 (rule "notLeft" (formula "46"))
                                 (rule "eqSymm" (formula "66"))
                                 (rule "disjointDefinition" (formula "45"))
                                  (builtin "One Step Simplification" (formula "45"))
                                 (rule "notLeft" (formula "45"))
                                 (rule "eqSymm" (formula "65"))
                                 (rule "disjointDefinition" (formula "44"))
                                  (builtin "One Step Simplification" (formula "44"))
                                 (rule "notLeft" (formula "44"))
                                 (rule "eqSymm" (formula "64"))
                                 (rule "disjointDefinition" (formula "43"))
                                  (builtin "One Step Simplification" (formula "43"))
                                 (rule "notLeft" (formula "43"))
                                 (rule "eqSymm" (formula "63"))
                                 (rule "disjointDefinition" (formula "42"))
                                  (builtin "One Step Simplification" (formula "42"))
                                 (rule "notLeft" (formula "42"))
                                 (rule "eqSymm" (formula "62"))
                                 (rule "disjointDefinition" (formula "41"))
                                  (builtin "One Step Simplification" (formula "41"))
                                 (rule "notLeft" (formula "41"))
                                 (rule "eqSymm" (formula "61"))
                                 (rule "disjointDefinition" (formula "40"))
                                  (builtin "One Step Simplification" (formula "40"))
                                 (rule "notLeft" (formula "40"))
                                 (rule "eqSymm" (formula "60"))
                                 (rule "disjointDefinition" (formula "39"))
                                  (builtin "One Step Simplification" (formula "39"))
                                 (rule "notLeft" (formula "39"))
                                 (rule "eqSymm" (formula "59"))
                                 (rule "disjointDefinition" (formula "38"))
                                  (builtin "One Step Simplification" (formula "38"))
                                 (rule "notLeft" (formula "38"))
                                 (rule "eqSymm" (formula "58"))
                                 (rule "disjointDefinition" (formula "37"))
                                  (builtin "One Step Simplification" (formula "37"))
                                 (rule "notLeft" (formula "37"))
                                 (rule "eqSymm" (formula "57"))
                                 (rule "disjointDefinition" (formula "36"))
                                  (builtin "One Step Simplification" (formula "36"))
                                 (rule "notLeft" (formula "36"))
                                 (rule "eqSymm" (formula "56"))
                                 (rule "disjointDefinition" (formula "35"))
                                  (builtin "One Step Simplification" (formula "35"))
                                 (rule "notLeft" (formula "35"))
                                 (rule "disjointDefinition" (formula "34"))
                                  (builtin "One Step Simplification" (formula "34"))
                                 (rule "notLeft" (formula "34"))
                                 (rule "eqSymm" (formula "54"))
                                 (rule "disjointDefinition" (formula "33"))
                                  (builtin "One Step Simplification" (formula "33"))
                                 (rule "notLeft" (formula "33"))
                                 (rule "eqSymm" (formula "53"))
                                 (rule "disjointDefinition" (formula "32"))
                                  (builtin "One Step Simplification" (formula "32"))
                                 (rule "notLeft" (formula "32"))
                                 (rule "disjointDefinition" (formula "31"))
                                  (builtin "One Step Simplification" (formula "31"))
                                 (rule "notLeft" (formula "31"))
                                 (rule "disjointDefinition" (formula "30"))
                                  (builtin "One Step Simplification" (formula "30"))
                                 (rule "notLeft" (formula "30"))
                                 (rule "disjointDefinition" (formula "29"))
                                  (builtin "One Step Simplification" (formula "29"))
                                 (rule "notLeft" (formula "29"))
                                 (rule "disjointDefinition" (formula "28"))
                                  (builtin "One Step Simplification" (formula "28"))
                                 (rule "notLeft" (formula "28"))
                                 (rule "disjointDefinition" (formula "27"))
                                  (builtin "One Step Simplification" (formula "27"))
                                 (rule "notLeft" (formula "27"))
                                 (rule "disjointDefinition" (formula "26"))
                                  (builtin "One Step Simplification" (formula "26"))
                                 (rule "notLeft" (formula "26"))
                                 (rule "disjointDefinition" (formula "25"))
                                  (builtin "One Step Simplification" (formula "25"))
                                 (rule "notLeft" (formula "25"))
                                 (rule "disjointDefinition" (formula "23"))
                                  (builtin "One Step Simplification" (formula "23"))
                                 (rule "notLeft" (formula "23"))
                                 (rule "disjointDefinition" (formula "23"))
                                  (builtin "One Step Simplification" (formula "23"))
                                 (rule "notLeft" (formula "23"))
                                 (rule "applyEq" (formula "23") (term "1,0") (ifseqformula "22"))
                                 (rule "distributeIntersection" (formula "23") (term "0"))
                                 (rule "unionEqualsEmpty" (formula "23"))
                                 (rule "andLeft" (formula "23"))
                                 (rule "distributeIntersection" (formula "23") (term "0"))
                                 (rule "distributeIntersection" (formula "24") (term "0"))
                                 (rule "distributeIntersection" (formula "23") (term "1,0"))
                                 (rule "distributeIntersection" (formula "23") (term "0,0"))
                                 (rule "unionEqualsEmpty" (formula "24"))
                                 (rule "andLeft" (formula "24"))
                                 (rule "unionEqualsEmpty" (formula "23"))
                                 (rule "andLeft" (formula "23"))
                                 (rule "distributeIntersection" (formula "26") (term "0"))
                                 (rule "distributeIntersection" (formula "25") (term "0"))
                                 (rule "unionEqualsEmpty" (formula "23"))
                                  (builtin "One Step Simplification" (formula "23"))
                                 (rule "andLeft" (formula "23"))
                                 (rule "notLeft" (formula "24"))
                                 (rule "notLeft" (formula "23"))
                                 (rule "eqSymm" (formula "46"))
                                 (rule "eqSymm" (formula "45"))
                                 (rule "unionEqualsEmpty" (formula "23"))
                                  (builtin "One Step Simplification" (formula "23"))
                                 (rule "andLeft" (formula "23"))
                                 (rule "notLeft" (formula "24"))
                                 (rule "notLeft" (formula "23"))
                                 (rule "eqSymm" (formula "45"))
                                 (rule "eqSymm" (formula "44"))
                                 (rule "unionEqualsEmpty" (formula "24"))
                                  (builtin "One Step Simplification" (formula "24"))
                                 (rule "andLeft" (formula "24"))
                                 (rule "notLeft" (formula "24"))
                                 (rule "notLeft" (formula "24"))
                                 (rule "eqSymm" (formula "44"))
                                 (rule "eqSymm" (formula "43"))
                                 (rule "unionEqualsEmpty" (formula "23"))
                                  (builtin "One Step Simplification" (formula "23"))
                                 (rule "andLeft" (formula "23"))
                                 (rule "notLeft" (formula "23"))
                                 (rule "notLeft" (formula "23"))
                                 (rule "eqSymm" (formula "43"))
                                 (rule "eqSymm" (formula "42"))
                                 (rule "commuteUnion" (formula "22") (term "0,0,1"))
                                 (rule "commuteUnion" (formula "22") (term "1,1,1"))
                                 (rule "commuteUnion_2" (formula "22") (term "0,1"))
                                 (rule "commuteUnion" (formula "22") (term "0,0,1"))
                                 (rule "commuteUnion_2" (formula "22") (term "1"))
                                 (rule "Definition_axiom_for_isValidForLen_in_de_wiesler_SampleParameters" (formula "28") (term "0"))
                                  (builtin "One Step Simplification" (formula "28"))
                                 (rule "andLeft" (formula "28"))
                                 (rule "andLeft" (formula "28"))
                                 (rule "andLeft" (formula "28"))
                                 (rule "andLeft" (formula "29"))
                                 (rule "andLeft" (formula "28"))
                                 (rule "andLeft" (formula "28"))
                                 (rule "andLeft" (formula "28"))
                                 (rule "translateJavaSubInt" (formula "35") (term "0"))
                                 (rule "translateJavaMod" (formula "34") (term "0"))
                                 (rule "translateJavaDivInt" (formula "29") (term "1"))
                                 (rule "translateJavaMulInt" (formula "35") (term "0,0"))
                                 (rule "polySimp_elimSub" (formula "35") (term "0"))
                                 (rule "mul_literals" (formula "35") (term "1,0"))
                                 (rule "polySimp_addComm0" (formula "35") (term "0"))
                                 (rule "inEqSimp_ltToLeq" (formula "30"))
                                 (rule "polySimp_rightDist" (formula "30") (term "1,0,0"))
                                 (rule "polySimp_mulAssoc" (formula "30") (term "0,1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "30") (term "0,0,1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "30") (term "0,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "30") (term "0,1,0,0"))
                                 (rule "polySimp_addAssoc" (formula "30") (term "0,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "32"))
                                 (rule "inEqSimp_commuteLeq" (formula "31"))
                                 (rule "inEqSimp_commuteLeq" (formula "28"))
                                 (rule "inEqSimp_homoInEq0" (formula "35"))
                                 (rule "polySimp_mulComm0" (formula "35") (term "1,0"))
                                 (rule "polySimp_rightDist" (formula "35") (term "1,0"))
                                 (rule "mul_literals" (formula "35") (term "0,1,0"))
                                 (rule "polySimp_addAssoc" (formula "35") (term "0"))
                                 (rule "polySimp_addComm0" (formula "35") (term "0,0"))
                                 (rule "jmod_axiom" (formula "34") (term "0"))
                                 (rule "polySimp_mulLiterals" (formula "34") (term "1,0"))
                                 (rule "polySimp_sepNegMonomial" (formula "34"))
                                 (rule "polySimp_mulLiterals" (formula "34") (term "0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "30"))
                                 (rule "polySimp_mulComm0" (formula "30") (term "1"))
                                 (rule "polySimp_rightDist" (formula "30") (term "1"))
                                 (rule "polySimp_mulLiterals" (formula "30") (term "1,1"))
                                 (rule "polySimp_elimOne" (formula "30") (term "1,1"))
                                 (rule "polySimp_rightDist" (formula "30") (term "0,1"))
                                 (rule "mul_literals" (formula "30") (term "0,0,1"))
                                 (rule "replace_known_left" (formula "97") (term "1,1") (ifseqformula "30"))
                                  (builtin "One Step Simplification" (formula "97"))
                                 (rule "inEqSimp_sepNegMonomial1" (formula "35"))
                                 (rule "polySimp_mulLiterals" (formula "35") (term "0"))
                                 (rule "polySimp_elimOne" (formula "35") (term "0"))
                                 (rule "inEqSimp_subsumption1" (formula "97") (term "1") (ifseqformula "28"))
                                 (rule "leq_literals" (formula "97") (term "0,1"))
                                  (builtin "One Step Simplification" (formula "97"))
                                 (rule "newSym_eq" (formula "34") (inst "l=l_0") (inst "newSymDef=mul(int::final(self_77,
               de.wiesler.SampleParameters::$num_buckets),
    Z(0(#)))"))
                                 (rule "times_zero_1" (formula "34") (term "1,1"))
                                 (rule "add_zero_right" (formula "34") (term "1"))
                                 (rule "applyEq" (formula "35") (term "0,0") (ifseqformula "34"))
                                 (rule "eqSymm" (formula "35"))
                                 (rule "applyEq" (formula "32") (term "0") (ifseqformula "35"))
                                 (rule "applyEq" (formula "34") (term "0,0") (ifseqformula "35"))
                                 (rule "applyEq" (formula "33") (term "0") (ifseqformula "35"))
                                 (rule "inEqSimp_commuteLeq" (formula "33"))
                                 (rule "applyEq" (formula "36") (term "1,0") (ifseqformula "35"))
                                 (rule "polySimp_mulAssoc" (formula "36") (term "0"))
                                 (rule "elimGcdGeq_antec" (formula "32") (inst "elimGcdRightDiv=Z(1(#))") (inst "elimGcdLeftDiv=l_0") (inst "elimGcd=Z(2(#))"))
                                 (rule "polySimp_mulLiterals" (formula "32") (term "1,0,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "32") (term "1,0,0,0,0,1,0"))
                                 (rule "leq_literals" (formula "32") (term "0,0"))
                                  (builtin "One Step Simplification" (formula "32"))
                                 (rule "mul_literals" (formula "32") (term "1,0,0,0,0,0"))
                                 (rule "polySimp_addLiterals" (formula "32") (term "0,0,0,0"))
                                 (rule "add_zero_right" (formula "32") (term "0,0,0,0"))
                                 (rule "polySimp_pullOutFactor0b" (formula "32") (term "0,0"))
                                 (rule "add_literals" (formula "32") (term "1,1,0,0"))
                                 (rule "times_zero_1" (formula "32") (term "1,0,0"))
                                 (rule "add_zero_right" (formula "32") (term "0,0"))
                                 (rule "leq_literals" (formula "32") (term "0"))
                                  (builtin "One Step Simplification" (formula "32"))
                                 (rule "inEqSimp_exactShadow3" (formula "28") (ifseqformula "30"))
                                 (rule "mul_literals" (formula "28") (term "0,0"))
                                 (rule "polySimp_addAssoc" (formula "28") (term "0"))
                                 (rule "polySimp_addAssoc" (formula "28") (term "0,0"))
                                 (rule "add_literals" (formula "28") (term "0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "28"))
                                 (rule "polySimp_mulComm0" (formula "28") (term "1"))
                                 (rule "polySimp_rightDist" (formula "28") (term "1"))
                                 (rule "mul_literals" (formula "28") (term "0,1"))
                                 (rule "polySimp_mulLiterals" (formula "28") (term "1,1"))
                                 (rule "polySimp_elimOne" (formula "28") (term "1,1"))
                                 (rule "inEqSimp_subsumption1" (formula "28") (ifseqformula "12"))
                                 (rule "inEqSimp_homoInEq0" (formula "28") (term "0"))
                                 (rule "polySimp_mulComm0" (formula "28") (term "1,0,0"))
                                 (rule "polySimp_rightDist" (formula "28") (term "1,0,0"))
                                 (rule "mul_literals" (formula "28") (term "0,1,0,0"))
                                 (rule "polySimp_addAssoc" (formula "28") (term "0,0"))
                                 (rule "polySimp_addComm1" (formula "28") (term "0,0,0"))
                                 (rule "add_literals" (formula "28") (term "0,0,0,0"))
                                 (rule "polySimp_pullOutFactor1b" (formula "28") (term "0,0"))
                                 (rule "add_literals" (formula "28") (term "1,1,0,0"))
                                 (rule "times_zero_1" (formula "28") (term "1,0,0"))
                                 (rule "add_zero_right" (formula "28") (term "0,0"))
                                 (rule "qeq_literals" (formula "28") (term "0"))
                                  (builtin "One Step Simplification" (formula "28"))
                                 (rule "true_left" (formula "28"))
                                 (rule "inEqSimp_exactShadow3" (formula "28") (ifseqformula "29"))
                                 (rule "mul_literals" (formula "28") (term "0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "28"))
                                 (rule "mul_literals" (formula "28") (term "1"))
                                 (rule "Definition_axiom_for_isInInt_in_de_wiesler_SampleParameters" (formula "38") (term "0"))
                                  (builtin "One Step Simplification" (formula "38"))
                                 (rule "expand_inInt" (formula "38") (term "1,0"))
                                 (rule "expand_inInt" (formula "38") (term "1"))
                                 (rule "expand_inInt" (formula "38") (term "0,0"))
                                 (rule "replace_int_MAX" (formula "38") (term "1,0,1,0"))
                                 (rule "replace_int_MIN" (formula "38") (term "0,1,1,0"))
                                 (rule "replace_int_MAX" (formula "38") (term "1,0,1"))
                                 (rule "replace_int_MIN" (formula "38") (term "0,1,1"))
                                 (rule "replace_int_MAX" (formula "38") (term "1,0,0,0"))
                                 (rule "replace_int_MIN" (formula "38") (term "0,1,0,0"))
                                 (rule "andLeft" (formula "38"))
                                 (rule "andLeft" (formula "39"))
                                 (rule "andLeft" (formula "38"))
                                 (rule "andLeft" (formula "38"))
                                 (rule "andLeft" (formula "40"))
                                 (rule "inEqSimp_commuteLeq" (formula "43"))
                                 (rule "inEqSimp_commuteLeq" (formula "39"))
                                 (rule "inEqSimp_commuteLeq" (formula "41"))
                                 (rule "applyEq" (formula "42") (term "0") (ifseqformula "36"))
                                 (rule "applyEq" (formula "43") (term "0") (ifseqformula "36"))
                                 (rule "inEqSimp_subsumption1" (formula "39") (ifseqformula "29"))
                                 (rule "leq_literals" (formula "39") (term "0"))
                                  (builtin "One Step Simplification" (formula "39"))
                                 (rule "true_left" (formula "39"))
                                 (rule "inEqSimp_subsumption6" (formula "42") (ifseqformula "33"))
                                 (rule "greater_literals" (formula "42") (term "0,0"))
                                  (builtin "One Step Simplification" (formula "42"))
                                 (rule "mul_literals" (formula "42") (term "1,0"))
                                 (rule "leq_literals" (formula "42") (term "0"))
                                  (builtin "One Step Simplification" (formula "42"))
                                 (rule "true_left" (formula "42"))
                                 (rule "inEqSimp_subsumption1" (formula "40") (ifseqformula "32"))
                                 (rule "leq_literals" (formula "40") (term "0"))
                                  (builtin "One Step Simplification" (formula "40"))
                                 (rule "true_left" (formula "40"))
                                 (rule "elimGcdLeq_antec" (formula "40") (inst "elimGcdRightDiv=Z(3(2(8(1(4(7(3(7(0(1(#)))))))))))") (inst "elimGcdLeftDiv=l_0") (inst "elimGcd=Z(2(#))"))
                                 (rule "neg_literal" (formula "40") (term "0,0,0,0,0,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "40") (term "1,0,0,0,0,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "40") (term "1,0,1,0"))
                                 (rule "leq_literals" (formula "40") (term "0,0"))
                                  (builtin "One Step Simplification" (formula "40"))
                                 (rule "mul_literals" (formula "40") (term "1,0,0,0,0,0"))
                                 (rule "polySimp_addLiterals" (formula "40") (term "0,0,0,0"))
                                 (rule "add_literals" (formula "40") (term "0,0,0,0"))
                                 (rule "polySimp_pullOutFactor0b" (formula "40") (term "0,0"))
                                 (rule "add_literals" (formula "40") (term "1,1,0,0"))
                                 (rule "times_zero_1" (formula "40") (term "1,0,0"))
                                 (rule "add_zero_right" (formula "40") (term "0,0"))
                                 (rule "qeq_literals" (formula "40") (term "0"))
                                  (builtin "One Step Simplification" (formula "40"))
                                 (rule "cut_direct" (formula "51") (term "0,0,0,0,0"))
                                 (branch "CUT: result_66 = null TRUE"
                                     (builtin "One Step Simplification" (formula "52"))
                                    (rule "true_left" (formula "52"))
                                    (rule "cut_direct" (formula "43") (term "0,0,0"))
                                    (branch "CUT: result_65 = null TRUE"
                                        (builtin "One Step Simplification" (formula "44"))
                                       (rule "true_left" (formula "44"))
                                       (rule "Class_invariant_axiom_for_de_wiesler_Storage" (formula "101") (term "0"))
                                       (rule "replace_known_right" (formula "101") (term "0,1,0,0,0,0") (ifseqformula "93"))
                                        (builtin "One Step Simplification" (formula "101") (ifInst ""  (formula "89")) (ifInst ""  (formula "90")) (ifInst ""  (formula "91")) (ifInst ""  (formula "92")) (ifInst ""  (formula "94")) (ifInst ""  (formula "95")) (ifInst ""  (formula "96")))
                                       (rule "associativeLawUnion" (formula "22") (term "0,1"))
                                       (rule "arrayLengthNotNegative" (formula "21") (term "0"))
                                       (rule "applyEq" (formula "21") (term "0") (ifseqformula "22"))
                                       (rule "qeq_literals" (formula "21"))
                                       (rule "true_left" (formula "21"))
                                       (rule "arrayLengthIsAShort" (formula "21") (term "0"))
                                       (rule "expand_inShort" (formula "21"))
                                       (rule "replace_short_MIN" (formula "21") (term "0,1"))
                                       (rule "replace_short_MAX" (formula "21") (term "1,0"))
                                       (rule "andLeft" (formula "21"))
                                       (rule "inEqSimp_commuteLeq" (formula "22"))
                                       (rule "applyEq" (formula "22") (term "0") (ifseqformula "23"))
                                       (rule "qeq_literals" (formula "22"))
                                       (rule "true_left" (formula "22"))
                                       (rule "applyEq" (formula "21") (term "0") (ifseqformula "22"))
                                       (rule "leq_literals" (formula "21"))
                                       (rule "true_left" (formula "21"))
                                       (rule "arrayLengthIsAShort" (formula "20") (term "0"))
                                       (rule "expand_inShort" (formula "20"))
                                       (rule "replace_short_MAX" (formula "20") (term "1,0"))
                                       (rule "replace_short_MIN" (formula "20") (term "0,1"))
                                       (rule "andLeft" (formula "20"))
                                       (rule "inEqSimp_commuteLeq" (formula "21"))
                                       (rule "applyEq" (formula "20") (term "0") (ifseqformula "22"))
                                       (rule "leq_literals" (formula "20"))
                                       (rule "true_left" (formula "20"))
                                       (rule "applyEq" (formula "20") (term "0") (ifseqformula "21"))
                                       (rule "qeq_literals" (formula "20"))
                                       (rule "true_left" (formula "20"))
                                       (rule "arrayLengthNotNegative" (formula "20") (term "0"))
                                       (rule "applyEq" (formula "20") (term "0") (ifseqformula "21"))
                                       (rule "qeq_literals" (formula "20"))
                                       (rule "true_left" (formula "20"))
                                       (rule "arrayLengthIsAShort" (formula "19") (term "0"))
                                       (rule "expand_inShort" (formula "19"))
                                       (rule "replace_short_MAX" (formula "19") (term "1,0"))
                                       (rule "replace_short_MIN" (formula "19") (term "0,1"))
                                       (rule "andLeft" (formula "19"))
                                       (rule "inEqSimp_commuteLeq" (formula "20"))
                                       (rule "applyEq" (formula "19") (term "0") (ifseqformula "21"))
                                       (rule "leq_literals" (formula "19"))
                                       (rule "true_left" (formula "19"))
                                       (rule "applyEq" (formula "19") (term "0") (ifseqformula "20"))
                                       (rule "qeq_literals" (formula "19"))
                                       (rule "true_left" (formula "19"))
                                       (rule "arrayLengthNotNegative" (formula "19") (term "0"))
                                       (rule "applyEq" (formula "19") (term "0") (ifseqformula "20"))
                                       (rule "qeq_literals" (formula "19"))
                                       (rule "true_left" (formula "19"))
                                       (rule "arrayLengthNotNegative" (formula "18") (term "0"))
                                       (rule "applyEq" (formula "18") (term "0") (ifseqformula "19"))
                                       (rule "qeq_literals" (formula "18"))
                                       (rule "true_left" (formula "18"))
                                       (rule "arrayLengthIsAShort" (formula "18") (term "0"))
                                       (rule "expand_inShort" (formula "18"))
                                       (rule "replace_short_MIN" (formula "18") (term "0,1"))
                                       (rule "replace_short_MAX" (formula "18") (term "1,0"))
                                       (rule "andLeft" (formula "18"))
                                       (rule "inEqSimp_commuteLeq" (formula "19"))
                                       (rule "applyEq" (formula "19") (term "0") (ifseqformula "20"))
                                       (rule "qeq_literals" (formula "19"))
                                       (rule "true_left" (formula "19"))
                                       (rule "applyEq" (formula "18") (term "0") (ifseqformula "19"))
                                       (rule "leq_literals" (formula "18"))
                                       (rule "true_left" (formula "18"))
                                       (rule "arrayLengthNotNegative" (formula "17") (term "0"))
                                       (rule "applyEq" (formula "17") (term "0") (ifseqformula "18"))
                                       (rule "qeq_literals" (formula "17"))
                                       (rule "true_left" (formula "17"))
                                       (rule "arrayLengthIsAShort" (formula "17") (term "0"))
                                       (rule "expand_inShort" (formula "17"))
                                       (rule "replace_short_MIN" (formula "17") (term "0,1"))
                                       (rule "replace_short_MAX" (formula "17") (term "1,0"))
                                       (rule "andLeft" (formula "17"))
                                       (rule "inEqSimp_commuteLeq" (formula "18"))
                                       (rule "applyEq" (formula "18") (term "0") (ifseqformula "19"))
                                       (rule "qeq_literals" (formula "18"))
                                       (rule "true_left" (formula "18"))
                                       (rule "applyEq" (formula "17") (term "0") (ifseqformula "18"))
                                       (rule "leq_literals" (formula "17"))
                                       (rule "closeFalse" (formula "17"))
                                    )
                                    (branch "CUT: result_65 = null FALSE"
                                        (builtin "One Step Simplification" (formula "43"))
                                       (rule "Class_invariant_axiom_for_de_wiesler_Storage" (formula "102") (term "0"))
                                       (rule "replace_known_right" (formula "102") (term "0,1,0,0") (ifseqformula "96"))
                                        (builtin "One Step Simplification" (formula "102") (ifInst ""  (formula "90")) (ifInst ""  (formula "91")) (ifInst ""  (formula "92")) (ifInst ""  (formula "93")) (ifInst ""  (formula "94")) (ifInst ""  (formula "95")) (ifInst ""  (formula "97")))
                                       (rule "associativeLawUnion" (formula "22") (term "0,1"))
                                       (rule "arrayLengthNotNegative" (formula "21") (term "0"))
                                       (rule "applyEq" (formula "21") (term "0") (ifseqformula "22"))
                                       (rule "qeq_literals" (formula "21"))
                                       (rule "true_left" (formula "21"))
                                       (rule "arrayLengthIsAShort" (formula "21") (term "0"))
                                       (rule "expand_inShort" (formula "21"))
                                       (rule "replace_short_MAX" (formula "21") (term "1,0"))
                                       (rule "replace_short_MIN" (formula "21") (term "0,1"))
                                       (rule "andLeft" (formula "21"))
                                       (rule "inEqSimp_commuteLeq" (formula "22"))
                                       (rule "applyEq" (formula "22") (term "0") (ifseqformula "23"))
                                       (rule "qeq_literals" (formula "22"))
                                       (rule "true_left" (formula "22"))
                                       (rule "applyEq" (formula "21") (term "0") (ifseqformula "22"))
                                       (rule "leq_literals" (formula "21"))
                                       (rule "true_left" (formula "21"))
                                       (rule "arrayLengthIsAShort" (formula "20") (term "0"))
                                       (rule "expand_inShort" (formula "20"))
                                       (rule "replace_short_MIN" (formula "20") (term "0,1"))
                                       (rule "replace_short_MAX" (formula "20") (term "1,0"))
                                       (rule "andLeft" (formula "20"))
                                       (rule "inEqSimp_commuteLeq" (formula "21"))
                                       (rule "applyEq" (formula "21") (term "0") (ifseqformula "22"))
                                       (rule "qeq_literals" (formula "21"))
                                       (rule "true_left" (formula "21"))
                                       (rule "applyEq" (formula "20") (term "0") (ifseqformula "21"))
                                       (rule "leq_literals" (formula "20"))
                                       (rule "true_left" (formula "20"))
                                       (rule "arrayLengthNotNegative" (formula "20") (term "0"))
                                       (rule "applyEq" (formula "20") (term "0") (ifseqformula "21"))
                                       (rule "qeq_literals" (formula "20"))
                                       (rule "true_left" (formula "20"))
                                       (rule "arrayLengthIsAShort" (formula "19") (term "0"))
                                       (rule "expand_inShort" (formula "19"))
                                       (rule "replace_short_MIN" (formula "19") (term "0,1"))
                                       (rule "replace_short_MAX" (formula "19") (term "1,0"))
                                       (rule "andLeft" (formula "19"))
                                       (rule "inEqSimp_commuteLeq" (formula "20"))
                                       (rule "applyEq" (formula "20") (term "0") (ifseqformula "21"))
                                       (rule "qeq_literals" (formula "20"))
                                       (rule "true_left" (formula "20"))
                                       (rule "applyEq" (formula "19") (term "0") (ifseqformula "20"))
                                       (rule "leq_literals" (formula "19"))
                                       (rule "true_left" (formula "19"))
                                       (rule "arrayLengthNotNegative" (formula "19") (term "0"))
                                       (rule "applyEq" (formula "19") (term "0") (ifseqformula "20"))
                                       (rule "qeq_literals" (formula "19"))
                                       (rule "true_left" (formula "19"))
                                       (rule "arrayLengthNotNegative" (formula "18") (term "0"))
                                       (rule "applyEq" (formula "18") (term "0") (ifseqformula "19"))
                                       (rule "qeq_literals" (formula "18"))
                                       (rule "true_left" (formula "18"))
                                       (rule "arrayLengthIsAShort" (formula "18") (term "0"))
                                       (rule "expand_inShort" (formula "18"))
                                       (rule "replace_short_MAX" (formula "18") (term "1,0"))
                                       (rule "replace_short_MIN" (formula "18") (term "0,1"))
                                       (rule "andLeft" (formula "18"))
                                       (rule "inEqSimp_commuteLeq" (formula "19"))
                                       (rule "applyEq" (formula "19") (term "0") (ifseqformula "20"))
                                       (rule "qeq_literals" (formula "19"))
                                       (rule "true_left" (formula "19"))
                                       (rule "applyEq" (formula "18") (term "0") (ifseqformula "19"))
                                       (rule "leq_literals" (formula "18"))
                                       (rule "true_left" (formula "18"))
                                       (rule "arrayLengthIsAShort" (formula "17") (term "0"))
                                       (rule "expand_inShort" (formula "17"))
                                       (rule "replace_short_MIN" (formula "17") (term "0,1"))
                                       (rule "replace_short_MAX" (formula "17") (term "1,0"))
                                       (rule "andLeft" (formula "17"))
                                       (rule "inEqSimp_commuteLeq" (formula "18"))
                                       (rule "applyEq" (formula "18") (term "0") (ifseqformula "19"))
                                       (rule "qeq_literals" (formula "18"))
                                       (rule "true_left" (formula "18"))
                                       (rule "applyEq" (formula "17") (term "0") (ifseqformula "18"))
                                       (rule "leq_literals" (formula "17"))
                                       (rule "closeFalse" (formula "17"))
                                    )
                                 )
                                 (branch "CUT: result_66 = null FALSE"
                                     (builtin "One Step Simplification" (formula "51"))
                                    (rule "cut_direct" (formula "43") (term "0,0,0"))
                                    (branch "CUT: result_65 = null TRUE"
                                        (builtin "One Step Simplification" (formula "44"))
                                       (rule "true_left" (formula "44"))
                                       (rule "Class_invariant_axiom_for_de_wiesler_Storage" (formula "102") (term "0"))
                                       (rule "replace_known_right" (formula "102") (term "0,1,0,0") (ifseqformula "96"))
                                        (builtin "One Step Simplification" (formula "102") (ifInst ""  (formula "90")) (ifInst ""  (formula "91")) (ifInst ""  (formula "92")) (ifInst ""  (formula "93")) (ifInst ""  (formula "94")) (ifInst ""  (formula "95")) (ifInst ""  (formula "97")))
                                       (rule "associativeLawUnion" (formula "22") (term "0,1"))
                                       (rule "arrayLengthIsAShort" (formula "21") (term "0"))
                                       (rule "expand_inShort" (formula "21"))
                                       (rule "replace_short_MIN" (formula "21") (term "0,1"))
                                       (rule "replace_short_MAX" (formula "21") (term "1,0"))
                                       (rule "andLeft" (formula "21"))
                                       (rule "inEqSimp_commuteLeq" (formula "22"))
                                       (rule "applyEq" (formula "21") (term "0") (ifseqformula "23"))
                                       (rule "leq_literals" (formula "21"))
                                       (rule "true_left" (formula "21"))
                                       (rule "applyEq" (formula "21") (term "0") (ifseqformula "22"))
                                       (rule "qeq_literals" (formula "21"))
                                       (rule "true_left" (formula "21"))
                                       (rule "arrayLengthNotNegative" (formula "21") (term "0"))
                                       (rule "applyEq" (formula "21") (term "0") (ifseqformula "22"))
                                       (rule "qeq_literals" (formula "21"))
                                       (rule "true_left" (formula "21"))
                                       (rule "arrayLengthNotNegative" (formula "20") (term "0"))
                                       (rule "applyEq" (formula "20") (term "0") (ifseqformula "21"))
                                       (rule "qeq_literals" (formula "20"))
                                       (rule "true_left" (formula "20"))
                                       (rule "arrayLengthIsAShort" (formula "20") (term "0"))
                                       (rule "expand_inShort" (formula "20"))
                                       (rule "replace_short_MAX" (formula "20") (term "1,0"))
                                       (rule "replace_short_MIN" (formula "20") (term "0,1"))
                                       (rule "andLeft" (formula "20"))
                                       (rule "inEqSimp_commuteLeq" (formula "21"))
                                       (rule "applyEq" (formula "21") (term "0") (ifseqformula "22"))
                                       (rule "qeq_literals" (formula "21"))
                                       (rule "true_left" (formula "21"))
                                       (rule "applyEq" (formula "20") (term "0") (ifseqformula "21"))
                                       (rule "leq_literals" (formula "20"))
                                       (rule "true_left" (formula "20"))
                                       (rule "arrayLengthIsAShort" (formula "19") (term "0"))
                                       (rule "expand_inShort" (formula "19"))
                                       (rule "replace_short_MIN" (formula "19") (term "0,1"))
                                       (rule "replace_short_MAX" (formula "19") (term "1,0"))
                                       (rule "andLeft" (formula "19"))
                                       (rule "inEqSimp_commuteLeq" (formula "20"))
                                       (rule "applyEq" (formula "19") (term "0") (ifseqformula "21"))
                                       (rule "leq_literals" (formula "19"))
                                       (rule "true_left" (formula "19"))
                                       (rule "applyEq" (formula "19") (term "0") (ifseqformula "20"))
                                       (rule "qeq_literals" (formula "19"))
                                       (rule "true_left" (formula "19"))
                                       (rule "arrayLengthNotNegative" (formula "19") (term "0"))
                                       (rule "applyEq" (formula "19") (term "0") (ifseqformula "20"))
                                       (rule "qeq_literals" (formula "19"))
                                       (rule "true_left" (formula "19"))
                                       (rule "arrayLengthNotNegative" (formula "18") (term "0"))
                                       (rule "applyEq" (formula "18") (term "0") (ifseqformula "19"))
                                       (rule "qeq_literals" (formula "18"))
                                       (rule "true_left" (formula "18"))
                                       (rule "arrayLengthIsAShort" (formula "18") (term "0"))
                                       (rule "expand_inShort" (formula "18"))
                                       (rule "replace_short_MAX" (formula "18") (term "1,0"))
                                       (rule "replace_short_MIN" (formula "18") (term "0,1"))
                                       (rule "andLeft" (formula "18"))
                                       (rule "inEqSimp_commuteLeq" (formula "19"))
                                       (rule "applyEq" (formula "19") (term "0") (ifseqformula "20"))
                                       (rule "qeq_literals" (formula "19"))
                                       (rule "true_left" (formula "19"))
                                       (rule "applyEq" (formula "18") (term "0") (ifseqformula "19"))
                                       (rule "leq_literals" (formula "18"))
                                       (rule "true_left" (formula "18"))
                                       (rule "arrayLengthIsAShort" (formula "17") (term "0"))
                                       (rule "expand_inShort" (formula "17"))
                                       (rule "replace_short_MIN" (formula "17") (term "0,1"))
                                       (rule "replace_short_MAX" (formula "17") (term "1,0"))
                                       (rule "andLeft" (formula "17"))
                                       (rule "inEqSimp_commuteLeq" (formula "18"))
                                       (rule "applyEq" (formula "17") (term "0") (ifseqformula "19"))
                                       (rule "leq_literals" (formula "17"))
                                       (rule "closeFalse" (formula "17"))
                                    )
                                    (branch "CUT: result_65 = null FALSE"
                                        (builtin "One Step Simplification" (formula "43"))
                                       (rule "Class_invariant_axiom_for_de_wiesler_Storage" (formula "103") (term "0"))
                                       (rule "replace_known_right" (formula "103") (term "0,1,0,0,0,0,0,0") (ifseqformula "93"))
                                        (builtin "One Step Simplification" (formula "103") (ifInst ""  (formula "91")) (ifInst ""  (formula "92")) (ifInst ""  (formula "94")) (ifInst ""  (formula "95")) (ifInst ""  (formula "96")) (ifInst ""  (formula "97")) (ifInst ""  (formula "98")))
                                       (rule "associativeLawUnion" (formula "22") (term "0,1"))
                                       (rule "arrayLengthIsAShort" (formula "21") (term "0"))
                                       (rule "expand_inShort" (formula "21"))
                                       (rule "replace_short_MAX" (formula "21") (term "1,0"))
                                       (rule "replace_short_MIN" (formula "21") (term "0,1"))
                                       (rule "andLeft" (formula "21"))
                                       (rule "inEqSimp_commuteLeq" (formula "22"))
                                       (rule "applyEq" (formula "21") (term "0") (ifseqformula "23"))
                                       (rule "leq_literals" (formula "21"))
                                       (rule "true_left" (formula "21"))
                                       (rule "applyEq" (formula "21") (term "0") (ifseqformula "22"))
                                       (rule "qeq_literals" (formula "21"))
                                       (rule "true_left" (formula "21"))
                                       (rule "arrayLengthNotNegative" (formula "21") (term "0"))
                                       (rule "applyEq" (formula "21") (term "0") (ifseqformula "22"))
                                       (rule "qeq_literals" (formula "21"))
                                       (rule "true_left" (formula "21"))
                                       (rule "arrayLengthIsAShort" (formula "20") (term "0"))
                                       (rule "expand_inShort" (formula "20"))
                                       (rule "replace_short_MAX" (formula "20") (term "1,0"))
                                       (rule "replace_short_MIN" (formula "20") (term "0,1"))
                                       (rule "andLeft" (formula "20"))
                                       (rule "inEqSimp_commuteLeq" (formula "21"))
                                       (rule "applyEq" (formula "20") (term "0") (ifseqformula "22"))
                                       (rule "leq_literals" (formula "20"))
                                       (rule "true_left" (formula "20"))
                                       (rule "applyEq" (formula "20") (term "0") (ifseqformula "21"))
                                       (rule "qeq_literals" (formula "20"))
                                       (rule "true_left" (formula "20"))
                                       (rule "arrayLengthNotNegative" (formula "20") (term "0"))
                                       (rule "applyEq" (formula "20") (term "0") (ifseqformula "21"))
                                       (rule "qeq_literals" (formula "20"))
                                       (rule "true_left" (formula "20"))
                                       (rule "arrayLengthIsAShort" (formula "19") (term "0"))
                                       (rule "expand_inShort" (formula "19"))
                                       (rule "replace_short_MIN" (formula "19") (term "0,1"))
                                       (rule "replace_short_MAX" (formula "19") (term "1,0"))
                                       (rule "andLeft" (formula "19"))
                                       (rule "inEqSimp_commuteLeq" (formula "20"))
                                       (rule "applyEq" (formula "20") (term "0") (ifseqformula "21"))
                                       (rule "qeq_literals" (formula "20"))
                                       (rule "true_left" (formula "20"))
                                       (rule "applyEq" (formula "19") (term "0") (ifseqformula "20"))
                                       (rule "leq_literals" (formula "19"))
                                       (rule "true_left" (formula "19"))
                                       (rule "arrayLengthNotNegative" (formula "19") (term "0"))
                                       (rule "applyEq" (formula "19") (term "0") (ifseqformula "20"))
                                       (rule "qeq_literals" (formula "19"))
                                       (rule "true_left" (formula "19"))
                                       (rule "arrayLengthNotNegative" (formula "18") (term "0"))
                                       (rule "applyEq" (formula "18") (term "0") (ifseqformula "19"))
                                       (rule "qeq_literals" (formula "18"))
                                       (rule "true_left" (formula "18"))
                                       (rule "arrayLengthIsAShort" (formula "18") (term "0"))
                                       (rule "expand_inShort" (formula "18"))
                                       (rule "replace_short_MIN" (formula "18") (term "0,1"))
                                       (rule "replace_short_MAX" (formula "18") (term "1,0"))
                                       (rule "andLeft" (formula "18"))
                                       (rule "inEqSimp_commuteLeq" (formula "19"))
                                       (rule "applyEq" (formula "18") (term "0") (ifseqformula "20"))
                                       (rule "leq_literals" (formula "18"))
                                       (rule "true_left" (formula "18"))
                                       (rule "applyEq" (formula "18") (term "0") (ifseqformula "19"))
                                       (rule "qeq_literals" (formula "18"))
                                       (rule "true_left" (formula "18"))
                                       (rule "arrayLengthIsAShort" (formula "17") (term "0"))
                                       (rule "expand_inShort" (formula "17"))
                                       (rule "replace_short_MIN" (formula "17") (term "0,1"))
                                       (rule "replace_short_MAX" (formula "17") (term "1,0"))
                                       (rule "andLeft" (formula "17"))
                                       (rule "inEqSimp_commuteLeq" (formula "18"))
                                       (rule "applyEq" (formula "18") (term "0") (ifseqformula "19"))
                                       (rule "qeq_literals" (formula "18"))
                                       (rule "true_left" (formula "18"))
                                       (rule "applyEq" (formula "17") (term "0") (ifseqformula "18"))
                                       (rule "leq_literals" (formula "17"))
                                       (rule "closeFalse" (formula "17"))
                                    )
                                 )
                              )
                           )
                        )
                        (branch "Null Reference (parameters = null)"
                           (rule "false_right" (formula "46"))
                            (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "43")))
                           (rule "closeFalse" (formula "1"))
                        )
                     )
                  )
               )
               (branch "Exceptional Post (select_n)"
                   (builtin "One Step Simplification" (formula "39"))
                   (builtin "One Step Simplification" (formula "34"))
                  (rule "andLeft" (formula "34"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "35") (term "1,0") (ifseqformula "34"))
                   (builtin "One Step Simplification" (formula "35"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "35") (term "0,0,1,0") (ifseqformula "21"))
                  (rule "andLeft" (formula "35"))
                  (rule "andLeft" (formula "35"))
                  (rule "notLeft" (formula "35"))
                  (rule "close" (formula "37") (ifseqformula "36"))
               )
               (branch "Pre (select_n)"
                   (builtin "One Step Simplification" (formula "37") (ifInst ""  (formula "36")) (ifInst ""  (formula "36")))
                  (rule "wellFormedAnon" (formula "37") (term "0,0,0,0"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "37") (term "0,1,0,0,0") (ifseqformula "21"))
                  (rule "expand_inInt" (formula "37") (term "1"))
                  (rule "expand_inInt" (formula "37") (term "1,0,0"))
                  (rule "expand_inInt" (formula "37") (term "1,0"))
                  (rule "replace_int_MAX" (formula "37") (term "1,0,1"))
                  (rule "replace_int_MIN" (formula "37") (term "0,1,1"))
                  (rule "replace_int_MIN" (formula "37") (term "0,1,1,0,0"))
                  (rule "replace_int_MAX" (formula "37") (term "1,0,1,0,0"))
                  (rule "replace_int_MIN" (formula "37") (term "0,1,1,0"))
                  (rule "replace_int_MAX" (formula "37") (term "1,0,1,0"))
                  (rule "replace_known_left" (formula "37") (term "1,0,0,0,0") (ifseqformula "30"))
                   (builtin "One Step Simplification" (formula "37") (ifInst ""  (formula "2")) (ifInst ""  (formula "3")) (ifInst ""  (formula "5")))
                  (rule "inEqSimp_ltToLeq" (formula "16"))
                  (rule "polySimp_rightDist" (formula "16") (term "1,0,0"))
                  (rule "polySimp_mulAssoc" (formula "16") (term "0,1,0,0"))
                  (rule "polySimp_mulComm0" (formula "16") (term "0,0,1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "16") (term "0,1,0,0"))
                  (rule "polySimp_elimOne" (formula "16") (term "0,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "16") (term "0,0"))
                  (rule "polySimp_addComm1" (formula "16") (term "0"))
                  (rule "polySimp_addComm1" (formula "16") (term "0,0"))
                  (rule "add_literals" (formula "16") (term "0,0,0"))
                  (rule "inEqSimp_commuteLeq" (formula "37") (term "1,0"))
                  (rule "replace_known_left" (formula "37") (term "1,0") (ifseqformula "6"))
                   (builtin "One Step Simplification" (formula "37"))
                  (rule "inEqSimp_commuteLeq" (formula "37") (term "1,1"))
                  (rule "inEqSimp_commuteLeq" (formula "37") (term "1,0"))
                  (rule "replace_known_left" (formula "37") (term "1,0") (ifseqformula "4"))
                   (builtin "One Step Simplification" (formula "37"))
                  (rule "inEqSimp_homoInEq0" (formula "17"))
                  (rule "polySimp_mulComm0" (formula "17") (term "1,0"))
                  (rule "polySimp_rightDist" (formula "17") (term "1,0"))
                  (rule "polySimp_mulAssoc" (formula "17") (term "0,1,0"))
                  (rule "polySimp_mulComm0" (formula "17") (term "0,0,1,0"))
                  (rule "polySimp_mulLiterals" (formula "17") (term "0,1,0"))
                  (rule "polySimp_elimOne" (formula "17") (term "0,1,0"))
                  (rule "polySimp_addAssoc" (formula "17") (term "0"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "16"))
                  (rule "polySimp_mulLiterals" (formula "16") (term "0"))
                  (rule "polySimp_elimOne" (formula "16") (term "0"))
                  (rule "inEqSimp_sepNegMonomial1" (formula "17"))
                  (rule "polySimp_mulLiterals" (formula "17") (term "0"))
                  (rule "polySimp_elimOne" (formula "17") (term "0"))
                  (rule "inEqSimp_subsumption1" (formula "14") (ifseqformula "12"))
                  (rule "leq_literals" (formula "14") (term "0"))
                   (builtin "One Step Simplification" (formula "14"))
                  (rule "true_left" (formula "14"))
                  (rule "inEqSimp_subsumption1" (formula "4") (ifseqformula "10"))
                  (rule "leq_literals" (formula "4") (term "0"))
                   (builtin "One Step Simplification" (formula "4"))
                  (rule "true_left" (formula "4"))
                  (rule "inEqSimp_subsumption1" (formula "10") (ifseqformula "14"))
                  (rule "inEqSimp_homoInEq0" (formula "10") (term "0"))
                  (rule "polySimp_pullOutFactor1b" (formula "10") (term "0,0"))
                  (rule "add_literals" (formula "10") (term "1,1,0,0"))
                  (rule "times_zero_1" (formula "10") (term "1,0,0"))
                  (rule "add_zero_right" (formula "10") (term "0,0"))
                  (rule "qeq_literals" (formula "10") (term "0"))
                   (builtin "One Step Simplification" (formula "10"))
                  (rule "true_left" (formula "10"))
                  (rule "inEqSimp_exactShadow3" (formula "5") (ifseqformula "14"))
                  (rule "mul_literals" (formula "5") (term "0,0"))
                  (rule "polySimp_addAssoc" (formula "5") (term "0"))
                  (rule "add_literals" (formula "5") (term "0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "5"))
                  (rule "mul_literals" (formula "5") (term "1"))
                  (rule "inEqSimp_subsumption1" (formula "5") (ifseqformula "10"))
                  (rule "leq_literals" (formula "5") (term "0"))
                   (builtin "One Step Simplification" (formula "5"))
                  (rule "true_left" (formula "5"))
                  (rule "inEqSimp_exactShadow3" (formula "13") (ifseqformula "4"))
                  (rule "polySimp_rightDist" (formula "13") (term "0,0"))
                  (rule "mul_literals" (formula "13") (term "0,0,0"))
                  (rule "polySimp_addComm1" (formula "13") (term "0"))
                  (rule "add_literals" (formula "13") (term "0,0"))
                  (rule "inEqSimp_sepNegMonomial1" (formula "13"))
                  (rule "polySimp_mulLiterals" (formula "13") (term "0"))
                  (rule "polySimp_elimOne" (formula "13") (term "0"))
                  (rule "inEqSimp_subsumption0" (formula "3") (ifseqformula "13"))
                  (rule "leq_literals" (formula "3") (term "0"))
                   (builtin "One Step Simplification" (formula "3"))
                  (rule "true_left" (formula "3"))
                  (rule "inEqSimp_exactShadow3" (formula "11") (ifseqformula "10"))
                  (rule "polySimp_mulComm0" (formula "11") (term "0,0"))
                  (rule "polySimp_addComm0" (formula "11") (term "0"))
                  (rule "inEqSimp_sepNegMonomial1" (formula "11"))
                  (rule "polySimp_mulLiterals" (formula "11") (term "0"))
                  (rule "polySimp_elimOne" (formula "11") (term "0"))
                  (rule "inEqSimp_subsumption0" (formula "3") (ifseqformula "11"))
                  (rule "leq_literals" (formula "3") (term "0"))
                   (builtin "One Step Simplification" (formula "3"))
                  (rule "true_left" (formula "3"))
                  (rule "inEqSimp_exactShadow3" (formula "13") (ifseqformula "10"))
                  (rule "polySimp_rightDist" (formula "13") (term "0,0"))
                  (rule "mul_literals" (formula "13") (term "0,0,0"))
                  (rule "polySimp_addComm1" (formula "13") (term "0"))
                  (rule "add_literals" (formula "13") (term "0,0"))
                  (rule "inEqSimp_sepNegMonomial1" (formula "13"))
                  (rule "polySimp_mulLiterals" (formula "13") (term "0"))
                  (rule "polySimp_elimOne" (formula "13") (term "0"))
                  (rule "inEqSimp_subsumption0" (formula "12") (ifseqformula "13"))
                  (rule "leq_literals" (formula "12") (term "0"))
                   (builtin "One Step Simplification" (formula "12"))
                  (rule "true_left" (formula "12"))
                  (rule "Free_class_invariant_axiom_for_de_wiesler_Storage" (formula "15"))
                   (builtin "One Step Simplification" (formula "15"))
                  (rule "andLeft" (formula "15"))
                  (rule "andLeft" (formula "15"))
                  (rule "andLeft" (formula "17"))
                  (rule "andLeft" (formula "15"))
                  (rule "andLeft" (formula "18"))
                  (rule "andLeft" (formula "15"))
                  (rule "andLeft" (formula "19"))
                  (rule "andLeft" (formula "15"))
                  (rule "andLeft" (formula "20"))
                  (rule "andLeft" (formula "15"))
                  (rule "andLeft" (formula "21"))
                  (rule "andLeft" (formula "15"))
                  (rule "andLeft" (formula "22"))
                  (rule "andLeft" (formula "15"))
                  (rule "andLeft" (formula "23"))
                  (rule "andLeft" (formula "15"))
                  (rule "andLeft" (formula "24"))
                  (rule "andLeft" (formula "24"))
                  (rule "andLeft" (formula "24"))
                  (rule "andLeft" (formula "24"))
                  (rule "andLeft" (formula "24"))
                  (rule "andLeft" (formula "24"))
                  (rule "andLeft" (formula "24"))
                  (rule "andLeft" (formula "24"))
                  (rule "andLeft" (formula "24"))
                  (rule "andLeft" (formula "24"))
                  (rule "andLeft" (formula "24"))
                  (rule "andLeft" (formula "24"))
                  (rule "andLeft" (formula "24"))
                  (rule "andLeft" (formula "24"))
                  (rule "andLeft" (formula "24"))
                  (rule "andLeft" (formula "24"))
                  (rule "andLeft" (formula "24"))
                  (rule "andLeft" (formula "24"))
                  (rule "andLeft" (formula "24"))
                  (rule "andLeft" (formula "24"))
                  (rule "translateJavaMulInt" (formula "18") (term "1"))
                  (rule "mul_literals" (formula "18") (term "1"))
                  (rule "translateJavaMulInt" (formula "17") (term "1"))
                  (rule "mul_literals" (formula "17") (term "1"))
                  (rule "disjointDefinition" (formula "51"))
                   (builtin "One Step Simplification" (formula "51"))
                  (rule "notLeft" (formula "51"))
                  (rule "disjointDefinition" (formula "50"))
                   (builtin "One Step Simplification" (formula "50"))
                  (rule "notLeft" (formula "50"))
                  (rule "disjointDefinition" (formula "49"))
                   (builtin "One Step Simplification" (formula "49"))
                  (rule "notLeft" (formula "49"))
                  (rule "eqSymm" (formula "63"))
                  (rule "disjointDefinition" (formula "48"))
                   (builtin "One Step Simplification" (formula "48"))
                  (rule "notLeft" (formula "48"))
                  (rule "eqSymm" (formula "62"))
                  (rule "disjointDefinition" (formula "47"))
                   (builtin "One Step Simplification" (formula "47"))
                  (rule "notLeft" (formula "47"))
                  (rule "eqSymm" (formula "61"))
                  (rule "disjointDefinition" (formula "46"))
                   (builtin "One Step Simplification" (formula "46"))
                  (rule "notLeft" (formula "46"))
                  (rule "eqSymm" (formula "60"))
                  (rule "disjointDefinition" (formula "45"))
                   (builtin "One Step Simplification" (formula "45"))
                  (rule "notLeft" (formula "45"))
                  (rule "eqSymm" (formula "59"))
                  (rule "disjointDefinition" (formula "44"))
                   (builtin "One Step Simplification" (formula "44"))
                  (rule "notLeft" (formula "44"))
                  (rule "eqSymm" (formula "58"))
                  (rule "disjointDefinition" (formula "43"))
                   (builtin "One Step Simplification" (formula "43"))
                  (rule "notLeft" (formula "43"))
                  (rule "eqSymm" (formula "57"))
                  (rule "disjointDefinition" (formula "42"))
                   (builtin "One Step Simplification" (formula "42"))
                  (rule "notLeft" (formula "42"))
                  (rule "eqSymm" (formula "56"))
                  (rule "disjointDefinition" (formula "41"))
                   (builtin "One Step Simplification" (formula "41"))
                  (rule "notLeft" (formula "41"))
                  (rule "eqSymm" (formula "55"))
                  (rule "disjointDefinition" (formula "40"))
                   (builtin "One Step Simplification" (formula "40"))
                  (rule "notLeft" (formula "40"))
                  (rule "eqSymm" (formula "54"))
                  (rule "disjointDefinition" (formula "39"))
                   (builtin "One Step Simplification" (formula "39"))
                  (rule "notLeft" (formula "39"))
                  (rule "eqSymm" (formula "53"))
                  (rule "disjointDefinition" (formula "38"))
                   (builtin "One Step Simplification" (formula "38"))
                  (rule "notLeft" (formula "38"))
                  (rule "eqSymm" (formula "52"))
                  (rule "disjointDefinition" (formula "37"))
                   (builtin "One Step Simplification" (formula "37"))
                  (rule "notLeft" (formula "37"))
                  (rule "eqSymm" (formula "51"))
                  (rule "disjointDefinition" (formula "36"))
                   (builtin "One Step Simplification" (formula "36"))
                  (rule "notLeft" (formula "36"))
                  (rule "disjointDefinition" (formula "35"))
                   (builtin "One Step Simplification" (formula "35"))
                  (rule "notLeft" (formula "35"))
                  (rule "eqSymm" (formula "49"))
                  (rule "disjointDefinition" (formula "34"))
                   (builtin "One Step Simplification" (formula "34"))
                  (rule "notLeft" (formula "34"))
                  (rule "eqSymm" (formula "48"))
                  (rule "disjointDefinition" (formula "33"))
                   (builtin "One Step Simplification" (formula "33"))
                  (rule "notLeft" (formula "33"))
                  (rule "disjointDefinition" (formula "32"))
                   (builtin "One Step Simplification" (formula "32"))
                  (rule "notLeft" (formula "32"))
                  (rule "disjointDefinition" (formula "31"))
                   (builtin "One Step Simplification" (formula "31"))
                  (rule "notLeft" (formula "31"))
                  (rule "disjointDefinition" (formula "30"))
                   (builtin "One Step Simplification" (formula "30"))
                  (rule "notLeft" (formula "30"))
                  (rule "disjointDefinition" (formula "29"))
                   (builtin "One Step Simplification" (formula "29"))
                  (rule "notLeft" (formula "29"))
                  (rule "disjointDefinition" (formula "28"))
                   (builtin "One Step Simplification" (formula "28"))
                  (rule "notLeft" (formula "28"))
                  (rule "disjointDefinition" (formula "27"))
                   (builtin "One Step Simplification" (formula "27"))
                  (rule "notLeft" (formula "27"))
                  (rule "disjointDefinition" (formula "26"))
                   (builtin "One Step Simplification" (formula "26"))
                  (rule "notLeft" (formula "26"))
                  (rule "disjointDefinition" (formula "24"))
                   (builtin "One Step Simplification" (formula "24"))
                  (rule "notLeft" (formula "24"))
                  (rule "disjointDefinition" (formula "24"))
                   (builtin "One Step Simplification" (formula "24"))
                  (rule "notLeft" (formula "24"))
                  (rule "applyEq" (formula "24") (term "1,0") (ifseqformula "23"))
                  (rule "distributeIntersection" (formula "24") (term "0"))
                  (rule "distributeIntersection" (formula "24") (term "1,0"))
                  (rule "distributeIntersection" (formula "24") (term "0,0"))
                  (rule "distributeIntersection" (formula "24") (term "0,1,0"))
                  (rule "distributeIntersection" (formula "24") (term "1,1,0"))
                  (rule "distributeIntersection" (formula "24") (term "1,0,0"))
                  (rule "distributeIntersection" (formula "24") (term "0,0,0"))
                  (rule "unionEqualsEmpty" (formula "24"))
                  (rule "andLeft" (formula "24"))
                  (rule "unionEqualsEmpty" (formula "25"))
                  (rule "andLeft" (formula "25"))
                  (rule "unionEqualsEmpty" (formula "24"))
                  (rule "andLeft" (formula "24"))
                  (rule "unionEqualsEmpty" (formula "26"))
                   (builtin "One Step Simplification" (formula "26"))
                  (rule "andLeft" (formula "26"))
                  (rule "notLeft" (formula "26"))
                  (rule "notLeft" (formula "26"))
                  (rule "eqSymm" (formula "41"))
                  (rule "eqSymm" (formula "40"))
                  (rule "unionEqualsEmpty" (formula "26"))
                   (builtin "One Step Simplification" (formula "26"))
                  (rule "andLeft" (formula "26"))
                  (rule "notLeft" (formula "26"))
                  (rule "notLeft" (formula "26"))
                  (rule "eqSymm" (formula "40"))
                  (rule "eqSymm" (formula "39"))
                  (rule "unionEqualsEmpty" (formula "24"))
                   (builtin "One Step Simplification" (formula "24"))
                  (rule "andLeft" (formula "24"))
                  (rule "notLeft" (formula "25"))
                  (rule "notLeft" (formula "24"))
                  (rule "eqSymm" (formula "39"))
                  (rule "eqSymm" (formula "38"))
                  (rule "unionEqualsEmpty" (formula "24"))
                   (builtin "One Step Simplification" (formula "24"))
                  (rule "andLeft" (formula "24"))
                  (rule "notLeft" (formula "25"))
                  (rule "notLeft" (formula "24"))
                  (rule "eqSymm" (formula "38"))
                  (rule "eqSymm" (formula "37"))
                  (rule "commuteUnion" (formula "23") (term "0,0,1"))
                  (rule "commuteUnion" (formula "23") (term "1,1,1"))
                  (rule "commuteUnion" (formula "23") (term "0,1"))
                  (rule "Free_class_invariant_axiom_for_de_wiesler_SampleParameters" (formula "31"))
                  (rule "true_left" (formula "31"))
                  (rule "Definition_axiom_for_isValidForLen_in_de_wiesler_SampleParameters" (formula "29") (term "0"))
                   (builtin "One Step Simplification" (formula "29"))
                  (rule "andLeft" (formula "29"))
                  (rule "andLeft" (formula "29"))
                  (rule "andLeft" (formula "29"))
                  (rule "andLeft" (formula "30"))
                  (rule "andLeft" (formula "29"))
                  (rule "andLeft" (formula "29"))
                  (rule "andLeft" (formula "29"))
                  (rule "translateJavaSubInt" (formula "36") (term "0"))
                  (rule "translateJavaMod" (formula "35") (term "0"))
                  (rule "translateJavaDivInt" (formula "30") (term "1"))
                  (rule "translateJavaMulInt" (formula "36") (term "0,0"))
                  (rule "polySimp_elimSub" (formula "36") (term "0"))
                  (rule "mul_literals" (formula "36") (term "1,0"))
                  (rule "polySimp_addComm0" (formula "36") (term "0"))
                  (rule "inEqSimp_ltToLeq" (formula "31"))
                  (rule "polySimp_rightDist" (formula "31") (term "1,0,0"))
                  (rule "polySimp_mulAssoc" (formula "31") (term "0,1,0,0"))
                  (rule "polySimp_mulComm0" (formula "31") (term "0,0,1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "31") (term "0,1,0,0"))
                  (rule "polySimp_elimOne" (formula "31") (term "0,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "31") (term "0,0"))
                  (rule "inEqSimp_commuteLeq" (formula "33"))
                  (rule "inEqSimp_commuteLeq" (formula "32"))
                  (rule "inEqSimp_commuteLeq" (formula "29"))
                  (rule "inEqSimp_homoInEq0" (formula "36"))
                  (rule "polySimp_mulComm0" (formula "36") (term "1,0"))
                  (rule "polySimp_rightDist" (formula "36") (term "1,0"))
                  (rule "mul_literals" (formula "36") (term "0,1,0"))
                  (rule "polySimp_addAssoc" (formula "36") (term "0"))
                  (rule "polySimp_addComm0" (formula "36") (term "0,0"))
                  (rule "jmod_axiom" (formula "35") (term "0"))
                  (rule "polySimp_mulLiterals" (formula "35") (term "1,0"))
                  (rule "polySimp_sepNegMonomial" (formula "35"))
                  (rule "polySimp_mulLiterals" (formula "35") (term "0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "31"))
                  (rule "polySimp_mulComm0" (formula "31") (term "1"))
                  (rule "polySimp_rightDist" (formula "31") (term "1"))
                  (rule "polySimp_mulLiterals" (formula "31") (term "1,1"))
                  (rule "polySimp_elimOne" (formula "31") (term "1,1"))
                  (rule "polySimp_rightDist" (formula "31") (term "0,1"))
                  (rule "mul_literals" (formula "31") (term "0,0,1"))
                  (rule "inEqSimp_sepNegMonomial1" (formula "36"))
                  (rule "polySimp_mulLiterals" (formula "36") (term "0"))
                  (rule "polySimp_elimOne" (formula "36") (term "0"))
                  (rule "inEqSimp_subsumption1" (formula "83") (term "1,1") (ifseqformula "29"))
                  (rule "leq_literals" (formula "83") (term "0,1,1"))
                   (builtin "One Step Simplification" (formula "83"))
                  (rule "newSym_eq" (formula "35") (inst "l=l_0") (inst "newSymDef=mul(int::final(self_77,
               de.wiesler.SampleParameters::$num_buckets),
    Z(0(#)))"))
                  (rule "times_zero_1" (formula "35") (term "1,1"))
                  (rule "add_zero_right" (formula "35") (term "1"))
                  (rule "applyEq" (formula "36") (term "0,0") (ifseqformula "35"))
                  (rule "eqSymm" (formula "36"))
                  (rule "applyEq" (formula "35") (term "0,0") (ifseqformula "36"))
                  (rule "applyEq" (formula "37") (term "1,0") (ifseqformula "36"))
                  (rule "polySimp_mulAssoc" (formula "37") (term "0"))
                  (rule "applyEq" (formula "33") (term "0") (ifseqformula "36"))
                  (rule "applyEq" (formula "34") (term "0") (ifseqformula "36"))
                  (rule "inEqSimp_commuteLeq" (formula "34"))
                  (rule "elimGcdGeq_antec" (formula "33") (inst "elimGcdRightDiv=Z(1(#))") (inst "elimGcdLeftDiv=l_0") (inst "elimGcd=Z(2(#))"))
                  (rule "polySimp_mulLiterals" (formula "33") (term "1,0,1,0"))
                  (rule "mul_literals" (formula "33") (term "0,1,0,0,0,0,1,0"))
                  (rule "leq_literals" (formula "33") (term "0,0"))
                   (builtin "One Step Simplification" (formula "33"))
                  (rule "mul_literals" (formula "33") (term "1,0,0,0,0,0"))
                  (rule "add_literals" (formula "33") (term "0,0,0,0,0"))
                  (rule "add_zero_left" (formula "33") (term "0,0,0,0"))
                  (rule "polySimp_pullOutFactor0b" (formula "33") (term "0,0"))
                  (rule "add_literals" (formula "33") (term "1,1,0,0"))
                  (rule "times_zero_1" (formula "33") (term "1,0,0"))
                  (rule "add_zero_right" (formula "33") (term "0,0"))
                  (rule "leq_literals" (formula "33") (term "0"))
                   (builtin "One Step Simplification" (formula "33"))
                  (rule "inEqSimp_exactShadow3" (formula "29") (ifseqformula "31"))
                  (rule "mul_literals" (formula "29") (term "0,0"))
                  (rule "polySimp_addAssoc" (formula "29") (term "0"))
                  (rule "polySimp_addAssoc" (formula "29") (term "0,0"))
                  (rule "add_literals" (formula "29") (term "0,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "29"))
                  (rule "polySimp_mulComm0" (formula "29") (term "1"))
                  (rule "polySimp_rightDist" (formula "29") (term "1"))
                  (rule "polySimp_mulLiterals" (formula "29") (term "1,1"))
                  (rule "mul_literals" (formula "29") (term "0,1"))
                  (rule "polySimp_elimOne" (formula "29") (term "1,1"))
                  (rule "inEqSimp_subsumption1" (formula "29") (ifseqformula "13"))
                  (rule "inEqSimp_homoInEq0" (formula "29") (term "0"))
                  (rule "polySimp_mulComm0" (formula "29") (term "1,0,0"))
                  (rule "polySimp_rightDist" (formula "29") (term "1,0,0"))
                  (rule "mul_literals" (formula "29") (term "0,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "29") (term "0,0"))
                  (rule "polySimp_addComm1" (formula "29") (term "0,0,0"))
                  (rule "add_literals" (formula "29") (term "0,0,0,0"))
                  (rule "polySimp_pullOutFactor1b" (formula "29") (term "0,0"))
                  (rule "add_literals" (formula "29") (term "1,1,0,0"))
                  (rule "times_zero_1" (formula "29") (term "1,0,0"))
                  (rule "add_zero_right" (formula "29") (term "0,0"))
                  (rule "qeq_literals" (formula "29") (term "0"))
                   (builtin "One Step Simplification" (formula "29"))
                  (rule "true_left" (formula "29"))
                  (rule "inEqSimp_exactShadow3" (formula "29") (ifseqformula "30"))
                  (rule "mul_literals" (formula "29") (term "0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "29"))
                  (rule "mul_literals" (formula "29") (term "1"))
                  (rule "Class_invariant_axiom_for_de_wiesler_SampleParameters" (formula "40"))
                  (rule "true_left" (formula "40"))
                  (rule "Class_invariant_axiom_for_de_wiesler_Storage" (formula "6"))
                  (rule "andLeft" (formula "6"))
                  (rule "andLeft" (formula "6"))
                  (rule "notLeft" (formula "8"))
                  (rule "andLeft" (formula "6"))
                  (rule "notLeft" (formula "8"))
                  (rule "notLeft" (formula "7"))
                  (rule "andLeft" (formula "6"))
                  (rule "notLeft" (formula "7"))
                  (rule "andLeft" (formula "6"))
                  (rule "notLeft" (formula "7"))
                  (rule "andLeft" (formula "6"))
                  (rule "andLeft" (formula "6"))
                  (rule "notLeft" (formula "8"))
                  (rule "notLeft" (formula "6"))
                  (rule "notLeft" (formula "6"))
                  (rule "Definition_axiom_for_isInInt_in_de_wiesler_SampleParameters" (formula "38") (term "0"))
                   (builtin "One Step Simplification" (formula "38"))
                  (rule "expand_inInt" (formula "38") (term "1,0"))
                  (rule "expand_inInt" (formula "38") (term "1"))
                  (rule "expand_inInt" (formula "38") (term "0,0"))
                  (rule "replace_int_MIN" (formula "38") (term "0,1,1,0"))
                  (rule "replace_int_MAX" (formula "38") (term "1,0,1,0"))
                  (rule "replace_int_MIN" (formula "38") (term "0,1,1"))
                  (rule "replace_int_MAX" (formula "38") (term "1,0,1"))
                  (rule "replace_int_MIN" (formula "38") (term "0,1,0,0"))
                  (rule "replace_int_MAX" (formula "38") (term "1,0,0,0"))
                  (rule "andLeft" (formula "38"))
                  (rule "andLeft" (formula "38"))
                  (rule "andLeft" (formula "40"))
                  (rule "andLeft" (formula "39"))
                  (rule "andLeft" (formula "38"))
                  (rule "replace_known_left" (formula "96") (term "1") (ifseqformula "38"))
                   (builtin "One Step Simplification" (formula "96"))
                  (rule "wellFormedAnonEQ" (formula "96") (ifseqformula "24"))
                  (rule "replace_known_left" (formula "96") (term "1") (ifseqformula "23"))
                   (builtin "One Step Simplification" (formula "96") (ifInst ""  (formula "1")))
                  (rule "closeTrue" (formula "96"))
               )
            )
            (branch "Null Reference (parameters = null)"
               (rule "false_right" (formula "38"))
                (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "35")))
               (rule "closeFalse" (formula "1"))
            )
         )
      )
   )
   (branch "Exceptional Post (SampleParameters)"
       (builtin "One Step Simplification" (formula "21"))
       (builtin "One Step Simplification" (formula "18"))
      (rule "andLeft" (formula "18"))
      (rule "selectCreatedOfAnonAsFormulaEQ" (formula "19") (term "1,0,0") (ifseqformula "18"))
      (rule "selectCreatedOfAnonAsFormulaEQ" (formula "19") (term "1,1,0,0,1,0") (ifseqformula "18"))
      (rule "andLeft" (formula "19"))
      (rule "andLeft" (formula "19"))
      (rule "andLeft" (formula "21"))
      (rule "andLeft" (formula "20"))
      (rule "andLeft" (formula "19"))
      (rule "andLeft" (formula "22"))
      (rule "andLeft" (formula "21"))
      (rule "notLeft" (formula "19"))
      (rule "close" (formula "26") (ifseqformula "25"))
   )
   (branch "Pre (SampleParameters)"
       (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "1")))
      (rule "expand_inInt" (formula "19"))
      (rule "replace_int_MAX" (formula "19") (term "1,0"))
      (rule "replace_int_MIN" (formula "19") (term "0,1"))
      (rule "inEqSimp_ltToLeq" (formula "13"))
      (rule "polySimp_rightDist" (formula "13") (term "1,0,0"))
      (rule "polySimp_mulAssoc" (formula "13") (term "0,1,0,0"))
      (rule "polySimp_mulComm0" (formula "13") (term "0,0,1,0,0"))
      (rule "polySimp_mulLiterals" (formula "13") (term "0,1,0,0"))
      (rule "polySimp_elimOne" (formula "13") (term "0,1,0,0"))
      (rule "polySimp_addAssoc" (formula "13") (term "0,0"))
      (rule "polySimp_addComm1" (formula "13") (term "0"))
      (rule "polySimp_addComm1" (formula "13") (term "0,0"))
      (rule "add_literals" (formula "13") (term "0,0,0"))
      (rule "inEqSimp_homoInEq0" (formula "14"))
      (rule "polySimp_mulComm0" (formula "14") (term "1,0"))
      (rule "polySimp_rightDist" (formula "14") (term "1,0"))
      (rule "polySimp_mulAssoc" (formula "14") (term "0,1,0"))
      (rule "polySimp_mulComm0" (formula "14") (term "0,0,1,0"))
      (rule "polySimp_mulLiterals" (formula "14") (term "0,1,0"))
      (rule "polySimp_elimOne" (formula "14") (term "0,1,0"))
      (rule "polySimp_addAssoc" (formula "14") (term "0"))
      (rule "inEqSimp_homoInEq0" (formula "19") (term "0"))
      (rule "polySimp_mulComm0" (formula "19") (term "1,0,0"))
      (rule "polySimp_rightDist" (formula "19") (term "1,0,0"))
      (rule "polySimp_mulAssoc" (formula "19") (term "0,1,0,0"))
      (rule "polySimp_mulComm0" (formula "19") (term "0,0,1,0,0"))
      (rule "polySimp_mulLiterals" (formula "19") (term "0,1,0,0"))
      (rule "polySimp_elimOne" (formula "19") (term "0,1,0,0"))
      (rule "polySimp_addAssoc" (formula "19") (term "0,0"))
      (rule "inEqSimp_homoInEq0" (formula "19") (term "1"))
      (rule "mul_literals" (formula "19") (term "1,0,1"))
      (rule "polySimp_addComm1" (formula "19") (term "0,1"))
      (rule "polySimp_addComm0" (formula "19") (term "0,0,1"))
      (rule "inEqSimp_sepNegMonomial0" (formula "13"))
      (rule "polySimp_mulLiterals" (formula "13") (term "0"))
      (rule "polySimp_elimOne" (formula "13") (term "0"))
      (rule "inEqSimp_sepNegMonomial1" (formula "14"))
      (rule "polySimp_mulLiterals" (formula "14") (term "0"))
      (rule "polySimp_elimOne" (formula "14") (term "0"))
      (rule "inEqSimp_sepNegMonomial1" (formula "19") (term "0"))
      (rule "polySimp_mulLiterals" (formula "19") (term "0,0"))
      (rule "polySimp_elimOne" (formula "19") (term "0,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "19") (term "1"))
      (rule "polySimp_mulComm0" (formula "19") (term "1,1"))
      (rule "polySimp_rightDist" (formula "19") (term "1,1"))
      (rule "polySimp_mulLiterals" (formula "19") (term "1,1,1"))
      (rule "mul_literals" (formula "19") (term "0,1,1"))
      (rule "polySimp_elimOne" (formula "19") (term "1,1,1"))
      (rule "inEqSimp_subsumption1" (formula "19") (term "1") (ifseqformula "13"))
      (rule "inEqSimp_homoInEq0" (formula "19") (term "0,1"))
      (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,1"))
      (rule "polySimp_rightDist" (formula "19") (term "1,0,0,1"))
      (rule "mul_literals" (formula "19") (term "0,1,0,0,1"))
      (rule "polySimp_addAssoc" (formula "19") (term "0,0,1"))
      (rule "polySimp_addComm1" (formula "19") (term "0,0,0,1"))
      (rule "add_literals" (formula "19") (term "0,0,0,0,1"))
      (rule "polySimp_pullOutFactor1b" (formula "19") (term "0,0,1"))
      (rule "add_literals" (formula "19") (term "1,1,0,0,1"))
      (rule "times_zero_1" (formula "19") (term "1,0,0,1"))
      (rule "add_zero_right" (formula "19") (term "0,0,1"))
      (rule "qeq_literals" (formula "19") (term "0,1"))
       (builtin "One Step Simplification" (formula "19"))
      (rule "inEqSimp_leqRight" (formula "19"))
      (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
      (rule "mul_literals" (formula "1") (term "0,1,0,0"))
      (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
      (rule "add_literals" (formula "1") (term "0,0,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "1"))
      (rule "polySimp_mulComm0" (formula "1") (term "1"))
      (rule "polySimp_rightDist" (formula "1") (term "1"))
      (rule "mul_literals" (formula "1") (term "0,1"))
      (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
      (rule "polySimp_elimOne" (formula "1") (term "1,1"))
      (rule "inEqSimp_subsumption1" (formula "5") (ifseqformula "11"))
      (rule "leq_literals" (formula "5") (term "0"))
       (builtin "One Step Simplification" (formula "5"))
      (rule "true_left" (formula "5"))
      (rule "inEqSimp_subsumption1" (formula "11") (ifseqformula "13"))
      (rule "inEqSimp_homoInEq0" (formula "11") (term "0"))
      (rule "polySimp_pullOutFactor1b" (formula "11") (term "0,0"))
      (rule "add_literals" (formula "11") (term "1,1,0,0"))
      (rule "times_zero_1" (formula "11") (term "1,0,0"))
      (rule "add_zero_right" (formula "11") (term "0,0"))
      (rule "qeq_literals" (formula "11") (term "0"))
       (builtin "One Step Simplification" (formula "11"))
      (rule "true_left" (formula "11"))
      (rule "inEqSimp_subsumption1" (formula "12") (ifseqformula "1"))
      (rule "inEqSimp_homoInEq0" (formula "12") (term "0"))
      (rule "polySimp_mulComm0" (formula "12") (term "1,0,0"))
      (rule "polySimp_rightDist" (formula "12") (term "1,0,0"))
      (rule "mul_literals" (formula "12") (term "0,1,0,0"))
      (rule "polySimp_addAssoc" (formula "12") (term "0,0"))
      (rule "polySimp_addComm1" (formula "12") (term "0,0,0"))
      (rule "add_literals" (formula "12") (term "0,0,0,0"))
      (rule "polySimp_pullOutFactor1b" (formula "12") (term "0,0"))
      (rule "add_literals" (formula "12") (term "1,1,0,0"))
      (rule "times_zero_1" (formula "12") (term "1,0,0"))
      (rule "add_zero_right" (formula "12") (term "0,0"))
      (rule "qeq_literals" (formula "12") (term "0"))
       (builtin "One Step Simplification" (formula "12"))
      (rule "true_left" (formula "12"))
      (rule "inEqSimp_contradInEq1" (formula "12") (ifseqformula "1"))
      (rule "andLeft" (formula "12"))
      (rule "inEqSimp_homoInEq1" (formula "12"))
      (rule "polySimp_mulComm0" (formula "12") (term "1,0"))
      (rule "polySimp_rightDist" (formula "12") (term "1,0"))
      (rule "mul_literals" (formula "12") (term "0,1,0"))
      (rule "polySimp_addAssoc" (formula "12") (term "0"))
      (rule "polySimp_addComm1" (formula "12") (term "0,0"))
      (rule "add_literals" (formula "12") (term "0,0,0"))
      (rule "polySimp_pullOutFactor1b" (formula "12") (term "0"))
      (rule "add_literals" (formula "12") (term "1,1,0"))
      (rule "times_zero_1" (formula "12") (term "1,0"))
      (rule "add_zero_right" (formula "12") (term "0"))
      (rule "leq_literals" (formula "12"))
      (rule "closeFalse" (formula "12"))
   )
)
)
}
