\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Sun Jun 05 14:36:20 CEST 2022
[NewSMT]NoTypeHierarchy=false
[Labels]UseOriginLabels=true
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[NewSMT]Presburger=false
[SMTSettings]invariantForall=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[Choice]DefaultChoices=JavaCard-JavaCard\\:on , Strings-Strings\\:on , assertions-assertions\\:safe , bigint-bigint\\:on , finalFields-finalFields\\:immutable , floatRules-floatRules\\:strictfpOnly , initialisation-initialisation\\:disableStaticInitialisation , intRules-intRules\\:arithmeticSemanticsCheckingOF , integerSimplificationRules-integerSimplificationRules\\:full , javaLoopTreatment-javaLoopTreatment\\:efficient , mergeGenerateIsWeakeningGoal-mergeGenerateIsWeakeningGoal\\:off , methodExpansion-methodExpansion\\:modularOnly , modelFields-modelFields\\:treatAsAxiom , moreSeqRules-moreSeqRules\\:on , permissions-permissions\\:off , programRules-programRules\\:Java , reach-reach\\:on , runtimeExceptions-runtimeExceptions\\:ban , sequences-sequences\\:on , wdChecks-wdChecks\\:off , wdOperator-wdOperator\\:L
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_SCOPE_INV_TACLET
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_DEF_OPS
[SMTSettings]SelectedTaclets=
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[Strategy]MaximumNumberOfAutomaticApplications=10000
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_DELAYED
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]MPS_OPTIONS_KEY=MPS_MERGE
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[Strategy]Timeout=-1
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_OFF
[SMTSettings]useUninterpretedMultiplication=true
[NewSMT]sqrtSMTTranslation=SMT
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT_INTERNAL
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[NewSMT]identifier=OPEN
[SMTSettings]maxGenericSorts=2
[StrategyProperty]OSS_OPTIONS_KEY=OSS_ON
[NewSMT]Axiomatisations=false
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
[SMTSettings]integersMinimum=-2147483645
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]integersMaximum=2147483645
"
}

\javaSource "../../src";

\proofObligation "#Proof Obligation Settings
#Sun Jun 05 14:36:20 CEST 2022
contract=de.wiesler.BucketPointers[de.wiesler.BucketPointers\\:\\:decrement_read(int)].JML normal_behavior operation contract.0
name=de.wiesler.BucketPointers[de.wiesler.BucketPointers\\:\\:decrement_read(int)].JML normal_behavior operation contract.0
class=de.uka.ilkd.key.proof.init.FunctionalOperationContractPO
";

\proof {
(keyLog "0" (keyUser "Julian" ) (keyVersion "e1a85b31e7"))
(keyLog "1" (keyUser "Julian" ) (keyVersion "e1a85b31e7"))

(autoModeTime "13469")

(branch "dummy ID"
 (builtin "One Step Simplification" (formula "1") (newnames "heapAtPre,o,f"))
(rule "expand_inInt" (formula "1") (term "1,0,0,0"))
(rule "replace_int_MAX" (formula "1") (term "1,0,1,0,0,0"))
(rule "replace_int_MIN" (formula "1") (term "0,1,1,0,0,0"))
(rule "impRight" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "3"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "5"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "3"))
(rule "andLeft" (formula "7"))
(rule "andLeft" (formula "9"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "10"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "2"))
(rule "inEqSimp_commuteLeq" (formula "5"))
(rule "inEqSimp_commuteLeq" (formula "8"))
(rule "assignment" (formula "13") (term "1"))
 (builtin "One Step Simplification" (formula "13"))
(rule "methodBodyExpand" (formula "13") (term "1") (newnames "heapBefore_decrement_read,savedHeapBefore_decrement_read"))
 (builtin "One Step Simplification" (formula "13"))
(rule "variableDeclarationFinalAssign" (formula "13") (term "1"))
(rule "variableDeclarationFinal" (formula "13") (term "1") (newnames "read_pos"))
(rule "assignmentMultiplicationInt" (formula "13") (term "1"))
(branch "Overflow check"
    (builtin "One Step Simplification" (formula "13"))
   (rule "expand_inInt" (formula "13"))
   (rule "replace_int_MAX" (formula "13") (term "1,0"))
   (rule "replace_int_MIN" (formula "13") (term "0,1"))
   (rule "polySimp_mulComm0" (formula "13") (term "1,1"))
   (rule "polySimp_mulComm0" (formula "13") (term "0,0"))
   (rule "inEqSimp_ltToLeq" (formula "9"))
   (rule "polySimp_mulComm0" (formula "9") (term "1,0,0"))
   (rule "polySimp_addComm1" (formula "9") (term "0"))
   (rule "inEqSimp_commuteLeq" (formula "13") (term "1"))
   (rule "inEqSimp_sepNegMonomial0" (formula "9"))
   (rule "polySimp_mulLiterals" (formula "9") (term "0"))
   (rule "polySimp_elimOne" (formula "9") (term "0"))
   (rule "inEqSimp_subsumption1" (formula "5") (ifseqformula "8"))
   (rule "leq_literals" (formula "5") (term "0"))
    (builtin "One Step Simplification" (formula "5"))
   (rule "true_left" (formula "5"))
   (rule "inEqSimp_subsumption6" (formula "12") (term "1") (ifseqformula "7"))
   (rule "times_zero_1" (formula "12") (term "1,1,0,1"))
   (rule "greater_literals" (formula "12") (term "0,0,1"))
    (builtin "One Step Simplification" (formula "12"))
   (rule "leq_literals" (formula "12") (term "0,1"))
    (builtin "One Step Simplification" (formula "12"))
   (rule "inEqSimp_leqRight" (formula "12"))
   (rule "mul_literals" (formula "1") (term "1,0,0"))
   (rule "add_literals" (formula "1") (term "0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "1"))
   (rule "mul_literals" (formula "1") (term "1"))
   (rule "elimGcdGeq_antec" (formula "1") (inst "elimGcd=Z(2(#))") (inst "elimGcdLeftDiv=bucket") (inst "elimGcdRightDiv=Z(4(2(8(1(4(7(3(7(0(1(#)))))))))))"))
   (rule "leq_literals" (formula "1") (term "0,0"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "polySimp_mulLiterals" (formula "1") (term "1,0,0,0,0,0"))
   (rule "polySimp_mulLiterals" (formula "1") (term "1,0,0"))
   (rule "mul_literals" (formula "1") (term "1,0,0,0,0,0"))
   (rule "polySimp_addLiterals" (formula "1") (term "0,0,0,0"))
   (rule "add_zero_right" (formula "1") (term "0,0,0,0"))
   (rule "polySimp_pullOutFactor0b" (formula "1") (term "0,0"))
   (rule "add_literals" (formula "1") (term "1,1,0,0"))
   (rule "times_zero_1" (formula "1") (term "1,0,0"))
   (rule "add_zero_right" (formula "1") (term "0,0"))
   (rule "leq_literals" (formula "1") (term "0"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "inEqSimp_subsumption1" (formula "8") (ifseqformula "1"))
   (rule "leq_literals" (formula "8") (term "0"))
    (builtin "One Step Simplification" (formula "8"))
   (rule "true_left" (formula "8"))
   (rule "Free_class_invariant_axiom_for_de_wiesler_BucketPointers" (formula "9") (inst "b=b"))
    (builtin "One Step Simplification" (formula "9"))
   (rule "expand_inInt" (formula "9") (term "1,0,0,1"))
   (rule "replace_int_MAX" (formula "9") (term "1,0,1,0,0,1"))
   (rule "replace_int_MIN" (formula "9") (term "0,1,1,0,0,1"))
   (rule "andLeft" (formula "9"))
   (rule "andLeft" (formula "9"))
   (rule "andLeft" (formula "9"))
   (rule "andLeft" (formula "11"))
   (rule "andLeft" (formula "9"))
   (rule "andLeft" (formula "9"))
   (rule "andLeft" (formula "11"))
   (rule "andLeft" (formula "11"))
   (rule "andLeft" (formula "11"))
   (rule "translateJavaAddInt" (formula "15") (term "1"))
   (rule "translateJavaCastInt" (formula "16") (term "0"))
   (rule "translateJavaMulInt" (formula "10") (term "0"))
   (rule "translateJavaMulInt" (formula "9") (term "1"))
   (rule "translateJavaCastInt" (formula "13") (term "0"))
   (rule "translateJavaCastInt" (formula "12") (term "1"))
   (rule "polySimp_mulComm0" (formula "10") (term "0"))
   (rule "polySimp_mulComm0" (formula "9") (term "1"))
   (rule "polySimp_addComm0" (formula "15") (term "1"))
   (rule "castedGetAny" (formula "16") (term "0"))
   (rule "castedGetAny" (formula "13") (term "0"))
   (rule "castedGetAny" (formula "12") (term "1"))
   (rule "inEqSimp_ltToLeq" (formula "18") (term "1,0,0,0"))
   (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,1,0,0,0"))
   (rule "inEqSimp_commuteLeq" (formula "18") (term "1,1,0,0"))
   (rule "inEqSimp_commuteLeq" (formula "18") (term "0,0,0,0"))
   (rule "inEqSimp_commuteLeq" (formula "11"))
   (rule "inEqSimp_commuteLeq" (formula "9"))
   (rule "inEqSimp_commuteLeq" (formula "12"))
   (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "1,0,0,0"))
   (rule "polySimp_mulComm0" (formula "18") (term "1,1,0,0,0"))
   (rule "polySimp_rightDist" (formula "18") (term "1,1,0,0,0"))
   (rule "polySimp_mulLiterals" (formula "18") (term "1,1,1,0,0,0"))
   (rule "mul_literals" (formula "18") (term "0,1,1,0,0,0"))
   (rule "polySimp_elimOne" (formula "18") (term "1,1,1,0,0,0"))
   (rule "elimGcdGeq_antec" (formula "9") (inst "elimGcd=Z(2(#))") (inst "elimGcdLeftDiv=int::final(self,
           de.wiesler.BucketPointers::$num_buckets)") (inst "elimGcdRightDiv=Z(0(#))"))
   (rule "polySimp_mulLiterals" (formula "9") (term "1,0,1,0"))
   (rule "leq_literals" (formula "9") (term "0,0"))
    (builtin "One Step Simplification" (formula "9"))
   (rule "add_zero_right" (formula "9") (term "0,0,0,0"))
   (rule "times_zero_1" (formula "9") (term "1,0,0,0,0"))
   (rule "add_zero_right" (formula "9") (term "0,0,0,0"))
   (rule "polySimp_pullOutFactor0b" (formula "9") (term "0,0"))
   (rule "add_literals" (formula "9") (term "1,1,0,0"))
   (rule "times_zero_1" (formula "9") (term "1,0,0"))
   (rule "add_zero_right" (formula "9") (term "0,0"))
   (rule "leq_literals" (formula "9") (term "0"))
    (builtin "One Step Simplification" (formula "9"))
   (rule "inEqSimp_exactShadow2" (formula "8") (ifseqformula "10"))
   (rule "greater_literals" (formula "8") (term "0"))
    (builtin "One Step Simplification" (formula "8"))
   (rule "polySimp_rightDist" (formula "8") (term "1,0,0"))
   (rule "mul_literals" (formula "8") (term "0,1,0,0"))
   (rule "polySimp_rightDist" (formula "8") (term "0,0"))
   (rule "mul_literals" (formula "8") (term "0,0,0"))
   (rule "polySimp_mulLiterals" (formula "8") (term "1,0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "8"))
   (rule "polySimp_mulComm0" (formula "8") (term "1"))
   (rule "polySimp_rightDist" (formula "8") (term "1"))
   (rule "mul_literals" (formula "8") (term "0,1"))
   (rule "polySimp_mulLiterals" (formula "8") (term "1,1"))
   (rule "inEqSimp_exactShadow3" (formula "13") (ifseqformula "14"))
   (rule "polySimp_mulComm0" (formula "13") (term "0,0"))
   (rule "polySimp_addComm0" (formula "13") (term "0"))
   (rule "inEqSimp_sepNegMonomial1" (formula "13"))
   (rule "polySimp_mulLiterals" (formula "13") (term "0"))
   (rule "polySimp_elimOne" (formula "13") (term "0"))
   (rule "inEqSimp_exactShadow2" (formula "10") (ifseqformula "11"))
   (rule "greater_literals" (formula "10") (term "0"))
    (builtin "One Step Simplification" (formula "10"))
   (rule "mul_literals" (formula "10") (term "1,0,0"))
   (rule "times_zero_1" (formula "10") (term "0,0"))
   (rule "add_zero_left" (formula "10") (term "0"))
   (rule "nnf_imp2or" (formula "21") (term "0"))
   (rule "nnf_notAnd" (formula "21") (term "0,0"))
   (rule "nnf_notAnd" (formula "21") (term "1,0,0"))
   (rule "inEqSimp_notLeq" (formula "21") (term "0,1,0,0"))
   (rule "mul_literals" (formula "21") (term "1,0,0,0,1,0,0"))
   (rule "add_literals" (formula "21") (term "0,0,0,1,0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "21") (term "0,1,0,0"))
   (rule "mul_literals" (formula "21") (term "1,0,1,0,0"))
   (rule "inEqSimp_notGeq" (formula "21") (term "1,1,0,0"))
   (rule "mul_literals" (formula "21") (term "1,0,0,1,1,0,0"))
   (rule "add_literals" (formula "21") (term "0,0,1,1,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "1,1,0,0"))
   (rule "mul_literals" (formula "21") (term "1,1,1,0,0"))
   (rule "nnf_notAnd" (formula "21") (term "0,0,0"))
   (rule "inEqSimp_notLeq" (formula "21") (term "1,0,0,0"))
   (rule "polySimp_rightDist" (formula "21") (term "1,0,0,1,0,0,0"))
   (rule "mul_literals" (formula "21") (term "0,1,0,0,1,0,0,0"))
   (rule "polySimp_addAssoc" (formula "21") (term "0,0,1,0,0,0"))
   (rule "add_literals" (formula "21") (term "0,0,0,1,0,0,0"))
   (rule "add_zero_left" (formula "21") (term "0,0,1,0,0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "21") (term "1,0,0,0"))
   (rule "polySimp_mulLiterals" (formula "21") (term "1,1,0,0,0"))
   (rule "polySimp_elimOne" (formula "21") (term "1,1,0,0,0"))
   (rule "inEqSimp_notGeq" (formula "21") (term "0,0,0,0"))
   (rule "times_zero_1" (formula "21") (term "1,0,0,0,0,0,0"))
   (rule "add_literals" (formula "21") (term "0,0,0,0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "0,0,0,0"))
   (rule "mul_literals" (formula "21") (term "1,0,0,0,0"))
   (rule "Contract_axiom_for_toReadCountOfBucket_in_BucketPointers" (formula "23") (term "0"))
   (rule "replace_known_left" (formula "1") (term "1,0,0,0,0") (ifseqformula "8"))
    (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "3")) (ifInst ""  (formula "4")) (ifInst ""  (formula "23")) (ifInst ""  (formula "8")))
   (rule "inEqSimp_ltToLeq" (formula "1") (term "1,0"))
   (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,1,0"))
   (rule "polySimp_addComm1" (formula "1") (term "0,1,0"))
   (rule "inEqSimp_commuteLeq" (formula "1") (term "0,0"))
   (rule "inEqSimp_sepNegMonomial0" (formula "1") (term "1,0"))
   (rule "polySimp_mulLiterals" (formula "1") (term "0,1,0"))
   (rule "polySimp_elimOne" (formula "1") (term "0,1,0"))
   (rule "replace_known_left" (formula "1") (term "1,0") (ifseqformula "10"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "inEqSimp_subsumption1" (formula "1") (term "0") (ifseqformula "2"))
   (rule "leq_literals" (formula "1") (term "0,0"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "andLeft" (formula "1"))
   (rule "andLeft" (formula "2"))
   (rule "inEqSimp_strengthen1" (formula "1") (ifseqformula "26"))
   (rule "add_zero_right" (formula "1") (term "1"))
   (rule "inEqSimp_contradEq7" (formula "26") (ifseqformula "1"))
   (rule "times_zero_1" (formula "26") (term "1,0,0"))
   (rule "add_zero_right" (formula "26") (term "0,0"))
   (rule "leq_literals" (formula "26") (term "0"))
    (builtin "One Step Simplification" (formula "26"))
   (rule "false_right" (formula "26"))
   (rule "Class_invariant_axiom_for_de_wiesler_BucketPointers" (formula "10"))
   (rule "notLeft" (formula "10"))
   (rule "Definition_axiom_for_isSortedSeqTransitive_in_de_wiesler_Functions" (formula "22") (term "0") (inst "j=j") (inst "i=i"))
    (builtin "One Step Simplification" (formula "22"))
   (rule "expand_inInt" (formula "22") (term "1,0,0,1,0"))
   (rule "expand_inInt" (formula "22") (term "1,0,0"))
   (rule "replace_int_MIN" (formula "22") (term "0,1,1,0,0,1,0"))
   (rule "replace_int_MAX" (formula "22") (term "1,0,1,0,0,1,0"))
   (rule "replace_int_MAX" (formula "22") (term "1,0,1,0,0"))
   (rule "replace_int_MIN" (formula "22") (term "0,1,1,0,0"))
   (rule "translateJavaCastInt" (formula "22") (term "0,1,0,1,0"))
   (rule "translateJavaCastInt" (formula "22") (term "1,1,0,1,0"))
   (rule "castedGetAny" (formula "22") (term "0,1,0,1,0"))
   (rule "castedGetAny" (formula "22") (term "1,1,0,1,0"))
   (rule "inEqSimp_ltToLeq" (formula "22") (term "1,0,0,0,1,0"))
   (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,1,0,0,0,1,0"))
   (rule "inEqSimp_ltToLeq" (formula "22") (term "1,0,0,0"))
   (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,1,0,0,0"))
   (rule "inEqSimp_commuteLeq" (formula "22") (term "0,0,0,0"))
   (rule "inEqSimp_commuteLeq" (formula "22") (term "0,0,0,0,1,0"))
   (rule "inEqSimp_commuteLeq" (formula "22") (term "1,1,0,0,1,0"))
   (rule "inEqSimp_commuteLeq" (formula "22") (term "1,1,0,0"))
   (rule "inEqSimp_commuteLeq" (formula "22") (term "1,0,1,0"))
   (rule "applyEq" (formula "22") (term "0,1,0,0,1,0,0,0,1,0") (ifseqformula "20"))
   (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,1,0,0,0,1,0"))
   (rule "polySimp_rightDist" (formula "22") (term "1,0,0,1,0,0,0,1,0"))
   (rule "mul_literals" (formula "22") (term "0,1,0,0,1,0,0,0,1,0"))
   (rule "polySimp_addAssoc" (formula "22") (term "0,0,1,0,0,0,1,0"))
   (rule "add_literals" (formula "22") (term "0,0,0,1,0,0,0,1,0"))
   (rule "add_zero_left" (formula "22") (term "0,0,1,0,0,0,1,0"))
   (rule "applyEq" (formula "22") (term "0,1,0,0,1,0,0,0") (ifseqformula "20"))
   (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,1,0,0,0"))
   (rule "polySimp_rightDist" (formula "22") (term "1,0,0,1,0,0,0"))
   (rule "mul_literals" (formula "22") (term "0,1,0,0,1,0,0,0"))
   (rule "polySimp_addAssoc" (formula "22") (term "0,0,1,0,0,0"))
   (rule "add_literals" (formula "22") (term "0,0,0,1,0,0,0"))
   (rule "add_zero_left" (formula "22") (term "0,0,1,0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "1,0,0,0,1,0"))
   (rule "polySimp_mulLiterals" (formula "22") (term "1,1,0,0,0,1,0"))
   (rule "polySimp_elimOne" (formula "22") (term "1,1,0,0,0,1,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "1,0,0,0"))
   (rule "polySimp_mulLiterals" (formula "22") (term "1,1,0,0,0"))
   (rule "polySimp_elimOne" (formula "22") (term "1,1,0,0,0"))
   (rule "nnf_imp2or" (formula "22") (term "0"))
   (rule "nnf_notAnd" (formula "22") (term "0,0"))
   (rule "nnf_imp2or" (formula "22") (term "0,1,0"))
   (rule "nnf_notAnd" (formula "22") (term "1,0,0"))
   (rule "inEqSimp_notLeq" (formula "22") (term "0,1,0,0"))
   (rule "mul_literals" (formula "22") (term "1,0,0,0,1,0,0"))
   (rule "add_literals" (formula "22") (term "0,0,0,1,0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "22") (term "0,1,0,0"))
   (rule "mul_literals" (formula "22") (term "1,0,1,0,0"))
   (rule "inEqSimp_notGeq" (formula "22") (term "1,1,0,0"))
   (rule "mul_literals" (formula "22") (term "1,0,0,1,1,0,0"))
   (rule "add_literals" (formula "22") (term "0,0,1,1,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "1,1,0,0"))
   (rule "mul_literals" (formula "22") (term "1,1,1,0,0"))
   (rule "nnf_notAnd" (formula "22") (term "0,0,0"))
   (rule "inEqSimp_notGeq" (formula "22") (term "0,0,0,0"))
   (rule "times_zero_1" (formula "22") (term "1,0,0,0,0,0,0"))
   (rule "add_zero_right" (formula "22") (term "0,0,0,0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "0,0,0,0"))
   (rule "mul_literals" (formula "22") (term "1,0,0,0,0"))
   (rule "inEqSimp_notLeq" (formula "22") (term "1,0,0,0"))
   (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,1,0,0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "22") (term "1,0,0,0"))
   (rule "polySimp_mulComm0" (formula "22") (term "1,1,0,0,0"))
   (rule "polySimp_rightDist" (formula "22") (term "1,1,0,0,0"))
   (rule "mul_literals" (formula "22") (term "0,1,1,0,0,0"))
   (rule "polySimp_mulLiterals" (formula "22") (term "1,1,1,0,0,0"))
   (rule "polySimp_elimOne" (formula "22") (term "1,1,1,0,0,0"))
   (rule "nnf_notAnd" (formula "22") (term "0,0,1,0"))
   (rule "nnf_notAnd" (formula "22") (term "1,0,0,1,0"))
   (rule "inEqSimp_notLeq" (formula "22") (term "0,1,0,0,1,0"))
   (rule "mul_literals" (formula "22") (term "1,0,0,0,1,0,0,1,0"))
   (rule "add_literals" (formula "22") (term "0,0,0,1,0,0,1,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "22") (term "0,1,0,0,1,0"))
   (rule "mul_literals" (formula "22") (term "1,0,1,0,0,1,0"))
   (rule "inEqSimp_notGeq" (formula "22") (term "1,1,0,0,1,0"))
   (rule "mul_literals" (formula "22") (term "1,0,0,1,1,0,0,1,0"))
   (rule "add_literals" (formula "22") (term "0,0,1,1,0,0,1,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "1,1,0,0,1,0"))
   (rule "mul_literals" (formula "22") (term "1,1,1,0,0,1,0"))
   (rule "nnf_notAnd" (formula "22") (term "0,0,0,1,0"))
   (rule "inEqSimp_notLeq" (formula "22") (term "1,0,0,0,1,0"))
   (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,1,0,0,0,1,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "22") (term "1,0,0,0,1,0"))
   (rule "polySimp_mulComm0" (formula "22") (term "1,1,0,0,0,1,0"))
   (rule "polySimp_rightDist" (formula "22") (term "1,1,0,0,0,1,0"))
   (rule "mul_literals" (formula "22") (term "0,1,1,0,0,0,1,0"))
   (rule "polySimp_mulLiterals" (formula "22") (term "1,1,1,0,0,0,1,0"))
   (rule "polySimp_elimOne" (formula "22") (term "1,1,1,0,0,0,1,0"))
   (rule "inEqSimp_notGeq" (formula "22") (term "0,0,0,0,1,0"))
   (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,0,0,0,0,1,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "0,0,0,0,1,0"))
   (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,0,0,1,0"))
   (rule "polySimp_rightDist" (formula "22") (term "1,0,0,0,0,1,0"))
   (rule "polySimp_mulLiterals" (formula "22") (term "1,1,0,0,0,0,1,0"))
   (rule "mul_literals" (formula "22") (term "0,1,0,0,0,0,1,0"))
   (rule "polySimp_elimOne" (formula "22") (term "1,1,0,0,0,0,1,0"))
   (rule "Definition_axiom_for_isBlockAligned_in_de_wiesler_Buffers" (formula "19") (term "0"))
    (builtin "One Step Simplification" (formula "19"))
   (rule "translateJavaMod" (formula "19") (term "0"))
   (rule "jmod_axiom" (formula "19") (term "0"))
   (rule "polySimp_mulLiterals" (formula "19") (term "1,0"))
   (rule "polySimp_sepNegMonomial" (formula "19"))
   (rule "polySimp_mulLiterals" (formula "19") (term "0"))
   (rule "newSym_eq" (formula "19") (inst "newSymDef=mul(int::final(self,
               de.wiesler.BucketPointers::$first_empty_position),
    Z(0(#)))") (inst "l=l_0"))
   (rule "times_zero_1" (formula "19") (term "1,1"))
   (rule "add_zero_right" (formula "19") (term "1"))
   (rule "applyEq" (formula "20") (term "0,0") (ifseqformula "19"))
   (rule "eqSymm" (formula "20"))
   (rule "applyEq" (formula "17") (term "1") (ifseqformula "20"))
   (rule "applyEq" (formula "16") (term "0") (ifseqformula "20"))
   (rule "applyEq" (formula "15") (term "0") (ifseqformula "20"))
   (rule "applyEq" (formula "19") (term "0,0") (ifseqformula "20"))
   (rule "elimGcdGeq_antec" (formula "15") (inst "elimGcd=Z(6(5(2(#))))") (inst "elimGcdLeftDiv=l_0") (inst "elimGcdRightDiv=Z(0(#))"))
   (rule "polySimp_mulLiterals" (formula "15") (term "1,0,1,0"))
   (rule "times_zero_1" (formula "15") (term "1,0,0,0,0,1,0"))
   (rule "leq_literals" (formula "15") (term "0,0"))
    (builtin "One Step Simplification" (formula "15"))
   (rule "add_zero_right" (formula "15") (term "0,0,0,0,0"))
   (rule "add_zero_right" (formula "15") (term "0,0,0,0"))
   (rule "polySimp_pullOutFactor0b" (formula "15") (term "0,0"))
   (rule "add_literals" (formula "15") (term "1,1,0,0"))
   (rule "times_zero_1" (formula "15") (term "1,0,0"))
   (rule "add_zero_right" (formula "15") (term "0,0"))
   (rule "leq_literals" (formula "15") (term "0"))
    (builtin "One Step Simplification" (formula "15"))
   (rule "elimGcdLeq_antec" (formula "16") (inst "elimGcd=Z(6(5(2(#))))") (inst "elimGcdLeftDiv=l_0") (inst "elimGcdRightDiv=Z(7(0(6(8(8(3(8(#))))))))"))
   (rule "mul_literals" (formula "16") (term "0,1,0,0,0,0,1,0"))
   (rule "leq_literals" (formula "16") (term "0,0"))
    (builtin "One Step Simplification" (formula "16"))
   (rule "polySimp_mulLiterals" (formula "16") (term "1,0,0"))
   (rule "neg_literal" (formula "16") (term "0,0,0,0,0,0"))
   (rule "mul_literals" (formula "16") (term "1,0,0,0,0,0"))
   (rule "polySimp_addLiterals" (formula "16") (term "0,0,0,0"))
   (rule "add_zero_right" (formula "16") (term "0,0,0,0"))
   (rule "polySimp_pullOutFactor0b" (formula "16") (term "0,0"))
   (rule "add_literals" (formula "16") (term "1,1,0,0"))
   (rule "times_zero_1" (formula "16") (term "1,0,0"))
   (rule "add_zero_right" (formula "16") (term "0,0"))
   (rule "qeq_literals" (formula "16") (term "0"))
    (builtin "One Step Simplification" (formula "16"))
   (rule "inEqSimp_exactShadow3" (formula "17") (ifseqformula "18"))
   (rule "polySimp_mulAssoc" (formula "17") (term "0,0"))
   (rule "polySimp_mulComm0" (formula "17") (term "0,0,0"))
   (rule "polySimp_mulLiterals" (formula "17") (term "0,0"))
   (rule "polySimp_addComm0" (formula "17") (term "0"))
   (rule "inEqSimp_sepNegMonomial1" (formula "17"))
   (rule "polySimp_mulLiterals" (formula "17") (term "0"))
   (rule "inEqSimp_subsumption4" (formula "17") (ifseqformula "16"))
   (rule "mul_literals" (formula "17") (term "0,1,0"))
   (rule "greater_literals" (formula "17") (term "0,0"))
    (builtin "One Step Simplification" (formula "17"))
   (rule "leq_literals" (formula "17") (term "0"))
    (builtin "One Step Simplification" (formula "17"))
   (rule "true_left" (formula "17"))
   (rule "Definition_axiom_for_toReadCountOfBucket_in_de_wiesler_BucketPointers" (formula "2") (term "0,0"))
   (rule "translateJavaSubInt" (formula "2") (term "1,0,0"))
   (rule "polySimp_elimSub" (formula "2") (term "1,0,0"))
   (rule "inEqSimp_ltToLeq" (formula "2") (term "0,0,0"))
   (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "2") (term "0,0,0"))
   (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,0"))
   (rule "polySimp_rightDist" (formula "2") (term "1,0,0,0"))
   (rule "mul_literals" (formula "2") (term "0,1,0,0,0"))
   (rule "polySimp_mulLiterals" (formula "2") (term "1,1,0,0,0"))
   (rule "polySimp_elimOne" (formula "2") (term "1,1,0,0,0"))
   (rule "Free_class_invariant_axiom_for_de_wiesler_BucketPointers" (formula "3") (inst "b=b"))
    (builtin "One Step Simplification" (formula "3"))
   (rule "expand_inInt" (formula "3") (term "1,0,0,1"))
   (rule "replace_int_MIN" (formula "3") (term "0,1,1,0,0,1"))
   (rule "replace_int_MAX" (formula "3") (term "1,0,1,0,0,1"))
   (rule "andLeft" (formula "3"))
   (rule "andLeft" (formula "3"))
   (rule "andLeft" (formula "3"))
   (rule "andLeft" (formula "5"))
   (rule "andLeft" (formula "3"))
   (rule "andLeft" (formula "3"))
   (rule "andLeft" (formula "5"))
   (rule "andLeft" (formula "5"))
   (rule "andLeft" (formula "5"))
   (rule "translateJavaAddInt" (formula "9") (term "1"))
   (rule "translateJavaCastInt" (formula "10") (term "0"))
   (rule "translateJavaMulInt" (formula "3") (term "1"))
   (rule "translateJavaMulInt" (formula "4") (term "0"))
   (rule "translateJavaCastInt" (formula "7") (term "0"))
   (rule "translateJavaCastInt" (formula "6") (term "1"))
   (rule "polySimp_mulComm0" (formula "3") (term "1"))
   (rule "polySimp_mulComm0" (formula "4") (term "0"))
   (rule "polySimp_addComm0" (formula "8") (term "1"))
   (rule "castedGetAny" (formula "8") (term "0"))
   (rule "castedGetAny" (formula "6") (term "0"))
   (rule "castedGetAny" (formula "5") (term "1"))
   (rule "inEqSimp_ltToLeq" (formula "8") (term "1,0,0,0"))
   (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,1,0,0,0"))
   (rule "inEqSimp_commuteLeq" (formula "8") (term "1,1,0,0"))
   (rule "inEqSimp_commuteLeq" (formula "8") (term "0,0,0,0"))
   (rule "inEqSimp_commuteLeq" (formula "4"))
   (rule "inEqSimp_commuteLeq" (formula "3"))
   (rule "inEqSimp_commuteLeq" (formula "5"))
   (rule "applyEq" (formula "6") (term "0,0") (ifseqformula "25"))
   (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "1,0,0,0"))
   (rule "polySimp_mulComm0" (formula "8") (term "1,1,0,0,0"))
   (rule "polySimp_rightDist" (formula "8") (term "1,1,0,0,0"))
   (rule "mul_literals" (formula "8") (term "0,1,1,0,0,0"))
   (rule "polySimp_mulLiterals" (formula "8") (term "1,1,1,0,0,0"))
   (rule "polySimp_elimOne" (formula "8") (term "1,1,1,0,0,0"))
   (rule "inEqSimp_subsumption6" (formula "3") (ifseqformula "18"))
   (rule "greater_literals" (formula "3") (term "0,0"))
    (builtin "One Step Simplification" (formula "3"))
   (rule "times_zero_1" (formula "3") (term "1,0"))
   (rule "leq_literals" (formula "3") (term "0"))
    (builtin "One Step Simplification" (formula "3"))
   (rule "true_left" (formula "3"))
   (rule "applyEq" (formula "3") (term "0") (ifseqformula "24"))
   (rule "applyEq" (formula "4") (term "1") (ifseqformula "24"))
   (rule "inEqSimp_subsumption6" (formula "3") (ifseqformula "18"))
   (rule "times_zero_1" (formula "3") (term "1,1,0"))
   (rule "greater_literals" (formula "3") (term "0,0"))
    (builtin "One Step Simplification" (formula "3"))
   (rule "leq_literals" (formula "3") (term "0"))
    (builtin "One Step Simplification" (formula "3"))
   (rule "true_left" (formula "3"))
   (rule "nnf_imp2or" (formula "5") (term "0"))
   (rule "nnf_notAnd" (formula "5") (term "0,0"))
   (rule "nnf_notAnd" (formula "5") (term "0,0,0"))
   (rule "inEqSimp_notGeq" (formula "5") (term "0,0,0,0"))
   (rule "times_zero_1" (formula "5") (term "1,0,0,0,0,0,0"))
   (rule "add_zero_right" (formula "5") (term "0,0,0,0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "5") (term "0,0,0,0"))
   (rule "mul_literals" (formula "5") (term "1,0,0,0,0"))
   (rule "inEqSimp_notLeq" (formula "5") (term "1,0,0,0"))
   (rule "polySimp_rightDist" (formula "5") (term "1,0,0,1,0,0,0"))
   (rule "mul_literals" (formula "5") (term "0,1,0,0,1,0,0,0"))
   (rule "polySimp_addAssoc" (formula "5") (term "0,0,1,0,0,0"))
   (rule "add_literals" (formula "5") (term "0,0,0,1,0,0,0"))
   (rule "add_zero_left" (formula "5") (term "0,0,1,0,0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "5") (term "1,0,0,0"))
   (rule "polySimp_mulLiterals" (formula "5") (term "1,1,0,0,0"))
   (rule "polySimp_elimOne" (formula "5") (term "1,1,0,0,0"))
   (rule "nnf_notAnd" (formula "5") (term "1,0,0"))
   (rule "inEqSimp_notLeq" (formula "5") (term "0,1,0,0"))
   (rule "mul_literals" (formula "5") (term "1,0,0,0,1,0,0"))
   (rule "add_literals" (formula "5") (term "0,0,0,1,0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "5") (term "0,1,0,0"))
   (rule "mul_literals" (formula "5") (term "1,0,1,0,0"))
   (rule "inEqSimp_notGeq" (formula "5") (term "1,1,0,0"))
   (rule "mul_literals" (formula "5") (term "1,0,0,1,1,0,0"))
   (rule "add_literals" (formula "5") (term "0,0,1,1,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "5") (term "1,1,0,0"))
   (rule "mul_literals" (formula "5") (term "1,1,1,0,0"))
   (rule "Contract_axiom_for_toReadCountOfBucket_in_BucketPointers" (formula "1") (term "0"))
   (rule "replace_known_left" (formula "1") (term "1,0,0,0") (ifseqformula "7"))
    (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "8")) (ifInst ""  (formula "28")))
   (rule "inEqSimp_ltToLeq" (formula "1") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,1,0,0"))
   (rule "polySimp_addComm1" (formula "1") (term "0,1,0,0"))
   (rule "inEqSimp_commuteLeq" (formula "1") (term "0,0,0"))
   (rule "inEqSimp_sepNegMonomial0" (formula "1") (term "1,0,0"))
   (rule "polySimp_mulLiterals" (formula "1") (term "0,1,0,0"))
   (rule "polySimp_elimOne" (formula "1") (term "0,1,0,0"))
   (rule "replace_known_left" (formula "1") (term "1,0,0") (ifseqformula "13"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "inEqSimp_subsumption1" (formula "1") (term "0,1,1") (ifseqformula "2"))
   (rule "leq_literals" (formula "1") (term "0,0,1,1"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "inEqSimp_subsumption1" (formula "1") (term "0,0") (ifseqformula "6"))
   (rule "leq_literals" (formula "1") (term "0,0,0"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "Definition_axiom_for_toReadCountOfBucket_in_de_wiesler_BucketPointers" (formula "2") (term "0"))
   (rule "translateJavaSubInt" (formula "2") (term "1,0"))
   (rule "polySimp_elimSub" (formula "2") (term "1,0"))
   (rule "inEqSimp_ltToLeq" (formula "2") (term "0,0"))
   (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "2") (term "0,0"))
   (rule "polySimp_mulComm0" (formula "2") (term "1,0,0"))
   (rule "polySimp_rightDist" (formula "2") (term "1,0,0"))
   (rule "mul_literals" (formula "2") (term "0,1,0,0"))
   (rule "polySimp_mulLiterals" (formula "2") (term "1,1,0,0"))
   (rule "polySimp_elimOne" (formula "2") (term "1,1,0,0"))
   (rule "Definition_axiom_for_nextWriteOf_in_de_wiesler_BucketPointers" (formula "3") (term "0,1,1,0,0"))
   (rule "translateJavaAddInt" (formula "3") (term "0,2,0,1,1,0,0"))
   (rule "translateJavaMulInt" (formula "3") (term "0,0,2,0,1,1,0,0"))
   (rule "polySimp_mulComm0" (formula "3") (term "0,0,2,0,1,1,0,0"))
   (rule "polySimp_addComm0" (formula "3") (term "0,2,0,1,1,0,0"))
   (rule "Definition_axiom_for_lastReadOf_in_de_wiesler_BucketPointers" (formula "3") (term "0,1,0,0"))
   (rule "translateJavaMulInt" (formula "3") (term "0,2,0,1,0,0"))
   (rule "polySimp_mulComm0" (formula "3") (term "0,2,0,1,0,0"))
   (rule "Definition_axiom_for_nextWriteOf_in_de_wiesler_BucketPointers" (formula "3") (term "0,0,0,0"))
   (rule "translateJavaMulInt" (formula "3") (term "0,0,2,0,0,0,0"))
   (rule "translateJavaAddInt" (formula "3") (term "0,2,0,0,0,0"))
   (rule "polySimp_mulComm0" (formula "3") (term "0,0,2,0,0,0,0"))
   (rule "polySimp_addComm0" (formula "3") (term "0,2,0,0,0,0"))
   (rule "Contract_axiom_for_lastReadOf_in_BucketPointers" (formula "3") (term "1,1,0,0,0"))
   (rule "translateJavaAddInt" (formula "3") (term "1,0,1,0,1,1"))
   (rule "translateJavaAddInt" (formula "3") (term "1,1,1,0,0,1,1"))
   (rule "replace_known_left" (formula "3") (term "1,0,0,0") (ifseqformula "8"))
    (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "9")) (ifInst ""  (formula "29")))
   (rule "polySimp_addComm0" (formula "3") (term "1,1,1,0,0,1,1"))
   (rule "polySimp_addComm0" (formula "3") (term "1,0,1,0,1,1"))
   (rule "inEqSimp_ltToLeq" (formula "3") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "3") (term "1,0,0,1,0,0"))
   (rule "polySimp_addComm1" (formula "3") (term "0,1,0,0"))
   (rule "inEqSimp_commuteLeq" (formula "3") (term "0,0,0"))
   (rule "inEqSimp_commuteLeq" (formula "3") (term "0,0,1,1,1"))
   (rule "inEqSimp_commuteLeq" (formula "3") (term "1,0,0,0,1,1"))
   (rule "inEqSimp_commuteLeq" (formula "3") (term "0,0,0,0,1,1"))
   (rule "inEqSimp_commuteLeq" (formula "3") (term "0,1,1,1,1"))
   (rule "inEqSimp_commuteLeq" (formula "3") (term "1,0,1,1"))
   (rule "applyEq" (formula "3") (term "0,0,0,1,1,1") (ifseqformula "23"))
   (rule "inEqSimp_commuteGeq" (formula "3") (term "0,0,1,1,1"))
   (rule "applyEq" (formula "3") (term "1,0,1,1,1,1") (ifseqformula "23"))
   (rule "inEqSimp_sepNegMonomial0" (formula "3") (term "1,0,0"))
   (rule "polySimp_mulLiterals" (formula "3") (term "0,1,0,0"))
   (rule "polySimp_elimOne" (formula "3") (term "0,1,0,0"))
   (rule "replace_known_left" (formula "3") (term "1,0,0") (ifseqformula "14"))
    (builtin "One Step Simplification" (formula "3"))
   (rule "inEqSimp_subsumption1" (formula "3") (term "0,0") (ifseqformula "7"))
   (rule "leq_literals" (formula "3") (term "0,0,0"))
    (builtin "One Step Simplification" (formula "3"))
   (rule "Definition_axiom_for_lastReadOf_in_de_wiesler_BucketPointers" (formula "4") (term "1,1,0,0,0"))
   (rule "translateJavaMulInt" (formula "4") (term "0,2,1,1,0,0,0"))
   (rule "polySimp_mulComm0" (formula "4") (term "0,2,1,1,0,0,0"))
   (rule "Definition_axiom_for_isSortedSeqTransitive_in_de_wiesler_Functions" (formula "6") (term "0") (inst "i=i") (inst "j=j"))
    (builtin "One Step Simplification" (formula "6"))
   (rule "expand_inInt" (formula "6") (term "1,0,0,1,0"))
   (rule "expand_inInt" (formula "6") (term "1,0,0"))
   (rule "replace_int_MIN" (formula "6") (term "0,1,1,0,0,1,0"))
   (rule "replace_int_MAX" (formula "6") (term "1,0,1,0,0,1,0"))
   (rule "replace_int_MAX" (formula "6") (term "1,0,1,0,0"))
   (rule "replace_int_MIN" (formula "6") (term "0,1,1,0,0"))
   (rule "translateJavaCastInt" (formula "6") (term "0,1,0,1,0"))
   (rule "translateJavaCastInt" (formula "6") (term "1,1,0,1,0"))
   (rule "castedGetAny" (formula "6") (term "0,1,0,1,0"))
   (rule "castedGetAny" (formula "6") (term "1,1,0,1,0"))
   (rule "inEqSimp_ltToLeq" (formula "6") (term "1,0,0,0,1,0"))
   (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,1,0,0,0,1,0"))
   (rule "inEqSimp_ltToLeq" (formula "6") (term "1,0,0,0"))
   (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,1,0,0,0"))
   (rule "inEqSimp_commuteLeq" (formula "6") (term "0,0,0,0"))
   (rule "inEqSimp_commuteLeq" (formula "6") (term "0,0,0,0,1,0"))
   (rule "inEqSimp_commuteLeq" (formula "6") (term "1,1,0,0,1,0"))
   (rule "inEqSimp_commuteLeq" (formula "6") (term "1,1,0,0"))
   (rule "inEqSimp_commuteLeq" (formula "6") (term "1,0,1,0"))
   (rule "applyEq" (formula "6") (term "0,1,0,0,1,0,0,0") (ifseqformula "24"))
   (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,1,0,0,0"))
   (rule "polySimp_rightDist" (formula "6") (term "1,0,0,1,0,0,0"))
   (rule "mul_literals" (formula "6") (term "0,1,0,0,1,0,0,0"))
   (rule "polySimp_addAssoc" (formula "6") (term "0,0,1,0,0,0"))
   (rule "add_literals" (formula "6") (term "0,0,0,1,0,0,0"))
   (rule "add_zero_left" (formula "6") (term "0,0,1,0,0,0"))
   (rule "applyEq" (formula "6") (term "0,1,0,0,1,0,0,0,1,0") (ifseqformula "24"))
   (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,1,0,0,0,1,0"))
   (rule "polySimp_rightDist" (formula "6") (term "1,0,0,1,0,0,0,1,0"))
   (rule "mul_literals" (formula "6") (term "0,1,0,0,1,0,0,0,1,0"))
   (rule "polySimp_addAssoc" (formula "6") (term "0,0,1,0,0,0,1,0"))
   (rule "add_literals" (formula "6") (term "0,0,0,1,0,0,0,1,0"))
   (rule "add_zero_left" (formula "6") (term "0,0,1,0,0,0,1,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "6") (term "1,0,0,0"))
   (rule "polySimp_mulLiterals" (formula "6") (term "1,1,0,0,0"))
   (rule "polySimp_elimOne" (formula "6") (term "1,1,0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "6") (term "1,0,0,0,1,0"))
   (rule "polySimp_mulLiterals" (formula "6") (term "1,1,0,0,0,1,0"))
   (rule "polySimp_elimOne" (formula "6") (term "1,1,0,0,0,1,0"))
   (rule "nnf_imp2or" (formula "6") (term "0"))
   (rule "nnf_notAnd" (formula "6") (term "0,0"))
   (rule "nnf_imp2or" (formula "6") (term "0,1,0"))
   (rule "nnf_notAnd" (formula "6") (term "1,0,0"))
   (rule "inEqSimp_notGeq" (formula "6") (term "1,1,0,0"))
   (rule "mul_literals" (formula "6") (term "1,0,0,1,1,0,0"))
   (rule "add_literals" (formula "6") (term "0,0,1,1,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "6") (term "1,1,0,0"))
   (rule "mul_literals" (formula "6") (term "1,1,1,0,0"))
   (rule "inEqSimp_notLeq" (formula "6") (term "0,1,0,0"))
   (rule "mul_literals" (formula "6") (term "1,0,0,0,1,0,0"))
   (rule "add_literals" (formula "6") (term "0,0,0,1,0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "6") (term "0,1,0,0"))
   (rule "mul_literals" (formula "6") (term "1,0,1,0,0"))
   (rule "nnf_notAnd" (formula "6") (term "0,0,0"))
   (rule "inEqSimp_notLeq" (formula "6") (term "1,0,0,0"))
   (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,1,0,0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "6") (term "1,0,0,0"))
   (rule "polySimp_mulComm0" (formula "6") (term "1,1,0,0,0"))
   (rule "polySimp_rightDist" (formula "6") (term "1,1,0,0,0"))
   (rule "polySimp_mulLiterals" (formula "6") (term "1,1,1,0,0,0"))
   (rule "mul_literals" (formula "6") (term "0,1,1,0,0,0"))
   (rule "polySimp_elimOne" (formula "6") (term "1,1,1,0,0,0"))
   (rule "inEqSimp_notGeq" (formula "6") (term "0,0,0,0"))
   (rule "times_zero_1" (formula "6") (term "1,0,0,0,0,0,0"))
   (rule "add_zero_right" (formula "6") (term "0,0,0,0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "6") (term "0,0,0,0"))
   (rule "mul_literals" (formula "6") (term "1,0,0,0,0"))
   (rule "nnf_notAnd" (formula "6") (term "0,0,1,0"))
   (rule "nnf_notAnd" (formula "6") (term "1,0,0,1,0"))
   (rule "inEqSimp_notLeq" (formula "6") (term "0,1,0,0,1,0"))
   (rule "mul_literals" (formula "6") (term "1,0,0,0,1,0,0,1,0"))
   (rule "add_literals" (formula "6") (term "0,0,0,1,0,0,1,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "6") (term "0,1,0,0,1,0"))
   (rule "mul_literals" (formula "6") (term "1,0,1,0,0,1,0"))
   (rule "inEqSimp_notGeq" (formula "6") (term "1,1,0,0,1,0"))
   (rule "mul_literals" (formula "6") (term "1,0,0,1,1,0,0,1,0"))
   (rule "add_literals" (formula "6") (term "0,0,1,1,0,0,1,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "6") (term "1,1,0,0,1,0"))
   (rule "mul_literals" (formula "6") (term "1,1,1,0,0,1,0"))
   (rule "nnf_notAnd" (formula "6") (term "0,0,0,1,0"))
   (rule "inEqSimp_notLeq" (formula "6") (term "1,0,0,0,1,0"))
   (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,1,0,0,0,1,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "6") (term "1,0,0,0,1,0"))
   (rule "polySimp_mulComm0" (formula "6") (term "1,1,0,0,0,1,0"))
   (rule "polySimp_rightDist" (formula "6") (term "1,1,0,0,0,1,0"))
   (rule "mul_literals" (formula "6") (term "0,1,1,0,0,0,1,0"))
   (rule "polySimp_mulLiterals" (formula "6") (term "1,1,1,0,0,0,1,0"))
   (rule "polySimp_elimOne" (formula "6") (term "1,1,1,0,0,0,1,0"))
   (rule "inEqSimp_notGeq" (formula "6") (term "0,0,0,0,1,0"))
   (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,0,0,0,0,1,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "6") (term "0,0,0,0,1,0"))
   (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,0,0,1,0"))
   (rule "polySimp_rightDist" (formula "6") (term "1,0,0,0,0,1,0"))
   (rule "mul_literals" (formula "6") (term "0,1,0,0,0,0,1,0"))
   (rule "polySimp_mulLiterals" (formula "6") (term "1,1,0,0,0,0,1,0"))
   (rule "polySimp_elimOne" (formula "6") (term "1,1,0,0,0,0,1,0"))
   (rule "commute_or_2" (formula "25") (term "0,0"))
   (rule "commute_or_2" (formula "26") (term "0,0"))
   (rule "Definition_axiom_for_isBlockAligned_in_de_wiesler_Buffers" (formula "5") (term "0"))
    (builtin "One Step Simplification" (formula "5"))
   (rule "translateJavaMod" (formula "5") (term "0"))
   (rule "jmod_axiom" (formula "5") (term "0"))
   (rule "polySimp_mulLiterals" (formula "5") (term "1,0"))
   (rule "applyEq" (formula "5") (term "0,1,0") (ifseqformula "21"))
   (rule "polySimp_pullOutFactor0" (formula "5") (term "0"))
   (rule "add_literals" (formula "5") (term "1,0"))
   (rule "times_zero_1" (formula "5") (term "0"))
    (builtin "One Step Simplification" (formula "5"))
   (rule "true_left" (formula "5"))
   (rule "commute_or_2" (formula "24") (term "0,0,1,0"))
   (rule "Contract_axiom_for_toReadCountOfBucket_in_BucketPointers" (formula "1") (term "0,0,0,1,1"))
   (rule "replace_known_left" (formula "1") (term "1,0,0,0") (ifseqformula "7"))
    (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "8")) (ifInst ""  (formula "28")))
   (rule "inEqSimp_ltToLeq" (formula "1") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,1,0,0"))
   (rule "polySimp_addComm1" (formula "1") (term "0,1,0,0"))
   (rule "inEqSimp_commuteLeq" (formula "1") (term "0,0,0"))
   (rule "inEqSimp_sepNegMonomial0" (formula "1") (term "1,0,0"))
   (rule "polySimp_mulLiterals" (formula "1") (term "0,1,0,0"))
   (rule "polySimp_elimOne" (formula "1") (term "0,1,0,0"))
   (rule "replace_known_left" (formula "1") (term "1,0,0") (ifseqformula "13"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "inEqSimp_subsumption1" (formula "1") (term "0,0") (ifseqformula "6"))
   (rule "leq_literals" (formula "1") (term "0,0,0"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "Definition_axiom_for_isBlockAligned_in_de_wiesler_Buffers" (formula "2") (term "0,0,1,1"))
    (builtin "One Step Simplification" (formula "2"))
   (rule "translateJavaMod" (formula "2") (term "0,0,1,1"))
   (rule "jmod_axiom" (formula "2") (term "0,0,1,1"))
   (rule "polySimp_mulLiterals" (formula "2") (term "1,0,0,1,1"))
   (rule "polySimp_sepNegMonomial" (formula "2") (term "0,1,1"))
   (rule "polySimp_mulLiterals" (formula "2") (term "0,0,1,1"))
   (rule "Definition_axiom_for_nextWriteOf_in_de_wiesler_BucketPointers" (formula "3") (term "0,1,1,0"))
   (rule "translateJavaAddInt" (formula "3") (term "0,2,0,1,1,0"))
   (rule "translateJavaMulInt" (formula "3") (term "0,0,2,0,1,1,0"))
   (rule "polySimp_mulComm0" (formula "3") (term "0,0,2,0,1,1,0"))
   (rule "polySimp_addComm0" (formula "3") (term "0,2,0,1,1,0"))
   (rule "Definition_axiom_for_lastReadOf_in_de_wiesler_BucketPointers" (formula "3") (term "0,1,0"))
   (rule "translateJavaMulInt" (formula "3") (term "0,2,0,1,0"))
   (rule "polySimp_mulComm0" (formula "3") (term "0,2,0,1,0"))
   (rule "Definition_axiom_for_nextWriteOf_in_de_wiesler_BucketPointers" (formula "3") (term "0,0,0"))
   (rule "translateJavaAddInt" (formula "3") (term "0,2,0,0,0"))
   (rule "translateJavaMulInt" (formula "3") (term "0,0,2,0,0,0"))
   (rule "polySimp_mulComm0" (formula "3") (term "0,0,2,0,0,0"))
   (rule "polySimp_addComm0" (formula "3") (term "0,2,0,0,0"))
   (rule "Definition_axiom_for_lastReadOf_in_de_wiesler_BucketPointers" (formula "3") (term "1,1,0,0"))
   (rule "translateJavaMulInt" (formula "3") (term "0,2,1,1,0,0"))
   (rule "polySimp_mulComm0" (formula "3") (term "0,2,1,1,0,0"))
   (rule "Class_invariant_axiom_for_de_wiesler_BucketPointers" (formula "4") (term "0"))
   (rule "replace_known_right" (formula "4") (term "0,0") (ifseqformula "27"))
    (builtin "One Step Simplification" (formula "4"))
   (rule "andLeft" (formula "4"))
   (rule "andLeft" (formula "5"))
   (rule "andLeft" (formula "5"))
   (rule "andLeft" (formula "7"))
   (rule "andLeft" (formula "5"))
   (rule "andLeft" (formula "9"))
   (rule "andLeft" (formula "5"))
   (rule "andLeft" (formula "11"))
   (rule "replace_known_left" (formula "1") (term "0,1") (ifseqformula "4"))
    (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "4")) (ifInst ""  (formula "12")))
   (rule "andLeft" (formula "1"))
   (rule "replace_known_left" (formula "3") (term "0") (ifseqformula "5"))
    (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "5")) (ifInst ""  (formula "13")))
   (rule "newSym_eq" (formula "3") (inst "l=l_1") (inst "newSymDef=mul(de.wiesler.BucketPointers::toReadCountOfBucket(heap,
                                                   self,
                                                   bucket),
    Z(0(#)))"))
   (rule "times_zero_1" (formula "3") (term "1,1"))
   (rule "add_zero_right" (formula "3") (term "1"))
   (rule "applyEq" (formula "4") (term "0,0") (ifseqformula "3"))
   (rule "eqSymm" (formula "4"))
   (rule "applyEq" (formula "1") (term "0") (ifseqformula "4"))
   (rule "applyEq" (formula "3") (term "0,0") (ifseqformula "4"))
   (rule "applyEq" (formula "2") (term "0,0") (ifseqformula "4"))
   (rule "elimGcdGeq_antec" (formula "1") (inst "elimGcdRightDiv=Z(0(#))") (inst "elimGcdLeftDiv=l_1") (inst "elimGcd=Z(6(5(2(#))))"))
   (rule "leq_literals" (formula "1") (term "0,0"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "add_zero_right" (formula "1") (term "0,0,0,0"))
   (rule "polySimp_mulLiterals" (formula "1") (term "1,0,0"))
   (rule "times_zero_1" (formula "1") (term "1,0,0,0,0"))
   (rule "add_zero_right" (formula "1") (term "0,0,0,0"))
   (rule "polySimp_pullOutFactor0b" (formula "1") (term "0,0"))
   (rule "add_literals" (formula "1") (term "1,1,0,0"))
   (rule "times_zero_1" (formula "1") (term "1,0,0"))
   (rule "add_zero_right" (formula "1") (term "0,0"))
   (rule "leq_literals" (formula "1") (term "0"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "inEqSimp_exactShadow3" (formula "8") (ifseqformula "9"))
   (rule "polySimp_mulComm0" (formula "8") (term "0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "8"))
   (rule "polySimp_mulLiterals" (formula "8") (term "1"))
   (rule "polySimp_elimOne" (formula "8") (term "1"))
   (rule "Definition_axiom_for_isBlockAligned_in_de_wiesler_Buffers" (formula "16") (term "0"))
    (builtin "One Step Simplification" (formula "16"))
   (rule "translateJavaMod" (formula "16") (term "0"))
   (rule "jmod_axiom" (formula "16") (term "0"))
   (rule "polySimp_mulLiterals" (formula "16") (term "1,0"))
   (rule "polySimp_sepNegMonomial" (formula "16"))
   (rule "polySimp_mulLiterals" (formula "16") (term "0"))
   (rule "newSym_eq" (formula "16") (inst "l=l_2") (inst "newSymDef=mul(\\if (leq(int::select(heap,
                         int[]::final(self,
                                      de.wiesler.BucketPointers::$buffer),
                         arr(add(Z(1(#)),
                                 mul(bucket, Z(2(#)))))),
             add(Z(neglit(1(#))),
                 int::select(heap,
                             int[]::final(self,
                                          de.wiesler.BucketPointers::$buffer),
                             arr(mul(bucket, Z(2(#))))))))
        \\then (add(int::select(heap,
                               int[]::final(self,
                                            de.wiesler.BucketPointers::$buffer),
                               arr(mul(bucket, Z(2(#))))),
                   mul(int::select(heap,
                                   int[]::final(self,
                                                de.wiesler.BucketPointers::$buffer),
                                   arr(add(Z(1(#)),
                                           mul(bucket,
                                               Z(2(#)))))),
                       Z(neglit(1(#))))))
        \\else (Z(0(#))),
    Z(0(#)))"))
   (rule "times_zero_1" (formula "16") (term "1,1"))
   (rule "add_zero_right" (formula "16") (term "1"))
   (rule "applyEq" (formula "17") (term "0,0") (ifseqformula "16"))
   (rule "eqSymm" (formula "17"))
   (rule "applyEq" (formula "5") (term "0") (ifseqformula "17"))
   (rule "applyEq" (formula "16") (term "0,0") (ifseqformula "17"))
   (rule "elimGcdGeq_antec" (formula "5") (inst "elimGcdRightDiv=Z(1(#))") (inst "elimGcdLeftDiv=l_2") (inst "elimGcd=Z(6(5(2(#))))"))
   (rule "leq_literals" (formula "5") (term "0,0"))
    (builtin "One Step Simplification" (formula "5"))
   (rule "polySimp_mulLiterals" (formula "5") (term "1,0,0,0,0,0"))
   (rule "polySimp_mulLiterals" (formula "5") (term "1,0,0"))
   (rule "mul_literals" (formula "5") (term "1,0,0,0,0,0"))
   (rule "polySimp_addLiterals" (formula "5") (term "0,0,0,0"))
   (rule "add_literals" (formula "5") (term "0,0,0,0"))
   (rule "polySimp_pullOutFactor0b" (formula "5") (term "0,0"))
   (rule "add_literals" (formula "5") (term "1,1,0,0"))
   (rule "times_zero_1" (formula "5") (term "1,0,0"))
   (rule "add_zero_right" (formula "5") (term "0,0"))
   (rule "leq_literals" (formula "5") (term "0"))
    (builtin "One Step Simplification" (formula "5"))
   (rule "jdiv_axiom" (formula "33") (term "0"))
   (rule "polySimp_mulLiterals" (formula "33") (term "0,0,2,1"))
   (rule "eqSymm" (formula "33"))
   (rule "applyEq" (formula "33") (term "1") (ifseqformula "34"))
   (rule "inEqSimp_subsumption6" (formula "33") (term "0,0") (ifseqformula "29"))
   (rule "greater_literals" (formula "33") (term "0,0,0,0"))
    (builtin "One Step Simplification" (formula "33"))
   (rule "times_zero_1" (formula "33") (term "1,0,0,0"))
   (rule "leq_literals" (formula "33") (term "0,0,0"))
    (builtin "One Step Simplification" (formula "33"))
   (rule "polyDiv_pullOut" (formula "33") (term "0") (inst "polyDivCoeff=l_0"))
   (rule "equal_literals" (formula "33") (term "0,0"))
    (builtin "One Step Simplification" (formula "33"))
   (rule "polySimp_mulLiterals" (formula "33") (term "1,0,0,0"))
   (rule "polySimp_homoEq" (formula "33"))
   (rule "polySimp_pullOutFactor0" (formula "33") (term "0,0,0,1,0"))
   (rule "add_literals" (formula "33") (term "1,0,0,0,1,0"))
   (rule "times_zero_1" (formula "33") (term "0,0,0,1,0"))
   (rule "div_literals" (formula "33") (term "0,0,1,0"))
   (rule "add_zero_left" (formula "33") (term "0,1,0"))
   (rule "polySimp_pullOutFactor1" (formula "33") (term "0"))
   (rule "add_literals" (formula "33") (term "1,0"))
   (rule "times_zero_1" (formula "33") (term "0"))
    (builtin "One Step Simplification" (formula "33"))
   (rule "true_left" (formula "33"))
   (rule "Class_invariant_axiom_for_de_wiesler_BucketPointers" (formula "6"))
   (rule "notLeft" (formula "6"))
   (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "10") (term "0"))
   (rule "translateJavaCastInt" (formula "10") (term "0,0"))
   (rule "castedGetAny" (formula "10") (term "0,0"))
   (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "10") (term "1"))
   (rule "translateJavaCastInt" (formula "10") (term "0,1"))
   (rule "castedGetAny" (formula "10") (term "0,1"))
   (rule "Contract_axiom_for_bucketStart_in_BucketPointers" (formula "11") (term "1,1"))
    (builtin "One Step Simplification" (formula "11") (ifInst ""  (formula "40")))
   (rule "translateJavaAddInt" (formula "11") (term "1,1,1,0,1,1,1"))
   (rule "translateJavaSubInt" (formula "11") (term "1,0,1,1,1,1,1"))
   (rule "polySimp_elimSub" (formula "11") (term "1,0,1,1,1,1,1"))
   (rule "mul_literals" (formula "11") (term "1,1,0,1,1,1,1,1"))
   (rule "polySimp_addComm0" (formula "11") (term "1,1,1,0,1,1,1"))
   (rule "polySimp_addComm0" (formula "11") (term "1,0,1,1,1,1,1"))
   (rule "inEqSimp_ltToLeq" (formula "11") (term "0,0,1,1,1"))
   (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0,0,1,1,1"))
   (rule "polySimp_addComm1" (formula "11") (term "0,0,0,1,1,1"))
   (rule "inEqSimp_ltToLeq" (formula "11") (term "0,0,1,1,1,1"))
   (rule "add_zero_right" (formula "11") (term "0,0,0,1,1,1,1"))
   (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0,1,1,1,1"))
   (rule "inEqSimp_commuteLeq" (formula "11") (term "1,0,0,1"))
   (rule "inEqSimp_commuteLeq" (formula "11") (term "0,0,0"))
   (rule "inEqSimp_commuteLeq" (formula "11") (term "0,0,0,1"))
   (rule "replace_known_left" (formula "11") (term "0,0,0,1") (ifseqformula "6"))
    (builtin "One Step Simplification" (formula "11"))
   (rule "inEqSimp_commuteLeq" (formula "11") (term "1,0,1,1,1,1"))
   (rule "inEqSimp_commuteLeq" (formula "11") (term "1,0,0"))
   (rule "inEqSimp_commuteLeq" (formula "11") (term "1,0,1,1,1"))
   (rule "replace_known_left" (formula "11") (term "1,0,1,1,1") (ifseqformula "7"))
    (builtin "One Step Simplification" (formula "11"))
   (rule "inEqSimp_sepNegMonomial0" (formula "11") (term "0,0,1,1,1"))
   (rule "polySimp_mulLiterals" (formula "11") (term "0,0,0,1,1,1"))
   (rule "polySimp_elimOne" (formula "11") (term "0,0,0,1,1,1"))
   (rule "inEqSimp_subsumption1" (formula "11") (term "1,0,1,1,1") (ifseqformula "25"))
   (rule "inEqSimp_homoInEq0" (formula "11") (term "0,1,0,1,1,1"))
   (rule "polySimp_pullOutFactor1b" (formula "11") (term "0,0,1,0,1,1,1"))
   (rule "add_literals" (formula "11") (term "1,1,0,0,1,0,1,1,1"))
   (rule "times_zero_1" (formula "11") (term "1,0,0,1,0,1,1,1"))
   (rule "add_zero_right" (formula "11") (term "0,0,1,0,1,1,1"))
   (rule "qeq_literals" (formula "11") (term "0,1,0,1,1,1"))
    (builtin "One Step Simplification" (formula "11"))
   (rule "inEqSimp_subsumption1" (formula "11") (term "0,0,0") (ifseqformula "18"))
   (rule "leq_literals" (formula "11") (term "0,0,0,0"))
    (builtin "One Step Simplification" (formula "11"))
   (rule "inEqSimp_subsumption1" (formula "11") (term "0,0") (ifseqformula "25"))
   (rule "inEqSimp_homoInEq0" (formula "11") (term "0,0,0"))
   (rule "polySimp_pullOutFactor1b" (formula "11") (term "0,0,0,0"))
   (rule "add_literals" (formula "11") (term "1,1,0,0,0,0"))
   (rule "times_zero_1" (formula "11") (term "1,0,0,0,0"))
   (rule "add_zero_right" (formula "11") (term "0,0,0,0"))
   (rule "qeq_literals" (formula "11") (term "0,0,0"))
    (builtin "One Step Simplification" (formula "11"))
   (rule "inEqSimp_subsumption1" (formula "11") (term "0,1,1,1") (ifseqformula "18"))
   (rule "leq_literals" (formula "11") (term "0,0,1,1,1"))
    (builtin "One Step Simplification" (formula "11"))
   (rule "Contract_axiom_for_lastReadOf_in_BucketPointers" (formula "12") (term "0,0"))
   (rule "translateJavaAddInt" (formula "12") (term "1,0,1,0,1,1"))
   (rule "translateJavaAddInt" (formula "12") (term "1,1,1,0,0,1,1"))
   (rule "replace_known_right" (formula "12") (term "0,1,0") (ifseqformula "41"))
    (builtin "One Step Simplification" (formula "12") (ifInst ""  (formula "20")) (ifInst ""  (formula "21")) (ifInst ""  (formula "15")) (ifInst ""  (formula "16")))
   (rule "polySimp_addComm0" (formula "12") (term "1,1,1,0,0,1,1"))
   (rule "replace_known_left" (formula "12") (term "1,0,0,1,1") (ifseqformula "9"))
    (builtin "One Step Simplification" (formula "12"))
   (rule "polySimp_addComm0" (formula "12") (term "1,0,1,0,1,1"))
   (rule "inEqSimp_ltToLeq" (formula "12") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,1,0,0"))
   (rule "polySimp_addComm1" (formula "12") (term "0,1,0,0"))
   (rule "inEqSimp_commuteLeq" (formula "12") (term "1,0,0,1,1"))
   (rule "replace_known_left" (formula "12") (term "1,0,0,1,1") (ifseqformula "8"))
    (builtin "One Step Simplification" (formula "12"))
   (rule "inEqSimp_commuteLeq" (formula "12") (term "0,0,1,1"))
   (rule "replace_known_left" (formula "12") (term "0,0,1,1") (ifseqformula "6"))
    (builtin "One Step Simplification" (formula "12"))
   (rule "inEqSimp_commuteLeq" (formula "12") (term "1,1,1,1"))
   (rule "inEqSimp_commuteLeq" (formula "12") (term "0,0,1,1,1"))
   (rule "inEqSimp_commuteLeq" (formula "12") (term "0,1,1"))
   (rule "inEqSimp_commuteLeq" (formula "12") (term "0,0,0"))
   (rule "applyEq" (formula "12") (term "0,0,0,1,1,1") (ifseqformula "35"))
   (rule "inEqSimp_commuteGeq" (formula "12") (term "0,0,1,1,1"))
   (rule "replace_known_left" (formula "12") (term "0,1,1,1") (ifseqformula "13"))
    (builtin "One Step Simplification" (formula "12"))
   (rule "applyEq" (formula "12") (term "1,1,1,1") (ifseqformula "35"))
   (rule "replace_known_left" (formula "12") (term "1,1,1") (ifseqformula "14"))
    (builtin "One Step Simplification" (formula "12"))
   (rule "inEqSimp_sepNegMonomial0" (formula "12") (term "1,0,0"))
   (rule "polySimp_mulLiterals" (formula "12") (term "0,1,0,0"))
   (rule "polySimp_elimOne" (formula "12") (term "0,1,0,0"))
   (rule "replace_known_left" (formula "12") (term "1,0,0") (ifseqformula "26"))
    (builtin "One Step Simplification" (formula "12"))
   (rule "inEqSimp_subsumption1" (formula "12") (term "0,0") (ifseqformula "19"))
   (rule "leq_literals" (formula "12") (term "0,0,0"))
    (builtin "One Step Simplification" (formula "12"))
   (rule "Definition_axiom_for_lastReadOf_in_de_wiesler_BucketPointers" (formula "13") (term "0,0"))
   (rule "translateJavaMulInt" (formula "13") (term "0,2,0,0"))
   (rule "polySimp_mulComm0" (formula "13") (term "0,2,0,0"))
   (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "13") (term "1,1"))
   (rule "translateJavaCastInt" (formula "13") (term "0,1,1"))
   (rule "eqSymm" (formula "13") (term "1"))
   (rule "castedGetAny" (formula "13") (term "0,0,1"))
   (rule "Contract_axiom_for_lastReadOf_in_BucketPointers" (formula "9") (term "0"))
   (rule "translateJavaAddInt" (formula "9") (term "1,1,1,0,0,1,1"))
   (rule "translateJavaAddInt" (formula "9") (term "1,0,1,0,1,1"))
   (rule "replace_known_left" (formula "9") (term "1,1,1,1,1,1") (ifseqformula "17"))
    (builtin "One Step Simplification" (formula "9") (ifInst ""  (formula "21")) (ifInst ""  (formula "22")) (ifInst ""  (formula "42")) (ifInst ""  (formula "16")))
   (rule "polySimp_addComm0" (formula "9") (term "1,0,1,0,1,1"))
   (rule "polySimp_addComm0" (formula "9") (term "1,1,1,0,0,1,1"))
   (rule "replace_known_left" (formula "9") (term "1,0,0,1,1") (ifseqformula "10"))
    (builtin "One Step Simplification" (formula "9"))
   (rule "inEqSimp_ltToLeq" (formula "9") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,1,0,0"))
   (rule "polySimp_addComm1" (formula "9") (term "0,1,0,0"))
   (rule "inEqSimp_commuteLeq" (formula "9") (term "0,0,0"))
   (rule "inEqSimp_commuteLeq" (formula "9") (term "0,0,1,1,1"))
   (rule "inEqSimp_commuteLeq" (formula "9") (term "1,1,1,1"))
   (rule "inEqSimp_commuteLeq" (formula "9") (term "1,0,0,1,1"))
   (rule "replace_known_left" (formula "9") (term "1,0,0,1,1") (ifseqformula "8"))
    (builtin "One Step Simplification" (formula "9"))
   (rule "inEqSimp_commuteLeq" (formula "9") (term "1,0,1,1"))
   (rule "inEqSimp_commuteLeq" (formula "9") (term "0,0,1,1"))
   (rule "replace_known_left" (formula "9") (term "0,0,1,1") (ifseqformula "6"))
    (builtin "One Step Simplification" (formula "9"))
   (rule "applyEq" (formula "9") (term "1,1,1,1,1") (ifseqformula "36"))
   (rule "replace_known_left" (formula "9") (term "1,1,1,1") (ifseqformula "15"))
    (builtin "One Step Simplification" (formula "9"))
   (rule "applyEq" (formula "9") (term "0,0,1,1,1") (ifseqformula "36"))
   (rule "inEqSimp_commuteGeq" (formula "9") (term "0,1,1,1"))
   (rule "inEqSimp_sepNegMonomial0" (formula "9") (term "1,0,0"))
   (rule "polySimp_mulLiterals" (formula "9") (term "0,1,0,0"))
   (rule "polySimp_elimOne" (formula "9") (term "0,1,0,0"))
   (rule "replace_known_left" (formula "9") (term "1,0,0") (ifseqformula "27"))
    (builtin "One Step Simplification" (formula "9"))
   (rule "inEqSimp_subsumption1" (formula "9") (term "0,0") (ifseqformula "20"))
   (rule "leq_literals" (formula "9") (term "0,0,0"))
    (builtin "One Step Simplification" (formula "9"))
   (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "10") (term "1"))
   (rule "translateJavaCastInt" (formula "10") (term "0,1"))
   (rule "castedGetAny" (formula "10") (term "0,1"))
   (rule "inEqSimp_commuteLeq" (formula "10"))
   (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "15") (term "0"))
   (rule "translateJavaCastInt" (formula "15") (term "0,0"))
   (rule "castedGetAny" (formula "15") (term "0,0"))
   (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "6") (term "0"))
   (rule "translateJavaCastInt" (formula "6") (term "0,0"))
   (rule "castedGetAny" (formula "6") (term "0,0"))
   (rule "Definition_axiom_for_lastReadOf_in_de_wiesler_BucketPointers" (formula "8") (term "0"))
   (rule "translateJavaMulInt" (formula "8") (term "0,2,0"))
   (rule "polySimp_mulComm0" (formula "8") (term "0,2,0"))
   (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "8") (term "1"))
   (rule "translateJavaCastInt" (formula "8") (term "0,1"))
   (rule "castedGetAny" (formula "8") (term "0,1"))
   (rule "inEqSimp_commuteGeq" (formula "8"))
   (rule "inEqSimp_exactShadow3" (formula "6") (ifseqformula "8"))
   (rule "times_zero_1" (formula "6") (term "0,0"))
   (rule "add_zero_left" (formula "6") (term "0"))
   (rule "Definition_axiom_for_isBlockAligned_in_de_wiesler_Buffers" (formula "17") (term "0"))
    (builtin "One Step Simplification" (formula "17"))
   (rule "translateJavaMod" (formula "17") (term "0"))
   (rule "jmod_axiom" (formula "17") (term "0"))
   (rule "polySimp_mulLiterals" (formula "17") (term "1,0"))
   (rule "polySimp_sepNegMonomial" (formula "17"))
   (rule "polySimp_mulLiterals" (formula "17") (term "0"))
   (rule "newSym_eq" (formula "17") (inst "l=l_3") (inst "newSymDef=mul(de.wiesler.BucketPointers::lastReadOf(heap,
                                          self,
                                          bucket),
    Z(0(#)))"))
   (rule "times_zero_1" (formula "17") (term "1,1"))
   (rule "add_zero_right" (formula "17") (term "1"))
   (rule "applyEq" (formula "18") (term "0,0") (ifseqformula "17"))
   (rule "eqSymm" (formula "18"))
   (rule "applyEq" (formula "11") (term "1") (ifseqformula "18"))
   (rule "applyEq" (formula "10") (term "0,0,1,1,1") (ifseqformula "18"))
   (rule "inEqSimp_commuteLeq" (formula "10") (term "0,1,1,1"))
   (rule "applyEq" (formula "17") (term "0,0") (ifseqformula "18"))
   (rule "applyEq" (formula "10") (term "0,1,1,1,1") (ifseqformula "18"))
   (rule "eqSymm" (formula "10") (term "1,1,1,1"))
   (rule "applyEq" (formula "15") (term "1,1") (ifseqformula "18"))
   (rule "elimGcdGeq" (formula "10") (term "0,1,1,1") (inst "elimGcdRightDiv=l_3") (inst "elimGcdLeftDiv=l_0") (inst "elimGcd=Z(6(5(2(#))))"))
   (rule "mul_literals" (formula "10") (term "0,1,0,0,0,0,0,0,0,1,1,1"))
   (rule "sub_literals" (formula "10") (term "0,0,0,0,0,0,0,0,1,1,1"))
   (rule "polySimp_mulLiterals" (formula "10") (term "1,0,1,0,0,1,1,1"))
   (rule "mul_literals" (formula "10") (term "0,0,0,0,0,1,0,0,1,1,1"))
   (rule "polySimp_mulLiterals" (formula "10") (term "1,0,0,0,0,1,1,1"))
   (rule "polySimp_pullOutFactor0b" (formula "10") (term "0,1,0,0,1,1,1"))
   (rule "add_literals" (formula "10") (term "1,1,0,1,0,0,1,1,1"))
   (rule "times_zero_1" (formula "10") (term "1,0,1,0,0,1,1,1"))
   (rule "add_zero_right" (formula "10") (term "0,1,0,0,1,1,1"))
   (rule "polySimp_pullOutFactor0b" (formula "10") (term "0,0,0,0,1,1,1"))
   (rule "add_literals" (formula "10") (term "1,1,0,0,0,0,1,1,1"))
   (rule "times_zero_1" (formula "10") (term "1,0,0,0,0,1,1,1"))
   (rule "add_zero_right" (formula "10") (term "0,0,0,0,1,1,1"))
   (rule "polySimp_mulComm0" (formula "10") (term "0,0,1,0,0,1,1,1"))
   (rule "polySimp_pullOutFactor0" (formula "10") (term "0,1,0,0,1,1,1"))
   (rule "add_literals" (formula "10") (term "1,0,1,0,0,1,1,1"))
   (rule "times_zero_1" (formula "10") (term "0,1,0,0,1,1,1"))
   (rule "leq_literals" (formula "10") (term "1,0,0,1,1,1"))
    (builtin "One Step Simplification" (formula "10"))
   (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,0,0,1,1,1"))
   (rule "polySimp_pullOutFactor0b" (formula "10") (term "0,0,0,1,1,1"))
   (rule "add_literals" (formula "10") (term "1,1,0,0,0,1,1,1"))
   (rule "times_zero_1" (formula "10") (term "1,0,0,0,1,1,1"))
   (rule "add_zero_right" (formula "10") (term "0,0,0,1,1,1"))
   (rule "qeq_literals" (formula "10") (term "0,0,1,1,1"))
    (builtin "One Step Simplification" (formula "10"))
   (rule "Free_class_invariant_axiom_for_de_wiesler_BucketPointers" (formula "19") (inst "b=b"))
    (builtin "One Step Simplification" (formula "19"))
   (rule "expand_inInt" (formula "19") (term "1,0,0,1"))
   (rule "replace_int_MAX" (formula "19") (term "1,0,1,0,0,1"))
   (rule "replace_int_MIN" (formula "19") (term "0,1,1,0,0,1"))
   (rule "andLeft" (formula "19"))
   (rule "andLeft" (formula "19"))
   (rule "andLeft" (formula "20"))
   (rule "andLeft" (formula "19"))
   (rule "andLeft" (formula "19"))
   (rule "andLeft" (formula "20"))
   (rule "andLeft" (formula "19"))
   (rule "andLeft" (formula "21"))
   (rule "andLeft" (formula "21"))
   (rule "translateJavaCastInt" (formula "26") (term "0"))
   (rule "translateJavaAddInt" (formula "25") (term "1"))
   (rule "translateJavaMulInt" (formula "19") (term "1"))
   (rule "translateJavaMulInt" (formula "20") (term "0"))
   (rule "translateJavaCastInt" (formula "23") (term "0"))
   (rule "translateJavaCastInt" (formula "22") (term "1"))
   (rule "polySimp_mulComm0" (formula "19") (term "1"))
   (rule "polySimp_mulComm0" (formula "20") (term "0"))
   (rule "polySimp_addComm0" (formula "24") (term "1"))
   (rule "castedGetAny" (formula "24") (term "0"))
   (rule "castedGetAny" (formula "22") (term "0"))
   (rule "castedGetAny" (formula "21") (term "1"))
   (rule "inEqSimp_ltToLeq" (formula "24") (term "1,0,0,0"))
   (rule "polySimp_mulComm0" (formula "24") (term "1,0,0,1,0,0,0"))
   (rule "inEqSimp_commuteLeq" (formula "24") (term "0,0,0,0"))
   (rule "inEqSimp_commuteLeq" (formula "24") (term "1,1,0,0"))
   (rule "inEqSimp_commuteLeq" (formula "20"))
   (rule "inEqSimp_commuteLeq" (formula "19"))
   (rule "inEqSimp_commuteLeq" (formula "21"))
   (rule "applyEq" (formula "21") (term "1") (ifseqformula "43"))
   (rule "applyEq" (formula "21") (term "0,0") (ifseqformula "42"))
   (rule "applyEq" (formula "20") (term "0") (ifseqformula "42"))
   (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "1,0,0,0"))
   (rule "polySimp_mulComm0" (formula "23") (term "1,1,0,0,0"))
   (rule "polySimp_rightDist" (formula "23") (term "1,1,0,0,0"))
   (rule "mul_literals" (formula "23") (term "0,1,1,0,0,0"))
   (rule "polySimp_mulLiterals" (formula "23") (term "1,1,1,0,0,0"))
   (rule "polySimp_elimOne" (formula "23") (term "1,1,1,0,0,0"))
   (rule "inEqSimp_subsumption6" (formula "19") (ifseqformula "35"))
   (rule "greater_literals" (formula "19") (term "0,0"))
    (builtin "One Step Simplification" (formula "19"))
   (rule "times_zero_1" (formula "19") (term "1,0"))
   (rule "leq_literals" (formula "19") (term "0"))
    (builtin "One Step Simplification" (formula "19"))
   (rule "true_left" (formula "19"))
   (rule "inEqSimp_subsumption6" (formula "19") (ifseqformula "36"))
   (rule "greater_literals" (formula "19") (term "0,0"))
    (builtin "One Step Simplification" (formula "19"))
   (rule "times_zero_1" (formula "19") (term "1,0"))
   (rule "leq_literals" (formula "19") (term "0"))
    (builtin "One Step Simplification" (formula "19"))
   (rule "true_left" (formula "19"))
   (rule "Contract_axiom_for_toReadCountOfBucket_in_BucketPointers" (formula "4") (term "0"))
   (rule "replace_known_right" (formula "4") (term "0,1,0") (ifseqformula "47"))
    (builtin "One Step Simplification" (formula "4") (ifInst ""  (formula "26")) (ifInst ""  (formula "27")))
   (rule "inEqSimp_ltToLeq" (formula "4") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "4") (term "1,0,0,1,0,0"))
   (rule "polySimp_addComm1" (formula "4") (term "0,1,0,0"))
   (rule "inEqSimp_commuteLeq" (formula "4") (term "0,0,0"))
   (rule "applyEq" (formula "4") (term "0,0,0,1,1,1") (ifseqformula "5"))
   (rule "replace_known_left" (formula "4") (term "0,1,1,1") (ifseqformula "2"))
    (builtin "One Step Simplification" (formula "4"))
   (rule "applyEq" (formula "4") (term "0,0,1,1") (ifseqformula "5"))
   (rule "inEqSimp_sepNegMonomial0" (formula "4") (term "1,0,0"))
   (rule "polySimp_mulLiterals" (formula "4") (term "0,1,0,0"))
   (rule "polySimp_elimOne" (formula "4") (term "0,1,0,0"))
   (rule "replace_known_left" (formula "4") (term "1,0,0") (ifseqformula "32"))
    (builtin "One Step Simplification" (formula "4"))
   (rule "inEqSimp_subsumption1" (formula "4") (term "0,0") (ifseqformula "25"))
   (rule "leq_literals" (formula "4") (term "0,0,0"))
    (builtin "One Step Simplification" (formula "4"))
   (rule "inEqSimp_subsumption6" (formula "4") (term "0,1,1") (ifseqformula "1"))
   (rule "times_zero_1" (formula "4") (term "1,1,0,0,1,1"))
   (rule "greater_literals" (formula "4") (term "0,0,0,1,1"))
    (builtin "One Step Simplification" (formula "4"))
   (rule "leq_literals" (formula "4") (term "0,0,1,1"))
    (builtin "One Step Simplification" (formula "4"))
   (rule "Definition_axiom_for_toReadCountOfBucket_in_de_wiesler_BucketPointers" (formula "5") (term "0"))
   (rule "translateJavaSubInt" (formula "5") (term "1,0"))
   (rule "polySimp_elimSub" (formula "5") (term "1,0"))
   (rule "inEqSimp_ltToLeq" (formula "5") (term "0,0"))
   (rule "polySimp_mulComm0" (formula "5") (term "1,0,0,0,0"))
   (rule "applyEq" (formula "5") (term "0,1,0") (ifseqformula "19"))
   (rule "applyEq" (formula "5") (term "0,1,0,0,0,0") (ifseqformula "19"))
   (rule "polySimp_mulLiterals" (formula "5") (term "1,0,0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "5") (term "0,0"))
   (rule "polySimp_mulComm0" (formula "5") (term "1,0,0"))
   (rule "polySimp_rightDist" (formula "5") (term "1,0,0"))
   (rule "mul_literals" (formula "5") (term "0,1,0,0"))
   (rule "polySimp_mulLiterals" (formula "5") (term "1,1,0,0"))
   (rule "Definition_axiom_for_isBlockAligned_in_de_wiesler_Buffers" (formula "2") (term "0"))
    (builtin "One Step Simplification" (formula "2"))
   (rule "translateJavaMod" (formula "2") (term "0"))
   (rule "jmod_axiom" (formula "2") (term "0"))
   (rule "polySimp_mulLiterals" (formula "2") (term "1,0"))
   (rule "applyEqRigid" (formula "2") (term "0,1,0") (ifseqformula "3"))
   (rule "polySimp_pullOutFactor0" (formula "2") (term "0"))
   (rule "add_literals" (formula "2") (term "1,0"))
   (rule "times_zero_1" (formula "2") (term "0"))
    (builtin "One Step Simplification" (formula "2"))
   (rule "true_left" (formula "2"))
   (rule "shift_paren_or" (formula "43") (term "0,0,0"))
   (rule "commute_or" (formula "44") (term "1,0,0,0"))
   (rule "seqGetAlphaCast" (formula "37") (term "0"))
   (rule "castedGetAny" (formula "37") (term "0"))
    (builtin "One Step Simplification" (formula "37"))
   (rule "true_left" (formula "37"))
   (rule "arrayLengthIsAShort" (formula "32") (term "0"))
   (rule "expand_inShort" (formula "32"))
   (rule "replace_short_MIN" (formula "32") (term "0,1"))
   (rule "replace_short_MAX" (formula "32") (term "1,0"))
   (rule "andLeft" (formula "32"))
   (rule "inEqSimp_commuteLeq" (formula "33"))
   (rule "inEqSimp_subsumption1" (formula "33") (ifseqformula "34"))
   (rule "leq_literals" (formula "33") (term "0"))
    (builtin "One Step Simplification" (formula "33"))
   (rule "true_left" (formula "33"))
   (rule "inEqSimp_exactShadow3" (formula "30") (ifseqformula "32"))
   (rule "polySimp_rightDist" (formula "30") (term "0,0"))
   (rule "polySimp_mulLiterals" (formula "30") (term "1,0,0"))
   (rule "mul_literals" (formula "30") (term "0,0,0"))
   (rule "polySimp_addComm1" (formula "30") (term "0"))
   (rule "add_literals" (formula "30") (term "0,0"))
   (rule "inEqSimp_sepNegMonomial1" (formula "30"))
   (rule "polySimp_mulLiterals" (formula "30") (term "0"))
   (rule "inEqSimp_contradInEq5" (formula "30") (ifseqformula "24"))
   (rule "greater_literals" (formula "30") (term "0,0"))
    (builtin "One Step Simplification" (formula "30"))
   (rule "mul_literals" (formula "30") (term "1,0"))
   (rule "qeq_literals" (formula "30") (term "0"))
    (builtin "One Step Simplification" (formula "30"))
   (rule "closeFalse" (formula "30"))
)
(branch "Usage"
    (builtin "One Step Simplification" (formula "13"))
   (rule "translateJavaMulInt" (formula "13") (term "0,1,0"))
   (rule "polySimp_mulComm0" (formula "13") (term "0,1,0"))
   (rule "variableDeclarationAssign" (formula "13") (term "1"))
   (rule "variableDeclaration" (formula "13") (term "1") (newnames "read"))
   (rule "eval_order_array_access4" (formula "13") (term "1") (inst "#v0=x_arr"))
   (rule "variableDeclarationAssign" (formula "13") (term "1"))
   (rule "variableDeclaration" (formula "13") (term "1") (newnames "x_arr"))
   (rule "assignment_read_attribute_this_final" (formula "13"))
    (builtin "One Step Simplification" (formula "13"))
   (rule "assignment_array2" (formula "13"))
   (branch "Normal Execution (x_arr != null)"
       (builtin "One Step Simplification" (formula "13"))
      (rule "compound_assignment_op_minus" (formula "13") (term "1"))
      (rule "compound_int_cast_expression" (formula "13") (term "1") (inst "#v=x"))
      (rule "variableDeclarationAssign" (formula "13") (term "1"))
      (rule "variableDeclaration" (formula "13") (term "1") (newnames "x"))
      (rule "remove_parentheses_right" (formula "13") (term "1"))
      (rule "compound_subtraction_2" (formula "13") (term "1") (inst "#v0=x_1") (inst "#v1=x_2"))
      (rule "variableDeclarationAssign" (formula "13") (term "1"))
      (rule "variableDeclaration" (formula "13") (term "1") (newnames "x_1"))
      (rule "assignment" (formula "13") (term "1"))
       (builtin "One Step Simplification" (formula "13"))
      (rule "variableDeclarationAssign" (formula "13") (term "1"))
      (rule "variableDeclaration" (formula "13") (term "1") (newnames "x_2"))
      (rule "remove_parentheses_right" (formula "13") (term "1"))
      (rule "assignment" (formula "13") (term "1"))
       (builtin "One Step Simplification" (formula "13"))
      (rule "assignmentSubtractionInt" (formula "13") (term "1"))
      (branch "Overflow check"
          (builtin "One Step Simplification" (formula "13"))
         (rule "expand_inInt" (formula "13"))
         (rule "replace_int_MIN" (formula "13") (term "0,1"))
         (rule "replace_int_MAX" (formula "13") (term "1,0"))
         (rule "polySimp_elimSub" (formula "13") (term "0,0"))
         (rule "mul_literals" (formula "13") (term "1,0,0"))
         (rule "polySimp_elimSub" (formula "13") (term "1,1"))
         (rule "mul_literals" (formula "13") (term "1,1,1"))
         (rule "polySimp_addComm0" (formula "13") (term "0,0"))
         (rule "polySimp_addComm0" (formula "13") (term "1,1"))
         (rule "inEqSimp_ltToLeq" (formula "9"))
         (rule "polySimp_mulComm0" (formula "9") (term "1,0,0"))
         (rule "polySimp_addComm1" (formula "9") (term "0"))
         (rule "inEqSimp_homoInEq0" (formula "13") (term "0"))
         (rule "polySimp_mulComm0" (formula "13") (term "1,0,0"))
         (rule "polySimp_rightDist" (formula "13") (term "1,0,0"))
         (rule "mul_literals" (formula "13") (term "0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "13") (term "0,0"))
         (rule "add_literals" (formula "13") (term "0,0,0"))
         (rule "inEqSimp_homoInEq0" (formula "13") (term "1"))
         (rule "mul_literals" (formula "13") (term "1,0,1"))
         (rule "polySimp_addComm1" (formula "13") (term "0,1"))
         (rule "add_literals" (formula "13") (term "0,0,1"))
         (rule "inEqSimp_sepNegMonomial0" (formula "9"))
         (rule "polySimp_mulLiterals" (formula "9") (term "0"))
         (rule "polySimp_elimOne" (formula "9") (term "0"))
         (rule "inEqSimp_sepNegMonomial1" (formula "13") (term "0"))
         (rule "polySimp_mulLiterals" (formula "13") (term "0,0"))
         (rule "polySimp_elimOne" (formula "13") (term "0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "13") (term "1"))
         (rule "mul_literals" (formula "13") (term "1,1"))
         (rule "inEqSimp_subsumption1" (formula "5") (ifseqformula "8"))
         (rule "leq_literals" (formula "5") (term "0"))
          (builtin "One Step Simplification" (formula "5"))
         (rule "true_left" (formula "5"))
         (rule "Class_invariant_axiom_for_de_wiesler_BucketPointers" (formula "6"))
         (rule "notLeft" (formula "6"))
         (rule "Contract_axiom_for_toReadCountOfBucket_in_BucketPointers" (formula "11") (term "0"))
         (rule "replace_known_left" (formula "1") (term "1,0,0,0") (ifseqformula "2"))
          (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "3")) (ifInst ""  (formula "11")) (ifInst ""  (formula "9")))
         (rule "inEqSimp_ltToLeq" (formula "1") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,1,0,0"))
         (rule "polySimp_addComm1" (formula "1") (term "0,1,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "1") (term "0,0,0"))
         (rule "replace_known_left" (formula "1") (term "0,0,0") (ifseqformula "7"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "inEqSimp_sepNegMonomial0" (formula "1") (term "0,0"))
         (rule "polySimp_mulLiterals" (formula "1") (term "0,0,0"))
         (rule "polySimp_elimOne" (formula "1") (term "0,0,0"))
         (rule "replace_known_left" (formula "1") (term "0,0") (ifseqformula "8"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "Free_class_invariant_axiom_for_de_wiesler_BucketPointers" (formula "9") (inst "b=b"))
          (builtin "One Step Simplification" (formula "9"))
         (rule "expand_inInt" (formula "9") (term "1,0,0,1"))
         (rule "replace_int_MAX" (formula "9") (term "1,0,1,0,0,1"))
         (rule "replace_int_MIN" (formula "9") (term "0,1,1,0,0,1"))
         (rule "andLeft" (formula "9"))
         (rule "andLeft" (formula "9"))
         (rule "andLeft" (formula "10"))
         (rule "andLeft" (formula "9"))
         (rule "andLeft" (formula "9"))
         (rule "andLeft" (formula "10"))
         (rule "andLeft" (formula "9"))
         (rule "andLeft" (formula "11"))
         (rule "andLeft" (formula "11"))
         (rule "translateJavaCastInt" (formula "16") (term "0"))
         (rule "translateJavaAddInt" (formula "15") (term "1"))
         (rule "translateJavaMulInt" (formula "9") (term "1"))
         (rule "translateJavaMulInt" (formula "10") (term "0"))
         (rule "translateJavaCastInt" (formula "13") (term "0"))
         (rule "translateJavaCastInt" (formula "12") (term "1"))
         (rule "polySimp_mulComm0" (formula "9") (term "1"))
         (rule "polySimp_mulComm0" (formula "10") (term "0"))
         (rule "polySimp_addComm0" (formula "15") (term "1"))
         (rule "castedGetAny" (formula "16") (term "0"))
         (rule "castedGetAny" (formula "13") (term "0"))
         (rule "castedGetAny" (formula "12") (term "1"))
         (rule "inEqSimp_ltToLeq" (formula "18") (term "1,0,0,0"))
         (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,1,0,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "18") (term "0,0,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "18") (term "1,1,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "11"))
         (rule "inEqSimp_commuteLeq" (formula "9"))
         (rule "inEqSimp_commuteLeq" (formula "12"))
         (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "1,0,0,0"))
         (rule "polySimp_mulComm0" (formula "18") (term "1,1,0,0,0"))
         (rule "polySimp_rightDist" (formula "18") (term "1,1,0,0,0"))
         (rule "mul_literals" (formula "18") (term "0,1,1,0,0,0"))
         (rule "polySimp_mulLiterals" (formula "18") (term "1,1,1,0,0,0"))
         (rule "polySimp_elimOne" (formula "18") (term "1,1,1,0,0,0"))
         (rule "elimGcdGeq_antec" (formula "9") (inst "elimGcd=Z(2(#))") (inst "elimGcdLeftDiv=int::final(self,
           de.wiesler.BucketPointers::$num_buckets)") (inst "elimGcdRightDiv=Z(0(#))"))
         (rule "polySimp_mulLiterals" (formula "9") (term "1,0,1,0"))
         (rule "mul_literals" (formula "9") (term "0,1,0,0,0,0,1,0"))
         (rule "leq_literals" (formula "9") (term "0,0"))
          (builtin "One Step Simplification" (formula "9"))
         (rule "add_zero_right" (formula "9") (term "0,0,0,0"))
         (rule "times_zero_1" (formula "9") (term "1,0,0,0,0"))
         (rule "add_zero_right" (formula "9") (term "0,0,0,0"))
         (rule "polySimp_pullOutFactor0b" (formula "9") (term "0,0"))
         (rule "add_literals" (formula "9") (term "1,1,0,0"))
         (rule "times_zero_1" (formula "9") (term "1,0,0"))
         (rule "add_zero_right" (formula "9") (term "0,0"))
         (rule "leq_literals" (formula "9") (term "0"))
          (builtin "One Step Simplification" (formula "9"))
         (rule "inEqSimp_exactShadow2" (formula "9") (ifseqformula "10"))
         (rule "times_zero_1" (formula "9") (term "1,0,0,1"))
         (rule "greater_literals" (formula "9") (term "0"))
          (builtin "One Step Simplification" (formula "9"))
         (rule "times_zero_1" (formula "9") (term "0,0"))
         (rule "add_zero_left" (formula "9") (term "0"))
         (rule "inEqSimp_exactShadow2" (formula "8") (ifseqformula "11"))
         (rule "greater_literals" (formula "8") (term "0"))
          (builtin "One Step Simplification" (formula "8"))
         (rule "polySimp_rightDist" (formula "8") (term "1,0,0"))
         (rule "mul_literals" (formula "8") (term "0,1,0,0"))
         (rule "polySimp_rightDist" (formula "8") (term "0,0"))
         (rule "polySimp_mulLiterals" (formula "8") (term "1,0,0"))
         (rule "mul_literals" (formula "8") (term "0,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "8"))
         (rule "polySimp_mulComm0" (formula "8") (term "1"))
         (rule "polySimp_rightDist" (formula "8") (term "1"))
         (rule "polySimp_mulLiterals" (formula "8") (term "1,1"))
         (rule "mul_literals" (formula "8") (term "0,1"))
         (rule "inEqSimp_exactShadow3" (formula "14") (ifseqformula "15"))
         (rule "polySimp_mulComm0" (formula "14") (term "0,0"))
         (rule "polySimp_addComm0" (formula "14") (term "0"))
         (rule "inEqSimp_sepNegMonomial1" (formula "14"))
         (rule "polySimp_mulLiterals" (formula "14") (term "0"))
         (rule "polySimp_elimOne" (formula "14") (term "0"))
         (rule "nnf_imp2or" (formula "21") (term "0"))
         (rule "nnf_notAnd" (formula "21") (term "0,0"))
         (rule "nnf_notAnd" (formula "21") (term "1,0,0"))
         (rule "inEqSimp_notGeq" (formula "21") (term "1,1,0,0"))
         (rule "mul_literals" (formula "21") (term "1,0,0,1,1,0,0"))
         (rule "add_literals" (formula "21") (term "0,0,1,1,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "1,1,0,0"))
         (rule "mul_literals" (formula "21") (term "1,1,1,0,0"))
         (rule "inEqSimp_notLeq" (formula "21") (term "0,1,0,0"))
         (rule "mul_literals" (formula "21") (term "1,0,0,0,1,0,0"))
         (rule "add_literals" (formula "21") (term "0,0,0,1,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "21") (term "0,1,0,0"))
         (rule "mul_literals" (formula "21") (term "1,0,1,0,0"))
         (rule "nnf_notAnd" (formula "21") (term "0,0,0"))
         (rule "inEqSimp_notLeq" (formula "21") (term "1,0,0,0"))
         (rule "polySimp_rightDist" (formula "21") (term "1,0,0,1,0,0,0"))
         (rule "mul_literals" (formula "21") (term "0,1,0,0,1,0,0,0"))
         (rule "polySimp_addAssoc" (formula "21") (term "0,0,1,0,0,0"))
         (rule "add_literals" (formula "21") (term "0,0,0,1,0,0,0"))
         (rule "add_zero_left" (formula "21") (term "0,0,1,0,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "21") (term "1,0,0,0"))
         (rule "polySimp_mulLiterals" (formula "21") (term "1,1,0,0,0"))
         (rule "polySimp_elimOne" (formula "21") (term "1,1,0,0,0"))
         (rule "inEqSimp_notGeq" (formula "21") (term "0,0,0,0"))
         (rule "times_zero_1" (formula "21") (term "1,0,0,0,0,0,0"))
         (rule "add_zero_right" (formula "21") (term "0,0,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "0,0,0,0"))
         (rule "mul_literals" (formula "21") (term "1,0,0,0,0"))
         (rule "Definition_axiom_for_toReadCountOfBucket_in_de_wiesler_BucketPointers" (formula "24") (term "0"))
          (builtin "One Step Simplification" (formula "24"))
         (rule "orRight" (formula "24"))
         (rule "notRight" (formula "24"))
         (rule "translateJavaSubInt" (formula "25") (term "0"))
         (rule "polySimp_elimSub" (formula "25") (term "0"))
         (rule "inEqSimp_ltToLeq" (formula "1"))
         (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
         (rule "polySimp_sepNegMonomial" (formula "25"))
         (rule "polySimp_mulLiterals" (formula "25") (term "0"))
         (rule "polySimp_elimOne" (formula "25") (term "0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "1"))
         (rule "polySimp_mulComm0" (formula "1") (term "1"))
         (rule "polySimp_rightDist" (formula "1") (term "1"))
         (rule "mul_literals" (formula "1") (term "0,1"))
         (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
         (rule "polySimp_elimOne" (formula "1") (term "1,1"))
         (rule "inEqSimp_contradEq3" (formula "25") (ifseqformula "1"))
         (rule "polySimp_mulComm0" (formula "25") (term "1,0,0"))
         (rule "polySimp_pullOutFactor1b" (formula "25") (term "0,0"))
         (rule "add_literals" (formula "25") (term "1,1,0,0"))
         (rule "times_zero_1" (formula "25") (term "1,0,0"))
         (rule "add_zero_right" (formula "25") (term "0,0"))
         (rule "qeq_literals" (formula "25") (term "0"))
          (builtin "One Step Simplification" (formula "25"))
         (rule "false_right" (formula "25"))
         (rule "Contract_axiom_for_toReadCountOfBucket_in_BucketPointers" (formula "2") (term "0,0,1,1,1"))
         (rule "replace_known_left" (formula "2") (term "1,0,0,0") (ifseqformula "4"))
          (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "5")) (ifInst ""  (formula "25")))
         (rule "inEqSimp_ltToLeq" (formula "2") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,1,0,0"))
         (rule "polySimp_addComm1" (formula "2") (term "0,1,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "2") (term "0,0,0"))
         (rule "replace_known_left" (formula "2") (term "0,0,0") (ifseqformula "9"))
          (builtin "One Step Simplification" (formula "2"))
         (rule "inEqSimp_sepNegMonomial0" (formula "2") (term "0,0"))
         (rule "polySimp_mulLiterals" (formula "2") (term "0,0,0"))
         (rule "polySimp_elimOne" (formula "2") (term "0,0,0"))
         (rule "replace_known_left" (formula "2") (term "0,0") (ifseqformula "11"))
          (builtin "One Step Simplification" (formula "2"))
         (rule "Class_invariant_axiom_for_de_wiesler_BucketPointers" (formula "3") (term "0,1"))
         (rule "replace_known_right" (formula "3") (term "0,0,1") (ifseqformula "24"))
          (builtin "One Step Simplification" (formula "3"))
         (rule "Definition_axiom_for_isSortedSeqTransitive_in_de_wiesler_Functions" (formula "22") (term "0") (inst "j=j") (inst "i=i"))
          (builtin "One Step Simplification" (formula "22"))
         (rule "expand_inInt" (formula "22") (term "1,0,0,1,0"))
         (rule "expand_inInt" (formula "22") (term "1,0,0"))
         (rule "replace_int_MIN" (formula "22") (term "0,1,1,0,0,1,0"))
         (rule "replace_int_MAX" (formula "22") (term "1,0,1,0,0,1,0"))
         (rule "replace_int_MAX" (formula "22") (term "1,0,1,0,0"))
         (rule "replace_int_MIN" (formula "22") (term "0,1,1,0,0"))
         (rule "translateJavaCastInt" (formula "22") (term "0,1,0,1,0"))
         (rule "translateJavaCastInt" (formula "22") (term "1,1,0,1,0"))
         (rule "castedGetAny" (formula "22") (term "0,1,0,1,0"))
         (rule "castedGetAny" (formula "22") (term "1,1,0,1,0"))
         (rule "inEqSimp_ltToLeq" (formula "22") (term "1,0,0,0"))
         (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,1,0,0,0"))
         (rule "inEqSimp_ltToLeq" (formula "22") (term "1,0,0,0,1,0"))
         (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,1,0,0,0,1,0"))
         (rule "inEqSimp_commuteLeq" (formula "22") (term "0,0,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "22") (term "0,0,0,0,1,0"))
         (rule "inEqSimp_commuteLeq" (formula "22") (term "1,1,0,0,1,0"))
         (rule "inEqSimp_commuteLeq" (formula "22") (term "1,1,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "22") (term "1,0,1,0"))
         (rule "applyEq" (formula "22") (term "0,1,0,0,1,0,0,0") (ifseqformula "20"))
         (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,1,0,0,0"))
         (rule "polySimp_rightDist" (formula "22") (term "1,0,0,1,0,0,0"))
         (rule "mul_literals" (formula "22") (term "0,1,0,0,1,0,0,0"))
         (rule "polySimp_addAssoc" (formula "22") (term "0,0,1,0,0,0"))
         (rule "add_literals" (formula "22") (term "0,0,0,1,0,0,0"))
         (rule "add_zero_left" (formula "22") (term "0,0,1,0,0,0"))
         (rule "applyEq" (formula "22") (term "0,1,0,0,1,0,0,0,1,0") (ifseqformula "20"))
         (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,1,0,0,0,1,0"))
         (rule "polySimp_rightDist" (formula "22") (term "1,0,0,1,0,0,0,1,0"))
         (rule "mul_literals" (formula "22") (term "0,1,0,0,1,0,0,0,1,0"))
         (rule "polySimp_addAssoc" (formula "22") (term "0,0,1,0,0,0,1,0"))
         (rule "add_literals" (formula "22") (term "0,0,0,1,0,0,0,1,0"))
         (rule "add_zero_left" (formula "22") (term "0,0,1,0,0,0,1,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "1,0,0,0"))
         (rule "polySimp_mulLiterals" (formula "22") (term "1,1,0,0,0"))
         (rule "polySimp_elimOne" (formula "22") (term "1,1,0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "1,0,0,0,1,0"))
         (rule "polySimp_mulLiterals" (formula "22") (term "1,1,0,0,0,1,0"))
         (rule "polySimp_elimOne" (formula "22") (term "1,1,0,0,0,1,0"))
         (rule "nnf_imp2or" (formula "22") (term "0"))
         (rule "nnf_notAnd" (formula "22") (term "0,0"))
         (rule "nnf_imp2or" (formula "22") (term "0,1,0"))
         (rule "nnf_notAnd" (formula "22") (term "0,0,0"))
         (rule "inEqSimp_notLeq" (formula "22") (term "1,0,0,0"))
         (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,1,0,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "22") (term "1,0,0,0"))
         (rule "polySimp_mulComm0" (formula "22") (term "1,1,0,0,0"))
         (rule "polySimp_rightDist" (formula "22") (term "1,1,0,0,0"))
         (rule "polySimp_mulLiterals" (formula "22") (term "1,1,1,0,0,0"))
         (rule "mul_literals" (formula "22") (term "0,1,1,0,0,0"))
         (rule "polySimp_elimOne" (formula "22") (term "1,1,1,0,0,0"))
         (rule "inEqSimp_notGeq" (formula "22") (term "0,0,0,0"))
         (rule "times_zero_1" (formula "22") (term "1,0,0,0,0,0,0"))
         (rule "add_zero_right" (formula "22") (term "0,0,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "0,0,0,0"))
         (rule "mul_literals" (formula "22") (term "1,0,0,0,0"))
         (rule "nnf_notAnd" (formula "22") (term "1,0,0"))
         (rule "inEqSimp_notLeq" (formula "22") (term "0,1,0,0"))
         (rule "mul_literals" (formula "22") (term "1,0,0,0,1,0,0"))
         (rule "add_literals" (formula "22") (term "0,0,0,1,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "22") (term "0,1,0,0"))
         (rule "mul_literals" (formula "22") (term "1,0,1,0,0"))
         (rule "inEqSimp_notGeq" (formula "22") (term "1,1,0,0"))
         (rule "mul_literals" (formula "22") (term "1,0,0,1,1,0,0"))
         (rule "add_literals" (formula "22") (term "0,0,1,1,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "1,1,0,0"))
         (rule "mul_literals" (formula "22") (term "1,1,1,0,0"))
         (rule "nnf_notAnd" (formula "22") (term "0,0,1,0"))
         (rule "Definition_axiom_for_isBlockAligned_in_de_wiesler_Buffers" (formula "19") (term "0"))
          (builtin "One Step Simplification" (formula "19"))
         (rule "translateJavaMod" (formula "19") (term "0"))
         (rule "jmod_axiom" (formula "19") (term "0"))
         (rule "polySimp_mulLiterals" (formula "19") (term "1,0"))
         (rule "polySimp_sepNegMonomial" (formula "19"))
         (rule "polySimp_mulLiterals" (formula "19") (term "0"))
         (rule "newSym_eq" (formula "19") (inst "newSymDef=mul(int::final(self,
               de.wiesler.BucketPointers::$first_empty_position),
    Z(0(#)))") (inst "l=l_0"))
         (rule "times_zero_1" (formula "19") (term "1,1"))
         (rule "add_zero_right" (formula "19") (term "1"))
         (rule "applyEq" (formula "20") (term "0,0") (ifseqformula "19"))
         (rule "eqSymm" (formula "20"))
         (rule "applyEq" (formula "15") (term "0") (ifseqformula "20"))
         (rule "applyEq" (formula "16") (term "0") (ifseqformula "20"))
         (rule "applyEq" (formula "17") (term "1") (ifseqformula "20"))
         (rule "applyEq" (formula "19") (term "0,0") (ifseqformula "20"))
         (rule "elimGcdLeq_antec" (formula "16") (inst "elimGcd=Z(6(5(2(#))))") (inst "elimGcdLeftDiv=l_0") (inst "elimGcdRightDiv=Z(7(0(6(8(8(3(8(#))))))))"))
         (rule "polySimp_mulLiterals" (formula "16") (term "1,0,1,0"))
         (rule "polySimp_mulLiterals" (formula "16") (term "1,0,0,0,0,1,0"))
         (rule "neg_literal" (formula "16") (term "0,0,0,0,0,1,0"))
         (rule "leq_literals" (formula "16") (term "0,0"))
          (builtin "One Step Simplification" (formula "16"))
         (rule "mul_literals" (formula "16") (term "1,0,0,0,0,0"))
         (rule "polySimp_addLiterals" (formula "16") (term "0,0,0,0"))
         (rule "add_zero_right" (formula "16") (term "0,0,0,0"))
         (rule "polySimp_pullOutFactor0b" (formula "16") (term "0,0"))
         (rule "add_literals" (formula "16") (term "1,1,0,0"))
         (rule "times_zero_1" (formula "16") (term "1,0,0"))
         (rule "add_zero_right" (formula "16") (term "0,0"))
         (rule "qeq_literals" (formula "16") (term "0"))
          (builtin "One Step Simplification" (formula "16"))
         (rule "elimGcdGeq_antec" (formula "15") (inst "elimGcd=Z(6(5(2(#))))") (inst "elimGcdLeftDiv=l_0") (inst "elimGcdRightDiv=Z(0(#))"))
         (rule "polySimp_mulLiterals" (formula "15") (term "1,0,1,0"))
         (rule "add_zero_right" (formula "15") (term "0,0,0,1,0"))
         (rule "leq_literals" (formula "15") (term "0,0"))
          (builtin "One Step Simplification" (formula "15"))
         (rule "times_zero_1" (formula "15") (term "1,0,0,0,0"))
         (rule "add_zero_right" (formula "15") (term "0,0,0,0"))
         (rule "polySimp_pullOutFactor0b" (formula "15") (term "0,0"))
         (rule "add_literals" (formula "15") (term "1,1,0,0"))
         (rule "times_zero_1" (formula "15") (term "1,0,0"))
         (rule "add_zero_right" (formula "15") (term "0,0"))
         (rule "leq_literals" (formula "15") (term "0"))
          (builtin "One Step Simplification" (formula "15"))
         (rule "inEqSimp_exactShadow3" (formula "17") (ifseqformula "18"))
         (rule "polySimp_mulAssoc" (formula "17") (term "0,0"))
         (rule "polySimp_mulComm0" (formula "17") (term "0,0,0"))
         (rule "polySimp_mulLiterals" (formula "17") (term "0,0"))
         (rule "polySimp_addComm0" (formula "17") (term "0"))
         (rule "inEqSimp_sepNegMonomial1" (formula "17"))
         (rule "polySimp_mulLiterals" (formula "17") (term "0"))
         (rule "inEqSimp_subsumption4" (formula "17") (ifseqformula "16"))
         (rule "greater_literals" (formula "17") (term "0,0"))
          (builtin "One Step Simplification" (formula "17"))
         (rule "mul_literals" (formula "17") (term "0,0"))
         (rule "leq_literals" (formula "17") (term "0"))
          (builtin "One Step Simplification" (formula "17"))
         (rule "true_left" (formula "17"))
         (rule "nnf_notAnd" (formula "23") (term "0,0,0,1,0"))
         (rule "inEqSimp_notLeq" (formula "23") (term "1,0,0,0,1,0"))
         (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,1,0,0,0,1,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "23") (term "1,0,0,0,1,0"))
         (rule "polySimp_mulComm0" (formula "23") (term "1,1,0,0,0,1,0"))
         (rule "polySimp_rightDist" (formula "23") (term "1,1,0,0,0,1,0"))
         (rule "polySimp_mulLiterals" (formula "23") (term "1,1,1,0,0,0,1,0"))
         (rule "mul_literals" (formula "23") (term "0,1,1,0,0,0,1,0"))
         (rule "polySimp_elimOne" (formula "23") (term "1,1,1,0,0,0,1,0"))
         (rule "inEqSimp_notGeq" (formula "23") (term "0,0,0,0,1,0"))
         (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,0,0,0,0,1,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "0,0,0,0,1,0"))
         (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,0,0,1,0"))
         (rule "polySimp_rightDist" (formula "23") (term "1,0,0,0,0,1,0"))
         (rule "polySimp_mulLiterals" (formula "23") (term "1,1,0,0,0,0,1,0"))
         (rule "mul_literals" (formula "23") (term "0,1,0,0,0,0,1,0"))
         (rule "polySimp_elimOne" (formula "23") (term "1,1,0,0,0,0,1,0"))
         (rule "nnf_notAnd" (formula "23") (term "1,0,0,1,0"))
         (rule "inEqSimp_notGeq" (formula "23") (term "1,1,0,0,1,0"))
         (rule "mul_literals" (formula "23") (term "1,0,0,1,1,0,0,1,0"))
         (rule "add_literals" (formula "23") (term "0,0,1,1,0,0,1,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "1,1,0,0,1,0"))
         (rule "mul_literals" (formula "23") (term "1,1,1,0,0,1,0"))
         (rule "inEqSimp_notLeq" (formula "23") (term "0,1,0,0,1,0"))
         (rule "mul_literals" (formula "23") (term "1,0,0,0,1,0,0,1,0"))
         (rule "add_literals" (formula "23") (term "0,0,0,1,0,0,1,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "23") (term "0,1,0,0,1,0"))
         (rule "mul_literals" (formula "23") (term "1,0,1,0,0,1,0"))
         (rule "commute_and" (formula "27"))
         (rule "Definition_axiom_for_toReadCountOfBucket_in_de_wiesler_BucketPointers" (formula "2") (term "0,0,0,1,1,1"))
         (rule "translateJavaSubInt" (formula "2") (term "1,0,0,0,1,1,1"))
         (rule "polySimp_elimSub" (formula "2") (term "1,0,0,0,1,1,1"))
         (rule "inEqSimp_ltToLeq" (formula "2") (term "0,0,0,0,1,1,1"))
         (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,0,0,0,0,1,1,1"))
         (rule "inEqSimp_sepPosMonomial0" (formula "2") (term "0,0,0,0,1,1,1"))
         (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,0,0,1,1,1"))
         (rule "polySimp_rightDist" (formula "2") (term "1,0,0,0,0,1,1,1"))
         (rule "polySimp_mulLiterals" (formula "2") (term "1,1,0,0,0,0,1,1,1"))
         (rule "mul_literals" (formula "2") (term "0,1,0,0,0,0,1,1,1"))
         (rule "polySimp_elimOne" (formula "2") (term "1,1,0,0,0,0,1,1,1"))
         (rule "replace_known_left" (formula "2") (term "0,0,0,0,1,1,1") (ifseqformula "1"))
          (builtin "One Step Simplification" (formula "2"))
         (rule "Contract_axiom_for_toReadCountOfBucket_in_BucketPointers" (formula "3") (term "0,0,1"))
         (rule "replace_known_left" (formula "3") (term "1,0,0,0") (ifseqformula "5"))
          (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "6")) (ifInst ""  (formula "27")))
         (rule "inEqSimp_ltToLeq" (formula "3") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "3") (term "1,0,0,1,0,0"))
         (rule "polySimp_addComm1" (formula "3") (term "0,1,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "3") (term "0,0,0"))
         (rule "replace_known_left" (formula "3") (term "0,0,0") (ifseqformula "10"))
          (builtin "One Step Simplification" (formula "3"))
         (rule "inEqSimp_sepNegMonomial0" (formula "3") (term "0,0"))
         (rule "polySimp_mulLiterals" (formula "3") (term "0,0,0"))
         (rule "polySimp_elimOne" (formula "3") (term "0,0,0"))
         (rule "replace_known_left" (formula "3") (term "0,0") (ifseqformula "12"))
          (builtin "One Step Simplification" (formula "3"))
         (rule "Class_invariant_axiom_for_de_wiesler_BucketPointers" (formula "4") (term "0"))
         (rule "replace_known_right" (formula "4") (term "0,0") (ifseqformula "26"))
          (builtin "One Step Simplification" (formula "4"))
         (rule "andLeft" (formula "4"))
         (rule "replace_known_left" (formula "2") (term "0,1,1") (ifseqformula "4"))
          (builtin "One Step Simplification" (formula "2"))
         (rule "replace_known_left" (formula "3") (term "0,1,1") (ifseqformula "4"))
          (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "5")))
         (rule "Contract_axiom_for_lastReadOf_in_BucketPointers" (formula "1") (term "1,1"))
         (rule "translateJavaAddInt" (formula "1") (term "1,1,1,0,0,1,1"))
         (rule "translateJavaAddInt" (formula "1") (term "1,0,1,0,1,1"))
         (rule "replace_known_left" (formula "1") (term "1,0,0,0") (ifseqformula "7"))
          (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "8")) (ifInst ""  (formula "29")))
         (rule "polySimp_addComm0" (formula "1") (term "1,1,1,0,0,1,1"))
         (rule "polySimp_addComm0" (formula "1") (term "1,0,1,0,1,1"))
         (rule "inEqSimp_ltToLeq" (formula "1") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,1,0,0"))
         (rule "polySimp_addComm1" (formula "1") (term "0,1,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "1") (term "0,0,1,1,1"))
         (rule "inEqSimp_commuteLeq" (formula "1") (term "0,0,0"))
         (rule "replace_known_left" (formula "1") (term "0,0,0") (ifseqformula "12"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "inEqSimp_commuteLeq" (formula "1") (term "1,0,0,0,1,1"))
         (rule "inEqSimp_commuteLeq" (formula "1") (term "1,0,1,1"))
         (rule "inEqSimp_commuteLeq" (formula "1") (term "0,0,0,0,1,1"))
         (rule "inEqSimp_commuteLeq" (formula "1") (term "0,1,1,1,1"))
         (rule "applyEq" (formula "1") (term "1,0,1,1,1,1") (ifseqformula "23"))
         (rule "applyEq" (formula "1") (term "0,0,0,1,1,1") (ifseqformula "23"))
         (rule "inEqSimp_commuteGeq" (formula "1") (term "0,0,1,1,1"))
         (rule "inEqSimp_sepNegMonomial0" (formula "1") (term "0,0"))
         (rule "polySimp_mulLiterals" (formula "1") (term "0,0,0"))
         (rule "polySimp_elimOne" (formula "1") (term "0,0,0"))
         (rule "replace_known_left" (formula "1") (term "0,0") (ifseqformula "14"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "Definition_axiom_for_lastReadOf_in_de_wiesler_BucketPointers" (formula "2") (term "1,1"))
         (rule "translateJavaMulInt" (formula "2") (term "0,2,1,1"))
         (rule "polySimp_mulComm0" (formula "2") (term "0,2,1,1"))
         (rule "inEqSimp_homoInEq0" (formula "2"))
         (rule "polySimp_addComm1" (formula "2") (term "0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "2"))
         (rule "polySimp_mulComm0" (formula "2") (term "1"))
         (rule "polySimp_rightDist" (formula "2") (term "1"))
         (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
         (rule "mul_literals" (formula "2") (term "0,1"))
         (rule "polySimp_elimOne" (formula "2") (term "1,1"))
         (rule "Contract_axiom_for_toReadCountOfBucket_in_BucketPointers" (formula "5") (term "0"))
         (rule "replace_known_left" (formula "5") (term "1,0,0,0") (ifseqformula "8"))
          (builtin "One Step Simplification" (formula "5") (ifInst ""  (formula "9")) (ifInst ""  (formula "30")) (ifInst ""  (formula "6")) (ifInst ""  (formula "7")))
         (rule "inEqSimp_ltToLeq" (formula "5") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "5") (term "1,0,0,1,0,0"))
         (rule "polySimp_addComm1" (formula "5") (term "0,1,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "5") (term "0,0,0"))
         (rule "replace_known_left" (formula "5") (term "0,0,0") (ifseqformula "13"))
          (builtin "One Step Simplification" (formula "5"))
         (rule "inEqSimp_sepNegMonomial0" (formula "5") (term "0,0"))
         (rule "polySimp_mulLiterals" (formula "5") (term "0,0,0"))
         (rule "polySimp_elimOne" (formula "5") (term "0,0,0"))
         (rule "replace_known_left" (formula "5") (term "0,0") (ifseqformula "15"))
          (builtin "One Step Simplification" (formula "5") (ifInst ""  (formula "4")))
         (rule "true_left" (formula "5"))
         (rule "Definition_axiom_for_toReadCountOfBucket_in_de_wiesler_BucketPointers" (formula "5") (term "0"))
         (rule "translateJavaSubInt" (formula "5") (term "1,0"))
         (rule "polySimp_elimSub" (formula "5") (term "1,0"))
         (rule "inEqSimp_ltToLeq" (formula "5") (term "0,0"))
         (rule "polySimp_mulComm0" (formula "5") (term "1,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "5") (term "0,0"))
         (rule "polySimp_mulComm0" (formula "5") (term "1,0,0"))
         (rule "polySimp_rightDist" (formula "5") (term "1,0,0"))
         (rule "mul_literals" (formula "5") (term "0,1,0,0"))
         (rule "polySimp_mulLiterals" (formula "5") (term "1,1,0,0"))
         (rule "polySimp_elimOne" (formula "5") (term "1,1,0,0"))
         (rule "Definition_axiom_for_isBlockAligned_in_de_wiesler_Buffers" (formula "6") (term "0"))
          (builtin "One Step Simplification" (formula "6"))
         (rule "translateJavaMod" (formula "6") (term "0"))
         (rule "jmod_axiom" (formula "6") (term "0"))
         (rule "polySimp_mulLiterals" (formula "6") (term "1,0"))
         (rule "polySimp_sepNegMonomial" (formula "6"))
         (rule "polySimp_mulLiterals" (formula "6") (term "0"))
         (rule "newSym_eq" (formula "6") (inst "l=l_1") (inst "newSymDef=mul(de.wiesler.BucketPointers::toReadCountOfBucket(heap,
                                                   self,
                                                   bucket),
    Z(0(#)))"))
         (rule "times_zero_1" (formula "6") (term "1,1"))
         (rule "add_zero_right" (formula "6") (term "1"))
         (rule "applyEq" (formula "7") (term "0,0") (ifseqformula "6"))
         (rule "eqSymm" (formula "7"))
         (rule "applyEq" (formula "6") (term "0,0") (ifseqformula "7"))
         (rule "Contract_axiom_for_nextWriteOf_in_BucketPointers" (formula "3") (term "0,1,0,0,0,1,1"))
         (rule "translateJavaAddInt" (formula "3") (term "1,0,1,0,1,1"))
         (rule "translateJavaAddInt" (formula "3") (term "1,1,1,0,0,1,1"))
         (rule "replace_known_right" (formula "3") (term "0,1,0") (ifseqformula "31"))
          (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "9")) (ifInst ""  (formula "10")))
         (rule "polySimp_addComm0" (formula "3") (term "1,1,1,0,0,1,1"))
         (rule "polySimp_addComm0" (formula "3") (term "1,0,1,0,1,1"))
         (rule "inEqSimp_ltToLeq" (formula "3") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "3") (term "1,0,0,1,0,0"))
         (rule "polySimp_addComm1" (formula "3") (term "0,1,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "3") (term "0,0,0"))
         (rule "replace_known_left" (formula "3") (term "0,0,0") (ifseqformula "14"))
          (builtin "One Step Simplification" (formula "3"))
         (rule "inEqSimp_commuteLeq" (formula "3") (term "0,0,0,0,1,1"))
         (rule "inEqSimp_commuteLeq" (formula "3") (term "1,0,0,0,1,1"))
         (rule "inEqSimp_commuteLeq" (formula "3") (term "1,0,1,1"))
         (rule "inEqSimp_sepNegMonomial0" (formula "3") (term "0,0"))
         (rule "polySimp_mulLiterals" (formula "3") (term "0,0,0"))
         (rule "polySimp_elimOne" (formula "3") (term "0,0,0"))
         (rule "replace_known_left" (formula "3") (term "0,0") (ifseqformula "16"))
          (builtin "One Step Simplification" (formula "3"))
         (rule "Definition_axiom_for_lastReadOf_in_de_wiesler_BucketPointers" (formula "4") (term "0,0,0,0,1,1"))
         (rule "translateJavaMulInt" (formula "4") (term "0,2,0,0,0,0,1,1"))
         (rule "polySimp_mulComm0" (formula "4") (term "0,2,0,0,0,0,1,1"))
         (rule "polySimp_addComm0" (formula "4") (term "0,0,0,1,1"))
         (rule "Class_invariant_axiom_for_de_wiesler_BucketPointers" (formula "4") (term "0"))
         (rule "replace_known_right" (formula "4") (term "0,0") (ifseqformula "30"))
          (builtin "One Step Simplification" (formula "4"))
         (rule "andLeft" (formula "4"))
         (rule "andLeft" (formula "5"))
         (rule "replace_known_left" (formula "7") (term "0") (ifseqformula "4"))
          (builtin "One Step Simplification" (formula "7") (ifInst ""  (formula "4")) (ifInst ""  (formula "6")))
         (rule "true_left" (formula "7"))
         (rule "replace_known_left" (formula "3") (term "0,1") (ifseqformula "4"))
          (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "4")) (ifInst ""  (formula "6")))
         (rule "andLeft" (formula "3"))
         (rule "andLeft" (formula "3"))
         (rule "andLeft" (formula "3"))
         (rule "andLeft" (formula "3"))
         (rule "replace_known_left" (formula "1") (term "1,1,1,1,1,1") (ifseqformula "10"))
          (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "8")) (ifInst ""  (formula "8")) (ifInst ""  (formula "3")) (ifInst ""  (formula "6")))
         (rule "andLeft" (formula "1"))
         (rule "andLeft" (formula "1"))
         (rule "andLeft" (formula "3"))
         (rule "andLeft" (formula "4"))
         (rule "inEqSimp_exactShadow3" (formula "1") (ifseqformula "2"))
         (rule "polySimp_mulComm0" (formula "1") (term "0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "1"))
         (rule "polySimp_mulLiterals" (formula "1") (term "1"))
         (rule "polySimp_elimOne" (formula "1") (term "1"))
         (rule "inEqSimp_exactShadow3" (formula "9") (ifseqformula "10"))
         (rule "polySimp_mulComm0" (formula "9") (term "0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "9"))
         (rule "polySimp_mulLiterals" (formula "9") (term "1"))
         (rule "polySimp_elimOne" (formula "9") (term "1"))
         (rule "commute_or_2" (formula "39") (term "0,0"))
         (rule "commute_or_2" (formula "38") (term "0,0"))
         (rule "Contract_axiom_for_nextWriteOf_in_BucketPointers" (formula "7") (term "1,1"))
         (rule "translateJavaAddInt" (formula "7") (term "1,1,1,0,0,1,1"))
         (rule "translateJavaAddInt" (formula "7") (term "1,0,1,0,1,1"))
         (rule "replace_known_left" (formula "7") (term "1,0,0,0") (ifseqformula "20"))
          (builtin "One Step Simplification" (formula "7") (ifInst ""  (formula "14")) (ifInst ""  (formula "21")) (ifInst ""  (formula "42")) (ifInst ""  (formula "14")) (ifInst ""  (formula "13")) (ifInst ""  (formula "16")))
         (rule "polySimp_addComm0" (formula "7") (term "1,0,1,1"))
         (rule "polySimp_addComm0" (formula "7") (term "1,1,1,0,1"))
         (rule "replace_known_left" (formula "7") (term "1,0,1") (ifseqformula "11"))
          (builtin "One Step Simplification" (formula "7"))
         (rule "inEqSimp_ltToLeq" (formula "7") (term "1,0"))
         (rule "polySimp_mulComm0" (formula "7") (term "1,0,0,1,0"))
         (rule "polySimp_addComm1" (formula "7") (term "0,1,0"))
         (rule "inEqSimp_commuteLeq" (formula "7") (term "0,0"))
         (rule "replace_known_left" (formula "7") (term "0,0") (ifseqformula "25"))
          (builtin "One Step Simplification" (formula "7"))
         (rule "inEqSimp_commuteLeq" (formula "7") (term "0,0,1"))
         (rule "replace_known_left" (formula "7") (term "0,0,1") (ifseqformula "9"))
          (builtin "One Step Simplification" (formula "7"))
         (rule "inEqSimp_commuteLeq" (formula "7") (term "0,1"))
         (rule "replace_known_left" (formula "7") (term "0,1") (ifseqformula "10"))
          (builtin "One Step Simplification" (formula "7"))
         (rule "inEqSimp_commuteLeq" (formula "7") (term "1"))
         (rule "replace_known_left" (formula "7") (term "1") (ifseqformula "12"))
          (builtin "One Step Simplification" (formula "7"))
         (rule "true_left" (formula "7"))
         (rule "Definition_axiom_for_nextWriteOf_in_de_wiesler_BucketPointers" (formula "7") (term "1,1"))
         (rule "translateJavaAddInt" (formula "7") (term "0,2,1,1"))
         (rule "translateJavaMulInt" (formula "7") (term "0,0,2,1,1"))
         (rule "polySimp_mulComm0" (formula "7") (term "0,0,2,1,1"))
         (rule "polySimp_addComm0" (formula "7") (term "0,2,1,1"))
         (rule "inEqSimp_homoInEq1" (formula "7"))
         (rule "polySimp_addComm1" (formula "7") (term "0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "7"))
         (rule "polySimp_mulComm0" (formula "7") (term "1"))
         (rule "polySimp_rightDist" (formula "7") (term "1"))
         (rule "mul_literals" (formula "7") (term "0,1"))
         (rule "polySimp_mulLiterals" (formula "7") (term "1,1"))
         (rule "polySimp_elimOne" (formula "7") (term "1,1"))
         (rule "commute_or_2" (formula "38") (term "0,0,1,0"))
         (rule "Contract_axiom_for_nextWriteOf_in_BucketPointers" (formula "16") (term "0,1,1,0"))
         (rule "translateJavaAddInt" (formula "16") (term "1,1,1,0,0,1,1"))
         (rule "translateJavaAddInt" (formula "16") (term "1,0,1,0,1,1"))
         (rule "replace_known_left" (formula "16") (term "1,0,0") (ifseqformula "21"))
          (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "13")) (ifInst ""  (formula "20")) (ifInst ""  (formula "42")) (ifInst ""  (formula "13")) (ifInst ""  (formula "12")) (ifInst ""  (formula "15")))
         (rule "polySimp_addComm0" (formula "16") (term "1,1,1,0,1"))
         (rule "replace_known_left" (formula "16") (term "1,0,1") (ifseqformula "10"))
          (builtin "One Step Simplification" (formula "16"))
         (rule "polySimp_addComm0" (formula "16") (term "1,0,1,1"))
         (rule "inEqSimp_ltToLeq" (formula "16") (term "1,0"))
         (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,1,0"))
         (rule "polySimp_addComm1" (formula "16") (term "0,1,0"))
         (rule "inEqSimp_commuteLeq" (formula "16") (term "0,0,1"))
         (rule "replace_known_left" (formula "16") (term "0,0,1") (ifseqformula "8"))
          (builtin "One Step Simplification" (formula "16"))
         (rule "inEqSimp_commuteLeq" (formula "16") (term "1,1"))
         (rule "replace_known_left" (formula "16") (term "1,1") (ifseqformula "11"))
          (builtin "One Step Simplification" (formula "16"))
         (rule "inEqSimp_commuteLeq" (formula "16") (term "1"))
         (rule "replace_known_left" (formula "16") (term "1") (ifseqformula "9"))
          (builtin "One Step Simplification" (formula "16"))
         (rule "true_left" (formula "16"))
         (rule "Contract_axiom_for_lastReadOf_in_BucketPointers" (formula "16") (term "0,1,0"))
         (rule "translateJavaAddInt" (formula "16") (term "1,1,1,0,0,1,1"))
         (rule "translateJavaAddInt" (formula "16") (term "1,0,1,0,1,1"))
         (rule "replace_known_left" (formula "16") (term "1,0,0,0,0") (ifseqformula "13"))
          (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "20")) (ifInst ""  (formula "21")) (ifInst ""  (formula "42")) (ifInst ""  (formula "13")) (ifInst ""  (formula "6")) (ifInst ""  (formula "15")))
         (rule "polySimp_addComm0" (formula "16") (term "1,1,1,0,0,1"))
         (rule "replace_known_left" (formula "16") (term "1,0,0,1") (ifseqformula "3"))
          (builtin "One Step Simplification" (formula "16"))
         (rule "polySimp_addComm0" (formula "16") (term "1,0,1,0,1"))
         (rule "inEqSimp_ltToLeq" (formula "16") (term "1,0"))
         (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,1,0"))
         (rule "polySimp_addComm1" (formula "16") (term "0,1,0"))
         (rule "inEqSimp_commuteLeq" (formula "16") (term "0,0,1,1"))
         (rule "inEqSimp_commuteLeq" (formula "16") (term "0,0,0,1"))
         (rule "replace_known_left" (formula "16") (term "0,0,0,1") (ifseqformula "8"))
          (builtin "One Step Simplification" (formula "16"))
         (rule "inEqSimp_commuteLeq" (formula "16") (term "1,0,1"))
         (rule "replace_known_left" (formula "16") (term "1,0,1") (ifseqformula "11"))
          (builtin "One Step Simplification" (formula "16"))
         (rule "inEqSimp_commuteLeq" (formula "16") (term "0,0"))
         (rule "replace_known_left" (formula "16") (term "0,0") (ifseqformula "25"))
          (builtin "One Step Simplification" (formula "16"))
         (rule "inEqSimp_commuteLeq" (formula "16") (term "1,1,1"))
         (rule "inEqSimp_commuteLeq" (formula "16") (term "0,1"))
         (rule "replace_known_left" (formula "16") (term "0,1") (ifseqformula "2"))
          (builtin "One Step Simplification" (formula "16"))
         (rule "applyEq" (formula "16") (term "1,1,1") (ifseqformula "36"))
         (rule "replace_known_left" (formula "16") (term "1,1") (ifseqformula "5"))
          (builtin "One Step Simplification" (formula "16"))
         (rule "applyEq" (formula "16") (term "0,0,1") (ifseqformula "36"))
         (rule "inEqSimp_commuteGeq" (formula "16") (term "0,1"))
         (rule "replace_known_left" (formula "16") (term "1") (ifseqformula "4"))
          (builtin "One Step Simplification" (formula "16"))
         (rule "true_left" (formula "16"))
         (rule "Definition_axiom_for_nextWriteOf_in_de_wiesler_BucketPointers" (formula "16") (term "0,1,1,0"))
         (rule "translateJavaMulInt" (formula "16") (term "0,0,2,0,1,1,0"))
         (rule "translateJavaAddInt" (formula "16") (term "0,2,0,1,1,0"))
         (rule "polySimp_mulComm0" (formula "16") (term "0,0,2,0,1,1,0"))
         (rule "polySimp_addComm0" (formula "16") (term "0,2,0,1,1,0"))
         (rule "Definition_axiom_for_lastReadOf_in_de_wiesler_BucketPointers" (formula "16") (term "0,1,0"))
         (rule "translateJavaMulInt" (formula "16") (term "0,2,0,1,0"))
         (rule "polySimp_mulComm0" (formula "16") (term "0,2,0,1,0"))
         (rule "Definition_axiom_for_nextWriteOf_in_de_wiesler_BucketPointers" (formula "16") (term "0,0,0"))
         (rule "translateJavaAddInt" (formula "16") (term "0,2,0,0,0"))
         (rule "translateJavaMulInt" (formula "16") (term "0,0,2,0,0,0"))
         (rule "polySimp_mulComm0" (formula "16") (term "0,0,2,0,0,0"))
         (rule "polySimp_addComm0" (formula "16") (term "0,2,0,0,0"))
         (rule "Definition_axiom_for_lastReadOf_in_de_wiesler_BucketPointers" (formula "16") (term "1,1,0,0"))
         (rule "translateJavaMulInt" (formula "16") (term "0,2,1,1,0,0"))
         (rule "polySimp_mulComm0" (formula "16") (term "0,2,1,1,0,0"))
         (rule "replace_known_left" (formula "16") (term "0,0") (ifseqformula "7"))
          (builtin "One Step Simplification" (formula "16"))
         (rule "inEqSimp_sepNegMonomial1" (formula "16"))
         (rule "polySimp_mulLiterals" (formula "16") (term "0"))
         (rule "polySimp_elimOne" (formula "16") (term "0"))
         (rule "inEqSimp_subsumption0" (formula "16") (ifseqformula "7"))
         (rule "inEqSimp_homoInEq0" (formula "16") (term "0"))
         (rule "polySimp_mulComm0" (formula "16") (term "1,0,0"))
         (rule "polySimp_rightDist" (formula "16") (term "1,0,0"))
         (rule "mul_literals" (formula "16") (term "0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "16") (term "0,0"))
         (rule "polySimp_addComm0" (formula "16") (term "0,0,0"))
         (rule "polySimp_pullOutFactor1b" (formula "16") (term "0,0"))
         (rule "add_literals" (formula "16") (term "1,1,0,0"))
         (rule "times_zero_1" (formula "16") (term "1,0,0"))
         (rule "add_zero_right" (formula "16") (term "0,0"))
         (rule "qeq_literals" (formula "16") (term "0"))
          (builtin "One Step Simplification" (formula "16"))
         (rule "true_left" (formula "16"))
         (rule "Definition_axiom_for_toReadCountOfBucket_in_de_wiesler_BucketPointers" (formula "17") (term "0"))
         (rule "translateJavaSubInt" (formula "17") (term "1,0"))
         (rule "polySimp_elimSub" (formula "17") (term "1,0"))
         (rule "inEqSimp_ltToLeq" (formula "17") (term "0,0"))
         (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "0,0"))
         (rule "polySimp_mulComm0" (formula "17") (term "1,0,0"))
         (rule "polySimp_rightDist" (formula "17") (term "1,0,0"))
         (rule "polySimp_mulLiterals" (formula "17") (term "1,1,0,0"))
         (rule "mul_literals" (formula "17") (term "0,1,0,0"))
         (rule "polySimp_elimOne" (formula "17") (term "1,1,0,0"))
         (rule "Class_invariant_axiom_for_de_wiesler_BucketPointers" (formula "13"))
         (rule "notLeft" (formula "13"))
         (rule "Contract_axiom_for_nextWriteOf_in_BucketPointers" (formula "13") (term "0,0,0,0"))
         (rule "translateJavaAddInt" (formula "13") (term "1,1,1,0,0,1,1"))
         (rule "translateJavaAddInt" (formula "13") (term "1,0,1,0,1,1"))
         (rule "replace_known_left" (formula "13") (term "1,1,1,1") (ifseqformula "15"))
          (builtin "One Step Simplification" (formula "13") (ifInst ""  (formula "18")) (ifInst ""  (formula "19")) (ifInst ""  (formula "40")) (ifInst ""  (formula "12")))
         (rule "polySimp_addComm0" (formula "13") (term "1,0,1,1,1"))
         (rule "polySimp_addComm0" (formula "13") (term "1,1,1,0,1,1"))
         (rule "replace_known_left" (formula "13") (term "1,0,1,1") (ifseqformula "10"))
          (builtin "One Step Simplification" (formula "13"))
         (rule "inEqSimp_ltToLeq" (formula "13") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,1,0,0"))
         (rule "polySimp_addComm1" (formula "13") (term "0,1,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "13") (term "1,1,1"))
         (rule "replace_known_left" (formula "13") (term "1,1,1") (ifseqformula "11"))
          (builtin "One Step Simplification" (formula "13"))
         (rule "inEqSimp_commuteLeq" (formula "13") (term "0,1,1"))
         (rule "replace_known_left" (formula "13") (term "0,1,1") (ifseqformula "8"))
          (builtin "One Step Simplification" (formula "13"))
         (rule "inEqSimp_commuteLeq" (formula "13") (term "1,1"))
         (rule "replace_known_left" (formula "13") (term "1,1") (ifseqformula "9"))
          (builtin "One Step Simplification" (formula "13"))
         (rule "inEqSimp_commuteLeq" (formula "13") (term "0,0,0"))
         (rule "replace_known_left" (formula "13") (term "0,0,0") (ifseqformula "23"))
          (builtin "One Step Simplification" (formula "13"))
         (rule "inEqSimp_sepNegMonomial0" (formula "13") (term "0,0"))
         (rule "polySimp_mulLiterals" (formula "13") (term "0,0,0"))
         (rule "polySimp_elimOne" (formula "13") (term "0,0,0"))
         (rule "replace_known_left" (formula "13") (term "0,0") (ifseqformula "25"))
          (builtin "One Step Simplification" (formula "13"))
         (rule "true_left" (formula "13"))
         (rule "Definition_axiom_for_isBlockAligned_in_de_wiesler_Buffers" (formula "13") (term "0"))
          (builtin "One Step Simplification" (formula "13"))
         (rule "translateJavaMod" (formula "13") (term "0"))
         (rule "jmod_axiom" (formula "13") (term "0"))
         (rule "polySimp_mulLiterals" (formula "13") (term "1,0"))
         (rule "polySimp_sepNegMonomial" (formula "13"))
         (rule "polySimp_mulLiterals" (formula "13") (term "0"))
         (rule "newSym_eq" (formula "13") (inst "l=l_2") (inst "newSymDef=add(mul(de.wiesler.BucketPointers::nextWriteOf(heap,
                                               self,
                                               bucket),
        Z(0(#))),
    mul(int::select(heap,
                    int[]::final(self,
                                 de.wiesler.BucketPointers::$buffer),
                    arr(mul(bucket, Z(2(#))))),
        Z(0(#))))"))
         (rule "times_zero_1" (formula "13") (term "1,1,1"))
         (rule "times_zero_1" (formula "13") (term "0,1,1"))
         (rule "add_zero_left" (formula "13") (term "1,1"))
         (rule "add_zero_right" (formula "13") (term "1"))
         (rule "applyEq" (formula "14") (term "0,0") (ifseqformula "13"))
         (rule "polySimp_homoEq" (formula "14"))
         (rule "polySimp_mulLiterals" (formula "14") (term "1,0"))
         (rule "polySimp_addComm1" (formula "14") (term "0"))
         (rule "polySimp_addComm0" (formula "14") (term "0,0"))
         (rule "polySimp_sepPosMonomial" (formula "14"))
         (rule "polySimp_mulComm0" (formula "14") (term "1"))
         (rule "polySimp_rightDist" (formula "14") (term "1"))
         (rule "polySimp_mulLiterals" (formula "14") (term "1,1"))
         (rule "polySimp_elimOne" (formula "14") (term "1,1"))
         (rule "polySimp_mulComm0" (formula "14") (term "0,1"))
         (rule "polySimp_mulLiterals" (formula "14") (term "0,1"))
         (rule "applyEq" (formula "13") (term "1,0,0") (ifseqformula "14"))
         (rule "polySimp_addAssoc" (formula "13") (term "0,0"))
         (rule "polySimp_addComm0" (formula "13") (term "0,0,0"))
         (rule "polySimp_pullOutFactor2b" (formula "13") (term "0,0"))
         (rule "add_literals" (formula "13") (term "1,1,0,0"))
         (rule "times_zero_1" (formula "13") (term "1,0,0"))
         (rule "add_zero_right" (formula "13") (term "0,0"))
         (rule "applyEq" (formula "41") (term "0,0") (ifseqformula "14"))
         (rule "inEqSimp_homoInEq1" (formula "41") (term "0"))
         (rule "polySimp_mulComm0" (formula "41") (term "1,0,0"))
         (rule "polySimp_rightDist" (formula "41") (term "1,0,0"))
         (rule "polySimp_mulAssoc" (formula "41") (term "0,1,0,0"))
         (rule "polySimp_mulComm0" (formula "41") (term "0,0,1,0,0"))
         (rule "polySimp_mulLiterals" (formula "41") (term "0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "41") (term "0,0"))
         (rule "applyEq" (formula "7") (term "1,1") (ifseqformula "14"))
         (rule "polySimp_addAssoc" (formula "7") (term "1"))
         (rule "applyEq" (formula "41") (term "0,1") (ifseqformula "14"))
         (rule "inEqSimp_homoInEq0" (formula "41") (term "1"))
         (rule "polySimp_mulComm0" (formula "41") (term "1,0,1"))
         (rule "polySimp_rightDist" (formula "41") (term "1,0,1"))
         (rule "polySimp_mulAssoc" (formula "41") (term "0,1,0,1"))
         (rule "polySimp_mulComm0" (formula "41") (term "0,0,1,0,1"))
         (rule "polySimp_mulLiterals" (formula "41") (term "0,1,0,1"))
         (rule "polySimp_addAssoc" (formula "41") (term "0,1"))
         (rule "inEqSimp_sepNegMonomial0" (formula "41") (term "0"))
         (rule "polySimp_mulLiterals" (formula "41") (term "0,0"))
         (rule "polySimp_elimOne" (formula "41") (term "0,0"))
         (rule "inEqSimp_sepNegMonomial1" (formula "41") (term "1"))
         (rule "polySimp_mulLiterals" (formula "41") (term "0,1"))
         (rule "polySimp_elimOne" (formula "41") (term "0,1"))
         (rule "Free_class_invariant_axiom_for_de_wiesler_BucketPointers" (formula "15") (inst "b=b"))
          (builtin "One Step Simplification" (formula "15"))
         (rule "expand_inInt" (formula "15") (term "1,0,0,1"))
         (rule "replace_int_MIN" (formula "15") (term "0,1,1,0,0,1"))
         (rule "replace_int_MAX" (formula "15") (term "1,0,1,0,0,1"))
         (rule "andLeft" (formula "15"))
         (rule "andLeft" (formula "15"))
         (rule "andLeft" (formula "15"))
         (rule "andLeft" (formula "17"))
         (rule "andLeft" (formula "15"))
         (rule "andLeft" (formula "15"))
         (rule "andLeft" (formula "17"))
         (rule "andLeft" (formula "17"))
         (rule "andLeft" (formula "17"))
         (rule "translateJavaAddInt" (formula "21") (term "1"))
         (rule "translateJavaCastInt" (formula "22") (term "0"))
         (rule "translateJavaMulInt" (formula "15") (term "1"))
         (rule "translateJavaMulInt" (formula "16") (term "0"))
         (rule "translateJavaCastInt" (formula "19") (term "0"))
         (rule "translateJavaCastInt" (formula "18") (term "1"))
         (rule "polySimp_mulComm0" (formula "15") (term "1"))
         (rule "polySimp_mulComm0" (formula "16") (term "0"))
         (rule "polySimp_addComm0" (formula "20") (term "1"))
         (rule "castedGetAny" (formula "20") (term "0"))
         (rule "castedGetAny" (formula "18") (term "0"))
         (rule "castedGetAny" (formula "17") (term "1"))
         (rule "inEqSimp_ltToLeq" (formula "20") (term "1,0,0,0"))
         (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,1,0,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "20") (term "0,0,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "20") (term "1,1,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "16"))
         (rule "inEqSimp_commuteLeq" (formula "15"))
         (rule "inEqSimp_commuteLeq" (formula "17"))
         (rule "applyEq" (formula "16") (term "0") (ifseqformula "39"))
         (rule "applyEq" (formula "18") (term "0,0") (ifseqformula "39"))
         (rule "applyEq" (formula "17") (term "1") (ifseqformula "39"))
         (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "1,0,0,0"))
         (rule "polySimp_mulComm0" (formula "19") (term "1,1,0,0,0"))
         (rule "polySimp_rightDist" (formula "19") (term "1,1,0,0,0"))
         (rule "mul_literals" (formula "19") (term "0,1,1,0,0,0"))
         (rule "polySimp_mulLiterals" (formula "19") (term "1,1,1,0,0,0"))
         (rule "polySimp_elimOne" (formula "19") (term "1,1,1,0,0,0"))
         (rule "inEqSimp_subsumption6" (formula "16") (ifseqformula "33"))
         (rule "times_zero_1" (formula "16") (term "1,1,0"))
         (rule "greater_literals" (formula "16") (term "0,0"))
          (builtin "One Step Simplification" (formula "16"))
         (rule "leq_literals" (formula "16") (term "0"))
          (builtin "One Step Simplification" (formula "16"))
         (rule "true_left" (formula "16"))
         (rule "inEqSimp_subsumption6" (formula "15") (ifseqformula "30"))
         (rule "times_zero_1" (formula "15") (term "1,1,0"))
         (rule "greater_literals" (formula "15") (term "0,0"))
          (builtin "One Step Simplification" (formula "15"))
         (rule "leq_literals" (formula "15") (term "0"))
          (builtin "One Step Simplification" (formula "15"))
         (rule "true_left" (formula "15"))
         (rule "Contract_axiom_for_nextWriteOf_in_BucketPointers" (formula "12") (term "0,0"))
         (rule "translateJavaAddInt" (formula "12") (term "1,1,1,0,0,1,1"))
         (rule "translateJavaAddInt" (formula "12") (term "1,0,1,0,1,1"))
         (rule "replace_known_left" (formula "12") (term "0,1,1,1") (ifseqformula "13"))
          (builtin "One Step Simplification" (formula "12") (ifInst ""  (formula "21")) (ifInst ""  (formula "22")) (ifInst ""  (formula "43")))
         (rule "polySimp_addComm0" (formula "12") (term "1,0,1,0,1,1"))
         (rule "polySimp_addComm0" (formula "12") (term "1,1,1,0,0,1,1"))
         (rule "replace_known_left" (formula "12") (term "1,0,0,1,1") (ifseqformula "10"))
          (builtin "One Step Simplification" (formula "12"))
         (rule "inEqSimp_ltToLeq" (formula "12") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,1,0,0"))
         (rule "polySimp_addComm1" (formula "12") (term "0,1,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "12") (term "0,0,0"))
         (rule "replace_known_left" (formula "12") (term "0,0,0") (ifseqformula "26"))
          (builtin "One Step Simplification" (formula "12"))
         (rule "inEqSimp_commuteLeq" (formula "12") (term "0,0,0,1,1"))
         (rule "replace_known_left" (formula "12") (term "0,0,0,1,1") (ifseqformula "8"))
          (builtin "One Step Simplification" (formula "12"))
         (rule "inEqSimp_commuteLeq" (formula "12") (term "0,0,1,1"))
         (rule "replace_known_left" (formula "12") (term "0,0,1,1") (ifseqformula "9"))
          (builtin "One Step Simplification" (formula "12"))
         (rule "inEqSimp_commuteLeq" (formula "12") (term "0,1,1"))
         (rule "replace_known_left" (formula "12") (term "0,1,1") (ifseqformula "11"))
          (builtin "One Step Simplification" (formula "12"))
         (rule "inEqSimp_sepNegMonomial0" (formula "12") (term "0,0"))
         (rule "polySimp_mulLiterals" (formula "12") (term "0,0,0"))
         (rule "polySimp_elimOne" (formula "12") (term "0,0,0"))
         (rule "replace_known_left" (formula "12") (term "0,0") (ifseqformula "28"))
          (builtin "One Step Simplification" (formula "12"))
         (rule "Definition_axiom_for_isBlockAligned_in_de_wiesler_Buffers" (formula "13") (term "0"))
          (builtin "One Step Simplification" (formula "13"))
         (rule "translateJavaMod" (formula "13") (term "0"))
         (rule "jmod_axiom" (formula "13") (term "0"))
         (rule "polySimp_mulLiterals" (formula "13") (term "1,0"))
         (rule "polySimp_sepNegMonomial" (formula "13"))
         (rule "polySimp_mulLiterals" (formula "13") (term "0"))
         (rule "newSym_eq" (formula "13") (inst "l=l_3") (inst "newSymDef=mul(de.wiesler.BucketPointers::nextWriteOf(heap,
                                           self,
                                           bucket),
    Z(0(#)))"))
         (rule "times_zero_1" (formula "13") (term "1,1"))
         (rule "add_zero_right" (formula "13") (term "1"))
         (rule "applyEq" (formula "14") (term "0,0") (ifseqformula "13"))
         (rule "eqSymm" (formula "14"))
         (rule "applyEq" (formula "21") (term "0,0,0") (ifseqformula "14"))
         (rule "inEqSimp_homoInEq0" (formula "21") (term "0,0"))
         (rule "polySimp_mulLiterals" (formula "21") (term "1,0,0,0"))
         (rule "polySimp_addComm1" (formula "21") (term "0,0,0"))
         (rule "applyEq" (formula "45") (term "0,1") (ifseqformula "14"))
         (rule "inEqSimp_homoInEq0" (formula "45") (term "1"))
         (rule "polySimp_mulLiterals" (formula "45") (term "1,0,1"))
         (rule "polySimp_addComm1" (formula "45") (term "0,1"))
         (rule "applyEq" (formula "21") (term "0,1,1,0") (ifseqformula "14"))
         (rule "polySimp_mulLiterals" (formula "21") (term "1,1,0"))
         (rule "polySimp_addComm0" (formula "21") (term "1,0"))
         (rule "applyEq" (formula "10") (term "0") (ifseqformula "14"))
         (rule "inEqSimp_commuteLeq" (formula "10"))
         (rule "applyEq" (formula "7") (term "1,1") (ifseqformula "14"))
         (rule "polySimp_addComm1" (formula "7") (term "1"))
         (rule "applyEq" (formula "9") (term "0") (ifseqformula "14"))
         (rule "inEqSimp_commuteGeq" (formula "9"))
         (rule "applyEq" (formula "45") (term "0,0") (ifseqformula "14"))
         (rule "inEqSimp_homoInEq1" (formula "45") (term "0"))
         (rule "polySimp_mulLiterals" (formula "45") (term "1,0,0"))
         (rule "polySimp_addComm1" (formula "45") (term "0,0"))
         (rule "applyEq" (formula "13") (term "0,0") (ifseqformula "14"))
         (rule "applyEq" (formula "16") (term "1,1") (ifseqformula "14"))
         (rule "polySimp_addComm0" (formula "16") (term "1"))
         (rule "inEqSimp_sepPosMonomial1" (formula "21") (term "0,0"))
         (rule "polySimp_mulComm0" (formula "21") (term "1,0,0"))
         (rule "polySimp_rightDist" (formula "21") (term "1,0,0"))
         (rule "polySimp_mulLiterals" (formula "21") (term "1,1,0,0"))
         (rule "mul_literals" (formula "21") (term "0,1,0,0"))
         (rule "inEqSimp_sepNegMonomial1" (formula "45") (term "1"))
         (rule "polySimp_mulLiterals" (formula "45") (term "0,1"))
         (rule "inEqSimp_sepNegMonomial0" (formula "45") (term "0"))
         (rule "polySimp_mulLiterals" (formula "45") (term "0,0"))
         (rule "elimGcdGeq" (formula "45") (term "0") (inst "elimGcdRightDiv=add(Z(neglit(7(0(6(8(8(3(8(#))))))))),
    mul(l_3, Z(neglit(1(#)))))") (inst "elimGcdLeftDiv=l_2") (inst "elimGcd=Z(6(5(2(#))))"))
         (rule "sub_literals" (formula "45") (term "0,0,0,0,0,0,0,0"))
         (rule "polySimp_mulLiterals" (formula "45") (term "1,0,1,0,0"))
         (rule "polySimp_mulLiterals" (formula "45") (term "1,0,0,0,0"))
         (rule "mul_literals" (formula "45") (term "0,0,0,0,0,1,0,0"))
         (rule "mul_literals" (formula "45") (term "0,1,0,0,0,0,0,0,0"))
         (rule "polySimp_pullOutFactor0b" (formula "45") (term "0,1,0,0"))
         (rule "add_literals" (formula "45") (term "1,1,0,1,0,0"))
         (rule "times_zero_1" (formula "45") (term "1,0,1,0,0"))
         (rule "add_zero_right" (formula "45") (term "0,1,0,0"))
         (rule "polySimp_pullOutFactor0b" (formula "45") (term "0,0,0,0"))
         (rule "add_literals" (formula "45") (term "1,1,0,0,0,0"))
         (rule "times_zero_1" (formula "45") (term "1,0,0,0,0"))
         (rule "add_zero_right" (formula "45") (term "0,0,0,0"))
         (rule "polySimp_rightDist" (formula "45") (term "0,0,1,0,0"))
         (rule "polySimp_mulLiterals" (formula "45") (term "1,0,0,1,0,0"))
         (rule "mul_literals" (formula "45") (term "0,0,0,1,0,0"))
         (rule "polySimp_rightDist" (formula "45") (term "1,0,0,0,0,0"))
         (rule "polySimp_mulLiterals" (formula "45") (term "1,1,0,0,0,0,0"))
         (rule "mul_literals" (formula "45") (term "0,1,0,0,0,0,0"))
         (rule "polySimp_addAssoc" (formula "45") (term "0,1,0,0"))
         (rule "polySimp_addComm1" (formula "45") (term "0,0,1,0,0"))
         (rule "add_literals" (formula "45") (term "0,0,0,1,0,0"))
         (rule "add_zero_left" (formula "45") (term "0,0,1,0,0"))
         (rule "polySimp_pullOutFactor0" (formula "45") (term "0,1,0,0"))
         (rule "add_literals" (formula "45") (term "1,0,1,0,0"))
         (rule "times_zero_1" (formula "45") (term "0,1,0,0"))
         (rule "leq_literals" (formula "45") (term "1,0,0"))
          (builtin "One Step Simplification" (formula "45"))
         (rule "polySimp_addAssoc" (formula "45") (term "0,0,0,0"))
         (rule "add_literals" (formula "45") (term "0,0,0,0,0"))
         (rule "polySimp_addAssoc" (formula "45") (term "0,0,0"))
         (rule "polySimp_addComm1" (formula "45") (term "0,0,0,0"))
         (rule "add_literals" (formula "45") (term "0,0,0,0,0"))
         (rule "polySimp_pullOutFactor0b" (formula "45") (term "0,0,0"))
         (rule "add_literals" (formula "45") (term "1,1,0,0,0"))
         (rule "times_zero_1" (formula "45") (term "1,0,0,0"))
         (rule "add_zero_right" (formula "45") (term "0,0,0"))
         (rule "qeq_literals" (formula "45") (term "0,0"))
          (builtin "One Step Simplification" (formula "45"))
         (rule "elimGcdLeq" (formula "45") (term "1") (inst "elimGcdRightDiv=add(Z(8(0(6(8(8(3(8(#)))))))),
    mul(l_3, Z(neglit(1(#)))))") (inst "elimGcdLeftDiv=l_2") (inst "elimGcd=Z(6(5(2(#))))"))
         (rule "polySimp_mulLiterals" (formula "45") (term "1,0,1,0,1"))
         (rule "sub_literals" (formula "45") (term "0,0,0,0,0,0,0,1"))
         (rule "mul_literals" (formula "45") (term "0,0,0,0,0,1,0,1"))
         (rule "polySimp_mulLiterals" (formula "45") (term "1,0,0,0,1"))
         (rule "mul_literals" (formula "45") (term "0,1,0,0,0,0,0,0,1"))
         (rule "polySimp_pullOutFactor0b" (formula "45") (term "0,1,0,1"))
         (rule "add_literals" (formula "45") (term "1,1,0,1,0,1"))
         (rule "times_zero_1" (formula "45") (term "1,0,1,0,1"))
         (rule "add_zero_right" (formula "45") (term "0,1,0,1"))
         (rule "polySimp_pullOutFactor0b" (formula "45") (term "0,0,0,1"))
         (rule "add_literals" (formula "45") (term "1,1,0,0,0,1"))
         (rule "times_zero_1" (formula "45") (term "1,0,0,0,1"))
         (rule "add_zero_right" (formula "45") (term "0,0,0,1"))
         (rule "polySimp_rightDist" (formula "45") (term "0,0,1,0,1"))
         (rule "polySimp_mulLiterals" (formula "45") (term "1,0,0,1,0,1"))
         (rule "mul_literals" (formula "45") (term "0,0,0,1,0,1"))
         (rule "polySimp_rightDist" (formula "45") (term "1,0,0,0,0,1"))
         (rule "mul_literals" (formula "45") (term "0,1,0,0,0,0,1"))
         (rule "polySimp_mulLiterals" (formula "45") (term "1,1,0,0,0,0,1"))
         (rule "polySimp_addAssoc" (formula "45") (term "0,1,0,1"))
         (rule "polySimp_addComm1" (formula "45") (term "0,0,1,0,1"))
         (rule "add_literals" (formula "45") (term "0,0,0,1,0,1"))
         (rule "polySimp_pullOutFactor0b" (formula "45") (term "0,1,0,1"))
         (rule "add_literals" (formula "45") (term "1,1,0,1,0,1"))
         (rule "times_zero_1" (formula "45") (term "1,0,1,0,1"))
         (rule "add_zero_right" (formula "45") (term "0,1,0,1"))
         (rule "qeq_literals" (formula "45") (term "1,0,1"))
          (builtin "One Step Simplification" (formula "45"))
         (rule "polySimp_addAssoc" (formula "45") (term "0,0,0,1"))
         (rule "add_literals" (formula "45") (term "0,0,0,0,1"))
         (rule "polySimp_addAssoc" (formula "45") (term "0,0,1"))
         (rule "polySimp_addComm1" (formula "45") (term "0,0,0,1"))
         (rule "add_literals" (formula "45") (term "0,0,0,0,1"))
         (rule "add_zero_left" (formula "45") (term "0,0,0,1"))
         (rule "polySimp_pullOutFactor0" (formula "45") (term "0,0,1"))
         (rule "add_literals" (formula "45") (term "1,0,0,1"))
         (rule "times_zero_1" (formula "45") (term "0,0,1"))
         (rule "leq_literals" (formula "45") (term "0,1"))
          (builtin "One Step Simplification" (formula "45"))
         (rule "inEqSimp_exactShadow3" (formula "8") (ifseqformula "9"))
         (rule "times_zero_1" (formula "8") (term "0,0"))
         (rule "add_zero_left" (formula "8") (term "0"))
         (rule "elimGcdGeq_antec" (formula "8") (inst "elimGcdRightDiv=Z(0(#))") (inst "elimGcdLeftDiv=l_3") (inst "elimGcd=Z(6(5(2(#))))"))
         (rule "polySimp_mulLiterals" (formula "8") (term "1,0,1,0"))
         (rule "add_zero_right" (formula "8") (term "0,0,0,1,0"))
         (rule "leq_literals" (formula "8") (term "0,0"))
          (builtin "One Step Simplification" (formula "8"))
         (rule "times_zero_1" (formula "8") (term "1,0,0,0,0"))
         (rule "add_zero_right" (formula "8") (term "0,0,0,0"))
         (rule "polySimp_pullOutFactor0b" (formula "8") (term "0,0"))
         (rule "add_literals" (formula "8") (term "1,1,0,0"))
         (rule "times_zero_1" (formula "8") (term "1,0,0"))
         (rule "add_zero_right" (formula "8") (term "0,0"))
         (rule "leq_literals" (formula "8") (term "0"))
          (builtin "One Step Simplification" (formula "8"))
         (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "12") (term "0"))
         (rule "translateJavaCastInt" (formula "12") (term "0,0"))
         (rule "castedGetAny" (formula "12") (term "0,0"))
         (rule "Contract_axiom_for_bucketStart_in_BucketPointers" (formula "12") (term "1"))
          (builtin "One Step Simplification" (formula "12") (ifInst ""  (formula "46")))
         (rule "translateJavaSubInt" (formula "12") (term "1,0,1,1,1,1,1"))
         (rule "translateJavaAddInt" (formula "12") (term "1,1,1,0,1,1,1"))
         (rule "polySimp_elimSub" (formula "12") (term "1,0,1,1,1,1,1"))
         (rule "mul_literals" (formula "12") (term "1,1,0,1,1,1,1,1"))
         (rule "polySimp_addComm1" (formula "12") (term "1,1,1,0,1,1,1"))
         (rule "add_literals" (formula "12") (term "0,1,1,1,0,1,1,1"))
         (rule "polySimp_addComm1" (formula "12") (term "1,0,1,1,1,1,1"))
         (rule "add_literals" (formula "12") (term "0,1,0,1,1,1,1,1"))
         (rule "add_zero_left" (formula "12") (term "1,0,1,1,1,1,1"))
         (rule "inEqSimp_ltToLeq" (formula "12") (term "0,0,1,1,1,1"))
         (rule "add_zero_right" (formula "12") (term "0,0,0,1,1,1,1"))
         (rule "polySimp_rightDist" (formula "12") (term "1,0,0,0,1,1,1,1"))
         (rule "mul_literals" (formula "12") (term "0,1,0,0,0,1,1,1,1"))
         (rule "polySimp_addAssoc" (formula "12") (term "0,0,0,1,1,1,1"))
         (rule "add_literals" (formula "12") (term "0,0,0,0,1,1,1,1"))
         (rule "add_zero_left" (formula "12") (term "0,0,0,1,1,1,1"))
         (rule "inEqSimp_ltToLeq" (formula "12") (term "0,0,1,1,1"))
         (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0,0,1,1,1"))
         (rule "polySimp_addComm1" (formula "12") (term "0,0,0,1,1,1"))
         (rule "polySimp_addAssoc" (formula "12") (term "0,0,0,0,1,1,1"))
         (rule "add_literals" (formula "12") (term "0,0,0,0,0,1,1,1"))
         (rule "inEqSimp_commuteLeq" (formula "12") (term "1,0,0,1"))
         (rule "inEqSimp_commuteLeq" (formula "12") (term "1,0,1,1,1,1"))
         (rule "replace_known_left" (formula "12") (term "1,0,1,1,1,1") (ifseqformula "31"))
          (builtin "One Step Simplification" (formula "12"))
         (rule "inEqSimp_commuteLeq" (formula "12") (term "1,1,1,1,1"))
         (rule "replace_known_left" (formula "12") (term "1,1,1,1,1") (ifseqformula "1"))
          (builtin "One Step Simplification" (formula "12"))
         (rule "inEqSimp_commuteLeq" (formula "12") (term "0,0,0,1"))
         (rule "inEqSimp_commuteLeq" (formula "12") (term "1,1,1,1"))
         (rule "inEqSimp_commuteLeq" (formula "12") (term "1,0,0"))
         (rule "replace_known_left" (formula "12") (term "1,0,0") (ifseqformula "31"))
          (builtin "One Step Simplification" (formula "12"))
         (rule "inEqSimp_homoInEq0" (formula "12") (term "0,0"))
         (rule "times_zero_2" (formula "12") (term "1,0,0,0"))
         (rule "add_zero_right" (formula "12") (term "0,0,0"))
         (rule "inEqSimp_sepNegMonomial0" (formula "12") (term "0,1,1,1"))
         (rule "polySimp_mulLiterals" (formula "12") (term "0,0,1,1,1"))
         (rule "polySimp_elimOne" (formula "12") (term "0,0,1,1,1"))
         (rule "inEqSimp_sepPosMonomial1" (formula "12") (term "0,0"))
         (rule "mul_literals" (formula "12") (term "1,0,0"))
         (rule "inEqSimp_subsumption1" (formula "12") (term "0,0") (ifseqformula "29"))
         (rule "leq_literals" (formula "12") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "12"))
         (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "13") (term "1"))
         (rule "translateJavaCastInt" (formula "13") (term "0,1"))
         (rule "castedGetAny" (formula "13") (term "0,1"))
         (rule "Contract_axiom_for_bucketStart_in_BucketPointers" (formula "9") (term "0"))
          (builtin "One Step Simplification" (formula "9") (ifInst ""  (formula "47")))
         (rule "translateJavaAddInt" (formula "9") (term "1,1,1,0,1,1,1"))
         (rule "translateJavaSubInt" (formula "9") (term "1,0,1,1,1,1,1"))
         (rule "polySimp_elimSub" (formula "9") (term "1,0,1,1,1,1,1"))
         (rule "mul_literals" (formula "9") (term "1,1,0,1,1,1,1,1"))
         (rule "polySimp_addComm0" (formula "9") (term "1,1,1,0,1,1,1"))
         (rule "polySimp_addComm0" (formula "9") (term "1,0,1,1,1,1,1"))
         (rule "inEqSimp_ltToLeq" (formula "9") (term "0,0,1,1,1,1"))
         (rule "add_zero_right" (formula "9") (term "0,0,0,1,1,1,1"))
         (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,0,1,1,1,1"))
         (rule "inEqSimp_ltToLeq" (formula "9") (term "0,0,1,1,1"))
         (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,0,0,1,1,1"))
         (rule "polySimp_addComm1" (formula "9") (term "0,0,0,1,1,1"))
         (rule "inEqSimp_commuteLeq" (formula "9") (term "1,0,1,1,1,1"))
         (rule "inEqSimp_commuteLeq" (formula "9") (term "0,0,0,1"))
         (rule "replace_known_left" (formula "9") (term "0,0,0,1") (ifseqformula "10"))
          (builtin "One Step Simplification" (formula "9"))
         (rule "inEqSimp_commuteLeq" (formula "9") (term "1,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "9") (term "0,0,1"))
         (rule "inEqSimp_commuteLeq" (formula "9") (term "0,0,0"))
         (rule "replace_known_left" (formula "9") (term "0,0,0") (ifseqformula "30"))
          (builtin "One Step Simplification" (formula "9"))
         (rule "inEqSimp_commuteLeq" (formula "9") (term "1,0,1,1,1"))
         (rule "replace_known_left" (formula "9") (term "1,0,1,1,1") (ifseqformula "1"))
          (builtin "One Step Simplification" (formula "9"))
         (rule "inEqSimp_sepNegMonomial0" (formula "9") (term "0,0,1,1,1"))
         (rule "polySimp_mulLiterals" (formula "9") (term "0,0,0,1,1,1"))
         (rule "polySimp_elimOne" (formula "9") (term "0,0,0,1,1,1"))
         (rule "inEqSimp_subsumption1" (formula "9") (term "1,0,1,1,1") (ifseqformula "32"))
         (rule "inEqSimp_homoInEq0" (formula "9") (term "0,1,0,1,1,1"))
         (rule "polySimp_pullOutFactor1b" (formula "9") (term "0,0,1,0,1,1,1"))
         (rule "add_literals" (formula "9") (term "1,1,0,0,1,0,1,1,1"))
         (rule "times_zero_1" (formula "9") (term "1,0,0,1,0,1,1,1"))
         (rule "add_zero_right" (formula "9") (term "0,0,1,0,1,1,1"))
         (rule "qeq_literals" (formula "9") (term "0,1,0,1,1,1"))
          (builtin "One Step Simplification" (formula "9"))
         (rule "inEqSimp_subsumption1" (formula "9") (term "0,0") (ifseqformula "32"))
         (rule "inEqSimp_homoInEq0" (formula "9") (term "0,0,0"))
         (rule "polySimp_pullOutFactor1b" (formula "9") (term "0,0,0,0"))
         (rule "add_literals" (formula "9") (term "1,1,0,0,0,0"))
         (rule "times_zero_1" (formula "9") (term "1,0,0,0,0"))
         (rule "add_zero_right" (formula "9") (term "0,0,0,0"))
         (rule "qeq_literals" (formula "9") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "9"))
         (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "10") (term "0"))
         (rule "translateJavaCastInt" (formula "10") (term "0,0"))
         (rule "castedGetAny" (formula "10") (term "0,0"))
         (rule "Contract_axiom_for_lastReadOf_in_BucketPointers" (formula "3") (term "0"))
         (rule "translateJavaAddInt" (formula "3") (term "1,1,1,0,0,1,1"))
         (rule "translateJavaAddInt" (formula "3") (term "1,0,1,0,1,1"))
         (rule "replace_known_left" (formula "3") (term "0,1,1,1,1,1") (ifseqformula "7"))
          (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "26")) (ifInst ""  (formula "27")) (ifInst ""  (formula "48")))
         (rule "polySimp_addComm0" (formula "3") (term "1,1,1,0,0,1,1"))
         (rule "replace_known_left" (formula "3") (term "1,0,0,1,1") (ifseqformula "4"))
          (builtin "One Step Simplification" (formula "3"))
         (rule "polySimp_addComm0" (formula "3") (term "1,0,1,0,1,1"))
         (rule "inEqSimp_ltToLeq" (formula "3") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "3") (term "1,0,0,1,0,0"))
         (rule "polySimp_addComm1" (formula "3") (term "0,1,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "3") (term "0,1,1,1,1"))
         (rule "inEqSimp_commuteLeq" (formula "3") (term "0,0,0,1,1"))
         (rule "inEqSimp_commuteLeq" (formula "3") (term "0,0,1,1,1"))
         (rule "inEqSimp_commuteLeq" (formula "3") (term "1,0,0,1,1"))
         (rule "replace_known_left" (formula "3") (term "1,0,0,1,1") (ifseqformula "2"))
          (builtin "One Step Simplification" (formula "3"))
         (rule "inEqSimp_commuteLeq" (formula "3") (term "1,0,1,1"))
         (rule "inEqSimp_commuteLeq" (formula "3") (term "0,0,0"))
         (rule "replace_known_left" (formula "3") (term "0,0,0") (ifseqformula "31"))
          (builtin "One Step Simplification" (formula "3"))
         (rule "applyEq" (formula "3") (term "1,0,1,1,1,1") (ifseqformula "42"))
         (rule "replace_known_left" (formula "3") (term "0,1,1,1,1") (ifseqformula "6"))
          (builtin "One Step Simplification" (formula "3"))
         (rule "applyEq" (formula "3") (term "0,0,0,1,1,1") (ifseqformula "42"))
         (rule "inEqSimp_commuteGeq" (formula "3") (term "0,0,1,1,1"))
         (rule "replace_known_left" (formula "3") (term "0,1,1,1") (ifseqformula "5"))
          (builtin "One Step Simplification" (formula "3"))
         (rule "inEqSimp_sepNegMonomial0" (formula "3") (term "0,0"))
         (rule "polySimp_mulLiterals" (formula "3") (term "0,0,0"))
         (rule "polySimp_elimOne" (formula "3") (term "0,0,0"))
         (rule "replace_known_left" (formula "3") (term "0,0") (ifseqformula "33"))
          (builtin "One Step Simplification" (formula "3"))
         (rule "Definition_axiom_for_lastReadOf_in_de_wiesler_BucketPointers" (formula "2") (term "0"))
         (rule "translateJavaMulInt" (formula "2") (term "0,2,0"))
         (rule "polySimp_mulComm0" (formula "2") (term "0,2,0"))
         (rule "applyEq" (formula "2") (term "0") (ifseqformula "20"))
         (rule "inEqSimp_commuteGeq" (formula "2"))
         (rule "Contract_axiom_for_bucketStart_in_BucketPointers" (formula "4") (term "1"))
          (builtin "One Step Simplification" (formula "4") (ifInst ""  (formula "49")))
         (rule "translateJavaAddInt" (formula "4") (term "1,1,1,0,1,1,1"))
         (rule "translateJavaSubInt" (formula "4") (term "1,0,1,1,1,1,1"))
         (rule "polySimp_elimSub" (formula "4") (term "1,0,1,1,1,1,1"))
         (rule "mul_literals" (formula "4") (term "1,1,0,1,1,1,1,1"))
         (rule "polySimp_addComm1" (formula "4") (term "1,1,1,0,1,1,1"))
         (rule "add_literals" (formula "4") (term "0,1,1,1,0,1,1,1"))
         (rule "polySimp_addComm1" (formula "4") (term "1,0,1,1,1,1,1"))
         (rule "add_literals" (formula "4") (term "0,1,0,1,1,1,1,1"))
         (rule "add_zero_left" (formula "4") (term "1,0,1,1,1,1,1"))
         (rule "inEqSimp_ltToLeq" (formula "4") (term "0,0,1,1,1,1"))
         (rule "add_zero_right" (formula "4") (term "0,0,0,1,1,1,1"))
         (rule "polySimp_rightDist" (formula "4") (term "1,0,0,0,1,1,1,1"))
         (rule "mul_literals" (formula "4") (term "0,1,0,0,0,1,1,1,1"))
         (rule "polySimp_addAssoc" (formula "4") (term "0,0,0,1,1,1,1"))
         (rule "add_literals" (formula "4") (term "0,0,0,0,1,1,1,1"))
         (rule "add_zero_left" (formula "4") (term "0,0,0,1,1,1,1"))
         (rule "inEqSimp_ltToLeq" (formula "4") (term "0,0,1,1,1"))
         (rule "polySimp_mulComm0" (formula "4") (term "1,0,0,0,0,1,1,1"))
         (rule "polySimp_addComm1" (formula "4") (term "0,0,0,1,1,1"))
         (rule "polySimp_addAssoc" (formula "4") (term "0,0,0,0,1,1,1"))
         (rule "add_literals" (formula "4") (term "0,0,0,0,0,1,1,1"))
         (rule "inEqSimp_commuteLeq" (formula "4") (term "1,0,0"))
         (rule "replace_known_left" (formula "4") (term "1,0,0") (ifseqformula "34"))
          (builtin "One Step Simplification" (formula "4"))
         (rule "inEqSimp_commuteLeq" (formula "4") (term "1,1,1,1,1"))
         (rule "replace_known_left" (formula "4") (term "1,1,1,1,1") (ifseqformula "1"))
          (builtin "One Step Simplification" (formula "4"))
         (rule "inEqSimp_commuteLeq" (formula "4") (term "1,1,1,1"))
         (rule "inEqSimp_commuteLeq" (formula "4") (term "0,0,0,1"))
         (rule "inEqSimp_commuteLeq" (formula "4") (term "1,0,0,1"))
         (rule "inEqSimp_homoInEq0" (formula "4") (term "0,0"))
         (rule "times_zero_2" (formula "4") (term "1,0,0,0"))
         (rule "add_zero_right" (formula "4") (term "0,0,0"))
         (rule "inEqSimp_sepNegMonomial0" (formula "4") (term "0,1,1,1"))
         (rule "polySimp_mulLiterals" (formula "4") (term "0,0,1,1,1"))
         (rule "polySimp_elimOne" (formula "4") (term "0,0,1,1,1"))
         (rule "inEqSimp_sepPosMonomial1" (formula "4") (term "0,0"))
         (rule "mul_literals" (formula "4") (term "1,0,0"))
         (rule "inEqSimp_subsumption1" (formula "4") (term "0,0") (ifseqformula "32"))
         (rule "leq_literals" (formula "4") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "4") (ifInst ""  (formula "15")))
         (rule "true_left" (formula "4"))
         (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "4") (term "1"))
         (rule "translateJavaCastInt" (formula "4") (term "0,1"))
         (rule "castedGetAny" (formula "4") (term "0,1"))
         (rule "inEqSimp_commuteLeq" (formula "4"))
         (rule "Definition_axiom_for_lastReadOf_in_de_wiesler_BucketPointers" (formula "5") (term "0,1"))
         (rule "translateJavaMulInt" (formula "5") (term "0,2,0,1"))
         (rule "polySimp_mulComm0" (formula "5") (term "0,2,0,1"))
         (rule "applyEq" (formula "5") (term "0,1") (ifseqformula "20"))
         (rule "eqSymm" (formula "5") (term "1"))
         (rule "Contract_axiom_for_lastReadOf_in_BucketPointers" (formula "5") (term "0,0"))
         (rule "translateJavaAddInt" (formula "5") (term "1,0,1,0,1,1"))
         (rule "translateJavaAddInt" (formula "5") (term "1,1,1,0,0,1,1"))
         (rule "replace_known_right" (formula "5") (term "0,1,0") (ifseqformula "49"))
          (builtin "One Step Simplification" (formula "5") (ifInst ""  (formula "27")) (ifInst ""  (formula "28")) (ifInst ""  (formula "8")))
         (rule "polySimp_addComm0" (formula "5") (term "1,1,1,0,0,1,1"))
         (rule "polySimp_addComm0" (formula "5") (term "1,0,1,0,1,1"))
         (rule "inEqSimp_ltToLeq" (formula "5") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "5") (term "1,0,0,1,0,0"))
         (rule "polySimp_addComm1" (formula "5") (term "0,1,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "5") (term "0,0,0,0,1,1"))
         (rule "inEqSimp_commuteLeq" (formula "5") (term "0,0,1,1,1"))
         (rule "inEqSimp_commuteLeq" (formula "5") (term "0,1,1,1,1"))
         (rule "inEqSimp_commuteLeq" (formula "5") (term "1,0,0,0,1,1"))
         (rule "inEqSimp_commuteLeq" (formula "5") (term "0,0,0"))
         (rule "replace_known_left" (formula "5") (term "0,0,0") (ifseqformula "32"))
          (builtin "One Step Simplification" (formula "5"))
         (rule "inEqSimp_commuteLeq" (formula "5") (term "1,0,1,1"))
         (rule "applyEq" (formula "5") (term "1,0,1,1,1,1") (ifseqformula "43"))
         (rule "replace_known_left" (formula "5") (term "0,1,1,1,1") (ifseqformula "7"))
          (builtin "One Step Simplification" (formula "5"))
         (rule "applyEq" (formula "5") (term "0,0,0,1,1,1") (ifseqformula "43"))
         (rule "inEqSimp_commuteGeq" (formula "5") (term "0,0,1,1,1"))
         (rule "inEqSimp_sepNegMonomial0" (formula "5") (term "0,0"))
         (rule "polySimp_mulLiterals" (formula "5") (term "0,0,0"))
         (rule "polySimp_elimOne" (formula "5") (term "0,0,0"))
         (rule "replace_known_left" (formula "5") (term "0,0") (ifseqformula "34"))
          (builtin "One Step Simplification" (formula "5"))
         (rule "Definition_axiom_for_lastReadOf_in_de_wiesler_BucketPointers" (formula "6") (term "0,0"))
         (rule "translateJavaMulInt" (formula "6") (term "0,2,0,0"))
         (rule "polySimp_mulComm0" (formula "6") (term "0,2,0,0"))
         (rule "applyEq" (formula "6") (term "0,0") (ifseqformula "21"))
         (rule "inEqSimp_commuteLeq" (formula "6") (term "0"))
         (rule "elimGcdGeq" (formula "6") (term "0") (inst "elimGcdRightDiv=add(l_3, l_2)") (inst "elimGcdLeftDiv=l_0") (inst "elimGcd=Z(6(5(2(#))))"))
         (rule "sub_literals" (formula "6") (term "0,0,0,0,0,0,0,0"))
         (rule "mul_literals" (formula "6") (term "0,0,0,0,0,1,0,0"))
         (rule "polySimp_mulLiterals" (formula "6") (term "1,0,0,0,0"))
         (rule "mul_literals" (formula "6") (term "0,1,0,0,0,0,0,0,0"))
         (rule "polySimp_mulLiterals" (formula "6") (term "1,0,1,0,0"))
         (rule "polySimp_pullOutFactor0b" (formula "6") (term "0,0,0,0"))
         (rule "add_literals" (formula "6") (term "1,1,0,0,0,0"))
         (rule "times_zero_1" (formula "6") (term "1,0,0,0,0"))
         (rule "add_zero_right" (formula "6") (term "0,0,0,0"))
         (rule "polySimp_pullOutFactor0b" (formula "6") (term "0,1,0,0"))
         (rule "add_literals" (formula "6") (term "1,1,0,1,0,0"))
         (rule "times_zero_1" (formula "6") (term "1,0,1,0,0"))
         (rule "add_zero_right" (formula "6") (term "0,1,0,0"))
         (rule "polySimp_rightDist" (formula "6") (term "1,0,0,0,0,0"))
         (rule "polySimp_mulComm0" (formula "6") (term "0,1,0,0,0,0,0"))
         (rule "polySimp_rightDist" (formula "6") (term "0,0,1,0,0"))
         (rule "polySimp_mulComm0" (formula "6") (term "0,0,0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "6") (term "0,0,0,0,0"))
         (rule "polySimp_addAssoc" (formula "6") (term "0,1,0,0"))
         (rule "polySimp_addComm1" (formula "6") (term "0,0,1,0,0"))
         (rule "polySimp_pullOutFactor0" (formula "6") (term "0,0,0,1,0,0"))
         (rule "add_literals" (formula "6") (term "1,0,0,0,1,0,0"))
         (rule "times_zero_1" (formula "6") (term "0,0,0,1,0,0"))
         (rule "add_zero_left" (formula "6") (term "0,0,1,0,0"))
         (rule "polySimp_pullOutFactor0" (formula "6") (term "0,1,0,0"))
         (rule "add_literals" (formula "6") (term "1,0,1,0,0"))
         (rule "times_zero_1" (formula "6") (term "0,1,0,0"))
         (rule "leq_literals" (formula "6") (term "1,0,0"))
          (builtin "One Step Simplification" (formula "6"))
         (rule "polySimp_addAssoc" (formula "6") (term "0,0,0"))
         (rule "polySimp_addComm1" (formula "6") (term "0,0,0,0"))
         (rule "polySimp_pullOutFactor0b" (formula "6") (term "0,0,0,0,0"))
         (rule "add_literals" (formula "6") (term "1,1,0,0,0,0,0"))
         (rule "times_zero_1" (formula "6") (term "1,0,0,0,0,0"))
         (rule "add_zero_right" (formula "6") (term "0,0,0,0,0"))
         (rule "polySimp_pullOutFactor0b" (formula "6") (term "0,0,0"))
         (rule "add_literals" (formula "6") (term "1,1,0,0,0"))
         (rule "times_zero_1" (formula "6") (term "1,0,0,0"))
         (rule "add_zero_right" (formula "6") (term "0,0,0"))
         (rule "qeq_literals" (formula "6") (term "0,0"))
          (builtin "One Step Simplification" (formula "6"))
         (rule "Contract_axiom_for_bucketStart_in_BucketPointers" (formula "7") (term "0"))
          (builtin "One Step Simplification" (formula "7") (ifInst ""  (formula "50")))
         (rule "translateJavaAddInt" (formula "7") (term "1,1,1,0,1,1,1"))
         (rule "translateJavaSubInt" (formula "7") (term "1,0,1,1,1,1,1"))
         (rule "polySimp_elimSub" (formula "7") (term "1,0,1,1,1,1,1"))
         (rule "mul_literals" (formula "7") (term "1,1,0,1,1,1,1,1"))
         (rule "polySimp_addComm0" (formula "7") (term "1,1,1,0,1,1,1"))
         (rule "polySimp_addComm0" (formula "7") (term "1,0,1,1,1,1,1"))
         (rule "inEqSimp_ltToLeq" (formula "7") (term "0,0,1,1,1,1"))
         (rule "add_zero_right" (formula "7") (term "0,0,0,1,1,1,1"))
         (rule "polySimp_mulComm0" (formula "7") (term "1,0,0,0,1,1,1,1"))
         (rule "inEqSimp_ltToLeq" (formula "7") (term "0,0,1,1,1"))
         (rule "polySimp_mulComm0" (formula "7") (term "1,0,0,0,0,1,1,1"))
         (rule "polySimp_pullOutFactor2b" (formula "7") (term "0,0,0,1,1,1"))
         (rule "add_literals" (formula "7") (term "1,1,0,0,0,1,1,1"))
         (rule "times_zero_1" (formula "7") (term "1,0,0,0,1,1,1"))
         (rule "add_zero_right" (formula "7") (term "0,0,0,1,1,1"))
         (rule "leq_literals" (formula "7") (term "0,0,1,1,1"))
          (builtin "One Step Simplification" (formula "7"))
         (rule "inEqSimp_commuteLeq" (formula "7") (term "0,0,0,1"))
         (rule "inEqSimp_commuteLeq" (formula "7") (term "0,0,0"))
         (rule "replace_known_left" (formula "7") (term "0,0,0") (ifseqformula "37"))
          (builtin "One Step Simplification" (formula "7"))
         (rule "inEqSimp_homoInEq0" (formula "7") (term "1,0,0,1"))
         (rule "polySimp_pullOutFactor1" (formula "7") (term "0,1,0,0,1"))
         (rule "add_literals" (formula "7") (term "1,0,1,0,0,1"))
         (rule "times_zero_1" (formula "7") (term "0,1,0,0,1"))
         (rule "qeq_literals" (formula "7") (term "1,0,0,1"))
          (builtin "One Step Simplification" (formula "7"))
         (rule "inEqSimp_homoInEq0" (formula "7") (term "0,0"))
         (rule "polySimp_pullOutFactor1" (formula "7") (term "0,0,0"))
         (rule "add_literals" (formula "7") (term "1,0,0,0"))
         (rule "times_zero_1" (formula "7") (term "0,0,0"))
         (rule "qeq_literals" (formula "7") (term "0,0"))
          (builtin "One Step Simplification" (formula "7"))
         (rule "inEqSimp_homoInEq0" (formula "7") (term "1,0,1,1,1"))
         (rule "polySimp_pullOutFactor1" (formula "7") (term "0,1,0,1,1,1"))
         (rule "add_literals" (formula "7") (term "1,0,1,0,1,1,1"))
         (rule "times_zero_1" (formula "7") (term "0,1,0,1,1,1"))
         (rule "qeq_literals" (formula "7") (term "1,0,1,1,1"))
          (builtin "One Step Simplification" (formula "7"))
         (rule "inEqSimp_sepNegMonomial0" (formula "7") (term "0,1,1,1"))
         (rule "polySimp_mulLiterals" (formula "7") (term "0,0,1,1,1"))
         (rule "polySimp_elimOne" (formula "7") (term "0,0,1,1,1"))
         (rule "Contract_axiom_for_lastReadOf_in_BucketPointers" (formula "9") (term "0,0"))
         (rule "translateJavaAddInt" (formula "9") (term "1,0,1,0,1,1"))
         (rule "translateJavaAddInt" (formula "9") (term "1,1,1,0,0,1,1"))
         (rule "replace_known_right" (formula "9") (term "0,1,0") (ifseqformula "51"))
          (builtin "One Step Simplification" (formula "9") (ifInst ""  (formula "29")) (ifInst ""  (formula "30")) (ifInst ""  (formula "10")))
         (rule "polySimp_addComm0" (formula "9") (term "1,1,1,0,0,1,1"))
         (rule "polySimp_addComm0" (formula "9") (term "1,0,1,0,1,1"))
         (rule "inEqSimp_ltToLeq" (formula "9") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,1,0,0"))
         (rule "polySimp_addComm1" (formula "9") (term "0,1,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "9") (term "0,1,1,1,1"))
         (rule "inEqSimp_commuteLeq" (formula "9") (term "1,0,0,0,1,1"))
         (rule "inEqSimp_commuteLeq" (formula "9") (term "0,0,1,1,1"))
         (rule "inEqSimp_commuteLeq" (formula "9") (term "0,0,0,0,1,1"))
         (rule "inEqSimp_commuteLeq" (formula "9") (term "0,0,0"))
         (rule "replace_known_left" (formula "9") (term "0,0,0") (ifseqformula "34"))
          (builtin "One Step Simplification" (formula "9"))
         (rule "inEqSimp_commuteLeq" (formula "9") (term "1,0,1,1"))
         (rule "applyEq" (formula "9") (term "0,0,0,1,1,1") (ifseqformula "45"))
         (rule "inEqSimp_commuteGeq" (formula "9") (term "0,0,1,1,1"))
         (rule "applyEq" (formula "9") (term "1,0,1,1,1,1") (ifseqformula "45"))
         (rule "replace_known_left" (formula "9") (term "0,1,1,1,1") (ifseqformula "8"))
          (builtin "One Step Simplification" (formula "9"))
         (rule "inEqSimp_sepNegMonomial0" (formula "9") (term "0,0"))
         (rule "polySimp_mulLiterals" (formula "9") (term "0,0,0"))
         (rule "polySimp_elimOne" (formula "9") (term "0,0,0"))
         (rule "replace_known_left" (formula "9") (term "0,0") (ifseqformula "36"))
          (builtin "One Step Simplification" (formula "9") (ifInst ""  (formula "5")))
         (rule "true_left" (formula "9"))
         (rule "Definition_axiom_for_isBlockAligned_in_de_wiesler_Buffers" (formula "9") (term "0"))
          (builtin "One Step Simplification" (formula "9"))
         (rule "translateJavaMod" (formula "9") (term "0"))
         (rule "jmod_axiom" (formula "9") (term "0"))
         (rule "polySimp_mulLiterals" (formula "9") (term "1,0"))
         (rule "polySimp_sepNegMonomial" (formula "9"))
         (rule "polySimp_mulLiterals" (formula "9") (term "0"))
         (rule "newSym_eq" (formula "9") (inst "l=l_4") (inst "newSymDef=mul(de.wiesler.BucketPointers::lastReadOf(heap,
                                          self,
                                          bucket),
    Z(0(#)))"))
         (rule "times_zero_1" (formula "9") (term "1,1"))
         (rule "add_zero_right" (formula "9") (term "1"))
         (rule "applyEq" (formula "10") (term "0,0") (ifseqformula "9"))
         (rule "eqSymm" (formula "10"))
         (rule "applyEq" (formula "28") (term "0,0,0") (ifseqformula "10"))
         (rule "inEqSimp_homoInEq1" (formula "28") (term "0,0"))
         (rule "polySimp_mulLiterals" (formula "28") (term "1,0,0,0"))
         (rule "polySimp_addComm1" (formula "28") (term "0,0,0"))
         (rule "applyEq" (formula "5") (term "0,0,0,1,1,1") (ifseqformula "10"))
         (rule "inEqSimp_commuteLeq" (formula "5") (term "0,0,1,1,1"))
         (rule "applyEq" (formula "4") (term "1") (ifseqformula "10"))
         (rule "applyEq" (formula "5") (term "0,1,0,0,0,1,1") (ifseqformula "10"))
         (rule "inEqSimp_commuteGeq" (formula "5") (term "1,0,0,0,1,1"))
         (rule "applyEq" (formula "9") (term "0,0") (ifseqformula "10"))
         (rule "applyEq" (formula "28") (term "1,1,0") (ifseqformula "10"))
         (rule "polySimp_addComm0" (formula "28") (term "1,0"))
         (rule "applyEq" (formula "5") (term "0,1,0,1,1,1") (ifseqformula "10"))
         (rule "eqSymm" (formula "5") (term "1,0,1,1,1"))
         (rule "applyEq" (formula "5") (term "0,1,0,0,1,1") (ifseqformula "10"))
         (rule "inEqSimp_commuteLeq" (formula "5") (term "1,0,0,1,1"))
         (rule "inEqSimp_sepPosMonomial0" (formula "28") (term "0,0"))
         (rule "polySimp_mulComm0" (formula "28") (term "1,0,0"))
         (rule "polySimp_rightDist" (formula "28") (term "1,0,0"))
         (rule "polySimp_mulLiterals" (formula "28") (term "1,1,0,0"))
         (rule "mul_literals" (formula "28") (term "0,1,0,0"))
         (rule "elimGcdLeq" (formula "28") (term "0,0") (inst "elimGcdRightDiv=add(Z(neglit(1(#))), l_4)") (inst "elimGcdLeftDiv=l_3") (inst "elimGcd=Z(6(5(2(#))))"))
         (rule "mul_literals" (formula "28") (term "0,0,0,0,0,1,0,0,0"))
         (rule "polySimp_mulLiterals" (formula "28") (term "1,0,0,0,0,0"))
         (rule "sub_literals" (formula "28") (term "0,0,0,0,0,0,0,0,0"))
         (rule "polySimp_mulLiterals" (formula "28") (term "1,0,1,0,0,0"))
         (rule "mul_literals" (formula "28") (term "0,1,0,0,0,0,0,0,0,0"))
         (rule "polySimp_pullOutFactor0b" (formula "28") (term "0,1,0,0,0"))
         (rule "add_literals" (formula "28") (term "1,1,0,1,0,0,0"))
         (rule "times_zero_1" (formula "28") (term "1,0,1,0,0,0"))
         (rule "add_zero_right" (formula "28") (term "0,1,0,0,0"))
         (rule "polySimp_pullOutFactor0b" (formula "28") (term "0,0,0,0,0"))
         (rule "add_literals" (formula "28") (term "1,1,0,0,0,0,0"))
         (rule "times_zero_1" (formula "28") (term "1,0,0,0,0,0"))
         (rule "add_zero_right" (formula "28") (term "0,0,0,0,0"))
         (rule "polySimp_rightDist" (formula "28") (term "0,0,1,0,0,0"))
         (rule "mul_literals" (formula "28") (term "0,0,0,1,0,0,0"))
         (rule "polySimp_rightDist" (formula "28") (term "1,0,0,0,0,0,0"))
         (rule "mul_literals" (formula "28") (term "0,1,0,0,0,0,0,0"))
         (rule "polySimp_addAssoc" (formula "28") (term "0,1,0,0,0"))
         (rule "polySimp_addComm1" (formula "28") (term "0,0,1,0,0,0"))
         (rule "add_literals" (formula "28") (term "0,0,0,1,0,0,0"))
         (rule "polySimp_pullOutFactor0b" (formula "28") (term "0,1,0,0,0"))
         (rule "add_literals" (formula "28") (term "1,1,0,1,0,0,0"))
         (rule "times_zero_1" (formula "28") (term "1,0,1,0,0,0"))
         (rule "add_zero_right" (formula "28") (term "0,1,0,0,0"))
         (rule "qeq_literals" (formula "28") (term "1,0,0,0"))
          (builtin "One Step Simplification" (formula "28"))
         (rule "polySimp_addAssoc" (formula "28") (term "0,0,0,0,0"))
         (rule "add_literals" (formula "28") (term "0,0,0,0,0,0"))
         (rule "polySimp_addAssoc" (formula "28") (term "0,0,0,0"))
         (rule "polySimp_addComm1" (formula "28") (term "0,0,0,0,0"))
         (rule "add_literals" (formula "28") (term "0,0,0,0,0,0"))
         (rule "add_zero_left" (formula "28") (term "0,0,0,0,0"))
         (rule "polySimp_pullOutFactor0" (formula "28") (term "0,0,0,0"))
         (rule "add_literals" (formula "28") (term "1,0,0,0,0"))
         (rule "times_zero_1" (formula "28") (term "0,0,0,0"))
         (rule "leq_literals" (formula "28") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "28"))
         (rule "elimGcdGeq" (formula "5") (term "0,0,1,1,1") (inst "elimGcdRightDiv=l_4") (inst "elimGcdLeftDiv=l_0") (inst "elimGcd=Z(6(5(2(#))))"))
         (rule "polySimp_mulLiterals" (formula "5") (term "1,0,0,0,0,0,1,1,1"))
         (rule "mul_literals" (formula "5") (term "0,1,0,0,0,0,0,0,0,0,1,1,1"))
         (rule "sub_literals" (formula "5") (term "0,0,0,0,0,0,0,0,0,1,1,1"))
         (rule "polySimp_mulLiterals" (formula "5") (term "1,0,1,0,0,0,1,1,1"))
         (rule "mul_literals" (formula "5") (term "0,0,0,0,0,1,0,0,0,1,1,1"))
         (rule "polySimp_pullOutFactor0b" (formula "5") (term "0,0,0,0,0,1,1,1"))
         (rule "add_literals" (formula "5") (term "1,1,0,0,0,0,0,1,1,1"))
         (rule "times_zero_1" (formula "5") (term "1,0,0,0,0,0,1,1,1"))
         (rule "add_zero_right" (formula "5") (term "0,0,0,0,0,1,1,1"))
         (rule "polySimp_pullOutFactor0b" (formula "5") (term "0,1,0,0,0,1,1,1"))
         (rule "add_literals" (formula "5") (term "1,1,0,1,0,0,0,1,1,1"))
         (rule "times_zero_1" (formula "5") (term "1,0,1,0,0,0,1,1,1"))
         (rule "add_zero_right" (formula "5") (term "0,1,0,0,0,1,1,1"))
         (rule "polySimp_mulComm0" (formula "5") (term "1,0,0,0,0,0,0,1,1,1"))
         (rule "polySimp_pullOutFactor0b" (formula "5") (term "0,0,0,0,0,1,1,1"))
         (rule "add_literals" (formula "5") (term "1,1,0,0,0,0,0,1,1,1"))
         (rule "times_zero_1" (formula "5") (term "1,0,0,0,0,0,1,1,1"))
         (rule "add_zero_right" (formula "5") (term "0,0,0,0,0,1,1,1"))
         (rule "qeq_literals" (formula "5") (term "0,0,0,0,1,1,1"))
          (builtin "One Step Simplification" (formula "5"))
         (rule "polySimp_mulComm0" (formula "5") (term "0,0,0,0,0,1,1,1"))
         (rule "polySimp_pullOutFactor0" (formula "5") (term "0,0,0,0,1,1,1"))
         (rule "add_literals" (formula "5") (term "1,0,0,0,0,1,1,1"))
         (rule "times_zero_1" (formula "5") (term "0,0,0,0,1,1,1"))
         (rule "leq_literals" (formula "5") (term "0,0,0,1,1,1"))
          (builtin "One Step Simplification" (formula "5"))
         (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "8") (term "0"))
         (rule "translateJavaCastInt" (formula "8") (term "0,0"))
         (rule "castedGetAny" (formula "8") (term "0,0"))
         (rule "Contract_axiom_for_bucketStart_in_BucketPointers" (formula "1") (term "0"))
          (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "52")))
         (rule "translateJavaAddInt" (formula "1") (term "1,1,1,0,1,1,1"))
         (rule "translateJavaSubInt" (formula "1") (term "1,0,1,1,1,1,1"))
         (rule "polySimp_elimSub" (formula "1") (term "1,0,1,1,1,1,1"))
         (rule "mul_literals" (formula "1") (term "1,1,0,1,1,1,1,1"))
         (rule "polySimp_addComm1" (formula "1") (term "1,1,1,0,1,1,1"))
         (rule "add_literals" (formula "1") (term "0,1,1,1,0,1,1,1"))
         (rule "polySimp_addComm1" (formula "1") (term "1,0,1,1,1,1,1"))
         (rule "add_literals" (formula "1") (term "0,1,0,1,1,1,1,1"))
         (rule "add_zero_left" (formula "1") (term "1,0,1,1,1,1,1"))
         (rule "inEqSimp_ltToLeq" (formula "1") (term "0,0,1,1,1,1"))
         (rule "add_zero_right" (formula "1") (term "0,0,0,1,1,1,1"))
         (rule "polySimp_rightDist" (formula "1") (term "1,0,0,0,1,1,1,1"))
         (rule "mul_literals" (formula "1") (term "0,1,0,0,0,1,1,1,1"))
         (rule "polySimp_addAssoc" (formula "1") (term "0,0,0,1,1,1,1"))
         (rule "add_literals" (formula "1") (term "0,0,0,0,1,1,1,1"))
         (rule "add_zero_left" (formula "1") (term "0,0,0,1,1,1,1"))
         (rule "inEqSimp_ltToLeq" (formula "1") (term "0,0,1,1,1"))
         (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,0,0,1,1,1"))
         (rule "polySimp_addComm1" (formula "1") (term "0,0,0,1,1,1"))
         (rule "polySimp_addAssoc" (formula "1") (term "0,0,0,0,1,1,1"))
         (rule "add_literals" (formula "1") (term "0,0,0,0,0,1,1,1"))
         (rule "inEqSimp_commuteLeq" (formula "1") (term "1,0,0"))
         (rule "replace_known_left" (formula "1") (term "1,0,0") (ifseqformula "37"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "inEqSimp_commuteLeq" (formula "1") (term "1,0,0,1"))
         (rule "inEqSimp_commuteLeq" (formula "1") (term "1,0,1,1,1"))
         (rule "inEqSimp_commuteLeq" (formula "1") (term "1,0,1,1,1,1"))
         (rule "replace_known_left" (formula "1") (term "1,0,1,1,1,1") (ifseqformula "37"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "inEqSimp_commuteLeq" (formula "1") (term "0,0,0,1"))
         (rule "inEqSimp_commuteLeq" (formula "1") (term "1,1,1,1,1"))
         (rule "replace_known_left" (formula "1") (term "1,1,1,1,1") (ifseqformula "2"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "inEqSimp_homoInEq0" (formula "1") (term "0,0"))
         (rule "times_zero_2" (formula "1") (term "1,0,0,0"))
         (rule "add_zero_right" (formula "1") (term "0,0,0"))
         (rule "inEqSimp_sepNegMonomial0" (formula "1") (term "0,1,1,1"))
         (rule "polySimp_mulLiterals" (formula "1") (term "0,0,1,1,1"))
         (rule "polySimp_elimOne" (formula "1") (term "0,0,1,1,1"))
         (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "0,0"))
         (rule "mul_literals" (formula "1") (term "1,0,0"))
         (rule "inEqSimp_subsumption1" (formula "1") (term "0,0") (ifseqformula "35"))
         (rule "leq_literals" (formula "1") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "18")))
         (rule "true_left" (formula "1"))
         (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "1") (term "0"))
         (rule "translateJavaCastInt" (formula "1") (term "0,0"))
         (rule "castedGetAny" (formula "1") (term "0,0"))
         (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "1") (term "1"))
         (rule "translateJavaCastInt" (formula "1") (term "0,1"))
         (rule "castedGetAny" (formula "1") (term "0,1"))
         (rule "nnf_imp2or" (formula "26") (term "0"))
         (rule "commute_or" (formula "49") (term "1,0,0,0"))
         (rule "shift_paren_or" (formula "48") (term "0,0,0"))
         (rule "jdiv_axiom" (formula "44") (term "0"))
         (rule "polySimp_mulLiterals" (formula "44") (term "0,0,2,1"))
         (rule "eqSymm" (formula "44"))
         (rule "applyEq" (formula "44") (term "1") (ifseqformula "45"))
         (rule "inEqSimp_subsumption6" (formula "44") (term "0,0") (ifseqformula "40"))
         (rule "greater_literals" (formula "44") (term "0,0,0,0"))
          (builtin "One Step Simplification" (formula "44"))
         (rule "mul_literals" (formula "44") (term "1,0,0,0"))
         (rule "leq_literals" (formula "44") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "44"))
         (rule "polyDiv_pullOut" (formula "44") (term "0") (inst "polyDivCoeff=l_0"))
         (rule "polySimp_mulLiterals" (formula "44") (term "1,0,0,2,0"))
         (rule "equal_literals" (formula "44") (term "0,0"))
          (builtin "One Step Simplification" (formula "44"))
         (rule "polySimp_pullOutFactor0" (formula "44") (term "0,0,0"))
         (rule "add_literals" (formula "44") (term "1,0,0,0"))
         (rule "times_zero_1" (formula "44") (term "0,0,0"))
         (rule "div_literals" (formula "44") (term "0,0"))
         (rule "add_zero_left" (formula "44") (term "0"))
          (builtin "One Step Simplification" (formula "44"))
         (rule "true_left" (formula "44"))
         (rule "commute_or" (formula "48") (term "0,0,0,1,0"))
         (rule "lenNonNegative" (formula "46") (term "0"))
         (rule "inEqSimp_commuteLeq" (formula "46"))
         (rule "applyEq" (formula "46") (term "0") (ifseqformula "47"))
         (rule "inEqSimp_sepPosMonomial1" (formula "46"))
         (rule "mul_literals" (formula "46") (term "1"))
         (rule "inEqSimp_subsumption1" (formula "46") (ifseqformula "38"))
         (rule "leq_literals" (formula "46") (term "0"))
          (builtin "One Step Simplification" (formula "46"))
         (rule "true_left" (formula "46"))
         (rule "arrayLengthIsAShort" (formula "35") (term "0"))
         (rule "expand_inShort" (formula "35"))
         (rule "replace_short_MIN" (formula "35") (term "0,1"))
         (rule "replace_short_MAX" (formula "35") (term "1,0"))
         (rule "andLeft" (formula "35"))
         (rule "inEqSimp_commuteLeq" (formula "36"))
         (rule "inEqSimp_subsumption1" (formula "36") (ifseqformula "39"))
         (rule "leq_literals" (formula "36") (term "0"))
          (builtin "One Step Simplification" (formula "36"))
         (rule "true_left" (formula "36"))
         (rule "inEqSimp_exactShadow3" (formula "36") (ifseqformula "35"))
         (rule "polySimp_rightDist" (formula "36") (term "0,0"))
         (rule "polySimp_mulLiterals" (formula "36") (term "1,0,0"))
         (rule "mul_literals" (formula "36") (term "0,0,0"))
         (rule "polySimp_addComm1" (formula "36") (term "0"))
         (rule "add_literals" (formula "36") (term "0,0"))
         (rule "inEqSimp_sepNegMonomial1" (formula "36"))
         (rule "polySimp_mulLiterals" (formula "36") (term "0"))
         (rule "elimGcdLeq_antec" (formula "36") (inst "elimGcdRightDiv=Z(2(8(3(6(1(#))))))") (inst "elimGcdLeftDiv=bucket") (inst "elimGcd=Z(2(#))"))
         (rule "polySimp_mulLiterals" (formula "36") (term "1,0,1,0"))
         (rule "polySimp_mulLiterals" (formula "36") (term "1,0,0,0,0,1,0"))
         (rule "neg_literal" (formula "36") (term "0,0,0,0,0,1,0"))
         (rule "leq_literals" (formula "36") (term "0,0"))
          (builtin "One Step Simplification" (formula "36"))
         (rule "mul_literals" (formula "36") (term "1,0,0,0,0,0"))
         (rule "polySimp_addLiterals" (formula "36") (term "0,0,0,0"))
         (rule "add_literals" (formula "36") (term "0,0,0,0"))
         (rule "polySimp_pullOutFactor0b" (formula "36") (term "0,0"))
         (rule "add_literals" (formula "36") (term "1,1,0,0"))
         (rule "times_zero_1" (formula "36") (term "1,0,0"))
         (rule "add_zero_right" (formula "36") (term "0,0"))
         (rule "qeq_literals" (formula "36") (term "0"))
          (builtin "One Step Simplification" (formula "36"))
         (rule "inEqSimp_subsumption0" (formula "32") (ifseqformula "36"))
         (rule "leq_literals" (formula "32") (term "0"))
          (builtin "One Step Simplification" (formula "32"))
         (rule "true_left" (formula "32"))
         (rule "arrayLengthNotNegative" (formula "38") (term "0"))
         (rule "seqGetAlphaCast" (formula "43") (term "0"))
         (rule "castedGetAny" (formula "43") (term "0"))
          (builtin "One Step Simplification" (formula "43"))
         (rule "true_left" (formula "43"))
         (rule "seqGetAlphaCast" (formula "48") (term "0"))
         (rule "castedGetAny" (formula "48") (term "0"))
          (builtin "One Step Simplification" (formula "48"))
         (rule "true_left" (formula "48"))
         (rule "jdiv_axiom" (formula "27") (term "0"))
         (rule "polySimp_mulLiterals" (formula "27") (term "0,0,2,1"))
         (rule "eqSymm" (formula "27"))
         (rule "applyEq" (formula "27") (term "1") (ifseqformula "28"))
         (rule "polyDiv_pullOut" (formula "27") (term "1,0") (inst "polyDivCoeff=l_1"))
         (rule "polySimp_mulLiterals" (formula "27") (term "1,0,0,2,1,0"))
         (rule "equal_literals" (formula "27") (term "0,1,0"))
          (builtin "One Step Simplification" (formula "27"))
         (rule "polySimp_pullOutFactor0" (formula "27") (term "0,0,1,0"))
         (rule "add_literals" (formula "27") (term "1,0,0,1,0"))
         (rule "times_zero_1" (formula "27") (term "0,0,1,0"))
         (rule "div_literals" (formula "27") (term "0,1,0"))
         (rule "add_zero_left" (formula "27") (term "1,0"))
          (builtin "One Step Simplification" (formula "27"))
         (rule "polySimp_homoEq" (formula "27") (term "1"))
         (rule "polySimp_mulLiterals" (formula "27") (term "1,0,1"))
         (rule "polySimp_elimOne" (formula "27") (term "1,0,1"))
         (rule "polySimp_sepPosMonomial" (formula "27") (term "1"))
         (rule "polyDiv_pullOut" (formula "27") (term "0,1") (inst "polyDivCoeff=mul(l_1, Z(neglit(1(#))))"))
         (rule "equal_literals" (formula "27") (term "0,0,1"))
          (builtin "One Step Simplification" (formula "27"))
         (rule "polySimp_mulLiterals" (formula "27") (term "1,0,0,0,1"))
         (rule "polySimp_mulLiterals" (formula "27") (term "1,0,0,0,1"))
         (rule "polySimp_pullOutFactor0" (formula "27") (term "0,0,0,1"))
         (rule "add_literals" (formula "27") (term "1,0,0,0,1"))
         (rule "times_zero_1" (formula "27") (term "0,0,0,1"))
         (rule "div_literals" (formula "27") (term "0,0,1"))
         (rule "add_zero_left" (formula "27") (term "0,1"))
          (builtin "One Step Simplification" (formula "27"))
         (rule "true_left" (formula "27"))
         (rule "Definition_axiom_for_isSortedSeqTransitive_in_de_wiesler_Functions" (formula "25") (term "0") (inst "i=i") (inst "j=j"))
          (builtin "One Step Simplification" (formula "25"))
         (rule "expand_inInt" (formula "25") (term "1,0,0,1,0"))
         (rule "expand_inInt" (formula "25") (term "1,0,0"))
         (rule "replace_int_MIN" (formula "25") (term "0,1,1,0,0,1,0"))
         (rule "replace_int_MAX" (formula "25") (term "1,0,1,0,0,1,0"))
         (rule "replace_int_MAX" (formula "25") (term "1,0,1,0,0"))
         (rule "replace_int_MIN" (formula "25") (term "0,1,1,0,0"))
         (rule "translateJavaCastInt" (formula "25") (term "0,1,0,1,0"))
         (rule "translateJavaCastInt" (formula "25") (term "1,1,0,1,0"))
         (rule "castedGetAny" (formula "25") (term "0,1,0,1,0"))
         (rule "castedGetAny" (formula "25") (term "1,1,0,1,0"))
         (rule "inEqSimp_ltToLeq" (formula "25") (term "1,0,0,0,1,0"))
         (rule "polySimp_mulComm0" (formula "25") (term "1,0,0,1,0,0,0,1,0"))
         (rule "inEqSimp_ltToLeq" (formula "25") (term "1,0,0,0"))
         (rule "polySimp_mulComm0" (formula "25") (term "1,0,0,1,0,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "25") (term "0,0,0,0,1,0"))
         (rule "inEqSimp_commuteLeq" (formula "25") (term "0,0,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "25") (term "1,1,0,0,1,0"))
         (rule "inEqSimp_commuteLeq" (formula "25") (term "1,1,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "25") (term "1,0,1,0"))
         (rule "applyEq" (formula "25") (term "0,1,0,0,1,0,0,0,1,0") (ifseqformula "47"))
         (rule "polySimp_mulComm0" (formula "25") (term "1,0,0,1,0,0,0,1,0"))
         (rule "polySimp_rightDist" (formula "25") (term "1,0,0,1,0,0,0,1,0"))
         (rule "mul_literals" (formula "25") (term "0,1,0,0,1,0,0,0,1,0"))
         (rule "polySimp_addAssoc" (formula "25") (term "0,0,1,0,0,0,1,0"))
         (rule "add_literals" (formula "25") (term "0,0,0,1,0,0,0,1,0"))
         (rule "add_zero_left" (formula "25") (term "0,0,1,0,0,0,1,0"))
         (rule "applyEq" (formula "25") (term "0,1,0,0,1,0,0,0") (ifseqformula "47"))
         (rule "polySimp_mulComm0" (formula "25") (term "1,0,0,1,0,0,0"))
         (rule "polySimp_rightDist" (formula "25") (term "1,0,0,1,0,0,0"))
         (rule "mul_literals" (formula "25") (term "0,1,0,0,1,0,0,0"))
         (rule "polySimp_addAssoc" (formula "25") (term "0,0,1,0,0,0"))
         (rule "add_literals" (formula "25") (term "0,0,0,1,0,0,0"))
         (rule "add_zero_left" (formula "25") (term "0,0,1,0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "1,0,0,0,1,0"))
         (rule "polySimp_mulLiterals" (formula "25") (term "1,1,0,0,0,1,0"))
         (rule "polySimp_elimOne" (formula "25") (term "1,1,0,0,0,1,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "1,0,0,0"))
         (rule "polySimp_mulLiterals" (formula "25") (term "1,1,0,0,0"))
         (rule "polySimp_elimOne" (formula "25") (term "1,1,0,0,0"))
         (rule "Definition_axiom_for_isBlockAligned_in_de_wiesler_Buffers" (formula "24") (term "0"))
          (builtin "One Step Simplification" (formula "24"))
         (rule "translateJavaMod" (formula "24") (term "0"))
         (rule "jmod_axiom" (formula "24") (term "0"))
         (rule "polySimp_mulLiterals" (formula "24") (term "1,0"))
         (rule "applyEqRigid" (formula "24") (term "0,1,0") (ifseqformula "45"))
         (rule "polySimp_pullOutFactor0" (formula "24") (term "0"))
         (rule "add_literals" (formula "24") (term "1,0"))
         (rule "times_zero_1" (formula "24") (term "0"))
          (builtin "One Step Simplification" (formula "24"))
         (rule "true_left" (formula "24"))
         (rule "Class_invariant_axiom_for_de_wiesler_BucketPointers" (formula "19") (term "0"))
         (rule "replace_known_right" (formula "19") (term "0,0") (ifseqformula "50"))
          (builtin "One Step Simplification" (formula "19"))
         (rule "andLeft" (formula "19"))
         (rule "replace_known_left" (formula "3") (term "0") (ifseqformula "19"))
          (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "19")) (ifInst ""  (formula "20")))
         (rule "andLeft" (formula "3"))
         (rule "replace_known_left" (formula "14") (term "0") (ifseqformula "20"))
          (builtin "One Step Simplification" (formula "14"))
         (rule "andLeft" (formula "14"))
         (rule "andLeft" (formula "14"))
         (rule "andLeft" (formula "16"))
         (rule "replace_known_left" (formula "6") (term "0,0,0,0,1,1") (ifseqformula "3"))
          (builtin "One Step Simplification" (formula "6") (ifInst ""  (formula "23")) (ifInst ""  (formula "23")) (ifInst ""  (formula "4")) (ifInst ""  (formula "24")))
         (rule "andLeft" (formula "6"))
         (rule "andLeft" (formula "6"))
         (rule "replace_known_left" (formula "23") (term "0") (ifseqformula "25"))
          (builtin "One Step Simplification" (formula "23") (ifInst ""  (formula "4")) (ifInst ""  (formula "17")))
         (rule "andLeft" (formula "23"))
         (rule "andLeft" (formula "24"))
         (rule "replace_known_left" (formula "10") (term "0") (ifseqformula "27"))
          (builtin "One Step Simplification" (formula "10") (ifInst ""  (formula "17")))
         (rule "andLeft" (formula "10"))
         (rule "andLeft" (formula "11"))
         (rule "inEqSimp_exactShadow3" (formula "3") (ifseqformula "2"))
         (rule "times_zero_1" (formula "3") (term "0,0"))
         (rule "add_zero_left" (formula "3") (term "0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "3"))
         (rule "polySimp_mulLiterals" (formula "3") (term "1"))
         (rule "elimGcdGeq_antec" (formula "3") (inst "elimGcdRightDiv=mul(l_3, Z(neglit(1(#))))") (inst "elimGcdLeftDiv=l_2") (inst "elimGcd=Z(6(5(2(#))))"))
         (rule "polySimp_mulLiterals" (formula "3") (term "1,0,1,0"))
         (rule "mul_literals" (formula "3") (term "0,1,0,0,0,0,1,0"))
         (rule "leq_literals" (formula "3") (term "0,0"))
          (builtin "One Step Simplification" (formula "3"))
         (rule "polySimp_pullOutFactor0b" (formula "3") (term "0,0"))
         (rule "add_literals" (formula "3") (term "1,1,0,0"))
         (rule "times_zero_1" (formula "3") (term "1,0,0"))
         (rule "add_zero_right" (formula "3") (term "0,0"))
         (rule "polySimp_mulAssoc" (formula "3") (term "1,0,0,0"))
         (rule "polySimp_mulComm0" (formula "3") (term "0,1,0,0,0"))
         (rule "polySimp_mulLiterals" (formula "3") (term "1,0,0,0"))
         (rule "polySimp_pullOutFactor0b" (formula "3") (term "0,0"))
         (rule "add_literals" (formula "3") (term "1,1,0,0"))
         (rule "times_zero_1" (formula "3") (term "1,0,0"))
         (rule "add_zero_right" (formula "3") (term "0,0"))
         (rule "leq_literals" (formula "3") (term "0"))
          (builtin "One Step Simplification" (formula "3"))
         (rule "inEqSimp_subsumption1" (formula "64") (term "0") (ifseqformula "3"))
         (rule "inEqSimp_homoInEq0" (formula "64") (term "0,0"))
         (rule "polySimp_mulComm0" (formula "64") (term "1,0,0,0"))
         (rule "polySimp_rightDist" (formula "64") (term "1,0,0,0"))
         (rule "mul_literals" (formula "64") (term "0,1,0,0,0"))
         (rule "polySimp_mulLiterals" (formula "64") (term "1,1,0,0,0"))
         (rule "polySimp_elimOne" (formula "64") (term "1,1,0,0,0"))
         (rule "polySimp_addAssoc" (formula "64") (term "0,0,0"))
         (rule "polySimp_addComm0" (formula "64") (term "0,0,0,0"))
         (rule "polySimp_pullOutFactor2b" (formula "64") (term "0,0,0"))
         (rule "add_literals" (formula "64") (term "1,1,0,0,0"))
         (rule "times_zero_1" (formula "64") (term "1,0,0,0"))
         (rule "add_zero_right" (formula "64") (term "0,0,0"))
         (rule "qeq_literals" (formula "64") (term "0,0"))
          (builtin "One Step Simplification" (formula "64"))
         (rule "inEqSimp_leqRight" (formula "64"))
         (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
         (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0"))
         (rule "mul_literals" (formula "1") (term "0,1,0,0"))
         (rule "polySimp_elimOne" (formula "1") (term "1,1,0,0"))
         (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
         (rule "add_literals" (formula "1") (term "0,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "1"))
         (rule "polySimp_mulComm0" (formula "1") (term "1"))
         (rule "polySimp_rightDist" (formula "1") (term "1"))
         (rule "mul_literals" (formula "1") (term "0,1"))
         (rule "inEqSimp_subsumption1" (formula "4") (ifseqformula "1"))
         (rule "inEqSimp_homoInEq0" (formula "4") (term "0"))
         (rule "polySimp_mulLiterals" (formula "4") (term "1,0,0"))
         (rule "polySimp_elimOne" (formula "4") (term "1,0,0"))
         (rule "polySimp_pullOutFactor2b" (formula "4") (term "0,0"))
         (rule "add_literals" (formula "4") (term "1,1,0,0"))
         (rule "times_zero_1" (formula "4") (term "1,0,0"))
         (rule "add_zero_right" (formula "4") (term "0,0"))
         (rule "qeq_literals" (formula "4") (term "0"))
          (builtin "One Step Simplification" (formula "4"))
         (rule "true_left" (formula "4"))
         (rule "inEqSimp_exactShadow3" (formula "4") (ifseqformula "24"))
         (rule "times_zero_1" (formula "4") (term "0,0"))
         (rule "add_zero_left" (formula "4") (term "0"))
         (rule "inEqSimp_subsumption6" (formula "4") (ifseqformula "19"))
         (rule "greater_literals" (formula "4") (term "0,0"))
          (builtin "One Step Simplification" (formula "4"))
         (rule "times_zero_1" (formula "4") (term "1,0"))
         (rule "leq_literals" (formula "4") (term "0"))
          (builtin "One Step Simplification" (formula "4"))
         (rule "true_left" (formula "4"))
         (rule "inEqSimp_exactShadow3" (formula "4") (ifseqformula "7"))
         (rule "times_zero_1" (formula "4") (term "0,0"))
         (rule "add_zero_left" (formula "4") (term "0"))
         (rule "elimGcdGeq_antec" (formula "4") (inst "elimGcdRightDiv=Z(0(#))") (inst "elimGcdLeftDiv=l_4") (inst "elimGcd=Z(6(5(2(#))))"))
         (rule "polySimp_mulLiterals" (formula "4") (term "1,0,1,0"))
         (rule "add_zero_right" (formula "4") (term "0,0,0,1,0"))
         (rule "leq_literals" (formula "4") (term "0,0"))
          (builtin "One Step Simplification" (formula "4"))
         (rule "times_zero_1" (formula "4") (term "1,0,0,0,0"))
         (rule "add_zero_right" (formula "4") (term "0,0,0,0"))
         (rule "polySimp_pullOutFactor0b" (formula "4") (term "0,0"))
         (rule "add_literals" (formula "4") (term "1,1,0,0"))
         (rule "times_zero_1" (formula "4") (term "1,0,0"))
         (rule "add_zero_right" (formula "4") (term "0,0"))
         (rule "leq_literals" (formula "4") (term "0"))
          (builtin "One Step Simplification" (formula "4"))
         (rule "inEqSimp_exactShadow3" (formula "6") (ifseqformula "21"))
         (rule "polySimp_mulComm0" (formula "6") (term "0,0"))
         (rule "polySimp_addComm0" (formula "6") (term "0"))
         (rule "inEqSimp_sepNegMonomial1" (formula "6"))
         (rule "polySimp_mulLiterals" (formula "6") (term "0"))
         (rule "polySimp_elimOne" (formula "6") (term "0"))
         (rule "inEqSimp_exactShadow3" (formula "21") (ifseqformula "22"))
         (rule "polySimp_mulComm0" (formula "21") (term "0,0"))
         (rule "polySimp_addComm0" (formula "21") (term "0"))
         (rule "inEqSimp_sepNegMonomial1" (formula "21"))
         (rule "polySimp_mulLiterals" (formula "21") (term "0"))
         (rule "polySimp_elimOne" (formula "21") (term "0"))
         (rule "inEqSimp_exactShadow3" (formula "28") (ifseqformula "6"))
         (rule "polySimp_mulAssoc" (formula "28") (term "0,0"))
         (rule "polySimp_mulComm0" (formula "28") (term "0,0,0"))
         (rule "polySimp_mulLiterals" (formula "28") (term "0,0"))
         (rule "polySimp_addComm0" (formula "28") (term "0"))
         (rule "inEqSimp_sepNegMonomial1" (formula "28"))
         (rule "polySimp_mulLiterals" (formula "28") (term "0"))
         (rule "elimGcdLeq_antec" (formula "28") (inst "elimGcdRightDiv=Z(7(0(6(8(8(3(8(#))))))))") (inst "elimGcdLeftDiv=l_3") (inst "elimGcd=Z(6(5(2(#))))"))
         (rule "polySimp_mulLiterals" (formula "28") (term "1,0,1,0"))
         (rule "polySimp_mulLiterals" (formula "28") (term "1,0,0,0,0,1,0"))
         (rule "neg_literal" (formula "28") (term "0,0,0,0,0,1,0"))
         (rule "leq_literals" (formula "28") (term "0,0"))
          (builtin "One Step Simplification" (formula "28"))
         (rule "mul_literals" (formula "28") (term "1,0,0,0,0,0"))
         (rule "polySimp_addLiterals" (formula "28") (term "0,0,0,0"))
         (rule "add_zero_right" (formula "28") (term "0,0,0,0"))
         (rule "polySimp_pullOutFactor0b" (formula "28") (term "0,0"))
         (rule "add_literals" (formula "28") (term "1,1,0,0"))
         (rule "times_zero_1" (formula "28") (term "1,0,0"))
         (rule "add_zero_right" (formula "28") (term "0,0"))
         (rule "qeq_literals" (formula "28") (term "0"))
          (builtin "One Step Simplification" (formula "28"))
         (rule "inEqSimp_exactShadow3" (formula "10") (ifseqformula "6"))
         (rule "polySimp_mulAssoc" (formula "10") (term "0,0"))
         (rule "polySimp_mulComm0" (formula "10") (term "0,0,0"))
         (rule "polySimp_mulLiterals" (formula "10") (term "0,0"))
         (rule "polySimp_addComm0" (formula "10") (term "0"))
         (rule "inEqSimp_sepNegMonomial1" (formula "10"))
         (rule "polySimp_mulLiterals" (formula "10") (term "0"))
         (rule "elimGcdLeq_antec" (formula "10") (inst "elimGcdRightDiv=Z(7(0(6(8(8(3(8(#))))))))") (inst "elimGcdLeftDiv=l_4") (inst "elimGcd=Z(6(5(2(#))))"))
         (rule "polySimp_mulLiterals" (formula "10") (term "1,0,1,0"))
         (rule "neg_literal" (formula "10") (term "0,0,0,0,0,1,0"))
         (rule "leq_literals" (formula "10") (term "0,0"))
          (builtin "One Step Simplification" (formula "10"))
         (rule "polySimp_mulLiterals" (formula "10") (term "1,0,0,0,0,0"))
         (rule "mul_literals" (formula "10") (term "1,0,0,0,0,0"))
         (rule "polySimp_addLiterals" (formula "10") (term "0,0,0,0"))
         (rule "add_zero_right" (formula "10") (term "0,0,0,0"))
         (rule "polySimp_pullOutFactor0b" (formula "10") (term "0,0"))
         (rule "add_literals" (formula "10") (term "1,1,0,0"))
         (rule "times_zero_1" (formula "10") (term "1,0,0"))
         (rule "add_zero_right" (formula "10") (term "0,0"))
         (rule "qeq_literals" (formula "10") (term "0"))
          (builtin "One Step Simplification" (formula "10"))
         (rule "Definition_axiom_for_nextWriteOf_in_de_wiesler_BucketPointers" (formula "38") (term "0"))
         (rule "translateJavaAddInt" (formula "38") (term "0,2,0"))
         (rule "translateJavaMulInt" (formula "38") (term "0,0,2,0"))
         (rule "polySimp_mulComm0" (formula "38") (term "0,0,2,0"))
         (rule "polySimp_addComm0" (formula "38") (term "0,2,0"))
         (rule "applyEq" (formula "20") (term "0") (ifseqformula "38"))
         (rule "inEqSimp_homoInEq0" (formula "20"))
         (rule "polySimp_mulLiterals" (formula "20") (term "1,0"))
         (rule "polySimp_addComm1" (formula "20") (term "0"))
         (rule "polySimp_pullOutFactor0b" (formula "20") (term "0,0"))
         (rule "add_literals" (formula "20") (term "1,1,0,0"))
         (rule "times_zero_1" (formula "20") (term "1,0,0"))
         (rule "add_literals" (formula "20") (term "0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "20"))
         (rule "mul_literals" (formula "20") (term "1"))
         (rule "elimGcdGeq_antec" (formula "20") (inst "elimGcdRightDiv=Z(1(#))") (inst "elimGcdLeftDiv=l_2") (inst "elimGcd=Z(6(5(2(#))))"))
         (rule "polySimp_mulLiterals" (formula "20") (term "1,0,0,0,0,1,0"))
         (rule "polySimp_mulLiterals" (formula "20") (term "1,0,1,0"))
         (rule "leq_literals" (formula "20") (term "0,0"))
          (builtin "One Step Simplification" (formula "20"))
         (rule "mul_literals" (formula "20") (term "1,0,0,0,0,0"))
         (rule "polySimp_addLiterals" (formula "20") (term "0,0,0,0"))
         (rule "add_literals" (formula "20") (term "0,0,0,0"))
         (rule "polySimp_pullOutFactor0b" (formula "20") (term "0,0"))
         (rule "add_literals" (formula "20") (term "1,1,0,0"))
         (rule "times_zero_1" (formula "20") (term "1,0,0"))
         (rule "add_zero_right" (formula "20") (term "0,0"))
         (rule "leq_literals" (formula "20") (term "0"))
          (builtin "One Step Simplification" (formula "20"))
         (rule "Contract_axiom_for_bucketStart_in_BucketPointers" (formula "30") (term "0"))
          (builtin "One Step Simplification" (formula "30") (ifInst ""  (formula "36")) (ifInst ""  (formula "69")) (ifInst ""  (formula "33")) (ifInst ""  (formula "24")))
         (rule "translateJavaAddInt" (formula "30") (term "1,1,1,0,1,1"))
         (rule "translateJavaSubInt" (formula "30") (term "1,0,1,1,1,1"))
         (rule "polySimp_elimSub" (formula "30") (term "1,0,1,1,1,1"))
         (rule "mul_literals" (formula "30") (term "1,1,0,1,1,1,1"))
         (rule "polySimp_addComm1" (formula "30") (term "1,1,1,0,1,1"))
         (rule "add_literals" (formula "30") (term "0,1,1,1,0,1,1"))
         (rule "polySimp_addComm1" (formula "30") (term "1,0,1,1,1,1"))
         (rule "add_literals" (formula "30") (term "0,1,0,1,1,1,1"))
         (rule "add_zero_left" (formula "30") (term "1,0,1,1,1,1"))
         (rule "inEqSimp_ltToLeq" (formula "30") (term "0,0,1,1,1"))
         (rule "add_zero_right" (formula "30") (term "0,0,0,1,1,1"))
         (rule "polySimp_rightDist" (formula "30") (term "1,0,0,0,1,1,1"))
         (rule "mul_literals" (formula "30") (term "0,1,0,0,0,1,1,1"))
         (rule "polySimp_addAssoc" (formula "30") (term "0,0,0,1,1,1"))
         (rule "add_literals" (formula "30") (term "0,0,0,0,1,1,1"))
         (rule "add_zero_left" (formula "30") (term "0,0,0,1,1,1"))
         (rule "inEqSimp_ltToLeq" (formula "30") (term "0,0,1,1"))
         (rule "polySimp_mulComm0" (formula "30") (term "1,0,0,0,0,1,1"))
         (rule "polySimp_addComm1" (formula "30") (term "0,0,0,1,1"))
         (rule "polySimp_addAssoc" (formula "30") (term "0,0,0,0,1,1"))
         (rule "add_literals" (formula "30") (term "0,0,0,0,0,1,1"))
         (rule "inEqSimp_commuteLeq" (formula "30") (term "1,0,1"))
         (rule "replace_known_left" (formula "30") (term "1,0,1") (ifseqformula "7"))
          (builtin "One Step Simplification" (formula "30"))
         (rule "inEqSimp_commuteLeq" (formula "30") (term "1,0"))
         (rule "replace_known_left" (formula "30") (term "1,0") (ifseqformula "54"))
          (builtin "One Step Simplification" (formula "30"))
         (rule "inEqSimp_commuteLeq" (formula "30") (term "0,1"))
         (rule "replace_known_left" (formula "30") (term "0,1") (ifseqformula "32"))
          (builtin "One Step Simplification" (formula "30"))
         (rule "inEqSimp_commuteLeq" (formula "30") (term "1,0,1,1"))
         (rule "replace_known_left" (formula "30") (term "1,0,1,1") (ifseqformula "54"))
          (builtin "One Step Simplification" (formula "30"))
         (rule "inEqSimp_commuteLeq" (formula "30") (term "1,1,1"))
         (rule "inEqSimp_commuteLeq" (formula "30") (term "1,0,1"))
         (rule "inEqSimp_homoInEq0" (formula "30") (term "0"))
         (rule "times_zero_2" (formula "30") (term "1,0,0"))
         (rule "add_zero_right" (formula "30") (term "0,0"))
         (rule "inEqSimp_invertInEq0" (formula "30") (term "0,1,1"))
         (rule "polySimp_mulLiterals" (formula "30") (term "0,0,1,1"))
         (rule "mul_literals" (formula "30") (term "1,0,1,1"))
         (rule "polySimp_elimOne" (formula "30") (term "0,0,1,1"))
         (rule "replace_known_left" (formula "30") (term "0,1,1") (ifseqformula "50"))
          (builtin "One Step Simplification" (formula "30"))
         (rule "inEqSimp_sepNegMonomial0" (formula "30") (term "0,0,1"))
         (rule "polySimp_mulLiterals" (formula "30") (term "0,0,0,1"))
         (rule "polySimp_elimOne" (formula "30") (term "0,0,0,1"))
         (rule "replace_known_left" (formula "30") (term "0,1") (ifseqformula "34"))
          (builtin "One Step Simplification" (formula "30"))
         (rule "inEqSimp_sepPosMonomial1" (formula "30") (term "0"))
         (rule "mul_literals" (formula "30") (term "1,0"))
         (rule "inEqSimp_subsumption1" (formula "30") (term "0") (ifseqformula "50"))
         (rule "leq_literals" (formula "30") (term "0,0"))
          (builtin "One Step Simplification" (formula "30"))
         (rule "inEqSimp_exactShadow3" (formula "30") (ifseqformula "6"))
         (rule "polySimp_mulComm0" (formula "30") (term "0,0"))
         (rule "polySimp_addComm0" (formula "30") (term "0"))
         (rule "inEqSimp_sepNegMonomial1" (formula "30"))
         (rule "polySimp_mulLiterals" (formula "30") (term "0"))
         (rule "polySimp_elimOne" (formula "30") (term "0"))
         (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "31") (term "0"))
         (rule "translateJavaCastInt" (formula "31") (term "0,0"))
         (rule "castedGetAny" (formula "31") (term "0,0"))
         (rule "Contract_axiom_for_bucketStart_in_BucketPointers" (formula "28") (term "0"))
          (builtin "One Step Simplification" (formula "28") (ifInst ""  (formula "37")) (ifInst ""  (formula "70")) (ifInst ""  (formula "25")) (ifInst ""  (formula "24")))
         (rule "translateJavaAddInt" (formula "28") (term "1,1,1,0,1,1"))
         (rule "translateJavaSubInt" (formula "28") (term "1,0,1,1,1,1"))
         (rule "polySimp_elimSub" (formula "28") (term "1,0,1,1,1,1"))
         (rule "mul_literals" (formula "28") (term "1,1,0,1,1,1,1"))
         (rule "polySimp_addComm0" (formula "28") (term "1,1,1,0,1,1"))
         (rule "polySimp_addComm0" (formula "28") (term "1,0,1,1,1,1"))
         (rule "inEqSimp_ltToLeq" (formula "28") (term "0,0,1,1,1"))
         (rule "add_zero_right" (formula "28") (term "0,0,0,1,1,1"))
         (rule "polySimp_mulComm0" (formula "28") (term "1,0,0,0,1,1,1"))
         (rule "inEqSimp_ltToLeq" (formula "28") (term "0,0,1,1"))
         (rule "polySimp_mulComm0" (formula "28") (term "1,0,0,0,0,1,1"))
         (rule "polySimp_addComm1" (formula "28") (term "0,0,0,1,1"))
         (rule "inEqSimp_commuteLeq" (formula "28") (term "1,0"))
         (rule "inEqSimp_commuteLeq" (formula "28") (term "1,0,1,1,1"))
         (rule "inEqSimp_commuteLeq" (formula "28") (term "0,0"))
         (rule "replace_known_left" (formula "28") (term "0,0") (ifseqformula "51"))
          (builtin "One Step Simplification" (formula "28"))
         (rule "inEqSimp_commuteLeq" (formula "28") (term "1,0,1,1"))
         (rule "replace_known_left" (formula "28") (term "1,0,1,1") (ifseqformula "31"))
          (builtin "One Step Simplification" (formula "28"))
         (rule "inEqSimp_commuteLeq" (formula "28") (term "1,0,1"))
         (rule "replace_known_left" (formula "28") (term "1,0,1") (ifseqformula "23"))
          (builtin "One Step Simplification" (formula "28"))
         (rule "inEqSimp_commuteLeq" (formula "28") (term "0,1"))
         (rule "replace_known_left" (formula "28") (term "0,1") (ifseqformula "5"))
          (builtin "One Step Simplification" (formula "28"))
         (rule "inEqSimp_sepNegMonomial0" (formula "28") (term "0,0,1"))
         (rule "polySimp_mulLiterals" (formula "28") (term "0,0,0,1"))
         (rule "polySimp_elimOne" (formula "28") (term "0,0,0,1"))
         (rule "inEqSimp_subsumption1" (formula "28") (term "0") (ifseqformula "55"))
         (rule "inEqSimp_homoInEq0" (formula "28") (term "0,0"))
         (rule "polySimp_pullOutFactor1b" (formula "28") (term "0,0,0"))
         (rule "add_literals" (formula "28") (term "1,1,0,0,0"))
         (rule "times_zero_1" (formula "28") (term "1,0,0,0"))
         (rule "add_zero_right" (formula "28") (term "0,0,0"))
         (rule "qeq_literals" (formula "28") (term "0,0"))
          (builtin "One Step Simplification" (formula "28"))
         (rule "inEqSimp_subsumption1" (formula "28") (term "1,0") (ifseqformula "55"))
         (rule "inEqSimp_homoInEq0" (formula "28") (term "0,1,0"))
         (rule "polySimp_pullOutFactor1b" (formula "28") (term "0,0,1,0"))
         (rule "add_literals" (formula "28") (term "1,1,0,0,1,0"))
         (rule "times_zero_1" (formula "28") (term "1,0,0,1,0"))
         (rule "add_zero_right" (formula "28") (term "0,0,1,0"))
         (rule "qeq_literals" (formula "28") (term "0,1,0"))
          (builtin "One Step Simplification" (formula "28") (ifInst ""  (formula "26")))
         (rule "true_left" (formula "28"))
         (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "28") (term "0"))
         (rule "translateJavaCastInt" (formula "28") (term "0,0"))
         (rule "castedGetAny" (formula "28") (term "0,0"))
         (rule "inEqSimp_exactShadow3" (formula "27") (ifseqformula "28"))
         (rule "times_zero_1" (formula "27") (term "0,0"))
         (rule "add_zero_left" (formula "27") (term "0"))
         (rule "inEqSimp_subsumption6" (formula "27") (ifseqformula "21"))
         (rule "times_zero_1" (formula "27") (term "1,1,0"))
         (rule "greater_literals" (formula "27") (term "0,0"))
          (builtin "One Step Simplification" (formula "27"))
         (rule "leq_literals" (formula "27") (term "0"))
          (builtin "One Step Simplification" (formula "27"))
         (rule "true_left" (formula "27"))
         (rule "jdiv_axiom" (formula "40") (term "0"))
         (rule "polySimp_mulLiterals" (formula "40") (term "0,0,2,1"))
         (rule "eqSymm" (formula "40"))
         (rule "applyEqRigid" (formula "40") (term "1") (ifseqformula "41"))
         (rule "inEqSimp_subsumption6" (formula "40") (term "0,0") (ifseqformula "20"))
         (rule "mul_literals" (formula "40") (term "1,1,0,0,0"))
         (rule "greater_literals" (formula "40") (term "0,0,0,0"))
          (builtin "One Step Simplification" (formula "40"))
         (rule "leq_literals" (formula "40") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "40"))
         (rule "polyDiv_pullOut" (formula "40") (term "0") (inst "polyDivCoeff=l_2"))
         (rule "polySimp_mulLiterals" (formula "40") (term "1,0,0,2,0"))
         (rule "equal_literals" (formula "40") (term "0,0"))
          (builtin "One Step Simplification" (formula "40"))
         (rule "polySimp_homoEq" (formula "40"))
         (rule "polySimp_pullOutFactor0" (formula "40") (term "0,0,0,1,0"))
         (rule "add_literals" (formula "40") (term "1,0,0,0,1,0"))
         (rule "times_zero_1" (formula "40") (term "0,0,0,1,0"))
         (rule "div_literals" (formula "40") (term "0,0,1,0"))
         (rule "add_zero_left" (formula "40") (term "0,1,0"))
         (rule "polySimp_pullOutFactor1" (formula "40") (term "0"))
         (rule "add_literals" (formula "40") (term "1,0"))
         (rule "times_zero_1" (formula "40") (term "0"))
          (builtin "One Step Simplification" (formula "40"))
         (rule "true_left" (formula "40"))
         (rule "Definition_axiom_for_blockAligned_in_de_wiesler_Buffers" (formula "35") (term "0"))
          (builtin "One Step Simplification" (formula "35"))
         (rule "translateJavaSubInt" (formula "35") (term "0,0"))
         (rule "translateJavaUnaryMinusInt" (formula "35") (term "1,0"))
         (rule "neg_literal" (formula "35") (term "1,0"))
         (rule "translateJavaAddInt" (formula "35") (term "0,0,0"))
         (rule "polySimp_elimSub" (formula "35") (term "0,0"))
         (rule "mul_literals" (formula "35") (term "1,0,0"))
         (rule "polySimp_addLiterals" (formula "35") (term "0,0"))
         (rule "polySimp_addComm0" (formula "35") (term "0,0"))
         (rule "Contract_axiom_for_blockAligned_in_Buffers" (formula "27") (term "0"))
          (builtin "One Step Simplification" (formula "27"))
         (rule "translateJavaSubInt" (formula "27") (term "0,1,1,1"))
         (rule "polySimp_elimSub" (formula "27") (term "0,1,1,1"))
         (rule "polySimp_addComm0" (formula "27") (term "0,1,1,1"))
         (rule "inEqSimp_ltToLeq" (formula "27") (term "1,1,1"))
         (rule "mul_literals" (formula "27") (term "1,0,0,1,1,1"))
         (rule "add_literals" (formula "27") (term "0,0,1,1,1"))
         (rule "polySimp_addAssoc" (formula "27") (term "0,1,1,1"))
         (rule "inEqSimp_commuteLeq" (formula "27") (term "0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "27") (term "1,1,1"))
         (rule "polySimp_mulComm0" (formula "27") (term "1,1,1,1"))
         (rule "polySimp_rightDist" (formula "27") (term "1,1,1,1"))
         (rule "mul_literals" (formula "27") (term "0,1,1,1,1"))
         (rule "polySimp_mulLiterals" (formula "27") (term "1,1,1,1,1"))
         (rule "polySimp_elimOne" (formula "27") (term "1,1,1,1,1"))
         (rule "Definition_axiom_for_blockAligned_in_de_wiesler_Buffers" (formula "28") (term "0"))
          (builtin "One Step Simplification" (formula "28"))
         (rule "translateJavaUnaryMinusInt" (formula "28") (term "1,0"))
         (rule "neg_literal" (formula "28") (term "1,0"))
         (rule "translateJavaAddInt" (formula "28") (term "0,0,0"))
         (rule "translateJavaSubInt" (formula "28") (term "0,0"))
         (rule "polySimp_elimSub" (formula "28") (term "0,0"))
         (rule "mul_literals" (formula "28") (term "1,0,0"))
         (rule "polySimp_addLiterals" (formula "28") (term "0,0"))
         (rule "polySimp_addComm0" (formula "28") (term "0,0"))
         (rule "Contract_axiom_for_bucketStart_in_BucketPointers" (formula "3") (term "0"))
          (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "38")) (ifInst ""  (formula "71")) (ifInst ""  (formula "26")) (ifInst ""  (formula "25")))
         (rule "translateJavaSubInt" (formula "3") (term "1,0,1,1,1,1"))
         (rule "translateJavaAddInt" (formula "3") (term "1,1,1,0,1,1"))
         (rule "polySimp_elimSub" (formula "3") (term "1,0,1,1,1,1"))
         (rule "mul_literals" (formula "3") (term "1,1,0,1,1,1,1"))
         (rule "polySimp_addComm0" (formula "3") (term "1,1,1,0,1,1"))
         (rule "polySimp_addComm0" (formula "3") (term "1,0,1,1,1,1"))
         (rule "inEqSimp_ltToLeq" (formula "3") (term "0,0,1,1,1"))
         (rule "add_zero_right" (formula "3") (term "0,0,0,1,1,1"))
         (rule "polySimp_mulComm0" (formula "3") (term "1,0,0,0,1,1,1"))
         (rule "inEqSimp_ltToLeq" (formula "3") (term "0,0,1,1"))
         (rule "polySimp_mulComm0" (formula "3") (term "1,0,0,0,0,1,1"))
         (rule "polySimp_addComm1" (formula "3") (term "0,0,0,1,1"))
         (rule "inEqSimp_commuteLeq" (formula "3") (term "0,0"))
         (rule "replace_known_left" (formula "3") (term "0,0") (ifseqformula "52"))
          (builtin "One Step Simplification" (formula "3"))
         (rule "inEqSimp_commuteLeq" (formula "3") (term "0"))
         (rule "inEqSimp_commuteLeq" (formula "3") (term "1,0,1"))
         (rule "replace_known_left" (formula "3") (term "1,0,1") (ifseqformula "24"))
          (builtin "One Step Simplification" (formula "3"))
         (rule "inEqSimp_commuteLeq" (formula "3") (term "1,0,1,1,1"))
         (rule "inEqSimp_commuteLeq" (formula "3") (term "0,1"))
         (rule "replace_known_left" (formula "3") (term "0,1") (ifseqformula "6"))
          (builtin "One Step Simplification" (formula "3"))
         (rule "inEqSimp_commuteLeq" (formula "3") (term "1,0,1"))
         (rule "replace_known_left" (formula "3") (term "1,0,1") (ifseqformula "32"))
          (builtin "One Step Simplification" (formula "3"))
         (rule "inEqSimp_sepNegMonomial0" (formula "3") (term "0,0,1"))
         (rule "polySimp_mulLiterals" (formula "3") (term "0,0,0,1"))
         (rule "polySimp_elimOne" (formula "3") (term "0,0,0,1"))
         (rule "inEqSimp_subsumption1" (formula "3") (term "0") (ifseqformula "56"))
         (rule "inEqSimp_homoInEq0" (formula "3") (term "0,0"))
         (rule "polySimp_pullOutFactor1b" (formula "3") (term "0,0,0"))
         (rule "add_literals" (formula "3") (term "1,1,0,0,0"))
         (rule "times_zero_1" (formula "3") (term "1,0,0,0"))
         (rule "add_zero_right" (formula "3") (term "0,0,0"))
         (rule "qeq_literals" (formula "3") (term "0,0"))
          (builtin "One Step Simplification" (formula "3"))
         (rule "inEqSimp_subsumption1" (formula "3") (term "1,0") (ifseqformula "56"))
         (rule "inEqSimp_homoInEq0" (formula "3") (term "0,1,0"))
         (rule "polySimp_pullOutFactor1b" (formula "3") (term "0,0,1,0"))
         (rule "add_literals" (formula "3") (term "1,1,0,0,1,0"))
         (rule "times_zero_1" (formula "3") (term "1,0,0,1,0"))
         (rule "add_zero_right" (formula "3") (term "0,0,1,0"))
         (rule "qeq_literals" (formula "3") (term "0,1,0"))
          (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "27")))
         (rule "true_left" (formula "3"))
         (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "3") (term "0"))
         (rule "translateJavaCastInt" (formula "3") (term "0,0"))
         (rule "castedGetAny" (formula "3") (term "0,0"))
         (rule "jdiv_axiom" (formula "39") (term "0"))
         (rule "polySimp_mulLiterals" (formula "39") (term "0,0,2,1"))
         (rule "eqSymm" (formula "39"))
         (rule "applyEq" (formula "39") (term "1") (ifseqformula "40"))
         (rule "inEqSimp_subsumption6" (formula "39") (term "0,0") (ifseqformula "21"))
         (rule "mul_literals" (formula "39") (term "1,1,0,0,0"))
         (rule "greater_literals" (formula "39") (term "0,0,0,0"))
          (builtin "One Step Simplification" (formula "39"))
         (rule "leq_literals" (formula "39") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "39"))
         (rule "polyDiv_pullOut" (formula "39") (term "0") (inst "polyDivCoeff=l_3"))
         (rule "equal_literals" (formula "39") (term "0,0"))
          (builtin "One Step Simplification" (formula "39"))
         (rule "polySimp_mulLiterals" (formula "39") (term "1,0,0,0"))
         (rule "polySimp_homoEq" (formula "39"))
         (rule "polySimp_pullOutFactor0" (formula "39") (term "0,0,0,1,0"))
         (rule "add_literals" (formula "39") (term "1,0,0,0,1,0"))
         (rule "times_zero_1" (formula "39") (term "0,0,0,1,0"))
         (rule "div_literals" (formula "39") (term "0,0,1,0"))
         (rule "add_zero_left" (formula "39") (term "0,1,0"))
         (rule "polySimp_pullOutFactor1" (formula "39") (term "0"))
         (rule "add_literals" (formula "39") (term "1,0"))
         (rule "times_zero_1" (formula "39") (term "0"))
          (builtin "One Step Simplification" (formula "39"))
         (rule "true_left" (formula "39"))
         (rule "Definition_axiom_for_blockAligned_in_de_wiesler_Buffers" (formula "8") (term "0"))
          (builtin "One Step Simplification" (formula "8"))
         (rule "translateJavaSubInt" (formula "8") (term "0,0"))
         (rule "translateJavaUnaryMinusInt" (formula "8") (term "1,0"))
         (rule "neg_literal" (formula "8") (term "1,0"))
         (rule "translateJavaAddInt" (formula "8") (term "0,0,0"))
         (rule "polySimp_elimSub" (formula "8") (term "0,0"))
         (rule "mul_literals" (formula "8") (term "1,0,0"))
         (rule "polySimp_addLiterals" (formula "8") (term "0,0"))
         (rule "polySimp_addComm0" (formula "8") (term "0,0"))
         (rule "nnf_notAnd" (formula "44") (term "0,0"))
         (rule "Contract_axiom_for_bucketStart_in_BucketPointers" (formula "13") (term "0,1"))
          (builtin "One Step Simplification" (formula "13") (ifInst ""  (formula "38")) (ifInst ""  (formula "71")) (ifInst ""  (formula "26")) (ifInst ""  (formula "25")))
         (rule "translateJavaAddInt" (formula "13") (term "1,1,1,0,1,1"))
         (rule "translateJavaSubInt" (formula "13") (term "1,0,1,1,1,1"))
         (rule "polySimp_elimSub" (formula "13") (term "1,0,1,1,1,1"))
         (rule "mul_literals" (formula "13") (term "1,1,0,1,1,1,1"))
         (rule "polySimp_addComm0" (formula "13") (term "1,1,1,0,1,1"))
         (rule "polySimp_addComm0" (formula "13") (term "1,0,1,1,1,1"))
         (rule "inEqSimp_ltToLeq" (formula "13") (term "0,0,1,1,1"))
         (rule "add_zero_right" (formula "13") (term "0,0,0,1,1,1"))
         (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,0,1,1,1"))
         (rule "inEqSimp_ltToLeq" (formula "13") (term "0,0,1,1"))
         (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,0,0,1,1"))
         (rule "polySimp_addComm1" (formula "13") (term "0,0,0,1,1"))
         (rule "inEqSimp_commuteLeq" (formula "13") (term "1,0,1,1,1"))
         (rule "inEqSimp_commuteLeq" (formula "13") (term "1,0"))
         (rule "inEqSimp_commuteLeq" (formula "13") (term "0,0"))
         (rule "replace_known_left" (formula "13") (term "0,0") (ifseqformula "52"))
          (builtin "One Step Simplification" (formula "13"))
         (rule "inEqSimp_commuteLeq" (formula "13") (term "0,0,1"))
         (rule "replace_known_left" (formula "13") (term "0,0,1") (ifseqformula "5"))
          (builtin "One Step Simplification" (formula "13"))
         (rule "inEqSimp_commuteLeq" (formula "13") (term "0,1"))
         (rule "replace_known_left" (formula "13") (term "0,1") (ifseqformula "24"))
          (builtin "One Step Simplification" (formula "13"))
         (rule "inEqSimp_commuteLeq" (formula "13") (term "1,0,1"))
         (rule "replace_known_left" (formula "13") (term "1,0,1") (ifseqformula "32"))
          (builtin "One Step Simplification" (formula "13"))
         (rule "inEqSimp_sepNegMonomial0" (formula "13") (term "0,0,1"))
         (rule "polySimp_mulLiterals" (formula "13") (term "0,0,0,1"))
         (rule "polySimp_elimOne" (formula "13") (term "0,0,0,1"))
         (rule "inEqSimp_subsumption1" (formula "13") (term "0") (ifseqformula "56"))
         (rule "inEqSimp_homoInEq0" (formula "13") (term "0,0"))
         (rule "polySimp_pullOutFactor1b" (formula "13") (term "0,0,0"))
         (rule "add_literals" (formula "13") (term "1,1,0,0,0"))
         (rule "times_zero_1" (formula "13") (term "1,0,0,0"))
         (rule "add_zero_right" (formula "13") (term "0,0,0"))
         (rule "qeq_literals" (formula "13") (term "0,0"))
          (builtin "One Step Simplification" (formula "13"))
         (rule "inEqSimp_subsumption1" (formula "13") (term "1,0") (ifseqformula "56"))
         (rule "inEqSimp_homoInEq0" (formula "13") (term "0,1,0"))
         (rule "polySimp_pullOutFactor1b" (formula "13") (term "0,0,1,0"))
         (rule "add_literals" (formula "13") (term "1,1,0,0,1,0"))
         (rule "times_zero_1" (formula "13") (term "1,0,0,1,0"))
         (rule "add_zero_right" (formula "13") (term "0,0,1,0"))
         (rule "qeq_literals" (formula "13") (term "0,1,0"))
          (builtin "One Step Simplification" (formula "13") (ifInst ""  (formula "27")))
         (rule "true_left" (formula "13"))
         (rule "Definition_axiom_for_bucketStart_in_de_wiesler_BucketPointers" (formula "13") (term "0,1"))
         (rule "translateJavaCastInt" (formula "13") (term "0,0,1"))
         (rule "castedGetAny" (formula "13") (term "0,0,1"))
         (rule "Contract_axiom_for_lastReadOf_in_BucketPointers" (formula "19") (term "0"))
         (rule "translateJavaAddInt" (formula "19") (term "1,1,1,0,0,1,1"))
         (rule "translateJavaAddInt" (formula "19") (term "1,0,1,0,1,1"))
         (rule "replace_known_left" (formula "19") (term "1,0,0,0") (ifseqformula "48"))
          (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "38")) (ifInst ""  (formula "49")) (ifInst ""  (formula "71")) (ifInst ""  (formula "38")) (ifInst ""  (formula "39")))
         (rule "polySimp_addComm0" (formula "19") (term "1,1,1,0,0,1"))
         (rule "polySimp_addComm0" (formula "19") (term "1,0,1,0,1"))
         (rule "inEqSimp_ltToLeq" (formula "19") (term "1,0"))
         (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,1,0"))
         (rule "polySimp_addComm1" (formula "19") (term "0,1,0"))
         (rule "inEqSimp_commuteLeq" (formula "19") (term "0,1,1,1"))
         (rule "inEqSimp_commuteLeq" (formula "19") (term "0,0,0,0,1"))
         (rule "replace_known_left" (formula "19") (term "0,0,0,0,1") (ifseqformula "5"))
          (builtin "One Step Simplification" (formula "19"))
         (rule "inEqSimp_commuteLeq" (formula "19") (term "0,0"))
         (rule "replace_known_left" (formula "19") (term "0,0") (ifseqformula "52"))
          (builtin "One Step Simplification" (formula "19"))
         (rule "inEqSimp_commuteLeq" (formula "19") (term "0,0,1,1"))
         (rule "inEqSimp_commuteLeq" (formula "19") (term "1,0,1"))
         (rule "replace_known_left" (formula "19") (term "1,0,1") (ifseqformula "7"))
          (builtin "One Step Simplification" (formula "19"))
         (rule "inEqSimp_commuteLeq" (formula "19") (term "0,0,1"))
         (rule "applyEq" (formula "19") (term "0,0,1,1,1,1") (ifseqformula "20"))
         (rule "applyEq" (formula "19") (term "0,1,0,1,1") (ifseqformula "20"))
         (rule "eqSymm" (formula "19") (term "1,0,1,1"))
         (rule "applyEq" (formula "19") (term "1,0,0,1,1") (ifseqformula "20"))
         (rule "applyEq" (formula "19") (term "0,0,0,1") (ifseqformula "20"))
         (rule "inEqSimp_commuteGeq" (formula "19") (term "0,0,1"))
         (rule "replace_known_left" (formula "19") (term "0,0,1") (ifseqformula "9"))
          (builtin "One Step Simplification" (formula "19"))
         (rule "applyEq" (formula "19") (term "1,0,1,1,1") (ifseqformula "65"))
         (rule "applyEq" (formula "19") (term "0,0,0,1,1") (ifseqformula "65"))
         (rule "applyEq" (formula "19") (term "0,0,1") (ifseqformula "20"))
         (rule "inEqSimp_commuteLeq" (formula "19") (term "0,1"))
         (rule "replace_known_left" (formula "19") (term "0,1") (ifseqformula "11"))
          (builtin "One Step Simplification" (formula "19"))
         (rule "inEqSimp_sepNegMonomial0" (formula "19") (term "0"))
         (rule "polySimp_mulLiterals" (formula "19") (term "0,0"))
         (rule "polySimp_elimOne" (formula "19") (term "0,0"))
         (rule "replace_known_left" (formula "19") (term "0") (ifseqformula "56"))
          (builtin "One Step Simplification" (formula "19"))
         (rule "andLeft" (formula "19"))
         (rule "andLeft" (formula "20"))
         (rule "elimGcdGeq" (formula "19") (term "0") (inst "elimGcdRightDiv=l_4") (inst "elimGcdLeftDiv=l_0") (inst "elimGcd=Z(6(5(2(#))))"))
         (rule "polySimp_mulLiterals" (formula "19") (term "1,0,1,0,0"))
         (rule "sub_literals" (formula "19") (term "0,0,0,0,0,0,0,0"))
         (rule "mul_literals" (formula "19") (term "0,1,0,0,0,0,0,0,0"))
         (rule "polySimp_mulLiterals" (formula "19") (term "1,0,0,0,0"))
         (rule "mul_literals" (formula "19") (term "0,0,0,0,0,1,0,0"))
         (rule "polySimp_pullOutFactor0b" (formula "19") (term "0,0,0,0"))
         (rule "add_literals" (formula "19") (term "1,1,0,0,0,0"))
         (rule "times_zero_1" (formula "19") (term "1,0,0,0,0"))
         (rule "add_zero_right" (formula "19") (term "0,0,0,0"))
         (rule "polySimp_pullOutFactor0b" (formula "19") (term "0,1,0,0"))
         (rule "add_literals" (formula "19") (term "1,1,0,1,0,0"))
         (rule "times_zero_1" (formula "19") (term "1,0,1,0,0"))
         (rule "add_zero_right" (formula "19") (term "0,1,0,0"))
         (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,0,0,0"))
         (rule "polySimp_pullOutFactor0b" (formula "19") (term "0,0,0,0"))
         (rule "add_literals" (formula "19") (term "1,1,0,0,0,0"))
         (rule "times_zero_1" (formula "19") (term "1,0,0,0,0"))
         (rule "add_zero_right" (formula "19") (term "0,0,0,0"))
         (rule "qeq_literals" (formula "19") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "19"))
         (rule "polySimp_mulComm0" (formula "19") (term "0,0,0,0"))
         (rule "polySimp_pullOutFactor0" (formula "19") (term "0,0,0"))
         (rule "add_literals" (formula "19") (term "1,0,0,0"))
         (rule "times_zero_1" (formula "19") (term "0,0,0"))
         (rule "leq_literals" (formula "19") (term "0,0"))
          (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "12")))
         (rule "true_left" (formula "19"))
         (rule "inEqSimp_exactShadow3" (formula "19") (ifseqformula "26"))
         (rule "polySimp_mulAssoc" (formula "19") (term "0,0"))
         (rule "polySimp_mulComm0" (formula "19") (term "0,0,0"))
         (rule "polySimp_mulLiterals" (formula "19") (term "0,0"))
         (rule "polySimp_addComm0" (formula "19") (term "0"))
         (rule "inEqSimp_sepNegMonomial1" (formula "19"))
         (rule "polySimp_mulLiterals" (formula "19") (term "0"))
         (rule "inEqSimp_subsumption4" (formula "19") (ifseqformula "63"))
         (rule "greater_literals" (formula "19") (term "0,0"))
          (builtin "One Step Simplification" (formula "19"))
         (rule "mul_literals" (formula "19") (term "0,0"))
         (rule "leq_literals" (formula "19") (term "0"))
          (builtin "One Step Simplification" (formula "19"))
         (rule "true_left" (formula "19"))
         (rule "Definition_axiom_for_lastReadOf_in_de_wiesler_BucketPointers" (formula "21") (term "0"))
         (rule "translateJavaMulInt" (formula "21") (term "0,2,0"))
         (rule "polySimp_mulComm0" (formula "21") (term "0,2,0"))
         (rule "applyEq" (formula "21") (term "0") (ifseqformula "44"))
         (rule "polySimp_homoEq" (formula "21"))
         (rule "polySimp_mulComm0" (formula "21") (term "1,0"))
         (rule "polySimp_rightDist" (formula "21") (term "1,0"))
         (rule "polySimp_mulLiterals" (formula "21") (term "1,1,0"))
         (rule "polySimp_mulAssoc" (formula "21") (term "0,1,0"))
         (rule "polySimp_mulComm0" (formula "21") (term "0,0,1,0"))
         (rule "polySimp_mulLiterals" (formula "21") (term "0,1,0"))
         (rule "polySimp_addAssoc" (formula "21") (term "0"))
         (rule "polySimp_sepNegMonomial" (formula "21"))
         (rule "polySimp_mulLiterals" (formula "21") (term "0"))
         (rule "applyEq" (formula "43") (term "0,0") (ifseqformula "21"))
         (rule "applyEqRigid" (formula "3") (term "1,1") (ifseqformula "21"))
         (rule "polySimp_addAssoc" (formula "3") (term "1"))
         (rule "polySimp_addComm0" (formula "3") (term "0,1"))
         (rule "polySimp_pullOutFactor0b" (formula "3") (term "1"))
         (rule "add_literals" (formula "3") (term "1,1,1"))
         (rule "times_zero_1" (formula "3") (term "1,1"))
         (rule "add_zero_right" (formula "3") (term "1"))
         (rule "applyEq" (formula "44") (term "1,1") (ifseqformula "21"))
         (rule "polySimp_addAssoc" (formula "44") (term "1"))
         (rule "polySimp_addComm0" (formula "44") (term "0,1"))
         (rule "polySimp_pullOutFactor0b" (formula "44") (term "1"))
         (rule "add_literals" (formula "44") (term "1,1,1"))
         (rule "times_zero_1" (formula "44") (term "1,1"))
         (rule "add_zero_right" (formula "44") (term "1"))
         (rule "applyEq" (formula "13") (term "1,1,1") (ifseqformula "21"))
         (rule "polySimp_addAssoc" (formula "13") (term "1,1"))
         (rule "polySimp_addComm0" (formula "13") (term "0,1,1"))
         (rule "polySimp_pullOutFactor0b" (formula "13") (term "1,1"))
         (rule "add_literals" (formula "13") (term "1,1,1,1"))
         (rule "times_zero_1" (formula "13") (term "1,1,1"))
         (rule "add_zero_right" (formula "13") (term "1,1"))
         (rule "elimGcdEq" (formula "21") (inst "elimGcdRightDiv=add(l_4, mul(l_3, Z(neglit(1(#)))))") (inst "elimGcdLeftDiv=l_2") (inst "elimGcd=Z(6(5(2(#))))"))
          (builtin "One Step Simplification" (formula "21"))
         (rule "mul_literals" (formula "21") (term "0,1,0,1,0"))
         (rule "mul_literals" (formula "21") (term "0,1,0,0,1"))
         (rule "mul_literals" (formula "21") (term "0,1,0,0,0"))
         (rule "add_literals" (formula "21") (term "1,0,0"))
         (rule "polySimp_rightDist" (formula "21") (term "1,0,1,0"))
         (rule "polySimp_mulLiterals" (formula "21") (term "1,1,0,1,0"))
         (rule "polySimp_mulComm0" (formula "21") (term "0,1,0,1,0"))
         (rule "polySimp_rightDist" (formula "21") (term "1,0,0,1"))
         (rule "polySimp_mulLiterals" (formula "21") (term "1,1,0,0,1"))
         (rule "polySimp_mulComm0" (formula "21") (term "0,1,0,0,1"))
         (rule "polySimp_rightDist" (formula "21") (term "1,0,0,0"))
         (rule "polySimp_mulLiterals" (formula "21") (term "1,1,0,0,0"))
         (rule "polySimp_mulComm0" (formula "21") (term "0,1,0,0,0"))
         (rule "polySimp_addAssoc" (formula "21") (term "0,1,0"))
         (rule "polySimp_addComm1" (formula "21") (term "0,0,1,0"))
         (rule "polySimp_pullOutFactor0b" (formula "21") (term "0,1,0"))
         (rule "add_literals" (formula "21") (term "1,1,0,1,0"))
         (rule "times_zero_1" (formula "21") (term "1,0,1,0"))
         (rule "add_zero_right" (formula "21") (term "0,1,0"))
         (rule "polySimp_pullOutFactor0" (formula "21") (term "0,1,0"))
         (rule "add_literals" (formula "21") (term "1,0,1,0"))
         (rule "times_zero_1" (formula "21") (term "0,1,0"))
         (rule "qeq_literals" (formula "21") (term "1,0"))
          (builtin "One Step Simplification" (formula "21"))
         (rule "polySimp_addAssoc" (formula "21") (term "0,0"))
         (rule "polySimp_addComm1" (formula "21") (term "0,0,0"))
         (rule "polySimp_pullOutFactor0b" (formula "21") (term "0,0"))
         (rule "add_literals" (formula "21") (term "1,1,0,0"))
         (rule "times_zero_1" (formula "21") (term "1,0,0"))
         (rule "add_zero_right" (formula "21") (term "0,0"))
         (rule "polySimp_pullOutFactor0" (formula "21") (term "0,0"))
         (rule "add_literals" (formula "21") (term "1,0,0"))
         (rule "times_zero_1" (formula "21") (term "0,0"))
         (rule "leq_literals" (formula "21") (term "0"))
          (builtin "One Step Simplification" (formula "21"))
         (rule "andLeft" (formula "21"))
         (rule "polySimp_addAssoc" (formula "21") (term "0"))
         (rule "polySimp_addComm1" (formula "21") (term "0,0"))
         (rule "polySimp_pullOutFactor0b" (formula "21") (term "0"))
         (rule "add_literals" (formula "21") (term "1,1,0"))
         (rule "times_zero_1" (formula "21") (term "1,0"))
         (rule "add_zero_right" (formula "21") (term "0"))
         (rule "polySimp_pullOutFactor0" (formula "21") (term "0"))
         (rule "add_literals" (formula "21") (term "1,0"))
         (rule "times_zero_1" (formula "21") (term "0"))
          (builtin "One Step Simplification" (formula "21"))
         (rule "true_left" (formula "21"))
         (rule "applyEqRigid" (formula "13") (term "1,1,0") (ifseqformula "21"))
         (rule "polySimp_addAssoc" (formula "13") (term "1,0"))
         (rule "polySimp_addComm0" (formula "13") (term "0,1,0"))
         (rule "polySimp_pullOutFactor1b" (formula "13") (term "1,0"))
         (rule "add_literals" (formula "13") (term "1,1,1,0"))
         (rule "times_zero_1" (formula "13") (term "1,1,0"))
         (rule "add_zero_right" (formula "13") (term "1,0"))
         (rule "applyEqRigid" (formula "22") (term "0") (ifseqformula "21"))
         (rule "inEqSimp_homoInEq1" (formula "22"))
         (rule "polySimp_mulComm0" (formula "22") (term "1,0"))
         (rule "polySimp_rightDist" (formula "22") (term "1,0"))
         (rule "polySimp_mulLiterals" (formula "22") (term "1,1,0"))
         (rule "polySimp_elimOne" (formula "22") (term "1,1,0"))
         (rule "polySimp_mulComm0" (formula "22") (term "0,1,0"))
         (rule "polySimp_addAssoc" (formula "22") (term "0"))
         (rule "applyEq" (formula "1") (term "0") (ifseqformula "21"))
         (rule "inEqSimp_homoInEq1" (formula "1"))
         (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
         (rule "polySimp_rightDist" (formula "1") (term "1,0"))
         (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0"))
         (rule "polySimp_elimOne" (formula "1") (term "1,1,0"))
         (rule "polySimp_mulComm0" (formula "1") (term "0,1,0"))
         (rule "polySimp_addAssoc" (formula "1") (term "0"))
         (rule "polySimp_addComm1" (formula "1") (term "0,0"))
         (rule "polySimp_pullOutFactor2b" (formula "1") (term "0"))
         (rule "add_literals" (formula "1") (term "1,1,0"))
         (rule "times_zero_1" (formula "1") (term "1,0"))
         (rule "add_zero_right" (formula "1") (term "0"))
         (rule "applyEqRigid" (formula "43") (term "1") (ifseqformula "21"))
         (rule "inEqSimp_sepPosMonomial0" (formula "22"))
         (rule "polySimp_mulComm0" (formula "22") (term "1"))
         (rule "polySimp_rightDist" (formula "22") (term "1"))
         (rule "polySimp_mulLiterals" (formula "22") (term "1,1"))
         (rule "mul_literals" (formula "22") (term "0,1"))
         (rule "polySimp_elimOne" (formula "22") (term "1,1"))
         (rule "replace_known_left" (formula "48") (term "0,0") (ifseqformula "22"))
          (builtin "One Step Simplification" (formula "48"))
         (rule "eqSymm" (formula "48"))
         (rule "applyEqRigid" (formula "47") (term "0,0") (ifseqformula "48"))
         (rule "applyEqRigid" (formula "47") (term "0") (ifseqformula "43"))
         (rule "eqSymm" (formula "47"))
         (rule "applyEqRigid" (formula "48") (term "0,0") (ifseqformula "47"))
         (rule "polySimp_mulComm0" (formula "48") (term "0"))
         (rule "polySimp_rightDist" (formula "48") (term "0"))
         (rule "polySimp_mulLiterals" (formula "48") (term "1,0"))
         (rule "polySimp_homoEq" (formula "48"))
         (rule "polySimp_mulComm0" (formula "48") (term "1,0"))
         (rule "polySimp_mulComm0" (formula "48") (term "0,1,1,0"))
         (rule "polySimp_rightDist" (formula "48") (term "1,0"))
         (rule "polySimp_mulLiterals" (formula "48") (term "1,1,0"))
         (rule "polySimp_mulAssoc" (formula "48") (term "0,1,0"))
         (rule "polySimp_mulComm0" (formula "48") (term "0,0,1,0"))
         (rule "polySimp_mulLiterals" (formula "48") (term "0,1,0"))
         (rule "polySimp_addAssoc" (formula "48") (term "0"))
         (rule "polySimp_addComm1" (formula "48") (term "0,0"))
         (rule "polySimp_pullOutFactor0b" (formula "48") (term "0"))
         (rule "add_literals" (formula "48") (term "1,1,0"))
         (rule "times_zero_1" (formula "48") (term "1,0"))
         (rule "add_zero_right" (formula "48") (term "0"))
         (rule "polySimp_pullOutFactor0" (formula "48") (term "0"))
         (rule "add_literals" (formula "48") (term "1,0"))
         (rule "times_zero_1" (formula "48") (term "0"))
          (builtin "One Step Simplification" (formula "48"))
         (rule "true_left" (formula "48"))
         (rule "inEqSimp_sepNegMonomial0" (formula "1"))
         (rule "polySimp_mulLiterals" (formula "1") (term "0"))
         (rule "polySimp_elimOne" (formula "1") (term "0"))
         (rule "inEqSimp_contradInEq1" (formula "10") (ifseqformula "1"))
         (rule "qeq_literals" (formula "10") (term "0"))
          (builtin "One Step Simplification" (formula "10"))
         (rule "closeFalse" (formula "10"))
      )
      (branch "Usage"
          (builtin "One Step Simplification" (formula "13"))
         (rule "translateJavaSubInt" (formula "13") (term "0,1,0"))
         (rule "polySimp_elimSub" (formula "13") (term "0,1,0"))
         (rule "mul_literals" (formula "13") (term "1,0,1,0"))
         (rule "polySimp_addComm0" (formula "13") (term "0,1,0"))
         (rule "widening_identity_cast_5" (formula "13") (term "1"))
         (rule "assignment" (formula "13") (term "1"))
          (builtin "One Step Simplification" (formula "13"))
         (rule "eval_order_array_access1" (formula "13") (term "1") (inst "#v0=x_arr"))
         (rule "variableDeclarationAssign" (formula "13") (term "1"))
         (rule "variableDeclaration" (formula "13") (term "1") (newnames "x_arr_1"))
         (rule "assignment_read_attribute_this_final" (formula "13"))
          (builtin "One Step Simplification" (formula "13"))
         (rule "assignment_to_primitive_array_component" (formula "13"))
         (branch "Normal Execution (x_arr_1 != null)"
             (builtin "One Step Simplification" (formula "13"))
            (rule "methodCallReturn" (formula "13") (term "1"))
            (rule "assignment" (formula "13") (term "1"))
             (builtin "One Step Simplification" (formula "13"))
            (rule "methodCallEmpty" (formula "13") (term "1"))
            (rule "tryEmpty" (formula "13") (term "1"))
            (rule "emptyModality" (formula "13") (term "1"))
            (rule "andRight" (formula "13"))
            (branch "Case 1"
                (builtin "One Step Simplification" (formula "13"))
               (rule "inEqSimp_ltToLeq" (formula "9"))
               (rule "polySimp_mulComm0" (formula "9") (term "1,0,0"))
               (rule "polySimp_addComm1" (formula "9") (term "0"))
               (rule "inEqSimp_sepNegMonomial0" (formula "9"))
               (rule "polySimp_mulLiterals" (formula "9") (term "0"))
               (rule "polySimp_elimOne" (formula "9") (term "0"))
               (rule "inEqSimp_subsumption1" (formula "5") (ifseqformula "8"))
               (rule "leq_literals" (formula "5") (term "0"))
                (builtin "One Step Simplification" (formula "5"))
               (rule "true_left" (formula "5"))
               (rule "Contract_axiom_for_toReadCountOfBucket_in_BucketPointers" (formula "11") (term "0"))
               (rule "replace_known_left" (formula "1") (term "1,0,0,0") (ifseqformula "2"))
                (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "7")) (ifInst ""  (formula "3")) (ifInst ""  (formula "11")) (ifInst ""  (formula "7")) (ifInst ""  (formula "10")))
               (rule "inEqSimp_ltToLeq" (formula "1") (term "1,0"))
               (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,1,0"))
               (rule "polySimp_addComm1" (formula "1") (term "0,1,0"))
               (rule "inEqSimp_commuteLeq" (formula "1") (term "0,0"))
               (rule "replace_known_left" (formula "1") (term "0,0") (ifseqformula "8"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "inEqSimp_sepNegMonomial0" (formula "1") (term "0"))
               (rule "polySimp_mulLiterals" (formula "1") (term "0,0"))
               (rule "polySimp_elimOne" (formula "1") (term "0,0"))
               (rule "replace_known_left" (formula "1") (term "0") (ifseqformula "9"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "andLeft" (formula "1"))
               (rule "inEqSimp_strengthen1" (formula "1") (ifseqformula "13"))
               (rule "add_zero_right" (formula "1") (term "1"))
               (rule "inEqSimp_contradEq7" (formula "13") (ifseqformula "1"))
               (rule "times_zero_1" (formula "13") (term "1,0,0"))
               (rule "add_zero_right" (formula "13") (term "0,0"))
               (rule "leq_literals" (formula "13") (term "0"))
                (builtin "One Step Simplification" (formula "13"))
               (rule "false_right" (formula "13"))
               (rule "Free_class_invariant_axiom_for_de_wiesler_BucketPointers" (formula "11") (inst "b=b"))
                (builtin "One Step Simplification" (formula "11"))
               (rule "expand_inInt" (formula "11") (term "1,0,0,1"))
               (rule "replace_int_MAX" (formula "11") (term "1,0,1,0,0,1"))
               (rule "replace_int_MIN" (formula "11") (term "0,1,1,0,0,1"))
               (rule "andLeft" (formula "11"))
               (rule "andLeft" (formula "11"))
               (rule "andLeft" (formula "11"))
               (rule "andLeft" (formula "13"))
               (rule "andLeft" (formula "11"))
               (rule "andLeft" (formula "11"))
               (rule "andLeft" (formula "13"))
               (rule "andLeft" (formula "13"))
               (rule "andLeft" (formula "13"))
               (rule "translateJavaAddInt" (formula "17") (term "1"))
               (rule "translateJavaCastInt" (formula "18") (term "0"))
               (rule "translateJavaMulInt" (formula "11") (term "1"))
               (rule "translateJavaMulInt" (formula "12") (term "0"))
               (rule "translateJavaCastInt" (formula "15") (term "0"))
               (rule "translateJavaCastInt" (formula "14") (term "1"))
               (rule "polySimp_mulComm0" (formula "11") (term "1"))
               (rule "polySimp_mulComm0" (formula "12") (term "0"))
               (rule "polySimp_addComm0" (formula "17") (term "1"))
               (rule "castedGetAny" (formula "18") (term "0"))
               (rule "castedGetAny" (formula "15") (term "0"))
               (rule "castedGetAny" (formula "14") (term "1"))
               (rule "inEqSimp_ltToLeq" (formula "20") (term "1,0,0,0"))
               (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,1,0,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "20") (term "1,1,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "20") (term "0,0,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "13"))
               (rule "inEqSimp_commuteLeq" (formula "11"))
               (rule "inEqSimp_commuteLeq" (formula "14"))
               (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "1,0,0,0"))
               (rule "polySimp_mulComm0" (formula "20") (term "1,1,0,0,0"))
               (rule "polySimp_rightDist" (formula "20") (term "1,1,0,0,0"))
               (rule "polySimp_mulLiterals" (formula "20") (term "1,1,1,0,0,0"))
               (rule "mul_literals" (formula "20") (term "0,1,1,0,0,0"))
               (rule "polySimp_elimOne" (formula "20") (term "1,1,1,0,0,0"))
               (rule "elimGcdGeq_antec" (formula "11") (inst "elimGcd=Z(2(#))") (inst "elimGcdLeftDiv=int::final(self,
           de.wiesler.BucketPointers::$num_buckets)") (inst "elimGcdRightDiv=Z(0(#))"))
               (rule "leq_literals" (formula "11") (term "0,0"))
                (builtin "One Step Simplification" (formula "11"))
               (rule "times_zero_1" (formula "11") (term "1,0,0,0,0,0"))
               (rule "polySimp_mulLiterals" (formula "11") (term "1,0,0"))
               (rule "add_zero_right" (formula "11") (term "0,0,0,0"))
               (rule "add_zero_right" (formula "11") (term "0,0,0,0"))
               (rule "polySimp_pullOutFactor0b" (formula "11") (term "0,0"))
               (rule "add_literals" (formula "11") (term "1,1,0,0"))
               (rule "times_zero_1" (formula "11") (term "1,0,0"))
               (rule "add_zero_right" (formula "11") (term "0,0"))
               (rule "leq_literals" (formula "11") (term "0"))
                (builtin "One Step Simplification" (formula "11"))
               (rule "inEqSimp_exactShadow3" (formula "14") (ifseqformula "15"))
               (rule "polySimp_mulComm0" (formula "14") (term "0,0"))
               (rule "polySimp_addComm0" (formula "14") (term "0"))
               (rule "inEqSimp_sepNegMonomial1" (formula "14"))
               (rule "polySimp_mulLiterals" (formula "14") (term "0"))
               (rule "polySimp_elimOne" (formula "14") (term "0"))
               (rule "inEqSimp_exactShadow2" (formula "10") (ifseqformula "12"))
               (rule "greater_literals" (formula "10") (term "0"))
                (builtin "One Step Simplification" (formula "10"))
               (rule "polySimp_rightDist" (formula "10") (term "1,0,0"))
               (rule "mul_literals" (formula "10") (term "0,1,0,0"))
               (rule "polySimp_rightDist" (formula "10") (term "0,0"))
               (rule "polySimp_mulLiterals" (formula "10") (term "1,0,0"))
               (rule "mul_literals" (formula "10") (term "0,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "10"))
               (rule "polySimp_mulComm0" (formula "10") (term "1"))
               (rule "polySimp_rightDist" (formula "10") (term "1"))
               (rule "polySimp_mulLiterals" (formula "10") (term "1,1"))
               (rule "mul_literals" (formula "10") (term "0,1"))
               (rule "inEqSimp_exactShadow2" (formula "12") (ifseqformula "13"))
               (rule "greater_literals" (formula "12") (term "0"))
                (builtin "One Step Simplification" (formula "12"))
               (rule "mul_literals" (formula "12") (term "1,0,0"))
               (rule "times_zero_1" (formula "12") (term "0,0"))
               (rule "add_zero_left" (formula "12") (term "0"))
               (rule "nnf_imp2or" (formula "23") (term "0"))
               (rule "nnf_notAnd" (formula "23") (term "0,0"))
               (rule "nnf_notAnd" (formula "23") (term "0,0,0"))
               (rule "inEqSimp_notLeq" (formula "23") (term "1,0,0,0"))
               (rule "polySimp_rightDist" (formula "23") (term "1,0,0,1,0,0,0"))
               (rule "mul_literals" (formula "23") (term "0,1,0,0,1,0,0,0"))
               (rule "polySimp_addAssoc" (formula "23") (term "0,0,1,0,0,0"))
               (rule "add_literals" (formula "23") (term "0,0,0,1,0,0,0"))
               (rule "add_zero_left" (formula "23") (term "0,0,1,0,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "23") (term "1,0,0,0"))
               (rule "polySimp_mulLiterals" (formula "23") (term "1,1,0,0,0"))
               (rule "polySimp_elimOne" (formula "23") (term "1,1,0,0,0"))
               (rule "inEqSimp_notGeq" (formula "23") (term "0,0,0,0"))
               (rule "times_zero_1" (formula "23") (term "1,0,0,0,0,0,0"))
               (rule "add_literals" (formula "23") (term "0,0,0,0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "0,0,0,0"))
               (rule "mul_literals" (formula "23") (term "1,0,0,0,0"))
               (rule "nnf_notAnd" (formula "23") (term "1,0,0"))
               (rule "inEqSimp_notGeq" (formula "23") (term "1,1,0,0"))
               (rule "mul_literals" (formula "23") (term "1,0,0,1,1,0,0"))
               (rule "add_literals" (formula "23") (term "0,0,1,1,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "1,1,0,0"))
               (rule "mul_literals" (formula "23") (term "1,1,1,0,0"))
               (rule "inEqSimp_notLeq" (formula "23") (term "0,1,0,0"))
               (rule "mul_literals" (formula "23") (term "1,0,0,0,1,0,0"))
               (rule "add_literals" (formula "23") (term "0,0,0,1,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "23") (term "0,1,0,0"))
               (rule "mul_literals" (formula "23") (term "1,0,1,0,0"))
               (rule "Class_invariant_axiom_for_de_wiesler_BucketPointers" (formula "25"))
               (rule "notRight" (formula "25"))
               (rule "applyEq" (formula "13") (term "0,0") (ifseqformula "1"))
               (rule "applyEq" (formula "15") (term "0,1") (ifseqformula "1"))
               (rule "applyEq" (formula "11") (term "0,0") (ifseqformula "1"))
               (rule "inEqSimp_exactShadow2" (formula "14") (ifseqformula "15"))
               (rule "times_zero_1" (formula "14") (term "1,0,0,1"))
               (rule "greater_literals" (formula "14") (term "0"))
                (builtin "One Step Simplification" (formula "14"))
               (rule "times_zero_1" (formula "14") (term "0,0"))
               (rule "add_zero_left" (formula "14") (term "0"))
               (rule "inEqSimp_exactShadow2" (formula "12") (ifseqformula "15"))
               (rule "greater_literals" (formula "12") (term "0"))
                (builtin "One Step Simplification" (formula "12"))
               (rule "polySimp_rightDist" (formula "12") (term "1,0,0"))
               (rule "mul_literals" (formula "12") (term "0,1,0,0"))
               (rule "polySimp_rightDist" (formula "12") (term "0,0"))
               (rule "mul_literals" (formula "12") (term "0,0,0"))
               (rule "polySimp_mulLiterals" (formula "12") (term "1,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "12"))
               (rule "polySimp_mulComm0" (formula "12") (term "1"))
               (rule "polySimp_rightDist" (formula "12") (term "1"))
               (rule "mul_literals" (formula "12") (term "0,1"))
               (rule "polySimp_mulLiterals" (formula "12") (term "1,1"))
               (rule "Class_invariant_axiom_for_de_wiesler_BucketPointers" (formula "9"))
               (rule "notLeft" (formula "9"))
               (rule "close" (formula "24") (ifseqformula "1"))
            )
            (branch "Case 2"
                (builtin "One Step Simplification" (formula "13"))
               (rule "closeTrue" (formula "13"))
            )
         )
         (branch "Null Reference (x_arr_1 = null)"
            (rule "false_right" (formula "14"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "inEqSimp_ltToLeq" (formula "10"))
            (rule "polySimp_mulComm0" (formula "10") (term "1,0,0"))
            (rule "polySimp_addComm1" (formula "10") (term "0"))
            (rule "inEqSimp_sepNegMonomial0" (formula "10"))
            (rule "polySimp_mulLiterals" (formula "10") (term "0"))
            (rule "polySimp_elimOne" (formula "10") (term "0"))
            (rule "inEqSimp_subsumption1" (formula "6") (ifseqformula "9"))
            (rule "leq_literals" (formula "6") (term "0"))
             (builtin "One Step Simplification" (formula "6"))
            (rule "true_left" (formula "6"))
            (rule "Contract_axiom_for_toReadCountOfBucket_in_BucketPointers" (formula "12") (term "0"))
            (rule "replace_known_left" (formula "1") (term "0,1") (ifseqformula "8"))
             (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "8")) (ifInst ""  (formula "3")) (ifInst ""  (formula "4")) (ifInst ""  (formula "12")) (ifInst ""  (formula "11")))
            (rule "inEqSimp_ltToLeq" (formula "1") (term "1,0"))
            (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,1,0"))
            (rule "polySimp_addComm1" (formula "1") (term "0,1,0"))
            (rule "inEqSimp_commuteLeq" (formula "1") (term "0,0"))
            (rule "replace_known_left" (formula "1") (term "0,0") (ifseqformula "9"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "inEqSimp_sepNegMonomial0" (formula "1") (term "0"))
            (rule "polySimp_mulLiterals" (formula "1") (term "0,0"))
            (rule "polySimp_elimOne" (formula "1") (term "0,0"))
            (rule "replace_known_left" (formula "1") (term "0") (ifseqformula "10"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "andLeft" (formula "1"))
            (rule "inEqSimp_strengthen1" (formula "1") (ifseqformula "14"))
            (rule "add_zero_right" (formula "1") (term "1"))
            (rule "inEqSimp_contradEq7" (formula "14") (ifseqformula "1"))
            (rule "times_zero_1" (formula "14") (term "1,0,0"))
            (rule "add_zero_right" (formula "14") (term "0,0"))
            (rule "leq_literals" (formula "14") (term "0"))
             (builtin "One Step Simplification" (formula "14"))
            (rule "false_right" (formula "14"))
            (rule "Class_invariant_axiom_for_de_wiesler_BucketPointers" (formula "9"))
            (rule "notLeft" (formula "9"))
            (rule "close" (formula "12") (ifseqformula "3"))
         )
         (branch "Index Out of Bounds (x_arr_1 != null, but read_pos Out of Bounds!)"
            (rule "false_right" (formula "14"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "andLeft" (formula "1"))
            (rule "notLeft" (formula "1"))
            (rule "inEqSimp_ltToLeq" (formula "10"))
            (rule "polySimp_mulComm0" (formula "10") (term "1,0,0"))
            (rule "polySimp_addComm1" (formula "10") (term "0"))
            (rule "inEqSimp_ltToLeq" (formula "1") (term "1"))
            (rule "times_zero_1" (formula "1") (term "1,0,0,1"))
            (rule "add_zero_right" (formula "1") (term "0,0,1"))
            (rule "inEqSimp_sepNegMonomial0" (formula "10"))
            (rule "polySimp_mulLiterals" (formula "10") (term "0"))
            (rule "polySimp_elimOne" (formula "10") (term "0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1"))
            (rule "mul_literals" (formula "1") (term "1,1"))
            (rule "inEqSimp_subsumption1" (formula "6") (ifseqformula "9"))
            (rule "leq_literals" (formula "6") (term "0"))
             (builtin "One Step Simplification" (formula "6"))
            (rule "true_left" (formula "6"))
            (rule "inEqSimp_contradInEq5" (formula "1") (term "1") (ifseqformula "8"))
            (rule "times_zero_1" (formula "1") (term "1,1,0,1"))
            (rule "greater_literals" (formula "1") (term "0,0,1"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "qeq_literals" (formula "1") (term "0,1"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "Contract_axiom_for_toReadCountOfBucket_in_BucketPointers" (formula "13") (term "0"))
            (rule "replace_known_right" (formula "1") (term "0,1,0") (ifseqformula "13"))
             (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "8")) (ifInst ""  (formula "3")) (ifInst ""  (formula "4")) (ifInst ""  (formula "8")) (ifInst ""  (formula "11")))
            (rule "inEqSimp_ltToLeq" (formula "1") (term "1,0"))
            (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,1,0"))
            (rule "polySimp_addComm1" (formula "1") (term "0,1,0"))
            (rule "inEqSimp_commuteLeq" (formula "1") (term "0,0"))
            (rule "replace_known_left" (formula "1") (term "0,0") (ifseqformula "9"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "inEqSimp_sepNegMonomial0" (formula "1") (term "0"))
            (rule "polySimp_mulLiterals" (formula "1") (term "0,0"))
            (rule "polySimp_elimOne" (formula "1") (term "0,0"))
            (rule "replace_known_left" (formula "1") (term "0") (ifseqformula "10"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "andLeft" (formula "1"))
            (rule "inEqSimp_strengthen1" (formula "1") (ifseqformula "15"))
            (rule "add_zero_right" (formula "1") (term "1"))
            (rule "inEqSimp_contradEq7" (formula "15") (ifseqformula "1"))
            (rule "times_zero_1" (formula "15") (term "1,0,0"))
            (rule "add_zero_right" (formula "15") (term "0,0"))
            (rule "leq_literals" (formula "15") (term "0"))
             (builtin "One Step Simplification" (formula "15"))
            (rule "false_right" (formula "15"))
            (rule "Class_invariant_axiom_for_de_wiesler_BucketPointers" (formula "9"))
            (rule "notLeft" (formula "9"))
            (rule "Free_class_invariant_axiom_for_de_wiesler_BucketPointers" (formula "11") (inst "b=b"))
             (builtin "One Step Simplification" (formula "11"))
            (rule "expand_inInt" (formula "11") (term "1,0,0,1"))
            (rule "replace_int_MAX" (formula "11") (term "1,0,1,0,0,1"))
            (rule "replace_int_MIN" (formula "11") (term "0,1,1,0,0,1"))
            (rule "andLeft" (formula "11"))
            (rule "andLeft" (formula "11"))
            (rule "andLeft" (formula "11"))
            (rule "andLeft" (formula "13"))
            (rule "andLeft" (formula "11"))
            (rule "andLeft" (formula "11"))
            (rule "andLeft" (formula "13"))
            (rule "andLeft" (formula "13"))
            (rule "andLeft" (formula "13"))
            (rule "translateJavaAddInt" (formula "17") (term "1"))
            (rule "translateJavaCastInt" (formula "18") (term "0"))
            (rule "translateJavaMulInt" (formula "12") (term "0"))
            (rule "translateJavaMulInt" (formula "11") (term "1"))
            (rule "translateJavaCastInt" (formula "15") (term "0"))
            (rule "translateJavaCastInt" (formula "14") (term "1"))
            (rule "polySimp_mulComm0" (formula "12") (term "0"))
            (rule "polySimp_mulComm0" (formula "11") (term "1"))
            (rule "polySimp_addComm0" (formula "17") (term "1"))
            (rule "castedGetAny" (formula "18") (term "0"))
            (rule "castedGetAny" (formula "15") (term "0"))
            (rule "castedGetAny" (formula "14") (term "1"))
            (rule "inEqSimp_ltToLeq" (formula "20") (term "1,0,0,0"))
            (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,1,0,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "20") (term "1,1,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "20") (term "0,0,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "13"))
            (rule "inEqSimp_commuteLeq" (formula "11"))
            (rule "inEqSimp_commuteLeq" (formula "14"))
            (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "1,0,0,0"))
            (rule "polySimp_mulComm0" (formula "20") (term "1,1,0,0,0"))
            (rule "polySimp_rightDist" (formula "20") (term "1,1,0,0,0"))
            (rule "polySimp_mulLiterals" (formula "20") (term "1,1,1,0,0,0"))
            (rule "mul_literals" (formula "20") (term "0,1,1,0,0,0"))
            (rule "polySimp_elimOne" (formula "20") (term "1,1,1,0,0,0"))
            (rule "elimGcdGeq_antec" (formula "11") (inst "elimGcd=Z(2(#))") (inst "elimGcdLeftDiv=int::final(self,
           de.wiesler.BucketPointers::$num_buckets)") (inst "elimGcdRightDiv=Z(0(#))"))
            (rule "add_zero_right" (formula "11") (term "0,0,0,1,0"))
            (rule "leq_literals" (formula "11") (term "0,0"))
             (builtin "One Step Simplification" (formula "11"))
            (rule "times_zero_1" (formula "11") (term "1,0,0,0,0"))
            (rule "polySimp_mulLiterals" (formula "11") (term "1,0,0"))
            (rule "add_literals" (formula "11") (term "0,0,0,0"))
            (rule "polySimp_pullOutFactor0b" (formula "11") (term "0,0"))
            (rule "add_literals" (formula "11") (term "1,1,0,0"))
            (rule "times_zero_1" (formula "11") (term "1,0,0"))
            (rule "add_zero_right" (formula "11") (term "0,0"))
            (rule "leq_literals" (formula "11") (term "0"))
             (builtin "One Step Simplification" (formula "11"))
            (rule "inEqSimp_exactShadow3" (formula "14") (ifseqformula "15"))
            (rule "polySimp_mulComm0" (formula "14") (term "0,0"))
            (rule "polySimp_addComm0" (formula "14") (term "0"))
            (rule "inEqSimp_sepNegMonomial1" (formula "14"))
            (rule "polySimp_mulLiterals" (formula "14") (term "0"))
            (rule "polySimp_elimOne" (formula "14") (term "0"))
            (rule "inEqSimp_exactShadow2" (formula "10") (ifseqformula "12"))
            (rule "greater_literals" (formula "10") (term "0"))
             (builtin "One Step Simplification" (formula "10"))
            (rule "polySimp_rightDist" (formula "10") (term "1,0,0"))
            (rule "mul_literals" (formula "10") (term "0,1,0,0"))
            (rule "polySimp_rightDist" (formula "10") (term "0,0"))
            (rule "polySimp_mulLiterals" (formula "10") (term "1,0,0"))
            (rule "mul_literals" (formula "10") (term "0,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "10"))
            (rule "polySimp_mulComm0" (formula "10") (term "1"))
            (rule "polySimp_rightDist" (formula "10") (term "1"))
            (rule "mul_literals" (formula "10") (term "0,1"))
            (rule "polySimp_mulLiterals" (formula "10") (term "1,1"))
            (rule "inEqSimp_contradInEq1" (formula "3") (ifseqformula "10"))
            (rule "andLeft" (formula "3"))
            (rule "inEqSimp_homoInEq1" (formula "3"))
            (rule "polySimp_mulLiterals" (formula "3") (term "1,0"))
            (rule "polySimp_pullOutFactor0b" (formula "3") (term "0"))
            (rule "add_literals" (formula "3") (term "1,1,0"))
            (rule "times_zero_1" (formula "3") (term "1,0"))
            (rule "add_literals" (formula "3") (term "0"))
            (rule "leq_literals" (formula "3"))
            (rule "closeFalse" (formula "3"))
         )
      )
   )
   (branch "Null Reference (x_arr = null)"
      (rule "false_right" (formula "14"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "inEqSimp_ltToLeq" (formula "10"))
      (rule "polySimp_mulComm0" (formula "10") (term "1,0,0"))
      (rule "polySimp_addComm1" (formula "10") (term "0"))
      (rule "inEqSimp_sepNegMonomial0" (formula "10"))
      (rule "polySimp_mulLiterals" (formula "10") (term "0"))
      (rule "polySimp_elimOne" (formula "10") (term "0"))
      (rule "inEqSimp_subsumption1" (formula "6") (ifseqformula "9"))
      (rule "leq_literals" (formula "6") (term "0"))
       (builtin "One Step Simplification" (formula "6"))
      (rule "true_left" (formula "6"))
      (rule "Free_class_invariant_axiom_for_de_wiesler_BucketPointers" (formula "10") (inst "b=b"))
       (builtin "One Step Simplification" (formula "10"))
      (rule "expand_inInt" (formula "10") (term "1,0,0,1"))
      (rule "replace_int_MAX" (formula "10") (term "1,0,1,0,0,1"))
      (rule "replace_int_MIN" (formula "10") (term "0,1,1,0,0,1"))
      (rule "andLeft" (formula "10"))
      (rule "andLeft" (formula "10"))
      (rule "andLeft" (formula "10"))
      (rule "andLeft" (formula "12"))
      (rule "andLeft" (formula "10"))
      (rule "andLeft" (formula "10"))
      (rule "andLeft" (formula "12"))
      (rule "andLeft" (formula "12"))
      (rule "andLeft" (formula "12"))
      (rule "translateJavaAddInt" (formula "16") (term "1"))
      (rule "translateJavaCastInt" (formula "17") (term "0"))
      (rule "translateJavaMulInt" (formula "11") (term "0"))
      (rule "translateJavaMulInt" (formula "10") (term "1"))
      (rule "translateJavaCastInt" (formula "14") (term "0"))
      (rule "translateJavaCastInt" (formula "13") (term "1"))
      (rule "polySimp_mulComm0" (formula "11") (term "0"))
      (rule "polySimp_mulComm0" (formula "10") (term "1"))
      (rule "polySimp_addComm0" (formula "16") (term "1"))
      (rule "castedGetAny" (formula "17") (term "0"))
      (rule "castedGetAny" (formula "14") (term "0"))
      (rule "castedGetAny" (formula "13") (term "1"))
      (rule "inEqSimp_ltToLeq" (formula "19") (term "1,0,0,0"))
      (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,1,0,0,0"))
      (rule "inEqSimp_commuteLeq" (formula "19") (term "0,0,0,0"))
      (rule "inEqSimp_commuteLeq" (formula "19") (term "1,1,0,0"))
      (rule "inEqSimp_commuteLeq" (formula "12"))
      (rule "inEqSimp_commuteLeq" (formula "10"))
      (rule "inEqSimp_commuteLeq" (formula "13"))
      (rule "applyEq" (formula "11") (term "0,1") (ifseqformula "1"))
      (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "1,0,0,0"))
      (rule "polySimp_mulComm0" (formula "19") (term "1,1,0,0,0"))
      (rule "polySimp_rightDist" (formula "19") (term "1,1,0,0,0"))
      (rule "polySimp_mulLiterals" (formula "19") (term "1,1,1,0,0,0"))
      (rule "mul_literals" (formula "19") (term "0,1,1,0,0,0"))
      (rule "polySimp_elimOne" (formula "19") (term "1,1,1,0,0,0"))
      (rule "elimGcdGeq_antec" (formula "10") (inst "elimGcd=Z(2(#))") (inst "elimGcdLeftDiv=int::final(self,
           de.wiesler.BucketPointers::$num_buckets)") (inst "elimGcdRightDiv=Z(0(#))"))
      (rule "polySimp_mulLiterals" (formula "10") (term "1,0,1,0"))
      (rule "leq_literals" (formula "10") (term "0,0"))
       (builtin "One Step Simplification" (formula "10"))
      (rule "add_zero_right" (formula "10") (term "0,0,0,0"))
      (rule "times_zero_1" (formula "10") (term "1,0,0,0,0"))
      (rule "add_zero_right" (formula "10") (term "0,0,0,0"))
      (rule "polySimp_pullOutFactor0b" (formula "10") (term "0,0"))
      (rule "add_literals" (formula "10") (term "1,1,0,0"))
      (rule "times_zero_1" (formula "10") (term "1,0,0"))
      (rule "add_zero_right" (formula "10") (term "0,0"))
      (rule "leq_literals" (formula "10") (term "0"))
       (builtin "One Step Simplification" (formula "10"))
      (rule "inEqSimp_exactShadow3" (formula "13") (ifseqformula "14"))
      (rule "polySimp_mulComm0" (formula "13") (term "0,0"))
      (rule "polySimp_addComm0" (formula "13") (term "0"))
      (rule "inEqSimp_sepNegMonomial1" (formula "13"))
      (rule "polySimp_mulLiterals" (formula "13") (term "0"))
      (rule "polySimp_elimOne" (formula "13") (term "0"))
      (rule "inEqSimp_exactShadow2" (formula "10") (ifseqformula "11"))
      (rule "times_zero_1" (formula "10") (term "1,0,0,1"))
      (rule "greater_literals" (formula "10") (term "0"))
       (builtin "One Step Simplification" (formula "10"))
      (rule "times_zero_1" (formula "10") (term "0,0"))
      (rule "add_zero_left" (formula "10") (term "0"))
      (rule "inEqSimp_exactShadow2" (formula "9") (ifseqformula "12"))
      (rule "greater_literals" (formula "9") (term "0"))
       (builtin "One Step Simplification" (formula "9"))
      (rule "polySimp_rightDist" (formula "9") (term "1,0,0"))
      (rule "mul_literals" (formula "9") (term "0,1,0,0"))
      (rule "polySimp_rightDist" (formula "9") (term "0,0"))
      (rule "polySimp_mulLiterals" (formula "9") (term "1,0,0"))
      (rule "mul_literals" (formula "9") (term "0,0,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "9"))
      (rule "polySimp_mulComm0" (formula "9") (term "1"))
      (rule "polySimp_rightDist" (formula "9") (term "1"))
      (rule "polySimp_mulLiterals" (formula "9") (term "1,1"))
      (rule "mul_literals" (formula "9") (term "0,1"))
      (rule "nnf_imp2or" (formula "22") (term "0"))
      (rule "nnf_notAnd" (formula "22") (term "0,0"))
      (rule "nnf_notAnd" (formula "22") (term "0,0,0"))
      (rule "inEqSimp_notLeq" (formula "22") (term "1,0,0,0"))
      (rule "polySimp_rightDist" (formula "22") (term "1,0,0,1,0,0,0"))
      (rule "mul_literals" (formula "22") (term "0,1,0,0,1,0,0,0"))
      (rule "polySimp_addAssoc" (formula "22") (term "0,0,1,0,0,0"))
      (rule "add_literals" (formula "22") (term "0,0,0,1,0,0,0"))
      (rule "add_zero_left" (formula "22") (term "0,0,1,0,0,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "22") (term "1,0,0,0"))
      (rule "polySimp_mulLiterals" (formula "22") (term "1,1,0,0,0"))
      (rule "polySimp_elimOne" (formula "22") (term "1,1,0,0,0"))
      (rule "inEqSimp_notGeq" (formula "22") (term "0,0,0,0"))
      (rule "times_zero_1" (formula "22") (term "1,0,0,0,0,0,0"))
      (rule "add_literals" (formula "22") (term "0,0,0,0,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "0,0,0,0"))
      (rule "mul_literals" (formula "22") (term "1,0,0,0,0"))
      (rule "nnf_notAnd" (formula "22") (term "1,0,0"))
      (rule "inEqSimp_notLeq" (formula "22") (term "0,1,0,0"))
      (rule "mul_literals" (formula "22") (term "1,0,0,0,1,0,0"))
      (rule "add_literals" (formula "22") (term "0,0,0,1,0,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "22") (term "0,1,0,0"))
      (rule "mul_literals" (formula "22") (term "1,0,1,0,0"))
      (rule "inEqSimp_notGeq" (formula "22") (term "1,1,0,0"))
      (rule "mul_literals" (formula "22") (term "1,0,0,1,1,0,0"))
      (rule "add_literals" (formula "22") (term "0,0,1,1,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "1,1,0,0"))
      (rule "mul_literals" (formula "22") (term "1,1,1,0,0"))
      (rule "Class_invariant_axiom_for_de_wiesler_BucketPointers" (formula "7"))
      (rule "notLeft" (formula "7"))
      (rule "close" (formula "22") (ifseqformula "1"))
   )
   (branch "Index Out of Bounds (x_arr != null, but read_pos Out of Bounds!)"
      (rule "false_right" (formula "14"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "andLeft" (formula "1"))
      (rule "notLeft" (formula "1"))
      (rule "inEqSimp_ltToLeq" (formula "10"))
      (rule "polySimp_mulComm0" (formula "10") (term "1,0,0"))
      (rule "polySimp_addComm1" (formula "10") (term "0"))
      (rule "inEqSimp_ltToLeq" (formula "1") (term "1"))
      (rule "times_zero_1" (formula "1") (term "1,0,0,1"))
      (rule "add_zero_right" (formula "1") (term "0,0,1"))
      (rule "inEqSimp_sepNegMonomial0" (formula "10"))
      (rule "polySimp_mulLiterals" (formula "10") (term "0"))
      (rule "polySimp_elimOne" (formula "10") (term "0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1"))
      (rule "mul_literals" (formula "1") (term "1,1"))
      (rule "inEqSimp_subsumption1" (formula "6") (ifseqformula "9"))
      (rule "leq_literals" (formula "6") (term "0"))
       (builtin "One Step Simplification" (formula "6"))
      (rule "true_left" (formula "6"))
      (rule "inEqSimp_contradInEq5" (formula "1") (term "1") (ifseqformula "8"))
      (rule "times_zero_1" (formula "1") (term "1,1,0,1"))
      (rule "greater_literals" (formula "1") (term "0,0,1"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "qeq_literals" (formula "1") (term "0,1"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "Contract_axiom_for_toReadCountOfBucket_in_BucketPointers" (formula "13") (term "0"))
      (rule "replace_known_right" (formula "1") (term "0,1,0") (ifseqformula "13"))
       (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "8")) (ifInst ""  (formula "3")) (ifInst ""  (formula "4")) (ifInst ""  (formula "8")) (ifInst ""  (formula "11")))
      (rule "inEqSimp_ltToLeq" (formula "1") (term "1,0"))
      (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,1,0"))
      (rule "polySimp_addComm1" (formula "1") (term "0,1,0"))
      (rule "inEqSimp_commuteLeq" (formula "1") (term "0,0"))
      (rule "replace_known_left" (formula "1") (term "0,0") (ifseqformula "9"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "inEqSimp_sepNegMonomial0" (formula "1") (term "0"))
      (rule "polySimp_mulLiterals" (formula "1") (term "0,0"))
      (rule "polySimp_elimOne" (formula "1") (term "0,0"))
      (rule "replace_known_left" (formula "1") (term "0") (ifseqformula "10"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "andLeft" (formula "1"))
      (rule "inEqSimp_strengthen1" (formula "1") (ifseqformula "15"))
      (rule "add_zero_right" (formula "1") (term "1"))
      (rule "inEqSimp_contradEq7" (formula "15") (ifseqformula "1"))
      (rule "times_zero_1" (formula "15") (term "1,0,0"))
      (rule "add_zero_right" (formula "15") (term "0,0"))
      (rule "leq_literals" (formula "15") (term "0"))
       (builtin "One Step Simplification" (formula "15"))
      (rule "false_right" (formula "15"))
      (rule "Class_invariant_axiom_for_de_wiesler_BucketPointers" (formula "9"))
      (rule "notLeft" (formula "9"))
      (rule "Free_class_invariant_axiom_for_de_wiesler_BucketPointers" (formula "11") (inst "b=b"))
       (builtin "One Step Simplification" (formula "11"))
      (rule "expand_inInt" (formula "11") (term "1,0,0,1"))
      (rule "replace_int_MAX" (formula "11") (term "1,0,1,0,0,1"))
      (rule "replace_int_MIN" (formula "11") (term "0,1,1,0,0,1"))
      (rule "andLeft" (formula "11"))
      (rule "andLeft" (formula "11"))
      (rule "andLeft" (formula "11"))
      (rule "andLeft" (formula "13"))
      (rule "andLeft" (formula "11"))
      (rule "andLeft" (formula "11"))
      (rule "andLeft" (formula "13"))
      (rule "andLeft" (formula "13"))
      (rule "andLeft" (formula "13"))
      (rule "translateJavaAddInt" (formula "17") (term "1"))
      (rule "translateJavaCastInt" (formula "18") (term "0"))
      (rule "translateJavaMulInt" (formula "12") (term "0"))
      (rule "translateJavaMulInt" (formula "11") (term "1"))
      (rule "translateJavaCastInt" (formula "15") (term "0"))
      (rule "translateJavaCastInt" (formula "14") (term "1"))
      (rule "polySimp_mulComm0" (formula "12") (term "0"))
      (rule "polySimp_mulComm0" (formula "11") (term "1"))
      (rule "polySimp_addComm0" (formula "17") (term "1"))
      (rule "castedGetAny" (formula "18") (term "0"))
      (rule "castedGetAny" (formula "15") (term "0"))
      (rule "castedGetAny" (formula "14") (term "1"))
      (rule "inEqSimp_ltToLeq" (formula "20") (term "1,0,0,0"))
      (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,1,0,0,0"))
      (rule "inEqSimp_commuteLeq" (formula "20") (term "0,0,0,0"))
      (rule "inEqSimp_commuteLeq" (formula "20") (term "1,1,0,0"))
      (rule "inEqSimp_commuteLeq" (formula "13"))
      (rule "inEqSimp_commuteLeq" (formula "11"))
      (rule "inEqSimp_commuteLeq" (formula "14"))
      (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "1,0,0,0"))
      (rule "polySimp_mulComm0" (formula "20") (term "1,1,0,0,0"))
      (rule "polySimp_rightDist" (formula "20") (term "1,1,0,0,0"))
      (rule "polySimp_mulLiterals" (formula "20") (term "1,1,1,0,0,0"))
      (rule "mul_literals" (formula "20") (term "0,1,1,0,0,0"))
      (rule "polySimp_elimOne" (formula "20") (term "1,1,1,0,0,0"))
      (rule "elimGcdGeq_antec" (formula "11") (inst "elimGcd=Z(2(#))") (inst "elimGcdLeftDiv=int::final(self,
           de.wiesler.BucketPointers::$num_buckets)") (inst "elimGcdRightDiv=Z(0(#))"))
      (rule "add_zero_right" (formula "11") (term "0,0,0,1,0"))
      (rule "leq_literals" (formula "11") (term "0,0"))
       (builtin "One Step Simplification" (formula "11"))
      (rule "polySimp_mulLiterals" (formula "11") (term "1,0,0"))
      (rule "times_zero_1" (formula "11") (term "1,0,0,0,0"))
      (rule "add_zero_right" (formula "11") (term "0,0,0,0"))
      (rule "polySimp_pullOutFactor0b" (formula "11") (term "0,0"))
      (rule "add_literals" (formula "11") (term "1,1,0,0"))
      (rule "times_zero_1" (formula "11") (term "1,0,0"))
      (rule "add_zero_right" (formula "11") (term "0,0"))
      (rule "leq_literals" (formula "11") (term "0"))
       (builtin "One Step Simplification" (formula "11"))
      (rule "inEqSimp_exactShadow3" (formula "14") (ifseqformula "15"))
      (rule "polySimp_mulComm0" (formula "14") (term "0,0"))
      (rule "polySimp_addComm0" (formula "14") (term "0"))
      (rule "inEqSimp_sepNegMonomial1" (formula "14"))
      (rule "polySimp_mulLiterals" (formula "14") (term "0"))
      (rule "polySimp_elimOne" (formula "14") (term "0"))
      (rule "inEqSimp_exactShadow2" (formula "10") (ifseqformula "12"))
      (rule "greater_literals" (formula "10") (term "0"))
       (builtin "One Step Simplification" (formula "10"))
      (rule "polySimp_rightDist" (formula "10") (term "1,0,0"))
      (rule "mul_literals" (formula "10") (term "0,1,0,0"))
      (rule "polySimp_rightDist" (formula "10") (term "0,0"))
      (rule "polySimp_mulLiterals" (formula "10") (term "1,0,0"))
      (rule "mul_literals" (formula "10") (term "0,0,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "10"))
      (rule "polySimp_mulComm0" (formula "10") (term "1"))
      (rule "polySimp_rightDist" (formula "10") (term "1"))
      (rule "mul_literals" (formula "10") (term "0,1"))
      (rule "polySimp_mulLiterals" (formula "10") (term "1,1"))
      (rule "inEqSimp_contradInEq0" (formula "10") (ifseqformula "3"))
      (rule "andLeft" (formula "10"))
      (rule "inEqSimp_homoInEq1" (formula "10"))
      (rule "polySimp_mulLiterals" (formula "10") (term "1,0"))
      (rule "polySimp_pullOutFactor0b" (formula "10") (term "0"))
      (rule "add_literals" (formula "10") (term "1,1,0"))
      (rule "times_zero_1" (formula "10") (term "1,0"))
      (rule "add_literals" (formula "10") (term "0"))
      (rule "leq_literals" (formula "10"))
      (rule "closeFalse" (formula "10"))
   )
)
)
}
